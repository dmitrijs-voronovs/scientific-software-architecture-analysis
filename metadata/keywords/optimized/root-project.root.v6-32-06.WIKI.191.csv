quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,". ROOT: TH2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2D Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with a double per channel (see TH1 documentation) ; Definition at line 357 of file TH2.h. Public Member Functions;  TH2D ();  Constructor. ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2D (const TH2D &h2d);  Copy constructor. ;  ;  TH2D (const TMatrixDBase &m);  Constructor Construct a 2-D histogram from a TMatrixDBase. ;  ;  ~TH2D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2D.html:60,Guid,Guide,60,doc/master/classTH2D.html,https://root.cern,https://root.cern/doc/master/classTH2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2Editor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TH2Editor Class ReferenceGUI » ROOT Graphics Editor. ; Editor for changing TH2 histogram attributes, rebinning & fitting. ; For all possible draw options (there are a few which are not implementable in a graphical user interface) see THistPainter::Paint.; These changes can be made via the TH2Editor: Style Tab: 'Line' : change Line attributes (color, thickness) see TAttLineEditor 'Fill' : change Fill attributes (color, pattern) see TAttFillEditor 'Title' : TextEntry: set the title of the histogram 'Histogram': change the draw options of the histogram 'Plot' : Radiobutton: draw a 2D or 3D plot of the histogram according to the Plot dimension there will be different drawing possibilities (ComboBoxes/ CheckBoxes) 2d Plot: 'Contour' : ComboBox: draw a contour plot (None, Cont0..4) 'Cont #' : TGNumberEntry: set the number of Contours 2d Plot checkboxes: 'Arrow' : arrow mode. Shows gradient between adjacent cells 'Col' : a box is drawn for each cell with a color scale varying with contents 'Text' : Draw bin contents as text 'Box' : a box is drawn for each cell with surface proportional to contents 'Scat' : Draw a scatter-plot (default) 'Palette' : the color palette is drawn; 3d Plot: 'Type' : ComboBox: set histogram type Lego or Surface-Plot draw(Lego, Lego1..4, Surf, Surf1..5) see THistPainter::Paint 'Coords' : ComboBox: set the coordinate system (Cartesian, .. Spheric) see THistPainter::Paint 'Cont #' : TGNumberEntry: set the number of Contours (for e.g. Lego2 drawoption 3d Plot checkboxes: 'Errors' : draw errors in a cartesian lego plot 'Palette' : the color palette is drawn 'Front' : draw the front box of a cartesian lego plot 'Back' : draw the ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Editor.html:65,Guid,Guide,65,doc/master/classTH2Editor.html,https://root.cern,https://root.cern/doc/master/classTH2Editor.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2F Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2F Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with a float per channel (see TH1 documentation) ; Definition at line 307 of file TH2.h. Public Member Functions;  TH2F ();  Constructor. ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2F (const TH2F &h2f);  Copy constructor. ;  ;  TH2F (const TMatrixFBase &m);  Constructor. ;  ;  ~TH2F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2F.html:60,Guid,Guide,60,doc/master/classTH2F.html,https://root.cern,https://root.cern/doc/master/classTH2F.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2I Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2I Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with an int per channel (see TH1 documentation) ; Definition at line 225 of file TH2.h. Public Member Functions;  TH2I ();  Constructor. ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2I (const TH2I &h2i);  Copy constructor. ;  ;  ~TH2I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2I & operator= (const TH2I &h1);  Operator =. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2I.html:60,Guid,Guide,60,doc/master/classTH2I.html,https://root.cern,https://root.cern/doc/master/classTH2I.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2L Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2L Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with a long64 per channel (see TH1 documentation) ; Definition at line 267 of file TH2.h. Public Member Functions;  TH2L ();  Constructor. ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2L (const TH2L &h2l);  Copy constructor. ;  ;  ~TH2L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2L & operator= (const TH2L &h1);  Operator =. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2L.html:60,Guid,Guide,60,doc/master/classTH2L.html,https://root.cern,https://root.cern/doc/master/classTH2L.html,1,['Guid'],['Guide']
Usability,". ROOT: TH2Poly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TH2Poly Class ReferenceHistogram Library » Histogram classes. ; 2D Histogram with Polygonal Bins . Overview; TH2Poly is a 2D Histogram class (TH2) allowing to define polygonal bins of arbitrary shape.; Each bin in the TH2Poly histogram is a TH2PolyBin object. TH2PolyBin is a very simple class containing the vertices (stored as TGraphs or TMultiGraphs ) and contents of the polygonal bin as well as several related functions.; Essentially, a TH2Poly is a TList of TH2PolyBin objects with methods to manipulate them.; Bins are defined using one of the AddBin() methods. The bin definition should be done before filling.; The histogram can be filled with Fill(Double_t x, Double_t y, Double_t w) . w is the weight. If no weight is specified, it is assumed to be 1.; Not all histogram's area need to be binned. Filling an area without bins, will falls into the overflows. Adding a bin is not retroactive; it doesn't affect previous fillings. A Fill() call, that was previously ignored due to the lack of a bin at the specified location, is not reconsidered when that location is binned later.; If there are two overlapping bins, the first one in the list will be incremented by Fill().; The histogram may automatically extends its limits if a bin outside the histogram limits is added. This is done when the default constructor (with no arguments) is used. It generates a histogram with no limits along the X and Y axis. Adding bins to it will extend it up to a proper size.; TH2Poly implements a partitioning algorithm to speed up bins' filling (see the ""Partitioning Algorithm"" section for details). The partitioning algorithm divides the histogram into regions called cells. The bins that each cell intersec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2Poly.html:63,Guid,Guide,63,doc/master/classTH2Poly.html,https://root.cern,https://root.cern/doc/master/classTH2Poly.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TH2PolyBin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TH2PolyBin Class ReferenceHistogram Library » Histogram classes. ; Helper class to represent a bin in the TH2Poly histogram. ; Definition at line 25 of file TH2Poly.h. Public Member Functions;  TH2PolyBin ();  Default constructor. ;  ;  TH2PolyBin (TObject *poly, Int_t bin_number);  Normal constructor. ;  ;  ~TH2PolyBin () override;  Destructor. ;  ; void ClearContent ();  ; void Fill (Double_t w);  ; Double_t GetArea ();  Returns the area of the bin. ;  ; Int_t GetBinNumber () const;  ; Bool_t GetChanged () const;  ; Double_t GetContent () const;  ; TObject * GetPolygon () const;  ; Double_t GetXMax ();  Returns the maximum value for the x coordinates of the bin. ;  ; Double_t GetXMin ();  Returns the minimum value for the x coordinates of the bin. ;  ; Double_t GetYMax ();  Returns the maximum value for the y coordinates of the bin. ;  ; Double_t GetYMin ();  Returns the minimum value for the y coordinates of the bin. ;  ; TClass * IsA () const override;  ; Bool_t IsInside (Double_t x, Double_t y) const;  Return ""true"" if the point (x,y) is inside the bin. ;  ; void SetChanged (Bool_t flag);  ; void SetContent (Double_t content);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2PolyBin.html:66,Guid,Guide,66,doc/master/classTH2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTH2PolyBin.html,2,"['Clear', 'Guid']","['ClearContent', 'Guide']"
Usability,". ROOT: TH2S Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH2S Class ReferenceHistogram Library » Histogram classes. ; 2-D histogram with a short per channel (see TH1 documentation) ; Definition at line 182 of file TH2.h. Public Member Functions;  TH2S ();  Constructor. ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t *ybins);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup);  Constructor (see TH2::TH2 for explanation of parameters) ;  ;  TH2S (const TH2S &h2s);  Copy constructor The list of functions is not copied. ;  ;  ~TH2S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny) override;  Increment 2D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Double_t w) override;  Increment 2D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy. ;  ; TClass * IsA () const override;  ; TH2S & operator=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2S.html:60,Guid,Guide,60,doc/master/classTH2S.html,https://root.cern,https://root.cern/doc/master/classTH2S.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TH3 Class ReferenceHistogram Library » Histogram classes. ; The 3-D histogram classes derived from the 1-D histogram classes. ; All operations are supported (fill, fit). Drawing is currently restricted to one single option. A cloud of points is drawn. The number of points is proportional to cell content. TH3C a 3-D histogram with one byte per cell (char). Maximum bin content = 127; TH3S a 3-D histogram with two bytes per cell (short integer). Maximum bin content = 32767; TH3I a 3-D histogram with four bytes per cell (32 bit integer). Maximum bin content = INT_MAX (*); TH3L a 3-D histogram with eight bytes per cell (64 bit integer). Maximum bin content = LLONG_MAX (**); TH3F a 3-D histogram with four bytes per cell (float). Maximum precision 7 digits, maximum integer bin content = +/-16777216 (***); TH3D a 3-D histogram with eight bytes per cell (double). Maximum precision 14 digits, maximum integer bin content = +/-9007199254740992 (****). (*) INT_MAX = 2147483647 is the maximum value for a variable of type int.; (**) LLONG_MAX = 9223372036854775807 is the maximum value for a variable of type long64.; (***) 2^24 = 16777216 is the maximum integer that can be properly represented by a float32 with 23-bit mantissa.; (****) 2^53 = 9007199254740992 is the maximum integer that can be properly represented by a double64 with 52-bit mantissa. ; Definition at line 31 of file TH3.h. Public Member Functions;  ~TH3 () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; virtual void AddBinContent (Int_t binx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3.html:59,Guid,Guide,59,doc/master/classTH3.html,https://root.cern,https://root.cern/doc/master/classTH3.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3C Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3C Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a byte per channel (see TH1 documentation) ; Definition at line 157 of file TH3.h. Public Member Functions;  TH3C ();  Constructor. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3C (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3C (const TH3C &h3c);  Copy constructor. ;  ;  ~TH3C () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3C & operator= (const TH3C &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3C.html:60,Guid,Guide,60,doc/master/classTH3C.html,https://root.cern,https://root.cern/doc/master/classTH3C.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3D Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a double per channel (see TH1 documentation) ; Definition at line 363 of file TH3.h. Public Member Functions;  TH3D ();  Constructor. ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3D (const TH3D &h3d);  Copy constructor. ;  ;  ~TH3D () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w Passing an out-of-range bin leads to undefined behavior. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3D & operator= (const TH3D &h1);  Operator =. ;  ; void Reset (Option_t *op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3D.html:60,Guid,Guide,60,doc/master/classTH3D.html,https://root.cern,https://root.cern/doc/master/classTH3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3F Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3F Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a float per channel (see TH1 documentation) ; Definition at line 317 of file TH3.h. Public Member Functions;  TH3F ();  Constructor. ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3F (const TH3F &h3f);  Copy constructor. ;  ;  ~TH3F () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by a weight w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3F & operator= (const TH3F &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3F.html:60,Guid,Guide,60,doc/master/classTH3F.html,https://root.cern,https://root.cern/doc/master/classTH3F.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3I Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3I Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with an int per channel (see TH1 documentation) ; Definition at line 237 of file TH3.h. Public Member Functions;  TH3I ();  Constructor. ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3I (const TH3I &h3i);  Copy constructor. ;  ;  ~TH3I () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3I & operator= (const TH3I &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3I.html:60,Guid,Guide,60,doc/master/classTH3I.html,https://root.cern,https://root.cern/doc/master/classTH3I.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3L Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3L Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a long64 per channel (see TH1 documentation) ; Definition at line 278 of file TH3.h. Public Member Functions;  TH3L ();  Constructor. ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms (see TH3::TH3 for explanation of parameters) ;  ;  TH3L (const TH3L &h3l);  Copy constructor. ;  ;  ~TH3L () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3L & operator= (const TH3L &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3L.html:60,Guid,Guide,60,doc/master/classTH3L.html,https://root.cern,https://root.cern/doc/master/classTH3L.html,1,['Guid'],['Guide']
Usability,". ROOT: TH3S Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TH3S Class ReferenceHistogram Library » Histogram classes. ; 3-D histogram with a short per channel (see TH1 documentation) ; Definition at line 197 of file TH3.h. Public Member Functions;  TH3S ();  Constructor. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins);  Constructor for variable bin size 3-D histograms. ;  ;  TH3S (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup);  Constructor for fix bin size 3-D histograms. ;  ;  TH3S (const TH3S &h3s);  Copy Constructor. ;  ;  ~TH3S () override;  Destructor. ;  ; void AddBinContent (Int_t bin) override;  Increment bin content by 1. ;  ; void AddBinContent (Int_t bin, Double_t w) override;  Increment bin content by w. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz) override;  Increment 3D bin content by 1. ;  ; void AddBinContent (Int_t binx, Int_t biny, Int_t binz, Double_t w) override;  Increment 3D bin content by a weight w. ;  ; void Copy (TObject &hnew) const override;  Copy this 3-D histogram structure to newth3. ;  ; TClass * IsA () const override;  ; TH3S & operator= (const TH3S &h1);  Operator =. ;  ; void Reset (Option_t *option="""") override;  Reset this histogram: contents, errors, etc. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow Reallocate bin contents array. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH3S.html:60,Guid,Guide,60,doc/master/classTH3S.html,https://root.cern,https://root.cern/doc/master/classTH3S.html,1,['Guid'],['Guide']
Usability,". ROOT: THLimitsFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; THLimitsFinder Class ReferenceHistogram Library » Histogram classes. ; Class to compute nice axis limits. ; This class is called by default by the histogramming system and also by TTree::Draw, TTreePlayer::DrawSelect. TGaxis use it also to optimize axis labels.; A different finder may be specified via THLimitsFinder::SetFinder. ; Definition at line 28 of file THLimitsFinder.h. Public Member Functions;  THLimitsFinder ();  ;  ~THLimitsFinder () override;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax);  Compute the best axis limits for the X axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax);  Compute the best axis limits for the X and Y axis. ;  ; virtual Int_t FindGoodLimits (TH1 *h, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t zmin, Double_t zmax);  Compute the best axis limits for the X, Y and Z axis. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHLimitsFinder.html:70,Guid,Guide,70,doc/master/classTHLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTHLimitsFinder.html,1,['Guid'],['Guide']
Usability,". ROOT: THStack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; THStack Class ReferenceHistogram Library » Histogram classes. ; The Histogram stack class. ; A THStack is a collection of TH1 or TH2 histograms. By using THStack::Draw(), the entire histogram collection is drawn at once according to the specified drawing option.; THStack::Add() allows adding a new histogram to the list. Note that the THStack does not take ownership of the objects in the list. Stack painting; By default, histograms are shown stacked:; the first histogram is painted; then the sum of the first and second histograms is painted, and so on. The axis ranges are computed automatically along the X and Y axes to display the complete histogram collection.; Warning: Histogram bins with negative content may produce wrong plots. Stack's drawing options; The specific stack's drawing options are:. NOSTACK If option ""nostack"" is specified, histograms are all painted in the same pad as if the option ""same"" had been specified.; NOSTACKB If the option ""nostackb"" is specified histograms are all painted on the same pad next to each other as bar plots.; PADS if option ""pads"" is specified, the current pad/canvas is subdivided into a number of pads equal to the number of histograms and each histogram is painted into a separate pad.; NOCLEAR By default the background of the histograms is erased before drawing the histograms. The option ""noclear"" avoids this behavior. This is useful when drawing a THStack on top of another plot. If the patterns used to draw the histograms in the stack are transparent, then the plot behind will be visible. See the THistPainter class for the list of valid histograms' painting options.; Example;; {; auto hs = new THStack(""hs"","""");; auto h1 = new TH1F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:63,Guid,Guide,63,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,1,['Guid'],['Guide']
Usability,". ROOT: THYPE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THYPE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; An hyperboloid (not implemented) ; It has 4 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inner radius of the tube; rmax: outer radius of the tube; dz: half-length of the box along the z-axis; phi: stereo angle . Definition at line 28 of file THYPE.h. Public Member Functions;  THYPE ();  HYPE shape default constructor. ;  ;  THYPE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi);  HYPE shape normal constructor. ;  ;  ~THYPE () override;  HYPE shape default destructor. ;  ; virtual Float_t GetPhi () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHYPE.html:61,Guid,Guide,61,doc/master/classTHYPE.html,https://root.cern,https://root.cern/doc/master/classTHYPE.html,1,['Guid'],['Guide']
Usability,". ROOT: THaarMatrixT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THaarMatrixT< Element > Class Template Reference. ; template<class Element>; class THaarMatrixT< Element >; Definition at line 122 of file TMatrixTLazy.h. Public Member Functions;  THaarMatrixT ();  ;  THaarMatrixT (Int_t n, Int_t no_cols=0);  ; virtual ~THaarMatrixT ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTLazy< Element >;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHaarMatrixT.html:88,Guid,Guide,88,doc/master/classTHaarMatrixT.html,https://root.cern,https://root.cern/doc/master/classTHaarMatrixT.html,1,['Guid'],['Guide']
Usability,". ROOT: THashList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; THashList Class ReferenceCore ROOT classes » Containers. ; THashList implements a hybrid collection class consisting of a hash table and a list to store TObject's. ; The hash table is used for quick access and lookup of objects while the list allows the objects to be ordered. The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit. ; Definition at line 34 of file THashList.h. Public Member Functions;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashList.html:65,Guid,Guide,65,doc/master/classTHashList.html,https://root.cern,https://root.cern/doc/master/classTHashList.html,1,['Guid'],['Guide']
Usability,". ROOT: THashTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THashTable Class ReferenceCore ROOT classes » Containers. ; THashTable implements a hash table to store TObject's. ; The hash value is calculated using the value returned by the TObject's Hash() function. Each class inheriting from TObject can override Hash() as it sees fit.; THashTable does not preserve the insertion order of the objects. If the insertion order is important AND fast retrieval is needed use THashList instead. ; Definition at line 35 of file THashTable.h. Public Member Functions;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; const TList * GetListForObject (const char *name) const;  Return the TLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:66,Guid,Guide,66,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,1,['Guid'],['Guide']
Usability,". ROOT: THbookBranch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookBranch Class ReferenceHistogram Library. ; HBOOK Branch. ; Definition at line 26 of file THbookBranch.h. Public Member Functions;  THbookBranch ();  ;  THbookBranch (TBranch *branch, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  THbookBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  ;  ~THbookBranch () override;  ; void Browse (TBrowser *b) override;  Browser interface. ;  ; const char * GetBlockName () const;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from hbook ntuple ;  ; TClass * IsA () const override;  ; void SetAddress (void *addobj) override;  Set address of this branch See important remark in the header of THbookTree. ;  ; void SetBlockName (const char *name);  ; void SetEntries (Long64_t n) override;  Set the number of entries in this branch. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBranch;  TBranch ();  Default constructor. Used for I/O by default. ;  ;  TBranch (TBranch *parent, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of another Branch. ;  ;  TBranch (TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize=32000, Int_t compress=ROOT::RCompressionSetting::EAlgorithm::kInherit);  Create a Branch as a child of a Tree. ;  ;  ~TBranch () override;  Destructor. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookBranch.html:68,Guid,Guide,68,doc/master/classTHbookBranch.html,https://root.cern,https://root.cern/doc/master/classTHbookBranch.html,1,['Guid'],['Guide']
Usability,". ROOT: THbookFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; THbookFile Class ReferenceHistogram Library. ; This class is an interface to the Hbook objects in Hbook files. ; Any Hbook object (1-D, 2-D, Profile, RWN or CWN can be read; NB: a THbookFile can only be used in READ mode Use the utility in $ROOTSYS/bin/h2root to convert Hbook to Root; Example of use: gSystem->Load(""libHbook"");; THbookFile f(""myfile.hbook"");; f.ls();; TH1F *h1 = (TH1F*)f.Get(1); //import histogram ID=1 in h1; h1->Fit(""gaus"");; THbookTree *T = (THbookTree*)f.Get(111); //import ntuple header; T->Print(); //show the Hbook ntuple variables; T->Draw(""x"",""y<0""); // as in normal TTree::Draw; THbookFile can be browsed via TBrowser. ; Definition at line 29 of file THbookFile.h. Public Member Functions;  THbookFile ();  the constructor ;  ;  THbookFile (const char *fname, Int_t lrecl=1024);  Constructor for an HBook file object. ;  ;  ~THbookFile () override;  destructor ;  ; void Browse (TBrowser *b) override;  to be implemented ;  ; virtual Bool_t cd (const char *dirname="""");  change directory to dirname ;  ; virtual void Close (Option_t *option="""");  Close the Hbook file. ;  ; virtual TObject * Convert1D (Int_t id);  Convert an Hbook 1-d histogram into a Root TH1F. ;  ; virtual TObject * Convert2D (Int_t id);  Convert an Hbook 2-d histogram into a Root TH2F. ;  ; virtual TFile * Convert2root (const char *rootname="""", Int_t lrecl=0, Option_t *option="""");  Convert this Hbook file to a Root file with name rootname. ;  ; virtual TObject * ConvertCWN (Int_t id);  Convert the Column-Wise-Ntuple id to a Root Tree. ;  ; virtual TObject * ConvertProfile (Int_t id);  Convert an Hbook profile histogram into a Root TProfile. ;  ; virtual TObject * ConvertRWN (Int_t id);  Convert the Row-Wise-Ntupl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookFile.html:66,Guid,Guide,66,doc/master/classTHbookFile.html,https://root.cern,https://root.cern/doc/master/classTHbookFile.html,1,['Guid'],['Guide']
Usability,". ROOT: THbookKey Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookKey Class ReferenceHistogram Library. ; HBOOK Key. ; Definition at line 26 of file THbookKey.h. Public Member Functions;  THbookKey ();  ;  THbookKey (Int_t id, THbookFile *file);  constructor ;  ;  ~THbookKey () override;  ; void Browse (TBrowser *b) override;  Read object from disk and call its Browse() method. ;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  an hbook key is not a folder ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookKey.html:65,Guid,Guide,65,doc/master/classTHbookKey.html,https://root.cern,https://root.cern/doc/master/classTHbookKey.html,1,['Guid'],['Guide']
Usability,". ROOT: THbookTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THbookTree Class ReferenceHistogram Library. ; A wrapper class supporting Hbook ntuples (CWN and RWN). ; The normal TTree calls can be used, including TTree::Draw(). Data read directly from the Hbook file via THbookFile.; IMPORTANT NOTE When setting the branch address (via THbookTree::SetBranchAddress) for a branch in an Hbook block containing several names, eg Hbook block SELEVN with the following variables:; 1 * R*4 * * * SELEVN * WGGS; 2 * R*4 * * * SELEVN * AM12; 3 * R*4 * * * SELEVN * AM34; 4 * R*4 * * * SELEVN * AM14; 5 * R*4 * * * SELEVN * AM32; 6 * R*4 * * * SELEVN * PtPI(4); 7 * R*4 * * * SELEVN * PHIPI(4); 8 * R*4 * * * SELEVN * THTPI(4); ; one must define a C struct like:; struct {; Float_t Wggs;; Float_t Am12;; Float_t Am34;; Float_t Am14;; Float_t Am32;; Float_t Ptpi[4];; Float_t Phipi[4];; Float_t Thtpi[4];; } event;; ; and set ONLY the first variable address with:; h96->SetBranchAddress(""Wggs"",&event.Wggs);; a#define a(i)Definition RSha256.hxx:99; Float_tfloat Float_tDefinition RtypesCore.h:57; R. Definition at line 30 of file THbookTree.h. Public Member Functions;  THbookTree ();  default constructor ;  ;  THbookTree (const char *name, Int_t id);  constructor ;  ;  ~THbookTree () override;  destructor ;  ; Int_t GetEntry (Long64_t entry=0, Int_t getall=0) override;  get one entry from the hbook ntuple ;  ; THbookFile * GetHbookFile ();  ; virtual Int_t GetID ();  ; virtual Int_t GetType ();  ; Float_t * GetX ();  ; virtual void InitBranches (Long64_t entry);  Initialize the branch addresses. ;  ; TClass * IsA () const override;  ; char * MakeX (Int_t nvars);  ; void Print (Option_t *option="""") const override;  Print an overview of the hbook ntuple. ;  ; Long64_t SetEntries (Long64_t n=-1) override;  Set the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHbookTree.html:66,Guid,Guide,66,doc/master/classTHbookTree.html,https://root.cern,https://root.cern/doc/master/classTHbookTree.html,1,['Guid'],['Guide']
Usability,". ROOT: THelix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; THelix Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; THelix has two different constructors. ; If a particle with charge q passes through a point (x,y,z) with momentum (px,py,pz) with magnetic field B along an axis (nx,ny,nz), this helix can be constructed like:; THelix p(x,y,z, px,py,pz, q*B, nx,ny,nz);; (nx,ny,nz) defaults to (0,0,1).; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; THelixTHelix has two different constructors.Definition THelix.h:23; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; A helix in its own frame can be defined with a pivotal point (x0,y0,z0), the velocity at that point (vx0,vy0,vz0), and an angular frequency w. Combining vx0 and vy0 to a transverse velocity vt0 one can parametrize the helix as:; x(t) = x0 - vt0 / w * sin(-w * t + phi0); y(t) = y0 + vt0 / w * cos(-w * t + phi0); z(t) = z0 + vz0 * t; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; The second constructor has 6 parameters,; Example:; THelix pl1(xyz, v, w, range, rtype, axis);; v@ vDefinition rootcling_impl.cxx:3699; where:. xyz : array of initial position; v : array of initial velocity; w : angular frequency; range: helix range; rtype: kHelixZ specifies allowed drawing range in helix Z direction, i.e., along B field. kLabZ specifies drawing range in lab frame. kHelixX, kHelixY, kLabX, kLabY, kUnchanged ... etc can also be specified; axis : helix axis. Example constructing a helix with several default values and drawing it:; {; TCanvas* helix_example_c1 = new TCanvas(""helix_example_c1"");; TView *view = TView::CreateView(1);; view->SetRange(-1,-1,-1,1,1,1);; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHelix.html:62,Guid,Guide,62,doc/master/classTHelix.html,https://root.cern,https://root.cern/doc/master/classTHelix.html,1,['Guid'],['Guide']
Usability,". ROOT: THilbertMatrixT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THilbertMatrixT< Element > Class Template Reference. ; template<class Element>; class THilbertMatrixT< Element >; Definition at line 141 of file TMatrixTLazy.h. Public Member Functions;  THilbertMatrixT ();  ;  THilbertMatrixT (Int_t no_rows, Int_t no_cols);  ;  THilbertMatrixT (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ; virtual ~THilbertMatrixT ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTLazy< Element >;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHilbertMatrixT.html:91,Guid,Guide,91,doc/master/classTHilbertMatrixT.html,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixT.html,1,['Guid'],['Guide']
Usability,". ROOT: THilbertMatrixTSym< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; THilbertMatrixTSym< Element > Class Template Reference. ; template<class Element>; class THilbertMatrixTSym< Element >; Definition at line 161 of file TMatrixTLazy.h. Public Member Functions;  THilbertMatrixTSym ();  ;  THilbertMatrixTSym (Int_t no_rows);  ;  THilbertMatrixTSym (Int_t row_lwb, Int_t row_upb);  ; virtual ~THilbertMatrixTSym ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTSymLazy< Element >;  TMatrixTSymLazy ();  ;  TMatrixTSymLazy (Int_t nrows);  ;  TMatrixTSymLazy (Int_t row_lwb, Int_t row_upb);  ;  ~TMatrixTSymLazy () override;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHilbertMatrixTSym.html:94,Guid,Guide,94,doc/master/classTHilbertMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTHilbertMatrixTSym.html,1,['Guid'],['Guide']
Usability,". ROOT: THistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; THistPainter Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The histogram painter class. ; Implements all histograms' drawing's options. Introduction; Histograms' plotting options; Options supported for 1D and 2D histograms; Options supported for 1D histograms; Options supported for 2D histograms; Options supported for 3D histograms; Options supported for histograms' stacks (THStack). Setting the Style; Setting line, fill, marker, and text attributes; Setting Tick marks on the histogram axis; Giving titles to the X, Y and Z axis; The option ""SAME""; Limitations. Colors automatically picked in palette; Superimposing two histograms with different scales in the same pad; Statistics Display; Fit Statistics; The error bars options; The bar chart option; The ""BAR"" and ""HBAR"" options; The SCATter plot option (legacy draw option); The ARRow option; The BOX option; The COLor option (default for 2D and 3D histograms); The CANDLE and VIOLIN options; The CANDLE option; The VIOLIN option. The TEXT and TEXTnn Option; The CONTour options; The LIST option; The AITOFF, MERCATOR, SINUSOIDAL and PARABOLIC options. The LEGO options; The ""SURFace"" options; Cylindrical, Polar, Spherical and PseudoRapidity/Phi options; Base line for bar-charts and lego plots; TH2Poly Drawing; The SPEC option; Option ""Z"" : Adding the color palette on the right side of the pad; Setting the color palette; Drawing a sub-range of a 2-D histogram; the [cutg] option; Drawing options for 3D histograms; Drawing option for histograms' stacks; Drawing of 3D implicit functions; Associated functions drawing; Drawing using OpenGL; General information: plot types and supported options; TH3 as color boxes; TH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:68,Guid,Guide,68,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: THistRenderingRegion Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; THistRenderingRegion Struct Reference. . Definition at line 43 of file THistPainter.h. Public Attributes; std::pair< Int_t, Int_t > fBinRange;  ; std::pair< Int_t, Int_t > fPixelRange;  . #include <THistPainter.h>; Member Data Documentation. ◆ fBinRange. std::pair<Int_t, Int_t> THistRenderingRegion::fBinRange. Definition at line 46 of file THistPainter.h. ◆ fPixelRange. std::pair<Int_t, Int_t> THistRenderingRegion::fPixelRange. Definition at line 45 of file THistPainter.h. Collaboration diagram for THistRenderingRegion:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; hist/histpainter/inc/THistPainter.h. THistRenderingRegion. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTHistRenderingRegion.html:77,Guid,Guide,77,doc/master/structTHistRenderingRegion.html,https://root.cern,https://root.cern/doc/master/structTHistRenderingRegion.html,2,['Guid'],['Guide']
Usability,". ROOT: THn Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; THn Class ReferenceabstractHistogram Library » Histogram classes. ; Multidimensional histogram. ; Use a THn if you really, really have to store more than three dimensions, and if a large fraction of all bins are filled. Better alternatives are; THnSparse if a fraction of all bins are filled; TTree. The major problem of THn is the memory use caused by n-dimensional histogramming: a THnD with 8 dimensions and 100 bins per dimension needs more than 2.5GB of RAM!; To construct a THn object you must use one of its templated, derived classes: THnD (typedef for THnT<Double_t>): bin content held by a Double_t,; THnF (typedef for THnT<Float_t>): bin content held by a Float_t,; THnL (typedef for THnT<Long64_t>): bin content held by a Long64_t,; THnI (typedef for THnT<Int_t>): bin content held by an Int_t,; THnS (typedef for THnT<Short_t>): bin content held by a Short_t,; THnC (typedef for THnT<Char_t>): bin content held by a Char_t,; They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2F h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnF hn(""hn"", ""hn"", 2, bins, xmin, xmax);; ; Filling; A THn is filled just like a regular histogram, using THn::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram. Storage is allocated when the first bin content is stored. Projections; The dimensionality of a THn can be reduced by projecting it to 1, 2, 3, or n dimensions, which can be represented by a TH1, TH2, TH3, or a THn. See the Projecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHn.html:59,Guid,Guide,59,doc/master/classTHn.html,https://root.cern,https://root.cern/doc/master/classTHn.html,1,['Guid'],['Guide']
Usability,". ROOT: THnBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THnBase Class ReferenceabstractHistogram Library. ; Multidimensional histogram base. ; Defines common functionality and interfaces for THn, THnSparse. ; Definition at line 43 of file THnBase.h. Public Member Functions;  ~THnBase () override;  Destruct a THnBase. ;  ; void Add (const TH1 *hist, Double_t c=1.);  Fill the THnBase with the bins of hist that have content or error != 0. ;  ; void Add (const THnBase *h, Double_t c=1.);  Add contents of h scaled by c to this histogram: this = this + c * h Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void AddBinContent (const Int_t *x, Double_t v=1.);  ; virtual void AddBinContent (Long64_t bin, Double_t v=1.)=0;  ; virtual void AddBinError2 (Long64_t bin, Double_t e2)=0;  ; void Browse (TBrowser *b) override;  Browse a THnSparse: create an entry (ROOT::THnSparseBrowsable) for each dimension. ;  ; void CalculateErrors (Bool_t calc=kTRUE);  Calculate errors (or not if ""calc"" == kFALSE) ;  ; Double_t ComputeIntegral ();  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual ROOT::Internal::THnBaseBinIter * CreateIter (Bool_t respectAxisRange) const =0;  ; void Divide (const THnBase *h);  Divide this histogram by h this = this/(h) Note that if h has Sumw2 set, Sumw2 is automatically called for this if not already set. ;  ; void Divide (const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""");  Replace contents of this histogram by multiplication of h1 by h2 this = (c1*h1)/(c2*h2) Note that if h1 or h2 have Sumw2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:63,Guid,Guide,63,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['Guid'],['Guide']
Usability,". ROOT: THnChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; THnChain Class Reference. ; A class to chain together multiple histograms. ; This class allows to chain together any THnBase-derived (THn or THnSparse) histograms from multiple files. Operations on the axes and projections are supported. The intent is to allow convenient merging merging of projections of high-dimensional histograms.; // `file1.root` and `file2.root` contain a `THnSparse` named `hsparse`.; THnChain hs(""hsparse"");; hs.AddFile(""file1.root"");; hs.AddFile(""file2.root"");; ; // Project out axis 0, integrate over other axes.; TH1* h0 = hs.Projection(0);; ; // Project out axis 0, integrate over other axes in their active ranges.; hs.GetAxis(1)->SetRangeUser(0, 0.1); // select a subrange; TH1* h0 = hs.Projection(0);; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; THnChainA class to chain together multiple histograms.Definition THnChain.h:50. Definition at line 49 of file THnChain.h. Public Member Functions;  THnChain (const char *name);  Default constructor. ;  ; void AddFile (const char *fileName);  Add a new file to this chain. ;  ; TAxis * GetAxis (Int_t i) const;  Get an axis from the histogram. ;  ; TClass * IsA () const override;  ; TH3 * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH1 * Projection (Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; TH2 * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  See THnBase::Projection for the intended behavior. ;  ; THnBase * ProjectionND (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  See THnBase::Projection for the int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnChain.html:64,Guid,Guide,64,doc/master/classTHnChain.html,https://root.cern,https://root.cern/doc/master/classTHnChain.html,1,['Guid'],['Guide']
Usability,". ROOT: THnIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THnIter Class Reference. ; Iterator over THnBase bins. ; Definition at line 333 of file THnBase.h. Public Member Functions;  THnIter (const THnBase *hist, Bool_t respectAxisRange=kFALSE);  ;  ~THnIter () override;  ; Int_t GetCoord (Int_t dim) const;  ; Bool_t HaveSkippedBin () const;  ; TClass * IsA () const override;  ; Long64_t Next (Int_t *coord=nullptr);  Return the next bin's index. ;  ; Bool_t RespectsAxisRange () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnIter.html:63,Guid,Guide,63,doc/master/classTHnIter.html,https://root.cern,https://root.cern/doc/master/classTHnIter.html,1,['Guid'],['Guide']
Usability,". ROOT: THnSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THnSparse Class ReferenceabstractHistogram Library. ; Efficient multidimensional histogram. ; Use a THnSparse instead of TH1 / TH2 / TH3 / array for histogramming when only a small fraction of bins is filled. A 10-dimensional histogram with 10 bins per dimension has 10^10 bins; in a naive implementation this will not fit in memory. THnSparse only allocates memory for the bins that have non-zero bin content instead, drastically reducing both the memory usage and the access time.; To construct a THnSparse object you must use one of its templated, derived classes:; THnSparseD (typedef for THnSparseT<ArrayD>): bin content held by a Double_t,; THnSparseF (typedef for THnSparseT<ArrayF>): bin content held by a Float_t,; THnSparseL (typedef for THnSparseT<ArrayL64>): bin content held by a Long64_t,; THnSparseI (typedef for THnSparseT<ArrayI>): bin content held by an Int_t,; THnSparseS (typedef for THnSparseT<ArrayS>): bin content held by a Short_t,; THnSparseC (typedef for THnSparseT<ArrayC>): bin content held by a Char_t,. They take name and title, the number of dimensions, and for each dimension the number of bins, the minimal, and the maximal value on the dimension's axis. A TH2 h(""h"",""h"",10, 0., 10., 20, -5., 5.) would correspond to Int_t bins[2] = {10, 20};; Double_t xmin[2] = {0., -5.};; Double_t xmax[2] = {10., 5.};; THnSparseD hs(""hs"", ""hs"", 2, bins, xmin, xmax);; ; Filling; A THnSparse is filled just like a regular histogram, using THnSparse::Fill(x, weight), where x is a n-dimensional Double_t value. To take errors into account, Sumw2() must be called before filling the histogram.; Bins are allocated as needed; the status of the allocation can be observed by GetSparse",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:65,Guid,Guide,65,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,1,['Guid'],['Guide']
Usability,". ROOT: THnSparseArrayChunk Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; THnSparseArrayChunk Class Reference. ; THnSparseArrayChunk is used internally by THnSparse. ; THnSparse stores its (dynamic size) array of bin coordinates and their contents (and possibly errors) in a TObjArray of THnSparseArrayChunk. Each of the chunks holds an array of THnSparseCompactBinCoord and the content (a TArray*), which is created outside (by the templated derived classes of THnSparse) and passed in at construction time. ; Definition at line 30 of file THnSparse_Internal.h. Public Member Functions;  THnSparseArrayChunk ();  ;  THnSparseArrayChunk (Int_t coordsize, bool errors, TArray *cont);  (Default) initialize a chunk. ;  ;  ~THnSparseArrayChunk () override;  Destructor. ;  ; void AddBin (Int_t idx, const Char_t *idxbuf);  Create a new bin in this chunk. ;  ; void AddBinContent (Int_t idx, Double_t v=1.);  ; Int_t GetEntries () const;  ; TClass * IsA () const override;  ; Bool_t Matches (Int_t idx, const Char_t *idxbuf) const;  Check whether bin at idx batches idxbuf. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 ();  Turn on support of errors. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default acti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseArrayChunk.html:75,Guid,Guide,75,doc/master/classTHnSparseArrayChunk.html,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html,1,['Guid'],['Guide']
Usability,". ROOT: THnSparseCompactBinCoord Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THnSparseCompactBinCoord Class Reference. ; THnSparseCompactBinCoord is a class used by THnSparse internally. ; It maps between an n-dimensional array of bin coordinates (indices) and its compact version, the THnSparseCoordCompression. ; Definition at line 351 of file THnSparse.cxx. Public Member Functions;  THnSparseCompactBinCoord (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCompactBinCoord object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension. ;  ;  ~THnSparseCompactBinCoord ();  destruct a THnSparseCompactBinCoord ;  ; const Char_t * GetBuffer () const;  ; Int_t * GetCoord ();  ; ULong64_t GetHash () const;  ; void SetBuffer (const Char_t *buf);  ; void SetCoord (const Int_t *coord);  ; void UpdateCoord ();  ;  Public Member Functions inherited from THnSparseCoordCompression;  THnSparseCoordCompression (const THnSparseCoordCompression &other);  Construct a THnSparseCoordCompression from another one. ;  ;  THnSparseCoordCompression (Int_t dim, const Int_t *nbins);  Initialize a THnSparseCoordCompression object with ""dim"" dimensions and ""bins"" holding the number of bins for each dimension; it stores the. ;  ;  ~THnSparseCoordCompression ();  destruct a THnSparseCoordCompression ;  ; Int_t GetBufferSize () const;  ; ULong64_t GetHashFromBuffer (const Char_t *buf) const;  Calculate hash from compact bin index. ;  ; Int_t GetNdimensions () const;  ; THnSparseCoordCompression & operator= (const THnSparseCoordCompression &other);  Set this to other if different. ;  ; ULong64_t SetBufferFromCoord (const Int_t *coord_in, Char_t *buf_out) const;  Given the cbin coordinates coord_in, calculate (""compact"") the bin coordinates and return them in buf_in. ;  ; void SetCoordFromBuffer (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html:80,Guid,Guide,80,doc/master/classTHnSparseCompactBinCoord.html,https://root.cern,https://root.cern/doc/master/classTHnSparseCompactBinCoord.html,1,['Guid'],['Guide']
Usability,". ROOT: THnSparseT< CONT > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THnSparseT< CONT > Class Template Reference. ; template<class CONT>; class THnSparseT< CONT >Templated implementation of the abstract base THnSparse. ; All functionality and the interfaces to be used are in THnSparse!; THnSparse does not know how to store any bin content itself. Instead, this is delegated to the derived, templated class: the template parameter decides what the format for the bin content is. In fact it even defines the array itself; possible implementations probably derive from TArray.; Typedefs exist for template parameters with ROOT's generic types:. Templated name Typedef Bin content type . THnSparseT<TArrayC> THnSparseC Char_t . THnSparseT<TArrayS> THnSparseS Short_t . THnSparseT<TArrayI> THnSparseI Int_t . THnSparseT<TArrayL64> THnSparseL Long64_t . THnSparseT<TArrayF> THnSparseF Float_t . THnSparseT<TArrayD> THnSparseD Double_t . We recommend to use THnSparseC wherever possible, and to map its value space of 256 possible values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnSparseS or even THnSparseF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 207 of file THnSparse.h. Public Member Functions;  THnSparseT ();  ;  THnSparseT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin=nullptr, const Double_t *xmax=nullptr, Int_t chunksize=1024 *16);  ; TArray * GenerateArray () const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:83,Guid,Guide,83,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,1,['Guid'],['Guide']
Usability,". ROOT: THnT< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THnT< T > Class Template Reference. ; template<typename T>; class THnT< T >Templated implementation of the abstract base THn. ; All functionality and the interfaces to be used are in THn!; THn does not know how to store any bin content itself. Instead, this is delegated to the derived, templated class: the template parameter decides what the format for the bin content is. The actual storage is delegated to TNDArrayT<T>.; Typedefs exist for template parameters with ROOT's generic types:. Templated name Typedef Bin content type . THnT<Char_t> THnC Char_t . THnT<Short_t> THnS Short_t . THnT<Int_t> THnI Int_t . THnT<Long64_t> THnL Long64_t . THnT<Float_t> THnF Float_t . THnT<Double_t> THnD Double_t . We recommend to use THnC wherever possible, and to map its value space of 256 possible values to e.g. float values outside the class. This saves an enormous amount of memory. Only if more than 256 values need to be distinguished should e.g. THnS or even THnF be chosen.; Implementation detail: the derived, templated class is kept extremely small on purpose. That way the (templated thus inlined) uses of this class will only create a small amount of machine code, in contrast to e.g. STL. ; Definition at line 219 of file THn.h. Public Member Functions;  THnT ();  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const Double_t *xmin, const Double_t *xmax);  ;  THnT (const char *name, const char *title, Int_t dim, const Int_t *nbins, const std::vector< std::vector< double > > &xbins);  ; const TNDArray & GetArray () const override;  ; TNDArray & GetArray () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnT.html:74,Guid,Guide,74,doc/master/classTHnT.html,https://root.cern,https://root.cern/doc/master/classTHnT.html,1,['Guid'],['Guide']
Usability,". ROOT: THostAuth Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; THostAuth Class Reference. . Definition at line 34 of file THostAuth.h. Public Member Functions;  THostAuth ();  Default constructor. ;  ;  THostAuth (const char *asstring);  Create hostauth object from directives given as a compact string See THostAuth::AsString(). ;  ;  THostAuth (const char *host, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t authmeth, const char *details);  Create hostauth object with one method only. ;  ;  THostAuth (const char *host, Int_t server, const char *user, Int_t nmeth=0, Int_t *authmeth=nullptr, char **details=nullptr);  Create hostauth object. ;  ;  THostAuth (THostAuth &ha);  Copy ctor ... ;  ; virtual ~THostAuth ();  The dtor. ;  ; void Activate ();  ; void AddFirst (Int_t level, const char *details=nullptr);  Add new method in first position If already in the list, set as first method 'level' with authentication 'details'. ;  ; void AddMethod (Int_t level, const char *details=nullptr);  Add method to the list. ;  ; void AsString (TString &out) const;  Return a static string with all info in a serialized form. ;  ; void CountFailure (Int_t level);  Count failures for 'method'. ;  ; void CountSuccess (Int_t level);  Count successes for 'method'. ;  ; TRootSecContext * CreateSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *details, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=-1);  Create a Security context and add it to local list Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHostAuth.html:65,Guid,Guide,65,doc/master/classTHostAuth.html,https://root.cern,https://root.cern/doc/master/classTHostAuth.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml.html:61,Guid,Guide,61,doc/master/classTHtml.html,https://root.cern,https://root.cern/doc/master/classTHtml.html,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,". ROOT: THtml Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THtml Class Reference. ; Legacy ROOT documentation system. ; Deprecated:We keep THtml for those who still need it for legacy use cases. ROOT has since several years moved to doxygen as documentation generator. THtml is not developed nor supported anymore; please migrate to doxygen instead.; The THtml class is designed to easily document classes, code, and code related text files (like change logs). It generates HTML pages conforming to the XHTML 1.0 transitional specifications; an example of these pages is ROOT's own reference guide. This page was verified to be valid XHTML 1.0 transitional, which proves that all pages generated by THtml can be valid, as long as the user provided XHTML (documentation, header, etc) is valid. You can check the current THtml by clicking this icon: ; Overview: . Usage . Configuration . Input files . Output directory . Linking other documentation . Recognizing class documentation . Author, copyright, etc. . Header and footer . Links to searches, home page, ViewVC . HTML Charset . Documentation syntax . Class description . Class index . Method documentation . Data member documentation . Documentation directives . BEGIN_HTML END_HTML: include 'raw' HTML . BEGIN_MACRO END_MACRO: include a picture generated by a macro . BEGIN_LATEX END_LATEX: include a latex picture . Product and module index . Auxiliary files: style sheet, JavaScript, help page . Class Charts . Configuration variables . Behind the scenes . I. Usage; These are typical things people do with THtml: ; root[] THtml html; // create a THtml object; root[] html.LoadAllLibs(); // Load all rootmap'ed libraries; root[] html.MakeAll(); // generate documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTHtml.html:60,Guid,Guide,60,doc/v632/classTHtml.html,https://root.cern,https://root.cern/doc/v632/classTHtml.html,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,". ROOT: THtml::TFileDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; THtml::TFileDefinition Class Reference. . Definition at line 71 of file THtml.h. Public Member Functions; virtual bool GetDeclFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's declaration file name. ;  ; virtual bool GetImplFileName (const TClass *cl, TString &out_filename, TString &out_fsys, TFileSysEntry **fse=0) const;  Determine cl's implementation file name. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html:78,Guid,Guide,78,doc/master/classTHtml_1_1TFileDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileDefinition.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TFileSysDB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; THtml::TFileSysDB Class Reference. . Definition at line 174 of file THtml.h. Public Member Functions;  TFileSysDB (const char *path, const char *ignorePath, Int_t maxdirlevel);  ; THashTable & GetEntries ();  ; const TString & GetIgnore () const;  ; TExMap & GetMapIno ();  ; Int_t GetMaxLevel () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html:73,Guid,Guide,73,doc/master/classTHtml_1_1TFileSysDB.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDB.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TFileSysDir Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysDir Class Reference. . Definition at line 138 of file THtml.h. Public Member Functions;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; TClass * IsA () const override;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html:74,Guid,Guide,74,doc/master/classTHtml_1_1TFileSysDir.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysDir.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TFileSysEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; THtml::TFileSysEntry Class Reference. . Definition at line 106 of file THtml.h. Public Member Functions;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; virtual void GetFullName (TString &fullname, Bool_t asIncluded) const;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html:76,Guid,Guide,76,doc/master/classTHtml_1_1TFileSysEntry.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TFileSysRoot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TFileSysRoot Class Reference. . Definition at line 157 of file THtml.h. Public Member Functions;  TFileSysRoot (const char *name, TFileSysDB *parent);  ; void GetFullName (TString &fullname, Bool_t asIncluded) const override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysDir;  TFileSysDir (const char *name, TFileSysDir *parent);  ; const TList * GetFiles () const;  ; const TList * GetSubDirs () const;  ; void Recurse (TFileSysDB *db, const char *path);  Recursively fill entries by parsing the contents of path. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::TFileSysEntry;  TFileSysEntry (const char *name, TFileSysDir *parent);  ;  ~TFileSysEntry () override;  ; Int_t GetLevel () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TFileSysDir * GetParent () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html:75,Guid,Guide,75,doc/master/classTHtml_1_1TFileSysRoot.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysRoot.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::THelperBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; THtml::THelperBase Class Reference. . Definition at line 44 of file THtml.h. Public Member Functions;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; TClass * IsA () const override;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1THelperBase.html:74,Guid,Guide,74,doc/master/classTHtml_1_1THelperBase.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1THelperBase.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TModuleDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TModuleDefinition Class Reference. . Definition at line 61 of file THtml.h. Public Member Functions; virtual bool GetModule (TClass *cl, TFileSysEntry *fse, TString &out_modulename) const;  Set out_modulename to cl's module name; return true if it's valid. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html:80,Guid,Guide,80,doc/master/classTHtml_1_1TModuleDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TModuleDefinition.html,1,['Guid'],['Guide']
Usability,". ROOT: THtml::TPathDefinition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; THtml::TPathDefinition Class Reference. . Definition at line 92 of file THtml.h. Public Member Functions; virtual bool GetDocDir (const TString &module, TString &doc_dir) const;  Determine the module's documentation directory. ;  ; virtual bool GetFileNameFromInclude (const char *included, TString &out_fsname) const;  Set out_fsname to the full pathname corresponding to a file included as ""included"". ;  ; virtual bool GetIncludeAs (TClass *cl, TString &out_include_as) const;  Determine the path and filename used in an include statement for the header file of the given class. ;  ; virtual bool GetMacroPath (const TString &module, TString &out_dir) const;  Determine the path to look for macros (see TDocMacroDirective) for classes from a given module. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THtml::THelperBase;  THelperBase ();  ;  ~THelperBase () override;  Helper's destructor. ;  ; THtml * GetOwner () const;  ; void SetOwner (THtml *html);  Set the THtml object owning this object; if it's already set to a different THtml object than issue an error message and signal to the currently set object that we are not belonging to it anymore. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void Append",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html:78,Guid,Guide,78,doc/master/classTHtml_1_1TPathDefinition.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TPathDefinition.html,1,['Guid'],['Guide']
Usability,". ROOT: THttpCallArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THttpCallArg Class ReferenceHTTP server. ; Contains arguments for single HTTP call. ; Must be used in THttpEngine to process incoming http requests ; Definition at line 27 of file THttpCallArg.h. Public Types; enum  { kNoZip = 0; , kZip = 1; , kZipLarge = 2; , kZipAlways = 3; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  THttpCallArg ();  ; virtual ~THttpCallArg ();  destructor ;  ; void AddHeader (const char *name, const char *value);  Set name: value pair to reply header. ;  ; void AddNoCacheHeader ();  Set CacheControl http header to disable browser caching. ;  ; virtual Bool_t CanPostpone () const;  Return true if reply can be postponed by server .  ; Bool_t CompressWithGzip ();  Compress reply data with gzip compression. ;  ; template<class T , typename... Args> ; void CreateWSEngine (Args... args);  ; std::string FillHttpHeader (const char *header=nullptr);  Fills HTTP header, which can be send at the beginning of reply on the http request. ;  ; const void * GetContent () const;  ; Long_t GetContentL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpCallArg.html:68,Guid,Guide,68,doc/master/classTHttpCallArg.html,https://root.cern,https://root.cern/doc/master/classTHttpCallArg.html,1,['Guid'],['Guide']
Usability,". ROOT: THttpEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; THttpEngine Class ReferenceHTTP server. ; Abstract class for implementing http protocol for THttpServer. ; Definition at line 19 of file THttpEngine.h. Public Member Functions; virtual Bool_t Create (const char *);  Method to create all components of engine. ;  ; THttpServer * GetServer () const;  Returns pointer to THttpServer associated with engine. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpEngine.html:67,Guid,Guide,67,doc/master/classTHttpEngine.html,https://root.cern,https://root.cern/doc/master/classTHttpEngine.html,1,['Guid'],['Guide']
Usability,". ROOT: THttpServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; THttpServer Class ReferenceHTTP server. ; Online http server for arbitrary ROOT application. ; Idea of THttpServer - provide remote http access to running ROOT application and enable HTML/JavaScript user interface. Any registered object can be requested and displayed in the browser. There are many benefits of such approach:. standard http interface to ROOT application; no any temporary ROOT files when access data; user interface running in all browsers. To start http server simply create instance of the THttpServer class like: serv = new THttpServer(""http:8080"");; This will starts civetweb-based http server with http port 8080. Than one should be able to open address ""http://localhost:8080"" in any modern web browser (Firefox, Chrome, Opera, ...) and browse objects, created in ROOT application. By default, server can access files, canvases and histograms via gROOT pointer. All such objects can be displayed with JSROOT graphics.; At any time one could register other objects with the command: TGraph* gr = new TGraph(10);; gr->SetName(""gr1"");; serv->Register(""graphs/subfolder"", gr);; If objects content is changing in the application, one could enable monitoring flag in the browser - than objects view will be regularly updated.; More information: https://root.cern/root/htmldoc/guides/HttpServer/HttpServer.html ; Definition at line 31 of file THttpServer.h. Public Member Functions;  THttpServer (const char *engine=""http:8080"");  constructor ;  ; virtual ~THttpServer ();  destructor ;  ; void AddLocation (const char *prefix, const char *path);  Add files location, which could be used in the server. ;  ; Bool_t CreateEngine (const char *engine);  Factory method to c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpServer.html:67,Guid,Guide,67,doc/master/classTHttpServer.html,https://root.cern,https://root.cern/doc/master/classTHttpServer.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: THttpTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; THttpTimer Class Reference. . Definition at line 42 of file THttpServer.cxx. Public Member Functions;  THttpTimer (Long_t milliSec, Bool_t mode, THttpServer &serv);  !< server processing requests ;  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t flag);  ; void Timeout () override;  timeout handler used to process http requests in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpTimer.html:66,Guid,Guide,66,doc/master/classTHttpTimer.html,https://root.cern,https://root.cern/doc/master/classTHttpTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: THttpWSHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; THttpWSHandler Class ReferenceabstractHTTP server. ; Class for user-side handling of websocket with THttpServer. ; Approximate how-to:. Create derived from THttpWSHandler class and implement ProcessWS() method, where all web sockets request handled.; Register instance of derived class to running THttpServer TUserWSHandler *handler = new TUserWSHandler(""name1"",""title"");; THttpServer *server = new THttpServer(""http:8090"");; server->Register(""/subfolder"", handler). Now server can accept web socket connection from outside. For instance, from JavaScirpt one can connect to it with code: let ws = new WebSocket(""ws://hostname:8090/subfolder/name1/root.websocket"");. In the ProcessWS(THttpCallArg *arg) method following code should be implemented: if (arg->IsMethod(""WS_CONNECT"")) {; return true; // to accept incoming request; }. if (arg->IsMethod(""WS_READY"")) {; fWSId = arg->GetWSId(); // fWSId should be member of the user class; return true; // connection established; }. if (arg->IsMethod(""WS_CLOSE"")) {; fWSId = 0;; return true; // confirm close of socket; }. if (arg->IsMethod(""WS_DATA"")) {; std::string str((const char *)arg->GetPostData(), arg->GetPostDataLength());; std::cout << ""got string "" << str << std::endl;; SendCharStarWS(fWSId, ""our reply"");; return true;; }. See in $ROOTSYS/tutorials/http/ws.C and $ROOTSYS/tutorials/http/ws.htm functional example . Definition at line 25 of file THttpWSHandler.h. Public Member Functions; virtual ~THttpWSHandler ();  destructor Make sure that all sending threads are stopped correctly ;  ; virtual Bool_t AllowMTProcess () const;  Allow processing of WS requests in arbitrary thread. ;  ; virtual Bool_t AllowMTSend () const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHttpWSHandler.html:70,Guid,Guide,70,doc/master/classTHttpWSHandler.html,https://root.cern,https://root.cern/doc/master/classTHttpWSHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TIconBoxThumb Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TIconBoxThumb Class Reference. . Definition at line 238 of file TRootBrowserLite.cxx. Public Member Functions;  TIconBoxThumb (const char *name, const TGPicture *spic, const TGPicture *pic);  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIconBoxThumb.html:69,Guid,Guide,69,doc/master/classTIconBoxThumb.html,https://root.cern,https://root.cern/doc/master/classTIconBoxThumb.html,1,['Guid'],['Guide']
Usability,". ROOT: TIdleTOTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TIdleTOTimer Class Reference. . Definition at line 443 of file TProofServ.h. Public Member Functions;  TIdleTOTimer (TProofServ *p, Int_t delay);  ; Bool_t Notify () override;  Handle expiration of the idle timer. The session will just be terminated. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTOTimer.html:68,Guid,Guide,68,doc/master/classTIdleTOTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTOTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TIdleTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TIdleTimer Class Reference. . Definition at line 60 of file TApplication.cxx. Public Member Functions;  TIdleTimer (Long_t ms);  ; Bool_t Notify () override;  Notify handler. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIdleTimer.html:66,Guid,Guide,66,doc/master/classTIdleTimer.html,https://root.cern,https://root.cern/doc/master/classTIdleTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TImage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TImage Class ReferenceGraphics » 2D Graphics » Basic graphics. ; An abstract interface to image processing library. ; It allows for the reading and writing of images in different formats, several image manipulations (scaling, tiling, merging, etc.) and displaying in pads.; The concrete implementation of this class is done by the TASImage class. The methods are documented in that class. ; Definition at line 29 of file TImage.h. Public Types; enum  ECharType { kUTF8 = 0; , kChar = 1; , kUnicode = 4; };  ; enum  EColorChan { ;   kRedChan = (1ULL << ( 0 )); , kGreenChan = (1ULL << ( 1 )); , kBlueChan = (1ULL << ( 2 )); , kAlphaChan = (1ULL << ( 3 )); , ;   kAllChan = kRedChan | kGreenChan | kBlueChan | kAlphaChan. };  ; enum  ECoordMode { kCoordModeOrigin = 0; , kCoordModePrevious; };  ; enum  EImageFileTypes { ;   kXpm = 0; , kZCompressedXpm; , kGZCompressedXpm; , kPng; , ;   kJpeg; , kXcf; , kPpm; , kPnm; , ;   kBmp; , kIco; , kCur; , kGif; , ;   kTiff; , kXbm; , kFits; , kTga; , ;   kXml; , kUnknown; , kAnimGif. };  ; enum  EText3DType { ;   kPlain = 0; , kEmbossed; , kSunken; , kShadeAbove; , ;   kShadeBelow; , kEmbossedThick; , kSunkenThick; , kOutlineAbove; , ;   kOutlineBelow; , kOutlineFull; , k3DTypes. };  ; enum  ETileType { kStretch = 0; , kTile; , kStretchY; , kStretchX; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImage.html:62,Guid,Guide,62,doc/master/classTImage.html,https://root.cern,https://root.cern/doc/master/classTImage.html,1,['Guid'],['Guide']
Usability,". ROOT: TImageDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TImageDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Save canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.). ; Example: $ root -b; root [0] .x hsimple.C; root [1] c1->Print(""c1.gif"");; b#define b(i)Definition RSha256.hxx:100; c1return c1Definition legend1.C:41; hsimpleDefinition hsimple.py:1; TImageDump can be used in any mode (batch, interactive) as follows TCanvas *c1;; TImageDump *imgdump = new TImageDump(""test.png"");; c1->Paint();; imgdump->Close();; TCanvasThe Canvas class.Definition TCanvas.h:23; TImageDumpSave canvas as an image (GIF, JPEG, PNG, XPM, TIFF etc.).Definition TImageDump.h:22; TImageDump::TImageDumpTImageDump()Default constructor.Definition TImageDump.cxx:53; TImageDump::Closevoid Close(Option_t *opt="""") overrideClose a image file.Definition TImageDump.cxx:106. Definition at line 22 of file TImageDump.h. Public Member Functions;  TImageDump ();  Default constructor. ;  ;  TImageDump (const char *filename, Int_t type=-111);  Initialize batch image interface. ;  ;  ~TImageDump () override;  destructor ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  cell array begin ;  ; void CellArrayEnd () override;  Cell array end. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Cell array fill. ;  ; void Close (Option_t *opt="""") override;  Close a image file. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a Frame around a box. ;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  draw polymarker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImageDump.html:66,Guid,Guide,66,doc/master/classTImageDump.html,https://root.cern,https://root.cern/doc/master/classTImageDump.html,1,['Guid'],['Guide']
Usability,". ROOT: TImagePalette Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TImagePalette Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A class to define a conversion from pixel values to pixel color. ; A Palette is defined by some anchor points. Each anchor point has a value between 0 and 1 and a color. An image has to be normalized and the values between the anchor points are interpolated. All member variables are public and can be directly manipulated. In most cases the default operator will be used to create a TImagePalette. In this case the member arrays have to be allocated by an application and will be deleted in the destructor of this class.; We provide few predefined palettes:. gHistImagePalette - palette used in TH2::Draw(""col""); gWebImagePalette The web palette is a set of 216 colors that will not dither or shift on PCs or Macs. Browsers use this built-in palette when they need to render colors on monitors with only 256 colors (also called 8-bit color monitors). The 6x6x6 web palette provides very quick color index lookup and can be used for good quality conversion of images into 2-D histograms.; TImagePalette(Int_t ncolors, Int_t *colors) if ncolors <= 0 a default palette (see below) of 50 colors is defined. if ncolors == 1 && colors == 0, then a Rainbow Palette is created.; if ncolors > 50 and colors=0, the DeepSea palette is used. (see TStyle::CreateGradientColorTable for more details); if ncolors > 0 and colors = 0, the default palette is used with a maximum of ncolors.; The default palette defines:; index 0->9 : grey colors from light to dark grey; index 10->19 : ""brown"" colors; index 20->29 : ""blueish"" colors; index 30->39 : ""redish"" colors; index 40->49 : basic colors . Definition at line 33 of file TAttImage.h. Public Member Functions;  TImagePalette ();  Default const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImagePalette.html:69,Guid,Guide,69,doc/master/classTImagePalette.html,https://root.cern,https://root.cern/doc/master/classTImagePalette.html,1,['Guid'],['Guide']
Usability,". ROOT: TImagePlugin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TImagePlugin Class Referenceabstract. . Definition at line 22 of file TImagePlugin.h. Public Member Functions;  TImagePlugin (const char *ext);  ;  ~TImagePlugin () override;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; virtual unsigned char * ReadFile (const char *filename, UInt_t &w, UInt_t &h)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteFile (const char *filename, unsigned char *argb, UInt_t w, UInt_t h)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImagePlugin.html:68,Guid,Guide,68,doc/master/classTImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTImagePlugin.html,1,['Guid'],['Guide']
Usability,". ROOT: TInetAddress Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TInetAddress Class ReferenceCore ROOT classes » Base ROOT classes. ; This class represents an Internet Protocol (IP) address. ; Definition at line 36 of file TInetAddress.h. Public Types; typedef std::vector< UInt_t > AddressList_t;  ; typedef std::vector< TString > AliasList_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TInetAddress ();  Default ctor. Used in case of unknown host. Not a valid address. ;  ;  TInetAddress (const TInetAddress &adr);  TInetAddress copy ctor. ;  ; virtual ~TInetAddress ();  ; UInt_t GetAddress () const;  ; UChar_t * GetAddressBytes () const;  Returns the raw IP address in host byte order. ;  ; const AddressList_t & GetAddresses () const;  ; const AliasList_t & GetAliases () const;  ; Int_t GetFamily () const;  ; const char * GetHostAddress () const;  Returns the IP address string ""%d.%d.%d.%d"". ;  ; const char * GetHostName () const;  ; Int_t GetPort () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; TInetAddress & operator= (const TInetAddress &rhs);  TInetAddress assignment operator. ;  ; void Print (Op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInetAddress.html:68,Guid,Guide,68,doc/master/classTInetAddress.html,https://root.cern,https://root.cern/doc/master/classTInetAddress.html,1,['Guid'],['Guide']
Usability,". ROOT: TInsCharCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TInsCharCom Class Reference. . Definition at line 95 of file TGTextEdit.cxx. Public Member Functions;  TInsCharCom (TGTextEdit *te, char ch);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsCharCom.html:67,Guid,Guide,67,doc/master/classTInsCharCom.html,https://root.cern,https://root.cern/doc/master/classTInsCharCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TInsTextCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TInsTextCom Class Reference. . Definition at line 154 of file TGTextEdit.cxx. Public Member Functions;  TInsTextCom (TGTextEdit *te);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void SetEndPos (TGLongPosition end);  ;  Public Member Functions inherited from TGTextEditCommand;  TGTextEditCommand (TGTextEdit *te);  ; void SetPos (TGLongPosition pos);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInsTextCom.html:67,Guid,Guide,67,doc/master/classTInsTextCom.html,https://root.cern,https://root.cern/doc/master/classTInsTextCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TInspectCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TInspectCanvas Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A TInspectCanvas is a canvas specialized to inspect Root objects. ; Definition at line 21 of file TInspectCanvas.h. Public Member Functions;  TInspectCanvas ();  InspectCanvas default constructor. ;  ;  TInspectCanvas (UInt_t ww, UInt_t wh);  InspectCanvas constructor. ;  ;  ~TInspectCanvas () override;  InspectCanvas default destructor. ;  ; void Divide (Int_t nx=1, Int_t ny=1, Float_t xmargin=0.01, Float_t ymargin=0.01, Int_t color=0) override;  ; TButton * GetBackward () const;  ; TObject * GetCurObject () const;  ; TButton * GetForward () const;  ; TList * GetObjects () const;  ; virtual void InspectObject (TObject *obj);  Dump contents of obj in a graphics canvas. ;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of objects. ;  ; void SetGrid (Int_t valuex=1, Int_t valuey=1) override;  ; void SetGridx (Int_t value=1) override;  ; void SetGridy (Int_t value=1) override;  ; void SetLogx (Int_t value=1) override;  ; void SetLogy (Int_t value=1) override;  ; void SetLogz (Int_t value=1) override;  ; void SetTickx (Int_t value=1) override;  ; void SetTicky (Int_t value=1) override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void x3d (Option_t *option="""") override;  Deprecated: use TPad::GetViewer3D() instead. ;  ;  Public Member Functions inherited from TCanvas;  TCanvas (Bool_t build=kTRUE);  Canvas default constructor. ;  ;  TCanvas (const char *name, const char *title, Int_t wtopx, Int_t wtopy, Int_t ww, Int_t wh);  Create a new canvas. ;  ;  TCanvas (const char *name, const char *tit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectCanvas.html:70,Guid,Guide,70,doc/master/classTInspectCanvas.html,https://root.cern,https://root.cern/doc/master/classTInspectCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TInspectorObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInspectorObject Class ReferenceGraphics » 2D Graphics » Graphics pad. ; This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. ; Definition at line 36 of file TInspectCanvas.cxx. Public Member Functions;  TInspectorObject (void *obj, TClass *cl);  ;  ~TInspectorObject () override;  ; void * GetObject () const;  ; void Inspect () const override;  Dump contents of this object in a graphics canvas. ;  ; TClass * IsA () const override;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInspectorObject.html:72,Guid,Guide,72,doc/master/classTInspectorObject.html,https://root.cern,https://root.cern/doc/master/classTInspectorObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TInterpreter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TInterpreter Class Referenceabstract. ; This class defines an abstract interface to a generic command line interpreter. ; Definition at line 60 of file TInterpreter.h. Classes; struct  CallFuncIFacePtr_t;  ; class  SuspendAutoLoadingRAII;  ; class  SuspendAutoParsing;  . Public Types; typedef int(* AutoLoadCallBack_t) (const char *);  ; typedef TDictionary::DeclId_t DeclId_t;  ; enum  ECheckClassInfo { kUnknown = 0; , kKnown = 1; , kWithClassDefInline = 2; };  ; enum  EErrorCode { ;   kNoError = 0; , kRecoverable = 1; , kDangerous = 2; , kFatal = 3; , ;   kProcessing = 99. };  ; enum class  EReturnType { ;   kLong; , kDouble; , kString; , kOther; , ;   kNoReturnType. };  ; typedef std::vector< std::pair< std::string, int > > FwdDeclArgsToKeepCollection_t;  ; typedef class std::map< std::string, std::string > MembersMap_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TInterpreter ();  ;  TInterpreter (const char *name, const char *title=""Generic Interpreter"");  TInterpreter ctor only called by derived classes. ;  ; virtual ~TInterpreter ();  ; virtual void AddAvailableIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter.html:68,Guid,Guide,68,doc/master/classTInterpreter.html,https://root.cern,https://root.cern/doc/master/classTInterpreter.html,1,['Guid'],['Guide']
Usability,". ROOT: TInterpreter::CallFuncIFacePtr_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TInterpreter::CallFuncIFacePtr_t Struct Reference. . Definition at line 82 of file TInterpreter.h. Public Types; typedef void(* Ctor_t) (void **, void *, unsigned long);  ; typedef void(* Dtor_t) (void *, unsigned long, int);  ; enum  EKind { kUninitialized; , kGeneric; , kCtor; , kDtor; };  ; typedef void(* Generic_t) (void *, int, void **, void *);  . Public Member Functions;  CallFuncIFacePtr_t ();  ;  CallFuncIFacePtr_t (Ctor_t func);  ;  CallFuncIFacePtr_t (Dtor_t func);  ;  CallFuncIFacePtr_t (Generic_t func);  . Public Attributes; union { ;  ;    Ctor_t   fCtor ;  ;    Dtor_t   fDtor ;  ;    Generic_t   fGeneric ;  ; };  ;  ; EKind fKind;  . #include <TInterpreter.h>; Member Typedef Documentation. ◆ Ctor_t. typedef void(* TInterpreter::CallFuncIFacePtr_t::Ctor_t) (void **, void *, unsigned long). Definition at line 91 of file TInterpreter.h. ◆ Dtor_t. typedef void(* TInterpreter::CallFuncIFacePtr_t::Dtor_t) (void *, unsigned long, int). Definition at line 92 of file TInterpreter.h. ◆ Generic_t. typedef void(* TInterpreter::CallFuncIFacePtr_t::Generic_t) (void *, int, void **, void *). Definition at line 90 of file TInterpreter.h. Member Enumeration Documentation. ◆ EKind. enum TInterpreter::CallFuncIFacePtr_t::EKind. EnumeratorkUninitialized ; kGeneric ; kCtor ; kDtor . Definition at line 83 of file TInterpreter.h. Constructor & Destructor Documentation. ◆ CallFuncIFacePtr_t() [1/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; ). inline . Definition at line 94 of file TInterpreter.h. ◆ CallFuncIFacePtr_t() [2/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; Generic_t ; func). inline . Definition at line 96 of file TInterpreter.h. ◆ CallFuncIFacePtr_t() [3/4]. TInterpreter::CallFuncIFacePtr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html:89,Guid,Guide,89,doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html,https://root.cern,https://root.cern/doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html,1,['Guid'],['Guide']
Usability,. ROOT: TInterpreter::SuspendAutoLoadingRAII Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInterpreter::SuspendAutoLoadingRAII Class Reference. . Definition at line 120 of file TInterpreter.h. Public Member Functions;  SuspendAutoLoadingRAII (TInterpreter *interp);  ;  ~SuspendAutoLoadingRAII ();  . Private Attributes; TInterpreter * fInterp = nullptr;  ; bool fOldValue;  . #include <TInterpreter.h>; Constructor & Destructor Documentation. ◆ SuspendAutoLoadingRAII(). TInterpreter::SuspendAutoLoadingRAII::SuspendAutoLoadingRAII ; (; TInterpreter * ; interp). inline . Definition at line 125 of file TInterpreter.h. ◆ ~SuspendAutoLoadingRAII(). TInterpreter::SuspendAutoLoadingRAII::~SuspendAutoLoadingRAII ; (; ). inline . Definition at line 129 of file TInterpreter.h. Member Data Documentation. ◆ fInterp. TInterpreter* TInterpreter::SuspendAutoLoadingRAII::fInterp = nullptr. private . Definition at line 121 of file TInterpreter.h. ◆ fOldValue. bool TInterpreter::SuspendAutoLoadingRAII::fOldValue. private . Definition at line 122 of file TInterpreter.h. Libraries for TInterpreter::SuspendAutoLoadingRAII:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TInterpreter.h. TInterpreterSuspendAutoLoadingRAII. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter_1_1SuspendAutoLoadingRAII.html:92,Guid,Guide,92,doc/master/classTInterpreter_1_1SuspendAutoLoadingRAII.html,https://root.cern,https://root.cern/doc/master/classTInterpreter_1_1SuspendAutoLoadingRAII.html,2,['Guid'],['Guide']
Usability,". ROOT: TInterpreter::SuspendAutoParsing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TInterpreter::SuspendAutoParsing Class Reference. . Definition at line 111 of file TInterpreter.h. Public Member Functions;  SuspendAutoParsing (TInterpreter *where, Bool_t value=kTRUE);  ;  ~SuspendAutoParsing ();  . Private Attributes; TInterpreter * fInterp;  ; Bool_t fPrevious;  . #include <TInterpreter.h>; Constructor & Destructor Documentation. ◆ SuspendAutoParsing(). TInterpreter::SuspendAutoParsing::SuspendAutoParsing ; (; TInterpreter * ; where, . Bool_t ; value = kTRUE . ). inline . Definition at line 115 of file TInterpreter.h. ◆ ~SuspendAutoParsing(). TInterpreter::SuspendAutoParsing::~SuspendAutoParsing ; (; ). inline . Definition at line 116 of file TInterpreter.h. Member Data Documentation. ◆ fInterp. TInterpreter* TInterpreter::SuspendAutoParsing::fInterp. private . Definition at line 112 of file TInterpreter.h. ◆ fPrevious. Bool_t TInterpreter::SuspendAutoParsing::fPrevious. private . Definition at line 113 of file TInterpreter.h. Libraries for TInterpreter::SuspendAutoParsing:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TInterpreter.h. TInterpreterSuspendAutoParsing. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreter_1_1SuspendAutoParsing.html:88,Guid,Guide,88,doc/master/classTInterpreter_1_1SuspendAutoParsing.html,https://root.cern,https://root.cern/doc/master/classTInterpreter_1_1SuspendAutoParsing.html,2,['Guid'],['Guide']
Usability,". ROOT: TInterpreterValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; TInterpreterValue Class Referenceabstract. . Definition at line 32 of file TInterpreterValue.h. Public Member Functions;  TInterpreterValue ();  ; virtual ~TInterpreterValue ();  ; virtual Double_t GetAsDouble () const =0;  ; virtual Long_t GetAsLong () const =0;  ; virtual void * GetAsPointer () const =0;  ; virtual ULong_t GetAsUnsignedLong () const =0;  ; virtual const void * GetValAddr () const =0;  ; virtual void * GetValAddr ()=0;  ; virtual Bool_t IsValid () const =0;  ; virtual std::string ToString () const =0;  ; virtual std::pair< std::string, std::string > ToTypeAndValueString () const =0;  . Private Member Functions;  TInterpreterValue (const TInterpreterValue &)=delete;  ; TInterpreterValue & operator= (TInterpreterValue &)=delete;  . #include <TInterpreterValue.h>. Inheritance diagram for TInterpreterValue:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TInterpreterValue() [1/2]. TInterpreterValue::TInterpreterValue ; (; const TInterpreterValue & ; ). privatedelete . ◆ TInterpreterValue() [2/2]. TInterpreterValue::TInterpreterValue ; (; ). inline . Definition at line 37 of file TInterpreterValue.h. ◆ ~TInterpreterValue(). virtual TInterpreterValue::~TInterpreterValue ; (; ). inlinevirtual . Definition at line 38 of file TInterpreterValue.h. Member Function Documentation. ◆ GetAsDouble(). virtual Double_t TInterpreterValue::GetAsDouble ; (; ); const. pure virtual . Implemented in TClingValue. ◆ GetAsLong(). virtual Long_t TInterpreterValue::GetAsLong ; (; ); const. pure virtual . Implemented in TClingValue. ◆ GetAsPointer(). virtual void * TInterpreterValue::GetAsPointer ; (; ); const. pure virtual . Implemented in TClingValue. ◆ GetAsUnsignedL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterpreterValue.html:73,Guid,Guide,73,doc/master/classTInterpreterValue.html,https://root.cern,https://root.cern/doc/master/classTInterpreterValue.html,1,['Guid'],['Guide']
Usability,". ROOT: TInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TInterruptHandler Class Reference. . Definition at line 83 of file TRint.cxx. Public Member Functions;  TInterruptHandler ();  ; Bool_t Notify () override;  TRint interrupt handler. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTInterruptHandler.html:73,Guid,Guide,73,doc/master/classTInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TIter Class Reference. . Definition at line 235 of file TCollection.h. Public Member Functions;  TIter (const TCollection *col, Bool_t dir=kIterForward);  ;  TIter (const TIter &iter);  Copy a TIter. ;  ;  TIter (TIterator *it);  ; virtual ~TIter ();  ; TIter & Begin ();  Pointing to the first element of the container. ;  ; const TCollection * GetCollection () const;  ; Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; TObject * Next ();  ; Bool_t operator!= (const TIter &aIter) const;  ; TObject * operator() ();  ; TObject * operator* () const;  ; TIter & operator++ ();  ; TIter & operator= (const TIter &rhs);  Assigning an TIter to another. ;  ; TIter & operator= (TIterator *iter);  ; Bool_t operator== (const TIter &aIter) const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TIter End ();  Pointing to the element after the last - to a nullptr value in our case. ;  . Protected Member Functions;  TIter ();  . Private Attributes; TIterator * fIterator {nullptr};  . #include <TCollection.h>. Inheritance diagram for TIter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIter() [1/4]. TIter::TIter ; (; ). inlineprotected . Definition at line 241 of file TCollection.h. ◆ TIter() [2/4]. TIter::TIter ; (; const TCollection * ; col, . Bool_t ; dir = kIterForward . ). inline . Definition at line 244 of file TCollection.h. ◆ TIter() [3/4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIter.html:61,Guid,Guide,61,doc/master/classTIter.html,https://root.cern,https://root.cern/doc/master/classTIter.html,1,['Guid'],['Guide']
Usability,". ROOT: TIterCategory< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TIterCategory< T > Class Template Reference. ; template<class T>; class TIterCategory< T >; Definition at line 281 of file TCollection.h. Public Member Functions;  TIterCategory (const TCollection *col, Bool_t dir=kIterForward);  ;  TIterCategory (TIterator *it);  ; virtual ~TIterCategory ();  ; TIterCategory & Begin ();  ;  Public Member Functions inherited from TIter;  TIter (const TCollection *col, Bool_t dir=kIterForward);  ;  TIter (const TIter &iter);  Copy a TIter. ;  ;  TIter (TIterator *it);  ; virtual ~TIter ();  ; TIter & Begin ();  Pointing to the first element of the container. ;  ; const TCollection * GetCollection () const;  ; Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; TObject * Next ();  ; Bool_t operator!= (const TIter &aIter) const;  ; TObject * operator() ();  ; TObject * operator* () const;  ; TIter & operator++ ();  ; TIter & operator= (const TIter &rhs);  Assigning an TIter to another. ;  ; TIter & operator= (TIterator *iter);  ; Bool_t operator== (const TIter &aIter) const;  ; void Reset ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TIterCategory End ();  ;  Static Public Member Functions inherited from TIter; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TIter End ();  Pointing to the element after the last - to a nullptr value in our case. ;  . Additional Inherited Members;  Protected Member Functions inherited from TIter;  TIter ();  . #include <TCollection.h>. Inheritance diagram for TIterCategory< T >:. This browser is not able to show SVG: try Firefox, Chrome, Saf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIterCategory.html:83,Guid,Guide,83,doc/master/classTIterCategory.html,https://root.cern,https://root.cern/doc/master/classTIterCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: TIterator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TIterator Class ReferenceabstractCore ROOT classes » Containers. ; Iterator abstract base class. ; This base class provides the interface for collection iterators. ; Definition at line 30 of file TIterator.h. Public Member Functions; virtual ~TIterator ();  ; virtual const TCollection * GetCollection () const =0;  ; virtual Option_t * GetOption () const;  ; virtual TClass * IsA () const;  ; virtual TObject * Next ()=0;  ; virtual Bool_t operator!= (const TIterator &) const;  Compare two iterator objects. ;  ; TObject * operator() ();  ; virtual TObject * operator* () const;  Return current object or nullptr. ;  ; virtual TIterator & operator= (const TIterator &)=0;  ; Bool_t operator== (const TIterator &other) const;  ; virtual void Reset ()=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions;  TIterator ();  ;  TIterator (const TIterator &);  . #include <TIterator.h>. Inheritance diagram for TIterator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TIterator() [1/2]. TIterator::TIterator ; (; ). inlineprotected . Definition at line 33 of file TIterator.h. ◆ TIterator() [2/2]. TIterator::TIterator ; (; const TIterator & ; ). inlineprotected . Definition at line 34 of file TIterator.h. ◆ ~TIterator(). virtual TIterator::~TIterator ; (; ). inlinevirtual . Definition at line 38 of file TIterator.h. Member Function Documentation. ◆ Class(). static TClass * TIterator::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIterator.html:65,Guid,Guide,65,doc/master/classTIterator.html,https://root.cern,https://root.cern/doc/master/classTIterator.html,1,['Guid'],['Guide']
Usability,". ROOT: TIteratorToSTLInterface< STLContainer > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TIteratorToSTLInterface< STLContainer > Class Template Referencefinal. ; template<class STLContainer>; class TIteratorToSTLInterface< STLContainer >TIterator and GenericRooFIter front end with STL back end. ; By default, this iterators counts, at which position the current element should be. On request, it does an index access to the underlying collection, and returns the element. This happens because the RooLinkedList, which used to be the default collection in RooFit, will not invalidate iterators when inserting elements. Since the default is now an STL collection, reallocations might invalidate the iterator.; With an iterator that counts, only inserting before or at the iterator position will create problems. deal with reallocations while iterating. Therefore, this iterator will also check that the last element it was pointing to is the current element when it is invoked again. This ensures that inserting or removing before this iterator does not happen, which was possible with the linked list iterators of RooFit. When NDEBUG is defined, these checks will disappear. NoteThis is a legacy iterator that only exists to not break old code. Use begin(), end() and range-based for loops with RooArgList and RooArgSet. ; Definition at line 98 of file RooLinkedListIter.h. Public Member Functions;  TIteratorToSTLInterface (const STLContainer &container);  ; const TCollection * GetCollection () const override;  ; RooAbsArg * next () override;  Return next element or nullptr if at end. ;  ; TObject * Next () override;  ; bool operator!= (const TIterator &other) const override;  Compare two iterator objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & oper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIteratorToSTLInterface.html:104,Guid,Guide,104,doc/master/classTIteratorToSTLInterface.html,https://root.cern,https://root.cern/doc/master/classTIteratorToSTLInterface.html,1,['Guid'],['Guide']
Usability,". ROOT: TJSONStackObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Public Attributes |; List of all members ; TJSONStackObj Class Reference. . Definition at line 306 of file TBufferJSON.cxx. Classes; struct  StlRead;  . Public Member Functions;  TJSONStackObj ()=default;  keep actual class version, workaround for ReadVersion in custom streamer ;  ;  ~TJSONStackObj () override;  ; Bool_t AssignStl (TClass *cl, Int_t map_convert, const char *typename_tag);  ; void ClearStl ();  ; nlohmann::json * GetStlNode ();  ; Int_t IsJsonArray (nlohmann::json *json=nullptr, const char *map_convert_type=nullptr);  checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ;  ; Bool_t IsJsonString ();  ; Bool_t IsStl () const;  ; Bool_t IsStreamerElement () const;  ; Bool_t IsStreamerInfo () const;  ; std::unique_ptr< TArrayIndexProducer > MakeReadIndexes ();  ; const char * NextMemberSeparator ();  returns separator for data members ;  ; Int_t PopIntValue ();  ; void PushIntValue (Int_t v);  ; void PushValue (TString &v);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:69,Guid,Guide,69,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,2,"['Clear', 'Guid']","['ClearStl', 'Guide']"
Usability,". ROOT: TKDE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TKDE Class ReferenceHistogram Library. ; Kernel Density Estimation class. ; The three main references are:; ""Scott DW, Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley"",; ""Jann Ben - ETH Zurich, Switzerland -, Univariate kernel density estimation document for KDENS:; Stata module for univariate kernel density estimation.""; ""Hardle W, Muller M, Sperlich S, Werwatz A, Nonparametric and Semiparametric Models. Springer.""; ""Cranmer KS, Kernel Estimation in High-Energy; Physics. Computer Physics Communications 136:198-207,2001"" - e-Print Archive: hep ex/0011057. The algorithm is briefly described in (4). A binned version is also implemented to address the performance issue due to its data size dependance. ; Definition at line 37 of file TKDE.h. Classes; struct  KernelIntegrand;  ; class  TKernel;  . Public Types; enum  EBinning { kUnbinned; , kRelaxedBinning; , kForcedBinning; };  Data binning option. More...;  ; enum  EIteration { kAdaptive; , kFixed; };  Iteration types. They can be set using SetIteration() More...;  ; enum  EKernelType { ;   kGaussian; , kEpanechnikov; , kBiweight; , kCosineArch; , ;   kUserDefined; , kTotalKernels. };  Types of Kernel functions They can be set using the function SetKernelType() or as a string in the constructor. More...;  ; enum  EMirror { ;   kNoMirror; , kMirrorLeft; , kMirrorRight; , kMirrorBoth; , ;   kMirrorAsymLeft; , kMirrorRightAsymLeft; , kMirrorAsymRight; , kMirrorLeftAsymRight; , ;   kMirrorAsymBoth. };  Data ""mirroring"" option to address the probability ""spill out"" boundary effect They can be set using SetMirror() More...;  ;  Public Types inherited from TObject; enum  { ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDE.html:60,Guid,Guide,60,doc/master/classTKDE.html,https://root.cern,https://root.cern/doc/master/classTKDE.html,1,['Guid'],['Guide']
Usability,". ROOT: TKDTree< Index, Value > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TKDTree< Index, Value > Class Template ReferenceMath » MathCore » Interface classes for Random number generation. ; template<typename Index, typename Value>; class TKDTree< Index, Value >Class implementing a kd-tree. ; Contents:; What is kd-tree; How to cosntruct kdtree - Pseudo code; Using TKDTree a. Creating the kd-tree and setting the data b. Navigating the kd-tree; TKDTree implementation - technical details a. The order of nodes in internal arrays b. Division algorithm c. The order of nodes in boundary related arrays. 1. What is kdtree ? ( [http://en.wikipedia.org/wiki/Kd-tree] ); In computer science, a kd-tree (short for k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. kd-trees are a useful data structure for several applications, such as searches involving a multidimensional search key (e.g. range searches and nearest neighbour searches). kd-trees are a special case of BSP trees.; A kd-tree uses only splitting planes that are perpendicular to one of the coordinate system axes. This differs from BSP trees, in which arbitrary splitting planes can be used. In addition, in the typical definition every node of a kd-tree, from the root to the leaves, stores a point. This differs from BSP trees, in which leaves are typically the only nodes that contain points (or other geometric primitives). As a consequence, each splitting plane must go through one of the points in the kd-tree. kd-trees are a variant that store data only in leaf nodes. 2. Constructing a classical kd-tree ( Pseudo code); Since there are many possible ways to choose axis-aligned splitting planes, there are many different ways to construct kd-trees. The c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTree.html:88,Guid,Guide,88,doc/master/classTKDTree.html,https://root.cern,https://root.cern/doc/master/classTKDTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TKDTreeBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TKDTreeBinning Class ReferenceMath » MathCore. ; <- TKDTreeBinning - A class providing multidimensional binning -> ; The class implements multidimensional binning by constructing a TKDTree inner structure from the data which is used as the bins. The bins are retrieved as two double*, one for the minimum bin edges, the other as the maximum bin edges. For one dimension one of these is enough to correctly define the bins. For the multidimensional case both minimum and maximum ones are necessary for the bins to be well defined. The bin edges of d-dimensional data is a d-tet of the bin's thresholds. For example if d=3 the minimum bin edges of bin b is of the form of the following array: {xbmin, ybmin, zbmin}. You also have the possibility to sort the bins by their density.; Details of usage can be found in $ROOTSYS/tutorials/math/kdTreeBinning.C and more information on the embedded TKDTree documentation. ; Definition at line 29 of file TKDTreeBinning.h. Classes; struct  CompareAsc;  ; struct  CompareDesc;  . Public Types; enum  { kAdjustBinEdges = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKDTreeBinning.html:70,Guid,Guide,70,doc/master/classTKDTreeBinning.html,https://root.cern,https://root.cern/doc/master/classTKDTreeBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: TKey Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TKey Class ReferenceInput/Output Library. ; Book space in a file, create I/O buffers, to fill them, (un)compress them. ; The TKey class includes functions to book space in a file, to create I/O buffers, to fill these buffers, to compress/uncompress data buffers. Before saving (making persistent) an object in a file, a key must be created. The key structure contains all the information to uniquely identify a persistent object in a file. . Data Member Explanation . fNbytes Number of bytes for the compressed object and key. . fObjlen Length of uncompressed object. . fDatime Date/Time when the object was written. . fKeylen Number of bytes for the key structure. . fCycle Cycle number of the object. . fSeekKey Address of the object on file (points to fNbytes). This is a redundant information used to cross-check the data base integrity. . fSeekPdir Pointer to the directory supporting this object. . fClassName Object class name. . fName Name of the object. . fTitle Title of the object. . In the 16 highest bits of fSeekPdir is encoded a pid offset. This offset is to be added to the pid index stored in the TRef object and the referenced TObject.; The TKey class is used by ROOT to:; Write an object in the current directory; Write a new ntuple buffer. The structure of a file is shown in TFile::TFile. The structure of a directory is shown in TDirectoryFile::TDirectoryFile. The TKey class is used by the TBasket class. See also TTree. ; Definition at line 28 of file TKey.h. Public Member Functions;  TKey ();  TKey default constructor. ;  ;  TKey (const char *name, const char *title, const TClass *cl, Int_t nbytes, TDirectory *motherDir);  Create a TKey object with the spe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey.html:60,Guid,Guide,60,doc/master/classTKey.html,https://root.cern,https://root.cern/doc/master/classTKey.html,1,['Guid'],['Guide']
Usability,". ROOT: TKeyMapFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TKeyMapFile Class ReferenceInput/Output Library. ; Utility class for browsing TMapFile objects. ; When the browser is invoked for a TMapFile, a TKeyMapFile object is created for each object in the mapped file. When a TKeyMapFile object is clicked in the browser, a new copy of this object is copied into the local directory and the action corresponding to object->Browse is executed (typically Draw). ; Definition at line 20 of file TKeyMapFile.h. Public Member Functions;  TKeyMapFile ();  Default constructor. ;  ;  TKeyMapFile (const char *name, const char *classname, TMapFile *mapfile);  Constructor. ;  ;  ~TKeyMapFile () override;  ; void Browse (TBrowser *b) override;  Browse the contained objects. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyMapFile.html:67,Guid,Guide,67,doc/master/classTKeyMapFile.html,https://root.cern,https://root.cern/doc/master/classTKeyMapFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TKeySQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TKeySQL Class ReferencefinalInput/Output Library. ; TKeySQL represents meta-information about object, which was written to SQL database. ; It keeps object id, which used to locate object data from database tables. ; Definition at line 19 of file TKeySQL.h. Public Member Functions;  TKeySQL (TDirectory *mother, const TObject *obj, const char *name, const char *title=nullptr);  Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. ;  ;  TKeySQL (TDirectory *mother, const void *obj, const TClass *cl, const char *name, const char *title=nullptr);  Creates TKeySQL and convert obj data to TSQLStructure via TBufferSQL2. ;  ;  TKeySQL (TDirectory *mother, Long64_t keyid, Long64_t objid, const char *name, const char *title, const char *keydatetime, Int_t cycle, const char *classname);  Create TKeySQL object, which corresponds to single entry in keys table. ;  ;  ~TKeySQL () override=default;  ; void Delete (Option_t *option="""") final;  Removes key from current directory Note: TKeySQL object is not deleted. ;  ; void DeleteBuffer () final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetDBDirId () const;  return sql id of parent directory ;  ; Long64_t GetDBKeyId () const;  ; Long64_t GetDBObjId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsKeyModified (const char *keyname, const char *keytitle, const char *keydatime, Int_t cycle, const char *classname);  Compares keydata with provided and return kTRUE if key was modified Used in TFile::StreamKeysForDirectory() method to v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:63,Guid,Guide,63,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,1,['Guid'],['Guide']
Usability,". ROOT: TKeyXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TKeyXML Class Referencefinal. . Definition at line 20 of file TKeyXML.h. Public Member Functions;  TKeyXML (TDirectory *mother, Long64_t keyid, const TObject *obj, const char *name=nullptr, const char *title=nullptr);  Creates TKeyXML and convert object data to xml structures. ;  ;  TKeyXML (TDirectory *mother, Long64_t keyid, const void *obj, const TClass *cl, const char *name, const char *title=nullptr);  Creates TKeyXML and convert object data to xml structures. ;  ;  TKeyXML (TDirectory *mother, Long64_t keyid, XMLNodePointer_t keynode);  Creates TKeyXML and takes ownership over xml node, from which object can be restored. ;  ;  ~TKeyXML () override;  TKeyXML destructor. ;  ; void Delete (Option_t *option="""") final;  Delete key from current directory Note: TKeyXML object is not deleted. ;  ; void DeleteBuffer () final;  Delete key buffer(s). ;  ; void FillBuffer (char *&) final;  Encode key header into output buffer. ;  ; char * GetBuffer () const final;  ; Long64_t GetKeyId () const;  ; Long64_t GetSeekKey () const final;  ; Long64_t GetSeekPdir () const final;  ; TClass * IsA () const override;  ; Bool_t IsSubdir () const;  ; void Keep () final;  Set the ""KEEP"" status. ;  ; XMLNodePointer_t KeyNode () const;  ; Int_t Read (TObject *tobj) final;  To read an object from the file. ;  ; void ReadBuffer (char *&) final;  Decode input buffer. ;  ; Bool_t ReadFile () final;  Read the key structure from the file. ;  ; TObject * ReadObj () final;  read object derived from TObject class, from key if it is not TObject or in case of error, return nullptr ;  ; void * ReadObjectAny (const TClass *expectedClass) final;  read object of any type ;  ; TObject * ReadObjWithBuffer (ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:63,Guid,Guide,63,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,1,['Guid'],['Guide']
Usability,". ROOT: TLatex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TLatex Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw Mathematical Formula. ; TLatex's purpose is to write mathematical equations. The syntax is very similar to the Latex's one. It provides several functionalities:. Subscripts and Superscripts; Fractions; Splitting Lines; Roots; Mathematical Symbols; Delimiters; Greek Letters; Accents; Changing Style; Alignment Rules; Character Adjustment; Italic and Boldface; Examples; Interface to TMathText. When the font precision (see TAttText) is low (0 or 1), TLatex is painted as a normal TText, the control characters are not interpreted. Subscripts and Superscripts; Subscripts and superscripts are made with the _ and ^ commands. These commands can be combined to make complicated subscript and superscript expressions. You may adjust the display of subscripts and superscripts by using the two functions SetIndiceSize(Double_t), which set relative size of subscripts and superscripts, and SetLimitIndiceSize(Int_t), which set limits for text resizing of subscripts and superscripts.; Examples:. The best way to put the subscripts and superscripts before the character and not after, is to use an empty character:. The subscripts and superscripts operators apply not only on one character but on all the ""normal text"" preceding them. In the following example the second E is lower than the first one because the operator _ is applied on /f which has a descending part, and not only on f which as no descending part. To make sure the second operator _ applies only on f a dummy operator ^{} should be introduced to separate the f from the /. Fractions; Fractions denoted by the / symbol are made in the obvious way. The #frac command i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex.html:62,Guid,Guide,62,doc/master/classTLatex.html,https://root.cern,https://root.cern/doc/master/classTLatex.html,1,['Guid'],['Guide']
Usability,". ROOT: TLatex::TLatexFormSize Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TLatex::TLatexFormSize Class Reference. ; TLatex helper class used to compute the size of a portion of a formula. ; Definition at line 33 of file TLatex.h. Public Member Functions;  TLatexFormSize ()=default;  ;  TLatexFormSize (Double_t width, Double_t over, Double_t under);  ; TLatexFormSize AddOver (TLatexFormSize f);  ; TLatexFormSize AddOver (TLatexFormSize f1, TLatexFormSize f2);  ; TLatexFormSize AddUnder (TLatexFormSize f);  ; Double_t Height () const;  ; TLatexFormSize operator+ (TLatexFormSize f);  ; void operator+= (TLatexFormSize f);  ; Double_t Over () const;  ; void Set (Double_t x, Double_t y1, Double_t y2);  ; Double_t Under () const;  ; Double_t Width () const;  . Private Attributes; Double_t fOver {0};  ; Double_t fUnder {0};  ; Double_t fWidth {0};  . #include <TLatex.h>; Constructor & Destructor Documentation. ◆ TLatexFormSize() [1/2]. TLatex::TLatexFormSize::TLatexFormSize ; (; ). default . ◆ TLatexFormSize() [2/2]. TLatex::TLatexFormSize::TLatexFormSize ; (; Double_t ; width, . Double_t ; over, . Double_t ; under . ). inline . Definition at line 39 of file TLatex.h. Member Function Documentation. ◆ AddOver() [1/2]. TLatexFormSize TLatex::TLatexFormSize::AddOver ; (; TLatexFormSize ; f). inline . Definition at line 48 of file TLatex.h. ◆ AddOver() [2/2]. TLatexFormSize TLatex::TLatexFormSize::AddOver ; (; TLatexFormSize ; f1, . TLatexFormSize ; f2 . ). inline . Definition at line 52 of file TLatex.h. ◆ AddUnder(). TLatexFormSize TLatex::TLatexFormSize::AddUnder ; (; TLatexFormSize ; f). inline . Definition at line 50 of file TLatex.h. ◆ Height(). Double_t TLatex::TLatexFormSize::Height ; (; ); const. inline . Definition at line 59 of file TLatex.h. ◆ operator+(). TLatexFormSize TLatex::TLatexFormSize::operator+ ; (; TLatexFormS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLatex_1_1TLatexFormSize.html:78,Guid,Guide,78,doc/master/classTLatex_1_1TLatexFormSize.html,https://root.cern,https://root.cern/doc/master/classTLatex_1_1TLatexFormSize.html,1,['Guid'],['Guide']
Usability,". ROOT: TLatex::TextSpec_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TLatex::TextSpec_t Struct Reference. ; TLatex helper struct holding the attributes of a piece of text. ; Definition at line 24 of file TLatex.h. Public Attributes; Double_t fAngle;  ; Int_t fColor;  ; Int_t fFont;  ; Double_t fSize;  . #include <TLatex.h>; Member Data Documentation. ◆ fAngle. Double_t TLatex::TextSpec_t::fAngle. Definition at line 25 of file TLatex.h. ◆ fColor. Int_t TLatex::TextSpec_t::fColor. Definition at line 26 of file TLatex.h. ◆ fFont. Int_t TLatex::TextSpec_t::fFont. Definition at line 26 of file TLatex.h. ◆ fSize. Double_t TLatex::TextSpec_t::fSize. Definition at line 25 of file TLatex.h. Collaboration diagram for TLatex::TextSpec_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; graf2d/graf/inc/TLatex.h. TLatexTextSpec_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLatex_1_1TextSpec__t.html:75,Guid,Guide,75,doc/master/structTLatex_1_1TextSpec__t.html,https://root.cern,https://root.cern/doc/master/structTLatex_1_1TextSpec__t.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeaf Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLeaf Class ReferenceTree Library. ; A TLeaf describes individual elements of a TBranch See TBranch structure in TTree. ; A TTree object is a list of TBranch. A TBranch object is a list of TLeaf. In most cases, the TBranch will have one TLeaf. A TLeaf describes the branch data types and holds the data.; A few notes about the data held by the leaf. It can contain:; a single object or primitive (e.g., one float),; a fixed-number of objects (e.g., each entry has two floats). The number of elements per entry is saved in fLen.; a dynamic number of primitives. The number of objects in each entry is saved in the fLeafCount branch. Note options (2) and (3) can combined - if fLeafCount says an entry has 3 elements and fLen is 2, then there will be 6 objects in that entry.; Additionally, fNdata is transient and generated on read to determine the necessary size of a buffer to hold event data; depending on the call-site, it may be sized larger than the number of elements ; Definition at line 57 of file TLeaf.h. Classes; struct  GetValueHelper;  ; struct  GetValueHelper< Long64_t >;  ; struct  GetValueHelper< LongDouble_t >;  ; struct  GetValueHelper< ULong64_t >;  ; struct  LeafCountValues;  . Public Types; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeaf.html:61,Guid,Guide,61,doc/master/classTLeaf.html,https://root.cern,https://root.cern/doc/master/classTLeaf.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeaf::GetValueHelper< Long64_t > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; TLeaf::GetValueHelper< Long64_t > Struct Reference. . Definition at line 172 of file TLeaf.h. Static Public Member Functions; static Long64_t Exec (const TLeaf *leaf, Int_t i=0);  . #include <TLeaf.h>; Member Function Documentation. ◆ Exec(). static Long64_t TLeaf::GetValueHelper< Long64_t >::Exec ; (; const TLeaf * ; leaf, . Int_t ; i = 0 . ). inlinestatic . Definition at line 173 of file TLeaf.h. The documentation for this struct was generated from the following file:; tree/tree/inc/TLeaf.h. TLeafGetValueHelper< Long64_t >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01Long64__t_01_4.html:90,Guid,Guide,90,doc/master/structTLeaf_1_1GetValueHelper_3_01Long64__t_01_4.html,https://root.cern,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01Long64__t_01_4.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeaf::GetValueHelper< LongDouble_t > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; TLeaf::GetValueHelper< LongDouble_t > Struct Reference. . Definition at line 178 of file TLeaf.h. Static Public Member Functions; static LongDouble_t Exec (const TLeaf *leaf, Int_t i=0);  . #include <TLeaf.h>; Member Function Documentation. ◆ Exec(). static LongDouble_t TLeaf::GetValueHelper< LongDouble_t >::Exec ; (; const TLeaf * ; leaf, . Int_t ; i = 0 . ). inlinestatic . Definition at line 179 of file TLeaf.h. The documentation for this struct was generated from the following file:; tree/tree/inc/TLeaf.h. TLeafGetValueHelper< LongDouble_t >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01LongDouble__t_01_4.html:94,Guid,Guide,94,doc/master/structTLeaf_1_1GetValueHelper_3_01LongDouble__t_01_4.html,https://root.cern,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01LongDouble__t_01_4.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeaf::GetValueHelper< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; TLeaf::GetValueHelper< T > Struct Template Reference. ; template<typename T>; struct TLeaf::GetValueHelper< T >; Definition at line 84 of file TLeaf.h. Static Public Member Functions; static T Exec (const TLeaf *leaf, Int_t i=0);  . #include <TLeaf.h>; Member Function Documentation. ◆ Exec(). template<typename T > . static T TLeaf::GetValueHelper< T >::Exec ; (; const TLeaf * ; leaf, . Int_t ; i = 0 . ). inlinestatic . Definition at line 85 of file TLeaf.h. The documentation for this struct was generated from the following file:; tree/tree/inc/TLeaf.h. TLeafGetValueHelper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper.html:92,Guid,Guide,92,doc/master/structTLeaf_1_1GetValueHelper.html,https://root.cern,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeaf::GetValueHelper< ULong64_t > Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; TLeaf::GetValueHelper< ULong64_t > Struct Reference. . Definition at line 175 of file TLeaf.h. Static Public Member Functions; static ULong64_t Exec (const TLeaf *leaf, Int_t i=0);  . #include <TLeaf.h>; Member Function Documentation. ◆ Exec(). static ULong64_t TLeaf::GetValueHelper< ULong64_t >::Exec ; (; const TLeaf * ; leaf, . Int_t ; i = 0 . ). inlinestatic . Definition at line 176 of file TLeaf.h. The documentation for this struct was generated from the following file:; tree/tree/inc/TLeaf.h. TLeafGetValueHelper< ULong64_t >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01ULong64__t_01_4.html:91,Guid,Guide,91,doc/master/structTLeaf_1_1GetValueHelper_3_01ULong64__t_01_4.html,https://root.cern,https://root.cern/doc/master/structTLeaf_1_1GetValueHelper_3_01ULong64__t_01_4.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeaf::LeafCountValues Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TLeaf::LeafCountValues Struct Reference. . Definition at line 66 of file TLeaf.h. Public Attributes; Long64_t fStartEntry {-1};  ! entry number of corresponding to element 0 of the vector. ;  ; Counts_t fValues;  . #include <TLeaf.h>; Member Data Documentation. ◆ fStartEntry. Long64_t TLeaf::LeafCountValues::fStartEntry {-1}. ! entry number of corresponding to element 0 of the vector. ; Definition at line 68 of file TLeaf.h. ◆ fValues. Counts_t TLeaf::LeafCountValues::fValues. Definition at line 67 of file TLeaf.h. Collaboration diagram for TLeaf::LeafCountValues:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/tree/inc/TLeaf.h. TLeafLeafCountValues. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTLeaf_1_1LeafCountValues.html:79,Guid,Guide,79,doc/master/structTLeaf_1_1LeafCountValues.html,https://root.cern,https://root.cern/doc/master/structTLeaf_1_1LeafCountValues.html,2,['Guid'],['Guide']
Usability,". ROOT: TLeafB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafB Class ReferenceTree Library. ; A TLeaf for an 8 bit Integer data type. ; Definition at line 26 of file TLeafB.h. Public Member Functions;  TLeafB ();  Default constructor. ;  ;  TLeafB (TBranch *parent, const char *name, const char *type);  Create a LeafB. ;  ;  ~TLeafB () override;  Destructor. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to a ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements into Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a 8 bit integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *addr=nullptr) override;  Set value buffer address. ;  ; virtual void SetMaximum (Char_t max);  ; virtual void SetMinimu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafB.html:62,Guid,Guide,62,doc/master/classTLeafB.html,https://root.cern,https://root.cern/doc/master/classTLeafB.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafC Class ReferenceTree Library. ; A TLeaf for a variable length string. ; Definition at line 26 of file TLeafC.h. Public Member Functions;  TLeafC ();  Default constructor for LeafC. ;  ;  TLeafC (TBranch *parent, const char *name, const char *type);  Create a LeafC. ;  ;  ~TLeafC () override;  Default destructor for a LeafC. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; virtual char * GetValueString () const;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a string from std::istream s up to delimiter and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (Int_t max);  ; virtual void SetMinimum (Int_t min);  ; void Streamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafC.html:62,Guid,Guide,62,doc/master/classTLeafC.html,https://root.cern,https://root.cern/doc/master/classTLeafC.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafD Class ReferenceTree Library. ; A TLeaf for a 64 bit floating point data type. ; Definition at line 26 of file TLeafD.h. Public Member Functions;  TLeafD ();  Default constructor for LeafD. ;  ;  TLeafD (TBranch *parent, const char *name, const char *type);  Create a LeafD. ;  ;  ~TLeafD () override;  Default destructor for a LeafD. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a double from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD.html:62,Guid,Guide,62,doc/master/classTLeafD.html,https://root.cern,https://root.cern/doc/master/classTLeafD.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafD32 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafD32 Class ReferenceTree Library. ; A TLeaf for a 24 bit truncated floating point data type. ; Definition at line 28 of file TLeafD32.h. Public Member Functions;  TLeafD32 ();  Default constructor for LeafD32. ;  ;  TLeafD32 (TBranch *parent, const char *name, const char *type);  Create a LeafD32. ;  ;  ~TLeafD32 () override;  Default destructor for a LeafD32. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a double from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TLeafD32. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafD32.html:64,Guid,Guide,64,doc/master/classTLeafD32.html,https://root.cern,https://root.cern/doc/master/classTLeafD32.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLeafElement Class ReferenceTree Library. ; A TLeaf for the general case when using the branches created via a TStreamerInfo (i.e. ; using TBranchElement). ; Definition at line 32 of file TLeafElement.h. Public Member Functions;  TLeafElement ();  Default constructor for LeafObject. ;  ;  TLeafElement (TBranch *parent, const char *name, Int_t id, Int_t type);  Create a LeafObject. ;  ;  ~TLeafElement () override;  Default destructor for a LeafObject. ;  ; bool CanGenerateOffsetArray () override;  ; virtual Int_t * GenerateOffsetArrayBase (Int_t, Int_t);  ; DeserializeType GetDeserializeType () const override;  Determine if this TLeafElement supports bulk IO. ;  ; TString GetFullName () const override;  Return the full name (including the parent's branch names) of the leaf. ;  ; Int_t GetID () const;  ; Int_t GetLen () const override;  Return the number of effective elements of this leaf, for the current entry. ;  ; Int_t GetMaximum () const override;  ; TMethodCall * GetMethodCall (const char *name);  Returns pointer to method corresponding to name name is a string with the general form ""method(list of params)"" If list of params is omitted, () is assumed;. ;  ; Int_t GetNdata () const override;  ; template<typename T > ; T GetTypedValueSubArray (Int_t i=0, Int_t j=0) const;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; bool IsOn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafElement.html:68,Guid,Guide,68,doc/master/classTLeafElement.html,https://root.cern,https://root.cern/doc/master/classTLeafElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafF Class ReferenceTree Library. ; A TLeaf for a 32 bit floating point data type. ; Definition at line 26 of file TLeafF.h. Public Member Functions;  TLeafF ();  Default constructor for LeafF. ;  ;  TLeafF (TBranch *parent, const char *name, const char *type);  Create a LeafF. ;  ;  ~TLeafF () override;  Default destructor for a LeafF. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a float from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a L",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafF.html:62,Guid,Guide,62,doc/master/classTLeafF.html,https://root.cern,https://root.cern/doc/master/classTLeafF.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafF16 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafF16 Class ReferenceTree Library. ; A TLeaf for a 24 bit truncated floating point data type. ; Definition at line 27 of file TLeafF16.h. Public Member Functions;  TLeafF16 ();  Default constructor for LeafF16. ;  ;  TLeafF16 (TBranch *parent, const char *name, const char *type);  Create a LeafF16. ;  ;  ~TLeafF16 () override;  Default destructor for a LeafF16. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; const char * GetTypeName () const override;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a float from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TLeafF16. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TLeaf;  TLeaf ();  ;  TLeaf (TBranch *parent, const char *name, const char *type);  Create a Leaf. ;  ;  ~TL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafF16.html:64,Guid,Guide,64,doc/master/classTLeafF16.html,https://root.cern,https://root.cern/doc/master/classTLeafF16.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafG Class ReferenceTree Library. ; A TLeaf for a 64 bit Integer data type. ; Definition at line 27 of file TLeafG.h. Public Member Functions;  TLeafG ();  Default constructor for LeafL. ;  ;  TLeafG (TBranch *parent, const char *name, const char *type);  Create a LeafL. ;  ;  ~TLeafG () override;  Default destructor for a LeafL. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafG.html:62,Guid,Guide,62,doc/master/classTLeafG.html,https://root.cern,https://root.cern/doc/master/classTLeafG.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafI Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafI Class ReferenceTree Library. ; A TLeaf for an Integer data type. ; Definition at line 27 of file TLeafI.h. Public Member Functions;  TLeafI ();  Default constructor for LeafI. ;  ;  TLeafI (TBranch *parent, const char *name, const char *type);  Create a LeafI. ;  ;  ~TLeafI () override;  Default destructor for a LeafI. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read an integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafI.html:62,Guid,Guide,62,doc/master/classTLeafI.html,https://root.cern,https://root.cern/doc/master/classTLeafI.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafL Class ReferenceTree Library. ; A TLeaf for a 64 bit Integer data type. ; Definition at line 27 of file TLeafL.h. Public Member Functions;  TLeafL ();  Default constructor for LeafL. ;  ;  TLeafL (TBranch *parent, const char *name, const char *type);  Create a LeafL. ;  ;  ~TLeafL () override;  Default destructor for a LeafL. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; Long64_t GetValueLong64 (Int_t i=0) const override;  ; LongDouble_t GetValueLongDouble (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafL.html:62,Guid,Guide,62,doc/master/classTLeafL.html,https://root.cern,https://root.cern/doc/master/classTLeafL.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafO Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafO Class ReferenceTree Library. ; A TLeaf for a bool data type. ; Definition at line 26 of file TLeafO.h. Public Member Functions;  TLeafO ();  Default constructor for LeafO. ;  ;  TLeafO (TBranch *parent, const char *name, const char *type);  Create a LeafO. ;  ;  ~TLeafO () override;  Default destructor for a LeafO. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a string from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *add=nullptr) override;  Set leaf buffer data address. ;  ; virtual void SetMaximum (bool max);  ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafO.html:62,Guid,Guide,62,doc/master/classTLeafO.html,https://root.cern,https://root.cern/doc/master/classTLeafO.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafObject Class ReferenceTree Library. ; A TLeaf for a general object derived from TObject. ; Definition at line 31 of file TLeafObject.h. Public Types; enum  EStatusBits { kWarn = (1ULL << ( 14 )); };  ; enum  EStatusBitsOldValues { kOldWarn = (1ULL << ( 12 )); };  In version of ROOT older then v6.12, kWarn was set to BIT(12) which overlaps with TBranch::kBranchObject. More...;  ;  Public Types inherited from TLeaf; enum class  DeserializeType { ;   kInvalid = 0; , kExternal; , kDestructive = kExternal; , kInPlace; , ;   kZeroCopy. };  ; enum  EStatusBits { kIndirectAddress = (1ULL << ( 11 )); , kNewValue = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLeafObject ();  Default constructor for LeafObject. ;  ;  TLeafObject (TBranch *parent, const char *name, const char *type);  Create a LeafObject. ;  ;  ~TLeafObject () override;  Default destructor for a LeafObject. ;  ; bool CanGenerateOffsetArray () override;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; virtual Int_t * GenerateOffsetArrayBase (Int_t, Int_t);  ; TClass * GetClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafObject.html:67,Guid,Guide,67,doc/master/classTLeafObject.html,https://root.cern,https://root.cern/doc/master/classTLeafObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TLeafS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLeafS Class ReferenceTree Library. ; A TLeaf for a 16 bit Integer data type. ; Definition at line 26 of file TLeafS.h. Public Member Functions;  TLeafS ();  Default constructor for LeafS. ;  ;  TLeafS (TBranch *parent, const char *name, const char *type);  Create a LeafS. ;  ;  ~TLeafS () override;  Default destructor for a LeafS. ;  ; void Export (TClonesArray *list, Int_t n) override;  Export element from local leaf buffer to ClonesArray. ;  ; void FillBasket (TBuffer &b) override;  Pack leaf elements in Basket output buffer. ;  ; DeserializeType GetDeserializeType () const override;  ; Int_t GetMaximum () const override;  ; Int_t GetMinimum () const override;  ; const char * GetTypeName () const override;  Returns name of leaf type. ;  ; Double_t GetValue (Int_t i=0) const override;  Returns current value of leaf. ;  ; void * GetValuePointer () const override;  ; void Import (TClonesArray *list, Int_t n) override;  Import element from ClonesArray into local leaf buffer. ;  ; bool IncludeRange (TLeaf *) override;  Copy/set fMinimum and fMaximum to include/be wide than those of the parameter. ;  ; TClass * IsA () const override;  ; void PrintValue (Int_t i=0) const override;  Prints leaf value. ;  ; void ReadBasket (TBuffer &b) override;  Read leaf elements from Basket input buffer. ;  ; void ReadBasketExport (TBuffer &b, TClonesArray *list, Int_t n) override;  Read leaf elements from Basket input buffer and export buffer to TClonesArray objects. ;  ; bool ReadBasketFast (TBuffer &, Long64_t) override;  Deserialize input by performing byteswap as needed. ;  ; void ReadValue (std::istream &s, Char_t delim=' ') override;  Read a integer integer from std::istream s and store it into the branch buffer. ;  ; void SetAddress (void *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeafS.html:62,Guid,Guide,62,doc/master/classTLeafS.html,https://root.cern,https://root.cern/doc/master/classTLeafS.html,1,['Guid'],['Guide']
Usability,". ROOT: TLegend Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TLegend Class ReferenceGraphics » 2D Graphics » Basic graphics. ; This class displays a legend box (TPaveText) containing several legend entries. ; Each legend entry is made of a reference to a ROOT object, a text label and an option specifying which graphical attributes (marker/line/fill) should be displayed.; The following example shows how to create a legend. In this example the legend contains a histogram, a function and a graph. The histogram is put in the legend using its reference pointer whereas the graph and the function are added using their names. Note that, because TGraph constructors do not have the TGraph name as parameter, the graph name should be specified using the SetName method.; When an object is added by name, a scan is performed on the list of objects contained in the current pad (gPad) and also in the possible TMultiGraph and THStack present in the pad. If a matching name is found, the corresponding object is added in the legend using its pointer.; {; auto c1 = new TCanvas(""c1"",""c1"",600,500);; gStyle->SetOptStat(0);; ; auto h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);; h1->FillRandom(""gaus"",30000);; h1->SetFillColor(kGreen);; h1->SetFillStyle(3003);; h1->Draw();; ; auto f1=new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);; f1->SetLineColor(kBlue);; f1->SetLineWidth(4);; f1->Draw(""same"");; ; const Int_t n = 20;; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; auto gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");; ; aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegend.html:63,Guid,Guide,63,doc/master/classTLegend.html,https://root.cern,https://root.cern/doc/master/classTLegend.html,1,['Guid'],['Guide']
Usability,". ROOT: TLegendEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLegendEntry Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Storage class for one entry of a TLegend. ; Definition at line 24 of file TLegendEntry.h. Public Member Functions;  TLegendEntry ();  TLegendEntry do-nothing default constructor. ;  ;  TLegendEntry (const TLegendEntry &entry);  TLegendEntry copy constructor. ;  ;  TLegendEntry (const TObject *obj, const char *label=nullptr, Option_t *option=""lpf"");  TLegendEntry normal constructor for one entry in a TLegend. ;  ;  ~TLegendEntry () override;  TLegendEntry default destructor. ;  ; void Copy (TObject &obj) const override;  copy this TLegendEntry into obj ;  ; virtual const char * GetLabel () const;  ; virtual TObject * GetObject () const;  ; Option_t * GetOption () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  dump this TLegendEntry to std::cout ;  ; virtual void SaveEntry (std::ostream &out, const char *name);  Save this TLegendEntry as C++ statements on output stream out to be used with the SaveAs .C option. ;  ; virtual void SetLabel (const char *label="""");  ; virtual void SetObject (const char *objectName);  (re)set the obj pointed to by this entry ;  ; virtual void SetObject (TObject *obj);  (re)set the obj pointed to by this entry ;  ; virtual void SetOption (Option_t *option=""lpf"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry.html:68,Guid,Guide,68,doc/master/classTLegendEntry.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TLibraryDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLibraryDocInfo Class Reference. . Definition at line 141 of file TDocInfo.h. Public Member Functions;  TLibraryDocInfo ();  ;  TLibraryDocInfo (const char *lib);  ; void AddDependency (const std::string &lib);  ; void AddModule (const std::string &module);  ; std::set< std::string > & GetDependencies ();  ; std::set< std::string > & GetModules ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLibraryDocInfo.html:71,Guid,Guide,71,doc/master/classTLibraryDocInfo.html,https://root.cern,https://root.cern/doc/master/classTLibraryDocInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TLimit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Static Private Attributes |; List of all members ; TLimit Class ReferenceHistogram Library. ; Legacy Code TLimit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLimit might still be a valid solution. Consider switching to RooStats.; Algorithm to compute 95% CL limits using the Likelihood ratio semi-bayesian method. ; Implemented by C. Delaere from the mclimit code written by Tom Junk [HEP-EX/9902006]. See http://cern.ch/thomasj/searchlimits/ecl.html for more details.; It takes signal, background and data histograms wrapped in a TLimitDataSource as input and runs a set of Monte Carlo experiments in order to compute the limits. If needed, inputs are fluctuated according to systematics. The output is a TConfidenceLevel.; The class TLimitDataSource takes the signal, background and data histograms as well as different systematics sources to form the TLimit input.; The class TConfidenceLevel represents the final result of the TLimit algorithm. It is created just after the time-consuming part and can be stored in a TFile for further processing. It contains light methods to return CLs, CLb and other interesting quantities.; The actual algorithm...; From an input (TLimitDataSource) it produces an output TConfidenceLevel. For this, nmc Monte Carlo experiments are performed. As usual, the larger this number, the longer the compute time, but the better the result.; Supposing that there is a plotfile.root file containing 3 histograms (signal, background and data), you can imagine doing things like:; TFile* infile=new TFile(""plotfile.root"",""READ"");; infile->cd();; TH1* sh=(TH1*)infile->Get(""signal"");; TH1* bh=(TH1*)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimit.html:62,Guid,Guide,62,doc/master/classTLimit.html,https://root.cern,https://root.cern/doc/master/classTLimit.html,1,['Guid'],['Guide']
Usability,". ROOT: TLimitDataSource Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TLimitDataSource Class Reference. ; This class serves as input for the TLimit::ComputeLimit method. ; It takes the signal, background and data histograms to form a channel. More channels can be added using AddChannel(), as well as different systematics sources. ; Definition at line 24 of file TLimitDataSource.h. Public Member Functions;  TLimitDataSource ();  Default constructor. ;  ;  TLimitDataSource (TH1 *s, TH1 *b, TH1 *d);  Another constructor, directly adds one channel with signal, background and data given as input. ;  ;  TLimitDataSource (TH1 *s, TH1 *b, TH1 *d, TVectorD *es, TVectorD *eb, TObjArray *names);  Another constructor, directly adds one channel with signal, background and data given as input. ;  ;  ~TLimitDataSource () override;  ; virtual void AddChannel (TH1 *, TH1 *, TH1 *);  Adds a channel with signal, background and data given as input. ;  ; virtual void AddChannel (TH1 *, TH1 *, TH1 *, TVectorD *, TVectorD *, TObjArray *);  Adds a channel with signal, background and data given as input. ;  ; virtual TObjArray * GetBackground ();  ; virtual TObjArray * GetCandidates ();  ; virtual TObjArray * GetErrorNames ();  ; virtual TObjArray * GetErrorOnBackground ();  ; virtual TObjArray * GetErrorOnSignal ();  ; virtual TObjArray * GetSignal ();  ; virtual void SetOwner (bool swtch=kTRUE);  Gives to the TLimitDataSource the ownership of the various objects given as input. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option=""""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLimitDataSource.html:72,Guid,Guide,72,doc/master/classTLimitDataSource.html,https://root.cern,https://root.cern/doc/master/classTLimitDataSource.html,1,['Guid'],['Guide']
Usability,". ROOT: TLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Use the TLine constructor to create a simple line. ; TLine(Double_t x1,Double_t y1,Double_t x2,Double_t y2); x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TLine::TLineTLine()Definition TLine.h:38; double; x1, y1, x2, y2 are the coordinates of the first and the second point.; Example:; root[] l = new TLine(0.2,0.2,0.8,0.3); root[] l->Draw(); Drawth1 Draw(); lTLine lDefinition textangle.C:4. Definition at line 22 of file TLine.h. Public Types; enum  { kLineNDC = (1ULL << ( 14 )); , kVertical = (1ULL << ( 15 )); , kHorizontal = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLine ();  ;  TLine (const TLine &line);  Line copy constructor. ;  ;  TLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Line normal constructor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLine.html:61,Guid,Guide,61,doc/master/classTLine.html,https://root.cern,https://root.cern/doc/master/classTLine.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TLinearFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TLinearFitter Class ReferenceMath » TMinuit. ; NoteAn alternative to this class is to use ROOT::Fit::Fitter, calling the LinearFit() method.; The Linear Fitter - For fitting functions that are LINEAR IN PARAMETERS. The Linear Fitter; Linear fitter is used to fit a set of data points with a linear combination of specified functions. Note, that ""linear"" in the name stands only for the model dependency on parameters, the specified functions can be nonlinear. The general form of this kind of model is y(x) = a[0] + a[1]*f[1](x)+...a[n]*f[n](x); f#define f(i)Definition RSha256.hxx:104; a#define a(i)Definition RSha256.hxx:99; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; Functions f are fixed functions of x. For example, fitting with a polynomial is linear fitting in this sense. Introduction; The fitting method; The fit is performed using the Normal Equations method with Cholesky decomposition.; Why should it be used?; The linear fitter is considerably faster than general non-linear fitters and doesn't require to set the initial values of parameters. Using the fitter:. 1.Adding the data points:; 1.1 To store or not to store the input data?. There are 2 options in the constructor - to store or not store the input data. The advantages of storing the data are that you'll be able to reset the fitting model without adding all the points again, and that for very large sets of points the chisquare is calculated more precisely. The obvious disadvantage is the amount of memory used to keep all the points.; Before you start adding the points, you can change the store/not store option by StoreData() method. 1.2 The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:69,Guid,Guide,69,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TLinearGradient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearGradient Class Reference. . Definition at line 97 of file TColorGradient.h. Public Member Functions;  TLinearGradient ();  ; const Point & GetEnd () const;  Get end. ;  ; const Point & GetStart () const;  Get start. ;  ; TClass * IsA () const override;  ; void SetStartEnd (const Point &p1, const Point &p2);  Set end and start. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  Public Member Functions inherited from TColorGradient;  TColorGradient ();  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Color_t *colorIndices, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ;  TColorGradient (Color_t newColor, UInt_t nPoints, const Double_t *points, const Double_t *colors, ECoordinateMode mode=kObjectBoundingMode);  There is no way to validate parameters here, so it's up to user to pass correct arguments. ;  ; Double_t GetColorAlpha (UInt_t indx) const;  Return alpha parameter of selected color. ;  ; const Double_t * GetColorPositions () const;  Get color positions. ;  ; const Double_t * GetColors () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearGradient.html:71,Guid,Guide,71,doc/master/classTLinearGradient.html,https://root.cern,https://root.cern/doc/master/classTLinearGradient.html,1,['Guid'],['Guide']
Usability,". ROOT: TLinearMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLinearMinimizer Class Reference. ; TLinearMinimizer class: minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class; TLinearMinimizer, simple class implementing the ROOT::Math::Minimizer interface usingTLinearFitter. This class uses TLinearFitter to find directly (by solving a system of linear equations) the minimum of a least-square function which has a linear dependence in the fit parameters. This class is not used directly, but via the ROOT::Fitter class, when calling the LinearFit method. It is instantiates using the plug-in manager (plug-in name is ""Linear""). ; Definition at line 31 of file TLinearMinimizer.h. Public Member Functions;  TLinearMinimizer (const char *type);  Constructor from a char * (used by PM) ;  ;  TLinearMinimizer (int type=0);  Default constructor. ;  ;  ~TLinearMinimizer () override;  Destructor (no operations) ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return covariance matrix status ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; virtual TClass * IsA () const;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearMinimizer.html:72,Guid,Guide,72,doc/master/classTLinearMinimizer.html,https://root.cern,https://root.cern/doc/master/classTLinearMinimizer.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TLink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TLink Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Special TText object used to show hyperlinks. ; In the example below created by TObject::Inspect, TLinks are used to show pointers to other objects. Clicking on one link, inspect the corresponding object. ; Definition at line 17 of file TLink.h. Public Types; enum  EStatusBits { kIsStarStar = (1ULL << ( 2 )); };  ;  Public Types inherited from TText; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TLink ();  Link default constructor. ;  ;  TLink (Double_t x, Double_t y, void *pointer);  Constructor to define a link object. ;  ;  ~TLink () override;  Link default destructor. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TText;  TText ();  ;  TText (const TText &text);  Copy constructor. ;  ;  TText (Double_t x, Double_t y, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLink.html:61,Guid,Guide,61,doc/master/classTLink.html,https://root.cern,https://root.cern/doc/master/classTLink.html,1,['Guid'],['Guide']
Usability,". ROOT: TList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TList Class ReferenceCore ROOT classes » Containers. ; A doubly linked list. ; All classes inheriting from TObject can be inserted in a TList. Before being inserted into the list the object pointer is wrapped in a TObjLink object which contains, besides the object pointer also a previous and next pointer.; There are several ways to iterate over a TList; in order of preference, if not forced by other constraints:. (Preferred way) Using the C++ range-based for or begin() / end(): for(TObject *obj: *GetListOfPrimitives()); obj->Write();; TCollection::WriteInt_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) overrideWrite all objects in this collection.Definition TCollection.cxx:672; TObjectMother of all ROOT objects.Definition TObject.h:41. Using the R__FOR_EACH macro: GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TCollection::Paintvoid Paint(Option_t *option="""") overridePaint all objects in this collection.Definition TCollection.cxx:417. Using the TList iterator TListIter (via the wrapper class TIter): TIter next(GetListOfPrimitives());; while (TObject *obj = next()); obj->Draw(next.GetOption());; TIterDefinition TCollection.h:235. Using the TList iterator TListIter and std::for_each algorithm: // A function object, which will be applied to each element; // of the given range.; struct STestFunctor {; bool operator()(TObject *aObj) {; ...; return true;; }; }; ...; ...; TIter iter(mylist);; for_each( iter.Begin(), TIter::End(), STestFunctor() );; operator()TRObject operator()(const T1 &t1) constDefinition TRFunctionImport__oprtr.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTList.html:61,Guid,Guide,61,doc/master/classTList.html,https://root.cern,https://root.cern/doc/master/classTList.html,1,['Guid'],['Guide']
Usability,". ROOT: TListIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TListIter Class Reference. ; Iterator of linked list. ; Definition at line 193 of file TList.h. Public Types; using const_pointer = const TObject **;  ; using difference_type = std::ptrdiff_t;  ; using iterator_category = std::bidirectional_iterator_tag;  ; using pointer = TObject **;  ; using reference = const TObject *&;  ; using value_type = TObject *;  . Public Member Functions;  TListIter (const TList *l, Bool_t dir=kIterForward);  Create a new list iterator. ;  ;  TListIter (const TListIter &iter);  Copy ctor. ;  ;  ~TListIter ();  ; const TCollection * GetCollection () const override;  ; Option_t * GetOption () const override;  Returns the object option stored in the list. ;  ; TClass * IsA () const override;  ; TObject * Next () override;  Return next object in the list. Returns 0 when no more objects in list. ;  ; Bool_t operator!= (const TIterator &aIter) const override;  This operator compares two TIterator objects. ;  ; Bool_t operator!= (const TListIter &aIter) const;  This operator compares two TListIter objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & operator= (const TIterator &rhs) override;  Overridden assignment operator. ;  ; TListIter & operator= (const TListIter &rhs);  Overloaded assignment operator. ;  ; void Reset () override;  Reset list iterator. ;  ; void SetOption (Option_t *option);  Sets the object option stored in the list. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TIterator; virtual ~TIterator ();  ; TObject * operator() ();  ; Bool_t operator== (const TIterator &other)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListIter.html:65,Guid,Guide,65,doc/master/classTListIter.html,https://root.cern,https://root.cern/doc/master/classTListIter.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TListOfDataMembers Class Reference. ; A collection of TDataMember objects designed for fast access given a DeclId_t and for keep track of TDataMember that were described unloaded data member. ; Definition at line 32 of file TListOfDataMembers.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; template<class DataMemberList > ;  TListOfDataMembers (DataMemberList &dmlist);  Construct from a generic collection of data members objects. ;  ;  TListOfDataMembers (TClass *cl, TDictionary::EMemberSelection selection);  Constructor, possibly for all members of a class (or globals). ;  ;  ~TListOfDataMembers ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:74,Guid,Guide,74,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfEnums Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfEnums Class Reference. ; A collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum. ; Definition at line 32 of file TListOfEnums.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfEnums (TClass *cl=nullptr);  Constructor. ;  ;  ~TListOfEnums () override;  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnums.html:68,Guid,Guide,68,doc/master/classTListOfEnums.html,https://root.cern,https://root.cern/doc/master/classTListOfEnums.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfEnumsWithLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; List of all members ; TListOfEnumsWithLock Class Reference. ; A collection of TEnum objects designed for fast access given a DeclId_t and for keep track of TEnum that were described unloaded enum. ; Definition at line 30 of file TListOfEnumsWithLock.h. Public Member Functions;  TListOfEnumsWithLock (TClass *cl=nullptr);  ;  ~TListOfEnumsWithLock () override;  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Before (const TObject *obj) const override;  Returns the object before object obj. ;  ; void Clear (Option_t *option) override;  Remove all objects from the list. ;  ; void Delete (Option_t *op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfEnumsWithLock.html:76,Guid,Guide,76,doc/master/classTListOfEnumsWithLock.html,https://root.cern,https://root.cern/doc/master/classTListOfEnumsWithLock.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfFunctionTemplates Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfFunctionTemplates Class Reference. ; A collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function. ; Definition at line 34 of file TListOfFunctionTemplates.h. Public Member Functions;  TListOfFunctionTemplates (TClass *cl);  Constructor. ;  ;  ~TListOfFunctionTemplates ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Delete all TFunction object files. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Specialize FindObject to do search fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctionTemplates.html:80,Guid,Guide,80,doc/master/classTListOfFunctionTemplates.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctionTemplates.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TListOfFunctions Class Reference. ; A collection of TFunction objects designed for fast access given a DeclId_t and for keep track of TFunction that were described unloaded function. ; Definition at line 34 of file TListOfFunctions.h. Public Types; typedef TDictionary::DeclId_t DeclId_t;  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TListOfFunctions (TClass *cl);  Constructor. ;  ;  ~TListOfFunctions ();  Destructor. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at location idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *before, TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfFunctions.html:72,Guid,Guide,72,doc/master/classTListOfFunctions.html,https://root.cern,https://root.cern/doc/master/classTListOfFunctions.html,1,['Guid'],['Guide']
Usability,". ROOT: TListOfTypes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TListOfTypes Class ReferenceCore ROOT classes » Base ROOT classes. ; A collection of TDataType designed to hold the typedef information and numerical type information. ; The collection is populated on demand.; Besides the built-in types (int, float) a typedef is explicitly added to the collection (and thus visible via ls or Print) only if it is requested explicitly. ; Definition at line 30 of file TListOfTypes.h. Public Member Functions;  TListOfTypes ();  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const char *name) const override;  Find object using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object using its hash value (returned by its Hash() member). ;  ; TDataType * FindType (const char *name) const;  ;  Public Member Functions inherited from THashTable;  THashTable (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashTable object. ;  ; virtual ~THashTable ();  Delete a hashtable. ;  ; void Add (TObject *obj) override;  Add object to the hash table. ;  ; void AddAll (const TCollection *col) override;  Add all objects from collection col to this collection. ;  ; void AddBefore (const TObject *before, TObject *obj);  Add object to the hash table. ;  ; Float_t AverageCollisions () const;  ; void Clear (Option_t *option="""") override;  Remove all objects from the table. ;  ; Int_t Collisions (const char *name) const;  Returns the number of collisions for an object with a certain name (i.e. ;  ; Int_t Collisions (TObject *obj) const;  Returns the number of collisions for an object (i.e. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the table AND delete all heap based objects. ;  ; Bool_t Empty () const;  ; const TList ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfTypes.html:68,Guid,Guide,68,doc/master/classTListOfTypes.html,https://root.cern,https://root.cern/doc/master/classTListOfTypes.html,1,['Guid'],['Guide']
Usability,". ROOT: TLockFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TLockFile Class ReferenceInput/Output Library. ; A scoped lock based on files. ; The RAAI idiom is used: the constructor blocks until lock is obtained. Lock is released in the destructor. Use it in scope-blocks like: {; TLockFile lock(""path.to.lock.file"");; // do something you need the lock for; } // lock is automatically released; TLockFileA scoped lock based on files.Definition TLockFile.h:19. Definition at line 19 of file TLockFile.h. Public Member Functions;  TLockFile (const char *path, Int_t timeLimit=0);  Default constructor. ;  ;  ~TLockFile () override;  Destructor. Releases the lock. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLockFile.html:65,Guid,Guide,65,doc/master/classTLockFile.html,https://root.cern,https://root.cern/doc/master/classTLockFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TLockPath Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLockPath Class ReferencePROOF » PROOF kernel Libraries. ; Path locking class allowing shared and exclusive locks. ; Definition at line 26 of file TLockPath.h. Public Member Functions;  TLockPath (const char *path="""");  Locks the directory. ;  ;  ~TLockPath () override;  ; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; Bool_t IsLocked () const;  ; Int_t Lock (Bool_t shared=kFALSE);  ; void SetName (const char *path);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlock ();  Unlock the directory. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLockPath.html:65,Guid,Guide,65,doc/master/classTLockPath.html,https://root.cern,https://root.cern/doc/master/classTLockPath.html,1,['Guid'],['Guide']
Usability,". ROOT: TLorentzRotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TLorentzRotation Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TLorentzRotation is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TLorentzRotation might still be a valid solution. Consider using instead ROOT::Math::LorentzRotation.; The TLorentzRotation class describes Lorentz transformations including Lorentz boosts and rotations (see TRotation) ; | xx xy xz xt |; | |; | yx yy yz yt |; lambda = | |; | zx zy zz zt |; | |; | tx ty tz tt |; xyOption_t Option_t TPoint xyDefinition TGWin32VirtualXProxy.cxx:62; ttauto * ttDefinition textangle.C:16. Declaration; By default it is initialized to the identity matrix, but it may also be initialized by an other TLorentzRotation, by a pure TRotation or by a boost:; TLorentzRotation l; // l is initialized as identity TLorentzRotation m(l); // m = l TRotation r; TLorentzRotation lr(r); TLorentzRotation lb1(bx,by,bz); TVector3 b; TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta) and gamma'=(gamma-1)/beta*beta. . Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions XX(), XY() .. TT(), through the operator (int,int):; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component; ; if (l==m) {...} // test for e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzRotation.html:72,Guid,Guide,72,doc/master/classTLorentzRotation.html,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html,1,['Guid'],['Guide']
Usability,". ROOT: TLorentzVector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TLorentzVector Class ReferenceMath » Legacy Physics Classes. ; AttentionTLorentzVector is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::LorentzVector. ROOT provides specialisations of the ROOT::Math::LorentzVector template which offer superior runtime performance, i.e.:; ROOT::Math::PtEtaPhiMVector based on pt (rho),eta,phi and M (t) coordinates in double precision; ROOT::Math::PtEtaPhiEVector based on pt (rho),eta,phi and E (t) coordinates in double precision; ROOT::Math::PxPyPzMVector based on px,py,pz and M (mass) coordinates in double precision; ROOT::Math::PxPyPzEVector based on px,py,pz and E (energy) coordinates in double precision; ROOT::Math::XYZTVector based on x,y,z,t coordinates (cartesian) in double precision (same as PxPyPzEVector); ROOT::Math::XYZTVectorF based on x,y,z,t coordinates (cartesian) in float precision (same as PxPyPzEVector but float). More details can be found in the documentation of the Physics Vectors package. . Description; TLorentzVector is a general four-vector class, which can be used either for the description of position and time (x,y,z,t) or momentum and energy (px,py,pz,E). Declaration; TLorentzVector has been implemented as a set a TVector3 and a Double_t variable. By default all components are initialized by zero.; TLorentzVector v1; // initialized by (0., 0., 0., 0.); TLorentzVector v2(1., 1., 1., 1.);; TLorentzVector v3(v1);; TLorentzVector v4(TVector3(1., 2., 3.),4.);; TLorentzVectorDefinition TLorentzVector.h:31; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_im",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzVector.html:70,Guid,Guide,70,doc/master/classTLorentzVector.html,https://root.cern,https://root.cern/doc/master/classTLorentzVector.html,1,['Guid'],['Guide']
Usability,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:68,Guid,Guide,68,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA.html:60,Guid,Guide,60,doc/master/classTMVA.html,https://root.cern,https://root.cern/doc/master/classTMVA.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA Keras tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA Keras tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use keras with the python interface of TMVA. . Files; file  ApplicationClassificationKeras.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionKeras.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationKeras.py;   This tutorial shows how to do classification in TMVA with neural networks trained with keras. ;  ; file  GenerateModel.py;   This tutorial shows how to define and generate a keras model for use with TMVA. ;  ; file  MulticlassKeras.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with keras. ;  ; file  RegressionKeras.py;   This tutorial shows how to do regression in TMVA with neural networks trained with keras. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva__keras.html:60,Guid,Guide,60,doc/master/group__tutorial__tmva__keras.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__keras.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA.html:64,Guid,Guide,64,doc/master/namespaceTMVA.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMVA Namespace Reference. create variable transformations ; More... Namespaces; namespace  DNN;  ; namespace  Experimental;  ; namespace  Internal;  ; namespace  kNN;  ; namespace  TMVAGlob;  . Classes; class  AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  AbsValue;  ; class  BDTEventWrapper;  ; class  BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  CCTreeWrapper;  ; class  ClassifierFactory;  This is the MVA factory. More...;  ; class  ClassInfo;  Class that contains all the information of a class. More...;  ; class  Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  Configurable;  ; class  ConvergenceTest;  Check for convergence. More...;  ; class  CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  CrossValidation;  Class to perform cross validation, splitting the dataloader into folds. More...;  ; class  CrossValidationFoldResult;  ; class  CrossValidationResult;  Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. More...;  ; class  CvSplit;  ; class  CvSplitKFolds;  ; class  CvSplitKFoldsExpr;  ; class  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceTMVA.html:63,Guid,Guide,63,doc/v632/namespaceTMVA.html,https://root.cern,https://root.cern/doc/v632/namespaceTMVA.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,. ROOT: TMVA PyTorch tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TMVA PyTorch tutorialsTutorials » TMVA tutorials. ; Example code which illustrates how to use pytorch with the python interface of TMVA. . Files; file  ApplicationClassificationPyTorch.py;   This tutorial shows how to apply a trained model to new data. ;  ; file  ApplicationRegressionPyTorch.py;   This tutorial shows how to apply a trained model to new data (regression). ;  ; file  ClassificationPyTorch.py;   This tutorial shows how to do classification in TMVA with neural networks trained with PyTorch. ;  ; file  MulticlassPyTorch.py;   This tutorial shows how to do multiclass classification in TMVA with neural networks trained with PyTorch. ;  ; file  RegressionPyTorch.py;   This tutorial shows how to do regression in TMVA with neural networks trained with PyTorch. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva__pytorch.html:62,Guid,Guide,62,doc/master/group__tutorial__tmva__pytorch.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva__pytorch.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; TMVA tutorialsTutorials. ; Example code which illustrates how to use the TMVA toolkit. . Modules;  Envelope Tutorials;  ;  TMVA Keras tutorials;  Example code which illustrates how to use keras with the python interface of TMVA. ;  ;  TMVA PyTorch tutorials;  Example code which illustrates how to use pytorch with the python interface of TMVA. ;  . Files; file  createData.C;  Plot the variables. ;  ; file  RBatchGenerator_NumPy.py;   Example of getting batches of events from a ROOT dataset as Python generators of numpy arrays. ;  ; file  RBatchGenerator_PyTorch.py;   Example of getting batches of events from a ROOT dataset into a basic PyTorch workflow. ;  ; file  RBatchGenerator_TensorFlow.py;   Example of getting batches of events from a ROOT dataset into a basic TensorFlow workflow. ;  ; file  tmva001_RTensor.C;   This tutorial illustrates the basic features of the RTensor class, RTensor is a std::vector-like container with additional shape information. ;  ; file  tmva002_RDataFrameAsTensor.C;   This tutorial shows how the content of an RDataFrame can be converted to an RTensor object. ;  ; file  tmva003_RReader.C;   This tutorial shows how to apply with the modern interfaces models saved in TMVA XML files. ;  ; file  tmva004_RStandardScaler.C;   This tutorial illustrates the usage of the standard scaler as preprocessing method. ;  ; file  tmva100_DataPreparation.py;   This tutorial illustrates how to prepare ROOT datasets to be nicely readable by most machine learning methods. ;  ; file  tmva101_Training.py;   This tutorial show how you can train a machine learning model with any package reading the training data directly from ROOT files. ;  ; file  tmva102_Testing.py;   This tutorial illustrates how you can test a trained BDT model using the fast tree inference engine offered by TMVA and external tools such as scikit-learn. ;  ; file  tmva10",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:54,Guid,Guide,54,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMVA. ; The Multi Variate Analysis package. ; The TMVA Multi-Variate-Analysis classes.; See:. The TMVA Web manual in ROOT Web site; The TMVA Users Guide. Old links, referring to old TMVA versions, but they can still be useful for some of the TMVA methods:. Description of the traditional TMVA Methods; The TMVA Options Reference. . Classes; class  TMVA::AbsoluteDeviationLossFunction;  Absolute Deviation Loss Function. More...;  ; class  TMVA::AbsoluteDeviationLossFunctionBDT;  Absolute Deviation BDT Loss Function. More...;  ; class  TMVA::BDTEventWrapper;  ; class  TMVA::BinarySearchTree;  A simple Binary search tree including a volume search method. More...;  ; class  TMVA::BinarySearchTreeNode;  Node for the BinarySearch or Decision Trees. More...;  ; class  TMVA::BinaryTree;  Base class for BinarySearch and Decision Trees. More...;  ; class  TMVA::CCPruner;  A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) More...;  ; class  TMVA::CCTreeWrapper;  ; class  Classification;  Class to perform two class classification. More...;  ; class  ClassificationResult;  Class to save the results of the classifier. More...;  ; class  TMVA::ClassifierFactory;  This is the MVA factory. More...;  ; class  TMVA::ClassInfo;  Class that contains all the information of a class. More...;  ; class  TMVA::Config;  Singleton class for global configuration settings used by TMVA. More...;  ; class  TMVA::ConvergenceTest;  Check for convergence. More...;  ; class  TMVA::CostComplexityPruneTool;  A class to prune a decision tree using the Cost Complexity method. More...;  ; class  CreateMethodPlugins;  Plugins analysis. More...;  ; class  TMVA::CrossEntropy;  Implementation of the CrossEntropy as separation criterion. More...;  ; class  TMVA::CrossValidation;  Class to perform cross validation, splitting the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__TMVA.html:44,Guid,Guide,44,doc/master/group__TMVA.html,https://root.cern,https://root.cern/doc/master/group__TMVA.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::AbsValue Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::AbsValue Class Reference. . Definition at line 260 of file RuleFitParams.h. Public Member Functions; Bool_t operator() (Double_t first, Double_t second) const;  . #include <TMVA/RuleFitParams.h>; Member Function Documentation. ◆ operator()(). Bool_t TMVA::AbsValue::operator() ; (; Double_t ; first, . Double_t ; second . ); const. inline . Definition at line 264 of file RuleFitParams.h. The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/RuleFitParams.h. TMVAAbsValue. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1AbsValue.html:70,Guid,Guide,70,doc/master/classTMVA_1_1AbsValue.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsValue.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::AbsoluteDeviationLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunction Class ReferenceTMVA. ; Absolute Deviation Loss Function. ; Definition at line 239 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 242 of file LossFunction.h. ◆ ~AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::~AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 243 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . absolute deviation, determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 497 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html:91,Guid,Guide,91,doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::AbsoluteDeviationLossFunctionBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunctionBDT Class ReferenceTMVA. ; Absolute Deviation BDT Loss Function. ; Definition at line 261 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunctionBDT ();  ;  ~AbsoluteDeviationLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  absolute deviation BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  absolute deviation BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  absolute deviation BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::AbsoluteDeviationLossFunction;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html:94,Guid,Guide,94,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::BDTEventWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TMVA::BDTEventWrapper Class ReferenceTMVA. . Definition at line 31 of file BDTEventWrapper.h. Public Member Functions;  BDTEventWrapper (const Event *);  Constructor. ;  ;  ~BDTEventWrapper ();  Destructor. ;  ; Double_t GetCumulativeWeight (Bool_t type) const;  Get the accumulated weight. ;  ; Double_t GetVal () const;  ; Double_t GetVal (Int_t var) const;  ; const Event * operator* () const;  ; Bool_t operator< (const BDTEventWrapper &other) const;  ; void SetCumulativeWeight (Bool_t type, Double_t weight);  Set the accumulated weight, for sorted signal/background events. ;  . Static Public Member Functions; static void SetVarIndex (Int_t iVar);  . Static Private Member Functions; static Int_t & GetVarIndex ();  . Private Attributes; Double_t fBkgWeight;  cumulative background weight for splitting ;  ; const Event * fEvent;  ; Double_t fSigWeight;  same for the signal weights ;  . #include <TMVA/BDTEventWrapper.h>; Constructor & Destructor Documentation. ◆ BDTEventWrapper(). BDTEventWrapper::BDTEventWrapper ; (; const Event * ; e). Constructor. ; Definition at line 36 of file BDTEventWrapper.cxx. ◆ ~BDTEventWrapper(). BDTEventWrapper::~BDTEventWrapper ; (; ). Destructor. ; Definition at line 45 of file BDTEventWrapper.cxx. Member Function Documentation. ◆ GetCumulativeWeight(). Double_t BDTEventWrapper::GetCumulativeWeight ; (; Bool_t ; type); const. Get the accumulated weight. ; Parameters. type- true for signal, false for background . Returnsthe cumulative weight for sorted signal/background events ; Definition at line 64 of file BDTEventWrapper.cxx. ◆ GetVal() [1/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; ); const. inline . Returnsvalue of variable fVarIndex for this even",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html:77,Guid,Guide,77,doc/master/classTMVA_1_1BDTEventWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::BinarySearchTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTree Class ReferenceTMVA. ; A simple Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  ac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:78,Guid,Guide,78,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::BinarySearchTreeNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTreeNode Class ReferenceTMVA. ; Node for the BinarySearch or Decision Trees. ; for the binary search tree, it basically consists of the EVENT, and pointers to the parent and daughters; in case of the Decision Tree, it specifies parent and daughters, as well as ""which variable is used"" in the selection of this node, including the respective cut value. ; Definition at line 55 of file BinarySearchTreeNode.h. Public Member Functions;  BinarySearchTreeNode (BinarySearchTreeNode *parent, char pos);  constructor of a daughter node as a daughter of 'p' ;  ;  BinarySearchTreeNode (const BinarySearchTreeNode &n, BinarySearchTreeNode *parent=nullptr);  copy constructor of a node. ;  ;  BinarySearchTreeNode (const Event *e=nullptr, UInt_t signalClass=0);  constructor of a node for the search tree ;  ; virtual ~BinarySearchTreeNode ();  node destructor ;  ; virtual void AddAttributesToNode (void *node) const;  adding attributes to tree node ;  ; virtual void AddContentToNode (std::stringstream &s) const;  adding attributes to tree node ;  ; virtual Node * CreateNode () const;  ; virtual Bool_t EqualsMe (const Event &) const;  check if the event fed into the node actually equals the event that forms the node (in case of a search tree) ;  ; UInt_t GetClass () const;  ; const std::vector< Float_t > & GetEventV () const;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetWeight () const;  ; virtual Bool_t GoesLeft (const Event &) const;  check if the event fed into the node goes/descends to the left daughter ;  ; virtual Bool_t GoesRight (const Event &) const;  check if the event fed into the nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:82,Guid,Guide,82,doc/master/classTMVA_1_1BinarySearchTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::BinaryTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TMVA::BinaryTree Class ReferenceabstractTMVA. ; Base class for BinarySearch and Decision Trees. ; Definition at line 62 of file BinaryTree.h. Public Member Functions;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; virtual const char * ClassName () const =0;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; virtual Node * CreateNode (UInt_t size=0) const =0;  ; virtual BinaryTree * CreateTree () const =0;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right daughter node current node ""n"" ;  ; virtual Node * GetRoot () const;  ; UInt_t GetTotalTreeDepth () const;  ; virtual TClass * IsA () const;  ; virtual void Print (std::ostream &os) const;  recursively print the tree ;  ; virtual void Read (std::istream &istr, UInt_t tmva_Version_Code=262657);  Read the binary tree from an input stream. ;  ; virtual void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetRoot (Node *r);  ; void SetTotalTreeDepth (Int_t depth);  ; void SetTotalTreeDepth (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html:72,Guid,Guide,72,doc/master/classTMVA_1_1BinaryTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CCPruner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::CCPruner Class ReferenceTMVA. ; A helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) . Some definitions:. \( T_{max} \) - the initial, usually highly overtrained tree, that is to be pruned back; \( R(T) \) - quality index (Gini, misclassification rate, or other) of a tree \( T \); \( \sim T \) - set of terminal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CCPruner.h. Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCPruner (DecisionTree *t_max, const DataSet *validationSample, SeparationBase *qualityIndex=nullptr);  constructor ;  ;  CCPruner (DecisionTree *t_max, const EventList *validationSample, SeparationBase *qualityIndex=nullptr);  constructor ;  ;  ~CCPruner ();  ; std::vector< TMVA::DecisionTreeNode * > GetOptimalPruneSequence () const;  return the prune strength (=alpha) corresponding to the prune sequence ;  ; Float_t GetOptimalPruneStrength () const;  ; Float_t GetOptimalQualityIndex () const;  ; void Optimize ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCPruner.html:70,Guid,Guide,70,doc/master/classTMVA_1_1CCPruner.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCPruner.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CCTreeWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::CCTreeWrapper Class ReferenceTMVA. . Definition at line 38 of file CCTreeWrapper.h. Classes; class  CCTreeNode;  . Public Types; typedef std::vector< Event * > EventList;  . Public Member Functions;  CCTreeWrapper (DecisionTree *T, SeparationBase *qualityIndex);  constructor ;  ;  ~CCTreeWrapper ();  destructor ;  ; Double_t CheckEvent (const TMVA::Event &e, Bool_t useYesNoLeaf=false);  return the decision tree output for an event ;  ; CCTreeNode * GetRoot ();  ; void InitTree (CCTreeNode *t);  initialize the node t and all its descendants ;  ; void PruneNode (CCTreeNode *t);  remove the branch rooted at node t ;  ; Double_t TestTreeQuality (const DataSet *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using the DataSet ;  ; Double_t TestTreeQuality (const EventList *validationSample);  return the misclassification rate of a pruned tree for a validation event sample using an EventList ;  . Private Attributes; DecisionTree * fDTParent;  ! pointer to underlying DecisionTree ;  ; SeparationBase * fQualityIndex;  ! pointer to the used quality index calculator ;  ; CCTreeNode * fRoot;  ! the root node of the (wrapped) decision Tree ;  . #include <TMVA/CCTreeWrapper.h>; Member Typedef Documentation. ◆ EventList. typedef std::vector<Event*> TMVA::CCTreeWrapper::EventList. Definition at line 42 of file CCTreeWrapper.h. Constructor & Destructor Documentation. ◆ CCTreeWrapper(). TMVA::CCTreeWrapper::CCTreeWrapper ; (; DecisionTree * ; T, . SeparationBase * ; qualityIndex . ). constructor ; Definition at line 104 of file CCTreeWrapper.cxx. ◆ ~CCTreeWrapper(). TMVA::CCTreeWrapper::~CCTreeWrapper ; (; ). destructor ; Definition at line 116 of file CCTreeWrapper.cxx. Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html:75,Guid,Guide,75,doc/master/classTMVA_1_1CCTreeWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CCTreeWrapper.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ClassInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ClassInfo Class ReferenceTMVA. ; Class that contains all the information of a class. ; Definition at line 49 of file ClassInfo.h. Public Member Functions;  ClassInfo (const TString &name=""default"");  constructor ;  ;  ~ClassInfo ();  destructor ;  ; const TMatrixD * GetCorrelationMatrix () const;  ; const TCut & GetCut () const;  ; UInt_t GetNumber () const;  ; const TString & GetWeight () const;  ; virtual TClass * IsA () const;  ; void SetCorrelationMatrix (TMatrixD *matrix);  ; void SetCut (const TCut &cut);  ; void SetNumber (const UInt_t index);  ; void SetWeight (const TString &weight);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html:71,Guid,Guide,71,doc/master/classTMVA_1_1ClassInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ClassifierFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::ClassifierFactory Class ReferenceTMVA. ; This is the MVA factory. ; Definition at line 55 of file ClassifierFactory.h. Public Types; typedef IMethod *(* Creator) (const TString &job, const TString &title, DataSetInfo &dsi, const TString &option);  . Public Member Functions; IMethod * Create (const std::string &name, const TString &job, const TString &title, DataSetInfo &dsi, const TString &option);  creates the method if needed based on the method name using the creator function the factory has stored ;  ; IMethod * Create (const std::string &name, DataSetInfo &dsi, const TString &weightfile="""");  creates the method if needed based on the method name using the creator function the factory has stored ;  ; const std::vector< std::string > List () const;  returns a vector of the method type names of registered methods ;  ; void Print () const;  prints the registered method type names ;  ; Bool_t Register (const std::string &name, Creator creator);  registers a classifier creator function under the method type name ;  ; Bool_t Unregister (const std::string &name);  unregisters a classifier type name ;  . Static Public Member Functions; static void DestroyInstance ();  destroy the singleton instance ;  ; static ClassifierFactory & Instance ();  access to the ClassifierFactory singleton creates the instance if needed ;  . Private Types; typedef std::map< std::string, Creator > CallMap;  . Private Member Functions;  ClassifierFactory ();  ;  ClassifierFactory (const ClassifierFactory &);  ;  ~ClassifierFactory ();  ; const ClassifierFactory & operator= (const ClassifierFactory &);  . Private Attributes; CallMap fCalls;  . Stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ClassifierFactory.html:79,Guid,Guide,79,doc/master/classTMVA_1_1ClassifierFactory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ClassifierFactory.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::Config Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Config Class ReferenceTMVA. ; Singleton class for global configuration settings used by TMVA. ; Definition at line 49 of file Config.h. Classes; class  IONames;  ; class  VariablePlotting;  . Public Member Functions; void DisableMT ();  Force disabling MT running and release the thread pool by using instead seriaql execution. ;  ; Bool_t DrawProgressBar () const;  ; void EnableMT (int numthreads=0);  Enable MT in TMVA (by default is on when ROOT::EnableImplicitMT() is set. ;  ; IONames & GetIONames ();  ; ROOT::TThreadExecutor & GetMultiThreadExecutor ();  ; UInt_t GetNCpu ();  ; UInt_t GetNumWorkers () const;  ; Executor & GetThreadExecutor ();  Get executor class for multi-thread usage In case when MT is not enabled will return a serial executor. ;  ; VariablePlotting & GetVariablePlotting ();  ; virtual TClass * IsA () const;  ; Bool_t IsMTEnabled () const;  Check if IMT is enabled. ;  ; Bool_t IsSilent () const;  ; void SetDrawProgressBar (Bool_t d);  ; void SetNumWorkers (UInt_t n);  ; void SetSilent (Bool_t s);  ; void SetUseColor (Bool_t uc);  ; void SetWriteOptionsReference (Bool_t w);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UseColor () const;  ; Bool_t WriteOptionsReference () const;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void DestroyInstance ();  static function: destroy TMVA instance ;  ; static Config & Instance ();  static function: returns TMVA instance ;  . Public At,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Config.html:68,Guid,Guide,68,doc/master/classTMVA_1_1Config.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Config.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Configurable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::Configurable Class Reference. . Definition at line 45 of file Configurable.h. Public Member Functions;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOptions () const;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void ParseOptions ();  options parser ;  ; void PrintOptions () const;  prints out the options set in the options string and the defaults ;  ; void ReadOptionsFromStream (std::istream &istr);  read option back from the weight file ;  ; void ReadOptionsFromXML (void *node);  ; void SetConfigDescription (const char *d);  ; void SetConfigName (const char *n);  ; void SetMsgType (EMsgType t);  ; void SetOptions (const TString &s);  ; virtual void Streamer (TBuffer &);  Stream an ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Configurable.html:74,Guid,Guide,74,doc/master/classTMVA_1_1Configurable.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Configurable.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ConvergenceTest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TMVA::ConvergenceTest Class ReferenceTMVA. ; Check for convergence. ; Definition at line 46 of file ConvergenceTest.h. Public Member Functions;  ConvergenceTest ();  constructor ;  ;  ~ConvergenceTest ();  destructor ;  ; Float_t GetCurrentValue ();  ; Bool_t HasConverged (Bool_t withinConvergenceBand=kFALSE);  gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; Float_t Progress ();  returns a float from 0 (just started) to 1 (finished) ;  ; void ResetConvergenceCounter ();  ; void SetConvergenceParameters (Int_t steps, Double_t improvement);  ; void SetCurrentValue (Float_t value);  ; Float_t SpeedControl (UInt_t ofSteps);  this function provides the ability to change the learning rate according to the success of the last generations. ;  . Protected Attributes; Float_t fCurrentValue;  ! current value ;  ; Float_t fImprovement;  ! minimum improvement which counts as improvement ;  ; Int_t fSteps;  ! number of steps without improvement required for convergence ;  . Private Attributes; Float_t fBestResult;  ; Float_t fConvValue;  ! the best ""fitness"" value ;  ; Int_t fCounter;  ! counts the number of steps without improvement ;  ; Float_t fLastResult;  ; Int_t fMaxCounter;  ! maximum value for the counter so far ;  ; std::deque< Short_t > fSuccessList;  to calculate the improvement-speed ;  . #include <TMVA/ConvergenceTest.h>. Inheritance diagram for TMVA::ConvergenceTest:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ConvergenceTest(). TMVA::ConvergenceTest::ConvergenceTest ; (; ). constructor ; Definition at line 40 of file ConvergenceTest.cxx. ◆ ~C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html:77,Guid,Guide,77,doc/master/classTMVA_1_1ConvergenceTest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ConvergenceTest.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: TMVA::CostComplexityPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CostComplexityPruneTool Class ReferenceTMVA. ; A class to prune a decision tree using the Cost Complexity method. ; (see ""Classification and Regression Trees"" by Leo Breiman et al). Some definitions:. \( T_{max} \) - the initial, usually highly overtrained tree, that is to be pruned back; \( R(T) \) - quality index (Gini, misclassification rate, or other) of a tree \( T \); \( \sim T \) - set of terminal nodes in \( T \); \( T' \) - the pruned subtree of \( T_max \) that has the best quality index \( R(T') \); \( \alpha \) - the prune strength parameter in Cost Complexity pruning \( (R_{\alpha}(T) = R(T) + \alpha*|\sim T|) \). There are two running modes in CCPruner: (i) one may select a prune strength and prune back the tree \( T_{max}\) until the criterion: ; \[; \alpha < \frac{R(T) - R(t)}{|\sim T_t| - 1}; \]. is true for all nodes t in \( T \), or (ii) the algorithm finds the sequence of critical points \( \alpha_k < \alpha_{k+1} ... < \alpha_K \) such that \( T_K = root(T_{max}) \) and then selects the optimally-pruned subtree, defined to be the subtree with the best quality index for the validation sample. ; Definition at line 62 of file CostComplexityPruneTool.h. Public Member Functions;  CostComplexityPruneTool (SeparationBase *qualityIndex=nullptr);  the constructor for the cost complexity pruning ;  ; virtual ~CostComplexityPruneTool ();  the destructor for the cost complexity pruning ;  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  the routine that basically ""steers"" the pruning process. ;  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html:85,Guid,Guide,85,doc/master/classTMVA_1_1CostComplexityPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CostComplexityPruneTool.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CrossEntropy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::CrossEntropy Class ReferenceTMVA. ; Implementation of the CrossEntropy as separation criterion. ; -p log (p) - (1-p)log(1-p); p=purity. Definition at line 43 of file CrossEntropy.h. Public Member Functions;  CrossEntropy ();  ;  CrossEntropy (const CrossEntropy &g);  ; virtual ~CrossEntropy ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Cross Entropy defined as: ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/CrossEntropy.h>. Inheritance diagram for TMVA::CrossEntropy:. This browser is not able to show SVG: try Firefox, Chrome, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html:74,Guid,Guide,74,doc/master/classTMVA_1_1CrossEntropy.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossEntropy.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CrossValidation Class ReferenceTMVA. ; Class to perform cross validation, splitting the dataloader into folds. ; Use html for explicit line breaking; Markdown links? class reference?; ce->BookMethod(dataloader, options);; ce->Evaluate();; Cross-evaluation will generate a new training and a test set dynamically from from K folds. These K folds are generated by splitting the input training set. The input test set is currently ignored.; This means that when you specify your DataSet you should include all events in your training set. One way of doing this would be the following:; dataloader->AddTree( signalTree, ""cls1"" );; dataloader->AddTree( background, ""cls2"" );; dataloader->PrepareTrainingAndTestTree( """", """", ""nTest_cls1=1:nTest_cls2=1"" );. Split Expression; See CVSplit documentation? ; Definition at line 124 of file CrossValidation.h. Public Member Functions;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TFile *outputFile, TString options);  ;  CrossValidation (TString jobName, TMVA::DataLoader *dataloader, TString options);  ;  ~CrossValidation ();  ; void Evaluate ();  Does training, test set evaluation and performance evaluation of using cross-evalution. ;  ; Factory & GetFactory ();  ; UInt_t GetNumFolds ();  ; const std::vector< CrossValidationResult > & GetResults () const;  ; TString GetSplitExpr ();  ; void InitOptions ();  ; virtual TClass * IsA () const;  ; void ParseOptions ();  Method to parse the internal option string. ;  ; void SetNumFolds (UInt_t i);  ; void SetSplitExpr (TString splitExpr);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html:77,Guid,Guide,77,doc/master/classTMVA_1_1CrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidation.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::CrossValidationFoldResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::CrossValidationFoldResult Class Reference. . Definition at line 53 of file CrossValidation.h. Public Member Functions;  CrossValidationFoldResult ();  ;  CrossValidationFoldResult (UInt_t iFold);  . Public Attributes; Double_t fEff01;  ; Double_t fEff10;  ; Double_t fEff30;  ; Double_t fEffArea;  ; UInt_t fFold;  ; TGraph fROC;  ; Float_t fROCIntegral;  ; Double_t fSep;  ; Double_t fSig;  ; Double_t fTrainEff01;  ; Double_t fTrainEff10;  ; Double_t fTrainEff30;  . #include <TMVA/CrossValidation.h>; Constructor & Destructor Documentation. ◆ CrossValidationFoldResult() [1/2]. TMVA::CrossValidationFoldResult::CrossValidationFoldResult ; (; ). inline . Definition at line 55 of file CrossValidation.h. ◆ CrossValidationFoldResult() [2/2]. TMVA::CrossValidationFoldResult::CrossValidationFoldResult ; (; UInt_t ; iFold). inline . Definition at line 56 of file CrossValidation.h. Member Data Documentation. ◆ fEff01. Double_t TMVA::CrossValidationFoldResult::fEff01. Definition at line 67 of file CrossValidation.h. ◆ fEff10. Double_t TMVA::CrossValidationFoldResult::fEff10. Definition at line 68 of file CrossValidation.h. ◆ fEff30. Double_t TMVA::CrossValidationFoldResult::fEff30. Definition at line 69 of file CrossValidation.h. ◆ fEffArea. Double_t TMVA::CrossValidationFoldResult::fEffArea. Definition at line 70 of file CrossValidation.h. ◆ fFold. UInt_t TMVA::CrossValidationFoldResult::fFold. Definition at line 60 of file CrossValidation.h. ◆ fROC. TGraph TMVA::CrossValidationFoldResult::fROC. Definition at line 63 of file CrossValidation.h. ◆ fROCIntegral. Float_t TMVA::CrossValidationFoldResult::fROCIntegral. Definition at line 62 of file CrossValidation.h. ◆ fSep. Double_t TMVA::CrossValidationFoldResult::fSep. Definition at line 66 of file C,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidationFoldResult.html:87,Guid,Guide,87,doc/master/classTMVA_1_1CrossValidationFoldResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidationFoldResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CrossValidationResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::CrossValidationResult Class ReferenceTMVA. ; Class to save the results of cross validation, the metric for the classification ins ROC and you can ROC curves ROC integrals, ROC average and ROC standard deviation. ; Definition at line 78 of file CrossValidation.h. Public Member Functions;  CrossValidationResult (const CrossValidationResult &);  ;  CrossValidationResult (UInt_t numFolds);  ;  ~CrossValidationResult ();  ; TCanvas * Draw (const TString name=""CrossValidation"") const;  ; TCanvas * DrawAvgROCCurve (Bool_t drawFolds=kFALSE, TString title="""") const;  ; TGraph * GetAvgROCCurve (UInt_t numSamples=100) const;  Generates a multigraph that contains an average ROC Curve. ;  ; std::vector< Double_t > GetEff01Values () const;  ; std::vector< Double_t > GetEff10Values () const;  ; std::vector< Double_t > GetEff30Values () const;  ; std::vector< Double_t > GetEffAreaValues () const;  ; Float_t GetROCAverage () const;  ; TMultiGraph * GetROCCurves (Bool_t fLegend=kTRUE);  ; Float_t GetROCStandardDeviation () const;  ; std::map< UInt_t, Float_t > GetROCValues () const;  ; std::vector< Double_t > GetSepValues () const;  ; std::vector< Double_t > GetSigValues () const;  ; std::vector< Double_t > GetTrainEff01Values () const;  ; std::vector< Double_t > GetTrainEff10Values () const;  ; std::vector< Double_t > GetTrainEff30Values () const;  ; void Print () const;  . Private Member Functions; void Fill (CrossValidationFoldResult const &fr);  . Private Attributes; std::vector< Double_t > fEff01s;  ; std::vector< Double_t > fEff10s;  ; std::vector< Double_t > fEff30s;  ; std::vector< Double_t > fEffAreas;  ; std::shared_ptr< TMultiGraph > fROCCurves;  ; std::map< UInt_t, Float_t > fROCs;  ; std::vector< Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CrossValidationResult.html:83,Guid,Guide,83,doc/master/classTMVA_1_1CrossValidationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CrossValidationResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CvSplit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::CvSplit Class Referenceabstract. . Definition at line 37 of file CvSplit.h. Public Member Functions;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; virtual TClass * IsA () const;  ; virtual void MakeKFoldDataSet (DataSetInfo &dsi)=0;  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T *&ref, Int_t size, const TString &name, const TString &desc="""");  ; const char * GetConfigDescription () const;  ; const char * GetConfigName () const;  ; const TString & GetOption",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplit.html:69,Guid,Guide,69,doc/master/classTMVA_1_1CvSplit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplit.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CvSplitKFolds Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFolds Class Reference. . Definition at line 92 of file CvSplit.h. Public Member Functions;  CvSplitKFolds (UInt_t numFolds, TString splitExpr="""", Bool_t stratified=kTRUE, UInt_t seed=100);  Splits a dataset into k folds, ready for use in cross validation. ;  ;  ~CvSplitKFolds () override;  ; TClass * IsA () const override;  ; void MakeKFoldDataSet (DataSetInfo &dsi) override;  Prepares a DataSet for cross validation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::CvSplit;  CvSplit (UInt_t numFolds);  ; virtual ~CvSplit ();  ; UInt_t GetNumFolds ();  ; Bool_t NeedsRebuild ();  ; virtual void PrepareFoldDataSet (DataSetInfo &dsi, UInt_t foldNumber, Types::ETreeType tt);  Set training and test set vectors of dataset described by dsi. ;  ; virtual void RecombineKFoldDataSet (DataSetInfo &dsi, Types::ETreeType tt=Types::kTraining);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TStri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html:75,Guid,Guide,75,doc/master/classTMVA_1_1CvSplitKFolds.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFolds.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::CvSplitKFoldsExpr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::CvSplitKFoldsExpr Class Reference. . Definition at line 64 of file CvSplit.h. Public Member Functions;  CvSplitKFoldsExpr (DataSetInfo &dsi, TString expr);  ;  ~CvSplitKFoldsExpr ();  ; UInt_t Eval (UInt_t numFolds, const Event *ev);  . Static Public Member Functions; static Bool_t Validate (TString expr);  . Private Member Functions; UInt_t GetSpectatorIndexForName (DataSetInfo &dsi, TString name);  . Private Attributes; DataSetInfo & fDsi;  ; std::vector< std::pair< Int_t, Int_t > > fFormulaParIdxToDsiSpecIdx;  ; Int_t fIdxFormulaParNumFolds;  Maps parameter indicies in splitExpr to their spectator index in the datasetinfo. ;  ; std::vector< Double_t > fParValues;  TFormula for splitExpr. ;  ; TString fSplitExpr;  Keeps track of the index of reserved par ""NumFolds"" in splitExpr. ;  ; TFormula fSplitFormula;  Expression used to split data into folds. Should output values between 0 and numFolds. ;  . #include <TMVA/CvSplit.h>; Constructor & Destructor Documentation. ◆ CvSplitKFoldsExpr(). TMVA::CvSplitKFoldsExpr::CvSplitKFoldsExpr ; (; DataSetInfo & ; dsi, . TString ; expr . ). Definition at line 139 of file CvSplit.cxx. ◆ ~CvSplitKFoldsExpr(). TMVA::CvSplitKFoldsExpr::~CvSplitKFoldsExpr ; (; ). inline . Definition at line 67 of file CvSplit.h. Member Function Documentation. ◆ Eval(). UInt_t TMVA::CvSplitKFoldsExpr::Eval ; (; UInt_t ; numFolds, . const Event * ; ev . ). Definition at line 164 of file CvSplit.cxx. ◆ GetSpectatorIndexForName(). UInt_t TMVA::CvSplitKFoldsExpr::GetSpectatorIndexForName ; (; DataSetInfo & ; dsi, . TString ; name . ). private . Definition at line 206 of file CvSplit.cxx. ◆ Validate(). Bool_t TMVA::CvSplitKFoldsExpr::Validate ; (; TString ; expr). static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFoldsExpr.html:79,Guid,Guide,79,doc/master/classTMVA_1_1CvSplitKFoldsExpr.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFoldsExpr.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; TMVA::DNN Namespace Reference. Namespaces; namespace  Blas;  ; namespace  CNN;  ; namespace  Cuda;  ; namespace  RNN;  . Classes; class  Batch;  The Batch class encapsulates one mini-batch. More...;  ; class  ClassificationSettings;  Settings for classificationused to distinguish between different function signatures. More...;  ; struct  CudaActivationDescriptor;  ; struct  CudaConvolutionBwdDataAlgo;  ; struct  CudaConvolutionBwdFilterAlgo;  ; struct  CudaConvolutionDescriptor;  ; struct  CudaConvolutionFwdAlgo;  ; struct  CudaDataType;  ; struct  CudaDropoutDescriptor;  ; struct  CudaEmptyDescriptor;  ; struct  CudaFilterDescriptor;  ; struct  CudaPoolingDescriptor;  ; struct  DummyConvolutionBwdDataAlgo;  ; struct  DummyConvolutionBwdFilterAlgo;  ; struct  DummyConvolutionDescriptor;  ; struct  DummyConvolutionFwdAlgo;  ; struct  DummyCudaDataType;  ; struct  DummyDataType;  ; struct  DummyDescriptor;  ; struct  DummyDropoutDescriptor;  ; struct  DummyEmptyDescriptor;  ; struct  DummyFilterDescriptor;  ; struct  DummyPoolingDescriptor;  ; class  Layer;  Layer defines the layout of a layer. More...;  ; class  LayerData;  LayerData holds the data of one layer. More...;  ; class  MeanVariance;  ; class  Net;  neural net More...;  ; class  Settings;  Settings for the training of the neural net. More...;  ; class  Steepest;  Steepest Gradient Descent algorithm (SGD) More...;  ; class  TAdadelta;  Adadelta Optimizer class. More...;  ; class  TAdagrad;  Adagrad Optimizer class. More...;  ; class  TAdam;  Adam Optimizer class. More...;  ; class  TBatch;  TBatch. More...;  ; class  TBatchIterator;  TBatchIterator. More...;  ; class  TBatchNormLayer;  Layer implementing Batch Normalization. More...;  ; class  TCpu;  The TCpu architecture class. More...;  ; class  TCpuBuffer;  TCp,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:69,Guid,Guide,69,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN Namespace Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Typedefs |; Enumerations |; Functions |; Variables ; TMVA::DNN Namespace Reference. Namespaces; namespace  Blas;  ; namespace  CNN;  ; namespace  Cuda;  ; namespace  RNN;  . Classes; class  Batch;  The Batch class encapsulates one mini-batch. More...;  ; class  ClassificationSettings;  Settings for classificationused to distinguish between different function signatures. More...;  ; struct  CudaActivationDescriptor;  ; struct  CudaConvolutionBwdDataAlgo;  ; struct  CudaConvolutionBwdFilterAlgo;  ; struct  CudaConvolutionDescriptor;  ; struct  CudaConvolutionFwdAlgo;  ; struct  CudaDataType;  ; struct  CudaDropoutDescriptor;  ; struct  CudaEmptyDescriptor;  ; struct  CudaFilterDescriptor;  ; struct  CudaPoolingDescriptor;  ; struct  DummyConvolutionBwdDataAlgo;  ; struct  DummyConvolutionBwdFilterAlgo;  ; struct  DummyConvolutionDescriptor;  ; struct  DummyConvolutionFwdAlgo;  ; struct  DummyCudaDataType;  ; struct  DummyDataType;  ; struct  DummyDescriptor;  ; struct  DummyDropoutDescriptor;  ; struct  DummyEmptyDescriptor;  ; struct  DummyFilterDescriptor;  ; struct  DummyPoolingDescriptor;  ; class  Layer;  Layer defines the layout of a layer. More...;  ; class  LayerData;  LayerData holds the data of one layer. More...;  ; class  MeanVariance;  ; class  Net;  neural net More...;  ; class  Settings;  Settings for the training of the neural net. More...;  ; class  Steepest;  Steepest Gradient Descent algorithm (SGD) More...;  ; class  TAdadelta;  Adadelta Optimizer class. More...;  ; class  TAdagrad;  Adagrad Optimizer class. More...;  ; class  TAdam;  Adam Optimizer class. More...;  ; class  TBatch;  TBatch. More...;  ; class  TBatchIterator;  TBatchIterator. More...;  ; class  TBatchNormLayer;  Layer implementing Batch Normalization. More...;  ; class  TCpu;  The TCpu architecture class. More...;  ; class  TCpuBuffer;  TCpu,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html:68,Guid,Guide,68,doc/v632/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/v632/namespaceTMVA_1_1DNN.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Batch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::Batch Class Reference. ; The Batch class encapsulates one mini-batch. ; Holds a const_iterator to the beginning and the end of one batch in a vector of Pattern ; Definition at line 234 of file NeuralNet.h. Public Types; typedef std::vector< Pattern >::const_iterator const_iterator;  . Public Member Functions;  Batch (typename std::vector< Pattern >::const_iterator itBegin, typename std::vector< Pattern >::const_iterator itEnd);  ; const_iterator begin () const;  ; const_iterator end () const;  ; size_t size () const;  . Private Attributes; const_iterator m_itBegin;  iterator denoting the beginning of the batch ;  ; const_iterator m_itEnd;  iterator denoting the end of the batch ;  . #include <TMVA/NeuralNet.h>; Member Typedef Documentation. ◆ const_iterator. typedef std::vector<Pattern>::const_iterator TMVA::DNN::Batch::const_iterator. Definition at line 237 of file NeuralNet.h. Constructor & Destructor Documentation. ◆ Batch(). TMVA::DNN::Batch::Batch ; (; typename std::vector< Pattern >::const_iterator ; itBegin, . typename std::vector< Pattern >::const_iterator ; itEnd . ). inline . Definition at line 239 of file NeuralNet.h. Member Function Documentation. ◆ begin(). const_iterator TMVA::DNN::Batch::begin ; (; ); const. inline . Definition at line 244 of file NeuralNet.h. ◆ end(). const_iterator TMVA::DNN::Batch::end ; (; ); const. inline . Definition at line 245 of file NeuralNet.h. ◆ size(). size_t TMVA::DNN::Batch::size ; (; ); const. inline . Definition at line 247 of file NeuralNet.h. Member Data Documentation. ◆ m_itBegin. const_iterator TMVA::DNN::Batch::m_itBegin. private . iterator denoting the beginning of the batch ; Definition at line 250 of file NeuralNet.h. ◆ m_itEnd. const_iterator TMVA::DNN::Batch::m_itEnd. p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Batch.html:72,Guid,Guide,72,doc/master/classTMVA_1_1DNN_1_1Batch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Batch.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Blas Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; TMVA::DNN::Blas Namespace Reference. Functions; template<typename AReal > ; void Axpy (const int *n, const AReal *alpha, const AReal *x, const int *incx, AReal *y, const int *incy);  Add the vector x scaled by alpha to y scaled by \beta ;  ; template<> ; void Axpy< double > (const int *n, const double *alpha, const double *x, const int *incx, double *y, const int *incy);  ; template<> ; void Axpy< float > (const int *n, const float *alpha, const float *x, const int *incx, float *y, const int *incy);  ; template<typename AReal > ; void Gemm (const char *transa, const char *transb, const int *m, const int *n, const int *k, const AReal *alpha, const AReal *A, const int *lda, const AReal *B, const int *ldb, const AReal *beta, AReal *C, const int *ldc);  Multiply the matrix A with the matrix B and store the result in C. ;  ; template<> ; void Gemm< double > (const char *transa, const char *transb, const int *m, const int *n, const int *k, const double *alpha, const double *A, const int *lda, const double *B, const int *ldb, const double *beta, double *C, const int *ldc);  ; template<> ; void Gemm< float > (const char *transa, const char *transb, const int *m, const int *n, const int *k, const float *alpha, const float *A, const int *lda, const float *B, const int *ldb, const float *beta, float *C, const int *ldc);  ; template<typename AReal > ; void Gemv (const char *trans, const int *m, const int *n, const AReal *alpha, const AReal *A, const int *lda, const AReal *x, const int *incx, const AReal *beta, AReal *y, const int *incy);  Multiply the vector x with the matrix A and store the result in y. ;  ; template<> ; void Gemv< double > (const char *trans, const int *m, const int *n, const double *alpha, const double *A, const int *lda, const double *x, const int *incx, const double *beta, double *y, const int *incy);  ; template<> ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Blas.html:75,Guid,Guide,75,doc/master/namespaceTMVA_1_1DNN_1_1Blas.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Blas.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CNN Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs ; TMVA::DNN::CNN Namespace Reference. Classes; struct  TCNNDescriptors;  ; struct  TCNNWorkspace;  ; class  TConvLayer;  ; struct  TConvParams;  ; class  TMaxPoolLayer;  Generic Max Pooling Layer class. More...;  . Typedefs; typedef struct TMVA::DNN::CNN::TConvParams TConvParams;  . Typedef Documentation. ◆ TConvParams. typedef struct TMVA::DNN::CNN::TConvParams TMVA::DNN::CNN::TConvParams. TMVADNNCNN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1CNN.html:74,Guid,Guide,74,doc/master/namespaceTMVA_1_1DNN_1_1CNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1CNN.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::ClassificationSettings Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::DNN::ClassificationSettings Class Reference. ; Settings for classificationused to distinguish between different function signatures. ; contains additional settings if the DNN problem is classification ; Definition at line 894 of file NeuralNet.h. Public Member Functions;  ClassificationSettings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, EnumRegularization _regularization=EnumRegularization::NONE, size_t _scaleToNumEvents=0, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _useMultithreading=true);  c'tor ;  ; virtual ~ClassificationSettings ();  d'tor ;  ; virtual void endTestCycle ();  action to be done when the training cycle is ended (e.g. ;  ; void endTrainCycle (double);  action to be done when the training cycle is ended (e.g. ;  ; void setResultComputation (std::string _fileNameNetConfig, std::string _fileNameResult, std::vector< Pattern > *_resultPatternContainer);  preparation for monitoring output ;  ; void setWeightSums (double sumOfSigWeights, double sumOfBkgWeights);  set the weight sums to be scaled to (preparations for monitoring output) ;  ; virtual void startTestCycle ();  action to be done when the test cycle is started (e.g. ;  ; void startTrainCycle ();  action to be done when the training cycle is started (e.g. ;  ; void testIteration ();  callback for monitoring and loggging ;  ; void testSample (double error, double output, double target, double weight);  action to be done after the computation of a test sample (e.g. ;  ;  Public Member Functions inherited from TMVA::DNN::Settings;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html:89,Guid,Guide,89,doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1ClassificationSettings.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Cuda Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; TMVA::DNN::Cuda Namespace Reference. Functions; template<typename AFloat > ; __global__ void AbsoluteSum (AFloat *result, const AFloat *A, int m, int n);  ; template<typename AFloat > ; __global__ void AdamUpdate (AFloat *A, const AFloat *M, const AFloat *V, int m, int n, AFloat alpha, AFloat eps);  optimizer kernel functions ;  ; template<typename AFloat > ; __global__ void AdamUpdateFirstMom (AFloat *A, const AFloat *B, int m, int n, AFloat beta);  ; template<typename AFloat > ; __global__ void AdamUpdateSecondMom (AFloat *A, const AFloat *B, int m, int n, AFloat beta);  ; template<typename AFloat > ; __global__ void AddBiases (AFloat *A, const AFloat *B, int nRows, int nCols);  ; template<typename AFloat > ; __global__ void AddL1RegularizationGradients (AFloat *A, const AFloat *B, AFloat weightDecay, int m, int n);  ; template<typename AFloat > ; __global__ void AddL2RegularizationGradients (AFloat *A, const AFloat *B, AFloat weightDecay, int m, int n);  ; template<typename AFloat > ; __global__ void AddRowWise (AFloat *W, const AFloat *theta, int m, int n);  ; template<typename AFloat > ; __global__ void AlmostEquals (bool *result, const AFloat *A, const AFloat *B, double epsilon, int m, int n);  ; template<typename AFloat > ; __device__ AFloat AtomicAdd (AFloat *address, AFloat val);  ; template<> ; __device__ double AtomicAdd (double *address, double val);  ; template<> ; __device__ float AtomicAdd (float *address, float val);  ; __device__ int calculateDimension (int imgDim, int fltDim, int padding, int stride);  Calculate the dimension of an output volume, given the sliding parameters and the input shape. ;  ; template<typename AFloat > ; __global__ void ConstAdd (AFloat *A, AFloat beta, int m, int n);  ; template<typename AFloat > ; __global__ void ConstMult (AFloat *A, AFloat beta, int m, int n);  ; template<typename AFlo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html:75,Guid,Guide,75,doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1Cuda.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaActivationDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaActivationDescriptor Struct Reference. . Definition at line 43 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaActivationDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaActivationDescriptor.html:92,Guid,Guide,92,doc/master/structTMVA_1_1DNN_1_1CudaActivationDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaActivationDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaConvolutionBwdDataAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaConvolutionBwdDataAlgo Struct Reference. . Definition at line 49 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaConvolutionBwdDataAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdDataAlgo.html:94,Guid,Guide,94,doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdDataAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdDataAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaConvolutionBwdFilterAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaConvolutionBwdFilterAlgo Struct Reference. . Definition at line 50 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaConvolutionBwdFilterAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdFilterAlgo.html:96,Guid,Guide,96,doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdFilterAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionBwdFilterAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaConvolutionDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaConvolutionDescriptor Struct Reference. . Definition at line 45 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaConvolutionDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionDescriptor.html:93,Guid,Guide,93,doc/master/structTMVA_1_1DNN_1_1CudaConvolutionDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaConvolutionFwdAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaConvolutionFwdAlgo Struct Reference. . Definition at line 48 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaConvolutionFwdAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionFwdAlgo.html:90,Guid,Guide,90,doc/master/structTMVA_1_1DNN_1_1CudaConvolutionFwdAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaConvolutionFwdAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaDataType Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaDataType Struct Reference. . Definition at line 51 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaDataType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaDataType.html:80,Guid,Guide,80,doc/master/structTMVA_1_1DNN_1_1CudaDataType.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaDataType.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaDropoutDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaDropoutDescriptor Struct Reference. . Definition at line 46 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaDropoutDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaDropoutDescriptor.html:89,Guid,Guide,89,doc/master/structTMVA_1_1DNN_1_1CudaDropoutDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaDropoutDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaEmptyDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaEmptyDescriptor Struct Reference. . Definition at line 54 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaEmptyDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaEmptyDescriptor.html:87,Guid,Guide,87,doc/master/structTMVA_1_1DNN_1_1CudaEmptyDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaEmptyDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaFilterDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaFilterDescriptor Struct Reference. . Definition at line 44 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaFilterDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaFilterDescriptor.html:88,Guid,Guide,88,doc/master/structTMVA_1_1DNN_1_1CudaFilterDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaFilterDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::CudaPoolingDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::CudaPoolingDescriptor Struct Reference. . Definition at line 47 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNCudaPoolingDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaPoolingDescriptor.html:89,Guid,Guide,89,doc/master/structTMVA_1_1DNN_1_1CudaPoolingDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1CudaPoolingDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyConvolutionBwdDataAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyConvolutionBwdDataAlgo Struct Reference. . Definition at line 50 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyConvolutionBwdDataAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdDataAlgo.html:95,Guid,Guide,95,doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdDataAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdDataAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyConvolutionBwdFilterAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyConvolutionBwdFilterAlgo Struct Reference. . Definition at line 51 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyConvolutionBwdFilterAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdFilterAlgo.html:97,Guid,Guide,97,doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdFilterAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionBwdFilterAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyConvolutionDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyConvolutionDescriptor Struct Reference. . Definition at line 46 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyConvolutionDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionDescriptor.html:94,Guid,Guide,94,doc/master/structTMVA_1_1DNN_1_1DummyConvolutionDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyConvolutionFwdAlgo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyConvolutionFwdAlgo Struct Reference. . Definition at line 49 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyConvolutionFwdAlgo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionFwdAlgo.html:91,Guid,Guide,91,doc/master/structTMVA_1_1DNN_1_1DummyConvolutionFwdAlgo.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyConvolutionFwdAlgo.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyCudaDataType Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyCudaDataType Struct Reference. . Definition at line 52 of file Cuda.h. #include <TMVA/DNN/Architectures/Cuda.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cuda.h. TMVADNNDummyCudaDataType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyCudaDataType.html:85,Guid,Guide,85,doc/master/structTMVA_1_1DNN_1_1DummyCudaDataType.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyCudaDataType.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyDataType Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyDataType Struct Reference. . Definition at line 52 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyDataType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDataType.html:81,Guid,Guide,81,doc/master/structTMVA_1_1DNN_1_1DummyDataType.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDataType.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyDescriptor Struct Reference. . Definition at line 44 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDescriptor.html:83,Guid,Guide,83,doc/master/structTMVA_1_1DNN_1_1DummyDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyDropoutDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyDropoutDescriptor Struct Reference. . Definition at line 47 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyDropoutDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDropoutDescriptor.html:90,Guid,Guide,90,doc/master/structTMVA_1_1DNN_1_1DummyDropoutDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyDropoutDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyEmptyDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyEmptyDescriptor Struct Reference. . Definition at line 54 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyEmptyDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyEmptyDescriptor.html:88,Guid,Guide,88,doc/master/structTMVA_1_1DNN_1_1DummyEmptyDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyEmptyDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyFilterDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyFilterDescriptor Struct Reference. . Definition at line 45 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyFilterDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyFilterDescriptor.html:89,Guid,Guide,89,doc/master/structTMVA_1_1DNN_1_1DummyFilterDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyFilterDescriptor.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::DummyPoolingDescriptor Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMVA::DNN::DummyPoolingDescriptor Struct Reference. . Definition at line 48 of file Cpu.h. #include <TMVA/DNN/Architectures/Cpu.h>; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/Architectures/Cpu.h. TMVADNNDummyPoolingDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyPoolingDescriptor.html:90,Guid,Guide,90,doc/master/structTMVA_1_1DNN_1_1DummyPoolingDescriptor.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1DummyPoolingDescriptor.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Layer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DNN::Layer Class Reference. ; Layer defines the layout of a layer. ; Layer defines the layout of a specific layer in the DNN Objects of this class don't hold the layer data itself (see class ""LayerData"") ; Definition at line 672 of file NeuralNet.h. Public Member Functions;  Layer (size_t numNodes, EnumFunction activationFunction, ModeOutputValues eModeOutputValues=ModeOutputValues::DIRECT);  c'tor for defining a Layer ;  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  fetch the activation function for this layer ;  ; EnumFunction activationFunctionType () const;  get the activation function type for this layer ;  ; std::shared_ptr< std::function< double(double)> > inverseActivationFunction () const;  fetch the inverse activation function for this layer ;  ; ModeOutputValues modeOutputValues () const;  get the mode-output-value (direct, probabilities) ;  ; void modeOutputValues (ModeOutputValues eModeOutputValues);  set the mode-output-value ;  ; size_t numNodes () const;  return the number of nodes of this layer ;  ; size_t numWeights (size_t numInputNodes) const;  return the number of weights for this layer (fully connected) ;  . Private Attributes; std::shared_ptr< std::function< double(double)> > m_activationFunction;  stores the activation function ;  ; EnumFunction m_activationFunctionType;  ; ModeOutputValues m_eModeOutputValues;  do the output values of this layer have to be transformed somehow (e.g. to probabilities) or returned as such ;  ; std::shared_ptr< std::function< double(double)> > m_inverseActivationFunction;  stores the inverse activation function ;  ; size_t m_numNodes;  . Friends; class Net;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ Layer(). TMVA::DNN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Layer.html:72,Guid,Guide,72,doc/master/classTMVA_1_1DNN_1_1Layer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Layer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::LayerData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::LayerData Class Reference. ; LayerData holds the data of one layer. ; LayerData holds the data of one layer, but not its layout ; Definition at line 436 of file NeuralNet.h. Public Types; typedef DropContainer::const_iterator const_dropout_iterator;  ; typedef function_container_type::const_iterator const_function_iterator_type;  ; typedef container_type::const_iterator const_iterator_type;  ; typedef std::vector< double > container_type;  ; typedef std::vector< std::function< double(double)> > function_container_type;  ; typedef function_container_type::iterator function_iterator_type;  ; typedef container_type::iterator iterator_type;  . Public Member Functions;  LayerData (const LayerData &other);  copy c'tor of LayerData ;  ;  LayerData (const_iterator_type itInputBegin, const_iterator_type itInputEnd, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (LayerData &&other);  move c'tor of LayerData ;  ;  LayerData (size_t inputSize);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, iterator_type itGradientBegin, std::shared_ptr< std::function< double(double)> > activationFunction, std::shared_ptr< std::function< double(double)> > inverseActivationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  LayerData (size_t size, const_iterator_type itWeightBegin, std::shared_ptr< std::function< double(double)> > activationFunction, ModeOutputValues eModeOutput=ModeOutputValues::DIRECT);  c'tor of LayerData ;  ;  ~LayerData ();  ; std::shared_ptr< std::function< double(double)> > activationFunction () const;  ; void clear ();  clear the values and the deltas ;  ; void clearDropOut ();  c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html:76,Guid,Guide,76,doc/master/classTMVA_1_1DNN_1_1LayerData.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1LayerData.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::MeanVariance Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::MeanVariance Class Reference. . Definition at line 74 of file NeuralNet.h. Public Member Functions;  MeanVariance ();  ; template<typename ITERATOR > ; void add (ITERATOR itBegin, ITERATOR itEnd);  ; template<typename T > ; void add (T value, double weight=1.0);  ; void clear ();  ; int count () const;  ; double mean () const;  ; double stdDev () const;  ; double stdDev_corr () const;  ; double var () const;  ; double var_corr () const;  ; double weights () const;  . Private Attributes; double m_mean;  ; size_t m_n;  ; double m_squared;  ; double m_sumWeights;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ MeanVariance(). TMVA::DNN::MeanVariance::MeanVariance ; (; ). inline . Definition at line 77 of file NeuralNet.h. Member Function Documentation. ◆ add() [1/2]. template<typename ITERATOR > . void TMVA::DNN::MeanVariance::add ; (; ITERATOR ; itBegin, . ITERATOR ; itEnd . ). inline . Definition at line 116 of file NeuralNet.h. ◆ add() [2/2]. template<typename T > . void TMVA::DNN::MeanVariance::add ; (; T ; value, . double ; weight = 1.0 . ). inline . Definition at line 93 of file NeuralNet.h. ◆ clear(). void TMVA::DNN::MeanVariance::clear ; (; ). inline . Definition at line 84 of file NeuralNet.h. ◆ count(). int TMVA::DNN::MeanVariance::count ; (; ); const. inline . Definition at line 124 of file NeuralNet.h. ◆ mean(). double TMVA::DNN::MeanVariance::mean ; (; ); const. inline . Definition at line 126 of file NeuralNet.h. ◆ stdDev(). double TMVA::DNN::MeanVariance::stdDev ; (; ); const. inline . Definition at line 145 of file NeuralNet.h. ◆ stdDev_corr(). double TMVA::DNN::MeanVariance::stdDev_corr ; (; ); const. inline . Definition at line 144 of file NeuralNet.h. ◆ var(). double TMVA::DNN::MeanVariance::var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1MeanVariance.html:79,Guid,Guide,79,doc/master/classTMVA_1_1DNN_1_1MeanVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1MeanVariance.html,2,"['Guid', 'clear']","['Guide', 'clear']"
Usability,". ROOT: TMVA::DNN::Net Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TMVA::DNN::Net Class Reference. ; neural net ; holds the structure of all layers and some data for the whole net does not know the layer data though (i.e. values of the nodes and weights) ; Definition at line 1061 of file NeuralNet.h. Public Types; typedef std::pair< iterator_type, iterator_type > begin_end_type;  ; typedef std::vector< double > container_type;  ; typedef container_type::iterator iterator_type;  . Public Member Functions;  Net ();  c'tor ;  ;  Net (const Net &other);  d'tor ;  ; void addLayer (Layer &&layer);  ; void addLayer (Layer &layer);  add a layer (layout) ;  ; template<typename Settings > ; void backPropagate (std::vector< std::vector< LayerData > > &layerPatternData, const Settings &settings, size_t trainFromLayer, size_t totalNumWeights) const;  ; void clear ();  ; template<typename Weights > ; std::vector< double > compute (const std::vector< double > &input, const Weights &weights) const;  compute the net with the given input and the given weights ;  ; template<typename ItWeight > ; std::tuple< double, double > computeError (const Settings &settings, std::vector< LayerData > &lastLayerData, Batch &batch, ItWeight itWeightBegin, ItWeight itWeightEnd) const;  ; void dE ();  ; template<typename WeightsType , typename DropProbabilities > ; void dropOutWeightFactor (WeightsType &weights, const DropProbabilities &drops, bool inverse=false);  set the drop out configuration ;  ; double E ();  ; template<typename Container , typename ItWeight > ; double errorFunction (LayerData &layerData, Container truth, ItWeight itWeight, ItWeight itWeightEnd, double patternWeight, double factorWeightDecay, EnumRegularization eRegularization) const;  computes the error of the DNN ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:70,Guid,Guide,70,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::RNN Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; TMVA::DNN::RNN Namespace Reference. Classes; class  TBasicGRULayer;  ; class  TBasicLSTMLayer;  ; class  TBasicRNNLayer;  ; struct  TRNNDescriptors;  ; struct  TRNNWorkspace;  . Functions; template<typename Architecture_t > ; auto debugMatrix (const typename Architecture_t::Matrix_t &A, const std::string name=""matrix"") -> void;  . Function Documentation. ◆ debugMatrix(). template<typename Architecture_t > . auto TMVA::DNN::RNN::debugMatrix ; (; const typename Architecture_t::Matrix_t & ; A, . const std::string ; name = ""matrix"" . ); -> void. Definition at line 306 of file RNNLayer.h. TMVADNNRNN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1RNN.html:74,Guid,Guide,74,doc/master/namespaceTMVA_1_1DNN_1_1RNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN_1_1RNN.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Settings Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TMVA::DNN::Settings Class Reference. ; Settings for the training of the neural net. ; Definition at line 729 of file NeuralNet.h. Public Member Functions;  Settings (TString name, size_t _convergenceSteps=15, size_t _batchSize=10, size_t _testRepetitions=7, double _factorWeightDecay=1e-5, TMVA::DNN::EnumRegularization _regularization=TMVA::DNN::EnumRegularization::NONE, MinimizerType _eMinimizerType=MinimizerType::fSteepest, double _learningRate=1e-5, double _momentum=0.3, int _repetitions=3, bool _multithreading=true);  c'tor ;  ; virtual ~Settings ();  d'tor ;  ; void addPoint (std::string histoName, double x);  for monitoring ;  ; void addPoint (std::string histoName, double x, double y);  for monitoring ;  ; size_t batchSize () const;  mini-batch size ;  ; void clear (std::string histoName);  for monitoring ;  ; virtual void computeResult (const Net &, std::vector< double > &);  callback for monitoring and logging ;  ; size_t convergenceCount () const;  returns the current convergence count ;  ; size_t convergenceSteps () const;  how many steps until training is deemed to have converged ;  ; void create (std::string histoName, int bins, double min, double max);  for monitoring ;  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  for monitoring ;  ; virtual void cycle (double progress, TString text);  ; virtual void drawSample (const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double);  callback for monitoring and logging ;  ; const std::vector< double > & dropFractions () const;  ; size_t dropRepetitions () const;  ; virtual void endTestCycle ();  callback for monitoring and loggging ;  ; virtual void endTrainCycle (double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:75,Guid,Guide,75,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::Steepest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::DNN::Steepest Class Reference. ; Steepest Gradient Descent algorithm (SGD) ; Implements a steepest gradient descent minimization algorithm ; Definition at line 333 of file NeuralNet.h. Public Member Functions;  Steepest (double learningRate=1e-4, double momentum=0.5, size_t repetitions=10);  c'tor ;  ; template<typename Function , typename Weights , typename PassThrough > ; double operator() (Function &fitnessFunction, Weights &weights, PassThrough &passThrough);  operator to call the steepest gradient descent algorithm ;  . Public Attributes; double m_alpha;  internal parameter (learningRate) ;  ; double m_beta;  internal parameter (momentum) ;  ; std::vector< double > m_localGradients;  local gradients for reuse in thread. ;  ; std::vector< double > m_localWeights;  local weights for reuse in thread. ;  ; std::vector< double > m_prevGradients;  vector remembers the gradients of the previous step ;  ; size_t m_repetitions;  . #include <TMVA/NeuralNet.h>; Constructor & Destructor Documentation. ◆ Steepest(). TMVA::DNN::Steepest::Steepest ; (; double ; learningRate = 1e-4, . double ; momentum = 0.5, . size_t ; repetitions = 10 . ). inline . c'tor ; C'tor; Parameters. learningRatedenotes the learning rate for the SGD algorithm ; momentumfraction of the velocity which is taken over from the last step ; repetitionsre-compute the gradients each ""repetitions"" steps . Definition at line 348 of file NeuralNet.h. Member Function Documentation. ◆ operator()(). template<typename Function , typename Weights , typename PassThrough > . double TMVA::DNN::Steepest::operator() ; (; Function & ; fitnessFunction, . Weights & ; weights, . PassThrough & ; passThrough . ). operator to call the steepest gradient descent algorithm ; implementation of the steepest gradie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html:75,Guid,Guide,75,doc/master/classTMVA_1_1DNN_1_1Steepest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html,3,"['Guid', 'learn']","['Guide', 'learningRate']"
Usability,". ROOT: TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >Adadelta Optimizer class. ; This class represents the Adadelta Optimizer. ; Definition at line 45 of file Adadelta.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdadelta (DeepNet_t &deepNet, Scalar_t learningRate=1.0, Scalar_t rho=0.95, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdadelta ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredBiasUpdatesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightUpdates ();  ; std::vector< Matrix_t > & GetPastSquaredWeightUpdatesAt (size_t i);  ; Scalar_t GetRho () const;  Getters. ;  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html:123,Guid,Guide,123,doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdadelta.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >Adagrad Optimizer class. ; This class represents the Adagrad Optimizer. ; Definition at line 45 of file Adagrad.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdagrad (DeepNet_t &deepNet, Scalar_t learningRate=0.01, Scalar_t epsilon=1e-8);  Constructor. ;  ;  ~TAdagrad ()=default;  Destructor. ;  ; Scalar_t GetEpsilon () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the gl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html:122,Guid,Guide,122,doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdagrad.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >Adam Optimizer class. ; This class represents the Adam Optimizer. ; Definition at line 45 of file Adam.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TAdam (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t beta1=0.9, Scalar_t beta2=0.999, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TAdam ()=default;  Destructor. ;  ; Scalar_t GetBeta1 () const;  Getters. ;  ; Scalar_t GetBeta2 () const;  ; Scalar_t GetEpsilon () const;  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentBiases ();  ; std::vector< Matrix_t > & GetFirstMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetFirstMomentWeights ();  ; std::vector< Matrix_t > & GetFirstMomentWeightsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentBiases ();  ; std::vector< Matrix_t > & GetSecondMomentBiasesAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetSecondMomentWeights ();  ; std::vector< Matrix_t > & GetSecondMomentWeightsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:119,Guid,Guide,119,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TBatch< AArchitecture > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TBatch< AArchitecture > Class Template Reference. ; template<typename AArchitecture>; class TMVA::DNN::TBatch< AArchitecture >TBatch. ; Class representing training batches consisting of a matrix of input data and a matrix of output data. The input and output data can be accessed using the GetInput() and GetOutput() member functions.; Template Parameters. AArchitectureThe underlying architecture. . Definition at line 54 of file DataLoader.h. Public Member Functions;  TBatch (const TBatch &)=default;  ;  TBatch (Matrix_t &, Matrix_t &, Matrix_t &);  ;  TBatch (TBatch &&)=default;  ; Matrix_t & GetInput ();  Return the matrix representing the input data. ;  ; Matrix_t & GetOutput ();  Return the matrix representing the output data. ;  ; Matrix_t & GetWeights ();  Return the matrix holding the event weights. ;  ; TBatch & operator= (const TBatch &)=default;  ; TBatch & operator= (TBatch &&)=default;  . Private Types; using Matrix_t = typename AArchitecture::Matrix_t;  . Private Attributes; Matrix_t fInputMatrix;  ; Matrix_t fOutputMatrix;  ; Matrix_t fWeightMatrix;  . #include <TMVA/DNN/DataLoader.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename AArchitecture > . using TMVA::DNN::TBatch< AArchitecture >::Matrix_t = typename AArchitecture::Matrix_t. private . Definition at line 58 of file DataLoader.h. Constructor & Destructor Documentation. ◆ TBatch() [1/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; Matrix_t & ; inputMatrix, . Matrix_t & ; outputMatrix, . Matrix_t & ; weightMatrix . ). Definition at line 192 of file DataLoader.h. ◆ TBatch() [2/3]. template<typename AArchitecture > . TMVA::DNN::TBatch< AArchitecture >::TBatch ; (; const TBatch< AArc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatch.html:99,Guid,Guide,99,doc/master/classTMVA_1_1DNN_1_1TBatch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatch.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TBatchIterator< Data_t, AArchitecture > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TBatchIterator< Data_t, AArchitecture > Class Template Reference. ; template<typename Data_t, typename AArchitecture>; class TMVA::DNN::TBatchIterator< Data_t, AArchitecture >TBatchIterator. ; Simple iterator class for the iterations over the training batches in a given data set represented by a TDataLoader object.; Template Parameters. ADataThe input data type. ; AArchitectureThe underlying architecture type. . Definition at line 90 of file DataLoader.h. Public Member Functions;  TBatchIterator (TDataLoader< Data_t, AArchitecture > &dataLoader, size_t index=0);  ; bool operator!= (const TBatchIterator &other);  ; TBatch< AArchitecture > operator* ();  ; TBatchIterator operator++ ();  . Private Attributes; size_t fBatchIndex;  ; TDataLoader< Data_t, AArchitecture > & fDataLoader;  . #include <TMVA/DNN/DataLoader.h>; Constructor & Destructor Documentation. ◆ TBatchIterator(). template<typename Data_t , typename AArchitecture > . TMVA::DNN::TBatchIterator< Data_t, AArchitecture >::TBatchIterator ; (; TDataLoader< Data_t, AArchitecture > & ; dataLoader, . size_t ; index = 0 . ). inline . Definition at line 99 of file DataLoader.h. Member Function Documentation. ◆ operator!=(). template<typename Data_t , typename AArchitecture > . bool TMVA::DNN::TBatchIterator< Data_t, AArchitecture >::operator!= ; (; const TBatchIterator< Data_t, AArchitecture > & ; other). inline . Definition at line 107 of file DataLoader.h. ◆ operator*(). template<typename Data_t , typename AArchitecture > . TBatch< AArchitecture > TMVA::DNN::TBatchIterator< Data_t, AArchitecture >::operator* ; (; ). inline . Definition at line 105 of file DataLoader.h. ◆ operator++(). template<typename Data_t , typename AArchitecture > . TBatchItera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchIterator.html:115,Guid,Guide,115,doc/master/classTMVA_1_1DNN_1_1TBatchIterator.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchIterator.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TMVA::DNN::TBatchNormLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TBatchNormLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TBatchNormLayer< Architecture_t >Layer implementing Batch Normalization. ; The input from each batch are normalized during training to have zero mean and unit variance and they are then scaled by two parameter, different for each input variable:; a scale factor gamma; an offset beta. In addition a running batch mean and variance is computed and stored in the class During inference the inputs are not normalized using the batch mean but the previously computed at running mean and variance If momentum is in [0,1) the running mean and variances are the exponential averages using the momentum value running_mean = momentum * running_mean + (1-momentum) * batch_mean If instead momentum<1 the cumulative average is computed running_mean = (nb/(nb+1) * running_mean + 1/(nb+1) * batch_mean; See more at [https://arxiv.org/pdf/1502.03167v3.pdf] ; Definition at line 64 of file BatchNormLayer.h. Public Types; using BNormDescriptors_t = typename Architecture_t::BNormDescriptors_t;  ; using HelperDescriptor_t = typename Architecture_t::TensorDescriptor_t;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TBatchNormLayer (const TBatchNormLayer &);  Copy Constructor. ;  ;  TBatchNormLayer (size_t batchSize, size_t inputDepth, size_t inputHeight, size_t inputWidth, const std::vector< size_t > &shape, int axis=-1, Scalar_t momentum=-1., Scalar_t epsilon=0.0001);  Constructor. ;  ;  TBatchNormLayer (TBatchNormLayer< Archite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html:109,Guid,Guide,109,doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TBatchNormLayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCpu< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpu< AReal > Class Template Reference. ; template<typename AReal = Float_t>; class TMVA::DNN::TCpu< AReal >The TCpu architecture class. ; Low-level interface class for multi-threaded CPU architectures. Contains as public types the declaration of the scalar, matrix and data loader types for this architecture as well as the remaining functions in the low-level interface in the form of static members. ; Definition at line 64 of file Cpu.h. Public Types; using ActivationDescriptor_t = DummyDescriptor;  ; using AlgorithmBackward_t = DummyConvolutionBwdDataAlgo;  ; using AlgorithmDataType_t = DummyDataType;  ; using AlgorithmForward_t = DummyConvolutionFwdAlgo;  ; using AlgorithmHelper_t = DummyConvolutionBwdFilterAlgo;  ; using BNormDescriptors_t = TDNNGenDescriptors< BNormLayer_t >;  ; using BNormLayer_t = TBatchNormLayer< TCpu< AReal > >;  ; using ConvDescriptors_t = CNN::TCNNDescriptors< ConvLayer_t >;  ; using ConvLayer_t = CNN::TConvLayer< TCpu< AReal > >;  ; using ConvolutionDescriptor_t = DummyDescriptor;  ; using ConvWorkspace_t = CNN::TCNNWorkspace< ConvLayer_t >;  ; using DeviceBuffer_t = TCpuBuffer< AReal >;  ; using DropoutDescriptor_t = DummyDescriptor;  ; using EmptyDescriptor_t = DummyDescriptor;  ; using FilterDescriptor_t = DummyDescriptor;  ; using GenLayer_t = VGeneralLayer< TCpu< AReal > >;  ; using HostBuffer_t = TCpuBuffer< AReal >;  ; using Matrix_t = TCpuMatrix< AReal >;  ; using PoolingDescriptor_t = DummyDescriptor;  ; using PoolingDescriptors_t = CNN::TCNNDescriptors< PoolingLayer_t >;  ; using PoolingLayer_t = CNN::TMaxPoolLayer< TCpu< AReal > >;  ; using PoolingWorkspace_t = CNN::TCNNWorkspace< PoolingLayer_t >;  ; using RecurrentDescriptor_t = DummyDataType;  ; using Redu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html:89,Guid,Guide,89,doc/master/classTMVA_1_1DNN_1_1TCpu.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpu.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCpuBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuBuffer< AFloat >TCpuBuffer. ; Since the memory on the CPU is homogeneous, only one buffer class is required. The host and device buffer classes are the same and copying between the host and device buffer is achieved by simply swapping the memory pointers.; Memory is handled as a shared pointer to a pointer of type AFloat, which is the floating point type used for the implementation.; Copying and assignment of TCpuBuffer objects performs only a shallow copy meaning the underlying data is shared between those objects.; Template Parameters. AFloatThe floating point type used for the computations. . Definition at line 43 of file CpuBuffer.h. Classes; class  FakeIteratorBegin;  ; struct  TDestructor;  . Public Member Functions;  TCpuBuffer ()=default;  ;  TCpuBuffer (const TCpuBuffer &)=default;  ;  TCpuBuffer (size_t size);  Construct buffer to hold size numbers of type AFloat. ;  ;  TCpuBuffer (TCpuBuffer &&)=default;  ; FakeIteratorBegin begin ();  ; void CopyFrom (const TCpuBuffer &);  Copy data from another buffer. ;  ; void CopyTo (TCpuBuffer &) const;  Copy data to another buffer. ;  ; AFloat * data () const;  ; size_t GetSize () const;  copy pointer from an external ;  ; TCpuBuffer GetSubBuffer (size_t offset, size_t start) const;  Return sub-buffer of size start starting at element offset. ;  ; size_t GetUseCount () const;  ;  operator AFloat * () const;  ; TCpuBuffer & operator= (const TCpuBuffer &)=default;  ; TCpuBuffer & operator= (TCpuBuffer &&)=default;  ; AFloat & operator[] (size_t i);  ; AFloat operator[] (size_t i) const;  . Private Attributes; std::shared_ptr< AFloat * > fBuffer;  ; struct TMVA::DNN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html:96,Guid,Guide,96,doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuBuffer.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCpuMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuMatrix< AFloat >The TCpuMatrix class. ; Matrix class for multi-threaded CPU architectures. Uses the TCpuBuffer class to store the matrices in column-major format for compatibility with BLAS. Provides Map and MapFrom member functions to simplify the application of activation functions and derivatives to matrices.; Copying and assignment of TCpuMatrix objects only performs shallow copies, i.e. copying is fast and the resulting objects share the element data.; Template Parameters. AFloatThe floating point type used to represent the matrix elements. . Definition at line 86 of file CpuMatrix.h. Public Member Functions;  TCpuMatrix ();  ;  TCpuMatrix (const TCpuBuffer< AFloat > &buffer, size_t m, size_t n);  Construct a m-times-n matrix from the given buffer. ;  ;  TCpuMatrix (const TCpuMatrix &)=default;  ;  TCpuMatrix (const TMatrixT< AFloat > &);  Construct a TCpuMatrix object by (deeply) copying from a TMatrixT<Double_t> matrix. ;  ;  TCpuMatrix (size_t nRows, size_t nCols);  Construct matrix and allocate space for its elements. ;  ;  TCpuMatrix (TCpuMatrix &&)=default;  ;  ~TCpuMatrix ()=default;  ; TCpuBuffer< AFloat > & GetBuffer ();  Returns pointer to a vector holding only ones with a guaranteed length of the number of columns of every instantiated CpuMatrix object. ;  ; const TCpuBuffer< AFloat > & GetBuffer () const;  ; TCpuBuffer< AFloat > & GetDeviceBuffer ();  ; const TCpuBuffer< AFloat > & GetDeviceBuffer () const;  ; size_t GetNcols () const;  ; size_t GetNoElements () const;  ; size_t GetNrows () const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html:96,Guid,Guide,96,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,2,"['Guid', 'simpl']","['Guide', 'simplify']"
Usability,". ROOT: TMVA::DNN::TCpuTensor< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Friends |; List of all members ; TMVA::DNN::TCpuTensor< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCpuTensor< AFloat >; Definition at line 40 of file CpuTensor.h. Public Types; using Matrix_t = TCpuMatrix< AFloat >;  ; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; using Scalar_t = AFloat;  ; using Shape_t = typename TMVA::Experimental::RTensor< AFloat >::Shape_t;  ;  Public Types inherited from TMVA::Experimental::RTensor< AFloat, TCpuBuffer< AFloat > >; using Container_t = TCpuBuffer< AFloat >;  ; using Index_t = Shape_t;  ; using Shape_t = std::vector< std::size_t >;  ; using Slice_t = std::vector< Shape_t >;  ; using Value_t = AFloat;  . Public Member Functions;  TCpuTensor ();  ;  TCpuTensor (AFloat *data, const Shape_t &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  ;  TCpuTensor (const TCpuBuffer< AFloat > &buffer, Shape_t shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a TCpuBuffer and a shape ;  ;  TCpuTensor (const TCpuMatrix< AFloat > &matrix, size_t dim=3, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a TCpuMatrix. ;  ;  TCpuTensor (Shape_t shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from a shape. ;  ;  TCpuTensor (size_t bsize, size_t depth, size_t height, size_t width, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from batch size, depth, height, width ;  ;  TCpuTensor (size_t bsize, size_t depth, size_t hw, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from batch size, depth, height*width ;  ;  TCpuTensor (size_t n, size_t m, MemoryLayout memlayout=MemoryLayout::ColumnMajor);  constructors from n m ;  ; TCpuTensor< AFloat > At (size_t i);  ; TCpuTensor< AFloat > At (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuTensor.html:96,Guid,Guide,96,doc/master/classTMVA_1_1DNN_1_1TCpuTensor.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuTensor.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCuda< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TCuda< AReal > Class Template Reference. ; template<typename AReal = Float_t>; class TMVA::DNN::TCuda< AReal >The TCuda architecture class. ; Low-level interface class for CUDA computing architectures. Contains as public types the declaration of the scalar, matrix and buffer types for this architecture as well as the remaining functions in the low-level interface in the form of static members. ; Definition at line 64 of file Cuda.h. Public Types; using ActivationDescriptor_t = CudaActivationDescriptor;  ; using AFloat = AReal;  ; using AlgorithmBackward_t = CudaConvolutionBwdDataAlgo;  ; using AlgorithmDataType_t = DummyCudaDataType;  ; using AlgorithmForward_t = CudaConvolutionFwdAlgo;  ; using AlgorithmHelper_t = CudaConvolutionBwdFilterAlgo;  ; using BNormDescriptors_t = TDNNGenDescriptors< BNormLayer_t >;  ; using BNormLayer_t = TBatchNormLayer< TCuda< AReal > >;  ; using ConvDescriptors_t = CNN::TCNNDescriptors< ConvLayer_t >;  ; using ConvLayer_t = CNN::TConvLayer< TCuda< AReal > >;  ; using ConvolutionDescriptor_t = CudaConvolutionDescriptor;  ; using ConvWorkspace_t = CNN::TCNNWorkspace< ConvLayer_t >;  ; using DeviceBuffer_t = TCudaDeviceBuffer< AFloat >;  ; using DropoutDescriptor_t = CudaDropoutDescriptor;  ; using EmptyDescriptor_t = CudaEmptyDescriptor;  ; using FilterDescriptor_t = CudaFilterDescriptor;  ; using GenLayer_t = VGeneralLayer< TCuda< AReal > >;  ; using HostBuffer_t = TCudaHostBuffer< AFloat >;  ; using Matrix_t = TCudaMatrix< AFloat >;  ; using PoolingDescriptor_t = CudaPoolingDescriptor;  ; using PoolingDescriptors_t = CNN::TCNNDescriptors< PoolingLayer_t >;  ; using PoolingLayer_t = CNN::TMaxPoolLayer< TCuda< AReal > >;  ; using PoolingWork",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html:90,Guid,Guide,90,doc/master/classTMVA_1_1DNN_1_1TCuda.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCuda.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCudaDeviceBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceBuffer< AFloat >TCudaDeviceBuffer. ; Service class for on-device memory buffers. Uses std::shared_pointer with custom destructor to ensure consistent memory management and allow for easy copying/moving. A device buffer has an associated CUDA compute stream , which is used for implicit synchronization of data transfers.; Template Parameters. AFloatThe floating point type to be stored in the buffers. . Definition at line 100 of file CudaBuffers.h. Classes; struct  TDestructor;  . Public Member Functions;  TCudaDeviceBuffer ()=default;  ;  TCudaDeviceBuffer (AFloat *, size_t size, cudaStream_t stream);  ;  TCudaDeviceBuffer (const TCudaDeviceBuffer &)=default;  ;  TCudaDeviceBuffer (size_t size);  ;  TCudaDeviceBuffer (size_t size, cudaStream_t stream);  ;  TCudaDeviceBuffer (TCudaDeviceBuffer &&)=default;  ; void CopyFrom (const TCudaHostBuffer< AFloat > &) const;  ; void CopyTo (const TCudaHostBuffer< AFloat > &) const;  ; AFloat * data () const;  ; cudaStream_t GetComputeStream () const;  ; size_t GetSize () const;  ; TCudaDeviceBuffer GetSubBuffer (size_t offset, size_t size);  Return sub-buffer of the current buffer. ;  ; size_t GetUseCount () const;  ;  operator AFloat * () const;  Convert to raw device data pointer. ;  ; TCudaDeviceBuffer & operator= (const TCudaDeviceBuffer &)=default;  ; TCudaDeviceBuffer & operator= (TCudaDeviceBuffer &&)=default;  ; void SetComputeStream (cudaStream_t stream);  . Private Attributes; cudaStream_t fComputeStream;  cudaStream for data transfer ;  ; struct TMVA::DNN::TCudaDeviceBuffer::TDestructor fDestructor;  ; std::shared_ptr< AFloat * > fDevicePointer;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html:103,Guid,Guide,103,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaDeviceReference< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaDeviceReference< AFloat >TCudaDeviceReference. ; Helper class emulating lvalue references for AFloat values that are physically on the device. Allows for example to assign to matrix elements. Note that device access through CudaDeviceReferences enforces synchronization with all streams and thus qualifies as performance killer. Only used for testing. ; Definition at line 58 of file CudaMatrix.h. Public Member Functions;  TCudaDeviceReference (AFloat *devicePointer);  ;  operator AFloat ();  ; void operator+= (AFloat value);  ; void operator-= (AFloat value);  ; void operator= (AFloat value);  ; void operator= (const TCudaDeviceReference &other);  . Private Attributes; AFloat * fDevicePointer;  . #include <TMVA/DNN/Architectures/Cuda/CudaMatrix.h>; Constructor & Destructor Documentation. ◆ TCudaDeviceReference(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::TCudaDeviceReference ; (; AFloat * ; devicePointer). Definition at line 209 of file CudaMatrix.h. Member Function Documentation. ◆ operator AFloat(). template<typename AFloat > . TMVA::DNN::TCudaDeviceReference< AFloat >::operator AFloat. Definition at line 217 of file CudaMatrix.h. ◆ operator+=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator+= ; (; AFloat ; value). Definition at line 244 of file CudaMatrix.h. ◆ operator-=(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator-= ; (; AFloat ; value). Definition at line 256 of file CudaMatrix.h. ◆ operator=() [1/2]. template<typename AFloat > . void TMVA::DNN::TCudaDeviceReference< AFloat >::operator= ; ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html:106,Guid,Guide,106,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceReference.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCudaHostBuffer< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TCudaHostBuffer< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaHostBuffer< AFloat >TCudaHostBuffer. ; Wrapper class for pinned memory buffers on the host. Uses std::shared_pointer with custom destructor to ensure consistent memory management and allow for easy copying/moving of the buffers. Copying is asynchronous and will set the cudaStream of the device buffer so that subsequent computations on the device buffer can be performed on the same stream.; Template Parameters. AFloatThe floating point type to be stored in the buffers. . Definition at line 42 of file CudaBuffers.h. Classes; struct  TDestructor;  . Public Member Functions;  TCudaHostBuffer ()=default;  ;  TCudaHostBuffer (AFloat *);  ;  TCudaHostBuffer (const TCudaHostBuffer &)=default;  ;  TCudaHostBuffer (size_t size);  ;  TCudaHostBuffer (TCudaHostBuffer &&)=default;  ; AFloat * data () const;  ; size_t GetSize () const;  ; TCudaHostBuffer GetSubBuffer (size_t offset, size_t size);  Return sub-buffer of the current buffer. ;  ;  operator AFloat * () const;  ; TCudaHostBuffer & operator= (const TCudaHostBuffer &)=default;  ; TCudaHostBuffer & operator= (TCudaHostBuffer &&)=default;  ; AFloat & operator[] (size_t index);  ; AFloat operator[] (size_t index) const;  ; void SetConstVal (const AFloat constVal);  Sets the entire buffer to a constant value. ;  . Private Attributes; cudaStream_t fComputeStream;  cudaStream for data transfer ;  ; struct TMVA::DNN::TCudaHostBuffer::TDestructor fDestructor;  ; std::shared_ptr< AFloat * > fHostPointer;  Pointer to the buffer data. ;  ; size_t fOffset;  Offset for sub-buffers. ;  ; size_t fSize;  ; friend TCudaDeviceBuffer< AFloat >;  . #include <TMVA/DNN/Architectu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html:101,Guid,Guide,101,doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaHostBuffer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaMatrix< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaMatrix< AFloat >TCudaMatrix Class. ; The TCudaMatrix class represents matrices on a CUDA device. The elements of the matrix are stored in a TCudaDeviceBuffer object which takes care of the allocation and freeing of the device memory. TCudaMatrices are lightweight object, that means on assignment and copy creation only a shallow copy is performed and no new element buffer allocated. To perform a deep copy use the static Copy method of the TCuda architecture class.; The TCudaDeviceBuffer has an associated cuda stream, on which the data is transferred to the device. This stream can be accessed through the GetComputeStream member function and used to synchronize computations.; The TCudaMatrix class also holds static references to CUDA resources. Those are the cublas handle, a buffer of curand states for the generation of random numbers as well as a vector containing ones, which is used for summing column matrices using matrix-vector multiplication. The class also has a static buffer for returning results from the device. ; Definition at line 102 of file CudaMatrix.h. Public Member Functions;  TCudaMatrix ();  ;  TCudaMatrix (const TCudaMatrix &)=default;  ;  TCudaMatrix (const TMatrixT< AFloat > &);  ;  TCudaMatrix (size_t i, size_t j);  ;  TCudaMatrix (TCudaDeviceBuffer< AFloat > buffer, size_t m, size_t n);  ;  TCudaMatrix (TCudaMatrix &&)=default;  ;  ~TCudaMatrix ()=default;  ; cudaStream_t GetComputeStream () const;  ; const cublasHandle_t & GetCublasHandle () const;  ; AFloat * GetDataPointer ();  ; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html:97,Guid,Guide,97,doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TCudaTensor< AFloat > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DNN::TCudaTensor< AFloat > Class Template Reference. ; template<typename AFloat>; class TMVA::DNN::TCudaTensor< AFloat >TCudaTensor Class. ; The TCudaTensor class extends the TCudaMatrix class for dimensions > 2. ; Definition at line 83 of file CudaTensor.h. Classes; struct  TensorDescriptor;  . Public Types; using MemoryLayout = TMVA::Experimental::MemoryLayout;  ; using Scalar_t = AFloat;  ; using Shape_t = std::vector< size_t >;  . Public Member Functions;  TCudaTensor ();  ;  TCudaTensor (const AFloat *data, const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (const TCudaMatrix< AFloat > &m, size_t dim=2);  ;  TCudaTensor (const TCudaTensor &)=default;  ;  TCudaTensor (const TMatrixT< AFloat > &m, size_t dim=2);  ;  TCudaTensor (size_t bsize, size_t csize, size_t hsize, size_t wsize, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (size_t bsize, size_t csize, size_t hwsize, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (size_t n, size_t m, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (TCudaDeviceBuffer< AFloat > buffer, const std::vector< size_t > &shape, MemoryLayout memlayout=MemoryLayout::ColumnMajor, int deviceIndx=0, int streamIndx=0);  ;  TCudaTensor (TCudaDeviceBuffer< AFloat > buffer, size_t n, size_t m);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html:97,Guid,Guide,97,doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaTensor.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDLGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDLGradientDescent< Architecture_t >; Definition at line 65 of file DLMinimizers.h. Public Types; using DeepNet_t = TDeepNet< Architecture_t >;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TDLGradientDescent ();  ;  TDLGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  Getters. ;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  Setters. ;  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; void Step (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; void Step (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneous",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:112,Guid,Guide,112,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,2,"['Guid', 'learn']","['Guide', 'learningRate']"
Usability,". ROOT: TMVA::DNN::TDNNGenDescriptors< Layer_t > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA::DNN::TDNNGenDescriptors< Layer_t > Struct Template Reference. ; template<typename Layer_t>; struct TMVA::DNN::TDNNGenDescriptors< Layer_t >; Definition at line 37 of file ContextHandles.h. Public Types; using HelperDescriptor_t = typename Layer_t::HelperDescriptor_t;  . Public Attributes; HelperDescriptor_t HelperDescriptor;  . Additional Inherited Members;  Public Member Functions inherited from TMVA::DNN::TDescriptors; virtual ~TDescriptors ();  . #include <TMVA/DNN/CNN/ContextHandles.h>. Inheritance diagram for TMVA::DNN::TDNNGenDescriptors< Layer_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ HelperDescriptor_t. template<typename Layer_t > . using TMVA::DNN::TDNNGenDescriptors< Layer_t >::HelperDescriptor_t = typename Layer_t::HelperDescriptor_t. Definition at line 38 of file ContextHandles.h. Member Data Documentation. ◆ HelperDescriptor. template<typename Layer_t > . HelperDescriptor_t TMVA::DNN::TDNNGenDescriptors< Layer_t >::HelperDescriptor. Definition at line 40 of file ContextHandles.h. Collaboration diagram for TMVA::DNN::TDNNGenDescriptors< Layer_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h. TMVADNNTDNNGenDescriptors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TDNNGenDescriptors.html:106,Guid,Guide,106,doc/master/structTMVA_1_1DNN_1_1TDNNGenDescriptors.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TDNNGenDescriptors.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDataLoader< AData, TReference< AReal > > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TDataLoader< AData, TReference< AReal > > Class Template Reference. ; template<typename AData, typename AReal>; class TMVA::DNN::TDataLoader< AData, TReference< AReal > >; Definition at line 33 of file DataLoader.h. Public Member Functions;  TDataLoader (const AData &data, size_t nSamples, size_t batchSize, size_t nInputFeatures, size_t nOutputFeatures, size_t nthreads=1);  ;  TDataLoader (const TDataLoader &)=default;  ;  TDataLoader (TDataLoader &&)=default;  ; BatchIterator_t begin ();  ; void CopyInput (TMatrixT< AReal > &matrix, IndexIterator_t begin);  Copy input matrix into the given host buffer. ;  ; void CopyOutput (TMatrixT< AReal > &matrix, IndexIterator_t begin);  Copy output matrix into the given host buffer. ;  ; void CopyWeights (TMatrixT< AReal > &matrix, IndexIterator_t begin);  Copy weight matrix into the given host buffer. ;  ; BatchIterator_t end ();  ; TBatch< TReference< AReal > > GetBatch ();  Return the next batch from the training set. ;  ; TDataLoader & operator= (const TDataLoader &)=default;  ; TDataLoader & operator= (TDataLoader &&)=default;  ; void Shuffle ();  Shuffle the order of the samples in the batch. ;  . Private Types; using BatchIterator_t = TBatchIterator< AData, TReference< AReal > >;  . Private Attributes; size_t fBatchIndex;  ; size_t fBatchSize;  ; const AData & fData;  ; size_t fNInputFeatures;  ; size_t fNOutputFeatures;  ; size_t fNSamples;  ; std::vector< size_t > fSampleIndices;  Ordering of the samples in the epoch. ;  ; TMatrixT< AReal > inputMatrix;  ; TMatrixT< AReal > outputMatrix;  ; TMatrixT< AReal > weightMatrix;  . #include <TMVA/DNN/Architectures/Reference/DataLoader.h>; Member Typedef Documentation. ◆ BatchIterator_t. temp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html:117,Guid,Guide,117,doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDataLoader< Data_t, AArchitecture > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TDataLoader< Data_t, AArchitecture > Class Template Reference. ; template<typename Data_t, typename AArchitecture>; class TMVA::DNN::TDataLoader< Data_t, AArchitecture >TDataLoader. ; Service class managing the streaming of the training data from the input data type to the accelerator device or the CPU. A TDataLoader object manages a number of host and device buffer pairs that are used in a round-robin manner for the transfer of batches to the device.; Each TDataLoader object has an associated batch size and a number of total samples in the dataset. One epoch is the number of buffers required to transfer the complete training set. Using the begin() and end() member functions allows the user to iterate over the batches in one epoch.; Template Parameters. ADataThe input data type. ; AArchitectureThe architecture class of the underlying architecture. . Definition at line 128 of file DataLoader.h. Public Member Functions;  TDataLoader (const Data_t &data, size_t nSamples, size_t batchSize, size_t nInputFeatures, size_t nOutputFeatures, size_t nStreams=1);  ;  TDataLoader (const TDataLoader &)=default;  ;  TDataLoader (TDataLoader &&)=default;  ; BatchIterator_t begin ();  ; void CopyInput (HostBuffer_t &buffer, IndexIterator_t begin, size_t batchSize);  Copy input matrix into the given host buffer. ;  ; void CopyInput (TCpuBuffer< Double_t > &buffer, IndexIterator_t sampleIterator, size_t batchSize);  ; void CopyInput (TCpuBuffer< Double_t > &buffer, IndexIterator_t sampleIterator, size_t batchSize);  ; void CopyInput (TCpuBuffer< Float_t > &buffer, IndexIterator_t sampleIterator, size_t batchSize);  ; void CopyInput (TCpuBuffer< Float_t > &buffer, IndexIterator_t sampleIterator, size_t batc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader.html:112,Guid,Guide,112,doc/master/classTMVA_1_1DNN_1_1TDataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDeepNet< Architecture_t, Layer_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDeepNet< Architecture_t, Layer_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>>; class TMVA::DNN::TDeepNet< Architecture_t, Layer_t >Generic Deep Neural Network class. ; This class encapsulates the information for all types of Deep Neural Networks. Template Parameters. ArchitectureThe Architecture type that holds the architecture-specific data types. . Definition at line 73 of file DeepNet.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TDeepNet ();  Default Constructor. ;  ;  TDeepNet (const TDeepNet &);  Copy-constructor. ;  ;  TDeepNet (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t BatchDepth, size_t BatchHeight, size_t BatchWidth, ELossFunction fJ, EInitialization fI=EInitialization::kZero, ERegularization fR=ERegularization::kNone, Scalar_t fWeightDecay=0.0, bool isTraining=false);  Constructor. ;  ;  ~TDeepNet ();  Destructor. ;  ; TBasicGRULayer< Architecture_t > * AddBasicGRULayer (size_t stateSize, size_t inputSize, size_t timeSteps, bool rememberState=false, bool returnSequence=false, bool resetGateAfter=false);  Function for adding GRU Layer in the Deep Neural Network, with given parameters. ;  ; void AddBasicGRULayer (TBasicGRULayer< Architecture_t > *basicGRULayer);  Function for adding GRU Layer in the Deep Neural Network, when the layer is already created. ;  ; TBasicLSTMLayer< Architecture_t > * AddBasicLSTMLayer (size_t stateSize, size_t inputSize, size_t timeSteps, bool rememberState=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:111,Guid,Guide,111,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDenseLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TDenseLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TDenseLayer< Architecture_t >Generic layer class. ; This generic layer class represents a dense layer of a neural network with a given width n and activation function f. The activation function of each layer is given by \(\mathbf{u} = \mathbf{W}\mathbf{x} + \boldsymbol{\theta}\).; In addition to the weight and bias matrices, each layer allocates memory for its activations and the corresponding input tensor before evaluation of the activation function as well as the gradients of the weights and biases.; The layer provides member functions for the forward propagation of activations through the given layer. ; Definition at line 59 of file DenseLayer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TDenseLayer (const TDenseLayer &);  Copy Constructor. ;  ;  TDenseLayer (size_t BatchSize, size_t InputWidth, size_t Width, EInitialization init, Scalar_t DropoutProbability, EActivationFunction f, ERegularization reg, Scalar_t weightDecay);  Constructor. ;  ;  TDenseLayer (TDenseLayer< Architecture_t > *layer);  Copy the dense layer provided as a pointer. ;  ;  ~TDenseLayer ();  Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent);  Writes the information and the weights about the layer in an XML node. ;  ; void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward);  Compute weight, bias and activation gradients. ;  ; void Forward (Tensor_t &input, bool applyDropout=false);  Compute activation of the layer fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html:105,Guid,Guide,105,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDescriptors Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::DNN::TDescriptors Struct Reference. . Definition at line 29 of file ContextHandles.h. Public Member Functions; virtual ~TDescriptors ();  . #include <TMVA/DNN/CNN/ContextHandles.h>. Inheritance diagram for TMVA::DNN::TDescriptors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TDescriptors(). virtual TMVA::DNN::TDescriptors::~TDescriptors ; (; ). inlinevirtual . Definition at line 30 of file ContextHandles.h. The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h. TMVADNNTDescriptors. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TDescriptors.html:80,Guid,Guide,80,doc/master/structTMVA_1_1DNN_1_1TDescriptors.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TDescriptors.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TDevice Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; Static Public Attributes |; List of all members ; TMVA::DNN::TDevice Class Reference. ; TDevice. ; The TDevice class provides static functions for the generation of CUDA grids for kernel launches and is used to encapsulate the distribution of threads and blocks over the data. ; Definition at line 36 of file Device.h. Static Public Member Functions; static dim3 BlockDims1D ();  ; static dim3 BlockDims2D ();  ; template<typename AMatrix > ; static dim3 GridDims1D (const AMatrix &A);  ; template<typename AMatrix > ; static dim3 GridDims2D (const AMatrix &A);  ; static dim3 GridDims2D (int nrows, int ncols);  ; template<typename AMatrix > ; static int NThreads (const AMatrix &A);  . Static Public Attributes; static constexpr int BlockDimX = 1;  ; static constexpr int BlockDimY = 32;  ; static constexpr int BlockSize = BlockDimX * BlockDimY;  . #include <TMVA/DNN/Architectures/Cuda/Device.h>; Member Function Documentation. ◆ BlockDims1D(). static dim3 TMVA::DNN::TDevice::BlockDims1D ; (; ). inlinestatic . Definition at line 48 of file Device.h. ◆ BlockDims2D(). static dim3 TMVA::DNN::TDevice::BlockDims2D ; (; ). inlinestatic . Definition at line 55 of file Device.h. ◆ GridDims1D(). template<typename AMatrix > . static dim3 TMVA::DNN::TDevice::GridDims1D ; (; const AMatrix & ; A). inlinestatic . Definition at line 63 of file Device.h. ◆ GridDims2D() [1/2]. template<typename AMatrix > . static dim3 TMVA::DNN::TDevice::GridDims2D ; (; const AMatrix & ; A). inlinestatic . Definition at line 88 of file Device.h. ◆ GridDims2D() [2/2]. static dim3 TMVA::DNN::TDevice::GridDims2D ; (; int ; nrows, . int ; ncols . ). inlinestatic . Definition at line 74 of file Device.h. ◆ NThreads(). template<typename AMatrix > . static int TMVA::DNN::TDevice::NThreads ; (; const AMatrix & ; A). inlinestatic . Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDevice.html:74,Guid,Guide,74,doc/master/classTMVA_1_1DNN_1_1TDevice.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDevice.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TGradientDescent< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TGradientDescent< Architecture_t >; Definition at line 55 of file Minimizers.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TGradientDescent ();  ;  TGradientDescent (Scalar_t learningRate, size_t convergenceSteps, size_t testInterval);  ; size_t GetConvergenceCount () const;  ; size_t GetConvergenceSteps () const;  ; Scalar_t GetTestError () const;  ; size_t GetTestInterval () const;  ; Scalar_t GetTrainingError () const;  ; bool HasConverged ();  Increases the minimization step counter by the test error evaluation period and uses the current internal value of the test error to determine if the minimization has converged. ;  ; bool HasConverged (Scalar_t testError);  Increases the minimization step counter by the test error evaluation period and uses the provided test error value to determine if the minimization has converged. ;  ; void Reset ();  Reset minimizer object to default state. ;  ; void SetBatchSize (Scalar_t rate);  ; void SetConvergenceSteps (size_t steps);  ; void SetLearningRate (Scalar_t rate);  ; void SetTestInterval (size_t interval);  ; template<typename Net_t > ; void Step (Net_t &master, std::vector< Net_t > &nets, std::vector< TBatch< Architecture_t > > &batches);  Perform multiple optimization steps simultaneously. ;  ; template<typename Net_t > ; void Step (Net_t &net, Matrix_t &input, const Matrix_t &output, const Matrix_t &weights);  Perform a single optimization step on a given batch. ;  ; template<typename Net_t > ; Scalar_t StepLoss (Net_t &net",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:110,Guid,Guide,110,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,2,"['Guid', 'learn']","['Guide', 'learningRate']"
Usability,". ROOT: TMVA::DNN::TLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TLayer< Architecture_t >Generic layer class. ; This generic layer class represents a layer of a neural network with a given width n and activation function f. The activation function of each layer is given by \(\mathbf{u} =; \mathbf{W}\mathbf{x} + \boldsymbol{\theta}\).; In addition to the weight and bias matrices, each layer allocates memory for its activations and the corresponding first partial fDerivatives of the activation function as well as the gradients of the fWeights and fBiases.; The layer provides member functions for the forward propagation of activations through the given layer. ; Definition at line 52 of file Layer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TLayer (const TLayer &);  ;  TLayer (size_t BatchSize, size_t InputWidth, size_t Width, EActivationFunction f, Scalar_t dropoutProbability);  ; void Backward (Matrix_t &gradients_backward, const Matrix_t &activations_backward, ERegularization r, Scalar_t weightDecay);  Compute weight, bias and activation gradients. ;  ; void Forward (Matrix_t &input, bool applyDropout=false);  Compute activation of the layer for the given input. ;  ; EActivationFunction GetActivationFunction () const;  ; Matrix_t & GetActivationGradients ();  ; const Matrix_t & GetActivationGradients () const;  ; size_t GetBatchSize () const;  ; Matrix_t & GetBiases ();  ; const Matrix_t & GetBiases () const;  ; Matrix_t & GetBiasGradients ();  ; const Matrix_t & GetBiasGradients () const;  ; size_t G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TLayer.html:100,Guid,Guide,100,doc/master/classTMVA_1_1DNN_1_1TLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TLayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TNet< Architecture_t, Layer_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TNet< Architecture_t, Layer_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = TLayer<Architecture_t>>; class TMVA::DNN::TNet< Architecture_t, Layer_t >Generic neural network class. ; This generic neural network class represents a concrete neural network through a vector of layers and coordinates the forward and backward propagation through the net.; The net takes as input a batch from the training data given in matrix form, with each row corresponding to a certain training event.; On construction, the neural network allocates all the memory required for the training of the neural net and keeps it until its destruction.; The Architecture type argument simply holds the architecture-specific data types, which are just the matrix type Matrix_t and the used scalar type Scalar_t.; Template Parameters. ArchitectureThe Architecture type that holds the ; Layer_tThe type used for the layers. Can be either Layer<Architecture> or SharedWeightLayer<Architecture>. datatypes for a given architecture. . Definition at line 49 of file Net.h. Public Types; using LayerIterator_t = typename std::vector< Layer_t >::iterator;  ; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TNet ();  ;  TNet (const TNet &other);  ; template<typename OtherArchitecture_t > ;  TNet (size_t batchSize, const TNet< OtherArchitecture_t > &);  ;  TNet (size_t batchSize, size_t inputWidth, ELossFunction fJ, ERegularization fR=ERegularization::kNone, Scalar_t fWeightDecay=0.0);  Construct a neural net for a given batch size with given output function * and regularization. ;  ; template<typename SharedLayer > ; void AddL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html:107,Guid,Guide,107,doc/master/classTMVA_1_1DNN_1_1TNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TNet.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >RMSProp Optimizer class. ; This class represents the RMSProp Optimizer with options for applying momentum. ; Definition at line 45 of file RMSProp.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TRMSProp (DeepNet_t &deepNet, Scalar_t learningRate=0.001, Scalar_t momentum=0.0, Scalar_t rho=0.9, Scalar_t epsilon=1e-7);  Constructor. ;  ;  ~TRMSProp ()=default;  Destructor. ;  ; std::vector< std::vector< Matrix_t > > & GetBiasUpdates ();  ; std::vector< Matrix_t > & GetBiasUpdatesAt (size_t i);  ; Scalar_t GetEpsilon () const;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredBiasGradients ();  ; std::vector< Matrix_t > & GetPastSquaredBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastSquaredWeightGradients ();  ; std::vector< Matrix_t > & GetPastSquaredWeightGradientsAt (size_t i);  ; Scalar_t GetRho () const;  ; std::vector< std::vector< Matrix_t > > & GetWeightUpdates ();  ; std::vector< Matrix_t > & GetWeightUpdatesAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html:122,Guid,Guide,122,doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TRMSProp.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TReference< AReal > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TMVA::DNN::TReference< AReal > Class Template Reference. ; template<typename AReal>; class TMVA::DNN::TReference< AReal >The reference architecture class. ; Class template that contains the reference implementation of the low-level interface for the DNN implementation. The reference implementation uses the TMatrixT class template to represent matrices.; Template Parameters. ARealThe floating point type used to represent scalars. . Definition at line 52 of file Reference.h. Public Types; using Matrix_t = TMatrixT< AReal >;  ; using Scalar_t = AReal;  ; using Tensor_t = TMatrixT< AReal >;  . Static Public Member Functions; static void AdamUpdate (TMatrixT< AReal > &A, const TMatrixT< AReal > &M, const TMatrixT< AReal > &V, AReal alpha, AReal eps);  Update functions for ADAM optimizer. ;  ; static void AdamUpdateFirstMom (TMatrixT< AReal > &A, const TMatrixT< AReal > &B, AReal beta);  ; static void AdamUpdateSecondMom (TMatrixT< AReal > &A, const TMatrixT< AReal > &B, AReal beta);  ; static void AddBiases (TMatrixT< AReal > &A, const TMatrixT< AReal > &biases);  ; static void ConstAdd (TMatrixT< AReal > &A, AReal beta);  Add the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConstMult (TMatrixT< AReal > &A, AReal beta);  Multiply the constant beta to all the elements of matrix A and write the result into A. ;  ; static void ConvLayerForward (std::vector< TMatrixT< AReal > > &, std::vector< TMatrixT< AReal > > &, const std::vector< TMatrixT< AReal > > &, const TMatrixT< AReal > &, const TMatrixT< AReal > &, const DNN::CNN::TConvParams &, EActivationFunction, std::vector< TMatrixT< AReal > > &);  Forward propagation in the Convolutional layer. ;  ; static void Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:95,Guid,Guide,95,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TReshapeLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TReshapeLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TReshapeLayer< Architecture_t >; Definition at line 41 of file ReshapeLayer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TReshapeLayer (const TReshapeLayer &);  Copy Constructor. ;  ;  TReshapeLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, bool Flattening);  Constructor. ;  ;  TReshapeLayer (TReshapeLayer< Architecture_t > *layer);  Copy the reshape layer provided as a pointer. ;  ;  ~TReshapeLayer ();  Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent);  Writes the information and the weights about the layer in an XML node. ;  ; void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward);  Backpropagates the error. ;  ; void Forward (Tensor_t &input, bool applyDropout=false);  The input must be in 3D tensor form with the different matrices corresponding to different events in the batch. ;  ; bool isFlattening () const;  TODO Add documentation Does this layer flatten? (necessary for DenseLayer) B x D1 x D2 --> 1 x B x (D1 * D2) ;  ; void Print () const;  Prints the info about the layer. ;  ; virtual void ReadWeightsFromXML (void *parent);  Read the information and the weights about the layer from XML node. ;  ;  Public Member Functions inherited from TMVA::DNN::VGeneralLayer< Architecture_t >;  VGeneralLayer (const VGeneralLayer &);  Copy Constructor. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:107,Guid,Guide,107,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >Stochastic Batch Gradient Descent Optimizer class. ; This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum and nesterov momentum. ; Definition at line 46 of file SGD.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:118,Guid,Guide,118,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TSharedLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TSharedLayer< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TSharedLayer< Architecture_t >Layer class width shared weight and bias layers. ; Like the Layer class only that weight matrices are shared between different instances of the net, which can be used to implement multithreading 'Hogwild' style. ; Definition at line 147 of file Layer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TSharedLayer (const TSharedLayer &layer);  ;  TSharedLayer (size_t fBatchSize, TLayer< Architecture_t > &layer);  ; void Backward (Matrix_t &gradients_backward, const Matrix_t &activations_backward, ERegularization r, Scalar_t weightDecay);  Compute weight, bias and activation gradients. ;  ; void Forward (Matrix_t &input, bool applyDropout=false);  Compute activation of the layer for the given input. ;  ; EActivationFunction GetActivationFunction () const;  ; Matrix_t & GetActivationGradients ();  ; const Matrix_t & GetActivationGradients () const;  ; size_t GetBatchSize () const;  ; Matrix_t & GetBiases ();  ; const Matrix_t & GetBiases () const;  ; Matrix_t & GetBiasGradients ();  ; const Matrix_t & GetBiasGradients () const;  ; size_t GetDropoutProbability () const;  ; size_t GetInputWidth () const;  ; Matrix_t & GetOutput ();  ; const Matrix_t & GetOutput () const;  ; Matrix_t & GetWeightGradients ();  ; const Matrix_t & GetWeightGradients () const;  ; Matrix_t & GetWeights () const;  ; size_t GetWidth () const;  ; void Print () const;  ; void SetDropoutProbability (Scalar_t p);  . Private Attributes;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSharedLayer.html:106,Guid,Guide,106,doc/master/classTMVA_1_1DNN_1_1TSharedLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSharedLayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TTensorBatch< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TTensorBatch< Architecture_t > Class Template Reference. ; template<typename Architecture_t>; class TMVA::DNN::TTensorBatch< Architecture_t >TTensorBatch. ; Class representing training batches consisting of a vector of matrices as input data and a matrix of output data. The input and output data can be accessed using the GetInput() and GetOutput() member functions.; Template Parameters. Architecture_tThe underlying architecture. . Definition at line 59 of file TensorDataLoader.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Tensor_t = typename Architecture_t::Tensor_t;  . Public Member Functions;  TTensorBatch (const TTensorBatch &)=default;  ;  TTensorBatch (Tensor_t &, Matrix_t &, Matrix_t &);  ;  TTensorBatch (TTensorBatch &&)=default;  ; Tensor_t & GetInput ();  Return the tensor representing the input data. ;  ; Matrix_t & GetOutput ();  Return the matrix representing the output data. ;  ; Matrix_t & GetWeights ();  Return the matrix holding the event weights. ;  ; TTensorBatch & operator= (const TTensorBatch &)=default;  ; TTensorBatch & operator= (TTensorBatch &&)=default;  . Private Attributes; Tensor_t fInputTensor;  The input tensor batch, one matrix one input. ;  ; Matrix_t fOutputMatrix;  The output matrix representing the ground truth. ;  ; Matrix_t fWeightMatrix;  The event/example weights. ;  . #include <TMVA/DNN/TensorDataLoader.h>; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TTensorBatch< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 61 of file TensorDataLoader.h. ◆ Tensor_t. template<typename Architecture_t > . using TMVA::DNN::TTensorBatch< Architecture_t >::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorBatch.html:106,Guid,Guide,106,doc/master/classTMVA_1_1DNN_1_1TTensorBatch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorBatch.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TTensorBatchIterator< Data_t, Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::DNN::TTensorBatchIterator< Data_t, Architecture_t > Class Template Reference. ; template<typename Data_t, typename Architecture_t>; class TMVA::DNN::TTensorBatchIterator< Data_t, Architecture_t >TTensorBatchIterator. ; Simple iterator class for the iterations over the training batches in a given data set represented by a TTensorDataLoader object.; Template Parameters. Data_tThe input data type. ; Architecture_tThe underlying architecture type. . Definition at line 96 of file TensorDataLoader.h. Public Member Functions;  TTensorBatchIterator (TTensorDataLoader< Data_t, Architecture_t > &tensorDataLoader, size_t index=0);  ; bool operator!= (const TTensorBatchIterator &other);  ; TTensorBatch< Architecture_t > operator* ();  ; TTensorBatchIterator operator++ ();  . Private Attributes; size_t fBatchIndex;  ; TTensorDataLoader< Data_t, Architecture_t > & fTensorDataLoader;  . #include <TMVA/DNN/TensorDataLoader.h>; Constructor & Destructor Documentation. ◆ TTensorBatchIterator(). template<typename Data_t , typename Architecture_t > . TMVA::DNN::TTensorBatchIterator< Data_t, Architecture_t >::TTensorBatchIterator ; (; TTensorDataLoader< Data_t, Architecture_t > & ; tensorDataLoader, . size_t ; index = 0 . ). inline . Definition at line 102 of file TensorDataLoader.h. Member Function Documentation. ◆ operator!=(). template<typename Data_t , typename Architecture_t > . bool TMVA::DNN::TTensorBatchIterator< Data_t, Architecture_t >::operator!= ; (; const TTensorBatchIterator< Data_t, Architecture_t > & ; other). inline . Definition at line 114 of file TensorDataLoader.h. ◆ operator*(). template<typename Data_t , typename Architecture_t > . TTensorBatch< Architecture_t > TMVA::DNN::TTensorBatchIterator< Data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorBatchIterator.html:122,Guid,Guide,122,doc/master/classTMVA_1_1DNN_1_1TTensorBatchIterator.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorBatchIterator.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > > Class Template Reference. ; template<typename AData, typename AReal>; class TMVA::DNN::TTensorDataLoader< AData, TReference< AReal > >; Definition at line 47 of file TensorDataLoader.h. Public Member Functions;  TTensorDataLoader (const AData &data, size_t nSamples, size_t batchDepth, size_t batchHeight, size_t batchWidth, size_t nOutputFeatures, std::vector< size_t > inputShape, size_t nStreams=1);  Constructor. ;  ;  TTensorDataLoader (const TTensorDataLoader &)=default;  ;  TTensorDataLoader (TTensorDataLoader &&)=default;  ; BatchIterator_t begin ();  ; void CopyTensorInput (std::vector< TMatrixT< AReal > > &tensor, IndexIterator_t sampleIterator);  Copy input tensor into the given host buffer. ;  ; void CopyTensorOutput (TMatrixT< AReal > &matrix, IndexIterator_t sampleIterator);  Copy output matrix into the given host buffer. ;  ; void CopyTensorWeights (TMatrixT< AReal > &matrix, IndexIterator_t sampleIterator);  Copy weight matrix into the given host buffer. ;  ; BatchIterator_t end ();  ; TTensorBatch< TReference< AReal > > GetTensorBatch ();  Return the next batch from the training set. ;  ; TTensorDataLoader & operator= (const TTensorDataLoader &)=default;  ; TTensorDataLoader & operator= (TTensorDataLoader &&)=default;  ; template<typename RNG > ; void Shuffle (RNG &rng);  Shuffle the order of the samples in the batch. ;  . Private Types; using BatchIterator_t = TTensorBatchIterator< AData, TReference< AReal > >;  . Private Attributes; size_t fBatchDepth;  The number of matrices in the tensor. ;  ; size_t fBatchHeight;  The number od rows in each matrix. ;  ; size_t fBatchIndex;  The index of the batch when there are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html:123,Guid,Guide,123,doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t > Class Template Reference. ; template<typename Data_t, typename Architecture_t>; class TMVA::DNN::TTensorDataLoader< Data_t, Architecture_t >TTensorDataLoader. ; Service class managing the streaming of the training data from the input data type to the accelerator device or the CPU. A TTensorDataLoader object manages a number of host and device buffer pairs that are used in a round-robin manner for the transfer of batches to the device.; Each TTensorDataLoader object has an associated batch size and a number of total samples in the dataset. One epoch is the number of buffers required to transfer the complete training set. Using the begin() and end() member functions allows the user to iterate over the batches in one epoch.; Template Parameters. Data_tThe input data type. ; Architecture_tThe architecture class of the underlying architecture. . Definition at line 133 of file TensorDataLoader.h. Public Member Functions;  TTensorDataLoader (const Data_t &data, size_t nSamples, size_t batchSize, const Shape_t &inputLayout, const Shape_t &batchLayout, size_t nOutputFeatures, size_t nStreams=1);  Constructor. ;  ;  TTensorDataLoader (const TTensorDataLoader &)=default;  ;  TTensorDataLoader (TTensorDataLoader &&)=default;  ; BatchIterator_t begin ();  ; void CopyTensorInput (HostBuffer_t &buffer, IndexIterator_t begin);  Copy input tensor into the given host buffer. ;  ; void CopyTensorInput (std::vector< TMatrixT< Double_t > > &tensor, IndexIterator_t sampleIterator);  ; void CopyTensorInput (std::vector< TMatrixT< Double_t > > &tensor, IndexIterator_t sampleIterator);  ; void CopyTensorInput (std::vector< TMatrixT< Real_t > > &tensor, IndexIter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html:119,Guid,Guide,119,doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TTensorDataLoader.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::TWorkspace Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::DNN::TWorkspace Struct Reference. . Definition at line 32 of file ContextHandles.h. Public Member Functions; virtual ~TWorkspace ();  . #include <TMVA/DNN/CNN/ContextHandles.h>. Inheritance diagram for TMVA::DNN::TWorkspace:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TWorkspace(). virtual TMVA::DNN::TWorkspace::~TWorkspace ; (; ). inlinevirtual . Definition at line 33 of file ContextHandles.h. The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DNN/CNN/ContextHandles.h. TMVADNNTWorkspace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TWorkspace.html:78,Guid,Guide,78,doc/master/structTMVA_1_1DNN_1_1TWorkspace.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DNN_1_1TWorkspace.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::DNN::VGeneralLayer< Architecture_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Private Types |; List of all members ; TMVA::DNN::VGeneralLayer< Architecture_t > Class Template Referenceabstract. ; template<typename Architecture_t>; class TMVA::DNN::VGeneralLayer< Architecture_t >Generic General Layer class. ; This class represents the general class for all layers in the Deep Learning Module. ; Definition at line 51 of file GeneralLayer.h. Public Member Functions;  VGeneralLayer (const VGeneralLayer &);  Copy Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, size_t WeightsNRows, size_t WeightsNCols, size_t BiasesNSlices, size_t BiasesNRows, size_t BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  Constructor. ;  ;  VGeneralLayer (size_t BatchSize, size_t InputDepth, size_t InputHeight, size_t InputWidth, size_t Depth, size_t Height, size_t Width, size_t WeightsNSlices, std::vector< size_t > WeightsNRows, std::vector< size_t > WeightsNCols, size_t BiasesNSlices, std::vector< size_t > BiasesNRows, std::vector< size_t > BiasesNCols, size_t OutputNSlices, size_t OutputNRows, size_t OutputNCols, EInitialization Init);  General Constructor with different weights dimension. ;  ;  VGeneralLayer (VGeneralLayer< Architecture_t > *layer);  Copy the layer provided as a pointer. ;  ; virtual ~VGeneralLayer ();  Virtual Destructor. ;  ; virtual void AddWeightsXMLTo (void *parent)=0;  Writes the information and the weights about the layer in an XML node. ;  ; virtual void Backward (Tensor_t &gradients_backward, const Tensor_t &activations_backward)=0;  Backpropagates the error. ;  ; void CopyBiases (const std::vector< Matrix_t > &otherBiases);  Copies the biase",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:107,Guid,Guide,107,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,2,"['Guid', 'Learn']","['Guide', 'Learning']"
Usability,". ROOT: TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t > Class Template Referenceabstract. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >Generic Optimizer class. ; This class represents the general class for all optimizers in the Deep Learning Module. ; Definition at line 45 of file Optimizer.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected Member Functions; virtual void UpdateBiases (size_t layerIndex, std::vector< Matrix_t > &biases, const std::vector< Matrix_t > &biasGradients)=0;  Update the biases, given the current bias gradients. ;  ; virtual void UpdateWeights (size_t layerIndex, std::vector< Matrix_t > &weights, const std::vector< Matrix_t > &weightGradients)=0;  Update the weights, given the current weight gradients. ;  . Protected Attributes; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learni",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:124,Guid,Guide,124,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,3,"['Guid', 'Learn', 'learn']","['Guide', 'Learning', 'learningRate']"
Usability,". ROOT: TMVA::DTNodeTrainingInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::DTNodeTrainingInfo Class Reference. . Definition at line 51 of file DecisionTreeNode.h. Public Member Functions;  DTNodeTrainingInfo ();  ;  DTNodeTrainingInfo (const DTNodeTrainingInfo &n);  . Public Attributes; Double_t fAlpha;  critical alpha for this node ;  ; Double_t fCC;  debug variable for cost complexity pruning .. ;  ; Double_t fG;  minimum alpha in subtree rooted at this node ;  ; Double_t fNB;  sum of weights of background events from the pruning sample in this node ;  ; Float_t fNBkgEvents;  sum of weights of backgr event in the node ;  ; Float_t fNBkgEvents_unboosted;  sum of backgr event in the node ;  ; Float_t fNBkgEvents_unweighted;  sum of backgr event in the node ;  ; Float_t fNEvents;  number of events in that entered the node (during training) ;  ; Float_t fNEvents_unboosted;  number of events in that entered the node (during training) ;  ; Float_t fNEvents_unweighted;  number of events in that entered the node (during training) ;  ; Double_t fNodeR;  node resubstitution estimate, R(t) ;  ; Double_t fNS;  ditto for the signal events ;  ; Float_t fNSigEvents;  sum of weights of signal event in the node ;  ; Float_t fNSigEvents_unboosted;  sum of signal event in the node ;  ; Float_t fNSigEvents_unweighted;  sum of signal event in the node ;  ; Int_t fNTerminal;  number of terminal nodes in subtree rooted at this node ;  ; std::vector< Float_t > fSampleMax;  the maxima for each ivar of the sample on the node during training ;  ; std::vector< Float_t > fSampleMin;  the minima for each ivar of the sample on the node during training ;  ; Float_t fSeparationGain;  measure of ""purity"", separation, or information gained BY this nodes selection ;  ; Float_t fSeparationIndex;  measure of ""purity"" (separation between S and B) AT t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html:80,Guid,Guide,80,doc/master/classTMVA_1_1DTNodeTrainingInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DTNodeTrainingInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DataInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::DataInputHandler Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 78 of file DataInputHandler.h. Public Member Functions;  DataInputHandler ();  constructor ;  ;  ~DataInputHandler ();  destructor ;  ; void AddBackgroundTree (const TString &tr, Double_t weight=1.0, Types::ETreeType tt=Types::kMaxTreeType);  add a background tree to the dataset to be used as input ;  ; void AddBackgroundTree (TTree *tr, Double_t weight=1.0, Types::ETreeType tt=Types::kMaxTreeType);  add a background tree to the dataset to be used as input ;  ; void AddInputTrees (TTree *inputTree, const TCut &SigCut, const TCut &BgCut);  define the input trees for signal and background from single input tree, containing both signal and background events distinguished by the type identifiers: SigCut and BgCut ;  ; void AddSignalTree (const TString &tr, Double_t weight=1.0, Types::ETreeType tt=Types::kMaxTreeType);  add a signal tree to the dataset to be used as input ;  ; void AddSignalTree (TTree *tr, Double_t weight=1.0, Types::ETreeType tt=Types::kMaxTreeType);  add a signal tree to the dataset to be used as input ;  ; void AddTree (const TString &tr, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType);  add a className tree to the dataset to be used as input ;  ; void AddTree (TTree *tree, const TString &className, Double_t weight=1.0, const TCut &cut="""", Types::ETreeType tt=Types::kMaxTreeType);  add tree of className events for tt (Training;Testing..) type as input .. ;  ; const TreeInfo & BackgroundTreeInfo (Int_t i) const;  ; std::vector< TreeInfo >::const_iterator Bbegin () const;  ; std::vector< TreeInfo >::cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html:78,Guid,Guide,78,doc/master/classTMVA_1_1DataInputHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DataLoader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DataLoader Class ReferenceTMVA. . Definition at line 50 of file DataLoader.h. Public Member Functions;  DataLoader (TString thedlName=""default"");  ; virtual ~DataLoader ();  ; void AddBackgroundTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddBackgroundTrainingEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal training event ;  ; void AddBackgroundTree (TString datFileB, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  add background tree from text file ;  ; void AddBackgroundTree (TTree *background, Double_t weight, const TString &treetype);  ; void AddBackgroundTree (TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  number of signal events (used to compute significance) ;  ; void AddCut (const TCut &cut, const TString &className="""");  ; void AddCut (const TString &cut, const TString &className="""");  ; DataSetInfo & AddDataSet (const TString &);  ; DataSetInfo & AddDataSet (DataSetInfo &);  ; void AddEvent (const TString &className, Types::ETreeType tt, const std::vector< Double_t > &event, Double_t weight);  add event vector event : the order of values is: variables + targets + spectators ;  ; void AddRegressionTarget (const TString &expression, const TString &title="""", const TString &unit="""", Double_t min=0, Double_t max=0);  ; void AddRegressionTree (TTree *tree, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType);  ; void AddSignalTestEvent (const std::vector< Double_t > &event, Double_t weight=1.0);  add signal testing event ;  ; void AddSignalTrainingEvent (const std::vector< Double_t > &ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:72,Guid,Guide,72,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::DataSet Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 58 of file DataSet.h. Public Member Functions;  DataSet ();  constructor ;  ;  DataSet (const DataSetInfo &);  constructor ;  ; virtual ~DataSet ();  destructor ;  ; void AddEvent (Event *, Types::ETreeType);  add event to event list after which the event is owned by the dataset ;  ; void ClearNClassEvents (Int_t type);  ; void CreateSampling () const;  create an event sampling (random or importance sampling) ;  ; void DeleteAllResults (Types::ETreeType type, Types::EAnalysisType analysistype);  Deletes all results currently in the dataset. ;  ; void DeleteResults (const TString &, Types::ETreeType type, Types::EAnalysisType analysistype);  delete the results stored for this particular Method instance. ;  ; void DivideTrainingSet (UInt_t blockNum);  divide training set ;  ; void EventResult (Bool_t successful, Long64_t evtNumber=-1);  increase the importance sampling weight of the event when not successful and decrease it when successful ;  ; Types::ETreeType GetCurrentType () const;  ; const Event * GetEvent () const;  returns event without transformations ;  ; const Event * GetEvent (Long64_t ievt) const;  ; const Event * GetEvent (Long64_t ievt, Types::ETreeType type) const;  ; const std::vector< Event * > & GetEventCollection (Types::ETreeType type=Types::kMaxTreeType) const;  ; const TTree * GetEventCollectionAsTree ();  ; Long64_t GetNClassEvents (Int_t type, UInt_t classNumber);  ; Long64_t GetNEvents (Types::ETreeType type=Types::kMaxTreeType) const;  ; Long64_t GetNEvtBkgdTest ();  return number of background test events in dataset ;  ; Long64_t GetNEvtBkgdTrain ();  return number of b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:69,Guid,Guide,69,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,2,"['Clear', 'Guid']","['ClearNClassEvents', 'Guide']"
Usability,". ROOT: TMVA::DataSetFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; List of all members ; TMVA::DataSetFactory Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 116 of file DataSetFactory.h. Classes; class  EventStats;  . Public Member Functions;  DataSetFactory ();  constructor ;  ;  ~DataSetFactory ();  destructor ;  ; DataSet * CreateDataSet (DataSetInfo &, DataInputHandler &);  steering the creation of a new dataset ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html:76,Guid,Guide,76,doc/master/classTMVA_1_1DataSetFactory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DataSetInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DataSetInfo Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 62 of file DataSetInfo.h. Public Types; enum  { kIsArrayVariable = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  DataSetInfo (const TString &name=""Default"");  constructor ;  ; virtual ~DataSetInfo ();  destructor ;  ; ClassInfo * AddClass (const TString &className);  ; void AddCut (const TCut &cut, const TString &className);  set the cut for the classes ;  ; VariableInfo & AddSpectator (const TString &expression, const TString &title, const TString &unit, Double_t min, Double_t max, char type='F', Bool_t normalized=kTRUE, void *external=nullptr);  add a spectator (can be a complex expression) to the set of spectator variables used in the MV analysis ;  ; VariableInfo & AddSpectator (const VariableInfo &varInfo);  add spectator with given VariableInfo ;  ; VariableInfo & AddTarget (const TString &expression, const TString &title, const TString &unit, Double_t min, Double_t max, Bool_t normalized=kTRUE, void *external=nullptr);  add",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html:73,Guid,Guide,73,doc/master/classTMVA_1_1DataSetInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DataSetManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::DataSetManager Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 51 of file DataSetManager.h. Public Member Functions;  DataSetManager ();  constructor ;  ;  DataSetManager (DataInputHandler &dataInput);  constructor ;  ;  ~DataSetManager ();  destructor fDataSetInfoCollection.SetOwner(); // DSMTEST --> created a segfault because the DataSetInfo-objects got deleted twice ;  ; DataSetInfo & AddDataSetInfo (DataSetInfo &dsi);  stores a copy of the dataset info object ;  ; DataSet * CreateDataSet (const TString &dsiName);  Creates the singleton dataset. ;  ; DataSetInfo * GetDataSetInfo (const TString &dsiName);  returns datasetinfo object for given name ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html:76,Guid,Guide,76,doc/master/classTMVA_1_1DataSetManager.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DecisionTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::DecisionTree Class ReferenceTMVA. ; Implementation of a Decision Tree. ; In a decision tree successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are then called ""signal"" or ""background"" if they contain more signal respective background events from the training sample. ; Definition at line 65 of file DecisionTree.h. Public Types; enum  EPruneMethod { kExpectedErrorPruning =0; , kCostComplexityPruning; , kNoPruning; };  ; typedef std::vector< const TMVA::Event * > EventConstList;  ; typedef std::ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:74,Guid,Guide,74,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::DecisionTreeNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMVA::DecisionTreeNode Class Reference. . Definition at line 117 of file DecisionTreeNode.h. Public Member Functions;  DecisionTreeNode ();  constructor of an essentially ""empty"" node floating in space ;  ;  DecisionTreeNode (const DecisionTreeNode &n, DecisionTreeNode *parent=nullptr);  copy constructor of a node. ;  ;  DecisionTreeNode (Node *p, char pos);  constructor of a daughter node as a daughter of 'p' ;  ; virtual ~DecisionTreeNode ();  destructor ;  ; virtual void AddAttributesToNode (void *node) const;  add attribute to xml ;  ; virtual void AddContentToNode (std::stringstream &s) const;  adding attributes to tree node (well, was used in BinarySearchTree, and somehow I guess someone programmed it such that we need this in this tree too, although we don't..) ;  ; void AddToSumTarget (Float_t t);  add to sum target, if traininfo defined ;  ; void AddToSumTarget2 (Float_t t2);  add to sum target 2, if traininfo defined ;  ; void ClearNodeAndAllDaughters ();  clear the nodes (their S/N, Nevents etc), just keep the structure of the tree ;  ; virtual Node * CreateNode () const;  ; Double_t GetAlpha () const;  return the critical point alpha, or -1 if traininfo undefined ;  ; Double_t GetAlphaMinSubtree () const;  return the minimum alpha in the tree rooted at this node, or -1 if traininfo undefined ;  ; Double_t GetCC () const;  return CC, or -1 if traininfo undefined ;  ; Bool_t GetCutType (void) const;  return kTRUE: Cuts select signal, kFALSE: Cuts select bkg ;  ; Float_t GetCutValue (void) const;  return the cut value applied at this node ;  ; Double_t GetFisherCoeff (Int_t ivar) const;  get fisher coefficients ;  ; virtual DecisionTreeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:78,Guid,Guide,78,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::DeleteFunctor_t< T > Struct Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::DeleteFunctor_t< T > Struct Template Reference. ; template<class T>; struct TMVA::DeleteFunctor_t< T >; Definition at line 69 of file DataSetFactory.h. Public Member Functions; DeleteFunctor_t & operator() (const T *p);  . #include <TMVA/DataSetFactory.h>; Member Function Documentation. ◆ operator()(). template<class T > . DeleteFunctor_t & TMVA::DeleteFunctor_t< T >::operator() ; (; const T * ; p). inline . Definition at line 71 of file DataSetFactory.h. The documentation for this struct was generated from the following file:; tmva/tmva/inc/TMVA/DataSetFactory.h. TMVADeleteFunctor_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1DeleteFunctor__t.html:92,Guid,Guide,92,doc/master/structTMVA_1_1DeleteFunctor__t.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1DeleteFunctor__t.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::Envelope Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Envelope Class ReferenceabstractTMVA. ; Abstract base class for all high level ml algorithms, you can book ml methods like BDT, MLP. ; SVM etc.. and set a TMVA::DataLoader object to run your code in the overloaded method Evaluate.; Base class for all machine learning algorithms ; Definition at line 43 of file Envelope.h. Public Member Functions;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void Evaluate ()=0;  Virtual method to be implemented with your algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; virtual TClass * IsA () const;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the po",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Envelope.html:70,Guid,Guide,70,doc/master/classTMVA_1_1Envelope.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html,4,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: TMVA::Event Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMVA::Event Class ReferenceTMVA. . Definition at line 51 of file Event.h. Public Member Functions;  Event ();  copy constructor ;  ;  Event (const Event &);  copy constructor ;  ;  Event (const std::vector< Float_t * > *&, UInt_t nvar);  constructor for single events ;  ;  Event (const std::vector< Float_t > &, UInt_t theClass, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, const std::vector< Float_t > &spectatorValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  Event (const std::vector< Float_t > &values, const std::vector< Float_t > &targetValues, UInt_t theClass=0, Double_t weight=1.0, Double_t boostweight=1.0);  constructor ;  ;  ~Event ();  Event destructor. ;  ; void CopyVarValues (const Event &other);  copies only the variable values ;  ; Double_t GetBoostWeight () const;  ; UInt_t GetClass () const;  ; UInt_t GetNSpectators () const;  accessor to the number of spectators ;  ; UInt_t GetNTargets () const;  accessor to the number of targets ;  ; UInt_t GetNVariables () const;  accessor to the number of variables ;  ; Double_t GetOriginalWeight () const;  ; Float_t GetSpectator (UInt_t ivar) const;  return spectator content ;  ; std::vector< Float_t > & GetSpectators ();  ; const std::vector< Float_t > & GetSpectators () const;  ; Float_t GetTarget (UInt_t itgt) const;  ; std::vector< Float_t > & GetTargets ();  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetValue (UInt_t ivar) const;  return value of i'th variable ;  ; Float_t GetValueFast (UInt_t ivar) const;  ; std::vector< Float_t > & GetValues ();  ; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Event.html:67,Guid,Guide,67,doc/master/classTMVA_1_1Event.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Event.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Executor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; Private Types |; List of all members ; TMVA::Executor Class Reference. ; Base Executor class. ; Definition at line 36 of file Executor.h. Public Types; template<class F , class... T> ; using noReferenceCond = typename std::enable_if_t<""Function can't return a reference"" &&!(std::is_reference< InvokeResult_t< F, T... > >::value)>;  . Public Member Functions;  Executor ();  Default constructor of TMVA Executor class if ROOT::EnableImplicitMT has not been called then by default a serial executor will be created A user can create a thread pool and enable multi-thread excution by calling. ;  ;  Executor (int nthreads);  Constructor of TMVA Executor class Explicit specify the number of threads. ;  ; template<class Function , class INTEGER > ; void Foreach (Function func, ROOT::TSeq< INTEGER > args, unsigned nChunks=0);  ; template<class Function , class T > ; void Foreach (Function func, std::vector< T > &args, unsigned nChunks=0);  ; template<class Function > ; void Foreach (Function func, unsigned int nTimes, unsigned nChunks=0);  wrap TExecutor::Foreach ;  ; ROOT::TThreadExecutor * GetMultiThreadExecutor ();  ; unsigned int GetPoolSize () const;  ; template<class F , class INTEGER , class Cond = noReferenceCond<F, INTEGER>> ; auto Map (F func, ROOT::TSeq< INTEGER > args) -> std::vector< InvokeResult_t< F, INTEGER > >;  ; template<class F , class Cond = noReferenceCond<F>> ; auto Map (F func, unsigned nTimes) -> std::vector< InvokeResult_t< F > >;  Wrap TExecutor::Map functions. ;  ; template<class F , class INTEGER , class R , class Cond = noReferenceCond<F, INTEGER>> ; auto MapReduce (F func, ROOT::TSeq< INTEGER > args, R redfunc) -> InvokeResult_t< F, INTEGER >;  Wrap TExecutor::MapReduce functions. ;  ; template<class F , class INTEGER , class R , class Cond = no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Executor.html:70,Guid,Guide,70,doc/master/classTMVA_1_1Executor.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Executor.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ExpectedErrorPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ExpectedErrorPruneTool Class ReferenceTMVA. ; A helper class to prune a decision tree using the expected error (C4.5) method. ; Uses an upper limit on the error made by the classification done by each node. If the \( \frac{S}{S+B} \) of the node is \( f \), then according to the training sample, the error rate (fraction of misclassified events by this node) is \( (1-f) \). Now \( f \) has a statistical error according to the binomial distribution hence the error on \( f \) can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:84,Guid,Guide,84,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Experimental Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Enumerations |; Functions ; TMVA::Experimental Namespace Reference. Namespaces; namespace  Internal;  ; namespace  SOFIE;  . Classes; class  Classification;  ; class  ClassificationResult;  ; class  RBDT;  ; class  RReader;  A replacement for the TMVA::Reader legacy interface. More...;  ; class  RSofieReader;  TMVA::RSofieReader class for reading external Machine Learning models in ONNX files, Keras .h5 files or PyTorch .pt files and performing the inference using SOFIE It is reccomended to use ONNX if possible since there is a larger support for model operators. More...;  ; class  RStandardScaler;  ; class  RTensor;  RTensor is a container with contiguous memory and shape information. More...;  ; class  SofieFunctorHelper;  Helper class used by SOFIEFunctor to wrap the infer signature interface to RDataFrame. More...;  ; class  SofieFunctorHelper< std::index_sequence< N... >, Session_t, T >;  . Enumerations; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type (copy from RTensor.hxx) More...;  ; enum class  MemoryLayout : uint8_t { RowMajor = 0x01; , ColumnMajor = 0x02; , RowMajor = 0x01; , ColumnMajor = 0x02; };  Memory layout type. More...;  . Functions; template<typename T , typename U > ; RTensor< T > AsTensor (U &dataframe, std::vector< std::string > columns={}, MemoryLayout layout=MemoryLayout::RowMajor);  Convert the content of an RDataFrame to an RTensor. ;  ; template<std::size_t N, typename T , typename F > ; auto Compute (F &&f) -> Internal::ComputeHelper< std::make_index_sequence< N >, T, F >;  Helper to pass TMVA model to RDataFrame.Define nodes. ;  ; template<typename T > ; std::ostream & operator<< (std::ostream &os, RTensor< T > &x);  Pretty printing. ;  ; template<std::size_t N, typename Session_t > ; auto SofieF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html:78,Guid,Guide,78,doc/master/namespaceTMVA_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Experimental.html,2,"['Guid', 'Learn']","['Guide', 'Learning']"
Usability,". ROOT: TMVA::Experimental::Classification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Experimental::Classification Class Reference. . Definition at line 162 of file Classification.h. Public Member Functions;  Classification (DataLoader *loader, TFile *file, TString options);  Contructor to create a two class classifier. ;  ;  Classification (DataLoader *loader, TString options);  Contructor to create a two class classifier without output file. ;  ;  ~Classification ();  ; virtual void Evaluate ();  Method to perform Train/Test over all ml method booked. ;  ; MethodBase * GetMethod (TString methodname, TString methodtitle);  Return a TMVA::MethodBase object. ;  ; std::vector< ClassificationResult > & GetResults ();  Return the vector of TMVA::Experimental::ClassificationResult objects. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Test ();  Perform test evaluation in all booked methods. ;  ; virtual void TestMethod (TString methodname, TString methodtitle);  Lets perform test an specific ml method. ;  ; virtual void TestMethod (Types::EMVA method, TString methodtitle);  Lets perform test an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ; virtual void Train ();  Method to train all booked ml methods. ;  ; virtual void TrainMethod (TString methodname, TString methodtitle);  Lets train an specific ml method. ;  ; virtual void TrainMethod (Types::EMVA method, TString methodtitle);  Lets train an specific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:90,Guid,Guide,90,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Experimental::ClassificationResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Experimental::ClassificationResult Class Reference. . Definition at line 128 of file Classification.h. Public Member Functions;  ClassificationResult ();  ;  ClassificationResult (const ClassificationResult &cr);  ;  ~ClassificationResult ();  ; TString GetDataLoaderName ();  ; const TString GetMethodName () const;  ; const TString GetMethodTitle () const;  ; ROCCurve * GetROC (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TMVA::ROCCurve Object. ;  ; TGraph * GetROCGraph (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get TGraph object with the ROC curve. ;  ; Double_t GetROCIntegral (UInt_t iClass=0, TMVA::Types::ETreeType type=TMVA::Types::kTesting);  Method to get ROC-Integral value from mvas. ;  ; virtual TClass * IsA () const;  ; Bool_t IsCutsMethod ();  ; ClassificationResult & operator= (const ClassificationResult &r);  ; void Show ();  Method to print the results in stdout. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html:96,Guid,Guide,96,doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1ClassificationResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Factory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Factory Class ReferenceTMVA. ; This is the main MVA steering class. ; It creates all MVA methods, and guides them through the training, testing and evaluation phases. ; Definition at line 80 of file Factory.h. Public Types; typedef std::vector< IMethod * > MVector;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  Factory (TString theJobName, TFile *theTargetFile, TString theOption="""");  Standard constructor. ;  ;  Factory (TString theJobName, TString theOption="""");  Constructor. ;  ; virtual ~Factory ();  Destructor. ;  ; MethodBase * BookMethod (DataLoader *, TMVA::Types::EMVA, TString, TString, TMVA::Types::EMVA, TString);  ; MethodBase * BookMethod (DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""");  Book a classifier or regression method. ;  ; MethodBase * BookMethod (DataLoader *loader, Types::EMVA theMethod, TString methodTitle, TString theOption="""");  Books MVA method. ;  ; void DeleteAllMethods (void);  Delete methods. ;  ; void EvaluateAllMethods (void);  Iterates over all MVAs that have been ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:69,Guid,Guide,69,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,2,"['Guid', 'guid']","['Guide', 'guides']"
Usability,". ROOT: TMVA::FitterBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::FitterBase Class ReferenceabstractTMVA. ; Base class for TMVA fitters. ; Also defines generalised fitting interface ; Definition at line 51 of file FitterBase.h. Public Member Functions;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; virtual TClass * IsA () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; virtual Double_t Run (std::vector< Double_t > &pars)=0;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &optname, const T &);  ; void CheckForUnusedOptions () const;  checks for unused options in option string ;  ; template<class T > ; TMVA::OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc);  ; template<class T > ; OptionBase * DeclareOptionRef (T &ref, const TString &name, const TString &desc="""");  ; template<cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:72,Guid,Guide,72,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GeneticAlgorithm Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::GeneticAlgorithm Class ReferenceTMVA. ; Base definition for genetic algorithm. ; Definition at line 50 of file GeneticAlgorithm.h. Public Member Functions;  GeneticAlgorithm (IFitterTarget &target, Int_t populationSize, const std::vector< TMVA::Interval * > &ranges, UInt_t seed=0);  Constructor. ;  ; virtual ~GeneticAlgorithm ();  ; virtual Double_t CalculateFitness ();  starts the evaluation of the fitness of all different individuals of the population. ;  ; virtual void Evolution ();  this function is called from ""init"" and controls the evolution of the individuals. ;  ; GeneticPopulation & GetGeneticPopulation ();  ; Bool_t GetMakeCopies ();  ; Double_t GetSpread () const;  ; virtual Bool_t HasConverged (Int_t steps=10, Double_t ratio=0.1);  gives back true if the last ""steps"" steps have lead to an improvement of the ""fitness"" of the ""individuals"" of at least ""improvement"" ;  ; void Init ();  calls evolution, but if it is not the first time. ;  ; virtual TClass * IsA () const;  ; virtual Double_t NewFitness (Double_t oldValue, Double_t newValue);  if the ""fitnessFunction"" is called multiple times for one set of factors (because i.e. ;  ; void SetMakeCopies (Bool_t s);  ; void SetSpread (Double_t s);  ; virtual Double_t SpreadControl (Int_t steps, Int_t ofSteps, Double_t factor);  this function provides the ability to change the stepSize of a mutation according to the success of the last generations. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html:78,Guid,Guide,78,doc/master/classTMVA_1_1GeneticAlgorithm.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticAlgorithm.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GeneticFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::GeneticFitter Class ReferenceTMVA. ; Fitter using a Genetic Algorithm. ; Definition at line 44 of file GeneticFitter.h. Public Member Functions;  GeneticFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~GeneticFitter ();  ; virtual TClass * IsA () const;  ; Double_t NewFitness (Double_t oldF, Double_t newF);  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles, Int_t nsteps, Int_t popSize, Int_t SC_steps, Int_t SC_rate, Double_t SC_factor, Double_t convCrit);  set GA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:75,Guid,Guide,75,doc/master/classTMVA_1_1GeneticFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GeneticGenes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::GeneticGenes Class ReferenceTMVA. ; Cut optimisation interface class for genetic algorithm. ; Definition at line 41 of file GeneticGenes.h. Public Member Functions;  GeneticGenes ();  ;  GeneticGenes (std::vector< Double_t > &f);  Constructor: set the factors of this individual. ;  ; virtual ~GeneticGenes ();  ; std::vector< Double_t > & GetFactors ();  ; Double_t GetFitness () const;  ; virtual TClass * IsA () const;  ; void SetFitness (Double_t fitness);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; std::vector< Double_t > fFactors;  ; Double_t fFitness;  . Friends; Bool_t operator< (const GeneticGenes &, const GeneticGenes &);  . #include <TMVA/GeneticGenes.h>; Constructor & Destructor Documentation. ◆ GeneticGenes() [1/2]. TMVA::GeneticGenes::GeneticGenes ; (; ). inline . Definition at line 45 of file GeneticGenes.h. ◆ GeneticGenes() [2/2]. TMVA::GeneticGenes::GeneticGenes ; (; std::vector< Double_t > & ; f). Constructor: set the factors of this individual. ; Definition at line 44 of file GeneticGenes.cxx. ◆ ~GeneticGenes(). virtual TMVA::GeneticGenes::~GeneticGenes ; (; ). inlinevirtual . Definition at line 47 of file GeneticGenes.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticGenes::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GeneticGenes::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html:74,Guid,Guide,74,doc/master/classTMVA_1_1GeneticGenes.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticGenes.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GeneticPopulation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::GeneticPopulation Class ReferenceTMVA. ; Population definition for genetic algorithm. ; Definition at line 48 of file GeneticPopulation.h. Public Member Functions;  GeneticPopulation (const std::vector< TMVA::Interval * > &ranges, Int_t size, UInt_t seed=0);  Constructor. ;  ; virtual ~GeneticPopulation ();  destructor ;  ; void AddPopulation (GeneticPopulation &strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; void AddPopulation (GeneticPopulation *strangers);  add another population (strangers) to the one of this GeneticPopulation ;  ; Double_t GetFitness () const;  ; std::vector< TMVA::GeneticGenes > & GetGenePool ();  ; const std::vector< TMVA::GeneticGenes > & GetGenePool () const;  ; GeneticGenes * GetGenes (Int_t index);  gives back the ""Genes"" of the population with the given index. ;  ; Int_t GetPopulationSize () const;  ; std::vector< TMVA::GeneticRange * > & GetRanges ();  ; const std::vector< TMVA::GeneticRange * > & GetRanges () const;  ; void GiveHint (std::vector< Double_t > &hint, Double_t fitness=0);  add an individual (a set of variables) to the population if there is a set of variables which is known to perform good, they can be given as a hint to the population ;  ; virtual TClass * IsA () const;  ; void MakeChildren ();  Creates children out of members of the current generation. ;  ; void MakeCopies (int number);  Produces offspring which is are copies of their parents. ;  ; void Mutate (Double_t probability=20, Int_t startIndex=0, Bool_t near=kFALSE, Double_t spread=0.1, Bool_t mirror=kFALSE);  Mutates the individuals in the genePool. ;  ; void NextGeneration ();  ; void Print (Int_t untilIndex=-1);  make a little print",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html:79,Guid,Guide,79,doc/master/classTMVA_1_1GeneticPopulation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticPopulation.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GeneticRange Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::GeneticRange Class ReferenceTMVA. ; Range definition for genetic algorithm. ; Definition at line 42 of file GeneticRange.h. Public Member Functions;  GeneticRange (TRandom3 *rnd, Interval *interval);  defines the ""f"" (from) and ""t"" (to) of the coefficient and takes a randomgenerator ;  ; virtual ~GeneticRange ();  destructor ;  ; Double_t GetFrom ();  ; Double_t GetTo ();  ; Double_t GetTotalLength ();  ; virtual TClass * IsA () const;  ; Double_t Random (Bool_t near=kFALSE, Double_t value=0, Double_t spread=0.1, Bool_t mirror=kFALSE);  creates a new random value for the coefficient Parameters: ;  ; Double_t RandomDiscrete ();  creates a new random value for the coefficient; returns a discrete value ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Double_t ReMap (Double_t val);  remapping the value to the allowed space ;  ; Double_t ReMapMirror (Double_t val);  remapping the value to the allowed space by reflecting on the boundaries ;  . Private Attributes; Double_t fFrom;  ; Interval * fInterval;  holds the complete information of the interval ;  ; Int_t fNbins;  ; TRandom3 * fRandomGenerator;  the randomGenerator for calculating the new values ;  ; Double_t fTo;  the constraints of the coefficient ;  ; Double_t fTotalLength;  the distance between the lower and upper constraints ;  . #include <TMVA/GeneticRange.h>; Constructor & Destructor Documentation. ◆ GeneticRange(). TMVA::GeneticRange::GeneticRange ; (; TRandom3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticRange.html:74,Guid,Guide,74,doc/master/classTMVA_1_1GeneticRange.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticRange.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GiniIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::GiniIndex Class ReferenceTMVA. ; Implementation of the GiniIndex as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. Definition at line 63 of file GiniIndex.h. Public Member Functions;  GiniIndex ();  ;  GiniIndex (const GiniIndex &g);  ; virtual ~GiniIndex ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  what we use here is 2*Gini. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Publi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html:71,Guid,Guide,71,doc/master/classTMVA_1_1GiniIndex.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndex.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::GiniIndexWithLaplace Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::GiniIndexWithLaplace Class ReferenceTMVA. ; Implementation of the GiniIndex With Laplace correction as separation criterion. ; Large Gini Indices (maximum 0.5) mean , that the sample is well mixed (same amount of signal and bkg) bkg.; Small Indices mean, well separated.; General definition:. \[; Gini(Sample M) = 1 - (\frac{c(1)}{N})^2 - (\frac{c(2)}{N})^2 .... - (\frac{c(k)}{N})^2; \]. Where:; \( M \) is a sample of whatever \( N \) elements (events) that belong to \( K \) different classes.; \( c(k) \) is the number of elements that belong to class \( k \) for just Signal and Background classes this boils down to:; The Laplace's correction to the probability distribution would turn the \( \frac{c(1)}{N} \) into \( \frac{(c(1)+1)}{(N+2)} \) using this the simple Gini Index for two classes. \[; Gini(Sample) = \frac{2sb}{(s+b)^2}; \]. turns into. \[; GiniLaplace(Sample) = \frac{2(sb+s+b+1)}{(s+b+2)^2}; \]. Definition at line 59 of file GiniIndexWithLaplace.h. Public Member Functions;  GiniIndexWithLaplace ();  ;  GiniIndexWithLaplace (const GiniIndexWithLaplace &g);  ; virtual ~GiniIndexWithLaplace ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:82,Guid,Guide,82,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::HuberLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::HuberLossFunction Class ReferenceTMVA. ; Huber Loss Function. ; Definition at line 144 of file LossFunction.h. Public Member Functions;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sumOfWeights, bool abs);  huber, determine the quantile for a given input ;  ; Double_t CalculateSumOfWeights (const std::vector< LossFunctionEventInfo > &evs);  huber, calculate the sum of weights for the events in the vector ;  ; Int_t Id ();  ; void Init (std::vector< LossFunctionEventInfo > &evs);  figure out the residual that determines the separation between the ""core"" and the ""tails"" of the residuals distribution ;  ; TString Name ();  ; void SetSumOfWeights (std::vector< LossFunctionEventInfo > &evs);  huber, set the sum of weights given a collection of events ;  ; void SetTransitionPoint (std::vector< LossFunctionEventInfo > &evs);  huber, determine the transition point using the values for fQuantile and fSumOfWeights which presumably have already been set ;  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . Protected Attributes; Double_t fQuantile;  ; Double_t fSumOfWeights;  ; Double_t fTransitionPoint;  . #include <TMVA/LossFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HuberLossFunction.html:79,Guid,Guide,79,doc/master/classTMVA_1_1HuberLossFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::HuberLossFunctionBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::HuberLossFunctionBDT Class ReferenceTMVA. ; Huber BDT Loss Function. ; Definition at line 179 of file LossFunction.h. Public Member Functions;  HuberLossFunctionBDT ();  ;  HuberLossFunctionBDT (Double_t quantile);  ;  ~HuberLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  huber BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  huber BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  huber BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::HuberLossFunction;  HuberLossFunction ();  huber constructor ;  ;  HuberLossFunction (Double_t quantile);  ;  ~HuberLossFunction ();  huber destructor ;  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  huber, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  huber, determine the net loss for a collection of events ;  ; Double_t CalculateQuantile (std::vector< LossFunctionEventInfo > &evs, Double_t whichQuantile, Double_t sum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html:82,Guid,Guide,82,doc/master/classTMVA_1_1HuberLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HuberLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::HyperParameterOptimisation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::HyperParameterOptimisation Class ReferenceTMVA. . Definition at line 73 of file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisation (DataLoader *dataloader);  ;  ~HyperParameterOptimisation ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; TString GetFiiter ();  ; TString GetFOMType ();  ; UInt_t GetNumFolds ();  ; const HyperParameterOptimisationResult & GetResults () const;  ; virtual TClass * IsA () const;  ; void SetFitter (TString fitType);  ; void SetFOMType (TString ftype);  ; void SetNumFolds (UInt_t folds);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html:88,Guid,Guide,88,doc/master/classTMVA_1_1HyperParameterOptimisation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisation.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::HyperParameterOptimisationResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::HyperParameterOptimisationResult Class ReferenceTMVA. . Definition at line 30 of file HyperParameterOptimisation.h. Public Member Functions;  HyperParameterOptimisationResult ();  ;  ~HyperParameterOptimisationResult ();  ; std::vector< Double_t > GetEff01Values ();  ; std::vector< Double_t > GetEff10Values ();  ; std::vector< Double_t > GetEff30Values ();  ; std::vector< Double_t > GetEffAreaValues ();  ; Float_t GetROCAverage ();  ; TMultiGraph * GetROCCurves (Bool_t fLegend=kTRUE);  ; std::vector< Float_t > GetROCValues ();  ; std::vector< Double_t > GetSepValues ();  ; std::vector< Double_t > GetSigValues ();  ; std::vector< Double_t > GetTrainEff01Values ();  ; std::vector< Double_t > GetTrainEff10Values ();  ; std::vector< Double_t > GetTrainEff30Values ();  ; void Print () const;  . Public Attributes; std::vector< std::map< TString, Double_t > > fFoldParameters;  . Private Attributes; std::vector< Double_t > fEff01s;  ; std::vector< Double_t > fEff10s;  ; std::vector< Double_t > fEff30s;  ; std::vector< Double_t > fEffAreas;  ; TString fMethodName;  ; Float_t fROCAVG;  ; std::shared_ptr< TMultiGraph > fROCCurves;  ; std::vector< Float_t > fROCs;  ; std::vector< Double_t > fSeps;  ; std::vector< Double_t > fSigs;  ; std::vector< Double_t > fTrainEff01s;  ; std::vector< Double_t > fTrainEff10s;  ; std::vector< Double_t > fTrainEff30s;  . Friends; class HyperParameterOptimisation;  . #include <TMVA/HyperParameterOptimisation.h>; Constructor & Destructor Documentation. ◆ HyperParameterOptimisationResult(). TMVA::HyperParameterOptimisationResult::HyperParameterOptimisationResult ; (; ). Definition at line 31 of file HyperParameterOptimisation.cxx. ◆ ~HyperParameterOptimisationResult(). TMVA::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisationResult.html:94,Guid,Guide,94,doc/master/classTMVA_1_1HyperParameterOptimisationResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1HyperParameterOptimisationResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::IFitterTarget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::IFitterTarget Class ReferenceabstractTMVA. ; Interface for a fitter 'target'. ; Defines interface to the estimator function ; Definition at line 44 of file IFitterTarget.h. Public Member Functions;  IFitterTarget ();  constructor ;  ; virtual ~IFitterTarget ();  ; virtual Double_t EstimatorFunction (std::vector< Double_t > &parameters)=0;  ; virtual TClass * IsA () const;  ; virtual void ProgressNotifier (TString, TString);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/IFitterTarget.h>. Inheritance diagram for TMVA::IFitterTarget:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IFitterTarget(). TMVA::IFitterTarget::IFitterTarget ; (; ). constructor ; Definition at line 43 of file IFitterTarget.cxx. ◆ ~IFitterTarget(). virtual TMVA::IFitterTarget::~IFitterTarget ; (; ). inlinevirtual . Definition at line 50 of file IFitterTarget.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::IFitterTarget::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::IFitterTarget::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::IFitterTarget::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file IFitterTarget.h. ◆ DeclFileName(). static const char * TMVA::IFitterTarget::DeclFileName ; (; ). inlinestatic . ReturnsName of the file cont",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html:75,Guid,Guide,75,doc/master/classTMVA_1_1IFitterTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IFitterTarget.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::IMethod Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TMVA::IMethod Class ReferenceabstractTMVA. ; Interface for all concrete MVA method implementations. ; Definition at line 53 of file IMethod.h. Public Member Functions;  IMethod ();  ; virtual ~IMethod ();  ; virtual const Ranking * CreateRanking ()=0;  ; virtual void DeclareOptions ()=0;  ; virtual Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual const char * GetName () const =0;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; virtual void Init ()=0;  ; virtual TClass * IsA () const;  ; virtual void MakeClass (const TString &classFileName=TString("""")) const =0;  ; virtual void PrintHelpMessage () const =0;  ; virtual void ProcessOptions ()=0;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Train (void)=0;  ; virtual void WriteMonitoringHistosToFile (void) const =0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; virtual void GetHelpMessage () const =0;  ; virtual void MakeClassSpecific (std::ostream &, const TString &) const =0;  . #include <TMVA/IMethod.h>. Inheritance diagram for TMVA::IMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ IMethod(). TMVA::IMethod::IMethod ; (; ). inline . Definition at line 58 of file IMethod.h. ◆ ~IMethod(). virtual TMVA::IMethod::~IMethod ; (; ). inlinevirtual . Definition at line 61 of file I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IMethod.html:69,Guid,Guide,69,doc/master/classTMVA_1_1IMethod.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IMethod.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::IPruneTool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Attributes |; List of all members ; TMVA::IPruneTool Class ReferenceabstractTMVA. ; IPruneTool - a helper interface class to prune a decision tree. ; Any tool which implements the interface should provide two modes for tree pruning:. automatically find the ""best"" prune strength by minimizing the error rate on a test sample if SetAutomatic() is called, or if automatic = kTRUE argument is set in CalculatePruningInfo() In this case, the PruningInfo object returned contains the error rate of the optimally pruned tree, the optimal prune strength, and the sequence of nodes to prune to obtain the optimal pruned tree from the original DecisionTree; a user-provided pruning strength parameter is used to prune the tree, in which case the returned PruningInfo object has QualityIndex = -1, PruneStrength = user prune strength, and PruneSequence is the list of nodes to prune . Definition at line 70 of file IPruneTool.h. Public Types; typedef std::vector< const Event * > EventSample;  . Public Member Functions;  IPruneTool ();  ; virtual ~IPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE)=0;  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Protected Attributes; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/IPruneTool.h>. Inheritance diagram for TMVA::IPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventSample. typedef std::vector<const Event*> TMVA::IPruneTool::EventSample. Definition at line 74 of file IPruneTool.h. Constructor & Destructor Doc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html:72,Guid,Guide,72,doc/master/classTMVA_1_1IPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPruneTool.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::IPythonInteractive Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::IPythonInteractive Class ReferenceTMVA. ; This class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook. ; It’s only initialized in Jupyter notebook context. In initialization we specify some title, and a TGraph will be created for every title. We can add new data points easily to all TGraphs. These graphs are added to a TMultiGraph, and during an interactive training we get this TMultiGraph object and plot it with JsROOT. ; Definition at line 94 of file MethodBase.h. Public Member Functions;  IPythonInteractive ();  standard constructor ;  ;  ~IPythonInteractive ();  standard destructor ;  ; void AddPoint (Double_t x, Double_t y1, Double_t y2);  This function is used only in 2 TGraph case, and it will add new data points to graphs. ;  ; void AddPoint (std::vector< Double_t > &dat);  This function can add data points to as many TGraphs as we have. ;  ; void ClearGraphs ();  This function sets the point number to 0 for all graphs. ;  ; TMultiGraph * Get ();  ; void Init (std::vector< TString > &graphTitles);  This function gets some title and it creates a TGraph for every title. ;  ; bool NotInitialized ();  . Private Attributes; std::vector< TGraph * > fGraphs;  ; Int_t fIndex;  ; TMultiGraph * fMultiGraph;  ; Int_t fNumGraphs;  . #include <TMVA/MethodBase.h>; Constructor & Destructor Documentation. ◆ IPythonInteractive(). TMVA::IPythonInteractive::IPythonInteractive ; (; ). standard constructor ; Definition at line 146 of file MethodBase.cxx. ◆ ~IPythonInteractive(). TMVA::IPythonInteractive::~IPythonInteractive ; (; ). standard destructor ; Definition at line 154 of file MethodBase.cxx. Member Function Documentation. ◆ AddPoint() [1/2]. void TMVA::IPythonInteractive::AddPoint ; (; Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html:80,Guid,Guide,80,doc/master/classTMVA_1_1IPythonInteractive.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IPythonInteractive.html,1,['Guid'],['Guide']
Usability,. ROOT: TMVA::Increment< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::Increment< T > Class Template Reference. ; template<typename T>; class TMVA::Increment< T >; Definition at line 85 of file DataSetFactory.h. Public Member Functions;  Increment (T start);  ; T operator() ();  . Private Attributes; T value;  . #include <TMVA/DataSetFactory.h>; Constructor & Destructor Documentation. ◆ Increment(). template<typename T > . TMVA::Increment< T >::Increment ; (; T ; start). inline . Definition at line 88 of file DataSetFactory.h. Member Function Documentation. ◆ operator()(). template<typename T > . T TMVA::Increment< T >::operator() ; (; ). inline . Definition at line 89 of file DataSetFactory.h. Member Data Documentation. ◆ value. template<typename T > . T TMVA::Increment< T >::value. private . Definition at line 86 of file DataSetFactory.h. tmva/tmva/inc/TMVA/DataSetFactory.h. TMVAIncrement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Increment.html:85,Guid,Guide,85,doc/master/classTMVA_1_1Increment.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Increment.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::Internal Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMVA::Internal Namespace Reference. Classes; class  PyGILRAII;  . TMVAInternal. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1Internal.html:74,Guid,Guide,74,doc/master/namespaceTMVA_1_1Internal.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1Internal.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::Interval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TMVA::Interval Class ReferenceTMVA. ; The TMVA::Interval Class. ; Interval definition, continuous and discrete. Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers: min, min+step, min+2*step,...., min+(n-1)*step, min+n*step=max. e.g.:. Interval(1,5,5) = 1,2,3,4,5; Interval(.5,1.,6) = .5, .6., .7, .8, .9, 1.0. Note: bin counting starts from ZERO unlike in ROOT histograms. Interval definition, continuous and discrete; Interval(min,max) : a continous interval [min,max]; Interval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; min, min+step, min+2*step,...., min+(n-1)*step=max; e.g.:; Interval(1,5,5)=1,2,3,4,5 . Interval(.5,1.,6)= .5, .6., .7, .8, .9, 1.0 . Example: Interval(.5,1.,6); ; [ min max ]; -----------------------------------------------; | | | | | |; .5 .6 .7 .8 .9 1.0; ; bin 0 1 2 3 4 5; TMVA::IntervalThe TMVA::Interval Class.Definition Interval.h:61. Definition at line 61 of file Interval.h. Public Member Functions;  Interval (const Interval &other);  ;  Interval (Double_t min, Double_t max, Int_t nbins=0);  defines minimum and maximum of an interval ;  ; virtual ~Interval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete Interval"" ;  ; virtual Double_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Interval.html:70,Guid,Guide,70,doc/master/classTMVA_1_1Interval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Interval.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::KDEKernel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::KDEKernel Class ReferenceTMVA. ; KDE Kernel for ""smoothing"" the PDFs. ; Definition at line 50 of file KDEKernel.h. Public Types; enum  EKernelBorder { kNoTreatment = 1; , kKernelRenorm = 2; , kSampleMirror = 3; };  ; enum  EKernelIter { kNonadaptiveKDE = 1; , kAdaptiveKDE = 2; };  ; enum  EKernelType { kNone = 0; , kGauss = 1; };  . Public Member Functions;  KDEKernel (EKernelIter kiter=kNonadaptiveKDE, const TH1 *hist=nullptr, Float_t lower_edge=0., Float_t upper_edge=1., EKernelBorder kborder=kNoTreatment, Float_t FineFactor=1.);  constructor sanity check ;  ; virtual ~KDEKernel (void);  destructor ;  ; Float_t GetBinKernelIntegral (Float_t lowr, Float_t highr, Float_t mean, Int_t binnum);  calculates the integral of the Kernel ;  ; const char * GetName () const;  ; virtual TClass * IsA () const;  ; void SetKernelType (EKernelType ktype=kGauss);  fIter == 1 —> nonadaptive KDE fIter == 2 —> adaptive KDE ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; Float_t fFineFactor;  fine tuning factor for Adaptive KDE: factor to multiply the ""width"" of the Kernel function ;  ; TH1F * fFirstIterHist;  histogram to be filled in the hidden iteration ;  ; Bool_t fHiddenIteration;  Defines if whats currently running is the. ;  ; TH1F * fHist;  copy of input histogram ;  ; EKernelIter fIter;  iteration number ;  ; EKernelBorder fKDEborder;  The method to take care about ""b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html:71,Guid,Guide,71,doc/master/classTMVA_1_1KDEKernel.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1KDEKernel.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LDA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::LDA Class ReferenceTMVA. . Definition at line 44 of file LDA.h. Public Member Functions;  LDA (Float_t tolerence=1.0e-5, Bool_t debug=false);  constructor ;  ;  ~LDA ();  destructor ;  ; Float_t GetLogLikelihood (const std::vector< Float_t > &x, Int_t k);  Log likelihood function with Gaussian approximation. ;  ; Float_t GetProb (const std::vector< Float_t > &x, Int_t k);  Signal probability with Gaussian approximation. ;  ; void Initialize (const LDAEvents &inputSignal, const LDAEvents &inputBackground);  Create LDA matrix using local events found by knn method. ;  . Private Member Functions; Float_t FSub (const std::vector< Float_t > &x, Int_t k);  Probability value using Gaussian approximation. ;  ; MsgLogger & Log () const;  . Private Attributes; Bool_t fDebug;  documentation! ;  ; std::map< Int_t, Float_t > fEventFraction;  documentation! ;  ; MsgLogger * fLogger;  ! message logging service ;  ; std::map< Int_t, std::vector< Float_t > > fMu;  documentation! ;  ; UInt_t fNumParams;  documentation! ;  ; TMatrixF * fSigma;  documentation! ;  ; TMatrixF * fSigmaInverse;  documentation! ;  ; Float_t fTolerence;  documentation! ;  . #include <TMVA/LDA.h>; Constructor & Destructor Documentation. ◆ LDA(). TMVA::LDA::LDA ; (; Float_t ; tolerence = 1.0e-5, . Bool_t ; debug = false . ). constructor ; Definition at line 45 of file LDA.cxx. ◆ ~LDA(). TMVA::LDA::~LDA ; (; ). destructor ; Definition at line 58 of file LDA.cxx. Member Function Documentation. ◆ FSub(). Float_t TMVA::LDA::FSub ; (; const std::vector< Float_t > & ; x, . Int_t ; k . ). private . Probability value using Gaussian approximation. ; Definition at line 209 of file LDA.cxx. ◆ GetLogLikelihood(). Float_t TMVA::LDA::GetLogLikelihood ; (; const std::vector< Float_t > &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LDA.html:65,Guid,Guide,65,doc/master/classTMVA_1_1LDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LDA.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LeastSquaresLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunction Class ReferenceTMVA. ; Least Squares Loss Function. ; Definition at line 200 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LeastSquaresLossFunction(). TMVA::LeastSquaresLossFunction::LeastSquaresLossFunction ; (; ). inline . Definition at line 203 of file LossFunction.h. ◆ ~LeastSquaresLossFunction(). TMVA::LeastSquaresLossFunction::~LeastSquaresLossFunction ; (; ). inline . Definition at line 204 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::LeastSquaresLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . least squares , determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 368 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::LeastSquaresLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). virtual . least squares , determine the mean loss for a collection of eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunction.html:86,Guid,Guide,86,doc/master/classTMVA_1_1LeastSquaresLossFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LeastSquaresLossFunctionBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LeastSquaresLossFunctionBDT Class ReferenceTMVA. ; Least Squares BDT Loss Function. ; Definition at line 222 of file LossFunction.h. Public Member Functions;  LeastSquaresLossFunctionBDT ();  ;  ~LeastSquaresLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  huber BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  least squares BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  least squares BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  least squares BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::LeastSquaresLossFunction;  LeastSquaresLossFunction ();  ;  ~LeastSquaresLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  least squares , determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  least squares , determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LeastSquaresLossFunctionBDT:. T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html:89,Guid,Guide,89,doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LeastSquaresLossFunctionBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LogInterval Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::LogInterval Class ReferenceTMVA. ; The TMVA::Interval Class. . LogInterval definition, continuous and discrete; LogInterval(min,max) : a continous interval [min,max]; LogInterval(min,max,n): a ""discrete interval"" [min,max], i.e the n numbers:; 1,10,100,1000; 1,2,4,8,16,32,64,128,512,1024; or alike .. Example:; LogInterval(1,10000,5); i=0 --> 1 note: StepSize(ibin=0) = not defined !!; i=1 --> 10 StepSize(ibin=1) = 9; i=2 --> 100 StepSize(ibin=2) = 99; i=3 --> 1000 StepSize(ibin=3) = 999; i=4 --> 10000 StepSize(ibin=4) = 9999; ; LogInterval(1,1000,11); i=0 --> 1; i=1 --> 1.99526; i=2 --> 3.98107; i=3 --> 7.94328; i=4 --> 15.8489; i=5 --> 31.6228; i=6 --> 63.0957; i=7 --> 125.893; i=8 --> 251.189; i=9 --> 501.187; i=10 --> 1000; ; LogInterval(1,1024,11); i=0 --> 1; i=1 --> 2; i=2 --> 4; i=3 --> 8; i=4 --> 16; i=5 --> 32; i=6 --> 64; i=7 --> 128; i=8 --> 256; i=9 --> 512; i=10 --> 1024; TMVA::LogIntervalThe TMVA::Interval Class.Definition LogInterval.h:83. Definition at line 83 of file LogInterval.h. Public Member Functions;  LogInterval (const LogInterval &other);  ;  LogInterval (Double_t min, Double_t max, Int_t nbins=0);  ; virtual ~LogInterval ();  destructor ;  ; virtual Double_t GetElement (Int_t position) const;  calculates the value of the ""number"" bin in a discrete interval. ;  ; virtual Double_t GetMax () const;  ; virtual Double_t GetMean () const;  ; virtual Double_t GetMin () const;  ; virtual Int_t GetNbins () const;  ; virtual Double_t GetRndm (TRandom3 &) const;  get uniformly distributed number within interval ;  ; virtual Double_t GetStepSize (Int_t iBin=0) const;  returns the step size between the numbers of a ""discrete LogInterval"" ;  ; virtual Double_t GetWidth () const;  ; virtual TClass * IsA () const;  ; MsgLogger ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:73,Guid,Guide,73,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LossFunction Class Referenceabstract. . Definition at line 74 of file LossFunction.h. Public Member Functions;  LossFunction ();  ; virtual ~LossFunction ();  ; virtual Double_t CalculateLoss (LossFunctionEventInfo &e)=0;  ; virtual Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Int_t Id ()=0;  ; virtual TString Name ()=0;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LossFunction(). TMVA::LossFunction::LossFunction ; (; ). inline . Definition at line 79 of file LossFunction.h. ◆ ~LossFunction(). virtual TMVA::LossFunction::~LossFunction ; (; ). inlinevirtual . Definition at line 80 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). virtual Double_t TMVA::LossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). pure virtual . Implemented in TMVA::HuberLossFunction, TMVA::LeastSquaresLossFunction, and TMVA::AbsoluteDeviationLossFunction. ◆ CalculateMeanLoss(). virtual Double_t TMVA::LossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). pure virtual . Implemented in TMVA::HuberLossFunction, TMVA::LeastSquaresLossFunction, and TMVA::AbsoluteDeviationLossFunction. ◆ CalculateNetLoss(). virtual Double_t TMVA::LossFunction::CalculateNetLoss ; (; std::vector< LossFunctionEventInfo > & ; evs). pure virtual . Implemented in TMVA::HuberLossFunction, TMVA::LeastSquaresLossFunction, and TMVA::AbsoluteDeviationLossFunction. ◆ Id(). virtual Int_t TMVA::LossFunction::Id ; (; ). pure virtual . Implemented in TMVA::HuberLossFunction, TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LossFunction.html:74,Guid,Guide,74,doc/master/classTMVA_1_1LossFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LossFunctionBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::LossFunctionBDT Class Referenceabstract. . Definition at line 124 of file LossFunction.h. Public Member Functions;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ; virtual Double_t Fit (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights)=0;  ; virtual void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap)=0;  ; virtual Double_t Target (LossFunctionEventInfo &e)=0;  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ; virtual Double_t CalculateLoss (LossFunctionEventInfo &e)=0;  ; virtual Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs)=0;  ; virtual Int_t Id ()=0;  ; virtual TString Name ()=0;  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::LossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LossFunctionBDT(). TMVA::LossFunctionBDT::LossFunctionBDT ; (; ). inline . Definition at line 129 of file LossFunction.h. ◆ ~LossFunctionBDT(). virtual TMVA::LossFunctionBDT::~LossFunctionBDT ; (; ). inlinevirtual . Definition at line 130 of file LossFunction.h. Member Function Documentation. ◆ Fit(). virtual Double_t TMVA::LossFunctionBDT::Fit ; (; std::vector< LossFunctionEventInfo > & ; evs). pure virtual . Implemented in TMVA::HuberLossFunctionBDT, TMVA::LeastSquaresLossFunctionBDT, and TMVA::AbsoluteDeviationLossFunctionBDT. ◆ Init(). virtual void TMVA::LossFunctionBDT::Init ; (; std::map< const TMV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html:77,Guid,Guide,77,doc/master/classTMVA_1_1LossFunctionBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::LossFunctionEventInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::LossFunctionEventInfo Class Reference. . Definition at line 48 of file LossFunction.h. Public Member Functions;  LossFunctionEventInfo ();  ;  LossFunctionEventInfo (Double_t trueValue_, Double_t predictedValue_, Double_t weight_);  ;  ~LossFunctionEventInfo ();  . Public Attributes; Double_t predictedValue;  ; Double_t trueValue;  ; Double_t weight;  . #include <TMVA/LossFunction.h>; Constructor & Destructor Documentation. ◆ LossFunctionEventInfo() [1/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; ). inline . Definition at line 51 of file LossFunction.h. ◆ LossFunctionEventInfo() [2/2]. TMVA::LossFunctionEventInfo::LossFunctionEventInfo ; (; Double_t ; trueValue_, . Double_t ; predictedValue_, . Double_t ; weight_ . ). inline . Definition at line 56 of file LossFunction.h. ◆ ~LossFunctionEventInfo(). TMVA::LossFunctionEventInfo::~LossFunctionEventInfo ; (; ). inline . Definition at line 61 of file LossFunction.h. Member Data Documentation. ◆ predictedValue. Double_t TMVA::LossFunctionEventInfo::predictedValue. Definition at line 64 of file LossFunction.h. ◆ trueValue. Double_t TMVA::LossFunctionEventInfo::trueValue. Definition at line 63 of file LossFunction.h. ◆ weight. Double_t TMVA::LossFunctionEventInfo::weight. Definition at line 65 of file LossFunction.h. Libraries for TMVA::LossFunctionEventInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/LossFunction.h. TMVALossFunctionEventInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html:83,Guid,Guide,83,doc/master/classTMVA_1_1LossFunctionEventInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LossFunctionEventInfo.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::MCFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MCFitter Class ReferenceTMVA. ; Fitter using Monte Carlo sampling of parameters. ; Definition at line 44 of file MCFitter.h. Public Member Functions;  MCFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MCFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t cycles);  set MC fitter configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; void AddPreDefVal (const T &);  ; template<class T > ; void AddPreDefVal (const TString &",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MCFitter.html:70,Guid,Guide,70,doc/master/classTMVA_1_1MCFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodANNBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodANNBase Class ReferenceabstractTMVA. ; Base class for all TMVA methods using artificial neural networks. ; Definition at line 62 of file MethodANNBase.h. Public Types; enum  EEstimator { kMSE =0; , kCE; };  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodANNBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  standard constructor Note: Right now it is an option to choose the neuron input function, but only the input function ""sum"" leads to weight convergence – otherwise the weights go to nan and lead to an ABORT. ;  ;  MethodANNBase (Types::EMVA methodType, DataSetInfo &theData, const TString &theWeightFile);  construct the Method from the weight file ;  ; virtual ~MethodANNBase ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of ANN class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodANNBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodANNBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodBDT Class ReferenceTMVA. ; Analysis of Boosted Decision Trees. ; Boosted decision trees have been successfully used in High Energy Physics analysis for example by the MiniBooNE experiment (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the selection is done on a majority vote on the result of several decision trees, which are all derived from the same training sample by supplying different event weights during the training. Decision trees:; Successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBase Class ReferenceabstractTMVA. ; Virtual base Class for all MVA method. ; MethodBase hosts several specific evaluation methods.; The kind of MVA that provides optimal performance in an analysis strongly depends on the particular application. The evaluation factory provides a number of numerical benchmark results to directly assess the performance of the MVA training on the independent test sample. These are:. The signal efficiency at three representative background efficiencies (which is 1 − rejection).; The significance of an MVA estimator, defined by the difference between the MVA mean values for signal and background, divided by the quadratic sum of their root mean squares.; The separation of an MVA x, defined by the integral ; \[; \frac{1}{2} \int \frac{(S(x) - B(x))^2}{(S(x) + B(x))} dx; \]. where \( S(x) \) and \( B(x) \) are the signal and background distributions, respectively. The separation is zero for identical signal and background MVA shapes, and it is one for disjunctive shapes.; The average, \( \int x \mu (S(x)) dx \), of the signal \( \mu_{transform} \). The \( \mu_{transform} \) of an MVA denotes the transformation that yields a uniform background distribution. In this way, the signal distributions \( S(x) \) can be directly compared among the various MVAs. The stronger \( S(x) \) peaks towards one, the better is the discrimination of the MVA. The \( \mu_{transform} \) is documented here.; The MVA standard output also prints the linear correlation coefficients between signal and background, which can be useful to eliminate variables that exhibit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:72,Guid,Guide,72,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodBayesClassifier Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; List of all members ; TMVA::MethodBayesClassifier Class ReferenceTMVA. ; Description of bayesian classifiers. ; Definition at line 44 of file MethodBayesClassifier.h. Public Member Functions;  MethodBayesClassifier (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodBayesClassifier (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodBayesClassifier (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns MVA value for given event ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  Variable can handle classification with 2 classes. ;  ; void Init (void);  default initialisation ;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read back the training results from a file (stream) ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  some training ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html:83,Guid,Guide,83,doc/master/classTMVA_1_1MethodBayesClassifier.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBayesClassifier.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodBoost Class ReferenceTMVA. ; Class for boosting a TMVA method. ; This class is meant to boost a single classifier. Boosting means training the classifier a few times. Every time the weights of the events are modified according to how well the classifier performed on the test sample. ; Definition at line 58 of file MethodBoost.h. Public Member Functions;  MethodBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodBoost (DataSetInfo &dsi, const TString &theWeightFile);  ; virtual ~MethodBoost (void);  destructor ;  ; Bool_t BookMethod (Types::EMVA theMethod, TString methodTitle, TString theOption);  just registering the string from which the boosted classifier will be created ;  ; void CleanBoostOptions ();  ; const Ranking * CreateRanking ();  ; Int_t GetBoostNum ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return boosted MVA response ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  Boost can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void SetBoostedMethodName (TString methodName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  ;  Public Member Functions inherited from TMVA::MethodCompositeBase;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:73,Guid,Guide,73,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodC50 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodC50 Class Reference. . Definition at line 33 of file MethodC50.h. Public Member Functions;  MethodC50 (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodC50 (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodC50 (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodC50.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodC50.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodC50.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCFMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN Class ReferenceTMVA. ; Interface to Clermond-Ferrand artificial neural network. ; The CFMlpANN belong to the class of Multilayer Perceptrons (MLP), which are feed-forward networks according to the following propagation schema:. Schema for artificial neural network.; The input layer contains as many neurons as input variables used in the MVA. The output layer contains two neurons for the signal and background event classes. In between the input and output layers are a variable number of k hidden layers with arbitrary numbers of neurons. (While the structure of the input and output layers is determined by the problem, the hidden layers can be configured by the user through the option string of the method booking.); As indicated in the sketch, all neuron inputs to a layer are linear combinations of the neuron output of the previous layer. The transfer from input to output within a neuron is performed by means of an ""activation; function"". In general, the activation function of a neuron can be zero (deactivated), one (linear), or non-linear. The above example uses a sigmoid activation function. The transfer function of the output layer is usually linear. As a consequence: an ANN without hidden layer should give identical discrimination power as a linear discriminant analysis (Fisher). In case of one hidden layer, the ANN computes a linear combination of sigmoid.; The learning method used by the CFMlpANN is only stochastic. ; Definition at line 95 of file MethodCFMlpANN.h. Public Member Functions;  MethodCFMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html:76,Guid,Guide,76,doc/master/classTMVA_1_1MethodCFMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCFMlpANN_Utils Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCFMlpANN_Utils Class ReferenceabstractTMVA. ; Implementation of Clermond-Ferrand artificial neural network. ; Reference for the original FORTRAN version ""mlpl3.F"":; Authors : J. Proriol and contributions from ALEPH-Clermont-Ferrand Team members; Copyright: Laboratoire Physique Corpusculaire Universite de Blaise Pascal, IN2P3/CNRS . Definition at line 54 of file MethodCFMlpANN_Utils.h. Classes; class  VARn2;  . Public Member Functions;  MethodCFMlpANN_Utils ();  default constructor ;  ; virtual ~MethodCFMlpANN_Utils ();  Destructor. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Member Functions; void Arret (const char *mot);  ; void CollectVar (Int_t *nvar, Int_t *class__, Double_t *xpg);  [smart comments to be added] ;  ; void Cout (Int_t *, Double_t *xxx);  [smart comments to be added] ;  ; void Cout2 (Int_t *, Double_t *yyy);  [smart comments to be added] ;  ; virtual Int_t DataInterface (Double_t *, Double_t *, Int_t *, Int_t *, Int_t *, Int_t *, Double_t *, Int_t *, Int_t *)=0;  ; void En_arriere (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant (Int_t *ievent);  [smart comments to be added] ;  ; void En_avant2 (Int_t *ievent);  [smart comments to be added] ;  ; void Entree_new (Int_t *, char *, Int_t *ntrain, Int_t *ntest, Int_t *numlayer, Int_t *nodes, Int_t *numcycle,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN__Utils.html:82,Guid,Guide,82,doc/master/classTMVA_1_1MethodCFMlpANN__Utils.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCFMlpANN__Utils.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCategory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodCategory Class ReferenceTMVA. ; Class for categorizing the phase space. ; This class is meant to allow categorisation of the data. For different categories, different classifiers may be booked and different variables may be considered. The aim is to account for the difference that is due to different locations/angles. ; Definition at line 58 of file MethodCategory.h. Public Member Functions;  MethodCategory (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodCategory (DataSetInfo &dsi, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodCategory (void);  destructor ;  ; TMVA::IMethod * AddMethod (const TCut &, const TString &theVariables, Types::EMVA theMethod, const TString &theTitle, const TString &theOptions);  adds sub-classifier for a category ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description of Category classifier ;  ; const Ranking * CreateRanking ();  no ranking ;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  returns the mva values of the multi-class right sub-classifier ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the mva value of the right sub-classifier ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  returns the mva value of the right sub-classifier ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  check whether method category has analysis type the method type has to be the same for all sub-methods ;  ; virtual TClass * IsA () const;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html:76,Guid,Guide,76,doc/master/classTMVA_1_1MethodCategory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCategory.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCompositeBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::MethodCompositeBase Class ReferenceabstractTMVA. ; Virtual base class for combining several TMVA method. ; This class is virtual class meant to combine more than one classifier together. The training of the classifiers is done by classes that are derived from this one, while the saving and loading of weights file and the evaluation is done here. ; Definition at line 50 of file MethodCompositeBase.h. Public Member Functions;  MethodCompositeBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCompositeBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~MethodCompositeBase (void);  delete methods ;  ; void AddWeightsXMLTo (void *parent) const;  ; virtual const Ranking * CreateRanking ()=0;  ; Double_t GetMvaValue (const TMVA::Event *const ev, Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  return composite MVA response ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  text streamer ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  XML streamer. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Train ()=0;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCompositeBase.html:81,Guid,Guide,81,doc/master/classTMVA_1_1MethodCompositeBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCompositeBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCrossValidation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCrossValidation Class ReferenceTMVA. . Definition at line 38 of file MethodCrossValidation.h. Public Member Functions;  MethodCrossValidation (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodCrossValidation (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodCrossValidation (void);  Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  Write weights to XML. ;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; void GetHelpMessage () const;  ; const std::vector< Float_t > & GetMulticlassValues ();  Get the multiclass MVA response. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; const std::vector< Float_t > & GetRegressionValues ();  Get the regression value generated by the containing methods. ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; virtual TClass * IsA () const;  ; void MakeClassSpecific (std::ostream &, const TString &) const;  Make ROOT-independent C++ class for classifier response (classifier-specific implementation). ;  ; void MakeClassSpecificHeader (std::ostream &, const TString &) const;  Specific class header. ;  ; void ProcessOptions ();  The option string is decoded, for available options see ""DeclareOptions"". ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  Read the weights. ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *parent);  Reads from the xml file. ;  ; void Reset (void);  Reset the method, as if it had just been instanti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:83,Guid,Guide,83,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodCuts Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodCuts Class ReferenceTMVA. ; Multivariate optimisation of signal efficiency for given background efficiency, applying rectangular minimum and maximum requirements. ; Also implemented is a ""decorrelate/diagonalized cuts approach"", which improves over the uncorrelated cuts approach by transforming linearly the input variables into a diagonal space, using the square-root of the covariance matrix.; Other optimisation criteria, such as maximising the signal significance- squared, \( \frac{S^2}{(S+B)} \), with S and B being the signal and background yields, correspond to a particular point in the optimised background rejection versus signal efficiency curve. This working point requires the knowledge of the expected yields, which is not the case in general. Note also that for rare signals, Poissonian statistics should be used, which modifies the significance criterion.; The rectangular cut of a volume in the variable space is performed using a binary tree to sort the training events. This provides a significant reduction in computing time (up to several orders of magnitudes, depending on the complexity of the problem at hand).; Technically, optimisation is achieved in TMVA by two methods:. Monte Carlo generation using uniform priors for the lower cut value, and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample. The GA is configurable by many external settings through the option string. For difficult cases (such as many variables), some tuning may be necessary to achieve satisfying results. Attempts to use Minuit fits (Simplex ot Migrad) instea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html:72,Guid,Guide,72,doc/master/classTMVA_1_1MethodCuts.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCuts.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodDL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodDL Class Reference. . Definition at line 89 of file MethodDL.h. Public Member Functions;  MethodDL (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  Constructor. ;  ;  MethodDL (DataSetInfo &theData, const TString &theWeightFile);  Constructor. ;  ; virtual ~MethodDL ();  Virtual Destructor. ;  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; TString GetArchitectureString () const;  ; size_t GetBatchDepth () const;  ; size_t GetBatchHeight () const;  ; TString GetBatchLayoutString () const;  ; size_t GetBatchSize () const;  ; size_t GetBatchWidth () const;  ; const DeepNetImpl_t & GetDeepNet () const;  ; TString GetErrorStrategyString () const;  ; size_t GetInputDepth () const;  ; size_t GetInputDim () const;  ; size_t GetInputHeight () const;  ; TString GetInputLayoutString () const;  ; std::vector< size_t > GetInputShape () const;  ; size_t GetInputWidth () const;  ; KeyValueVector_t & GetKeyValueSettings ();  ; const KeyValueVector_t & GetKeyValueSettings () const;  ; TString GetLayoutString () const;  ; DNN::ELossFunction GetLossFunction () const;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; DNN::EOutputFunction GetOutputFunction () const;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  ; std::vector< TTrainingSettings > & GetTrainingSettings ();  ; const std::vector< TTrainingSettings > & GetTrainingSettings () const;  ; TString GetTrainingStrategyString () const;  ; DNN::EInitialization GetWeightInitialization () const;  ; TSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:70,Guid,Guide,70,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodDNN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::MethodDNN Class ReferenceTMVA. ; Deep Neural Network Implementation. ; Definition at line 76 of file MethodDNN.h. Classes; struct  TTrainingSettings;  . Public Member Functions;  MethodDNN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  ;  MethodDNN (DataSetInfo &theData, const TString &theWeightFile);  ; virtual ~MethodDNN ();  ; void AddWeightsXMLTo (void *parent) const;  ; const Ranking * CreateRanking ();  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  ; virtual Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  ; virtual const std::vector< Float_t > & GetRegressionValues ();  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; virtual TClass * IsA () const;  ; KeyValueVector_t ParseKeyValueString (TString parseString, TString blockDelim, TString tokenDelim);  ; LayoutVector_t ParseLayoutString (TString layerSpec);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &i);  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train ();  ; void TrainCpu ();  ; void TrainGpu ();  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &wei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDNN.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodDNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDNN.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodDT Class ReferenceTMVA. ; Analysis of Boosted Decision Trees. ; Boosted decision trees have been successfully used in High Energy Physics analysis for example by the MiniBooNE experiment (Yang-Roe-Zhu, physics/0508045). In Boosted Decision Trees, the selection is done on a majority vote on the result of several decision trees, which are all derived from the same training sample by supplying different event weights during the training. Decision trees:; successive decision nodes are used to categorize the events out of the sample as either signal or background. Each node uses only a single discriminating variable to decide if the event is signal-like (""goes right"") or background-like (""goes left""). This forms a tree like structure with ""baskets"" at the end (leave nodes), and an event is classified as either signal or background according to whether the basket where it ends up has been classified signal or background during the training. Training of a decision tree is the process to define the ""cut criteria"" for each node. The training starts with the root node. Here one takes the full training event sample and selects the variable and corresponding cut value that gives the best separation between signal and background at this stage. Using this cut criterion, the sample is then divided into two subsamples, a signal-like (right) and a background-like (left) sample. Two new nodes are then created for each of the two sub-samples and they are constructed using the same mechanism as described for the root node. The devision is stopped once a certain node has reached either a minimum number of events, or a minimum or maximum signal purity. These leave nodes are th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDT.html:70,Guid,Guide,70,doc/master/classTMVA_1_1MethodDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodFDA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodFDA Class ReferenceTMVA. ; Function discriminant analysis (FDA). ; This simple classifier fits any user-defined TFormula (via option configuration string) to the training data by requiring a formula response of 1 (0) to signal (background) events. The parameter fitting is done via the abstract class FitterBase, featuring Monte Carlo sampling, Genetic Algorithm, Simulated Annealing, MINUIT and combinations of these.; Can compute regression value for one dimensional output ; Definition at line 61 of file MethodFDA.h. Public Member Functions;  MethodFDA (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodFDA (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodFDA (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description for LD classification and regression (for arbitrary number of output classes/targets) ;  ; void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; const Ranking * CreateRanking ();  ; Double_t EstimatorFunction (std::vector< Double_t > &);  compute estimator for given parameter set (to be minimised) ;  ; virtual const std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns MVA value for given event ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::MethodFisher Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodFisher Class ReferenceTMVA. ; Fisher and Mahalanobis Discriminants (Linear Discriminant Analysis) ; In the method of Fisher discriminants event selection is performed in a transformed variable space with zero linear correlations, by distinguishing the mean values of the signal and background distributions.; The linear discriminant analysis determines an axis in the (correlated) hyperspace of the input variables such that, when projecting the output classes (signal and background) upon this axis, they are pushed as far as possible away from each other, while events of a same class are confined in a close vicinity. The linearity property of this method is reflected in the metric with which ""far apart"" and ""close vicinity"" are determined: the covariance matrix of the discriminant variable space.; The classification of the events in signal and background classes relies on the following characteristics (only): overall sample means, \( x_i \), for each input variable, \( i \), class-specific sample means, \( x_{S(B),i}\), and total covariance matrix \( T_{ij} \). The covariance matrix can be decomposed into the sum of a within ( \( W_{ij} \)) and a between-class ( \( B_{ij} \)) class matrix. They describe the dispersion of events relative to the means of their own class (within-class matrix), and relative to the overall sample means (between-class matrix). The Fisher coefficients, \( F_i \), are then given by. \[; F_i = \frac{\sqrt{N_s N_b}}{N_s + N_b} \sum_{j=1}^{N_{SB}} W_{ij}^{-1} (\bar{X}_{Sj} - \bar{X}_{Bj}); \]. where in TMVA is set \( N_S = N_B \), so that the factor in front of the sum simplifies to \( \frac{1}{2}\). The Fisher disc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html:74,Guid,Guide,74,doc/master/classTMVA_1_1MethodFisher.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFisher.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodHMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodHMatrix Class ReferenceTMVA. ; H-Matrix method, which is implemented as a simple comparison of chi-squared estimators for signal and background, taking into account the linear correlations between the input variables. ; This MVA approach is used by the \(D\emptyset \) collaboration (FNAL) for the purpose of electron identification (see, eg., hep-ex/9507007). As it is implemented in TMVA, it is usually equivalent or worse than the Fisher-Mahalanobis discriminant, and it has only been added for the purpose of completeness. Two chi^2 estimators are computed for an event, each one for signal and background, using the estimates for the means and covariance matrices obtained from the training sample:. \[; \chi^2_\eta = (x_\eta(i) - \bar{x}_\eta)^T C_\eta^{-1} (x_\eta(i) - \bar{x}_\eta), \eta = S,B; \]. TMVA then uses as normalised analyser for event \( (i) \) the ratio: ; \[; \frac{(chi_S(i)^2 - chi_B^2(i))}{(chi_S^2(i) + chi_B^2(i))}; \]. Definition at line 52 of file MethodHMatrix.h. Public Member Functions;  MethodHMatrix (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor for the H-Matrix method ;  ;  MethodHMatrix (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodHMatrix ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description for HMatrix classification ;  ; const Ranking * CreateRanking ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the H-matrix signal estimator ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodHMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::MethodInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TMVA::MethodInfo Class Reference. . Definition at line 26 of file mvaeffs.h. Public Member Functions;  MethodInfo ();  ; virtual ~MethodInfo ();  ; virtual TClass * IsA () const;  ; void SetResultHists ();  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodInfo.html:72,Guid,Guide,72,doc/master/classTMVA_1_1MethodInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodInfo.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMVA::MethodKNN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodKNN Class ReferenceTMVA. ; Analysis of k-nearest neighbor. ; Definition at line 53 of file MethodKNN.h. Public Member Functions;  MethodKNN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""KNN"");  standard constructor ;  ;  MethodKNN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodKNN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to XML ;  ; const Ranking * CreateRanking ();  no ranking available ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  Compute classifier response. ;  ; const std::vector< Float_t > & GetRegressionValues ();  Return vector of averages for target values of k-nearest neighbors. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read the weights ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromStream (TFile &rf);  read weights from ROOT file ;  ; void ReadWeightsFromXML (void *wghtnode);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (void);  kNN training ;  ; void WriteWeightsToStream (TFile &rf) const;  save weights to ROOT file ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodKNN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodKNN.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodLD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodLD Class ReferenceTMVA. ; Linear Discriminant. ; Can compute multidimensional output for regression (although it computes every dimension separately) ; Definition at line 50 of file MethodLD.h. Public Member Functions;  MethodLD (const TString &jobName, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption=""LD"");  standard constructor for the LD ;  ;  MethodLD (DataSetInfo &dsi, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodLD (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  create XML description for LD classification and regression (for arbitrary number of output classes/targets) ;  ; const Ranking * CreateRanking ();  computes ranking of input variables ;  ; void DeclareOptions ();  MethodLD options. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  Returns the MVA classification output. ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  Calculates the regression output. ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  LD can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; void ProcessOptions ();  this is the preparation for training ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &i);  read LD coefficients from weight file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  read coefficients from xml weight file ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLD.html:70,Guid,Guide,70,doc/master/classTMVA_1_1MethodLD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLD.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodLikelihood Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodLikelihood Class ReferenceTMVA. ; Likelihood analysis (""non-parametric approach"") ; Also implemented is a ""diagonalized likelihood approach"", which improves over the uncorrelated likelihood approach by transforming linearly the input variables into a diagonal space, using the square-root of the covariance matrix; The method of maximum likelihood is the most straightforward, and certainly among the most elegant multivariate analyser approaches. We define the likelihood ratio, \( R_L \), for event \( i \), by:. \[; R_L(i) = \frac{L_S(i)}{L_B(i) + L_B(i)}; \]. Here the signal and background likelihoods, \( L_S \), \( L_B \), are products of the corresponding probability densities, \( p_S \), \( p_B \), of the \( N_{var} \) discriminating variables used in the MVA:. \[; L_S(i) \ \prod_{j=1}^{N_{var}} p_{Sj} (i); \]. and accordingly for \( L_B \). In practise, TMVA uses polynomial splines to estimate the probability density functions (PDF) obtained from the distributions of the training variables.; Note that in TMVA the output of the likelihood ratio is transformed by:. \[; R_L(i) \to R'_L(i) = -\frac{1}{\tau} ln(R_L^{-1}(i) -1); \]. to avoid the occurrence of heavy peaks at \( R_L = 0.1 \) .; Decorrelated (or ""diagonalized"") Likelihood; The biggest drawback of the Likelihood approach is that it assumes that the discriminant variables are uncorrelated. If it were the case, it can be proven that the discrimination obtained by the above likelihood ratio is optimal, ie, no other method can beat it. However, in most practical applications of MVAs correlations are present. ; Linear correlations, measured from the training sample, can be taken into account ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:78,Guid,Guide,78,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodMLP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MethodMLP Class ReferenceTMVA. ; Multilayer Perceptron class built off of MethodANNBase. ; Definition at line 69 of file MethodMLP.h. Public Types; enum  EBPTrainingMode { kSequential =0; , kBatch; };  ; enum  ETrainingMethod { kBP =0; , kBFGS; , kGA; };  ;  Public Types inherited from TMVA::MethodANNBase; enum  EEstimator { kMSE =0; , kCE; };  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodMLP (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption);  standard constructor ;  ;  MethodMLP (DataSetInfo &theData, const TString &theWeightFile);  constructor from a weight file ;  ; virtual ~MethodMLP ();  destructor nothing to be done ;  ; Double_t ComputeEstimator (std::vector< Double_t > &parameters);  this function is called by GeneticANN for GA optimization ;  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  interface to the estimate ;  ; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPDEFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodPDEFoam Class ReferenceTMVA. ; The PDEFoam method is an extension of the PDERS method, which divides the multi-dimensional phase space in a finite number of hyper-rectangles (cells) of constant event density. ; This ""foam"" of cells is filled with averaged probability-density information sampled from a training event sample.; For a given number of cells, the binning algorithm adjusts the size and position of the cells inside the multidimensional phase space based on a binary-split algorithm, minimizing the variance of the event density in the cell. The binned event density information of the final foam is stored in binary trees, allowing for a fast and memory-efficient classification of events.; The implementation of PDEFoam is based on the Monte-Carlo integration package TFoam included in the analysis package ROOT. ; Definition at line 69 of file MethodPDEFoam.h. Public Types; enum  EKernel { kNone =0; , kGaus =1; , kLinN =2; };  ; typedef enum TMVA::MethodPDEFoam::EKernel EKernel;  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPDERS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodPDERS Class ReferenceTMVA. ; This is a generalization of the above Likelihood methods to \( N_{var} \) dimensions, where \( N_{var} \) is the number of input variables used in the MVA. ; If the multi-dimensional probability density functions (PDFs) for signal and background were known, this method contains the entire physical information, and is therefore optimal. Usually, kernel estimation methods are used to approximate the PDFs using the events from the training sample.; A very simple probability density estimator (PDE) has been suggested in hep-ex/0211019. The PDE for a given test event is obtained from counting the (normalized) number of signal and background (training) events that occur in the ""vicinity"" of the test event. The volume that describes ""vicinity"" is user-defined. A search method based on binary-trees is used to effectively reduce the selection time for the range search. Three different volume definitions are optional:. MinMax: the volume is defined in each dimension with respect to the full variable range found in the training sample.; RMS: the volume is defined in each dimensions with respect to the RMS estimated from the training sample.; Adaptive: a volume element is defined in each dimensions with respect to the RMS estimated from the training sample. The overall scale of the volume element is then determined for each event so that the total number of events confined in the volume be within a user-defined range. The adaptive range search is used by default. ; Definition at line 61 of file MethodPDERS.h. Public Member Functions;  MethodPDERS (const TStrin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html:73,Guid,Guide,73,doc/master/classTMVA_1_1MethodPDERS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDERS.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TMVA::MethodPyAdaBoost Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodPyAdaBoost Class Reference. . Definition at line 35 of file MethodPyAdaBoost.h. Public Member Functions;  MethodPyAdaBoost (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodPyAdaBoost (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyAdaBoost ();  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual TClass * IsA () const;  ; void ProcessOptions ();  ; virtual void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase (); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyAdaBoost.html:78,Guid,Guide,78,doc/master/classTMVA_1_1MethodPyAdaBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyAdaBoost.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPyGTB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodPyGTB Class Reference. . Definition at line 33 of file MethodPyGTB.h. Public Member Functions;  MethodPyGTB (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodPyGTB (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyGTB (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; virtual void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html:73,Guid,Guide,73,doc/master/classTMVA_1_1MethodPyGTB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyGTB.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPyKeras Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodPyKeras Class Reference. . Definition at line 34 of file MethodPyKeras.h. Public Types; enum  EBackendType { kUndefined = -1; , kTensorFlow = 0; , kTheano = 1; , kCNTK = 2; };  enumeration defining the used Keras backend More...;  ;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  MethodPyKeras (const TString &jobName, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  MethodPyKeras (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyKeras ();  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; void GetHelpMessage () const;  ; EBackendType GetKerasBackend ();  Get the Keras backend (can be: TensorFlow, Theano or CNTK) ;  ; TString GetKerasBackendName ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower, Double_t *errUpper);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt, Long64_t lastEvt, Bool_t logProgress);  get all the MVA values for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodPyKeras.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPyRandomForest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodPyRandomForest Class Reference. . Definition at line 33 of file MethodPyRandomForest.h. Public Member Functions;  MethodPyRandomForest (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodPyRandomForest (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyRandomForest (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html:82,Guid,Guide,82,doc/master/classTMVA_1_1MethodPyRandomForest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyRandomForest.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodPyTorch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodPyTorch Class Reference. . Definition at line 34 of file MethodPyTorch.h. Public Member Functions;  MethodPyTorch (const TString &jobName, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  MethodPyTorch (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodPyTorch ();  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; void GetHelpMessage () const;  ; std::vector< Float_t > & GetMulticlassValues ();  ; Double_t GetMvaValue (Double_t *errLower, Double_t *errUpper);  ; std::vector< Double_t > GetMvaValues (Long64_t firstEvt, Long64_t lastEvt, Bool_t logProgress);  get all the MVA values for the events of the current Data type ;  ; std::vector< Float_t > & GetRegressionValues ();  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t);  ; void Init ();  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::PyMethodBase;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodPyTorch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodRSNNS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodRSNNS Class Reference. . Definition at line 33 of file MethodRSNNS.h. Public Member Functions;  MethodRSNNS (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodRSNNS (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodRSNNS (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html:73,Guid,Guide,73,doc/master/classTMVA_1_1MethodRSNNS.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRSNNS.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodRSVM Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodRSVM Class Reference. . Definition at line 33 of file MethodRSVM.h. Public Member Functions;  MethodRSVM (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodRSVM (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodRSVM (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRSVM.html:72,Guid,Guide,72,doc/master/classTMVA_1_1MethodRSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRSVM.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodRXGB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; Friends |; List of all members ; TMVA::MethodRXGB Class Reference. . Definition at line 33 of file MethodRXGB.h. Public Member Functions;  MethodRXGB (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  ;  MethodRXGB (DataSetInfo &dsi, const TString &theWeightFile);  ;  ~MethodRXGB (void);  ; virtual void AddWeightsXMLTo (void *) const;  ; const Ranking * CreateRanking ();  ; void DeclareOptions ();  ; Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr);  ; virtual std::vector< Double_t > GetMvaValues (Long64_t firstEvt=0, Long64_t lastEvt=-1, Bool_t logProgress=false);  get all the MVA values for the events of the current Data type ;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  ; void Init ();  ; virtual void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for method (classification only at present) ;  ; void ProcessOptions ();  ; void ReadModelFromFile ();  ; virtual void ReadWeightsFromStream (std::istream &);  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (TFile &);  ; virtual void ReadWeightsFromXML (void *);  ; virtual void TestClassification ();  initialization ;  ; void Train ();  ;  Public Member Functions inherited from TMVA::RMethodBase;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html:72,Guid,Guide,72,doc/master/classTMVA_1_1MethodRXGB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRXGB.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodRuleFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodRuleFit Class ReferenceTMVA. ; J Friedman's RuleFit method. ; Definition at line 48 of file MethodRuleFit.h. Public Member Functions;  MethodRuleFit (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodRuleFit (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodRuleFit (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  add the rules to XML node ;  ; const Ranking * CreateRanking ();  computes ranking of input variables ;  ; const std::vector< TMVA::DecisionTree * > & GetForest () const;  ; Double_t GetGDErrScale () const;  ; Int_t GetGDNPathSteps () const;  ; Double_t GetGDPathEveFrac () const;  ; Double_t GetGDPathStep () const;  ; Double_t GetGDValidEveFrac () const;  ; Double_t GetLinQuantile () const;  ; Double_t GetMaxFracNEve () const;  ; TDirectory * GetMethodBaseDir () const;  ; Double_t GetMinFracNEve () const;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns MVA value for given event ;  ; Int_t GetNCuts () const;  ; Int_t GetNTrees () const;  ; TMVA::DecisionTree::EPruneMethod GetPruneMethod () const;  ; Double_t GetPruneStrength () const;  ; Int_t GetRFNendnodes () const;  ; Int_t GetRFNrules () const;  ; const TString GetRFWorkDir () const;  ; const RuleFit * GetRuleFitConstPtr () const;  ; RuleFit * GetRuleFitPtr ();  ; SeparationBase * GetSeparationBase () const;  ; const SeparationBase * GetSeparationBaseConst () const;  ; const std::vector< TMVA::Event * > & GetTrainingEvents () const;  ; Double_t GetTreeEveFrac () const;  ; virtual Bool_t HasA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodRuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodRuleFit.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodSVM Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodSVM Class ReferenceTMVA. ; SMO Platt's SVM classifier with Keerthi & Shavade improvements. ; Definition at line 61 of file MethodSVM.h. Public Member Functions;  MethodSVM (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodSVM (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodSVM (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write configuration to xml file ;  ; const Ranking * CreateRanking ();  ; void GetMGamma (const std::vector< float > &gammas);  Produces GammaList string for multigaussian kernel to be written to xml file. ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns MVA value for given event ;  ; const std::vector< Float_t > & GetRegressionValues ();  ; std::map< TString, std::vector< Double_t > > GetTuningOptions ();  GetTuningOptions Function to allow for ranges and number of steps (for scan) when optimising kernel function parameters. ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  SVM can handle classification with 2 classes and regression with one regression-target. ;  ; void Init (void);  default initialisation ;  ; virtual TClass * IsA () const;  ; std::vector< TMVA::SVKernelFunction::EKernelType > MakeKernelList (std::string multiKernels, TString kernel);  MakeKernelList Function providing string manipulation for product or sum of kernels functions to take list of kernels specified in the booking of the method and provide a vector of SV kernels to iterate over in SVKernelFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MethodSVM.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodSVM.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MethodTMlpANN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MethodTMlpANN Class ReferenceTMVA. ; This is the TMVA TMultiLayerPerceptron interface class. ; It provides the training and testing the ROOT internal MLP class in the TMVA framework.; Available learning methods:. Stochastic; Batch; SteepestDescent; RibierePolak; FletcherReeves; BFGS. See the TMultiLayerPerceptron class description for details on this ANN. ; Definition at line 47 of file MethodTMlpANN.h. Public Member Functions;  MethodTMlpANN (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption=""3000:N-1:N-2"");  standard constructor ;  ;  MethodTMlpANN (DataSetInfo &theData, const TString &theWeightFile);  constructor from weight file ;  ; virtual ~MethodTMlpANN (void);  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to xml file ;  ; const Ranking * CreateRanking ();  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  calculate the value of the neural net for the current event ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  TMlpANN can handle classification with 2 classes. ;  ; virtual TClass * IsA () const;  ; void MakeClass (const TString &classFileName=TString("""")) const;  create reader class for classifier -> overwrites base class function create specific class for TMultiLayerPerceptron ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read weights from stream since the MLP can not read from the stream, we 1st: write the weights to temporary file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: TMVA::MinuitFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::MinuitFitter Class ReferenceTMVA. ; /Fitter using MINUIT ; Definition at line 48 of file MinuitFitter.h. Public Member Functions;  MinuitFitter (IFitterTarget &target, const TString &name, std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~MinuitFitter ();  destructor ;  ; Double_t EstimatorFunction (std::vector< Double_t > &pars);  performs the fit by calling Run(pars) ;  ; void Init ();  minuit-specific settings ;  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  performs the fit ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html:74,Guid,Guide,74,doc/master/classTMVA_1_1MinuitFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::MinuitWrapper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::MinuitWrapper Class ReferenceTMVA. ; Wrapper around MINUIT. ; Definition at line 46 of file MinuitWrapper.h. Public Member Functions;  MinuitWrapper (IFitterTarget &target, Int_t maxpar);  constructor ;  ; virtual ~MinuitWrapper ();  ; void Clear (Option_t *=nullptr);  reset the fitter environment ;  ; TObject * Clone (char const *) const;  produces a clone of this MinuitWrapper ;  ; Int_t Eval (Int_t, Double_t *, Double_t &, Double_t *, Int_t);  std::vector<Double_t> parameters( npar ); ;  ; Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs);  Execute a fitter command; command : command string args : list of nargs command arguments. ;  ; Int_t GetErrors (Int_t ipar, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &globcc);  return current errors for a parameter ;  ; Int_t GetStats (Double_t &amin, Double_t &edm, Double_t &errdef, Int_t &nvpar, Int_t &nparx);  return global fit parameters ;  ; virtual TClass * IsA () const;  ; void SetFitterTarget (IFitterTarget &target);  ; Int_t SetParameter (Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh);  set initial values for a parameter ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMinuit;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit default destructor. ;  ; virtual void BuildArrays (Int_t maxpar=15);  Create internal Minuit arrays for the maxpar parameters. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html:75,Guid,Guide,75,doc/master/classTMVA_1_1MinuitWrapper.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MinuitWrapper.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMVA::MisClassificationError Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::MisClassificationError Class ReferenceTMVA. ; Implementation of the MisClassificationError as separation criterion. ; Definition at line 46 of file MisClassificationError.h. Public Member Functions;  MisClassificationError ();  ;  MisClassificationError (const MisClassificationError &g);  ; virtual ~MisClassificationError ();  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Misclassification error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)) ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/MisClassificationError.h>. Inherita",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html:84,Guid,Guide,84,doc/master/classTMVA_1_1MisClassificationError.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Monitoring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::Monitoring Class Reference. . Definition at line 18 of file Monitoring.h. Public Member Functions;  Monitoring ();  ;  ~Monitoring ();  ; void addPoint (std::string histoName, double x);  ; void addPoint (std::string histoName, double x, double y);  ; void clear (std::string histoName);  ; void create (std::string histoName, int bins, double min, double max);  ; void create (std::string histoName, int bins, double min, double max, int bins2, double min2, double max2);  ; bool exists (std::string histoName);  ; bool exists (TH1F *dummy, std::string histoName);  ; bool exists (TH2F *dummy, std::string histoName);  ; TCanvas * GetCanvas ();  ; void pads (int numPads);  ; void plot (std::string histoName, std::string options=""L"", int pad=0, EColor color=kBlue);  ; void ProcessEvents ();  ; void Start ();  . Protected Member Functions; TH1F * getHistogram (const TH1F *dummy, std::string histoName, int bins=0, double min=0, double max=0);  ; TH2F * getHistogram (const TH2F *dummy, std::string histoName, int bins=0, double min=0, double max=0, int bins2=0, double min2=0, double max2=0);  . Private Attributes; TCanvas * fCanvas;  ; std::map< std::string, TH1F * > m_histos1D;  ; std::map< std::string, TH2F * > m_histos2D;  . #include <TMVA/Monitoring.h>; Constructor & Destructor Documentation. ◆ Monitoring(). TMVA::Monitoring::Monitoring ; (; ). inline . Definition at line 26 of file Monitoring.h. ◆ ~Monitoring(). TMVA::Monitoring::~Monitoring ; (; ). inline . Definition at line 31 of file Monitoring.h. Member Function Documentation. ◆ addPoint() [1/2]. void TMVA::Monitoring::addPoint ; (; std::string ; histoName, . double ; x . ). inline . Definition at line 169 of file Monitoring.h. ◆ addPoint() [2/2]. void TMVA::Monitoring::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Monitoring.html:72,Guid,Guide,72,doc/master/classTMVA_1_1Monitoring.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Monitoring.html,2,"['Guid', 'clear']","['Guide', 'clear']"
Usability,". ROOT: TMVA::MsgLogger Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::MsgLogger Class ReferenceTMVA. ; ostringstream derivative to redirect and format output ; Definition at line 57 of file MsgLogger.h. Public Member Functions;  MsgLogger (const MsgLogger &parent);  copy constructor ;  ;  MsgLogger (const std::string &source, EMsgType minType=kINFO);  constructor ;  ;  MsgLogger (const TObject *source, EMsgType minType=kINFO);  constructor ;  ;  MsgLogger (EMsgType minType=kINFO);  constructor ;  ;  ~MsgLogger ();  destructor ;  ; std::string GetFormattedSource () const;  make sure the source name is no longer than fgMaxSourceSize: ;  ; EMsgType GetMinType () const;  ; std::string GetPrintedSource () const;  the full logger prefix ;  ; std::string GetSource () const;  ; virtual TClass * IsA () const;  ; MsgLogger & operator<< (EMsgType type);  ; MsgLogger & operator<< (MsgLogger &(*_f)(MsgLogger &));  ; MsgLogger & operator<< (std::ios &(*_f)(std::ios &));  ; MsgLogger & operator<< (std::ostream &(*_f)(std::ostream &));  ; template<class T > ; MsgLogger & operator<< (T arg);  ; MsgLogger & operator= (const MsgLogger &parent);  assignment operator ;  ; void SetMinType (EMsgType minType);  ; void SetSource (const std::string &source);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void App",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html:71,Guid,Guide,71,doc/master/classTMVA_1_1MsgLogger.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Node Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Private Attributes |; Friends |; List of all members ; TMVA::Node Class ReferenceabstractTMVA. ; Node for the BinarySearch or Decision Trees. ; For the binary search tree, it basically consists of the EVENT, and pointers to the parent and daughters; In case of the Decision Tree, it specifies parent and daughters, as well as ""which variable is used"" in the selection of this node, including the respective cut value. ; Definition at line 58 of file Node.h. Public Member Functions;  Node ();  ;  Node (const Node &n);  copy constructor, make sure you don't just copy the pointer to the node, but that the parents/daughters are initialized to 0 (and set by the copy constructors of the derived classes ;  ;  Node (Node *p, char pos);  constructor of a daughter node as a daughter of 'p' ;  ; virtual ~Node ();  node destructor ;  ; virtual void AddAttributesToNode (void *node) const =0;  ; virtual void AddContentToNode (std::stringstream &s) const =0;  ; void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; Int_t CountMeAndAllDaughters () const;  recursively go through the part of the tree below this node and count all daughters ;  ; virtual Node * CreateNode () const =0;  ; int GetCount ();  returns the global number of instantiated nodes ;  ; UInt_t GetDepth () const;  ; virtual Node * GetLeft () const;  ; virtual Node * GetParent () const;  ; virtual TMVA::BinaryTree * GetParentTree () const;  ; char GetPos () const;  ; virtual Node * GetRight () const;  ; virtual Bool_t GoesLeft (const Event &) const =0;  ; virtual Bool_t GoesRight (const Event &) const =0;  ; virtual TClass * IsA () const;  ; virtual void Print (std::ostream &os) const =0;  ; virtual void PrintRec (std::ostream &os) const =0;  ; virtual void ReadAttributes (void *node",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Node.html:66,Guid,Guide,66,doc/master/classTMVA_1_1Node.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Node.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::OptimizeConfigParameters Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::OptimizeConfigParameters Class ReferenceTMVA. . Definition at line 49 of file OptimizeConfigParameters.h. Public Member Functions;  OptimizeConfigParameters (MethodBase *const method, std::map< TString, TMVA::Interval * > tuneParameters, TString fomType=""Separation"", TString optimizationType=""GA"");  Constructor which sets either ""Classification or Regression"". ;  ; virtual ~OptimizeConfigParameters ();  the destructor (delete the OptimizeConfigParameters, store the graph and .. delete it) ;  ; virtual TClass * IsA () const;  ; std::map< TString, Double_t > optimize ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::IFitterTarget;  IFitterTarget ();  constructor ;  ; virtual ~IFitterTarget ();  ; virtual void ProgressNotifier (TString, TString);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::IFitterTarget; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Public Attributes; friend TestOptimizeConfigParameters;  . Private Member Functions; Double_t EstimatorFunction (std::vector< Double_t > &);  return the estimator (from current FOM) for the fitting interface ;  ; Double_t GetBkgEffAtSigEff (Double_t sigEff=0.5);  calculate the background efficiency for a given signal efficiency ;  ; Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:86,Guid,Guide,86,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Option< T * > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::Option< T * > Class Template Reference. ; template<typename T>; class TMVA::Option< T * >; Definition at line 131 of file Option.h. Public Member Functions;  Option (T *&ref, Int_t size, const TString &name, const TString &desc);  ; virtual ~Option ();  ; virtual Int_t GetArraySize () const;  ; TString GetValue (Int_t i) const;  ; virtual Bool_t IsArrayOpt () const;  ; virtual void Print (std::ostream &, Int_t levelofdetail=0) const;  ; virtual Bool_t SetValue (const TString &val, Int_t i=0);  set value for option ;  ; T & Value (Int_t i);  ; const T & Value (Int_t i) const;  ;  Public Member Functions inherited from TMVA::Option< T >;  Option (T &ref, const TString &name, const TString &desc);  ; void AddPreDefVal (const Bool_t &);  ; void AddPreDefVal (const Float_t &);  ; virtual void AddPreDefVal (const T &);  ; virtual Bool_t HasPreDefinedVal () const;  ; virtual Bool_t IsPreDefinedVal (const TString &) const;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual void PrintPreDefs (std::ostream &, Int_t levelofdetail=0) const;  ;  Public Member Functions inherited from TMVA::OptionBase;  OptionBase (const TString &name, const TString &desc);  constructor ;  ; virtual ~OptionBase ();  ; const TString & Description () const;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual TClass * IsA () const;  ; Bool_t IsSet () const;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const char * TheName () const;  ;  Publ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html:84,Guid,Guide,84,doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Option_3_01T_01_5_01_4.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Option< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::Option< T > Class Template Reference. ; template<class T>; class TMVA::Option< T >; Definition at line 97 of file Option.h. Public Member Functions;  Option (T &ref, const TString &name, const TString &desc);  ; virtual ~Option ();  ; void AddPreDefVal (const Bool_t &);  ; void AddPreDefVal (const Float_t &);  ; virtual void AddPreDefVal (const T &);  ; virtual Int_t GetArraySize () const;  ; TString GetValue (Int_t i) const;  ; virtual TString GetValue (Int_t i=-1) const;  ; TString GetValue (Int_t) const;  ; virtual Bool_t HasPreDefinedVal () const;  ; virtual Bool_t IsArrayOpt () const;  ; virtual Bool_t IsPreDefinedVal (const TString &) const;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual void Print (std::ostream &, Int_t levelofdetail=0) const;  ; virtual void Print (std::ostream &, Int_t levelofdetail=0) const=0;  ; virtual void PrintPreDefs (std::ostream &, Int_t levelofdetail=0) const;  ; virtual const T & Value (Int_t i=-1) const;  ;  Public Member Functions inherited from TMVA::OptionBase;  OptionBase (const TString &name, const TString &desc);  constructor ;  ; virtual ~OptionBase ();  ; const TString & Description () const;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual TClass * IsA () const;  ; Bool_t IsSet () const;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual Bool_t SetValue (const TString &vs, Int_t i=-1);  set value for option ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Option.html:82,Guid,Guide,82,doc/master/classTMVA_1_1Option.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Option.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::OptionBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::OptionBase Class ReferenceabstractTMVA. ; Class for TMVA-option handling. ; Definition at line 52 of file Option.h. Public Member Functions;  OptionBase (const TString &name, const TString &desc);  constructor ;  ; virtual ~OptionBase ();  ; const TString & Description () const;  ; virtual Int_t GetArraySize () const =0;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual TString GetValue (Int_t i=-1) const =0;  ; virtual Bool_t HasPreDefinedVal () const =0;  ; virtual TClass * IsA () const;  ; virtual Bool_t IsArrayOpt () const =0;  ; virtual Bool_t IsPreDefinedVal (const TString &) const =0;  ; Bool_t IsSet () const;  ; virtual void Print (Option_t *option="""") const;  This method must be overridden when a class wants to print itself. ;  ; virtual void Print (std::ostream &, Int_t levelofdetail=0) const =0;  ; virtual Bool_t SetValue (const TString &vs, Int_t i=-1);  set value for option ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const char * TheName () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Chec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptionBase.html:72,Guid,Guide,72,doc/master/classTMVA_1_1OptionBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptionBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::OptionMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::OptionMap Class ReferenceTMVA. ; class to storage options for the differents methods ; Definition at line 33 of file OptionMap.h. Classes; class  Binding;  . Public Member Functions;  OptionMap (const Char_t *options, const TString name=""Option"");  ;  OptionMap (const TString options="""", const TString name=""Option"");  ; virtual ~OptionMap ();  ; template<class T > ; T GetValue (const TString &key);  ; template<class T > ; T GetValue (const TString &key) const;  ; Bool_t HasKey (TString key);  ; virtual TClass * IsA () const;  ; Bool_t IsEmpty ();  ; OptionMap & operator= (TString options);  ; Binding & operator[] (TString key);  ; void ParseOption (TString options);  ; void Print () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Binding fBinder;  ; TMVA::MsgLogger fLogger;  ; TString fName;  ; std::map< TString, TString > fOptMap;  . #include <TMVA/OptionMap.h>; Constructor & Destructor Documentation. ◆ OptionMap() [1/2]. TMVA::OptionMap::OptionMap ; (; const TString ; options = """", . const TString ; name = ""Option"" . ). inline . Definition at line 95 of file OptionMap.h. ◆ OptionMap() [2/2]. TMVA::OptionMap::OptionMap ; (; const Char_t * ; options, . const TString ; name = ""Option"" . ). inline . Definition at line 99 of file OptionMap.h. ◆ ~OptionMap(). virtual TMVA::OptionMap::~OptionMap ; (; ). inlinevirtual . Definition at line 103 of file OptionMap.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::OptionMap::Cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptionMap.html:71,Guid,Guide,71,doc/master/classTMVA_1_1OptionMap.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptionMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoam Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TMVA::PDEFoam Class ReferenceTMVA. ; Implementation of PDEFoam. ; The PDEFoam method is an extension of the PDERS method, which uses self-adapting binning to divide the multi-dimensional phase space in a finite number of hyper-rectangles (boxes).; For a given number of boxes, the binning algorithm adjusts the size and position of the boxes inside the multidimensional phase space, minimizing the variance of the signal and background densities inside the boxes. The binned density information is stored in binary trees, allowing for a very fast and memory-efficient classification of events.; The implementation of the PDEFoam is based on the monte-carlo integration package TFoam included in the analysis package ROOT.; The class TMVA::PDEFoam defines the default interface for the PDEFoam variants:. PDEFoamEvent; PDEFoamDiscriminant; PDEFoamTarget; PDEFoamMultiTarget; PDEFoamDecisionTree. Per default PDEFoam stores in the cells the number of events (event weights) and therefore acts as an event density estimator. However, the above listed derived classes override this behaviour to implement certain PDEFoam variations.; In order to use PDEFoam the user has to set the density estimator of the type TMVA::PDEFoamDensityBase, which is used to during the foam build-up. The default PDEFoam should be used with PDEFoamEventDensity. ; Definition at line 79 of file PDEFoam.h. Public Member Functions;  PDEFoam ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoam (const TString &);  User constructor, to be employed by the user. ;  ; virtual ~PDEFoam ();  Default destructor. ;  ; void AddVariableName (const char *s);  ; void AddVariableName (TObjString *s);  ; void CheckAll (Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html:69,Guid,Guide,69,doc/master/classTMVA_1_1PDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoam.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamCell Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::PDEFoamCell Class ReferenceTMVA. . Definition at line 41 of file PDEFoamCell.h. Public Member Functions;  PDEFoamCell ();  Default constructor for streamer. ;  ;  PDEFoamCell (const PDEFoamCell &);  Copy constructor. ;  ;  PDEFoamCell (Int_t);  User constructor allocating single empty Cell. ;  ; virtual ~PDEFoamCell ();  Destructor. ;  ; void CalcVolume ();  Calculates volume of the cell using size params which are calculated. ;  ; void Fill (Int_t, PDEFoamCell *, PDEFoamCell *, PDEFoamCell *);  Fills in certain data into newly allocated cell. ;  ; Int_t GetBest () const;  ; PDEFoamCell * GetDau0 () const;  ; PDEFoamCell * GetDau1 () const;  ; UInt_t GetDepth ();  Get depth of cell in binary tree, where the root cell has depth 1. ;  ; Double_t GetDriv () const;  ; TObject * GetElement () const;  ; void GetHcub (PDEFoamVect &, PDEFoamVect &) const;  Provides size and position of the cell These parameter are calculated by analyzing information in all parents cells up to the root cell. ;  ; void GetHSize (PDEFoamVect &) const;  Provides size of the cell Size parameters are calculated by analyzing information in all parents cells up to the root cell. ;  ; Double_t GetIntg () const;  ; PDEFoamCell * GetPare () const;  ; Int_t GetSerial () const;  ; Int_t GetStat () const;  ; UInt_t GetTreeDepth (UInt_t depth=0);  Get depth of cell tree, starting at this cell. ;  ; Double_t GetVolume () const;  ; Double_t GetXdiv () const;  ; virtual TClass * IsA () const;  ; void Print (Option_t *option) const;  Printout of the cell geometry parameters for the debug purpose. ;  ; void SetBest (Int_t Best);  ; void SetDau0 (PDEFoamCell *Daug);  ; void SetDau1 (PDEFoamCell *Daug);  ; void SetDriv (Double_t Driv);  ; void SetElement (TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamCell.html:73,Guid,Guide,73,doc/master/classTMVA_1_1PDEFoamCell.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamCell.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamDecisionTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::PDEFoamDecisionTree Class ReferenceTMVA. ; This PDEFoam variant acts like a decision tree and stores in every cell the discriminant. ; D = #events with given class / total number of events; as well as the statistical error on the discriminant. It therefore acts as a discriminant estimator. The decision tree-like behaviour is achieved by overriding PDEFoamDiscriminant::Explore() to use a decision tree-like cell splitting algorithm (given a separation type).; This PDEFoam variant should be booked together with the PDEFoamDecisionTreeDensity density estimator, which returns the events in a cell without sampling. ; Definition at line 39 of file PDEFoamDecisionTree.h. Public Member Functions;  PDEFoamDecisionTree ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamDecisionTree (const TString &, SeparationBase *sepType, UInt_t cls);  Parameters: ;  ; virtual ~PDEFoamDecisionTree ();  Destructor deletes fSepType. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamDiscriminant;  PDEFoamDiscriminant ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamDiscriminant (const TString &, UInt_t);  ; virtual ~PDEFoamDiscriminant ();  ; virtual void FillFoamCells (const Event *ev, Float_t wt);  This function fills an event into the discriminant PDEFoam. ;  ; virtual void Finalize ();  Calc discriminator and its error for every cell and save it to the cell. ;  ; virtual TH2D * Project2 (Int_t, Int_t, ECellValue, PDEFoamKernelBase *, UInt_t);  Project foam variable idim1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html:81,Guid,Guide,81,doc/master/classTMVA_1_1PDEFoamDecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamDecisionTreeDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamDecisionTreeDensity Class ReferenceTMVA. ; This is a concrete implementation of PDEFoam. ; The Density(...) function returns allways 0. The function FillHistograms() is added, which returns all events in a given TMVA::Volume. ; Definition at line 46 of file PDEFoamDecisionTreeDensity.h. Public Member Functions;  PDEFoamDecisionTreeDensity ();  ;  PDEFoamDecisionTreeDensity (const PDEFoamDecisionTreeDensity &);  Copy constructor. ;  ;  PDEFoamDecisionTreeDensity (std::vector< Double_t > box, UInt_t cls);  User constructor: ;  ; virtual ~PDEFoamDecisionTreeDensity ();  ; virtual Double_t Density (std::vector< Double_t > &Xarg, Double_t &event_density);  This function is not used in the decision tree like PDEFoam, instead FillHist() is used. ;  ; virtual void FillHistograms (TMVA::Volume &, std::vector< TH1D * > &, std::vector< TH1D * > &, std::vector< TH1D * > &, std::vector< TH1D * > &);  Fill the given histograms with signal and background events, which are found in the volume. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamDensityBase;  PDEFoamDensityBase ();  ;  PDEFoamDensityBase (const PDEFoamDensityBase &);  Copy constructor. ;  ;  PDEFoamDensityBase (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamDensityBase ();  destructor ;  ; void FillBinarySearchTree (const Event *ev);  This method inserts the given event 'ev' it into the binary search tree. ;  ; const std::vector< Double_t > & GetBox () const;  ; void SetBox (std::vector< Double_t > box);  ; void StreamerNVirtual (TBuffer &C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html:88,Guid,Guide,88,doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDecisionTreeDensity.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamDensityBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TMVA::PDEFoamDensityBase Class ReferenceabstractTMVA. ; This is an abstract class, which provides an interface for a PDEFoam density estimator. ; Derived classes have to implement the Density(...) function, which returns the density of a certain quantity at a given phase-space point during the foam build-up.; Variants of PDEFoamDensityBase are:. PDEFoamEventDensity; PDEFoamDiscriminantDensity; PDEFoamTargetDensity; PDEFoamDecisionTreeDensity. Usage:; The user has to instantiate a child class of PDEFoamDensityBase and set the pointer to the owner, which is a PDEFoam object:; PDEFoamDensityBase *dens = new MyDensity(); pdefoam->SetDensity(dens);; Afterwards the binary search tree should be filled with TMVA events, by either using: pdefoam->FillBinarySearchTree(event);; or: dens->FillBinarySearchTree(event);. Definition at line 46 of file PDEFoamDensityBase.h. Public Member Functions;  PDEFoamDensityBase ();  ;  PDEFoamDensityBase (const PDEFoamDensityBase &);  Copy constructor. ;  ;  PDEFoamDensityBase (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamDensityBase ();  destructor ;  ; virtual Double_t Density (std::vector< Double_t > &Xarg, Double_t &event_density)=0;  ; void FillBinarySearchTree (const Event *ev);  This method inserts the given event 'ev' it into the binary search tree. ;  ; const std::vector< Double_t > & GetBox () const;  ; virtual TClass * IsA () const;  ; void SetBox (std::vector< Double_t > box);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:80,Guid,Guide,80,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamDiscriminant Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamDiscriminant Class ReferenceTMVA. ; This PDEFoam variant stores in every cell the discriminant. ; D = #events with given class / total number of events; as well as the statistical error on the discriminant. It therefore acts as a discriminant estimator. It should be booked together with the PDEFoamDiscriminantDensity density estimator, which returns the discriminant density at a given phase space point during the foam build-up. ; Definition at line 38 of file PDEFoamDiscriminant.h. Public Member Functions;  PDEFoamDiscriminant ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamDiscriminant (const TString &, UInt_t);  ; virtual ~PDEFoamDiscriminant ();  ; virtual void FillFoamCells (const Event *ev, Float_t wt);  This function fills an event into the discriminant PDEFoam. ;  ; virtual void Finalize ();  Calc discriminator and its error for every cell and save it to the cell. ;  ; virtual TClass * IsA () const;  ; virtual TH2D * Project2 (Int_t, Int_t, ECellValue, PDEFoamKernelBase *, UInt_t);  Project foam variable idim1 and variable idim2 to histogram. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoam;  PDEFoam ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoam (const TString &);  User constructor, to be employed by the user. ;  ; virtual ~PDEFoam ();  Default destructor. ;  ; void AddVariableName (const char *s);  ; void AddVariableName (TObjString *s);  ; void CheckAll (Int_t);  User utility, miscellaneous and debug. ;  ; void Create ();  Basic initialization of FOAM i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html:81,Guid,Guide,81,doc/master/classTMVA_1_1PDEFoamDiscriminant.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminant.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamDiscriminantDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamDiscriminantDensity Class ReferenceTMVA. ; This is a concrete implementation of PDEFoam. ; Density(...) estimates the discriminant density at a given phase-space point using range-searching. The discriminant D is defined as D = #events with given class / total number of events. Definition at line 42 of file PDEFoamDiscriminantDensity.h. Public Member Functions;  PDEFoamDiscriminantDensity ();  ;  PDEFoamDiscriminantDensity (const PDEFoamDiscriminantDensity &);  Copy constructor. ;  ;  PDEFoamDiscriminantDensity (std::vector< Double_t > box, UInt_t cls);  User constructor: ;  ; virtual ~PDEFoamDiscriminantDensity ();  ; virtual Double_t Density (std::vector< Double_t > &Xarg, Double_t &event_density);  This function is needed during the foam buildup. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamDensityBase;  PDEFoamDensityBase ();  ;  PDEFoamDensityBase (const PDEFoamDensityBase &);  Copy constructor. ;  ;  PDEFoamDensityBase (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamDensityBase ();  destructor ;  ; void FillBinarySearchTree (const Event *ev);  This method inserts the given event 'ev' it into the binary search tree. ;  ; const std::vector< Double_t > & GetBox () const;  ; void SetBox (std::vector< Double_t > box);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminantDensity.html:88,Guid,Guide,88,doc/master/classTMVA_1_1PDEFoamDiscriminantDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDiscriminantDensity.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TMVA::PDEFoamEvent Class ReferenceTMVA. ; This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. ; It therefore acts as event density estimator. It should be booked together with the PDEFoamEventDensity density estimator, which returns the event weight density at a given phase space point during the foam build-up. ; Definition at line 38 of file PDEFoamEvent.h. Public Member Functions;  PDEFoamEvent ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamEvent (const TString &);  ; virtual ~PDEFoamEvent ();  ; virtual void FillFoamCells (const Event *ev, Float_t wt);  This function fills an event weight 'wt' into the PDEFoam. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoam;  PDEFoam ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoam (const TString &);  User constructor, to be employed by the user. ;  ; virtual ~PDEFoam ();  Default destructor. ;  ; void AddVariableName (const char *s);  ; void AddVariableName (TObjString *s);  ; void CheckAll (Int_t);  User utility, miscellaneous and debug. ;  ; void Create ();  Basic initialization of FOAM invoked by the user. ;  ; void DeleteBinarySearchTree ();  Delete the foam's density estimator, which contains the binary search tree. ;  ; TH1D * Draw1Dim (ECellValue cell_value, Int_t nbin, PDEFoamKernelBase *kernel=nullptr);  Draws 1-dimensional foam (= histogram) ;  ; void FillBinarySearchTree (const Event *ev);  Insert event to internal foam's density estimator PDEFoamDensityBase. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html:74,Guid,Guide,74,doc/master/classTMVA_1_1PDEFoamEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamEventDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::PDEFoamEventDensity Class ReferenceTMVA. ; This is a concrete implementation of PDEFoam. ; Density(...) estimates the event (weight) density at a given phase-space point using range-searching. ; Definition at line 42 of file PDEFoamEventDensity.h. Public Member Functions;  PDEFoamEventDensity ();  ;  PDEFoamEventDensity (const PDEFoamEventDensity &);  Copy constructor. ;  ;  PDEFoamEventDensity (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamEventDensity ();  ; virtual Double_t Density (std::vector< Double_t > &Xarg, Double_t &event_density);  This function is needed during the foam buildup. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamDensityBase;  PDEFoamDensityBase ();  ;  PDEFoamDensityBase (const PDEFoamDensityBase &);  Copy constructor. ;  ;  PDEFoamDensityBase (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamDensityBase ();  destructor ;  ; void FillBinarySearchTree (const Event *ev);  This method inserts the given event 'ev' it into the binary search tree. ;  ; const std::vector< Double_t > & GetBox () const;  ; void SetBox (std::vector< Double_t > box);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEventDensity.html:81,Guid,Guide,81,doc/master/classTMVA_1_1PDEFoamEventDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEventDensity.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamKernelBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamKernelBase Class ReferenceabstractTMVA. ; This class is the abstract kernel interface for PDEFoam. ; The kernel can be used for manipulating (smearing) the cell values of a PDEFoam, by passing it as an argument to PDEFoam::GetCellValue(...).; Derived classes must implement the Estimate() function to provide a specific kernel behaviour. ; Definition at line 40 of file PDEFoamKernelBase.h. Public Member Functions;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue)=0;  ; virtual TClass * IsA () const;  ; MsgLogger & Log () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html:79,Guid,Guide,79,doc/master/classTMVA_1_1PDEFoamKernelBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamKernelGauss Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamKernelGauss Class ReferenceTMVA. ; This PDEFoam kernel estimates a cell value for a given event by weighting all cell values with a gauss function. ; Definition at line 38 of file PDEFoamKernelGauss.h. Public Member Functions;  PDEFoamKernelGauss (const PDEFoamKernelGauss &);  Copy constructor. ;  ;  PDEFoamKernelGauss (Float_t sigma);  Default constructor for streamer. ;  ; virtual ~PDEFoamKernelGauss ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Gaussian kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html:80,Guid,Guide,80,doc/master/classTMVA_1_1PDEFoamKernelGauss.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelGauss.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamKernelLinN Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TMVA::PDEFoamKernelLinN Class ReferenceTMVA. ; This PDEFoam kernel estimates a cell value for a given event by weighting with cell values of the nearest neighbor cells. ; Definition at line 39 of file PDEFoamKernelLinN.h. Public Member Functions;  PDEFoamKernelLinN ();  Default constructor for streamer. ;  ;  PDEFoamKernelLinN (const PDEFoamKernelLinN &);  Copy constructor. ;  ; virtual ~PDEFoamKernelLinN ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Linear neighbors kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelLinN.html:79,Guid,Guide,79,doc/master/classTMVA_1_1PDEFoamKernelLinN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelLinN.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamKernelTrivial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::PDEFoamKernelTrivial Class ReferenceTMVA. ; This class is a trivial PDEFoam kernel estimator. ; The Estimate() function returns the cell value, given an event 'txvec'. ; Definition at line 39 of file PDEFoamKernelTrivial.h. Public Member Functions;  PDEFoamKernelTrivial ();  Default constructor for streamer. ;  ;  PDEFoamKernelTrivial (const PDEFoamKernelTrivial &);  Copy constructor. ;  ; virtual ~PDEFoamKernelTrivial ();  ; virtual Float_t Estimate (PDEFoam *, std::vector< Float_t > &, ECellValue);  Simple kernel estimator. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamKernelBase;  PDEFoamKernelBase ();  message logger ;  ;  PDEFoamKernelBase (const PDEFoamKernelBase &);  Copy constructor. ;  ; virtual ~PDEFoamKernelBase ();  Destructor. ;  ; MsgLogger & Log () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html:82,Guid,Guide,82,doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamKernelTrivial.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TMVA::PDEFoamMultiTarget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamMultiTarget Class ReferenceTMVA. ; This PDEFoam variant is used to estimate multiple targets by creating an event density foam (PDEFoamEvent), which has dimension: ; dimension = number of variables + number targets; This PDEFoam variant stores in every cell the sum of event weights and the sum of the squared event weights. During evaluation for a given event, which has only variables and no targets (number of event variables is smaller than the foam dimension), the targets are estimated by finding all cells, which correspond to this event and calculate the Mean (or Mpv, depending on the ETargetSelection) cell center weighted by the event density in the cell.; This PDEFoam variant should be booked together with the PDEFoamEventDensity density estimator, which returns the event weight density at a given phase space point during the foam build-up. ; Definition at line 46 of file PDEFoamMultiTarget.h. Public Member Functions;  PDEFoamMultiTarget ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamMultiTarget (const TString &, ETargetSelection);  User constructor. ;  ; virtual ~PDEFoamMultiTarget ();  ; virtual Float_t GetCellValue (const PDEFoamCell *cell, ECellValue cv);  Returns the cell value of 'cell' corresponding to the given option 'cv'. ;  ; virtual std::vector< Float_t > GetCellValue (const std::map< Int_t, Float_t > &, ECellValue);  This function is overridden from PDFEFoam. ;  ; virtual std::vector< Float_t > GetCellValue (const std::map< Int_t, Float_t > &xvec, ECellValue cv);  This function finds all cells, which corresponds to the given (incomplete) untransformed event vector 'xvec' and returns the cell values, according to the paramet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html:80,Guid,Guide,80,doc/master/classTMVA_1_1PDEFoamMultiTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamMultiTarget.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamTarget Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamTarget Class ReferenceTMVA. ; This PDEFoam variant stores in every cell the average target fTarget (see the Constructor) as well as the statistical error on the target fTarget. ; It therefore acts as a target estimator. It should be booked together with the PDEFoamTargetDensity density estimator, which returns the target fTarget density at a given phase space point during the foam build-up. ; Definition at line 40 of file PDEFoamTarget.h. Public Member Functions;  PDEFoamTarget ();  Default constructor for streamer, user should not use it. ;  ;  PDEFoamTarget (const TString &, UInt_t);  User constructor. ;  ; virtual ~PDEFoamTarget ();  ; virtual void FillFoamCells (const Event *ev, Float_t wt);  This function fills an event into the discriminant PDEFoam. ;  ; virtual void Finalize ();  Calculate average cell target in every cell and save them to the cell. ;  ; virtual Float_t GetCellValue (const PDEFoamCell *cell, ECellValue cv);  Returns the cell value of 'cell' corresponding to the given option 'cv'. ;  ; virtual std::vector< Float_t > GetCellValue (const std::map< Int_t, Float_t > &xvec, ECellValue cv);  This function finds all cells, which corresponds to the given (incomplete) untransformed event vector 'xvec' and returns the cell values, according to the parameter 'cv'. ;  ; virtual Float_t GetCellValue (const std::vector< Float_t > &xvec, ECellValue cv, PDEFoamKernelBase *);  This function finds the cell, which corresponds to the given untransformed event vector 'xvec' and return its value, which is given by the parameter 'cv'. ;  ; virtual Float_t GetCellValue (const std::vector< Float_t > &xvec, ECellValue cv, PDEFoamKernelBase *);  This function finds the cell, wh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html:75,Guid,Guide,75,doc/master/classTMVA_1_1PDEFoamTarget.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTarget.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamTargetDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::PDEFoamTargetDensity Class ReferenceTMVA. ; This is a concrete implementation of PDEFoam. ; Density(...) estimates the target density (target number: fTarget) at a given phase-space point using range-searching. ; Definition at line 43 of file PDEFoamTargetDensity.h. Public Member Functions;  PDEFoamTargetDensity ();  ;  PDEFoamTargetDensity (const PDEFoamTargetDensity &);  Copy constructor. ;  ;  PDEFoamTargetDensity (std::vector< Double_t > box, UInt_t target);  User constructor. ;  ; virtual ~PDEFoamTargetDensity ();  ; virtual Double_t Density (std::vector< Double_t > &Xarg, Double_t &event_density);  This function is needed during the foam buildup. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::PDEFoamDensityBase;  PDEFoamDensityBase ();  ;  PDEFoamDensityBase (const PDEFoamDensityBase &);  Copy constructor. ;  ;  PDEFoamDensityBase (std::vector< Double_t > box);  User constructor. ;  ; virtual ~PDEFoamDensityBase ();  destructor ;  ; void FillBinarySearchTree (const Event *ev);  This method inserts the given event 'ev' it into the binary search tree. ;  ; const std::vector< Double_t > & GetBox () const;  ; void SetBox (std::vector< Double_t > box);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamTargetDensity.html:82,Guid,Guide,82,doc/master/classTMVA_1_1PDEFoamTargetDensity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamTargetDensity.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDEFoamVect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::PDEFoamVect Class ReferenceTMVA. . Definition at line 36 of file PDEFoamVect.h. Public Member Functions;  PDEFoamVect ();  Constructor. ;  ;  PDEFoamVect (const PDEFoamVect &);  Copy constructor. ;  ;  PDEFoamVect (Int_t);  USER Constructor. ;  ; virtual ~PDEFoamVect ();  Destructor. ;  ; Double_t GetCoord (Int_t i) const;  ; Int_t GetDim () const;  ; virtual TClass * IsA () const;  ; PDEFoamVect & operator*= (const Double_t &);  unary multiplication operator *= ;  ; PDEFoamVect operator+ (const PDEFoamVect &);  addition operator +; sum of 2 vectors: c=a+b, a=a+b, NEVER USE IT, VERY SLOW!!! ;  ; PDEFoamVect & operator+= (const PDEFoamVect &);  unary addition operator +=; adding vector c*=x, ;  ; PDEFoamVect operator- (const PDEFoamVect &);  subtraction operator -; difference of 2 vectors; c=a-b, a=a-b, NEVER USE IT, VERY SLOW!!! ;  ; PDEFoamVect & operator-= (const PDEFoamVect &);  unary subtraction operator -= ;  ; PDEFoamVect & operator= (const PDEFoamVect &);  substitution operator ;  ; PDEFoamVect & operator= (Double_t);  Loading in double prec. number, sometimes can be useful. ;  ; PDEFoamVect & operator= (Double_t[]);  Loading in ordinary double prec. vector, sometimes can be useful. ;  ; Double_t & operator[] (Int_t);  [] is for access to elements as in ordinary matrix like a[j]=b[j] (Perhaps against some strict rules but rather practical.) Range protection is built in, consequently for substitution one should use rather use a=b than explicit loop! ;  ; void Print (Option_t *option) const;  Printout of all vector components. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html:73,Guid,Guide,73,doc/master/classTMVA_1_1PDEFoamVect.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamVect.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PDF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMVA::PDF Class ReferenceTMVA. ; PDF wrapper for histograms; uses user-defined spline interpolation. ; Definition at line 63 of file PDF.h. Public Types; enum  EInterpolateMethod { ;   kSpline0; , kSpline1; , kSpline2; , kSpline3; , ;   kSpline5; , kKDE. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  PDF (const TString &name, Bool_t norm=kTRUE);  default constructor needed for ROOT I/O ;  ;  PDF (const TString &name, const TH1 *theHist, EInterpolateMethod method=kSpline2, Int_t minnsmooth=0, Int_t maxnsmooth=0, Bool_t checkHist=kFALSE, Bool_t norm=kTRUE);  constructor of spline based PDF: ;  ;  PDF (const TString &name, const TH1 *theHist, KDEKernel::EKernelType ktype, KDEKernel::EKernelIter kiter, KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm=kTRUE);  constructor of kernel based PDF: ;  ;  PDF (const TString &name, const TString &options, const TString &suffix="""", PDF *defaultPDF=nullptr, Bool_t norm=kTRUE);  ; virtual ~PDF ();  ; void AddXMLTo (void *parent);  XML file writing. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDF.html:65,Guid,Guide,65,doc/master/classTMVA_1_1PDF.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDF.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::PruningInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TMVA::PruningInfo Class Reference. . Definition at line 39 of file IPruneTool.h. Public Member Functions;  PruningInfo ();  ;  PruningInfo (Double_t q, Double_t alpha, std::vector< DecisionTreeNode * > sequence);  . Public Attributes; std::vector< DecisionTreeNode * > PruneSequence;  the regularization parameter for pruning ;  ; Double_t PruneStrength;  quality measure for a pruned subtree T of T_max ;  ; Double_t QualityIndex;  . #include <TMVA/IPruneTool.h>; Constructor & Destructor Documentation. ◆ PruningInfo() [1/2]. TMVA::PruningInfo::PruningInfo ; (; ). inline . Definition at line 43 of file IPruneTool.h. ◆ PruningInfo() [2/2]. TMVA::PruningInfo::PruningInfo ; (; Double_t ; q, . Double_t ; alpha, . std::vector< DecisionTreeNode * > ; sequence . ). inline . Definition at line 50 of file IPruneTool.h. Member Data Documentation. ◆ PruneSequence. std::vector<DecisionTreeNode*> TMVA::PruningInfo::PruneSequence. the regularization parameter for pruning ; Definition at line 47 of file IPruneTool.h. ◆ PruneStrength. Double_t TMVA::PruningInfo::PruneStrength. quality measure for a pruned subtree T of T_max ; Definition at line 46 of file IPruneTool.h. ◆ QualityIndex. Double_t TMVA::PruningInfo::QualityIndex. Definition at line 45 of file IPruneTool.h. Libraries for TMVA::PruningInfo:. [legend]; The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/IPruneTool.h. TMVAPruningInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PruningInfo.html:73,Guid,Guide,73,doc/master/classTMVA_1_1PruningInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PruningInfo.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::PyMethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Static Private Attributes |; Friends |; List of all members ; TMVA::PyMethodBase Class Referenceabstract. . Definition at line 61 of file PyMethodBase.h. Public Member Functions;  PyMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  ;  PyMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  ; virtual ~PyMethodBase ();  ; virtual const Ranking * CreateRanking ()=0;  ; virtual void DeclareOptions ()=0;  ; PyObject * Eval (TString code);  Evaluate Python code. ;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; virtual void Init ()=0;  ; virtual TClass * IsA () const;  ; virtual void ProcessOptions ()=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Train ()=0;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  che",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html:74,Guid,Guide,74,doc/master/classTMVA_1_1PyMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PyMethodBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::QuickMVAProbEstimator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::QuickMVAProbEstimator Class ReferenceTMVA. . Definition at line 11 of file QuickMVAProbEstimator.h. Classes; struct  EventInfo;  . Public Member Functions;  QuickMVAProbEstimator (Int_t nMin=40, Int_t nMax=5000);  ; virtual ~QuickMVAProbEstimator ();  ; void AddEvent (Double_t val, Double_t weight, Int_t type);  ; Double_t GetMVAProbAt (Double_t value);  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static bool compare (EventInfo e1, EventInfo e2);  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; std::vector< EventInfo > fEvtVector;  ; Bool_t fIsSorted;  ; MsgLogger * fLogger;  ; UInt_t fNMax;  ; UInt_t fNMin;  . #include <TMVA/QuickMVAProbEstimator.h>; Constructor & Destructor Documentation. ◆ QuickMVAProbEstimator(). TMVA::QuickMVAProbEstimator::QuickMVAProbEstimator ; (; Int_t ; nMin = 40, . Int_t ; nMax = 5000 . ). inline . Definition at line 21 of file QuickMVAProbEstimator.h. ◆ ~QuickMVAProbEstimator(). virtual TMVA::QuickMVAProbEstimator::~QuickMVAProbEstimator ; (; ). inlinevirtual . Definition at line 24 of file QuickMVAProbEstimator.h. Member Function Documentation. ◆ AddEvent(). void TMVA::QuickMVAProbEstimator::AddEvent ; (; Double_t ; val, . Double_t ; weight, . Int_t ; type . ). Definition at line 14 of file QuickMVAProbEstimator.cxx. ◆ Class(). static TClass * TMVA::QuickMVAProbEstimator::Class ; (; ). static . ReturnsTClass describing this class .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1QuickMVAProbEstimator.html:83,Guid,Guide,83,doc/master/classTMVA_1_1QuickMVAProbEstimator.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1QuickMVAProbEstimator.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RMethodBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TMVA::RMethodBase Class Referenceabstract. . Definition at line 48 of file RMethodBase.h. Public Member Functions;  RMethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""", ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ;  RMethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile, ROOT::R::TRInterface &_r=ROOT::R::TRInterface::Instance());  ; virtual ~RMethodBase ();  ; virtual const Ranking * CreateRanking ()=0;  ; virtual void DeclareOptions ()=0;  ; virtual Double_t GetMvaValue (Double_t *errLower=nullptr, Double_t *errUpper=nullptr)=0;  ; Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets)=0;  ; virtual void Init ()=0;  ; virtual TClass * IsA () const;  ; virtual void ProcessOptions ()=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Train ()=0;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html:73,Guid,Guide,73,doc/master/classTMVA_1_1RMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ROCCalc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ROCCalc Class ReferenceTMVA. . Definition at line 20 of file ROCCalc.h. Public Member Functions;  ROCCalc (TH1 *mvaS, TH1 *mvaB);  ;  ~ROCCalc ();  destructor ;  ; void ApplySignalAndBackgroundStyle (TH1 *sig, TH1 *bkg, TH1 *any=nullptr);  ; Double_t GetEffSForEffBof (Double_t effBref, Double_t &effSerr);  get the signal efficiency for a particular background efficiency that will be the value of the efficiency retured (does not affect the efficiency-vs-bkg plot which is done anyway. ;  ; TH1 * GetMvaBpdf ();  ; TH1 * GetMvaSpdf ();  ; TH1 * GetPurity (Int_t nStot, Int_t nBtot);  ; TH1D * GetROC ();  get the ROC curve ;  ; Double_t GetROCIntegral ();  code to compute the area under the ROC ( rej-vs-eff ) curve ;  ; Double_t GetSignalReferenceCut ();  ; TH1 * GetSignificance (Int_t nStot, Int_t nBtot);  ; Bool_t GetStatus ();  ; void ResetStatus ();  . Private Member Functions; Double_t GetEffForRoot (Double_t theCut);  returns efficiency as function of cut ;  ; MsgLogger & Log () const;  message logger ;  ; Double_t Root (Double_t);  Root finding using Brents algorithm; taken from CERNLIB function RZERO. ;  . Private Attributes; TH1D * effBvsS;  ; Double_t fAbsTol;  absolute tolerance deviation ;  ; Int_t fCutOrientation;  +1 if larger mva value means more signal like, -1 otherwise ;  ; MsgLogger * fLogger;  ; Int_t fMaxIter;  maximum number of iterations ;  ; TH1 * fmvaB;  the input mva distributions ;  ; TH1 * fmvaBcumul;  ; TH1 * fmvaBpdf;  the normalized (and rebinned) input mva distributions ;  ; TH1 * fmvaS;  ; TH1 * fmvaScumul;  ; TH1 * fmvaSpdf;  ; UInt_t fNbins;  ; Int_t fnBtot;  ; Double_t fNevtS;  number of signal events (used in error calculation) ;  ; Int_t fnStot;  ; TH1 * fPurity;  ; Double_t fSignalCut;  MVA ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html:69,Guid,Guide,69,doc/master/classTMVA_1_1ROCCalc.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCalc.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ROCCurve Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ROCCurve Class ReferenceTMVA. . Definition at line 46 of file ROCCurve.h. Public Member Functions;  ROCCurve (const std::vector< Float_t > &mvaSignal, const std::vector< Float_t > &mvaBackground);  ;  ROCCurve (const std::vector< Float_t > &mvaSignal, const std::vector< Float_t > &mvaBackground, const std::vector< Float_t > &mvaSignalWeights, const std::vector< Float_t > &mvaBackgroundWeights);  ;  ROCCurve (const std::vector< Float_t > &mvaValues, const std::vector< Bool_t > &mvaTargets);  ;  ROCCurve (const std::vector< Float_t > &mvaValues, const std::vector< Bool_t > &mvaTargets, const std::vector< Float_t > &mvaWeights);  ;  ROCCurve (const std::vector< std::tuple< Float_t, Float_t, Bool_t > > &mvas);  ;  ~ROCCurve ();  destructor ;  ; Double_t GetEffSForEffB (Double_t effB, const UInt_t num_points=41);  Calculate the signal efficiency (sensitivity) for a given background efficiency (sensitivity). ;  ; const std::vector< std::tuple< Float_t, Float_t, Bool_t > > GetMvas () const;  ; TGraph * GetROCCurve (const UInt_t points=100);  Returns a new TGraph containing the ROC curve. ;  ; Double_t GetROCIntegral (const UInt_t points=41);  Calculates the ROC integral (AUC) ;  . Private Member Functions; std::vector< Double_t > ComputeSensitivity (const UInt_t num_points);  ; std::vector< Double_t > ComputeSpecificity (const UInt_t num_points);  ; MsgLogger & Log () const;  . Private Attributes; TGraph * fGraph;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< std::tuple< Float_t, Float_t, Bool_t > > fMva;  . #include <TMVA/ROCCurve.h>; Constructor & Destructor Documentation. ◆ ROCCurve() [1/5]. TMVA::ROCCurve::ROCCurve ; (; const std::vector< std::tuple< Float_t, Float_t, Bool_t > > & ; mvas). Definition at line 45 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html:70,Guid,Guide,70,doc/master/classTMVA_1_1ROCCurve.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ROCCurve.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RandomGenerator< TRandomLike, UIntType, max_val > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::RandomGenerator< TRandomLike, UIntType, max_val > Class Template Reference. ; template<typename TRandomLike, typename UIntType = UInt_t, UIntType max_val = kMaxUInt>; class TMVA::RandomGenerator< TRandomLike, UIntType, max_val >; Definition at line 299 of file Tools.h. Public Types; using result_type = UIntType;  . Public Member Functions;  RandomGenerator (UIntType s=0);  ; void discard (unsigned long long z);  ; UIntType operator() ();  ; void seed (UIntType s=0);  . Static Public Member Functions; static constexpr UIntType max ();  ; static constexpr UIntType min ();  . Private Attributes; TRandomLike fRandom;  . #include <TMVA/Tools.h>; Member Typedef Documentation. ◆ result_type. template<typename TRandomLike , typename UIntType = UInt_t, UIntType max_val = kMaxUInt> . using TMVA::RandomGenerator< TRandomLike, UIntType, max_val >::result_type = UIntType. Definition at line 301 of file Tools.h. Constructor & Destructor Documentation. ◆ RandomGenerator(). template<typename TRandomLike , typename UIntType = UInt_t, UIntType max_val = kMaxUInt> . TMVA::RandomGenerator< TRandomLike, UIntType, max_val >::RandomGenerator ; (; UIntType ; s = 0). inline . Definition at line 303 of file Tools.h. Member Function Documentation. ◆ discard(). template<typename TRandomLike , typename UIntType = UInt_t, UIntType max_val = kMaxUInt> . void TMVA::RandomGenerator< TRandomLike, UIntType, max_val >::discard ; (; unsigned long long ; z). inline . Definition at line 312 of file Tools.h. ◆ max(). template<typename TRandomLike , typename UIntType = UInt_t, UIntType max_val = kMaxUInt> . static constexpr UIntType TMVA::RandomGenerator< TRandomLike, UIntType, max_val >::max",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RandomGenerator.html:120,Guid,Guide,120,doc/master/classTMVA_1_1RandomGenerator.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RandomGenerator.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Rank Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::Rank Class Reference. . Definition at line 76 of file Ranking.h. Public Member Functions;  Rank (const TString &variable, Double_t rankValue);  constructor ;  ; virtual ~Rank ();  destructor ;  ; Int_t GetRank () const;  ; Double_t GetRankValue () const;  ; const TString & GetVariable () const;  ; Bool_t operator< (const Rank &other) const;  comparison operator < ;  ; Bool_t operator> (const Rank &other) const;  comparison operator > ;  ; void SetRank (Int_t rank);  . Private Attributes; Int_t fRank;  ; Double_t fRankValue;  ; TString fVariable;  . #include <TMVA/Ranking.h>; Constructor & Destructor Documentation. ◆ Rank(). TMVA::Rank::Rank ; (; const TString & ; variable, . Double_t ; rankValue . ). constructor ; Definition at line 139 of file Ranking.cxx. ◆ ~Rank(). TMVA::Rank::~Rank ; (; ). virtual . destructor ; Definition at line 149 of file Ranking.cxx. Member Function Documentation. ◆ GetRank(). Int_t TMVA::Rank::GetRank ; (; ); const. inline . Definition at line 89 of file Ranking.h. ◆ GetRankValue(). Double_t TMVA::Rank::GetRankValue ; (; ); const. inline . Definition at line 88 of file Ranking.h. ◆ GetVariable(). const TString & TMVA::Rank::GetVariable ; (; ); const. inline . Definition at line 87 of file Ranking.h. ◆ operator<(). Bool_t TMVA::Rank::operator< ; (; const Rank & ; other); const. comparison operator < ; Definition at line 156 of file Ranking.cxx. ◆ operator>(). Bool_t TMVA::Rank::operator> ; (; const Rank & ; other); const. comparison operator > ; Definition at line 165 of file Ranking.cxx. ◆ SetRank(). void TMVA::Rank::SetRank ; (; Int_t ; rank). inline . Definition at line 90 of file Ranking.h. Member Data Documentation. ◆ fRank. Int_t TMVA::Rank::fRank. private . Definition at line 97 of file Ranking.h. ◆ fRankValue. Double_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Rank.html:66,Guid,Guide,66,doc/master/classTMVA_1_1Rank.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Rank.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Ranking Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::Ranking Class ReferenceTMVA. ; Ranking for variables in method (implementation) ; Definition at line 48 of file Ranking.h. Public Member Functions;  Ranking ();  default constructor ;  ;  Ranking (const TString &context, const TString &rankingDiscriminatorName);  constructor ;  ; virtual ~Ranking ();  destructor ;  ; virtual void AddRank (const Rank &rank);  Add a new rank take ownership of it. ;  ; virtual TClass * IsA () const;  ; virtual void Print () const;  get maximum length of variable names ;  ; void SetContext (const TString &context);  ; void SetDiscrName (const TString &discrName);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; TString fContext;  the ranking context ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< TMVA::Rank > fRanking;  vector of ranks ;  ; TString fRankingDiscriminatorName;  the name of the ranking discriminator ;  . #include <TMVA/Ranking.h>; Constructor & Destructor Documentation. ◆ Ranking() [1/2]. TMVA::Ranking::Ranking ; (; ). default constructor ; Definition at line 46 of file Ranking.cxx. ◆ Ranking() [2/2]. TMVA::Ranking::Ranking ; (; const TString & ; context, . const TString & ; rankingDiscriminatorName . ). constructor ; Definition at line 57 of file Ranking.cxx. ◆ ~Ranking(). TMVA::Ranking::~Ranking ; (; ). virtual . destructor ; Definition at line 68 of file Ranking.cxx. Member Function Documentation. ◆ AddRank(). void TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Ranking.html:69,Guid,Guide,69,doc/master/classTMVA_1_1Ranking.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Ranking.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Reader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::Reader Class ReferenceTMVA. ; The Reader class serves to use the MVAs in a specific analysis context. ; Within an event loop, a vector is filled that corresponds to the variables that were used to train the MVA(s) during the training stage. This vector is transfered to the Reader, who takes care of interpreting the weight file of the MVA of choice, and to return the MVA's output. This is then used by the user for further analysis.; Usage:; // ------ before starting the event loop (eg, in the initialisation step); ; //; // create TMVA::Reader object; //; TMVA::Reader *reader = new TMVA::Reader();; ; // create a set of variables and declare them to the reader; // - the variable names must corresponds in name and type to; // those given in the weight file(s) that you use; Float_t var1, var2, var3, var4;; reader->AddVariable( ""var1"", &var1 );; reader->AddVariable( ""var2"", &var2 );; reader->AddVariable( ""var3"", &var3 );; reader->AddVariable( ""var4"", &var4 );; ; // book the MVA of your choice (prior training of these methods, ie,; // existence of the weight files is required); reader->BookMVA( ""Fisher method"", ""weights/Fisher.weights.txt"" );; reader->BookMVA( ""MLP method"", ""weights/MLP.weights.txt"" );; // ... etc; ; // ------- start your event loop; ; for (Long64_t ievt=0; ievt<myTree->GetEntries();ievt++) {; ; // fill vector with values of variables computed from those in the tree; var1 = myvar1;; var2 = myvar2;; var3 = myvar3;; var4 = myvar4;; ; // retrieve the corresponding MVA output; double mvaFi = reader->EvaluateMVA( ""Fisher method"" );; double mvaNN = reader->EvaluateMVA( ""MLP method"" );; ; // do something with these ...., e.g., fill them into your ntuple; ; } // end of event loop; ; delete",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Reader.html:68,Guid,Guide,68,doc/master/classTMVA_1_1Reader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Reader.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RegressionVariance Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::RegressionVariance Class ReferenceTMVA. ; Calculate the ""SeparationGain"" for Regression analysis separation criteria used in various training algorithms. ; There are two things: the Separation Index, and the Separation Gain Separation Index: Measure of the ""Variance"" of a sample.; Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criteria which is optimized for when trying to increase the information in the system (making the best selection ; Definition at line 66 of file RegressionVariance.h. Public Member Functions;  RegressionVariance ();  ;  RegressionVariance (const RegressionVariance &s);  ; virtual ~RegressionVariance ();  ; TString GetName ();  ; Double_t GetSeparationGain (const Double_t nLeft, const Double_t targetLeft, const Double_t target2Left, const Double_t nTot, const Double_t targetTot, const Double_t target2Tot);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; virtual Double_t GetSeparationIndex (const Double_t n, const Double_t target, const Double_t target2);  Separation Index: a simple Variance. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TString fName;  name of the concrete Separation Index implementation ;  . #includ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html:80,Guid,Guide,80,doc/master/classTMVA_1_1RegressionVariance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RegressionVariance.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Results Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::Results Class ReferenceabstractTMVA. ; Class that is the base-class for a vector of result. ; Definition at line 57 of file Results.h. Public Member Functions;  Results ();  ;  Results (const DataSetInfo *dsi, TString resultsName);  constructor ;  ; virtual ~Results ();  destructor ;  ; void Delete (Option_t *option="""") override;  delete all stored histograms ;  ; Bool_t DoesExist (const TString &alias) const;  Returns true if there is an object stored in the result for a given alias, false otherwise. ;  ; virtual Types::EAnalysisType GetAnalysisType ();  ; DataSet * GetDataSet () const;  ; const DataSetInfo * GetDataSetInfo () const;  ; TGraph * GetGraph (const TString &alias) const;  ; TH1 * GetHist (const TString &alias) const;  ; TH2 * GetHist2D (const TString &alias) const;  ; TObject * GetObject (const TString &alias) const;  Returns a stored object if it exists. ;  ; TList * GetStorage () const;  ; Types::ETreeType GetTreeType () const;  ; TClass * IsA () const override;  ; virtual const std::vector< Float_t > & operator[] (Int_t ievt) const =0;  ; void SetTreeType (Types::ETreeType type);  ; void Store (TObject *obj, const char *alias=nullptr);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append grap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:69,Guid,Guide,69,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::ResultsClassification Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ResultsClassification Class ReferenceTMVA. ; Class that is the base-class for a vector of result. ; Definition at line 48 of file ResultsClassification.h. Public Member Functions;  ResultsClassification (const DataSetInfo *dsi, TString resultsName);  constructor ;  ;  ~ResultsClassification ();  destructor ;  ; void Clear (Option_t *) override;  ; virtual void Clear (Option_t *="""");  ; Types::EAnalysisType GetAnalysisType () override;  ; Long64_t GetSize () const;  ; std::vector< Float_t > * GetValueVector ();  ; std::vector< Bool_t > * GetValueVectorTypes ();  ; TClass * IsA () const override;  ; const std::vector< Float_t > & operator[] (Int_t ievt) const override;  ; void Resize (Int_t entries);  ; void SetValue (Float_t value, Int_t ievt, Bool_t type);  set MVA response ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Results;  Results ();  ;  Results (const DataSetInfo *dsi, TString resultsName);  constructor ;  ; virtual ~Results ();  destructor ;  ; void Delete (Option_t *option="""") override;  delete all stored histograms ;  ; Bool_t DoesExist (const TString &alias) const;  Returns true if there is an object stored in the result for a given alias, false otherwise. ;  ; DataSet * GetDataSet () const;  ; const DataSetInfo * GetDataSetInfo () const;  ; TGraph * GetGraph (const TString &alias) const;  ; TH1 * GetHist (const TString &alias) const;  ; TH2 * GetHist2D (const TString &alias) const;  ; TObject * GetObject (const TString &alias) const;  Returns a stored object if it exists. ;  ; TList * GetStorage () const;  ; Types::ETre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html:83,Guid,Guide,83,doc/master/classTMVA_1_1ResultsClassification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html,3,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMVA::ResultsMulticlass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ResultsMulticlass Class ReferenceTMVA. ; Class which takes the results of a multiclass classification. ; Definition at line 55 of file ResultsMulticlass.h. Public Member Functions;  ResultsMulticlass (const DataSetInfo *dsi, TString resultsName);  constructor ;  ;  ~ResultsMulticlass ();  destructor ;  ; void Clear (Option_t *) override;  ; virtual void Clear (Option_t *="""");  ; void CreateMulticlassHistos (TString prefix, Int_t nbins, Int_t nbins_high);  this function fills the mva response histos for multiclass classification ;  ; void CreateMulticlassPerformanceHistos (TString prefix);  Create performance graphs for this classifier a multiclass setting. ;  ; Double_t EstimatorFunction (std::vector< Double_t > &) override;  ; std::vector< Float_t > & GetAchievableEff ();  ; Float_t GetAchievableEff (UInt_t cls);  ; std::vector< Float_t > & GetAchievablePur ();  ; Float_t GetAchievablePur (UInt_t cls);  ; Types::EAnalysisType GetAnalysisType () override;  ; std::vector< Double_t > GetBestMultiClassCuts (UInt_t targetClass);  calculate the best working point (optimal cut values) for the multiclass classifier ;  ; TMatrixD GetConfusionMatrix (Double_t effB);  Returns a confusion matrix where each class is pitted against each other. ;  ; Long64_t GetSize () const;  ; std::vector< std::vector< Float_t > > * GetValueVector ();  ; TClass * IsA () const override;  ; const std::vector< Float_t > & operator[] (Int_t ievt) const override;  ; void Resize (Int_t entries);  ; void SetValue (std::vector< Float_t > &value, Int_t ievt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html:79,Guid,Guide,79,doc/master/classTMVA_1_1ResultsMulticlass.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html,3,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMVA::ResultsRegression Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::ResultsRegression Class ReferenceTMVA. ; Class that is the base-class for a vector of result. ; Definition at line 52 of file ResultsRegression.h. Public Member Functions;  ResultsRegression (const DataSetInfo *dsi, TString resultsName);  constructor ;  ;  ~ResultsRegression ();  destructor ;  ; void Clear (Option_t *) override;  ; virtual void Clear (Option_t *="""");  ; void CreateDeviationHistograms (TString prefix);  ; TH2F * DeviationAsAFunctionOf (UInt_t varNum, UInt_t tgtNum);  ; Types::EAnalysisType GetAnalysisType () override;  ; Long64_t GetSize () const;  ; std::vector< std::vector< Float_t > > * GetValueVector ();  ; TClass * IsA () const override;  ; const std::vector< Float_t > & operator[] (Int_t ievt) const override;  ; TH1F * QuadraticDeviation (UInt_t tgtNum, Bool_t truncate=false, Double_t truncvalue=0.);  ; void Resize (Int_t entries);  ; void SetValue (std::vector< Float_t > &value, Int_t ievt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Results;  Results ();  ;  Results (const DataSetInfo *dsi, TString resultsName);  constructor ;  ; virtual ~Results ();  destructor ;  ; void Delete (Option_t *option="""") override;  delete all stored histograms ;  ; Bool_t DoesExist (const TString &alias) const;  Returns true if there is an object stored in the result for a given alias, false otherwise. ;  ; DataSet * GetDataSet () const;  ; const DataSetInfo * GetDataSetInfo () const;  ; TGraph * GetGraph (const TString &alias) const;  ; TH1 * GetHist (const TString &alias) const;  ; TH2 * GetHist2D (const TString &alias) const;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html:79,Guid,Guide,79,doc/master/classTMVA_1_1ResultsRegression.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsRegression.html,3,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMVA::RootFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::RootFinder Class ReferenceTMVA. ; Root finding using Brents algorithm (translated from CERNLIB function RZERO) ; Definition at line 48 of file RootFinder.h. Public Member Functions;  RootFinder (MethodBase *method, Double_t rootMin, Double_t rootMax, Int_t maxIterations=100, Double_t absTolerance=0.0);  constructor ;  ; virtual ~RootFinder (void);  destructor ;  ; virtual TClass * IsA () const;  ; Double_t Root (Double_t refValue);  Root finding using Brents algorithm; taken from CERNLIB function RZERO. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RootFinder.html:72,Guid,Guide,72,doc/master/classTMVA_1_1RootFinder.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RootFinder.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Rule Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::Rule Class ReferenceTMVA. ; Implementation of a rule. ; A rule is simply a branch or a part of a branch in a tree. It fulfills the following:. First node is the root node of the originating tree; Consists of a minimum of 2 nodes; A rule returns for a given event:; 0 : if the event fails at any node; 1 : otherwise. If the rule contains <2 nodes, it returns 0 SHOULD NOT HAPPEN!. The coefficient is found by either brute force or some sort of intelligent fitting. See the RuleEnsemble class for more info. ; Definition at line 50 of file Rule.h. Public Member Functions;  Rule ();  the simple constructor ;  ;  Rule (const Rule &other);  ;  Rule (RuleEnsemble *re);  the simple constructor ;  ;  Rule (RuleEnsemble *re, const std::vector< const TMVA::Node * > &nodes);  the main constructor for a Rule ;  ; virtual ~Rule ();  destructor ;  ; void * AddXMLTo (void *parent) const;  ; void CalcImportance ();  ; Bool_t ContainsVariable (UInt_t iv) const;  check if variable in node ;  ; Bool_t Equal (const Rule &other, Bool_t useCutValue, Double_t maxdist) const;  Compare two rules. ;  ; Bool_t EvalEvent (const Event &e) const;  ; Double_t GetCoefficient () const;  ; Double_t GetImportance () const;  ; Double_t GetImportanceRef () const;  ; UInt_t GetNcuts () const;  ; Double_t GetNorm () const;  ; UInt_t GetNumVarsUsed () const;  ; Double_t GetRelImportance () const;  ; const RuleCut * GetRuleCut () const;  ; const RuleEnsemble * GetRuleEnsemble () const;  ; Double_t GetSigma () const;  ; Double_t GetSSB () const;  ; Double_t GetSSBNeve () const;  ; Double_t GetSupport () const;  ; Bool_t IsSignalRule () const;  ; Bool_t operator< (const Rule &other) const;  comparison operator < ;  ; void operator= (const Rule &other);  ; Bool_t o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Rule.html:66,Guid,Guide,66,doc/master/classTMVA_1_1Rule.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Rule.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TMVA::RuleCut Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::RuleCut Class ReferenceTMVA. ; A class describing a 'rule cut'. ; Definition at line 36 of file RuleCut.h. Public Member Functions;  RuleCut ();  empty constructor ;  ;  RuleCut (const RuleCut &other);  ;  RuleCut (const std::vector< const TMVA::Node * > &nodes);  main constructor ;  ; virtual ~RuleCut ();  destructor ;  ; Bool_t EvalEvent (const Event &eve);  ; Char_t GetCutDoMax (Int_t is) const;  ; Char_t GetCutDoMin (Int_t is) const;  ; Double_t GetCutMax (Int_t is) const;  ; Double_t GetCutMin (Int_t is) const;  ; Double_t GetCutNeve () const;  ; Bool_t GetCutRange (Int_t sel, Double_t &rmin, Double_t &rmax, Bool_t &dormin, Bool_t &dormax) const;  get cut range for a given selector ;  ; UInt_t GetNcuts () const;  get number of cuts ;  ; UInt_t GetNvars () const;  ; Double_t GetPurity () const;  ; UInt_t GetSelector (Int_t is) const;  ; void SetCutDoMax (Int_t i, Bool_t v);  ; void SetCutDoMin (Int_t i, Bool_t v);  ; void SetCutMax (Int_t i, Double_t v);  ; void SetCutMin (Int_t i, Double_t v);  ; void SetNeve (Double_t n);  ; void SetNvars (UInt_t nc);  ; void SetPurity (Double_t ssb);  ; void SetSelector (Int_t i, UInt_t s);  . Private Member Functions; void Copy (const RuleCut &other);  ; MsgLogger & Log () const;  message logger ;  ; void MakeCuts (const std::vector< const TMVA::Node * > &nodes);  Construct the cuts from the given array of nodes. ;  . Private Attributes; std::vector< Char_t > fCutDoMax;  ; std::vector< Char_t > fCutDoMin;  ; std::vector< Double_t > fCutMax;  ; std::vector< Double_t > fCutMin;  ; Double_t fCutNeve;  ; MsgLogger * fLogger;  ; Double_t fPurity;  ; std::vector< UInt_t > fSelector;  . #include <TMVA/RuleCut.h>; Constructor & Destructor Documentation. ◆ RuleCut() [1/3]. TMVA::RuleCut::Rul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleCut.html:69,Guid,Guide,69,doc/master/classTMVA_1_1RuleCut.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleCut.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RuleEnsemble Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::RuleEnsemble Class ReferenceTMVA. . Definition at line 53 of file RuleEnsemble.h. Public Types; enum  ELearningModel { kFull =0; , kRules =1; , kLinear =2; };  . Public Member Functions;  RuleEnsemble ();  constructor ;  ;  RuleEnsemble (const RuleEnsemble &other);  copy constructor ;  ;  RuleEnsemble (RuleFit *rf);  constructor ;  ; virtual ~RuleEnsemble ();  destructor ;  ; void AddOffset (Double_t v);  ; void * AddXMLTo (void *parent) const;  write rules to XML ;  ; void CalcImportance ();  calculate the importance of each rule ;  ; Double_t CalcLinImportance ();  calculate the linear importance for each rule ;  ; Double_t CalcLinNorm (Double_t stdev);  ; Int_t CalcNRules (const TMVA::DecisionTree *dtree);  calculate the number of rules ;  ; Double_t CalcRuleImportance ();  calculate importance of each rule ;  ; void CalcRuleSupport ();  calculate the support for all rules ;  ; void CalcVarImportance ();  Calculates variable importance using eq (35) in RuleFit paper by Friedman et.al. ;  ; void CleanupLinear ();  cleanup linear model ;  ; void CleanupRules ();  cleanup rules ;  ; void ClearCoefficients (Double_t val=0);  ; void ClearLinCoefficients (Double_t val=0);  ; void ClearLinNorm (Double_t val=1.0);  ; void ClearRuleMap ();  ; Double_t CoefficientRadius ();  Calculates sqrt(Sum(a_i^2)), i=1..N (NOTE do not include a0) ;  ; Bool_t DoFull () const;  ; Bool_t DoLinear () const;  ; Bool_t DoOnlyLinear () const;  ; Bool_t DoOnlyRules () const;  ; Bool_t DoRules () const;  ; Double_t EvalEvent () const;  ; Double_t EvalEvent (const Event &e);  ; Double_t EvalEvent (const Event &e, Double_t ofs, const std::vector< Double_t > &coefs, const std::vector< Double_t > &lincoefs);  ; Double_t Eva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html:74,Guid,Guide,74,doc/master/classTMVA_1_1RuleEnsemble.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleEnsemble.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RuleFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::RuleFit Class ReferenceTMVA. ; A class implementing various fits of rule ensembles. ; Definition at line 46 of file RuleFit.h. Public Member Functions;  RuleFit (const TMVA::MethodBase *rfbase);  constructor ;  ;  RuleFit (void);  default constructor ;  ; virtual ~RuleFit (void);  destructor ;  ; void Boost (TMVA::DecisionTree *dt);  Boost the events. ;  ; void BuildTree (TMVA::DecisionTree *dt);  build the decision tree using fNTreeSample events from fTrainingEventsRndm ;  ; void CalcImportance ();  calculates the importance of each rule ;  ; Double_t CalcWeightSum (const std::vector< const TMVA::Event * > *events, UInt_t neve=0);  calculate the sum of weights ;  ; Double_t EvalEvent (const Event &e);  evaluate single event ;  ; void FillCorr (TH2F *h2, const TMVA::Rule *rule, Int_t v1, Int_t v2);  fill rule correlation between vx and vy, weighted with either the importance or the coefficient ;  ; void FillCut (TH2F *h2, const TMVA::Rule *rule, Int_t vind);  Fill cut. ;  ; void FillLin (TH2F *h2, Int_t vind);  fill lin ;  ; void FillVisHistCorr (const Rule *rule, std::vector< TH2F * > &hlist);  help routine to MakeVisHists() - fills for all correlation plots ;  ; void FillVisHistCut (const Rule *rule, std::vector< TH2F * > &hlist);  help routine to MakeVisHists() - fills for all variables ;  ; void FitCoefficients ();  Fit the coefficients for the rule ensemble. ;  ; void ForestStatistics ();  summary of statistics of all trees ;  ; Bool_t GetCorrVars (TString &title, TString &var1, TString &var2);  get first and second variables from title ;  ; const std::vector< const TMVA::DecisionTree * > & GetForest () const;  ; const MethodBase * GetMethodBase () const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFit.html:69,Guid,Guide,69,doc/master/classTMVA_1_1RuleFit.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFit.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RuleFitAPI Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::RuleFitAPI Class ReferenceTMVA. ; J Friedman's RuleFit method. ; Definition at line 51 of file RuleFitAPI.h. Classes; struct  IntParms;  ; struct  RealParms;  . Public Member Functions;  RuleFitAPI (const TMVA::MethodRuleFit *rfbase, TMVA::RuleFit *rulefit, EMsgType minType);  ; virtual ~RuleFitAPI ();  destructor ;  ; void CheckRFWorkDir ();  check if the rulefit work dir is properly setup. ;  ; const TString GetRFWorkDir () const;  ; void HowtoSetupRF ();  howto message ;  ; virtual TClass * IsA () const;  ; Bool_t ReadModelSum ();  read model from rulefit.sum ;  ; void SetRFWorkDir (const char *wdir);  set the directory containing rf_go.exe. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TestRuleFit ();  ; void TrainRuleFit ();  ; void VarImp ();  ; void WelcomeMessage ();  welcome message ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Types; enum  EModel { kRfLinear =0; , kRfRules =1; , kRfBoth =2; };  ; enum  ERFMode { kRfRegress =1; , kRfClass =2; };  ; enum  ERFProgram { kRfTrain =0; , kRfPredict; , kRfVarimp; };  . Protected Member Functions; void FillIntParmsDef ();  set default int params ;  ; void FillRealParmsDef ();  set default real params ;  ; TString GetRFName (TString name);  ; void ImportSetup ();  import setup from MethodRuleFit ;  ; void InitRuleFit ();  default initialisation SetRFWorkDir(""./rulefit""); ;  ; Bool_t OpenRFile (TString name, std::ifstream &f);  ; Bool_t OpenRFile (TString name,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html:72,Guid,Guide,72,doc/master/classTMVA_1_1RuleFitAPI.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitAPI.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::RuleFitParams Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::RuleFitParams Class ReferenceTMVA. ; A class doing the actual fitting of a linear model using rules as base functions. ; Definition at line 49 of file RuleFitParams.h. Public Member Functions;  RuleFitParams ();  constructor ;  ; virtual ~RuleFitParams ();  destructor ;  ; Int_t FindGDTau ();  This finds the cutoff parameter tau by scanning several different paths. ;  ; UInt_t GetPathIdx1 () const;  ; UInt_t GetPathIdx2 () const;  ; UInt_t GetPerfIdx1 () const;  ; UInt_t GetPerfIdx2 () const;  ; void Init ();  Initializes all parameters using the RuleEnsemble and the training tree. ;  ; void InitGD ();  Initialize GD path search. ;  ; Double_t LossFunction (const Event &e) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; Double_t LossFunction (UInt_t evtidx) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; Double_t LossFunction (UInt_t evtidx, UInt_t itau) const;  Implementation of squared-error ramp loss function (eq 39,40 in ref 1) This is used for binary Classifications where y = {+1,-1} for (sig,bkg) ;  ; void MakeGDPath ();  The following finds the gradient directed path in parameter space. ;  ; Double_t Penalty () const;  This is the ""lasso"" penalty To be used for regression. ;  ; Double_t Risk (UInt_t ind1, UInt_t ind2, Double_t neff) const;  risk assessment ;  ; Double_t Risk (UInt_t ind1, UInt_t ind2, Double_t neff, UInt_t itau) const;  risk assessment for tau model <itau> ;  ; Double_t RiskPath () const;  ; Double_t RiskPerf (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:75,Guid,Guide,75,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SVEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::SVEvent Class ReferenceTMVA. ; Event class for Support Vector Machine. ; Definition at line 40 of file SVEvent.h. Public Member Functions;  SVEvent ();  ;  SVEvent (const Event *, Float_t, Bool_t isSignal=kFALSE);  constructor ;  ;  SVEvent (const std::vector< Float_t > *, Float_t alpha, Int_t typeFlag, UInt_t ns);  constructor ;  ;  SVEvent (const std::vector< Float_t > *svector, Float_t alpha, Float_t alpha_p, Int_t typeFlag);  constructor ;  ; virtual ~SVEvent ();  destructor ;  ; Float_t GetAlpha () const;  ; Float_t GetAlpha_p () const;  ; Float_t GetCweight () const;  ; std::vector< Float_t > * GetDataVector ();  ; Float_t GetDeltaAlpha () const;  ; Float_t GetErrorCache () const;  ; Int_t GetIdx () const;  ; Float_t * GetLine () const;  ; UInt_t GetNs () const;  ; Int_t GetNVar () const;  ; Float_t GetTarget () const;  ; Int_t GetTypeFlag () const;  ; virtual TClass * IsA () const;  ; Bool_t IsInI0 () const;  ; Bool_t IsInI0a () const;  ; Bool_t IsInI0b () const;  ; Bool_t IsInI1 () const;  ; Bool_t IsInI2 () const;  ; Bool_t IsInI3 () const;  ; void Print (std::ostream &os) const;  printout ;  ; void PrintData ();  printout ;  ; void SetAlpha (Float_t alpha);  ; void SetAlpha_p (Float_t alpha);  ; void SetErrorCache (Float_t err_cache);  ; void SetIdx (Int_t idx);  ; void SetIsShrinked (Int_t isshrinked);  ; void SetLine (Float_t *line);  ; void SetNs (UInt_t ns);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateErrorCache (Float_t upercache);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVEvent.html:69,Guid,Guide,69,doc/master/classTMVA_1_1SVEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SVKernelFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::SVKernelFunction Class ReferenceTMVA. ; Kernel for Support Vector Machine. ; Definition at line 37 of file SVKernelFunction.h. Public Types; enum  EKernelType { ;   kLinear; , kRBF; , kPolynomial; , kSigmoidal; , ;   kMultiGauss; , kProd; , kSum. };  . Public Member Functions;  SVKernelFunction ();  constructor ;  ;  SVKernelFunction (EKernelType k, std::vector< EKernelType > kernels, std::vector< Float_t > gammas, Float_t gamma, Float_t order, Float_t theta);  constructor ;  ;  SVKernelFunction (EKernelType, Float_t, Float_t=0);  constructor ;  ;  SVKernelFunction (Float_t);  constructor ;  ;  SVKernelFunction (std::vector< float > params);  constructor ;  ;  ~SVKernelFunction ();  destructor ;  ; Float_t Evaluate (SVEvent *ev1, SVEvent *ev2);  ; void setCompatibilityParams (EKernelType k, UInt_t order, Float_t theta, Float_t kappa);  set old options for compatibility mode ;  . Private Attributes; Float_t fGamma;  ; Float_t fKappa;  ; EKernelType fKernel;  ; std::vector< EKernelType > fKernelsList;  ; std::vector< Float_t > fmGamma;  ; UInt_t fOrder;  ; Float_t fTheta;  . #include <TMVA/SVKernelFunction.h>; Member Enumeration Documentation. ◆ EKernelType. enum TMVA::SVKernelFunction::EKernelType. EnumeratorkLinear ; kRBF ; kPolynomial ; kSigmoidal ; kMultiGauss ; kProd ; kSum . Definition at line 41 of file SVKernelFunction.h. Constructor & Destructor Documentation. ◆ SVKernelFunction() [1/5]. TMVA::SVKernelFunction::SVKernelFunction ; (; ). constructor ; Definition at line 47 of file SVKernelFunction.cxx. ◆ SVKernelFunction() [2/5]. TMVA::SVKernelFunction::SVKernelFunction ; (; Float_t ; gamma). constructor ; Definition at line 59 of file SVKernelFunction.cxx. ◆ SVKernelFunction() [3/5]. TMVA::SVKernelFunction::SVKernelFunct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelFunction.html:78,Guid,Guide,78,doc/master/classTMVA_1_1SVKernelFunction.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SVKernelMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SVKernelMatrix Class ReferenceTMVA. ; Kernel matrix for Support Vector Machine. ; Definition at line 41 of file SVKernelMatrix.h. Public Member Functions;  SVKernelMatrix ();  constructor ;  ;  SVKernelMatrix (std::vector< TMVA::SVEvent * > *, SVKernelFunction *);  constructor ;  ;  ~SVKernelMatrix ();  destructor ;  ; Float_t * GetColumn (UInt_t col);  ; Float_t GetElement (UInt_t i, UInt_t j);  returns an element of the kernel matrix ;  ; Float_t * GetLine (UInt_t);  returns a row of the kernel matrix ;  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; SVKernelFunction * fKernelFunction;  kernel function ;  ; MsgLogger * fLogger;  ! message logger ;  ; UInt_t fSize;  matrix size ;  ; Float_t ** fSVKernelMatrix;  kernel matrix ;  . #include <TMVA/SVKernelMatrix.h>; Constructor & Destructor Documentation. ◆ SVKernelMatrix() [1/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; ). constructor ; Definition at line 53 of file SVKernelMatrix.cxx. ◆ SVKernelMatrix() [2/2]. TMVA::SVKernelMatrix::SVKernelMatrix ; (; std::vector< TMVA::SVEvent * > * ; inputVectors, . SVKernelFunction * ; kernelFunction . ). constructor ; Definition at line 64 of file SVKernelMatrix.cxx. ◆ ~SVKernelMatrix(). TMVA::SVKernelMatrix::~SVKernelMatrix ; (; ). destructor ; Definition at line 87 of file SVKernelMatrix.cxx. Member Function Documentation. ◆ GetColumn(). Float_t * TMVA::SVKernelMatrix::GetColumn ; (; UInt_t ; col). inline . Definition at line 54 of file SVKernelMatrix.h. ◆ GetElement(). Float_t TMVA::SVKernelMatrix::GetElement ; (; UInt_t ; i, . UInt_t ; j . ). returns an element of the kernel matrix ; Definition at line 119 of file SVKernelMatrix.cxx. ◆ GetLine(). Float_t * TMVA::SVKernelMatrix::GetLine ; (; UInt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html:76,Guid,Guide,76,doc/master/classTMVA_1_1SVKernelMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVKernelMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SVWorkingSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SVWorkingSet Class ReferenceTMVA. ; Working class for Support Vector Machine. ; Definition at line 42 of file SVWorkingSet.h. Public Member Functions;  SVWorkingSet ();  constructor ;  ;  SVWorkingSet (std::vector< TMVA::SVEvent * > *, SVKernelFunction *, Float_t, Bool_t);  constructor ;  ;  ~SVWorkingSet ();  destructor ;  ; Bool_t ExamineExample (SVEvent *);  ; Bool_t ExamineExampleReg (SVEvent *);  ; Float_t GetBpar ();  ; std::vector< TMVA::SVEvent * > * GetSupportVectors ();  ; Bool_t IsDiffSignificant (Float_t, Float_t, Float_t);  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyCurrentIter_);  ; Bool_t TakeStep (SVEvent *, SVEvent *);  ; Bool_t TakeStepReg (SVEvent *, SVEvent *);  ; Bool_t Terminated ();  ; void Train (UInt_t nIter=1000);  train the SVM ;  ; void TrainReg ();  . Private Member Functions; void SetIndex (TMVA::SVEvent *);  . Private Attributes; Float_t fB_low;  documentation ;  ; Float_t fB_up;  documentation ;  ; Bool_t fdoRegression;  TODO temporary, find nicer solution. ;  ; bool * fExitFromTraining = nullptr;  ; std::vector< TMVA::SVEvent * > * fInputData;  input events ;  ; UInt_t * fIPyCurrentIter = nullptr;  ; SVKernelFunction * fKFunction;  kernel function ;  ; SVKernelMatrix * fKMatrix;  kernel matrix ;  ; MsgLogger * fLogger;  ! message logger ;  ; std::vector< TMVA::SVEvent * > * fSupVec;  output events - support vectors ;  ; SVEvent * fTEventLow;  last optimized event ;  ; SVEvent * fTEventUp;  last optimized event ;  ; Float_t fTolerance;  documentation ;  . #include <TMVA/SVWorkingSet.h>; Constructor & Destructor Documentation. ◆ SVWorkingSet() [1/2]. TMVA::SVWorkingSet::SVWorkingSet ; (; ). constructor ; Definition at line 50 of file SVWorkingSet.cxx. ◆ SVWorkingSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html:74,Guid,Guide,74,doc/master/classTMVA_1_1SVWorkingSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SVWorkingSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SdivSqrtSplusB Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::SdivSqrtSplusB Class ReferenceTMVA. ; Implementation of the SdivSqrtSplusB as separation criterion. ; \( Index = \frac{S}{\sqrt{S+B}} \) (statistical significance) ; Definition at line 44 of file SdivSqrtSplusB.h. Public Member Functions;  SdivSqrtSplusB ();  ;  SdivSqrtSplusB (const SdivSqrtSplusB &g);  ; virtual ~SdivSqrtSplusB ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b);  Index = S/sqrt(S+B) (statistical significance) ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::SeparationBase;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::SeparationBase; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Additional Inherited Members;  Protected Attributes inherited from TMVA::SeparationBase; TString fName;  ; Double_t fPrecisionCut;  . #include <TMVA/SdivSqrtSplusB.h>. Inheritance diagram for TMVA::SdivSqrtS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SdivSqrtSplusB.html:76,Guid,Guide,76,doc/master/classTMVA_1_1SdivSqrtSplusB.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SdivSqrtSplusB.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SeparationBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMVA::SeparationBase Class ReferenceabstractTMVA. ; An interface to calculate the ""SeparationGain"" for different separation criteria used in various training algorithms. ; There are two things: the Separation Index, and the Separation Gain Separation Index: Measure of the ""purity"" of a sample. If all elements (events) in the sample belong to the same class (e.g. signal or background), than the separation index is 0 (meaning 100% purity (or 0% purity as it is symmetric. The index becomes maximal, for perfectly mixed samples eg. purity=50% , N_signal = N_bkg; Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. into a ""left-node"" and a ""right-node"" (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right) this is then the quality criterion which is optimized for when trying to increase the information in the system (making the best selection ; Definition at line 82 of file SeparationBase.h. Public Member Functions;  SeparationBase ();  Constructor. ;  ;  SeparationBase (const SeparationBase &s);  Copy constructor. ;  ; virtual ~SeparationBase ();  ; const TString & GetName ();  ; virtual Double_t GetSeparationGain (const Double_t nSelS, const Double_t nSelB, const Double_t nTotS, const Double_t nTotB);  Separation Gain: the measure of how the quality of separation of the sample increases by splitting the sample e.g. ;  ; virtual Double_t GetSeparationIndex (const Double_t s, const Double_t b)=0;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SeparationBase.html:76,Guid,Guide,76,doc/master/classTMVA_1_1SeparationBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SeparationBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SimulatedAnnealing Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SimulatedAnnealing Class ReferenceTMVA. ; Base implementation of simulated annealing fitting procedure. ; Definition at line 51 of file SimulatedAnnealing.h. Public Member Functions;  SimulatedAnnealing (IFitterTarget &target, const std::vector< TMVA::Interval * > &ranges);  constructor ;  ; virtual ~SimulatedAnnealing ();  destructor ;  ; virtual TClass * IsA () const;  ; Double_t Minimize (std::vector< Double_t > &parameters);  minimisation algorithm ;  ; void SetAccuracy (Double_t eps);  ; void SetAdaptiveSpeed (Double_t speed);  ; void SetInitTemp (Double_t it);  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyCurrentIter_);  ; void SetMaxCalls (Int_t mc);  ; void SetMinTemp (Double_t min);  ; void SetOptions (Int_t maxCalls, Double_t initialTemperature, Double_t minTemperature, Double_t eps, TString kernelTemperatureS, Double_t temperatureScale, Double_t adaptiveSpeed, Double_t temperatureAdaptiveStep, Bool_t useDefaultScale, Bool_t useDefaultTemperature);  option setter ;  ; void SetTemperatureScale (Double_t scale);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Types; enum  EKernelTemperature { ;   kSqrt = 0; , kIncreasingAdaptive; , kDecreasingAdaptive; , kLog; , ;   kHomo; , kSin; , kGeo. };  . Private Member Functions; void FillWithRandomValues (std::vector< Double_t > &parameters);  random starting parameters ;  ; Double_t GenerateMaxTemperature (std::vector< Double_t > &parameters); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealing.html:80,Guid,Guide,80,doc/master/classTMVA_1_1SimulatedAnnealing.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealing.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::SimulatedAnnealingFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::SimulatedAnnealingFitter Class ReferenceTMVA. ; Fitter using a Simulated Annealing Algorithm. ; Definition at line 49 of file SimulatedAnnealingFitter.h. Public Member Functions;  SimulatedAnnealingFitter (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > &ranges, const TString &theOption);  constructor ;  ; virtual ~SimulatedAnnealingFitter ();  ; virtual TClass * IsA () const;  ; Double_t Run (std::vector< Double_t > &pars);  Execute fitting. ;  ; void SetParameters (Int_t fMaxCalls, Double_t fInitialTemperature, Double_t fMinTemperature, Double_t fEps, TString fKernelTemperatureS, Double_t fTemperatureScale, Double_t fTemperatureAdaptiveStep, Bool_t fUseDefaultScale, Bool_t fUseDefaultTemperature);  set SA configuration parameters ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::FitterBase;  FitterBase (IFitterTarget &target, const TString &name, const std::vector< TMVA::Interval * > ranges, const TString &theOption);  constructor ;  ; virtual ~FitterBase ();  ; Double_t EstimatorFunction (std::vector< Double_t > &parameters);  estimator function interface for fitting ;  ; IFitterTarget & GetFitterTarget () const;  ; const char * GetName () const;  Returns name of object. ;  ; Int_t GetNpars () const;  ; Double_t Run ();  estimator function interface for fitting ;  ; void SetIPythonInteractive (bool *ExitFromTraining, UInt_t *fIPyMaxIter_, UInt_t *fIPyCurrentIter_);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Config",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:86,Guid,Guide,86,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::StatDialogBDT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::StatDialogBDT Class Reference. . Definition at line 46 of file BDT.h. Public Member Functions;  StatDialogBDT (TString dataset, const TGWindow *p, TString wfile, TString methName=""BDT"", Int_t itree=0);  ; virtual ~StatDialogBDT ();  ; void ChangedBy (const char *method);  ; void Close ();  ; Bool_t Connect (const char *sig, const char *cl, void *rcvr, const char *slt);  ; void Destroyed ();  ; Bool_t Disconnect (const char *sig=nullptr, void *rcvr=nullptr, const char *slt=nullptr);  ; void DrawTree (Int_t itree);  ; void Emit (const char *signal);  ; template<typename T > ; void Emit (const char *signal, const T &arg);  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t nargs, const T &... params);  ; TList * GetListOfSignals () const;  ; void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; void Message (const char *msg);  ; void RaiseDialog ();  ; void Redraw ();  ; void SetItree ();  . Static Public Member Functions; static void Delete ();  . Private Member Functions; void DrawNode (TMVA::DecisionTreeNode *n, Double_t x, Double_t y, Double_t xscale, Double_t yscale, TString *vars);  recursively puts an entries in the histogram for the node and its daughters ;  ; void GetNtrees ();  ; TMVA::DecisionTree * ReadTree (TString *&vars, Int_t itree);  ; void UpdateCanvases ();  . Private Attributes; TGHorizontalFrame * fButtons;  ; TCanvas * fCanvas;  ; TGTextButton * fCloseButton;  ; Int_t fColorOffset;  ; TString fDataset;  ; TGTextButton * fDrawButton;  ; TGNumberEntry * fInput;  ; Int_t fItree;  ; TGMainFrame * fMain;  ; TString fMeth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1StatDialogBDT.html:75,Guid,Guide,75,doc/master/classTMVA_1_1StatDialogBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1StatDialogBDT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::StatDialogBDTReg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::StatDialogBDTReg Class Reference. . Definition at line 36 of file BDT_Reg.h. Public Member Functions;  StatDialogBDTReg (TString dataset, const TGWindow *p, TString wfile, TString methName=""BDT"", Int_t itree=0);  ; virtual ~StatDialogBDTReg ();  ; void ChangedBy (const char *method);  ; void Close ();  ; Bool_t Connect (const char *sig, const char *cl, void *rcvr, const char *slt);  ; void Destroyed ();  ; Bool_t Disconnect (const char *sig=nullptr, void *rcvr=nullptr, const char *slt=nullptr);  ; void DrawTree (Int_t itree);  ; void Emit (const char *signal);  ; template<typename T > ; void Emit (const char *signal, const T &arg);  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t nargs, const T &... params);  ; TList * GetListOfSignals () const;  ; void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; void Message (const char *msg);  ; void RaiseDialog ();  ; void Redraw ();  ; void SetItree ();  . Static Public Member Functions; static void Delete ();  . Private Member Functions; void DrawNode (TMVA::DecisionTreeNode *n, Double_t x, Double_t y, Double_t xscale, Double_t yscale, TString *vars);  recursively puts an entries in the histogram for the node and its daughters ;  ; void GetNtrees ();  ; TMVA::DecisionTree * ReadTree (TString *&vars, Int_t itree);  ; void UpdateCanvases ();  . Private Attributes; TGHorizontalFrame * fButtons;  ; TCanvas * fCanvas;  ; TGTextButton * fCloseButton;  ; TString fDataset;  ; TGTextButton * fDrawButton;  ; TGNumberEntry * fInput;  ; Int_t fItree;  ; TGMainFrame * fMain;  ; TString fMethName;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1StatDialogBDTReg.html:78,Guid,Guide,78,doc/master/classTMVA_1_1StatDialogBDTReg.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1StatDialogBDTReg.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::StatDialogMVAEffs Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::StatDialogMVAEffs Class Reference. . Definition at line 72 of file mvaeffs.h. Public Member Functions;  StatDialogMVAEffs (TString ds, const TGWindow *p, Float_t ns, Float_t nb);  ; virtual ~StatDialogMVAEffs ();  ; void ChangedBy (const char *method);  ; void Close ();  ; Bool_t Connect (const char *sig, const char *cl, void *rcvr, const char *slt);  ; void Destroyed ();  ; Bool_t Disconnect (const char *sig=nullptr, void *rcvr=nullptr, const char *slt=nullptr);  ; void DrawHistograms ();  ; void Emit (const char *signal);  ; template<typename T > ; void Emit (const char *signal, const T &arg);  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t nargs, const T &... params);  ; TString GetFormula ();  ; TString GetFormulaString ();  ; TString GetLatexFormula ();  ; TList * GetListOfSignals () const;  ; void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; void Message (const char *msg);  ; void PrintResults (const MethodInfo *info);  ; void RaiseDialog ();  ; void ReadHistograms (TFile *file);  ; void Redraw ();  ; void SetFormula (const TString &f);  ; void SetNBackground ();  ; void SetNSignal ();  ; void UpdateSignificanceHists ();  . Private Member Functions; void UpdateCanvases ();  . Private Attributes; TString dataset;  ; TGNumberEntry * fBkgInput;  ; TGHorizontalFrame * fButtons;  ; TGTextButton * fCloseButton;  ; TGTextButton * fDrawButton;  ; TString fFormula;  ; TList * fInfoList;  ; TGMainFrame * fMain;  ; Float_t fNBackground;  ; Float_t fNSignal;  ; TQObjSender fQObject;  ; TGNumberEntry * fSigInput;  ; Int_t maxLenTitle;  . #include <TMVA/mvaeffs.h>; Constructor & Destructor Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1StatDialogMVAEffs.html:79,Guid,Guide,79,doc/master/classTMVA_1_1StatDialogMVAEffs.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1StatDialogMVAEffs.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TActivation Class ReferenceabstractTMVA. ; Interface for TNeuron activation function classes. ; Definition at line 42 of file TActivation.h. Public Member Functions;  TActivation ();  ; virtual ~TActivation ();  ; virtual Double_t Eval (Double_t arg)=0;  ; virtual Double_t EvalDerivative (Double_t arg)=0;  ; virtual TString GetExpression ()=0;  ; virtual Double_t GetMax ()=0;  ; virtual Double_t GetMin ()=0;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName)=0;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TActivation.h>. Inheritance diagram for TMVA::TActivation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActivation(). TMVA::TActivation::TActivation ; (; ). inline . Definition at line 46 of file TActivation.h. ◆ ~TActivation(). virtual TMVA::TActivation::~TActivation ; (; ). inlinevirtual . Definition at line 47 of file TActivation.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TActivation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TActivation::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TActivation::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file TActivation.h. ◆ DeclFileName(). static const char * TMVA::TActivation::DeclFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivation.html:73,Guid,Guide,73,doc/master/classTMVA_1_1TActivation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivation.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationChooser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TActivationChooser Class ReferenceTMVA. ; Class for easily choosing activation functions. ; Definition at line 44 of file TActivationChooser.h. Public Types; enum  EActivationType { ;   kLinear = 0; , kSigmoid; , kTanh; , kReLU; , ;   kRadial. };  . Public Member Functions;  TActivationChooser ();  Default constructor. ;  ; virtual ~TActivationChooser ();  Destructor. ;  ; TActivation * CreateActivation (const TString &type) const;  instantiate the correct activation object according to the type chosen (given by a TString) ;  ; TActivation * CreateActivation (EActivationType type) const;  instantiate the correct activation object according to the type chosen (given as the enumeration type) ;  ; std::vector< TString > * GetAllActivationNames () const;  returns the names of all know activation functions ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; MsgLogger & Log () const;  . Private Attributes; TString fLINEAR;  activation function name ;  ; MsgLogger * fLogger;  ! message logger ;  ; TString fRADIAL;  activation function name ;  ; TString fRELU;  activation function name ;  ; TString fSIGMOID;  activation function name ;  ; TString fTANH;  activation function name ;  . #include <TMVA/TActivationChooser.h>; Member Enumeration Documentation. ◆ EActivationType. enum TMVA::TActivationChooser::EActivationType. EnumeratorkLinear ; kSigmoid ; kTanh ; kReLU ; kRadial ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html:80,Guid,Guide,80,doc/master/classTMVA_1_1TActivationChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationChooser.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationIdentity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TActivationIdentity Class ReferenceTMVA. ; Identity activation function for TNeuron. ; Definition at line 41 of file TActivationIdentity.h. Public Member Functions;  TActivationIdentity ();  ;  ~TActivationIdentity ();  ; virtual Double_t Eval (Double_t arg);  ; virtual Double_t EvalDerivative (Double_t);  ; virtual TString GetExpression ();  ; virtual Double_t GetMax ();  ; virtual Double_t GetMin ();  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName);  writes the identity function source code ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TActivation;  TActivation ();  ; virtual ~TActivation ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TActivation; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TActivationIdentity.h>. Inheritance diagram for TMVA::TActivationIdentity:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActivationIdentity(). TMVA::TActivationIdentity::TActivationIdentity ; (; ). inline . Definition at line 45 of file TActivationIdentity.h. ◆ ~TActivationIdentity(). TMVA::TActivationIdentity::~TActivationIdentity ; (; ). inline . Definition at line 46 of file TActivationIdentity.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationIdentity.html:81,Guid,Guide,81,doc/master/classTMVA_1_1TActivationIdentity.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationIdentity.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationRadial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TActivationRadial Class ReferenceTMVA. ; Radial basis activation function for ANN. ; Definition at line 41 of file TActivationRadial.h. Public Member Functions;  TActivationRadial ();  ;  ~TActivationRadial ();  ; Double_t Eval (Double_t arg);  evaluate gaussian ;  ; Double_t EvalDerivative (Double_t arg);  evaluate derivative ;  ; TString GetExpression ();  get expressions for the gaussian and its derivatives ;  ; Double_t GetMax ();  ; Double_t GetMin ();  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName);  writes the sigmoid activation function source code ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TActivation;  TActivation ();  ; virtual ~TActivation ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TActivation; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TActivationRadial.h>. Inheritance diagram for TMVA::TActivationRadial:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActivationRadial(). TMVA::TActivationRadial::TActivationRadial ; (; ). inline . Definition at line 44 of file TActivationRadial.h. ◆ ~TActivationRadial(). TMVA::TActivationRadial::~TActivationRadial ; (; ). inline . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationRadial.html:79,Guid,Guide,79,doc/master/classTMVA_1_1TActivationRadial.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationRadial.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationReLU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TActivationReLU Class ReferenceTMVA. ; Rectified Linear Unit activation function for TNeuron. ; Definition at line 41 of file TActivationReLU.h. Public Member Functions;  TActivationReLU ();  ;  ~TActivationReLU ();  ; Double_t Eval (Double_t arg);  ; Double_t EvalDerivative (Double_t arg);  ; TString GetExpression ();  get expressions for the tanh and its derivative ;  ; Double_t GetMax ();  ; Double_t GetMin ();  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName);  writes the Rectified Linear Unit activation function source code ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TActivation;  TActivation ();  ; virtual ~TActivation ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TActivation; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TActivationReLU.h>. Inheritance diagram for TMVA::TActivationReLU:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActivationReLU(). TMVA::TActivationReLU::TActivationReLU ; (; ). inline . Definition at line 44 of file TActivationReLU.h. ◆ ~TActivationReLU(). TMVA::TActivationReLU::~TActivationReLU ; (; ). inline . Definition at line 45 of file TActivationReLU.h. Member ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationReLU.html:77,Guid,Guide,77,doc/master/classTMVA_1_1TActivationReLU.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationReLU.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationSigmoid Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TActivationSigmoid Class ReferenceTMVA. ; Sigmoid activation function for TNeuron. ; Definition at line 41 of file TActivationSigmoid.h. Public Member Functions;  TActivationSigmoid ();  ;  ~TActivationSigmoid ();  ; Double_t Eval (Double_t arg);  evaluate the sigmoid ;  ; Double_t EvalDerivative (Double_t arg);  evaluate the derivative of the sigmoid ;  ; TString GetExpression ();  get expressions for the sigmoid and its derivatives ;  ; Double_t GetMax ();  ; Double_t GetMin ();  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName);  writes the sigmoid activation function source code ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TActivation;  TActivation ();  ; virtual ~TActivation ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TActivation; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TActivationSigmoid.h>. Inheritance diagram for TMVA::TActivationSigmoid:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActivationSigmoid(). TMVA::TActivationSigmoid::TActivationSigmoid ; (; ). inline . Definition at line 44 of file TActivationSigmoid.h. ◆ ~TActivationSigmoid(). TMVA::TActivationSigmoid::~TActivat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationSigmoid.html:80,Guid,Guide,80,doc/master/classTMVA_1_1TActivationSigmoid.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationSigmoid.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TActivationTanh Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TActivationTanh Class ReferenceTMVA. ; Tanh activation function for ANN. ; Definition at line 41 of file TActivationTanh.h. Public Member Functions;  TActivationTanh ();  ;  ~TActivationTanh ();  ; Double_t Eval (Double_t arg);  evaluate the tanh ;  ; Double_t EvalDerivative (Double_t arg);  evaluate the derivative ;  ; TString GetExpression ();  get expressions for the tanh and its derivative whatever that may be good for ... ;  ; Double_t GetMax ();  ; Double_t GetMin ();  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName);  writes the Tanh sigmoid activation function source code ;  ; void SetSlow ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TActivation;  TActivation ();  ; virtual ~TActivation ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TActivation; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; Double_t fast_tanh (Double_t arg);  a fast tanh approximation ;  . Private Attributes; Bool_t fFAST;  . #include <TMVA/TActivationTanh.h>. Inheritance diagram for TMVA::TActivationTanh:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TActiva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TActivationTanh.html:77,Guid,Guide,77,doc/master/classTMVA_1_1TActivationTanh.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TActivationTanh.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TMVAGUI Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::TMVAGUI Struct Reference. . Definition at line 25 of file TMVAGui.h. Public Member Functions;  TMVAGUI (TString name=""TMVA.root"", TString dataset="""");  . #include <TMVA/TMVAGui.h>; Constructor & Destructor Documentation. ◆ TMVAGUI(). TMVA::TMVAGUI::TMVAGUI ; (; TString ; name = ""TMVA.root"", . TString ; dataset = """" . ). inline . Definition at line 26 of file TMVAGui.h. The documentation for this struct was generated from the following file:; tmva/tmvagui/inc/TMVA/TMVAGui.h. TMVATMVAGUI. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TMVAGUI.html:70,Guid,Guide,70,doc/master/structTMVA_1_1TMVAGUI.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TMVAGUI.html,2,['Guid'],['Guide']
Usability,". ROOT: TMVA::TMVAGaussPair Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::TMVAGaussPair Class Reference. . Definition at line 54 of file VariableGaussTransform.h. Public Member Functions;  TMVAGaussPair (Float_t f, Float_t w);  ; Float_t GetValue () const;  ; Float_t GetWeight () const;  ; Bool_t operator< (const TMVAGaussPair &p) const;  ; Bool_t operator== (const TMVAGaussPair &p) const;  ; Bool_t operator> (const TMVAGaussPair &p) const;  . Private Attributes; Float_t fF;  ; Float_t fW;  . #include <TMVA/VariableGaussTransform.h>; Constructor & Destructor Documentation. ◆ TMVAGaussPair(). TMVA::TMVAGaussPair::TMVAGaussPair ; (; Float_t ; f, . Float_t ; w . ). inline . Definition at line 58 of file VariableGaussTransform.h. Member Function Documentation. ◆ GetValue(). Float_t TMVA::TMVAGaussPair::GetValue ; (; ); const. inline . Definition at line 62 of file VariableGaussTransform.h. ◆ GetWeight(). Float_t TMVA::TMVAGaussPair::GetWeight ; (; ); const. inline . Definition at line 63 of file VariableGaussTransform.h. ◆ operator<(). Bool_t TMVA::TMVAGaussPair::operator< ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 60 of file VariableGaussTransform.h. ◆ operator==(). Bool_t TMVA::TMVAGaussPair::operator== ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 61 of file VariableGaussTransform.h. ◆ operator>(). Bool_t TMVA::TMVAGaussPair::operator> ; (; const TMVAGaussPair & ; p); const. inline . Definition at line 59 of file VariableGaussTransform.h. Member Data Documentation. ◆ fF. Float_t TMVA::TMVAGaussPair::fF. private . Definition at line 67 of file VariableGaussTransform.h. ◆ fW. Float_t TMVA::TMVAGaussPair::fW. private . Definition at line 68 of file VariableGaussTransform.h. Libraries for TMVA::TMVAGaussPair:. [legend]; The documentation for this class was generated from the f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TMVAGaussPair.html:75,Guid,Guide,75,doc/master/classTMVA_1_1TMVAGaussPair.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TMVAGaussPair.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TMVAGlob Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations |; Functions ; TMVA::TMVAGlob Namespace Reference. Enumerations; enum  TypeOfPlot { ;   kId = 0; , kNorm; , kDecorrelated; , kPCA; , ;   kGaussDecorr; , kNumOfMethods. };  . Functions; void DestroyCanvases ();  ; Bool_t ExistMethodName (TString name, TDirectory *dir=nullptr);  ; TImage * findImage (const char *imageName);  ; TKey * FindMethod (TString name, TDirectory *dir=nullptr);  ; Int_t getBackgroundFill ();  ; Int_t getBackgroundLine ();  ; Int_t getCanvas ();  ; std::vector< TString > GetClassNames (TDirectory *dir);  ; TDirectory * GetCorrelationPlotsDir (TMVAGlob::TypeOfPlot type, TDirectory *dir=nullptr);  ; Int_t getFrameFill ();  ; std::vector< TString > GetInputVariableNames (TDirectory *dir);  ; TDirectory * GetInputVariablesDir (TMVAGlob::TypeOfPlot type, TDirectory *dir=nullptr);  ; UInt_t GetListOfJobs (TFile *file, TList &jobdirs);  ; UInt_t GetListOfKeys (TList &keys, TString inherits, TDirectory *dir=nullptr);  ; UInt_t GetListOfMethods (TList &methods, TDirectory *dir=nullptr);  ; UInt_t GetListOfTitles (TDirectory *rfdir, TList &titles);  ; UInt_t GetListOfTitles (TString &methodName, TList &titles, TDirectory *dir=nullptr);  ; void GetMethodName (TString &name, TDirectory *mdir);  ; void GetMethodName (TString &name, TKey *mkey);  ; void GetMethodTitle (TString &name, TDirectory *idir);  ; void GetMethodTitle (TString &name, TKey *ikey);  ; Int_t getNovelBlue ();  ; Int_t GetNumberOfInputVariables (TDirectory *dir);  ; Int_t GetNumberOfInputVariablesMultiClass (TDirectory *dir);  ; Int_t GetNumberOfTargets (TDirectory *dir);  ; Int_t getSignalFill ();  ; Int_t getSignalLine ();  ; Int_t getTitleBorder ();  ; Int_t getTitleBox ();  ; Int_t getTitleText ();  ; void imgconv (TCanvas *c, const TString &fname);  ; void Initialize (Bool_t useTMVAStyle=kTRUE);  ; TKey * NextKey (TIter &keyIter, TString className);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html:74,Guid,Guide,74,doc/master/namespaceTMVA_1_1TMVAGlob.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1TMVAGlob.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TNeuron Class ReferenceTMVA. ; Neuron class used by TMVA artificial neural network methods. ; Definition at line 49 of file TNeuron.h. Public Member Functions;  TNeuron ();  standard constructor ;  ; virtual ~TNeuron ();  destructor ;  ; void AddPostLink (TSynapse *post);  add synapse as a post-link to this neuron ;  ; void AddPreLink (TSynapse *pre);  add synapse as a pre-link to this neuron ;  ; void AdjustSynapseWeights ();  adjust the pre-synapses' weights for each neuron (input neuron has no pre-synapse) this method should only be called in batch mode ;  ; void CalculateActivationValue ();  calculate neuron activation/output ;  ; void CalculateDelta ();  calculate error field ;  ; void CalculateValue ();  calculate neuron input ;  ; void DeletePreLinks ();  delete all pre-links ;  ; void ForceValue (Double_t value);  force the value, typically for input and bias neurons ;  ; Double_t GetActivationValue () const;  ; Double_t GetDEDw () const;  ; Double_t GetDelta () const;  ; Double_t GetValue () const;  ; void InitSynapseDeltas ();  initialize the error fields of all pre-neurons this method should only be called in batch mode ;  ; virtual TClass * IsA () const;  ; Bool_t IsInputNeuron () const;  ; Bool_t IsOutputNeuron () const;  ; Int_t NumPostLinks () const;  ; Int_t NumPreLinks () const;  ; TSynapse * PostLinkAt (Int_t index) const;  ; TSynapse * PreLinkAt (Int_t index) const;  ; virtual void Print (Option_t *="""") const;  This method must be overridden when a class wants to print itself. ;  ; void PrintActivationEqn ();  print activation equation, for debugging ;  ; void PrintPostLinks () const;  ; void PrintPreLinks () const;  ; void SetActivationEqn (TActivation *activation);  set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuron.html:69,Guid,Guide,69,doc/master/classTMVA_1_1TNeuron.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuron.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuronInput Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TNeuronInput Class ReferenceabstractTMVA. ; Interface for TNeuron input calculation classes. ; Definition at line 42 of file TNeuronInput.h. Public Member Functions;  TNeuronInput ();  ; virtual ~TNeuronInput ();  ; virtual Double_t GetInput (const TNeuron *neuron) const =0;  ; virtual TString GetName ()=0;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TNeuronInput.h>. Inheritance diagram for TMVA::TNeuronInput:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNeuronInput(). TMVA::TNeuronInput::TNeuronInput ; (; ). inline . Definition at line 46 of file TNeuronInput.h. ◆ ~TNeuronInput(). virtual TMVA::TNeuronInput::~TNeuronInput ; (; ). inlinevirtual . Definition at line 47 of file TNeuronInput.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInput::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInput::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::TNeuronInput::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file TNeuronInput.h. ◆ DeclFileName(). static const char * TMVA::TNeuronInput::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file TNeuronInput.h. ◆ GetInput(). virtual Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInput.html:74,Guid,Guide,74,doc/master/classTMVA_1_1TNeuronInput.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInput.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuronInputAbs Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TNeuronInputAbs Class ReferenceTMVA. ; TNeuron input calculator – calculates the sum of the absolute values of the weighted inputs. ; Definition at line 46 of file TNeuronInputAbs.h. Public Member Functions;  TNeuronInputAbs ();  ; virtual ~TNeuronInputAbs ();  ; Double_t GetInput (const TNeuron *neuron) const;  ; TString GetName ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TNeuronInput;  TNeuronInput ();  ; virtual ~TNeuronInput ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TNeuronInput; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TNeuronInputAbs.h>. Inheritance diagram for TMVA::TNeuronInputAbs:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNeuronInputAbs(). TMVA::TNeuronInputAbs::TNeuronInputAbs ; (; ). inline . Definition at line 50 of file TNeuronInputAbs.h. ◆ ~TNeuronInputAbs(). virtual TMVA::TNeuronInputAbs::~TNeuronInputAbs ; (; ). inlinevirtual . Definition at line 51 of file TNeuronInputAbs.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputAbs::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputAbs::Class_Name ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputAbs.html:77,Guid,Guide,77,doc/master/classTMVA_1_1TNeuronInputAbs.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputAbs.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuronInputChooser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::TNeuronInputChooser Class ReferenceTMVA. ; Class for easily choosing neuron input functions. ; Definition at line 66 of file TNeuronInputChooser.h. Public Types; enum  ENeuronInputType { kSum = 0; , kSqSum; , kAbsSum; };  . Public Member Functions;  TNeuronInputChooser ();  ; virtual ~TNeuronInputChooser ();  ; TNeuronInput * CreateNeuronInput (const TString type) const;  ; TNeuronInput * CreateNeuronInput (ENeuronInputType type) const;  ; std::vector< TString > * GetAllNeuronInputNames () const;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; TString fABSSUM;  neuron input type name ;  ; TString fSQSUM;  neuron input type name ;  ; TString fSUM;  neuron input type name ;  . #include <TMVA/TNeuronInputChooser.h>; Member Enumeration Documentation. ◆ ENeuronInputType. enum TMVA::TNeuronInputChooser::ENeuronInputType. EnumeratorkSum ; kSqSum ; kAbsSum . Definition at line 78 of file TNeuronInputChooser.h. Constructor & Destructor Documentation. ◆ TNeuronInputChooser(). TMVA::TNeuronInputChooser::TNeuronInputChooser ; (; ). inline . Definition at line 70 of file TNeuronInputChooser.h. ◆ ~TNeuronInputChooser(). virtual TMVA::TNeuronInputChooser::~TNeuronInputChooser ; (; ). inlinevirtual . Definition at line 76 of file TNeuronInputChooser.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputChooser::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputChooser.html:81,Guid,Guide,81,doc/master/classTMVA_1_1TNeuronInputChooser.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputChooser.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuronInputSqSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TNeuronInputSqSum Class ReferenceTMVA. ; TNeuron input calculator – calculates the squared weighted sum of inputs. ; Definition at line 43 of file TNeuronInputSqSum.h. Public Member Functions;  TNeuronInputSqSum ();  ; virtual ~TNeuronInputSqSum ();  ; Double_t GetInput (const TNeuron *neuron) const;  ; TString GetName ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TNeuronInput;  TNeuronInput ();  ; virtual ~TNeuronInput ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TNeuronInput; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TNeuronInputSqSum.h>. Inheritance diagram for TMVA::TNeuronInputSqSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNeuronInputSqSum(). TMVA::TNeuronInputSqSum::TNeuronInputSqSum ; (; ). inline . Definition at line 47 of file TNeuronInputSqSum.h. ◆ ~TNeuronInputSqSum(). virtual TMVA::TNeuronInputSqSum::~TNeuronInputSqSum ; (; ). inlinevirtual . Definition at line 48 of file TNeuronInputSqSum.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputSqSum::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputSqSu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSqSum.html:79,Guid,Guide,79,doc/master/classTMVA_1_1TNeuronInputSqSum.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSqSum.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TNeuronInputSum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::TNeuronInputSum Class ReferenceTMVA. ; TNeuron input calculator – calculates the weighted sum of inputs. ; Definition at line 41 of file TNeuronInputSum.h. Public Member Functions;  TNeuronInputSum ();  ; virtual ~TNeuronInputSum ();  ; Double_t GetInput (const TNeuron *neuron) const;  ; TString GetName ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::TNeuronInput;  TNeuronInput ();  ; virtual ~TNeuronInput ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::TNeuronInput; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TMVA/TNeuronInputSum.h>. Inheritance diagram for TMVA::TNeuronInputSum:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TNeuronInputSum(). TMVA::TNeuronInputSum::TNeuronInputSum ; (; ). inline . Definition at line 45 of file TNeuronInputSum.h. ◆ ~TNeuronInputSum(). virtual TMVA::TNeuronInputSum::~TNeuronInputSum ; (; ). inlinevirtual . Definition at line 46 of file TNeuronInputSum.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::TNeuronInputSum::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::TNeuronInputSum::Class_Name ; (; ). static . ReturnsName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSum.html:77,Guid,Guide,77,doc/master/classTMVA_1_1TNeuronInputSum.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuronInputSum.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TSpline1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::TSpline1 Class ReferenceTMVA. ; Linear interpolation of TGraph. ; Definition at line 43 of file TSpline1.h. Public Member Functions;  TSpline1 (const TString &title, const TGraph *theGraph);  constructor from TGraph pointer (not owned by TSpline1) TSpline is a TNamed object ;  ; virtual ~TSpline1 (void);  destructor ;  ; virtual void BuildCoeff (void);  no coefficients to precompute ;  ; virtual Double_t Eval (Double_t x) const;  returns linearly interpolated TGraph entry around x ;  ; virtual void GetKnot (Int_t i, Double_t &x, Double_t &y) const;  no knots ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void SetNpx (Int_t n);  ; void StreamerNVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSpline1.html:70,Guid,Guide,70,doc/master/classTMVA_1_1TSpline1.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSpline1.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TSpline2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TSpline2 Class ReferenceTMVA. ; Quadratic interpolation of TGraph. ; Definition at line 43 of file TSpline2.h. Public Member Functions;  TSpline2 (const TString &title, const TGraph *theGraph);  constructor from TGraph pointer (not owned by TSpline2) TSpline is a TNamed object ;  ; virtual ~TSpline2 (void);  destructor ;  ; virtual void BuildCoeff (void);  no coefficients to precompute ;  ; virtual Double_t Eval (Double_t x) const;  returns quadratically interpolated TGraph entry around x ;  ; virtual void GetKnot (Int_t i, Double_t &x, Double_t &y) const;  no knots ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSpline;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSpline2.html:70,Guid,Guide,70,doc/master/classTMVA_1_1TSpline2.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSpline2.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TSynapse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TSynapse Class ReferenceTMVA. ; Synapse class used by TMVA artificial neural network methods. ; Definition at line 42 of file TSynapse.h. Public Member Functions;  TSynapse ();  constructor ;  ; virtual ~TSynapse ();  destructor ;  ; void AdjustWeight ();  adjust the weight based on the error field all ready calculated by CalculateDelta ;  ; void CalculateDelta ();  calculate/adjust the error field for this synapse ;  ; void DecayLearningRate (Double_t rate);  ; Double_t GetDEDw ();  ; Double_t GetDelta ();  ; Double_t GetLearningRate ();  ; Double_t GetWeight ();  ; Double_t GetWeightedDelta ();  get error field of post-neuron weighted by synapse weight ;  ; Double_t GetWeightedValue ();  get output of pre-neuron weighted by synapse weight ;  ; void InitDelta ();  ; virtual TClass * IsA () const;  ; void SetDEDw (Double_t DEDw);  ; void SetLearningRate (Double_t rate);  ; void SetPostNeuron (TNeuron *post);  ; void SetPreNeuron (TNeuron *pre);  ; void SetWeight (Double_t weight);  set synapse weight ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSynapse.html:70,Guid,Guide,70,doc/master/classTMVA_1_1TSynapse.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSynapse.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TTrainingSettings Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TMVA::TTrainingSettings Struct Reference. ; All of the options that can be specified in the training string. ; Definition at line 72 of file MethodDL.h. Public Attributes; size_t batchSize;  ; size_t convergenceSteps;  ; std::vector< Double_t > dropoutProbabilities;  ; Double_t learningRate;  ; size_t maxEpochs;  ; Double_t momentum;  ; bool multithreading;  ; DNN::EOptimizer optimizer;  ; TString optimizerName;  ; std::map< TString, double > optimizerParams;  ; DNN::ERegularization regularization;  ; size_t testInterval;  ; Double_t weightDecay;  . #include <TMVA/MethodDL.h>; Member Data Documentation. ◆ batchSize. size_t TMVA::TTrainingSettings::batchSize. Definition at line 73 of file MethodDL.h. ◆ convergenceSteps. size_t TMVA::TTrainingSettings::convergenceSteps. Definition at line 75 of file MethodDL.h. ◆ dropoutProbabilities. std::vector<Double_t> TMVA::TTrainingSettings::dropoutProbabilities. Definition at line 83 of file MethodDL.h. ◆ learningRate. Double_t TMVA::TTrainingSettings::learningRate. Definition at line 80 of file MethodDL.h. ◆ maxEpochs. size_t TMVA::TTrainingSettings::maxEpochs. Definition at line 76 of file MethodDL.h. ◆ momentum. Double_t TMVA::TTrainingSettings::momentum. Definition at line 81 of file MethodDL.h. ◆ multithreading. bool TMVA::TTrainingSettings::multithreading. Definition at line 85 of file MethodDL.h. ◆ optimizer. DNN::EOptimizer TMVA::TTrainingSettings::optimizer. Definition at line 78 of file MethodDL.h. ◆ optimizerName. TString TMVA::TTrainingSettings::optimizerName. Definition at line 79 of file MethodDL.h. ◆ optimizerParams. std::map<TString,double> TMVA::TTrainingSettings::optimizerParams. Definition at line 84 of file MethodDL.h. ◆ regularization. DNN::ERegularization TMVA::TTrainingSettings::regularization. Definition at line",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html:80,Guid,Guide,80,doc/master/structTMVA_1_1TTrainingSettings.html,https://root.cern,https://root.cern/doc/master/structTMVA_1_1TTrainingSettings.html,2,"['Guid', 'learn']","['Guide', 'learningRate']"
Usability,". ROOT: TMVA::Timer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Timer Class ReferenceTMVA. ; Timing information for training and evaluation of MVA methods. ; Usage:; TMVA::gConfig().SetDrawProgressBar(true);; ; TMVA::Timer timer( Nloops, ""MyClassName"" );; for (Int_t i=0; i<Nloops; i++) {; ... // some code; ; // now, print progress bar:; timer.DrawProgressBar( i );; ; // **OR** text output of left time (never both !); fLogger << "" time left: "" << timer.GetLeftTime( i ) << Endl;; ; }; fLogger << ""MyClassName"" << "": elapsed time: "" << timer.GetElapsedTime(); << Endl;; TMVA::Config::SetDrawProgressBarvoid SetDrawProgressBar(Bool_t d)Definition Config.h:69; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::fLoggerMsgLogger * fLogger! the output loggerDefinition Timer.h:96; int; TMVA::gConfigConfig & gConfig(); TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; Remark: in batch mode, the progress bar is quite ugly; you may want to use the text output then; Note that by default in TMVA::Config the drawing of the progress bar is switched off. To have the progress bar visible you need to enable it by calling TMVA::gConfig().SetDrawProgressBar(true) ; Definition at line 58 of file Timer.h. Public Member Functions;  Timer (const char *prefix="""", Bool_t colourfulOutput=kTRUE);  constructor ;  ;  Timer (Int_t ncounts, const char *prefix="""", Bool_t colourfulOutput=kTRUE);  standard constructor: ncounts gives the total number of counts that the loop will iterate through. ;  ; virtual ~Timer (void);  destructor ;  ; void DrawProgressBar (Int_t, const TString &comment="""");  draws progress bar in color or B&W caution: ;  ; void DrawProgressBar (TString);  draws a strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:67,Guid,Guide,67,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,2,"['Guid', 'progress bar']","['Guide', 'progress bar']"
Usability,". ROOT: TMVA::Tools Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::Tools Class ReferenceTMVA. ; Global auxiliary applications and data treatment routines. ; Definition at line 76 of file Tools.h. Public Types; enum  ECitation { kPlainText = 1; , kBibTeX; , kLaTeX; , kHtmlLink; };  ; enum  EWelcomeMessage { ;   kStandardWelcomeMsg = 1; , kIsometricWelcomeMsg; , kBlockWelcomeMsg; , kLeanWelcomeMsg; , ;   kLogoWelcomeMsg; , kSmall1WelcomeMsg; , kSmall2WelcomeMsg; , kOriginalWelcomeMsgColor; , ;   kOriginalWelcomeMsgBW. };  . Public Member Functions;  ~Tools ();  destructor ;  ; template<typename T > ; void AddAttr (void *node, const char *, const T &value, Int_t precision=16);  add attribute to xml ;  ; void AddAttr (void *node, const char *attrname, const char *value);  add attribute to node ;  ; void * AddChild (void *parent, const char *childname, const char *content=nullptr, bool isRootNode=false);  add child node ;  ; Bool_t AddComment (void *node, const char *comment);  ; Bool_t AddRawLine (void *node, const char *raw);  XML helpers. ;  ; std::vector< TMatrixDSym * > * CalcCovarianceMatrices (const std::vector< const Event * > &events, Int_t maxCls, VariableTransformBase *transformBase=nullptr);  ; std::vector< TMatrixDSym * > * CalcCovarianceMatrices (const std::vector< Event * > &events, Int_t maxCls, VariableTransformBase *transformBase=nullptr);  compute covariance matrices ;  ; Bool_t CheckForSilentOption (const TString &) const;  check for ""silence"" option in configuration option string ;  ; Bool_t CheckForVerboseOption (const TString &) const;  check if verbosity ""V"" set in option ;  ; Bool_t CheckSplines (const TH1 *, const TSpline *);  check quality of splining by comparing splines ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:67,Guid,Guide,67,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TrainingHistory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Attributes |; List of all members ; TMVA::TrainingHistory Class ReferenceTMVA. ; Tracking data from training. ; Eg, From deep learning record loss for each Epoch ; Definition at line 31 of file TrainingHistory.h. Public Types; typedef std::vector< std::pair< Int_t, Double_t > > IterationRecord;  . Public Member Functions;  TrainingHistory ();  constructor ;  ; virtual ~TrainingHistory ();  ; void AddValue (TString Property, Int_t stage, Double_t value);  ; void SaveHistory (TString Name);  . Private Attributes; std::vector< IterationRecord * > fHistoryData;  ; std::map< TString, int > fHistoryMap;  . #include <TMVA/TrainingHistory.h>; Member Typedef Documentation. ◆ IterationRecord. typedef std::vector<std::pair<Int_t,Double_t> > TMVA::TrainingHistory::IterationRecord. Definition at line 34 of file TrainingHistory.h. Constructor & Destructor Documentation. ◆ TrainingHistory(). TMVA::TrainingHistory::TrainingHistory ; (; ). constructor ; Definition at line 36 of file TrainingHistory.cxx. ◆ ~TrainingHistory(). TMVA::TrainingHistory::~TrainingHistory ; (; ). virtual . Definition at line 40 of file TrainingHistory.cxx. Member Function Documentation. ◆ AddValue(). void TMVA::TrainingHistory::AddValue ; (; TString ; Property, . Int_t ; stage, . Double_t ; value . ). Definition at line 47 of file TrainingHistory.cxx. ◆ SaveHistory(). void TMVA::TrainingHistory::SaveHistory ; (; TString ; Name). Definition at line 60 of file TrainingHistory.cxx. Member Data Documentation. ◆ fHistoryData. std::vector<IterationRecord*> TMVA::TrainingHistory::fHistoryData. private . Definition at line 42 of file TrainingHistory.h. ◆ fHistoryMap. std::map<TString,int> TMVA::TrainingHistory::fHistoryMap. private . Definition at line 41 of file TrainingHistory.h. Libraries for TMVA::TrainingHistory:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TrainingHistory.html:77,Guid,Guide,77,doc/master/classTMVA_1_1TrainingHistory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TrainingHistory.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,". ROOT: TMVA::TransformationHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::TransformationHandler Class ReferenceTMVA. ; Class that contains all the data information. ; Definition at line 56 of file TransformationHandler.h. Classes; struct  VariableStat;  . Public Member Functions;  TransformationHandler (DataSetInfo &, const TString &callerName);  constructor ;  ;  ~TransformationHandler ();  destructor ;  ; void AddStats (Int_t k, UInt_t ivar, Double_t mean, Double_t rms, Double_t min, Double_t max);  Caches calculated summary statistics of transformed variables. ;  ; VariableTransformBase * AddTransformation (VariableTransformBase *, Int_t cls);  ; void AddXMLTo (void *parent=nullptr) const;  XML node describing the transformation. ;  ; void CalcStats (const std::vector< Event * > &events);  method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA ;  ; const std::vector< Event * > * CalcTransformations (const std::vector< Event * > &, Bool_t createNewVector=kFALSE);  computation of transformation ;  ; const TString & GetCallerName () const;  ; Double_t GetMax (Int_t ivar, Int_t cls=-1) const;  ; Double_t GetMean (Int_t ivar, Int_t cls=-1) const;  ; Double_t GetMin (Int_t ivar, Int_t cls=-1) const;  ; TString GetName () const;  return transformation name ;  ; const char * GetNameOfLastTransform () const;  returns string for transformation ;  ; Int_t GetNumOfTransformations () const;  ; Double_t GetRMS (Int_t ivar, Int_t cls=-1) const;  ; TDirectory * GetRootDir () const;  ; const TList & GetTransformationList () const;  ; std::vector< TString > * GetTransformationStringsOfLastTransform () const;  returns string for transformation ;  ; TString GetVariableAxisTitle (const VariableInfo &info) const;  incorporates transformation type into title ax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html:83,Guid,Guide,83,doc/master/classTMVA_1_1TransformationHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TransformationHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::TreeInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::TreeInfo Class Reference. . Definition at line 52 of file DataInputHandler.h. Public Member Functions;  TreeInfo ();  ;  TreeInfo (TTree *tr, const TString &className, Double_t weight=1.0, Types::ETreeType tt=Types::kMaxTreeType, Bool_t own=kFALSE);  ;  ~TreeInfo ();  ; const TString & GetClassName () const;  ; UInt_t GetEntries () const;  ; TTree * GetTree () const;  ; Types::ETreeType GetTreeType () const;  ; Double_t GetWeight () const;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html:70,Guid,Guide,70,doc/master/classTMVA_1_1TreeInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Types Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMVA::Types Class ReferenceTMVA. ; Singleton class for Global types used by TMVA. ; Definition at line 71 of file Types.h. Public Types; enum  EAnalysisType { ;   kClassification = 0; , kRegression; , kMulticlass; , kNoAnalysisType; , ;   kMaxAnalysisType. };  ; enum  EBoostStage { ;   kBoostProcBegin =0; , kBeforeTraining; , kBeforeBoosting; , kAfterBoosting; , ;   kBoostProcEnd. };  ; enum  EMVA { ;   kVariable = 0; , kCuts; , kLikelihood; , kPDERS; , ;   kHMatrix; , kFisher; , kKNN; , kCFMlpANN; , ;   kTMlpANN; , kBDT; , kDT; , kRuleFit; , ;   kSVM; , kMLP; , kBayesClassifier; , kFDA; , ;   kBoost; , kPDEFoam; , kLD; , kPlugins; , ;   kCategory; , kDNN; , kDL; , kPyRandomForest; , ;   kPyAdaBoost; , kPyGTB; , kPyKeras; , kPyTorch; , ;   kC50; , kRSNNS; , kRSVM; , kRXGB; , ;   kCrossValidation; , kMaxMethod. };  ; enum  ESBType { ;   kSignal = 0; , kBackground; , kSBBoth; , kMaxSBType; , ;   kTrueType. };  ; enum  ETreeType { ;   kTraining = 0; , kTesting; , kMaxTreeType; , kValidation; , ;   kTrainingOriginal. };  ; enum  EVariableTransform { ;   kIdentity = 0; , kDecorrelated; , kNormalized; , kPCA; , ;   kRearranged; , kGauss; , kUniform; , kMaxVariableTransform. };  . Public Member Functions;  ~Types ();  ; Bool_t AddTypeMapping (Types::EMVA method, const TString &methodname);  ; TString GetMethodName (Types::EMVA method) const;  ; Types::EMVA GetMethodType (const TString &method) const;  returns the method type (enum) for a given method (string) ;  . Static Public Member Functions; static void DestroyInstance ();  ""destructor"" of the single instance ;  ; static Types & Instance ();  The single instance of ""Types"" if existing already, or create it ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Types.html:67,Guid,Guide,67,doc/master/classTMVA_1_1Types.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Types.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VarTransformHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VarTransformHandler Class Reference. . Definition at line 41 of file VarTransformHandler.h. Public Member Functions;  VarTransformHandler (DataLoader *);  constructor ;  ;  ~VarTransformHandler ();  destructor ;  ; MsgLogger & Log () const;  message logger ;  ; TMVA::DataLoader * VarianceThreshold (Double_t threshold);  Computes variance of all the variables and returns a new DataLoader with the selected variables whose variance is above a specific threshold. ;  . Public Attributes; MsgLogger * fLogger;  . Private Member Functions; void CalcNorm ();  Computes maximum, minimum, mean, RMS and variance for all variables and targets. ;  ; void CopyDataLoader (TMVA::DataLoader *des, TMVA::DataLoader *src);  ; void UpdateNorm (Int_t ivar, Double_t x);  Updates maximum and minimum value of a variable or target. ;  . Private Attributes; DataLoader * fDataLoader;  ; DataSetInfo & fDataSetInfo;  ; const std::vector< Event * > & fEvents;  . #include <TMVA/VarTransformHandler.h>; Constructor & Destructor Documentation. ◆ VarTransformHandler(). TMVA::VarTransformHandler::VarTransformHandler ; (; DataLoader * ; dl). constructor ; Definition at line 49 of file VarTransformHandler.cxx. ◆ ~VarTransformHandler(). TMVA::VarTransformHandler::~VarTransformHandler ; (; ). destructor ; Definition at line 61 of file VarTransformHandler.cxx. Member Function Documentation. ◆ CalcNorm(). void TMVA::VarTransformHandler::CalcNorm ; (; ). private . Computes maximum, minimum, mean, RMS and variance for all variables and targets. ; Definition at line 148 of file VarTransformHandler.cxx. ◆ CopyDataLoader(). void TMVA::VarTransformHandler::CopyDataLoader ; (; TMVA::DataLoader * ; des, . TMVA::DataLoader * ; src . ). private ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html:81,Guid,Guide,81,doc/master/classTMVA_1_1VarTransformHandler.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VarTransformHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableDecorrTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariableDecorrTransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 49 of file VariableDecorrTransform.h. Public Member Functions;  VariableDecorrTransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariableDecorrTransform (void);  destructor ;  ; virtual void AttachXMLTo (void *parent);  node attachment to parent ;  ; std::vector< TString > * GetTransformationStrings (Int_t cls) const;  creates string with variable transformations applied ;  ; void Initialize ();  initialisation ;  ; virtual const Event * InverseTransform (const Event *const, Int_t cls) const;  apply the inverse decorrelation transformation ... TODO : ... build the inverse transformation ;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the decorrelation transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  calculate the decorrelation matrix and the normalization ;  ; virtual void PrintTransformation (std::ostream &o);  prints the transformation matrix ;  ; virtual void ReadFromXML (void *trfnode);  Read the transformation matrices from the xml node. ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  Read the decorellation matrix from an input stream. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  apply the decorrelation transformation ;  ; void WriteTransformationToStream (std::ostream &) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html:85,Guid,Guide,85,doc/master/classTMVA_1_1VariableDecorrTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableDecorrTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableGaussTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariableGaussTransform Class ReferenceTMVA. ; Gaussian Transformation of input variables. ; Definition at line 72 of file VariableGaussTransform.h. Public Member Functions;  VariableGaussTransform (DataSetInfo &dsi, TString strcor="""");  constructor can only be applied one after the other when they are created. ;  ; virtual ~VariableGaussTransform (void);  destructor ;  ; virtual void AttachXMLTo (void *parent);  create XML description of Gauss transformation ;  ; void Initialize ();  ; virtual const Event * InverseTransform (const Event *const, Int_t cls) const;  apply the inverse Gauss or inverse uniform transformation ;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates the transformation function ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  calculate the cumulative distributions ;  ; virtual void PrintTransformation (std::ostream &o);  prints the transformation ;  ; virtual void ReadFromXML (void *trfnode);  Read the transformation matrices from the xml node. ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  Read the cumulative distribution. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  apply the Gauss transformation ;  ; void WriteTransformationToStream (std::ostream &) const;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  stand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html:84,Guid,Guide,84,doc/master/classTMVA_1_1VariableGaussTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableGaussTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableIdentityTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::VariableIdentityTransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 45 of file VariableIdentityTransform.h. Public Member Functions;  VariableIdentityTransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariableIdentityTransform (void);  ; virtual void AttachXMLTo (void *parent);  identity transformation to write to XML Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl; ;  ; void Initialize ();  nothing to initialize ;  ; virtual const Event * InverseTransform (const Event *const ev, Int_t cls) const;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the identity transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  the identity does not need to be prepared, only calculate the normalization ;  ; virtual void ReadFromXML (void *trfnode);  reding the identity transformation from XML ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  identity transform returns same event ;  ; void WriteTransformationToStream (std::ostream &) const;  ;  Public Member Functions inherited from TMVA::VariableTransformBase;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html:87,Guid,Guide,87,doc/master/classTMVA_1_1VariableIdentityTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableIdentityTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableImportance Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMVA::VariableImportance Class ReferenceTMVA. . Definition at line 44 of file VariableImportance.h. Public Member Functions;  VariableImportance (DataLoader *loader);  ;  ~VariableImportance ();  ; virtual void Evaluate ();  Virtual method to be implemented with your algorithm. ;  ; const VariableImportanceResult & GetResults () const;  ; VIType GetType ();  ; virtual TClass * IsA () const;  ; void SetType (VIType type);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html:80,Guid,Guide,80,doc/master/classTMVA_1_1VariableImportance.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportance.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableImportanceResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; TMVA::VariableImportanceResult Class ReferenceTMVA. . Definition at line 25 of file VariableImportance.h. Public Member Functions;  VariableImportanceResult ();  ;  VariableImportanceResult (const VariableImportanceResult &);  ;  ~VariableImportanceResult ();  ; TCanvas * Draw (const TString name=""VariableImportance"") const;  ; TH1F * GetImportanceHist ();  ; OptionMap & GetImportanceValues ();  ; void Print () const;  . Private Attributes; std::shared_ptr< TH1F > fImportanceHist;  ; OptionMap fImportanceValues;  ; VIType fType {kShort};  . Friends; class VariableImportance;  . #include <TMVA/VariableImportance.h>; Constructor & Destructor Documentation. ◆ VariableImportanceResult() [1/2]. TMVA::VariableImportanceResult::VariableImportanceResult ; (; ). Definition at line 41 of file VariableImportance.cxx. ◆ VariableImportanceResult() [2/2]. TMVA::VariableImportanceResult::VariableImportanceResult ; (; const VariableImportanceResult & ; obj). Definition at line 49 of file VariableImportance.cxx. ◆ ~VariableImportanceResult(). TMVA::VariableImportanceResult::~VariableImportanceResult ; (; ). inline . Definition at line 35 of file VariableImportance.h. Member Function Documentation. ◆ Draw(). TCanvas * TMVA::VariableImportanceResult::Draw ; (; const TString ; name = ""VariableImportance""); const. Definition at line 79 of file VariableImportance.cxx. ◆ GetImportanceHist(). TH1F * TMVA::VariableImportanceResult::GetImportanceHist ; (; ). inline . Definition at line 38 of file VariableImportance.h. ◆ GetImportanceValues(). OptionMap & TMVA::VariableImportanceResult::GetImportanceValues ; (; ). inline . Definition at line 37 of file VariableImportance.h. ◆ Print(). void TMVA::VariableImportanceResult::Print ; (; ); const. Definition at ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableImportanceResult.html:86,Guid,Guide,86,doc/master/classTMVA_1_1VariableImportanceResult.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableImportanceResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariableInfo Class ReferenceTMVA. ; Class for type info of MVA input variable. ; Definition at line 47 of file VariableInfo.h. Public Member Functions;  VariableInfo ();  default constructor ;  ;  VariableInfo (const TString &expression, const TString &title, const TString &unit, Int_t varCounter, char varType='F', void *external=nullptr, Double_t min=0, Double_t max=0, Bool_t normalized=kTRUE);  constructor ;  ;  VariableInfo (const VariableInfo &other);  copy constructor ;  ;  ~VariableInfo ();  ; void AddToXML (void *varnode);  write class to XML ;  ; const TString & GetExpression () const;  ; void * GetExternalLink () const;  ; const TString & GetInternalName () const;  ; const TString & GetLabel () const;  ; Double_t GetMax () const;  ; Double_t GetMean () const;  ; Double_t GetMin () const;  ; Double_t GetRMS () const;  ; const TString & GetUnit () const;  ; Double_t GetVariance () const;  ; char GetVarType () const;  ; virtual TClass * IsA () const;  ; VariableInfo & operator= (const TMVA::VariableInfo &rhs);  comparison operator ;  ; void ReadFromStream (std::istream &istr);  read VariableInfo from stream ;  ; void ReadFromXML (void *varnode);  read VariableInfo from stream ;  ; void ResetMinMax ();  ; void SetExternalLink (void *p);  ; void SetInternalName (const char *name);  ; void SetMax (Double_t v);  ; void SetMean (Double_t v);  ; void SetMin (Double_t v);  ; void SetRMS (Double_t v);  ; void SetVariance (Double_t v);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void WriteToStream (std::ostream &o) const;  write VariableInfo to stream ;  ;  Public Member Functions inherited",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableInfo.html:74,Guid,Guide,74,doc/master/classTMVA_1_1VariableInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableNormalizeTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariableNormalizeTransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 48 of file VariableNormalizeTransform.h. Public Types; typedef std::vector< Float_t > FloatVector;  ; typedef std::vector< FloatVector > VectorOfFloatVectors;  ;  Public Types inherited from TMVA::VariableTransformBase; typedef VectorOfCharAndInt::iterator ItVarTypeIdx;  ; typedef VectorOfCharAndInt::const_iterator ItVarTypeIdxConst;  ; typedef std::vector< std::pair< Char_t, UInt_t > > VectorOfCharAndInt;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  VariableNormalizeTransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariableNormalizeTransform (void);  ; virtual void AttachXMLTo (void *parent);  create XML description of Normalize transformation ;  ; void BuildTransformationFromVarInfo (const std::vector< TMVA::VariableInfo > &var);  this method is only used when building a normalization transformation from old text files in this case regression didn't exist and there were no targets ;  ; std::vector< TString > * GetTransformationStrings (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html:88,Guid,Guide,88,doc/master/classTMVA_1_1VariableNormalizeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableNormalizeTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariablePCATransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariablePCATransform Class ReferenceTMVA. ; Linear interpolation class. ; Definition at line 48 of file VariablePCATransform.h. Public Member Functions;  VariablePCATransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariablePCATransform (void);  destructor ;  ; virtual void AttachXMLTo (void *parent);  create XML description of PCA transformation ;  ; void Initialize ();  initialization of the transformation. ;  ; virtual const Event * InverseTransform (const Event *const, Int_t cls) const;  apply the principal component analysis TODO: implementation of inverse transformation Log() << kFATAL << ""Inverse transformation for PCA transformation not yet implemented. Hence, this transformation cannot be applied together with regression. Please contact the authors if necessary."" << Endl; ;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncName, Int_t part, UInt_t trCounter, Int_t cls);  creates C++ code fragment of the PCA transform for inclusion in standalone C++ class ;  ; Bool_t PrepareTransformation (const std::vector< Event * > &);  calculate the principal components using the ROOT class TPrincipal and the normalization ;  ; virtual void ReadFromXML (void *trfnode);  Read the transformation matrices from the xml node. ;  ; void ReadTransformationFromStream (std::istream &, const TString &);  Read mean values from input stream. ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual const Event * Transform (const Event *const, Int_t cls) const;  apply the principal component analysis ;  ; void WriteTransformationToStream (std::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html:82,Guid,Guide,82,doc/master/classTMVA_1_1VariablePCATransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariablePCATransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableRearrangeTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMVA::VariableRearrangeTransform Class ReferenceTMVA. ; Rearrangement of input variables. ; Definition at line 43 of file VariableRearrangeTransform.h. Public Types; typedef std::vector< Float_t > FloatVector;  ;  Public Types inherited from TMVA::VariableTransformBase; typedef VectorOfCharAndInt::iterator ItVarTypeIdx;  ; typedef VectorOfCharAndInt::const_iterator ItVarTypeIdxConst;  ; typedef std::vector< std::pair< Char_t, UInt_t > > VectorOfCharAndInt;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  VariableRearrangeTransform (DataSetInfo &dsi);  constructor ;  ; virtual ~VariableRearrangeTransform (void);  ; virtual void AttachXMLTo (void *parent);  create XML description of Rearrange transformation ;  ; std::vector< TString > * GetTransformationStrings (Int_t cls) const;  creates string with variable transformations applied ;  ; void Initialize ();  initialization of the rearrangement transformation (nothing to do) ;  ; virtual const Event * InverseTransform (const Event *const, Int_t cls) const;  ; virtual TClass * IsA () const;  ; virtual void MakeFunction (std::ostream &fout, const TString &fncN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html:88,Guid,Guide,88,doc/master/classTMVA_1_1VariableRearrangeTransform.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableRearrangeTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::VariableTransformBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::VariableTransformBase Class ReferenceabstractTMVA. ; Linear interpolation class. ; Definition at line 54 of file VariableTransformBase.h. Public Types; typedef VectorOfCharAndInt::iterator ItVarTypeIdx;  ; typedef VectorOfCharAndInt::const_iterator ItVarTypeIdxConst;  ; typedef std::vector< std::pair< Char_t, UInt_t > > VectorOfCharAndInt;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  VariableTransformBase (DataSetInfo &dsi, Types::EVariableTransform tf, const TString &trfName);  standard constructor ;  ; virtual ~VariableTransformBase (void);  ; virtual void AttachXMLTo (void *parent)=0;  create XML description the transformation (write out info of selected variables) ;  ; virtual void CountVariableTypes (UInt_t &nvars, UInt_t &ntgts, UInt_t &nspcts) const;  count variables, targets and spectators ;  ; virtual Bool_t GetInput (const Event *event, std::vector< Float_t > &input, std::vector< Char_t > &mask, Bool_t backTransform=kFALSE) const;  select the values from the event ;  ; virtual const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:83,Guid,Guide,83,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::Volume Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TMVA::Volume Class ReferenceTMVA. ; Volume for BinarySearchTree. ; volume element: variable space between upper and lower bonds of nvar-dimensional variable space ; Definition at line 47 of file Volume.h. Public Member Functions;  Volume (Double_t *l, Double_t *u, Int_t nvar);  constructor specifying the volume by c-style arrays of doubles ;  ;  Volume (Double_t l, Double_t u);  simple constructors for 1 dimensional values (double) ;  ;  Volume (Float_t *l, Float_t *u, Int_t nvar);  constructor specifying the volume by c-style arrays of floats ;  ;  Volume (Float_t l, Float_t u);  simple constructors for 1 dimensional values (float) ;  ;  Volume (std::vector< Double_t > *l=nullptr, std::vector< Double_t > *u=nullptr);  constructor specifying the volume by std::vectors of doubles ;  ;  Volume (std::vector< Float_t > *l, std::vector< Float_t > *u=nullptr);  constructor specifying the volume by std::vectors of floats ;  ;  Volume (Volume &);  copy constructor ;  ; virtual ~Volume (void);  destructor ;  ; void Delete (void);  delete array of volume bondaries ;  ; Volume & operator= (const Volume &);  assignment operator ;  ; void Print (void) const;  printout of the volume boundaries ;  ; void Scale (Double_t f);  ""scale"" the volume by multiplying each upper and lower boundary by ""f"" ;  ; void ScaleInterval (Double_t f);  ""scale"" the volume by symmetrically blowing up the interval in each dimension ;  . Public Attributes; std::vector< Double_t > * fLower;  vector with lower volume dimensions ;  ; std::vector< Double_t > * fUpper;  vector with upper volume dimensions ;  . Private Attributes; Bool_t fOwnerShip;  flag if ""boundary vector"" is owned by the volume of not ;  . #include <TMVA/Volume.h>; Constructor & Destructor Documentation. ◆ Volu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Volume.html:68,Guid,Guide,68,doc/master/classTMVA_1_1Volume.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Volume.html,1,['Guid'],['Guide']
Usability,". ROOT: TMVA::kNN Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; TMVA::kNN Namespace Reference. Classes; class  Event;  ; class  ModulekNN;  ; class  Node;  This file contains binary tree and global function template that searches tree for k-nearest neigbors. More...;  . Functions; template<class T > ; UInt_t Depth (const Node< T > *node);  ; template<class T > ; UInt_t Find (std::list< std::pair< const Node< T > *, Float_t > > &nlist, const Node< T > *node, const T &event, Double_t nfind, Double_t ncurr);  ; template<class T > ; UInt_t Find (std::list< std::pair< const Node< T > *, Float_t > > &nlist, const Node< T > *node, const T &event, UInt_t nfind);  ; std::ostream & operator<< (std::ostream &os, const Event &event);  . Function Documentation. ◆ Depth(). template<class T > . UInt_t TMVA::kNN::Depth ; (; const Node< T > * ; node). Definition at line 214 of file NodekNN.h. ◆ Find() [1/2]. template<class T > . UInt_t TMVA::kNN::Find ; (; std::list< std::pair< const Node< T > *, Float_t > > & ; nlist, . const Node< T > * ; node, . const T & ; event, . Double_t ; nfind, . Double_t ; ncurr . ). ◆ Find() [2/2]. template<class T > . UInt_t TMVA::kNN::Find ; (; std::list< std::pair< const Node< T > *, Float_t > > & ; nlist, . const Node< T > * ; node, . const T & ; event, . UInt_t ; nfind . ). ◆ operator<<(). std::ostream & TMVA::kNN::operator<< ; (; std::ostream & ; os, . const Event & ; event . ). TMVAkNN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1kNN.html:69,Guid,Guide,69,doc/master/namespaceTMVA_1_1kNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1kNN.html,2,['Guid'],['Guide']
Usability,. ROOT: TMVA::null_t< F > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; List of all members ; TMVA::null_t< F > Class Template Reference. ; template<typename F>; class TMVA::null_t< F >; Definition at line 97 of file DataSetFactory.h. Public Types; typedef F argument_type;  . Public Member Functions; F operator() (const F &argF) const;  . #include <TMVA/DataSetFactory.h>; Member Typedef Documentation. ◆ argument_type. template<typename F > . typedef F TMVA::null_t< F >::argument_type. Definition at line 102 of file DataSetFactory.h. Member Function Documentation. ◆ operator()(). template<typename F > . F TMVA::null_t< F >::operator() ; (; const F & ; argF); const. inline . Definition at line 103 of file DataSetFactory.h. The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/DataSetFactory.h. TMVAnull_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1null__t.html:82,Guid,Guide,82,doc/master/classTMVA_1_1null__t.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1null__t.html,2,['Guid'],['Guide']
Usability,". ROOT: TMacOSXSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMacOSXSystem Class Reference. . Definition at line 39 of file TMacOSXSystem.h. Public Member Functions;  TMacOSXSystem ();  ;  ~TMacOSXSystem ();  ; bool CocoaInitialized () const;  ; void DispatchOneEvent (Bool_t pendingOnly);  Dispatch a single event. ;  ;  Public Member Functions inherited from TUnixSystem;  TUnixSystem ();  ; virtual ~TUnixSystem ();  Reset to original state. ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *lib) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacOSXSystem.html:69,Guid,Guide,69,doc/master/classTMacOSXSystem.html,https://root.cern,https://root.cern/doc/master/classTMacOSXSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TMacro Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMacro Class ReferenceCore ROOT classes » Base ROOT classes. ; Class supporting a collection of lines with C++ code. ; A TMacro can be executed, saved to a ROOT file, edited, etc.; A macro can be built line by line by calling the AddLine function. or it can be created directly from a file via the special constructor when the first argument is a file name.; A macro can be executed via the Exec function. Arguments can be specified when calling Exec.; A macro can be drawn in a pad. When the pad is updated, the macro is automatically executed.; The code in the macro can be saved via the SaveSource function. If the macro is in the list of primitives of a pad/canvas, the macro will be saved in the script generated by TCanvas::SaveSource.; A macro can be written to a ROOT file via TObject::Write.; Examples: TMacro m(""Peaks.C""); //macro m with name ""Peaks"" is created; //from file Peaks.C; m.Exec(); //macro executed with default arguments; m.Exec(""4""); //macro executed with argument; m.SaveSource(""newPeaks.C"");; TFile f(""mymacros.root"",""recreate"");; m.Write(); //macro saved to file with name ""Peaks""; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TObject::Writevirtual Int_t Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)Write this object to the current directory.Definition TObject.cxx:886; mTMarker mDefinition textangle.C:8. Definition at line 31 of file TMacro.h. Public Member Functions;  TMacro ();  Create an empty macro, use AddLine() or ReadFile() to fill this macro. ;  ;  TMacro (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMacro.html:62,Guid,Guide,62,doc/master/classTMacro.html,https://root.cern,https://root.cern/doc/master/classTMacro.html,1,['Guid'],['Guide']
Usability,". ROOT: TMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMap Class ReferenceCore ROOT classes » Containers. ; TMap implements an associative array of (key,value) pairs using a THashTable for efficient retrieval (therefore TMap does not conserve the order of the entries). ; The hash value is calculated using the value returned by the keys Hash() function and the key comparison is done via the IsEqual() function. Both key and value must inherit from TObject. ; Definition at line 40 of file TMap.h. Public Types; typedef TMapIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMap (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  TMap ctor. See THashTable for a description of the arguments. ;  ; virtual ~TMap ();  TMap dtor. ;  ; void Add (TObject *key, TObject *value);  Add a (key,value) pair to the map. ;  ; void Add (TObject *obj) override;  This function may not be used (but we need to provide it since it is a pure virtual in TCollection). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMap.html:60,Guid,Guide,60,doc/master/classTMap.html,https://root.cern,https://root.cern/doc/master/classTMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TMapFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMapFile Class ReferenceInput/Output Library. ; This class implements a shared memory region mapped to a file. ; Objects can be placed into this shared memory area using the Add() member function. To actually place a copy of the object is shared memory call Update() also whenever the mapped object(s) change(s) call Update() to put a fresh copy in the shared memory. This extra step is necessary since it is not possible to share objects with virtual pointers between processes (the vtbl ptr points to the originators unique address space and can not be used by the consumer process(es)). Consumer processes can map the memory region from this file and access the objects stored in it via the Get() method (which returns a copy of the object stored in the shared memory with correct vtbl ptr set). Only objects of classes with a Streamer() member function defined can be shared.; I know the current implementation is not ideal (you need to copy to and from the shared memory file) but the main problem is with the class' virtual_table pointer. This pointer points to a table unique for every process. Therefore, different options are:; One could allocate an object directly in shared memory in the producer, but the consumer still has to copy the object from shared memory into a local object which has the correct vtbl pointer for that process (copy ctor's can be used for creating the local copy).; Another possibility is to only allow objects without virtual functions in shared memory (like simple C structs), or to forbid (how?) the consumer from calling any virtual functions of the objects in shared memory.; A last option is t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:64,Guid,Guide,64,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TMarker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMarker Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Manages Markers. ; Use the TMarker constructor to create a marker.; TMarker(Double_t x,Double_t y,Int_t marker); TMarker::TMarkerTMarker()Marker default constructor.Definition TMarker.cxx:55; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; The parameters x and y are the marker coordinates and marker is the marker type.; Use the TPolyMarker to create an array on N points in a 2D space. At each point x[i], y[i] a marker is drawn.; Use the TAttMarker class to change the attributes color, style and size of a marker.; Example. Use the TAttMarker::SetMarkerSize(size) method to set the size of a marker. . Definition at line 22 of file TMarker.h. Public Types; enum  { kMarkerNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMarker ();  Marker default constructor. ;  ;  TMarker (const TMarker &marker);  Marker copy constructor. ;  ;  TMarker (Double_t x, Double_t y, Int_t marker);  Marker normal constructor. ;  ;  ~TMarker () override;  Marker default destructor. ;  ; void Copy (TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMarker.html:63,Guid,Guide,63,doc/master/classTMarker.html,https://root.cern,https://root.cern/doc/master/classTMarker.html,1,['Guid'],['Guide']
Usability,". ROOT: TMarker3DBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TMarker3DBox Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A special 3-D marker designed for event display. ; It has the following parameters:; fX: X coordinate of the center of the box; fY: Y coordinate of the center of the box; fZ: Z coordinate of the center of the box; fDx: half length in X; fDy: half length in Y; fDz: half length in Z; fTheta: Angle of box z axis with respect to main Z axis; fPhi: Angle of box x axis with respect to main Xaxis; fRefObject: A reference to an object . Definition at line 37 of file TMarker3DBox.h. Public Member Functions;  TMarker3DBox ();  Marker3DBox default constructor. ;  ;  TMarker3DBox (Float_t x, Float_t y, Float_t z, Float_t dx, Float_t dy, Float_t dz, Float_t theta, Float_t phi);  Marker3DBox normal constructor. ;  ;  ~TMarker3DBox () override;  Marker3DBox shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a Marker3DBox. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void GetDirection (Float_t &theta, Float_t &phi) const;  ; virtual void GetPosition (Float_t &x, Float_t &y, Float_t &z) const;  ; TObject * GetRefObject () const;  ; virtual void GetSize (Float_t &dx, Float_t &dy, Float_t &dz) const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option) override;  Paint marker 3D box. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetDirection (Float_t theta, Float_t phi);  Set direction. ;  ; virtual void SetPoints (Double_t *buff) const;  Set points.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMarker3DBox.html:68,Guid,Guide,68,doc/master/classTMarker3DBox.html,https://root.cern,https://root.cern/doc/master/classTMarker3DBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TMaterial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMaterial Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector material. ; See class TGeometry ; Definition at line 28 of file TMaterial.h. Public Member Functions;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TMaterial. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMaterial.html:65,Guid,Guide,65,doc/master/classTMaterial.html,https://root.cern,https://root.cern/doc/master/classTMaterial.html,1,['Guid'],['Guide']
Usability,". ROOT: TMath Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes |; Functions ; TMath Namespace Reference. TMath. ; More... Namespaces; namespace  ROOTDict;  . Classes; struct  Limits;  . Functions; Double_t Abs (Double_t d);  Returns the absolute value of parameter Double_t d. ;  ; Float_t Abs (Float_t d);  Returns the absolute value of parameter Float_t d. ;  ; Int_t Abs (Int_t d);  Returns the absolute value of parameter Int_t d. ;  ; Long64_t Abs (Long64_t d);  Returns the absolute value of parameter Long64_t d. ;  ; Long_t Abs (Long_t d);  Returns the absolute value of parameter Long_t d. ;  ; LongDouble_t Abs (LongDouble_t d);  Returns the absolute value of parameter LongDouble_t d. ;  ; Short_t Abs (Short_t d);  Returns the absolute value of parameter Short_t d. ;  ; Double_t ACos (Double_t);  Returns the principal value of the arc cosine of x, expressed in radians. ;  ; Double_t ACosH (Double_t);  Returns the nonnegative area hyperbolic cosine of x. ;  ; Bool_t AreEqualAbs (Double_t af, Double_t bf, Double_t epsilon);  Comparing floating points. ;  ; Bool_t AreEqualRel (Double_t af, Double_t bf, Double_t relPrec);  Comparing floating points. ;  ; Double_t ASin (Double_t);  Returns the principal value of the arc sine of x, expressed in radians. ;  ; Double_t ASinH (Double_t);  Returns the area hyperbolic sine of x. ;  ; Double_t ATan (Double_t);  Returns the principal value of the arc tangent of x, expressed in radians. ;  ; Double_t ATan2 (Double_t y, Double_t x);  Returns the principal value of the arc tangent of y/x, expressed in radians. ;  ; Double_t ATanH (Double_t);  Returns the area hyperbolic tangent of x. ;  ; Double_t BesselI (Int_t n, Double_t x);  Computes the Integer Order Modified Bessel function I_n(x) for n=0,1,2,... and any real x. ;  ; Double_t BesselI0 (Double_t x);  Integer order modified Bessel function K_n(x) ;  ; Double_t BesselI1 (Double_t x);  Modified Bessel fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:65,Guid,Guide,65,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Guid'],['Guide']
Usability,". ROOT: TMathText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TMathText Class ReferenceGraphics » 2D Graphics » Basic graphics. ; To draw TeX Mathematical Formula. ; TMathText's purpose is to write mathematical equations, exactly as TeX would do it. The syntax is the same as the TeX's one.; The following example demonstrate how to use TMathText:; ; {; TCanvas *c1 = new TCanvas(""c1"");; ; TMathText l;; l.SetTextAlign(23);; l.SetTextSize(0.06);; l.DrawMathText(0.50, 1.000, ""\\prod_{j\\ge0} \\left(\\sum_{k\\ge0} a_{jk}z^k\\right) = \\sum_{n\\ge0} z^n \\left(\\sum_{k_0,k_1,\\ldots\\ge0\\atop k_0+k_1+\\cdots=n} a_{0k_0}a_{1k_1} \\cdots \\right)"");; l.DrawMathText(0.50, 0.800, ""W_{\\delta_1\\rho_1\\sigma_2}^{3\\beta} = U_{\\delta_1\\rho_1\\sigma_2}^{3\\beta} + {1\\over 8\\pi^2} \\int_{\\alpha_1}^{\\alpha_2} d\\alpha_2^\\prime \\left[ {U_{\\delta_1\\rho_1}^{2\\beta} - \\alpha_2^\\prime U_{\\rho_1\\sigma_2}^{1\\beta} \\over U_{\\rho_1\\sigma_2}^{0\\beta}} \\right]"");; l.DrawMathText(0.50, 0.600, ""d\\Gamma = {1\\over 2m_A} \\left( \\prod_f {d^3p_f\\over (2\\pi)^3} {1\\over 2E_f} \\right) \\left| \\mathscr{M} \\left(m_A - \\left\\{p_f\\right\\} \\right) \\right|^2 (2\\pi)^4 \\delta^{(4)} \\left(p_A - \\sum p_f \\right)"");; l.DrawMathText(0.50, 0.425, ""4\\mathrm{Re}\\left\\{{2\\over 1-\\Delta\\alpha} \\chi(s) \\left[ \\^{g}_\\nu^e \\^{g}_\\nu^f (1 + \\cos^2\\theta) + \\^{g}_a^e \\^{g}_a^f \\cos\\theta \\right] \\right\\}"");; l.DrawMathText(0.50, 0.330, ""p(n) = {1\\over\\pi\\sqrt{2}} \\sum_{k = 1}^\\infty \\sqrt{k} A_k(n) {d\\over dn} {\\sinh \\left\\{ {\\pi\\over k} \\sqrt{2\\over 3} \\sqrt{n - {1\\over 24}} \\right\\} \\over \\sqrt{n - {1\\over 24}}}"");; l.DrawMathText(0.13, 0.150, ""{(\\ell+1)C_{\\ell}^{TE} \\over 2\\pi}"");; l.DrawMathText(0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathText.html:65,Guid,Guide,65,doc/master/classTMathText.html,https://root.cern,https://root.cern/doc/master/classTMathText.html,1,['Guid'],['Guide']
Usability,". ROOT: TMathTextRenderer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMathTextRenderer Class Reference. . Definition at line 54 of file TMathText.cxx. Public Member Functions;  TMathTextRenderer (TMathText *parent);  ; mathtext::bounding_box_t bounding_box (const std::wstring string, const unsigned int family=FAMILY_PLAIN) override;  ; mathtext::bounding_box_t bounding_box (const wchar_t character, float &current_x, const unsigned int family);  ; void filled_rectangle (const mathtext::bounding_box_t &bounding_box_0) override;  ; float font_size (const unsigned int family=FAMILY_PLAIN) const override;  ; void point (const float, const float) override;  ; void rectangle (const mathtext::bounding_box_t &) override;  ; void reset_font_size (const unsigned int) override;  ; void set_font_size (const float size) override;  ; void set_font_size (const float size, const unsigned int family) override;  ; void set_parameter (const float x, const float y, const float size, const float angle_degree);  ; void text_raw (const float x, const float y, const std::wstring string, const unsigned int family=FAMILY_PLAIN) override;  ; void text_with_bounding_box (const float, const float, const std::wstring, const unsigned int) override;  ; void transform_pad (double &xt, double &yt, const float x, const float y) const;  ;  Public Member Functions inherited from TText;  TText ();  ;  TText (const TText &text);  Copy constructor. ;  ;  TText (Double_t x, Double_t y, const char *text);  Text normal constructor. ;  ;  TText (Double_t x, Double_t y, const wchar_t *text);  Text normal constructor. ;  ;  ~TText () override;  Text default destructor. ;  ; void Copy (TObject &text) const override;  Copy this text to text. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMathTextRenderer.html:73,Guid,Guide,73,doc/master/classTMathTextRenderer.html,https://root.cern,https://root.cern/doc/master/classTMathTextRenderer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixDEigen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixDEigen Class ReferenceMath » Matrix Linear Algebra. ; TMatrixDEigen. ; Eigenvalues and eigenvectors of a real matrix.; If A is not symmetric, then the eigenvalue matrix D is block diagonal with the real eigenvalues in 1-by-1 blocks and any complex eigenvalues, a + i*b, in 2-by-2 blocks, [a, b; -b, a]. That is, if the complex eigenvalues look like; u + iv . . . . .; . u - iv . . . .; . . a + ib . . .; . . . a - ib . .; . . . . x .; . . . . . y; a#define a(i)Definition RSha256.hxx:99; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; then D looks like; u v . . . .; -v u . . . .; . . a b . .; . . -b a . .; . . . . x .; . . . . . y; b#define b(i)Definition RSha256.hxx:100; v@ vDefinition rootcling_impl.cxx:3699; This keeps V a real matrix in both symmetric and non-symmetric cases, and A*V = V*D. ; Definition at line 26 of file TMatrixDEigen.h. Public Types; enum  { kWorkMax = 100; };  . Public Member Functions;  TMatrixDEigen ();  ;  TMatrixDEigen (const TMatrixD &a);  Constructor for eigen-problem of matrix A . ;  ;  TMatrixDEigen (const TMatrixDEigen &another);  Copy constructor. ;  ; virtual ~TMatrixDEigen ();  ; const TMatrixD GetEigenValues () const;  Computes the block diagonal eigenvalue matrix. ;  ; const TVectorD & GetEigenValuesIm () const;  ; const TVectorD & GetEigenValuesRe () const;  ; const TMatrixD & GetEigenVectors () const;  ; virtual TClass * IsA () const;  ; TMatrixDEigen & operator= (const TMatrixDEigen &source);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixDEigen.html:69,Guid,Guide,69,doc/master/classTMatrixDEigen.html,https://root.cern,https://root.cern/doc/master/classTMatrixDEigen.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixDSymEigen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixDSymEigen Class ReferenceMath » Matrix Linear Algebra. ; TMatrixDSymEigen. ; Eigenvalues and eigenvectors of a real symmetric matrix.; If A is symmetric, then A = V*D*V' where the eigenvalue matrix D is diagonal and the eigenvector matrix V is orthogonal. That is, the diagonal values of D are the eigenvalues, and V*V' = I, where I is the identity matrix. The columns of V represent the eigenvectors in the sense that A*V = V*D. ; Definition at line 27 of file TMatrixDSymEigen.h. Public Types; enum  { kWorkMax = 100; };  . Public Member Functions;  TMatrixDSymEigen ();  ;  TMatrixDSymEigen (const TMatrixDSym &a);  Constructor for eigen-problem of symmetric matrix A . ;  ;  TMatrixDSymEigen (const TMatrixDSymEigen &another);  Copy constructor. ;  ; virtual ~TMatrixDSymEigen ();  ; const TVectorD & GetEigenValues () const;  ; const TMatrixD & GetEigenVectors () const;  ; virtual TClass * IsA () const;  ; TMatrixDSymEigen & operator= (const TMatrixDSymEigen &source);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Static Protected Member Functions; static void MakeEigenVectors (TMatrixD &v, TVectorD &d, TVectorD &e);  Symmetric tridiagonal QL algorithm. ;  ; static void MakeTridiagonal (TMatrixD &v, TVectorD &d, TVectorD &e);  This is derived from the Algol procedures tred2 by Bowdler, Martin, Reinsch, and Wilkinson, Handbook for Auto. ;  . Protected Attributes; TVectorD fEigenValues;  ; TMatrixD fEige",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixDSymEigen.html:72,Guid,Guide,72,doc/master/classTMatrixDSymEigen.html,https://root.cern,https://root.cern/doc/master/classTMatrixDSymEigen.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixT< Element >TMatrixT. ; Template class of a general matrix in the linear algebra package; See the Matrix Linear Algebra page for the documentation of the linear algebra package ; Definition at line 40 of file TMatrixT.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { ;   kMult; , kTransposeMult; , kInvMult; , kMultTranspose; , ;   kPlus; , kMinus. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixT ();  ;  TMatrixT (const TMatrixT< Element > &a, EMatrixCreatorsOp2 op, const TMatrixT< Element > &b);  Constructor of matrix applying a specific operation to two prototypes. ;  ;  TMatrixT (const TMatrixT< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  Constructor of matrix applying a specific operation to two prototypes. ;  ;  TMatrixT (const TMatrixT< Element > &another);  Copy constructor. ;  ; temp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:84,Guid,Guide,84,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTAutoloadOps Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; TMatrixTAutoloadOps Namespace Reference. Functions; template<class Element > ; TMatrixT< Element > & Add (TMatrixT< Element > &target, Element scalar, const TMatrixT< Element > &source);  Modify addition: target += scalar * source. ;  ; template<class Element > ; TMatrixT< Element > & Add (TMatrixT< Element > &target, Element scalar, const TMatrixTSym< Element > &source);  Modify addition: target += scalar * source. ;  ; template<class Element > ; TVectorT< Element > & Add (TVectorT< Element > &target, Element scalar, const TMatrixT< Element > &a, const TVectorT< Element > &source);  Modify addition: target += scalar * A * source. ;  ; template<class Element > ; TVectorT< Element > & Add (TVectorT< Element > &target, Element scalar, const TMatrixTSparse< Element > &a, const TVectorT< Element > &source);  Modify addition: target += A * source. ;  ; template<class Element > ; TVectorT< Element > & Add (TVectorT< Element > &target, Element scalar, const TMatrixTSym< Element > &a, const TVectorT< Element > &source);  Modify addition: target += A * source. ;  ; template<class Element > ; TVectorT< Element > & Add (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source);  Modify addition: target += scalar * source. ;  ; template<class Element > ; TVectorT< Element > & AddElemDiv (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2);  Modify addition: target += scalar * ElementDiv(source1,source2) . ;  ; template<class Element > ; TVectorT< Element > & AddElemDiv (TVectorT< Element > &target, Element scalar, const TVectorT< Element > &source1, const TVectorT< Element > &source2, const TVectorT< Element > &select);  Modify addition: target += scalar * ElementDiv(source1,source2) only for those elements where select[i] != 0.0. ;  ; template<class Ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html:79,Guid,Guide,79,doc/master/namespaceTMatrixTAutoloadOps.html,https://root.cern,https://root.cern/doc/master/namespaceTMatrixTAutoloadOps.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTBase< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TMatrixTBase< Element > Class Template ReferenceabstractMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTBase< Element >TMatrixTBase. ; Template of base class in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Matrix properties are stored here, however the data storage is part of the derived classes ; Definition at line 84 of file TMatrixTBase.h. Public Member Functions;  TMatrixTBase ();  ;  ~TMatrixTBase () override;  ; virtual TMatrixTBase< Element > & Abs ();  Take an absolute value of a matrix, i.e. apply Abs() to each element. ;  ; virtual TMatrixTBase< Element > & Apply (const TElementActionT< Element > &action);  Apply action to each matrix element. ;  ; virtual TMatrixTBase< Element > & Apply (const TElementPosActionT< Element > &action);  Apply action to each element of the matrix. ;  ; TClass * Class ();  ; void Clear (Option_t *option="""") override=0;  ; virtual Element ColNorm () const;  Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ;  ; virtual Double_t Determinant () const;  ; virtual void Determinant (Double_t &d1, Double_t &d2) const;  ; void Draw (Option_t *option="""") override;  Draw this matrix The histogram is named ""TMatrixT"" by default and no title. ;  ; virtual Element E2Norm () const;  Square of the Euclidean norm, SUM{ m(i,j)^2 }. ;  ; virtual void ExtractRow (Int_t row, Int_t col, Element *v, Int_t n=-1) const;  Store in array v, n matrix elements of row rown starting at column coln. ;  ; virtual const Int_t * GetColIndexArray () const =0;  ; virtual Int_t * GetColIndexArray ()=0;  ; Int_t GetCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTBase.html:88,Guid,Guide,88,doc/master/classTMatrixTBase.html,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTColumn< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMatrixTColumn< Element > Class Template Reference. ; template<class Element>; class TMatrixTColumn< Element >; Definition at line 249 of file TMatrixTUtils.h. Public Member Functions;  TMatrixTColumn ();  ;  TMatrixTColumn (const TMatrixTColumn< Element > &mc);  Copy constructor. ;  ;  TMatrixTColumn (TMatrixT< Element > &matrix, Int_t col);  Constructor with column ""col"" of matrix. ;  ;  TMatrixTColumn (TMatrixTSym< Element > &matrix, Int_t col);  Constructor with column ""col"" of matrix. ;  ; void Assign (Element val);  Assign val to every element of the matrix column. ;  ; Element * GetPtr () const;  ; TClass * IsA () const override;  ; Element & operator() (Int_t i);  ; const Element & operator() (Int_t i) const;  ; void operator*= (const TMatrixTColumn_const< Element > &c);  Multiply every element of the matrix column with the corresponding element of column mc. ;  ; void operator*= (Element val);  Multiply every element of the matrix column with val. ;  ; void operator+= (const TMatrixTColumn_const< Element > &c);  Add to every element of the matrix row the corresponding element of row mc. ;  ; void operator+= (Element val);  Add val to every element of the matrix column. ;  ; TMatrixTColumn< Element > & operator= (const TMatrixTColumn< Element > &c);  ; void operator= (const TMatrixTColumn_const< Element > &c);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to a matrix column. ;  ; void operator= (Element val);  ; void operator= (std::initializer_list< Element > l);  Assign element of the matrix column using given initializer list. ;  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTColumn.html:90,Guid,Guide,90,doc/master/classTMatrixTColumn.html,https://root.cern,https://root.cern/doc/master/classTMatrixTColumn.html,1,['Guid'],['Guide']
Usability,. ROOT: TMatrixTDiag< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMatrixTDiag< Element > Class Template Reference. ; template<class Element>; class TMatrixTDiag< Element >; Definition at line 349 of file TMatrixTUtils.h. Public Member Functions;  TMatrixTDiag ();  ;  TMatrixTDiag (const TMatrixTDiag< Element > &md);  Copy constructor. ;  ;  TMatrixTDiag (TMatrixT< Element > &matrix);  Constructor. ;  ;  TMatrixTDiag (TMatrixTSym< Element > &matrix);  Constructor. ;  ; Element * GetPtr () const;  ; TClass * IsA () const override;  ; Element & operator() (Int_t i);  ; const Element & operator() (Int_t i) const;  ; void operator*= (const TMatrixTDiag_const< Element > &d);  Multiply every element of the matrix diagonal with the corresponding element of diagonal md. ;  ; void operator*= (Element val);  Assign val to every element of the matrix diagonal. ;  ; void operator+= (const TMatrixTDiag_const< Element > &d);  Add to every element of the matrix diagonal the corresponding element of diagonal md. ;  ; void operator+= (Element val);  Assign val to every element of the matrix diagonal. ;  ; TMatrixTDiag< Element > & operator= (const TMatrixTDiag< Element > &d);  ; void operator= (const TMatrixTDiag_const< Element > &d);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to the matrix diagonal. ;  ; void operator= (Element val);  Assign val to every element of the matrix diagonal. ;  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTDiag_const< Element >;  TMatrixTDiag_const ();  ;  TMatrixTDiag_const (const TMatrixT< Element > &matrix);  Constructor. ;  ;  TMatrixTDiag_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTDiag.html:88,Guid,Guide,88,doc/master/classTMatrixTDiag.html,https://root.cern,https://root.cern/doc/master/classTMatrixTDiag.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTLazy< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TMatrixTLazy< Element > Class Template ReferenceabstractMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTLazy< Element >Templates of Lazy Matrix classes. ; TMatrixTLazy; TMatrixTSymLazy; THaarMatrixT; THilbertMatrixT; THilbertMatrixTSym; THaarMatrixTDefinition TMatrixTLazy.h:122; THilbertMatrixTSymDefinition TMatrixTLazy.h:161; THilbertMatrixTDefinition TMatrixTLazy.h:141; TMatrixTLazyTemplates of Lazy Matrix classes.Definition TMatrixTLazy.h:43; TMatrixTSymLazyDefinition TMatrixTLazy.h:86. Definition at line 43 of file TMatrixTLazy.h. Public Member Functions;  TMatrixTLazy ();  ;  TMatrixTLazy (Int_t nrows, Int_t ncols);  ;  TMatrixTLazy (Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  ;  ~TMatrixTLazy () override;  ; Int_t GetColLwb () const;  ; Int_t GetColUpb () const;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTLazy.html:88,Guid,Guide,88,doc/master/classTMatrixTLazy.html,https://root.cern,https://root.cern/doc/master/classTMatrixTLazy.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTRow< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMatrixTRow< Element > Class Template Reference. ; template<class Element>; class TMatrixTRow< Element >; Definition at line 149 of file TMatrixTUtils.h. Public Member Functions;  TMatrixTRow ();  ;  TMatrixTRow (const TMatrixTRow< Element > &mr);  Copy constructor. ;  ;  TMatrixTRow (TMatrixT< Element > &matrix, Int_t row);  Constructor with row ""row"" of symmetric matrix. ;  ;  TMatrixTRow (TMatrixTSym< Element > &matrix, Int_t row);  Constructor with row ""row"" of symmetric matrix. ;  ; void Assign (Element val);  Assign val to every element of the matrix row. ;  ; Element * GetPtr () const;  ; TClass * IsA () const override;  ; Element & operator() (Int_t i);  ; const Element & operator() (Int_t i) const;  ; void operator*= (const TMatrixTRow_const< Element > &r);  Multiply every element of the matrix row with the corresponding element of row r. ;  ; void operator*= (Element val);  Multiply every element of the matrix row with val. ;  ; void operator+= (const TMatrixTRow_const< Element > &r);  Add to every element of the matrix row the corresponding element of row r. ;  ; void operator+= (Element val);  Add val to every element of the matrix row. ;  ; TMatrixTRow< Element > & operator= (const TMatrixTRow< Element > &r);  ; void operator= (const TMatrixTRow_const< Element > &r);  Assignment operator. ;  ; void operator= (const TVectorT< Element > &vec);  Assign a vector to a matrix row. ;  ; void operator= (std::initializer_list< Element > l);  ; Element & operator[] (Int_t i);  ; const Element & operator[] (Int_t i) const;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMatrixTRow_const< Element >;  TMatrixTRow_const ();  ;  TM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTRow.html:87,Guid,Guide,87,doc/master/classTMatrixTRow.html,https://root.cern,https://root.cern/doc/master/classTMatrixTRow.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTSparse< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixTSparse< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTSparse< Element >TMatrixTSparse. ; Template class of a general sparse matrix in the Harwell-Boeing format; Besides the usual shape/size descriptors of a matrix like fNrows, fRowLwb,fNcols and fColLwb, we also store a row index, fRowIndex and column index, fColIndex only for those elements unequal zero:; fRowIndex[0,..,fNrows]: Stores for each row the index range of; the elements in the data and column array; fColIndex[0,..,fNelems-1]: Stores the column number for each data; element != 0; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TMatrixTBase::fNelemsInt_t fNelemsDefinition TMatrixTBase.h:94; TMatrixTBase::fNrowsInt_t fNrowsDefinition TMatrixTBase.h:90; TMatrixTSparse::fRowIndexInt_t * fRowIndexDefinition TMatrixTSparse.h:40; TMatrixTSparse::fColIndexInt_t * fColIndexDefinition TMatrixTSparse.h:41; As an example how to access all sparse data elements:; for (Int_t irow = 0; irow < this->fNrows; irow++) {; const Int_t sIndex = fRowIndex[irow];; const Int_t eIndex = fRowIndex[irow+1];; for (Int_t index = sIndex; index < eIndex; index++) {; const Int_t icol = fColIndex[index];; const Element data = fElements[index];; printf(""data(%d,%",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSparse.html:90,Guid,Guide,90,doc/master/classTMatrixTSparse.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSparse.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTSub< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMatrixTSub< Element > Class Template Reference. ; template<class Element>; class TMatrixTSub< Element >; Definition at line 527 of file TMatrixTUtils.h. Public Types; enum  { kWorkMax = 100; };  . Public Member Functions;  TMatrixTSub ();  ;  TMatrixTSub (const TMatrixTSub< Element > &ms);  Copy constructor. ;  ;  TMatrixTSub (TMatrixT< Element > &matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  Constructor. ;  ;  TMatrixTSub (TMatrixTSym< Element > &matrix, Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb);  Constructor. ;  ; TClass * IsA () const override;  ; Element & operator() (Int_t rown, Int_t coln);  ; void operator*= (const TMatrixT< Element > &m);  Multiply submatrix with matrix source. ;  ; void operator*= (const TMatrixTSub_const< Element > &s);  Multiply submatrix with submatrix ms. ;  ; void operator*= (const TMatrixTSym< Element > &m);  Multiply submatrix with matrix source. ;  ; void operator*= (Element val);  Multiply every element of the sub matrix by val . ;  ; void operator+= (const TMatrixTBase< Element > &m);  Add to every element of the submatrix the corresponding element of matrix mt. ;  ; void operator+= (const TMatrixTSub_const< Element > &s);  Add to every element of the submatrix the corresponding element of submatrix ms. ;  ; void operator+= (Element val);  Add val to every element of the sub matrix. ;  ; void operator= (const TMatrixTBase< Element > &m);  Assignment operator. ;  ; TMatrixTSub< Element > & operator= (const TMatrixTSub< Element > &s);  ; void operator= (const TMatrixTSub_const< Element > &s);  Assignment operator. ;  ; void operator= (Element val);  Assign val to every element of the sub matrix. ;  ; void Rank1Update (const TVectorT< El",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSub.html:87,Guid,Guide,87,doc/master/classTMatrixTSub.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSub.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTSym< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMatrixTSym< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TMatrixTSym< Element >TMatrixTSym. ; Template class of a symmetric matrix in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Note that in this implementation both matrix element m[i][j] and m[j][i] are updated and stored in memory. However, when making the object persistent only the upper right triangle is stored. ; Definition at line 36 of file TMatrixTSym.h. Public Types; enum  { kWorkMax = 100; };  ; enum  EMatrixCreatorsOp1 { ;   kZero; , kUnit; , kTransposed; , kInverted; , ;   kAtA. };  ; enum  EMatrixCreatorsOp2 { kPlus; , kMinus; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMatrixTSym ();  ;  TMatrixTSym (const TMatrixTSym< Element > &a, EMatrixCreatorsOp2 op, const TMatrixTSym< Element > &b);  ;  TMatrixTSym (const TMatrixTSym< Element > &another);  ; template<class Element2 > ;  TMatrixTSym (const TMatrixTSym< Element2 > &another);  ;  TMatrixTSym (const TMatr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSym.html:87,Guid,Guide,87,doc/master/classTMatrixTSym.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSym.html,1,['Guid'],['Guide']
Usability,". ROOT: TMatrixTSymLazy< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TMatrixTSymLazy< Element > Class Template Referenceabstract. ; template<class Element>; class TMatrixTSymLazy< Element >; Definition at line 86 of file TMatrixTLazy.h. Public Member Functions;  TMatrixTSymLazy ();  ;  TMatrixTSymLazy (Int_t nrows);  ;  TMatrixTSymLazy (Int_t row_lwb, Int_t row_upb);  ;  ~TMatrixTSymLazy () override;  ; Int_t GetRowLwb () const;  ; Int_t GetRowUpb () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTSymLazy.html:91,Guid,Guide,91,doc/master/classTMatrixTSymLazy.html,https://root.cern,https://root.cern/doc/master/classTMatrixTSymLazy.html,1,['Guid'],['Guide']
Usability,". ROOT: TMehrotraSolver Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMehrotraSolver Class Reference. ; Derived class of TQpSolverBase implementing the original Mehrotra predictor-corrector algorithm. ; Definition at line 55 of file TMehrotraSolver.h. Public Member Functions;  TMehrotraSolver ();  Default constructor. ;  ;  TMehrotraSolver (const TMehrotraSolver &another);  Copy constructor. ;  ;  TMehrotraSolver (TQpProbBase *of, TQpDataBase *prob, Int_t verbose=0);  Constructor. ;  ;  ~TMehrotraSolver () override;  Deconstructor. ;  ; void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t status_code, Int_t level) override;  Print information about the optimization process and monitor the convergence status of thye algorithm. ;  ; TClass * IsA () const override;  ; TMehrotraSolver & operator= (const TMehrotraSolver &source);  Assignment operator. ;  ; Int_t Solve (TQpDataBase *prob, TQpVar *iterate, TQpResidual *resid) override;  Solve the quadratic programming problem as formulated through prob, store the final solution in iterate->fX . ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQpSolverBase;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMehrotraSolver.html:71,Guid,Guide,71,doc/master/classTMehrotraSolver.html,https://root.cern,https://root.cern/doc/master/classTMehrotraSolver.html,1,['Guid'],['Guide']
Usability,". ROOT: TMemFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:64,Guid,Guide,64,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TMemFile Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TMemFile Class ReferenceInput/Output Library. ; A TMemFile is like a normal TFile except that it reads and writes only from memory. ; Definition at line 19 of file TMemFile.h. Classes; struct  TMemBlock;  ; struct  ZeroCopyView_t;  A read-only memory range which we do not control. More...;  . Public Types; using ExternalDataPtr_t = std::shared_ptr< const std::vector< char > >;  ;  Public Types inherited from TFile; enum  { kStartBigFile = 2000000000; };  ; enum  EAsyncOpenStatus { kAOSNotAsync = -1; , kAOSFailure = 0; , kAOSInProgress = 1; , kAOSSuccess = 2; };  Asynchronous open request status. More...;  ; enum  ECacheAction { kDisconnect = 0; , kDoNotDisconnect = 1; };  TTreeCache flushing semantics. More...;  ; enum  EFileType { ;   kDefault = 0; , kLocal = 1; , kNet = 2; , kWeb = 3; , ;   kFile = 4; , kMerge = 5. };  File type. More...;  ; enum  EOpenTimeOut { kInstantTimeout = 0; , kEternalTimeout = 999999999; };  Open timeout constants. More...;  ; enum  ERelativeTo { kBeg = 0; , kCur = 1; , kEnd = 2; };  ; enum  EStatusBits { ;   k630forwardCompatibility = (1ULL << ( 2 )); , kRecovered = (1ULL << ( 10 )); , kHasReferences = (1ULL << ( 11 )); , kDevNull = (1ULL << ( 12 )); , ;   kWriteError = (1ULL << ( 14 )); , kBinaryFile = (1ULL << ( 15 )); , kRedirected = (1ULL << ( 16 )); , kReproducible = (1ULL << ( 17 )). };  TFile status bits. BIT(13) is taken up by TObject. More...;  ;  Public Types inherited from TDirectoryFile; enum  EStatusBits { kCloseDirectory = (1ULL << ( 7 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemFile.html:63,Guid,Guide,63,doc/v632/classTMemFile.html,https://root.cern,https://root.cern/doc/v632/classTMemFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TMemberInspector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMemberInspector Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class for accessing the data-members of a class. ; Classes derived from this class can be given as argument to the ShowMembers() methods of ROOT classes. This feature facilitates the writing of class browsers and inspectors. ; Definition at line 31 of file TMemberInspector.h. Classes; class  TParentBuf;  . Public Types; enum  EObjectPointerState { kUnset; , kNoObjectGiven; , kValidObjectGiven; };  . Public Member Functions;  TMemberInspector ();  ; virtual ~TMemberInspector ();  ; void AddToParent (const char *name);  ; void GenericShowMembers (const char *topClassName, const void *obj, Bool_t transientMember);  ; EObjectPointerState GetObjectValidity () const;  ; const char * GetParent () const;  ; Ssiz_t GetParentLen () const;  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr);  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr, Bool_t);  ; void InspectMember (const char *topclassname, const void *pobj, const char *name, Bool_t transient);  ; template<class T > ; void InspectMember (const T &obj, const char *name, Bool_t isTransient);  ; void InspectMember (const TObject &obj, const char *name, Bool_t isTransient);  ; void InspectMember (TClass *cl, const void *pobj, const char *name, Bool_t isTransient);  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTreatingNonAccessibleTypes ();  ; void RemoveFromParent (Ssiz_t startingAt);  ; void SetObjectValidity (EObjectPointerState val);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemberInspector.html:72,Guid,Guide,72,doc/master/classTMemberInspector.html,https://root.cern,https://root.cern/doc/master/classTMemberInspector.html,1,['Guid'],['Guide']
Usability,". ROOT: TMemberInspector Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMemberInspector Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class for accessing the data-members of a class. ; Classes derived from this class can be given as argument to the ShowMembers() methods of ROOT classes. This feature facilitates the writing of class browsers and inspectors. ; Definition at line 31 of file TMemberInspector.h. Classes; class  TParentBuf;  . Public Types; enum  EObjectPointerState { kUnset; , kNoObjectGiven; , kValidObjectGiven; };  . Public Member Functions;  TMemberInspector ();  ; virtual ~TMemberInspector ();  ; void AddToParent (const char *name);  ; void GenericShowMembers (const char *topClassName, const void *obj, Bool_t transientMember);  ; EObjectPointerState GetObjectValidity () const;  ; const char * GetParent () const;  ; Ssiz_t GetParentLen () const;  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr);  ; virtual void Inspect (TClass *cl, const char *parent, const char *name, const void *addr, Bool_t);  ; void InspectMember (const char *topclassname, const void *pobj, const char *name, Bool_t transient);  ; template<class T > ; void InspectMember (const T &obj, const char *name, Bool_t isTransient);  ; void InspectMember (const TObject &obj, const char *name, Bool_t isTransient);  ; void InspectMember (TClass *cl, const void *pobj, const char *name, Bool_t isTransient);  ; virtual TClass * IsA () const;  ; virtual Bool_t IsTreatingNonAccessibleTypes ();  ; void RemoveFromParent (Ssiz_t startingAt);  ; void SetObjectValidity (EObjectPointerState val);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Pu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTMemberInspector.html:71,Guid,Guide,71,doc/v632/classTMemberInspector.html,https://root.cern,https://root.cern/doc/v632/classTMemberInspector.html,1,['Guid'],['Guide']
Usability,". ROOT: TMemberStreamer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMemberStreamer Class Reference. . Definition at line 26 of file TMemberStreamer.h. Public Member Functions;  TMemberStreamer (const TMemberStreamer &rhs);  ;  TMemberStreamer (MemberStreamerFunc_t pointer);  ; virtual ~TMemberStreamer ();  ; virtual const TClass * GetOnFileClass () const;  ; virtual void operator() (TBuffer &b, void *pmember, Int_t size=0);  ; TMemberStreamer & operator= (const TMemberStreamer &rhs);  ; virtual void SetOnFileClass (const TClass *cl);  . Protected Member Functions;  TMemberStreamer ();  . Private Attributes; TClassRef fOnFileClass;  ; MemberStreamerFunc_t fStreamer;  . #include <TMemberStreamer.h>. Inheritance diagram for TMemberStreamer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMemberStreamer() [1/3]. TMemberStreamer::TMemberStreamer ; (; ). inlineprotected . Definition at line 28 of file TMemberStreamer.h. ◆ TMemberStreamer() [2/3]. TMemberStreamer::TMemberStreamer ; (; MemberStreamerFunc_t ; pointer). inline . Definition at line 31 of file TMemberStreamer.h. ◆ TMemberStreamer() [3/3]. TMemberStreamer::TMemberStreamer ; (; const TMemberStreamer & ; rhs). inline . Definition at line 32 of file TMemberStreamer.h. ◆ ~TMemberStreamer(). virtual TMemberStreamer::~TMemberStreamer ; (; ). inlinevirtual . Definition at line 35 of file TMemberStreamer.h. Member Function Documentation. ◆ GetOnFileClass(). virtual const TClass * TMemberStreamer::GetOnFileClass ; (; ); const. inlinevirtual . Definition at line 38 of file TMemberStreamer.h. ◆ operator()(). virtual void TMemberStreamer::operator() ; (; TBuffer & ; b, . void * ; pmember, . Int_t ; size = 0 . ). inlinevirtual . Reimplemented in TConvertClones",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemberStreamer.html:71,Guid,Guide,71,doc/master/classTMemberStreamer.html,https://root.cern,https://root.cern/doc/master/classTMemberStreamer.html,1,['Guid'],['Guide']
Usability,". ROOT: TMergerInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMergerInfo Class Reference. . Definition at line 247 of file TProof.h. Public Member Functions;  TMergerInfo (TSlave *t, Int_t port, Int_t forHowManyWorkers);  ;  ~TMergerInfo () override;  Destructor. ;  ; void AddMergedObjects (Int_t objects);  ; void AddWorker (TSlave *sl);  Add new worker to the list of workers to be merged by this merger. ;  ; Bool_t AreAllWorkersAssigned ();  Return if the determined number of workers has been already assigned to this merger. ;  ; Bool_t AreAllWorkersMerged ();  Return if merger has already merged all workers, i.e. if it has finished its merging job. ;  ; void Deactivate ();  ; Int_t GetMergedObjects ();  ; Int_t GetMergedWorkers ();  ; TSlave * GetMerger ();  ; Int_t GetPort ();  ; TList * GetWorkers ();  ; Int_t GetWorkersToMerge ();  ; TClass * IsA () const override;  ; Bool_t IsActive ();  ; void SetMergedWorker ();  Increase number of already merged workers by 1. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMergerInfo.html:67,Guid,Guide,67,doc/master/classTMergerInfo.html,https://root.cern,https://root.cern/doc/master/classTMergerInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMessage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TMessage Class Reference. . Definition at line 33 of file TMessage.h. Public Member Functions;  TMessage (UInt_t what=kMESS_ANY, Int_t bufsiz=TBuffer::kInitialSize);  Create a TMessage object for storing objects. ;  ; virtual ~TMessage ();  Destructor. ;  ; char * CompBuffer () const;  ; Int_t CompLength () const;  ; Int_t Compress ();  Compress the message. ;  ; void EnableSchemaEvolution (Bool_t enable=kTRUE);  ; void ForceWriteInfo (TVirtualStreamerInfo *info, Bool_t force) override;  Force writing the TStreamerInfo to the message. ;  ; void Forward ();  Change a buffer that was received into one that can be send, i.e. ;  ; TClass * GetClass () const;  ; Int_t GetCompressionAlgorithm () const;  ; Int_t GetCompressionLevel () const;  ; Int_t GetCompressionSettings () const;  ; TList * GetStreamerInfos () const;  ; TClass * IsA () const override;  ; void Reset () override;  Reset the message buffer so we can use (i.e. fill) it again. ;  ; void Reset (UInt_t what);  ; void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  Set compression algorithm. ;  ; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  Set compression level. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Set compression settings. ;  ; void SetWhat (UInt_t what);  Using this method one can change the message type a-posteriori In case you OR ""what"" with kMESS_ACK, the message will wait for an acknowledgment from the remote side. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:64,Guid,Guide,64,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['Guid'],['Guide']
Usability,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessageHandler.html:71,Guid,Guide,71,doc/master/classTMessageHandler.html,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TMethod Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMethod Class Reference. ; Each ROOT class (see TClass) has a linked list of methods. ; This class describes one single method (member function). The method info is obtained via the CINT api. See class TCling.; The method information is used a.o. by the THml class and by the TTree class. ; Definition at line 38 of file TMethod.h. Public Member Functions;  TMethod (const TMethod &org);  Copy ctor. ;  ;  TMethod (MethodInfo_t *info=nullptr, TClass *cl=nullptr);  Default TMethod ctor. ;  ; virtual ~TMethod ();  Cleanup. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; virtual TDataMember * FindDataMember ();  Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ;  ; TClass * GetClass () const;  ; virtual const char * GetCommentString ();  Returns a comment string from the class declaration. ;  ; virtual TList * GetListOfMethodArgs ();  Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethod.html:63,Guid,Guide,63,doc/master/classTMethod.html,https://root.cern,https://root.cern/doc/master/classTMethod.html,1,['Guid'],['Guide']
Usability,". ROOT: TMethodArg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMethodArg Class Reference. ; Each ROOT method (see TMethod) has a linked list of its arguments. ; This class describes one single method argument. The method argument info is obtained via the CINT api. See class TCling.; The method argument information is used a.o. in the TContextMenu and THtml classes. ; Definition at line 36 of file TMethodArg.h. Public Member Functions;  TMethodArg (MethodArgInfo_t *info=nullptr, TFunction *method=nullptr);  Default TMethodArg ctor. ;  ; virtual ~TMethodArg ();  TMethodArg dtor deletes adopted CINT MethodArgInfo object. ;  ; TDataMember * GetDataMember () const;  Returns TDataMember pointed by this methodarg. ;  ; const char * GetDefault () const;  Get default value of method argument. ;  ; const char * GetFullTypeName () const;  Get full type description of method argument, e.g.: ""class TDirectory*"". ;  ; TFunction * GetMethod () const;  ; TList * GetOptions () const;  Returns list of possible options - according to pointed datamember. ;  ; TypeInfo_t * GetTypeInfo () const;  Get the TypeInfo of the method argument. ;  ; const char * GetTypeName () const;  Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory"" Result needs to be used or copied immediately. ;  ; std::string GetTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (MethodArgInfo_t *info);  Update fInfo (to 0 for unloading and non-zero for reloading). ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodArg.html:66,Guid,Guide,66,doc/master/classTMethodArg.html,https://root.cern,https://root.cern/doc/master/classTMethodArg.html,1,['Guid'],['Guide']
Usability,". ROOT: TMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMethodBrowsable Class ReferenceTree Library. ; This helper object allows the browsing of methods of objects stored in branches. ; They will be depicted by a leaf (or a branch, in case the method returns an object) with a red exclamation mark. Only a subset of all methods will be shown in the browser (see IsMethodBrowsable for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodBrowsable.html:72,Guid,Guide,72,doc/master/classTMethodBrowsable.html,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html,1,['Guid'],['Guide']
Usability,". ROOT: TMethodCall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethodCall.html:67,Guid,Guide,67,doc/master/classTMethodCall.html,https://root.cern,https://root.cern/doc/master/classTMethodCall.html,1,['Guid'],['Guide']
Usability,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:63,Guid,Guide,63,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TMinuit. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TMinuitMath. ; The Minuit Minimization package. ; See alsoMinuit2 for a newer version of this package; Direct C++ implementation of the Minuit minimization package.; This package was originally written in Fortran by Fred James and part of PACKLIB (patch D506).; It has been converted to a C++ class, TMinuit, by R.Brun.; See also:. The main documentation is in the class TMinuit; The Chapter about Fitting Histogram in the Users Guide; The MINUIT documentation in CERNLIB; How to Fit Histograms; peaks.C How to Fit find peaks in histograms . Classes; class  TLinearFitter;  ; class  TMinuit;  ; class  TMinuitMinimizer;  TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MinuitOld.html:47,Guid,Guide,47,doc/master/group__MinuitOld.html,https://root.cern,https://root.cern/doc/master/group__MinuitOld.html,3,['Guid'],['Guide']
Usability,". ROOT: TMinuit2TraceObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMinuit2TraceObject Class Reference. . Definition at line 30 of file TMinuit2TraceObject.h. Public Member Functions;  TMinuit2TraceObject (int parNumber=-1);  ;  ~TMinuit2TraceObject () override;  ; void Init (const ROOT::Minuit2::MnUserParameterState &state) override;  ; TClass * IsA () const override;  ; void operator() (int i, const ROOT::Minuit2::MinimumState &state) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Minuit2::MnTraceObject;  MnTraceObject (int parNumber=-1);  ; virtual ~MnTraceObject ();  ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit2TraceObject.html:75,Guid,Guide,75,doc/master/classTMinuit2TraceObject.html,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuitMinimizer.html:72,Guid,Guide,72,doc/master/classTMinuitMinimizer.html,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html,3,"['Guid', 'Simpl']","['Guide', 'Simplex']"
Usability,". ROOT: TMixture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMixture Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector mixture. ; See class TGeometry. ; Definition at line 27 of file TMixture.h. Public Member Functions;  TMixture ();  Mixture default constructor. ;  ;  TMixture (const char *name, const char *title, Int_t nmixt);  Mixture normal constructor. ;  ;  ~TMixture () override;  Mixture default destructor. ;  ; virtual void DefineElement (Int_t n, Float_t a, Float_t z, Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMixture.html:64,Guid,Guide,64,doc/master/classTMixture.html,https://root.cern,https://root.cern/doc/master/classTMixture.html,1,['Guid'],['Guide']
Usability,". ROOT: TModuleDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TModuleDocInfo Class Reference. . Definition at line 107 of file TDocInfo.h. Public Member Functions;  TModuleDocInfo (const char *name, TModuleDocInfo *super, const char *doc="""");  ;  ~TModuleDocInfo () override;  ; void AddClass (TClassDocInfo *cl);  ; TList * GetClasses ();  ; const char * GetDoc () const;  ; THashList & GetSub ();  ; TModuleDocInfo * GetSuper () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; void SetDoc (const char *doc);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTModuleDocInfo.html:70,Guid,Guide,70,doc/master/classTModuleDocInfo.html,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TMonitor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMonitor.html:64,Guid,Guide,64,doc/master/classTMonitor.html,https://root.cern,https://root.cern/doc/master/classTMonitor.html,1,['Guid'],['Guide']
Usability,". ROOT: TMrbSubevent_Caen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMrbSubevent_Caen Class Reference. . Definition at line 46 of file clonesA_Event.h. Public Member Functions;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMrbSubevent__Caen.html:73,Guid,Guide,73,doc/master/classTMrbSubevent__Caen.html,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of track",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:68,Guid,Guide,68,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['Guid'],['Guide']
Usability,". ROOT: TMultiGraph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMultiGraph Class ReferenceHistogram Library » Graph classes. ; A TMultiGraph is a collection of TGraph (or derived) objects. . Introduction; MultiGraphs' drawing; Setting drawing options; Titles setting; The option &quot;3D&quot;; Legend drawing; Automatic coloring; Reverse axis. MultiGraphs' fitting; Fit box position. Axis' limits setting. Introduction; A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular, when drawn, the X and Y axis ranges are automatically computed such as all the graphs will be visible.; TMultiGraph::Add should be used to add a new graph to the list.; The TMultiGraph owns the objects in the list.; The number of graphs in a multigraph can be retrieve with: mg->GetListOfGraphs()->GetEntries();. MultiGraphs' Drawing; The drawing options are the same as for TGraph. Like for TGraph, the painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Example: TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::TMultiGraphTMultiGraph()TMultiGraph default constructor.Definition TMultiGraph.cxx:369; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; Setting drawing options; The drawing option for e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:67,Guid,Guide,67,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['Guid'],['Guide']
Usability,". ROOT: TMultiLayerPerceptron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. imag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:77,Guid,Guide,77,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['Guid'],['Guide']
Usability,". ROOT: TMutexImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMutexImp Class Referenceabstract. . Definition at line 27 of file TMutexImp.h. Public Member Functions;  TMutexImp ();  ; virtual ~TMutexImp ();  ; TClass * IsA () const override;  ; virtual Int_t Lock ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMutexImp.html:65,Guid,Guide,65,doc/master/classTMutexImp.html,https://root.cern,https://root.cern/doc/master/classTMutexImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TNDArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNDArray Class Referenceabstract. ; N-Dim array class. ; Storage layout: Assume 3 dimensions, array sizes 2, 4 and 3 i.e. 24 bins: Data is stored as [0,0,0], [0,0,1], [0,0,2], [0,1,0],...; fSizes stores the combined size of each bin in a dimension, i.e. in above example it would contain 24, 12, 3, 1.; Storage is allocated lazily, only when data is written to the array. ; Definition at line 46 of file TNDArray.h. Public Member Functions;  TNDArray ();  ;  TNDArray (Int_t ndim, const Int_t *nbins, bool addOverflow=false);  ; virtual void AddAt (ULong64_t linidx, Double_t value)=0;  ; virtual Double_t AtAsDouble (ULong64_t linidx) const =0;  ; Long64_t GetBin (const Int_t *idx) const;  ; Long64_t GetCellSize (Int_t dim) const;  ; Long64_t GetNbins () const;  ; Int_t GetNdimensions () const;  ; virtual void Init (Int_t ndim, const Int_t *nbins, bool addOverflow=false);  ; TClass * IsA () const override;  ; virtual void Reset (Option_t *option="""")=0;  ; virtual void SetAsDouble (ULong64_t linidx, Double_t value)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record wheth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNDArray.html:64,Guid,Guide,64,doc/master/classTNDArray.html,https://root.cern,https://root.cern/doc/master/classTNDArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TNDArrayT< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNDArrayT< T > Class Template Reference. ; template<typename T>; class TNDArrayT< T >; Definition at line 114 of file TNDArray.h. Public Member Functions;  TNDArrayT ();  ;  TNDArrayT (Int_t ndim, const Int_t *nbins, bool addOverflow=false);  ; void AddAt (ULong64_t linidx, Double_t value) override;  ; T & At (const Int_t *idx);  ; T At (const Int_t *idx) const;  ; T & At (ULong64_t linidx);  ; T At (ULong64_t linidx) const;  ; Double_t AtAsDouble (ULong64_t linidx) const override;  ; void Init (Int_t ndim, const Int_t *nbins, bool addOverflow=false) override;  ; TClass * IsA () const override;  ; TNDArrayRef< T > operator[] (Int_t idx) const;  ; void Reset (Option_t *="""") override;  ; void SetAsDouble (ULong64_t linidx, Double_t value) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNDArray;  TNDArray ();  ;  TNDArray (Int_t ndim, const Int_t *nbins, bool addOverflow=false);  ; Long64_t GetBin (const Int_t *idx) const;  ; Long64_t GetCellSize (Int_t dim) const;  ; Long64_t GetNbins () const;  ; Int_t GetNdimensions () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNDArrayT.html:79,Guid,Guide,79,doc/master/classTNDArrayT.html,https://root.cern,https://root.cern/doc/master/classTNDArrayT.html,1,['Guid'],['Guide']
Usability,". ROOT: TNamed Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNamed Class ReferenceCore ROOT classes » Base ROOT classes. ; The TNamed class is the base class for all named ROOT classes. ; A TNamed contains the essential elements (name, title) to identify a derived object in containers, directories and files. Most member functions defined in this base class are in general overridden by the derived classes. ; Definition at line 29 of file TNamed.h. Public Member Functions;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNamed.html:62,Guid,Guide,62,doc/master/classTNamed.html,https://root.cern,https://root.cern/doc/master/classTNamed.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TNamed Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNamed Class ReferenceCore ROOT classes » Base ROOT classes. ; The TNamed class is the base class for all named ROOT classes. ; A TNamed contains the essential elements (name, title) to identify a derived object in containers, directories and files. Most member functions defined in this base class are in general overridden by the derived classes. ; Definition at line 29 of file TNamed.h. Public Member Functions;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTNamed.html:61,Guid,Guide,61,doc/v632/classTNamed.html,https://root.cern,https://root.cern/doc/v632/classTNamed.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TNetFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TNetFile Class ReferenceInput/Output Library. ; A TNetFile is like a normal TFile except that it reads and writes its data via a rootd server (for more on the rootd daemon see the source files in root/rootd/src/). ; TNetFile file names are in standard URL format with protocol ""root"" or ""roots"". The following are valid TNetFile URL's:; root://hpbrun.cern.ch/root/hsimple.root; root://pcna49a:5151/~na49/data/run821.root; root://pcna49d.cern.ch:5050//v1/data/run810.root. The only difference with the well known httpd URL's is that the root of the remote file tree is the user's home directory. Therefore an absolute pathname requires a // after the host or port specifier (see last example). Further the expansion of the standard shell characters, like ~, $, .., are handled as expected. TNetFile (actually TUrl) uses 1094 as default port for rootd.; Connecting to a rootd requires the remote user id and password. TNetFile allows three ways for you to provide your login: Setting it globally via the static functions:; TAuthenticate::SetGlobalUser() and TAuthenticate::SetGlobalPasswd(); Getting it from the ~/.netrc file (same file as used by ftp); Command line prompt The different methods will be tried in the order given above. On machines with AFS rootd will authenticate using AFS (if it was compiled with AFS support). If the protocol is specified as ""rootk"" kerberos5 will be used for authentication.; The rootd daemon lives in the directory $ROOTSYS/bin. It can be started either via inetd or by hand from the command line (no need to be super user). ; Definition at line 34 of file TNetFile.h. Public Member Functions;  TNetFile ();  ;  TNetFile (const char *url, Option_t *option="""", const char *ftitle="""", Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFile.html:64,Guid,Guide,64,doc/master/classTNetFile.html,https://root.cern,https://root.cern/doc/master/classTNetFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TNetFileStager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TNetFileStager Class Reference. . Definition at line 28 of file TNetFileStager.h. Public Member Functions;  TNetFileStager (const char *stager="""");  Constructor. Init a TNetSystem instance to the remote rootd. ;  ; virtual ~TNetFileStager ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t IsStaged (const char *path) override;  Check if the file defined by 'path' is ready to be used. ;  ; Bool_t IsValid () const override;  ; Int_t Locate (const char *path, TString &endpath) override;  Get actual end-point url for a path Returns 0 in case of success and 1 if any error occured. ;  ; Bool_t Matches (const char *s) override;  Returns kTRUE if stager 's' is compatible with current stager. ;  ; void Print (Option_t *option="""") const override;  Print basic info about this stager. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFileStager;  TFileStager (const char *stager);  ; virtual ~TFileStager ();  ; virtual TList * GetStaged (TCollection *pathlist);  Retrieves the staging (online) status for a list of path names. ;  ; virtual Int_t LocateCollection (TFileCollection *fc, Bool_t addDummyUrl=kFALSE);  Massive location of files. ;  ; virtual Bool_t Stage (const char *, Option_t *=nullptr);  ; virtual Bool_t Stage (TCollection *pathlist, Option_t *opt=nullptr);  Issue a stage request for a list of files. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetFileStager.html:70,Guid,Guide,70,doc/master/classTNetFileStager.html,https://root.cern,https://root.cern/doc/master/classTNetFileStager.html,1,['Guid'],['Guide']
Usability,". ROOT: TNetSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TNetSystem Class Reference. . Definition at line 85 of file TNetFile.h. Public Member Functions;  TNetSystem (Bool_t ftpowner=kTRUE);  Create helper class that allows directory access via rootd. ;  ;  TNetSystem (const char *url, Bool_t ftpowner=kTRUE);  Create helper class that allows directory access via rootd. ;  ; virtual ~TNetSystem ();  Destructor. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; Bool_t ConsistentWith (const char *path, void *dirptr) override;  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; void FreeDirectory (void *dirp=nullptr) override;  Free directory via rootd. ;  ; const char * GetDirEntry (void *dirp=nullptr) override;  Get directory entry via rootd. Returns 0 in case no more entries. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Make a directory via rootd. ;  ; void * OpenDirectory (const char *name) override;  Open a directory and return an opaque pointer to a dir structure. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Unlink (const char *path) override;  Remove a path. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetSystem.html:66,Guid,Guide,66,doc/master/classTNetSystem.html,https://root.cern,https://root.cern/doc/master/classTNetSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TNetXNGFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TNetXNGFile Class Reference. . Definition at line 33 of file TNetXNGFile.h. Public Member Functions;  TNetXNGFile ();  ;  TNetXNGFile (const char *url, const char *lurl, Option_t *mode, const char *title, Int_t compress, Int_t netopt, Bool_t parallelopen);  ;  TNetXNGFile (const char *url, Option_t *mode="""", const char *title="""", Int_t compress=1, Int_t netopt=0, Bool_t parallelopen=kFALSE);  Constructor. ;  ; virtual ~TNetXNGFile ();  Destructor. ;  ; void Close (const Option_t *option="""") override;  Close the file. ;  ; void Flush () override;  Synchronize a file's in-memory and on-disk states. ;  ; TString GetNewUrl () override;  ; Long64_t GetSize () const override;  Get the file size. ;  ; void Init (Bool_t create) override;  Initialize the file. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const override;  Check if the file is open. ;  ; Bool_t ReadBuffer (char *buffer, Int_t length) override;  Read a data chunk of the given size. ;  ; Bool_t ReadBuffer (char *buffer, Long64_t position, Int_t length) override;  Read a data chunk of the given size, starting from the given offset. ;  ; Bool_t ReadBuffers (char *buffer, Long64_t *position, Int_t *length, Int_t nbuffs) override;  Read scattered data chunks in one operation. ;  ; Int_t ReOpen (Option_t *modestr) override;  Reopen the file with the new access mode. ;  ; void Seek (Long64_t offset, ERelativeTo position=kBeg) override;  Set the position within the file. ;  ; virtual void SetAsyncOpenStatus (EAsyncOpenStatus status);  Set the status of an asynchronous file open. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t WriteBuffer (const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGFile.html:67,Guid,Guide,67,doc/master/classTNetXNGFile.html,https://root.cern,https://root.cern/doc/master/classTNetXNGFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TNetXNGSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TNetXNGSystem Class Reference. . Definition at line 36 of file TNetXNGSystem.h. Public Member Functions;  TNetXNGSystem (Bool_t owner=kTRUE);  Constructor: Create system class without connecting to server. ;  ;  TNetXNGSystem (const char *url, Bool_t owner=kTRUE);  Constructor: Create system class and connect to server. ;  ; virtual ~TNetXNGSystem ();  Destructor. ;  ; Bool_t ConsistentWith (const char *path, void *dirptr) override;  Check consistency of this helper with the one required by 'path' or 'dirptr'. ;  ; void FreeDirectory (void *dirp) override;  Free a directory. ;  ; const char * GetDirEntry (void *dirp) override;  Get a directory entry. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file (stat) ;  ; TClass * IsA () const override;  ; Bool_t IsPathLocal (const char *path) override;  Is this path a local path? ;  ; virtual Int_t Locate (const char *path, TString &endurl);  Get the endpoint URL of a file. ;  ; Int_t MakeDirectory (const char *dir) override;  Create a directory. ;  ; void * OpenDirectory (const char *dir) override;  Open a directory. ;  ; virtual Int_t Stage (const char *path, UChar_t priority);  Issue a stage request for a single file. ;  ; virtual Int_t Stage (TCollection *files, UChar_t priority);  Issue stage requests for multiple files. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Unlink (const char *path) override;  Unlink a file on the remote server. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:69,Guid,Guide,69,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TNeuron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TNeuron Class Reference. ; This class describes an elementary neuron, which is the basic element for a Neural Network. ; A network is built connecting neurons by synapses. There are different types of neurons: linear (a+bx), sigmoid (1/(1+exp(-x)), tanh or gaussian. An external function can also be used, together with its derivative. In a Multi Layer Perceptron, the input layer is made of inactive neurons (returning the normalized input) and output neurons are linear. Hidden neurons may be anything, the default being sigmoids.; This implementation contains several methods to compute the value, the derivative, the DeDw, ... Values are stored in local buffers. The SetNewEvent() method is there to inform buffered values are outdated. ; Definition at line 25 of file TNeuron.h. Public Types; enum  ENeuronType { ;   kOff; , kLinear; , kSigmoid; , kTanh; , ;   kGauss; , kSoftmax; , kExternal. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TNeuron (ENeuronType type=kSigmoid, const char *name="""", const char *title="""", const char *extF="""", const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:63,Guid,Guide,63,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['Guid'],['Guide']
Usability,". ROOT: TNewChainDlg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TNewChainDlg Class Reference. . Definition at line 35 of file TSessionDialogs.h. Public Member Functions;  TNewChainDlg (const TGWindow *p=nullptr, const TGWindow *main=nullptr);  Create a new chain dialog box. ;  ;  ~TNewChainDlg () override;  Delete chain dialog. ;  ; void CloseWindow () override;  Close file dialog. ;  ; virtual void DisplayDirectory (const TString &fname);  Display content of directory. ;  ; TClass * IsA () const override;  ; virtual void OnDoubleClick (TGLVEntry *, Int_t);  Handle double click in the File container. ;  ; void OnElementClicked (TGLVEntry *entry, Int_t btn);  Handle click in the Memory list view and put the type and name of selected object in the text entry. ;  ; void OnElementSelected (TObject *obj);  Emits OnElementSelected signal if dset is not zero. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for new chain dialog. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateList ();  Update Memory list view. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNewChainDlg.html:68,Guid,Guide,68,doc/master/classTNewChainDlg.html,https://root.cern,https://root.cern/doc/master/classTNewChainDlg.html,1,['Guid'],['Guide']
Usability,". ROOT: TNewQueryDlg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TNewQueryDlg Class Reference. . Definition at line 68 of file TSessionDialogs.h. Public Member Functions;  TNewQueryDlg (TSessionViewer *gui, Int_t Width, Int_t Height, TQueryDescription *query=nullptr, Bool_t editmode=kFALSE);  Create a new Query dialog, used by the Session Viewer, to Edit a Query if the editmode flag is set, or to create a new one if not set. ;  ;  ~TNewQueryDlg () override;  Delete query dialog. ;  ; void Build (TSessionViewer *gui);  Build the ""new query"" dialog. ;  ; void CloseWindow () override;  Called when window is closed via the window manager. ;  ; TClass * IsA () const override;  ; void OnBrowseChain ();  Call new chain dialog. ;  ; void OnBrowseEventList ();  Browse event list. ;  ; void OnBrowseSelector ();  Open file browser to choose selector macro. ;  ; void OnBtnCloseClicked ();  Close dialog. ;  ; void OnBtnSaveClicked ();  Save current settings in main session viewer. ;  ; void OnBtnSubmitClicked ();  Save and submit query description. ;  ; void OnElementSelected (TObject *obj);  Handle OnElementSelected signal coming from new chain dialog. ;  ; void OnNewQueryMore ();  Show/hide options frame and update button text accordingly. ;  ; void Popup ();  Display dialog and set focus to query name text entry. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for new query dialog. ;  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateFields (TQueryDescription *desc);  Update entry fields with query description values. ;  ;  Public Member Functions inherited from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNewQueryDlg.html:68,Guid,Guide,68,doc/master/classTNewQueryDlg.html,https://root.cern,https://root.cern/doc/master/classTNewQueryDlg.html,1,['Guid'],['Guide']
Usability,". ROOT: TNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TNode Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; TNode description. ; A TNode object is used to build the geometry hierarchy (see TGeometry). A node may contain other nodes.; A geometry node has attributes:. name and title; pointer to the referenced shape (see TShape).; x,y,z offset with respect to the mother node.; pointer to the rotation matrix (see TRotMatrix). A node can be drawn. ; Definition at line 33 of file TNode.h. Public Member Functions;  TNode ();  Node default constructor. ;  ;  TNode (const char *name, const char *title, const char *shapename, Double_t x=0, Double_t y=0, Double_t z=0, const char *matrixname="""", Option_t *option="""");  Node normal constructor. ;  ;  TNode (const char *name, const char *title, TShape *shape, Double_t x=0, Double_t y=0, Double_t z=0, TRotMatrix *matrix=nullptr, Option_t *option="""");  Node normal constructor. ;  ;  ~TNode () override;  Node default destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; virtual void BuildListOfNodes ();  Create the list to support sons of this node. ;  ; virtual void cd (const char *path=nullptr);  Change Current Reference node to this. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a Node. ;  ; void Draw (Option_t *option="""") override;  Draw Referenced node with current parameters. ;  ; virtual void DrawOnly (Option_t *option="""");  Draw only Sons of this node. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; TList * GetListOfNodes () const;  ; virtual TRotMatrix * GetMatrix () const;  ; virtual TNode * GetNode (const char *name) const;  Return pointer to nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNode.html:61,Guid,Guide,61,doc/master/classTNode.html,https://root.cern,https://root.cern/doc/master/classTNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TNodeDiv Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNodeDiv Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Description of parameters to divide a 3-D geometry object. ; Definition at line 28 of file TNodeDiv.h. Public Member Functions;  TNodeDiv ();  NodeDiv default constructor. ;  ;  TNodeDiv (const char *name, const char *title, const char *shapename, Int_t ndiv, Int_t axis, Option_t *option="""");  NodeDiv normal constructor. ;  ;  TNodeDiv (const char *name, const char *title, TShape *shape, Int_t ndiv, Int_t axis, Option_t *option="""");  NodeDiv normal constructor. ;  ;  ~TNodeDiv () override;  NodeDiv default destructor. ;  ; void Draw (Option_t *option="""") override;  Draw Referenced node with current parameters. ;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint Referenced node with current parameters. ;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNode;  TNode ();  Node default constructor. ;  ;  TNode (const char *name, const char *title, const char *shapename, Double_t x=0, Double_t y=0, Double_t z=0, const char *matrixname="""", Option_t *option="""");  Node normal constructor. ;  ;  TNode (const char *name, const char *title, TShape *shape, Double_t x=0, Double_t y=0, Double_t z=0, TRotMatrix *matrix=nullptr, Option_t *option="""");  Node normal constructor. ;  ;  ~TNode () override;  Node default destructor. ;  ; void Browse (TBrowser *b) override;  Browse. ;  ; virtual void BuildListOfNodes ();  Create the list to support sons of this node. ;  ; virtual void cd (const char *path=nullptr);  Change Current Reference node to this. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNodeDiv.html:64,Guid,Guide,64,doc/master/classTNodeDiv.html,https://root.cern,https://root.cern/doc/master/classTNodeDiv.html,1,['Guid'],['Guide']
Usability,". ROOT: TNonSplitBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TNonSplitBrowsable Class ReferenceTree Library. ; Allows a TBrowser to browse non-split branches as if they were split. ; The generator extracts the necessary information from the streamer info in memory (which does not have to be the same as the one on file, in case a library was loaded containing the dictionary for this type), i.e. it also works without loading the class's library.; Just as with TMethodBrowsables, if the generator finds a collection it only takes the contained objects into account, not the collections. If it identifies a collection, but cannot extract the contained type, or the contained type can be anything deriving from a TObject (like for TObjArray) or is not limited at all, no browser helper objects are created. ; Definition at line 132 of file TBranchBrowsable.h. Public Member Functions;  ~TNonSplitBrowsable () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsable object ;  ; const char * GetIconName () const override;  return icon shown when browsing a TVirtualBranchBrowsable ;  ; TList * GetLeaves () const;  Return list of leaves. If not set up yet we'll create them. ;  ; const TVirtualBranchBrowsable * GetPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNonSplitBrowsable.html:74,Guid,Guide,74,doc/master/classTNonSplitBrowsable.html,https://root.cern,https://root.cern/doc/master/classTNonSplitBrowsable.html,1,['Guid'],['Guide']
Usability,". ROOT: TNotifyLink< Type > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TNotifyLink< Type > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<class Type>; class TNotifyLink< Type >A node in a doubly linked list of subscribers to TChain notifications. ; TObject has a virtual TObject::Notify() method that takes no parameters and returns a boolean. By default the method does nothing, and different objects in ROOT use this method for different purposes.; TChain uses Notify to implement a callback mechanism that notifies interested parties (subscribers) when the chain switches to a new sub-tree. In practice it calls the Notify() method of its fNotify data member from TChain::LoadTree(). However there could be several different objects interested in knowing that a given TChain switched to a new tree. TNotifyLink can be used to build a linked list of subscribers: calling TNotifyLink::Notify() on the head node of the list propagates the call to all subscribers in the list.; Example usage: TNotifyLink l(subscriber); // subscriber must implement `Notify()`; l.PrependLink(chain); // prepends `l` to the list of notify links of the chain; TNotifyLinkA node in a doubly linked list of subscribers to TChain notifications.Definition TNotifyLink.h:127; lTLine lDefinition textangle.C:4; NoteTChain does not explicitly enforce that its fNotify data member be the head node of a list of TNotifyLinks, but that is the case in practice at least when using TTreeReader or RDataFrame to process the chain. TChain does not take ownership of the TNotifyLink and the TNotifyLink does not take ownership of the subscriber object. ; Definition at line 127 of file TNotifyLink.h. Public Member Functions;  TNotifyLink (Type *subscriber);  ; TClass * IsA () const override;  ; Bool_t Notify () ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLink.html:84,Guid,Guide,84,doc/master/classTNotifyLink.html,https://root.cern,https://root.cern/doc/master/classTNotifyLink.html,1,['Guid'],['Guide']
Usability,". ROOT: TNotifyLinkBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TNotifyLinkBase Class Reference. ; See TNotifyLink. ; Definition at line 47 of file TNotifyLink.h. Public Types; enum  EStatusBits { kLinked = (1ULL << ( 11 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; void Clear (Option_t *="""") override;  ; TObject * GetNext () const;  ; TClass * IsA () const override;  ; Bool_t IsLinked ();  ; template<class Chain > ; void PrependLink (Chain &chain);  Set this link as the head of the chain's list of notify subscribers. ;  ; template<class Chain > ; void RemoveLink (Chain &chain);  Remove this link from a chain's list of notify subscribers. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLinkBase.html:71,Guid,Guide,71,doc/master/classTNotifyLinkBase.html,https://root.cern,https://root.cern/doc/master/classTNotifyLinkBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TNtuple Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TNtuple Class ReferenceTree Library. ; A simple TTree restricted to a list of float variables only. ; Each variable goes to a separate branch.; A Ntuple is created via TNtuple(name,title,varlist,bufsize); namechar name[80]Definition TGX11.cxx:110; TNtuple::TNtupleTNtuple()Default constructor for Ntuple.Definition TNtuple.cxx:46; It is filled via: TNtuple::Fill(*x) or; TNtuple::Fill(v1,v2,v3.....); TNtuple::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtuple.cxx:169; xDouble_t x[n]Definition legend1.C:17; v2@ v2Definition rootcling_impl.cxx:3702; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701. Definition at line 28 of file TNtuple.h. Public Member Functions;  TNtuple ();  Default constructor for Ntuple. ;  ;  TNtuple (const char *name, const char *title, const char *varlist, Int_t bufsize=32000);  Create an Ntuple. ;  ;  ~TNtuple () override;  Default destructor for an Ntuple. ;  ; void Browse (TBrowser *b) override;  Browse content of the ntuple. ;  ; TTree * CloneTree (Long64_t nentries=-1, Option_t *option="""") override;  Create a clone of this tree and copy nentries. ;  ; virtual Int_t Fill (const Float_t *x);  Fill a Ntuple with an array of floats. ;  ; Int_t Fill (Double_t x0);  ; virtual Int_t Fill (Float_t x0, Float_t x1=0, Float_t x2=0, Float_t x3=0, Float_t x4=0, Float_t x5=0, Float_t x6=0, Float_t x7=0, Float_t x8=0, Float_t x9=0, Float_t x10=0, Float_t x11=0, Float_t x12=0, Float_t x13=0, Float_t x14=0);  Fill a Ntuple: Each Ntuple item is an argument. ;  ; Int_t Fill (Int_t x0);  ; Float_t * GetArgs () const;  ; virtual Int_t GetNvar () const;  ; TClass * IsA () const override;  ; Long64_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtuple.html:63,Guid,Guide,63,doc/master/classTNtuple.html,https://root.cern,https://root.cern/doc/master/classTNtuple.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TNtupleD Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TNtupleD Class ReferenceTree Library. ; A simple TTree restricted to a list of double variables only. ; Each variable goes to a separate branch.; A Ntuple is created via TNtupleD(name,title,varlist,bufsize); namechar name[80]Definition TGX11.cxx:110; TNtupleD::TNtupleDTNtupleD()Default constructor for Ntuple.Definition TNtupleD.cxx:45; It is filled via: TNtupleD::Fill(*x) or; TNtupleD::Fill(v1,v2,v3.....); TNtupleD::FillInt_t Fill() overrideFill a Ntuple with current values in fArgs.Definition TNtupleD.cxx:150; xDouble_t x[n]Definition legend1.C:17; v2@ v2Definition rootcling_impl.cxx:3702; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701. Definition at line 28 of file TNtupleD.h. Public Member Functions;  TNtupleD ();  Default constructor for Ntuple. ;  ;  TNtupleD (const char *name, const char *title, const char *varlist, Int_t bufsize=32000);  Create an Ntuple. ;  ;  ~TNtupleD () override;  Default destructor for an Ntuple. ;  ; void Browse (TBrowser *b) override;  Browse content. ;  ; virtual Int_t Fill (const Double_t *x);  Fill a Ntuple with an array of floats. ;  ; virtual Int_t Fill (Double_t x0, Double_t x1, Double_t x2=0, Double_t x3=0, Double_t x4=0, Double_t x5=0, Double_t x6=0, Double_t x7=0, Double_t x8=0, Double_t x9=0, Double_t x10=0, Double_t x11=0, Double_t x12=0, Double_t x13=0, Double_t x14=0);  Fill a Ntuple: Each Ntuple item is an argument. ;  ; Double_t * GetArgs () const;  ; virtual Int_t GetNvar () const;  ; TClass * IsA () const override;  ; Long64_t ReadStream (std::istream &inputstream, const char *branchDescriptor="""", char delimiter=' ') override;  Read from filename as many columns as variables in the ntupl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtupleD.html:64,Guid,Guide,64,doc/master/classTNtupleD.html,https://root.cern,https://root.cern/doc/master/classTNtupleD.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TODBCResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TODBCResult Class Reference. . Definition at line 30 of file TODBCResult.h. Public Member Functions;  TODBCResult (SQLHSTMT stmt);  Constructor. ;  ; virtual ~TODBCResult ();  Cleanup ODBC query result. ;  ; void Close (Option_t *opt="""") final;  Close (cleanup) ODBC result object. Deletes statement. ;  ; Int_t GetFieldCount () final;  ; const char * GetFieldName (Int_t field) final;  Get name of specified field. ;  ; TClass * IsA () const override;  ; TSQLRow * Next () final;  Get next query result row. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSQLResult; virtual ~TSQLResult ();  ; virtual Int_t GetRowCount () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTODBCResult.html:67,Guid,Guide,67,doc/master/classTODBCResult.html,https://root.cern,https://root.cern/doc/master/classTODBCResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TODBCRow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TODBCRow Class Reference. . Definition at line 28 of file TODBCRow.h. Public Member Functions;  TODBCRow (SQLHSTMT stmt, Int_t fieldcount);  Single row of query result. ;  ; virtual ~TODBCRow ();  Destroy row object. ;  ; void Close (Option_t *opt="""") final;  Close row. ;  ; const char * GetField (Int_t field) final;  Get specified field from row (0 <= field < GetFieldCount()). ;  ; ULong_t GetFieldLength (Int_t field) final;  Get length in bytes of specified field. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSQLRow; virtual ~TSQLRow ();  ; TClass * IsA () const override;  ; const char * operator[] (Int_t field);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTODBCRow.html:64,Guid,Guide,64,doc/master/classTODBCRow.html,https://root.cern,https://root.cern/doc/master/classTODBCRow.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TObjArray Class ReferenceCore ROOT classes » Containers. ; An array of TObjects. ; The array expands automatically when objects are added (shrinking can be done by hand using Expand(), how nice to have meaningful names -:)). Use operator[] to have ""real"" array behaviour.; Note on ownership and copy: By default the TObjArray does not own the objects it points to and will not delete them unless explicitly asked (via a call to the Delete member function). To assign ownership of the content to the array, call: myarr->SetOwner(kTRUE);; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; When the array owns its content a call to Clear or the deletion of the array itself will lead to the deletion of its contents.; You can either make a shallow copy of the array: otherarr = new TObjArray(*myarr);; *otherarr = *myarr;; TObjArrayAn array of TObjects.Definition TObjArray.h:31; in which case ownership (if any) is not transfered but the other array points to the same object as the original array. Note that if the content of either array is deleted the other array is not notified in any way (i.e. still points to the now deleted objects).; You can also make a deep copy of the array: otherarr = (TObjArray*)myarr->Clone();; in which case the array and the content are both duplicated (i.e. otherarr and myarr do not point to the same objects). If myarr is set to the be the owner of its content, otherarr will also be set to the owner of its own content. ; Definition at line 31 of file TObjArray.h. Public Types; typedef TObjArrayIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArray.html:65,Guid,Guide,65,doc/master/classTObjArray.html,https://root.cern,https://root.cern/doc/master/classTObjArray.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TObjArrayIter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TObjArrayIter Class Reference. ; Iterator of object array. ; Definition at line 117 of file TObjArray.h. Public Types; using const_pointer = const TObject **;  ; using difference_type = std::ptrdiff_t;  ; using iterator_category = std::bidirectional_iterator_tag;  ; using pointer = TObject **;  ; using reference = const TObject *&;  ; using value_type = TObject *;  . Public Member Functions;  TObjArrayIter (const TObjArray *arr, Bool_t dir=kIterForward);  Create array iterator. ;  ;  TObjArrayIter (const TObjArrayIter &iter);  Copy ctor. ;  ;  ~TObjArrayIter ();  ; const TCollection * GetCollection () const override;  ; TClass * IsA () const override;  ; TObject * Next () override;  Return next object in array. Returns 0 when no more objects in array. ;  ; Bool_t operator!= (const TIterator &aIter) const override;  This operator compares two TIterator objects. ;  ; Bool_t operator!= (const TObjArrayIter &aIter) const;  This operator compares two TObjArrayIter objects. ;  ; TObject * operator* () const override;  Return current object or nullptr. ;  ; TIterator & operator= (const TIterator &rhs) override;  Overridden assignment operator. ;  ; TObjArrayIter & operator= (const TObjArrayIter &rhs);  Overloaded assignment operator. ;  ; void Reset () override;  Reset array iterator. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TIterator; virtual ~TIterator ();  ; virtual Option_t * GetOption () const;  ; TObject * operator() ();  ; Bool_t operator== (const TIterator &other) const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjArrayIter.html:69,Guid,Guide,69,doc/master/classTObjArrayIter.html,https://root.cern,https://root.cern/doc/master/classTObjArrayIter.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjLink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TObjLink Class Reference. ; Wrapper around a TObject so it can be stored in a TList. ; Definition at line 123 of file TList.h. Public Member Functions;  TObjLink (TObject *obj);  ; virtual ~TObjLink ();  ; virtual Option_t * GetAddOption () const;  ; TObject * GetObject () const;  ; TObject ** GetObjectRef ();  ; virtual Option_t * GetOption () const;  ; TObjLink * Next ();  ; TObjLinkPtr_t NextSP ();  ; TObjLink * Prev ();  ; TObjLinkPtr_t PrevSP ();  ; void SetObject (TObject *obj);  ; virtual void SetOption (Option_t *);  . Private Types; using TObjLinkPtr_t = std::shared_ptr< TObjLink >;  ; using TObjLinkWeakPtr_t = std::weak_ptr< TObjLink >;  . Private Member Functions;  TObjLink ()=delete;  ;  TObjLink (const TObjLink &)=delete;  ; TObjLink & operator= (const TObjLink &)=delete;  . Private Attributes; TObjLinkPtr_t fNext;  ; TObject * fObject;  ; TObjLinkWeakPtr_t fPrev;  . Friends; class TList;  . #include <TList.h>. Inheritance diagram for TObjLink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ TObjLinkPtr_t. using TObjLink::TObjLinkPtr_t = std::shared_ptr<TObjLink>. private . Definition at line 128 of file TList.h. ◆ TObjLinkWeakPtr_t. using TObjLink::TObjLinkWeakPtr_t = std::weak_ptr<TObjLink>. private . Definition at line 129 of file TList.h. Constructor & Destructor Documentation. ◆ TObjLink() [1/3]. TObjLink::TObjLink ; (; const TObjLink & ; ). privatedelete . ◆ TObjLink() [2/3]. TObjLink::TObjLink ; (; ). privatedelete . ◆ TObjLink() [3/3]. TObjLink::TObjLink ; (; TObject * ; obj). inline . Definition at line 142 of file TList.h. ◆ ~TObjLink(). virtual TObjLink::~TObjLink ; (; ). inlinevirtual . Definition at li",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjLink.html:64,Guid,Guide,64,doc/master/classTObjLink.html,https://root.cern,https://root.cern/doc/master/classTObjLink.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjOptLink Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TObjOptLink Class Reference. . Definition at line 166 of file TList.h. Public Member Functions;  TObjOptLink (TObject *obj, Option_t *opt);  ;  ~TObjOptLink ();  ; Option_t * GetAddOption () const override;  ; Option_t * GetOption () const override;  ; void SetOption (Option_t *option) override;  ;  Public Member Functions inherited from TObjLink;  TObjLink (TObject *obj);  ; virtual ~TObjLink ();  ; TObject * GetObject () const;  ; TObject ** GetObjectRef ();  ; TObjLink * Next ();  ; TObjLinkPtr_t NextSP ();  ; TObjLink * Prev ();  ; TObjLinkPtr_t PrevSP ();  ; void SetObject (TObject *obj);  . Private Attributes; TString fOption;  . #include <TList.h>. Inheritance diagram for TObjOptLink:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TObjOptLink(). TObjOptLink::TObjOptLink ; (; TObject * ; obj, . Option_t * ; opt . ). inline . Definition at line 172 of file TList.h. ◆ ~TObjOptLink(). TObjOptLink::~TObjOptLink ; (; ). inline . Definition at line 173 of file TList.h. Member Function Documentation. ◆ GetAddOption(). Option_t * TObjOptLink::GetAddOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 174 of file TList.h. ◆ GetOption(). Option_t * TObjOptLink::GetOption ; (; ); const. inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 175 of file TList.h. ◆ SetOption(). void TObjOptLink::SetOption ; (; Option_t * ; option). inlineoverridevirtual . Reimplemented from TObjLink.; Definition at line 176 of file TList.h. Member Data Documentation. ◆ fOption. TString TObjOptLink::fOption. private . Definition at line 169 of file TList.h. Libraries for TObjOptLink:. [legend]; The documentation for this class was gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjOptLink.html:67,Guid,Guide,67,doc/master/classTObjOptLink.html,https://root.cern,https://root.cern/doc/master/classTObjOptLink.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TObjString Class ReferenceCore ROOT classes » Base ROOT classes. ; Collectable string class. ; This is a TObject containing a TString. ; Definition at line 28 of file TObjString.h. Public Member Functions;  TObjString (const char *s="""");  ;  ~TObjString ();  TObjString destructor. ;  ; Int_t Compare (const TObject *obj) const override;  String compare the argument with this object. ;  ; TString CopyString () const;  ; void FillBuffer (char *&buffer);  ; const char * GetName () const override;  Returns name of object. ;  ; const TString & GetString () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Return kTRUE if the argument has the same content as this object. ;  ; Bool_t IsSortable () const override;  ; void Print (Option_t *) const override;  This method must be overridden when a class wants to print itself. ;  ; void ReadBuffer (char *&buffer);  ; void SetString (const char *s);  ; Int_t Sizeof () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TString & String ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjString.html:66,Guid,Guide,66,doc/master/classTObjString.html,https://root.cern,https://root.cern/doc/master/classTObjString.html,1,['Guid'],['Guide']
Usability,". ROOT: TObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TObject Class ReferenceCore ROOT classes » Base ROOT classes. ; Mother of all ROOT objects. ; The TObject class provides default behaviour and protocol for all objects in the ROOT system. It provides protocol for object I/O, error handling, sorting, inspection, printing, drawing, etc. Every object which inherits from TObject can be stored in the ROOT collection classes.; TObject's bits can be used as flags, bits 0 - 13 and 24-31 are reserved as global bits while bits 14 - 23 can be used in different class hierarchies (watch out for overlaps). ; Definition at line 41 of file TObject.h. Public Types; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:63,Guid,Guide,63,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TObject Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TObject Class ReferenceCore ROOT classes » Base ROOT classes. ; Mother of all ROOT objects. ; The TObject class provides default behaviour and protocol for all objects in the ROOT system. It provides protocol for object I/O, error handling, sorting, inspection, printing, drawing, etc. Every object which inherits from TObject can be stored in the ROOT collection classes.; TObject's bits can be used as flags, bits 0 - 13 and 24-31 are reserved as global bits while bits 14 - 23 can be used in different class hierarchies (watch out for overlaps). ; Definition at line 41 of file TObject.h. Public Types; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:62,Guid,Guide,62,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjectRefSpy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TObjectRefSpy Class Reference. . Definition at line 52 of file TObjectSpy.h. Public Member Functions;  TObjectRefSpy (TObject *&obj, Bool_t fixMustCleanupBit=kTRUE);  Register the object that must be spied. ;  ; virtual ~TObjectRefSpy ();  Cleanup. ;  ; TObject * GetObject () const;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Sets the object pointer to zero if the object is deleted in the RecursiveRemove() operation. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectRefSpy.html:69,Guid,Guide,69,doc/master/classTObjectRefSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectRefSpy.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjectSpy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TObjectSpy Class ReferenceCore ROOT classes » Base ROOT classes. ; Monitors objects for deletion and reflects the deletion by reverting the internal pointer to zero. ; When this pointer is zero we know the object has been deleted. This avoids the unsafe TestBit(kNotDeleted) hack. The spied object must have the kMustCleanup bit set otherwise you will get an error. ; Definition at line 30 of file TObjectSpy.h. Public Member Functions;  TObjectSpy (TObject *obj=nullptr, Bool_t fixMustCleanupBit=kTRUE);  Register the object that must be spied. ;  ; virtual ~TObjectSpy ();  Cleanup. ;  ; TObject * GetObject () const;  ; TClass * IsA () const override;  ; void RecursiveRemove (TObject *obj) override;  Sets the object pointer to zero if the object is deleted in the RecursiveRemove() operation. ;  ; void SetObject (TObject *obj, Bool_t fixMustCleanupBit=kTRUE);  Set obj as the spy target. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectSpy.html:66,Guid,Guide,66,doc/master/classTObjectSpy.html,https://root.cern,https://root.cern/doc/master/classTObjectSpy.html,1,['Guid'],['Guide']
Usability,". ROOT: TObjectTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TObjectTable Class ReferenceCore ROOT classes » Containers. ; This class registers all instances of TObject and its derived classes in a hash table. ; The Add() and Remove() members are called from the TObject ctor and dtor, respectively. Using the Print() member one can see all currently active objects in the system. Using the resource (in .rootrc): Root.ObjectStat one can toggle this feature on or off.; Using the compile option R__NOSTATS one can de-active this feature for the entire system (for maximum performance in highly time critical applications).; The following output has been produced in a ROOT interactive session via the command gObjectTable->Print() class cnt on heap size total size heap size; ============================================================================; TKey 4 4 72 288 288; TClass 84 84 80 6720 6720; TDataMember 276 276 24 6624 6624; TObject 11 11 12 132 132; TMethod 1974 1974 64 126336 126336; TDataType 34 34 56 1904 1904; TList 2328 2328 36 83808 83808; TH1F 1 1 448 448 448; TText 2688 2688 56 150528 150528; TGaxis 1 0 120 120 0; TAxis 6 3 88 528 264; TBox 57 57 52 2964 2964; TLine 118 118 40 4720 4720; TWbox 1 1 56 56 56; TArrow 1 1 64 64 64; TPaveText 59 59 124 7316 7316; TPave 1 1 92 92 92; TFile 1 1 136 136 136; TCanvas 3 3 444 1332 1332; TPad 1 1 312 312 312; TContextMenu 3 3 48 144 144; TMethodArg 2166 2166 44 95304 95304; TPaveLabel 1 1 120 120 120; THtml 1 1 32 32 32; TROOT 1 0 208 208 0; TApplication 1 1 28 28 28; TFileHandler 1 1 20 20 20; TColor 163 163 40 6520 6520; TStyle 1 1 364 364 364; TRealData 117 117 28 3276 3276; TBaseClass 88 88 36 3168 3168; THashList 5 5 40 200 200; THashTable 5 5 36 180 180; TGeometry 1 1 64 64 64; TLink 7 7 60 420 420; TPostS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObjectTable.html:68,Guid,Guide,68,doc/master/classTObjectTable.html,https://root.cern,https://root.cern/doc/master/classTObjectTable.html,1,['Guid'],['Guide']
Usability,". ROOT: TOptionListItem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TOptionListItem Class Reference. . Definition at line 105 of file TDataMember.h. Public Member Functions;  TOptionListItem ();  ;  TOptionListItem (TDataMember *m, Long_t val, Long_t valmask, Long_t tglmask, const char *name, const char *label);  Constructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOptionListItem.html:71,Guid,Guide,71,doc/master/classTOptionListItem.html,https://root.cern,https://root.cern/doc/master/classTOptionListItem.html,1,['Guid'],['Guide']
Usability,". ROOT: TOrdCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TOrdCollection Class ReferenceCore ROOT classes » Containers. ; Ordered collection. ; An ordered collection has TList insertion semantics but is implemented using an array of TObject*'s. It uses less space than a TList (since there is no need for the prev and next pointers), but it is more costly to insert objects (since it has to create a gap by copying object pointers). TOrdCollection is better than TList when objects are only added at the end of the collection since no copying needs to be done. ; Definition at line 32 of file TOrdCollection.h. Public Types; enum  { kDefaultCapacity = 1; , kMinExpand = 8; , kShrinkFactor = 2; };  ; typedef TOrdCollectionIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TOrdCollection (Int_t capacity=kDefaultCapacity);  Create an ordered collection. ;  ;  ~TOrdCollection ();  Delete the collection. ;  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the coll",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOrdCollection.html:70,Guid,Guide,70,doc/master/classTOrdCollection.html,https://root.cern,https://root.cern/doc/master/classTOrdCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TOutputListSelectorDataMap Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TOutputListSelectorDataMap Class ReferencePROOF » PROOF kernel Libraries. ; Set the selector's data members to the corresponding elements of the output list. ; Definition at line 30 of file TOutputListSelectorDataMap.h. Public Member Functions;  TOutputListSelectorDataMap (TSelector *sel=0);  Create a mapper between output list items and TSelector data members. ;  ;  ~TOutputListSelectorDataMap () override;  ; TCollection * GetMap () const;  ; const char * GetName () const override;  Return static name for TOutputListSelectorDataMap objects. ;  ; Bool_t Init (TSelector *sel);  Initialize the data member <-> output list mapping from a selector. ;  ; TClass * IsA () const override;  ; Bool_t Merge (TObject *obj);  Merge another TOutputListSelectorDataMap object, check consistency. ;  ; Bool_t SetDataMembers (TSelector *sel) const;  Given an output list, set the data members of a TSelector. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTOutputListSelectorDataMap.html:82,Guid,Guide,82,doc/master/classTOutputListSelectorDataMap.html,https://root.cern,https://root.cern/doc/master/classTOutputListSelectorDataMap.html,1,['Guid'],['Guide']
Usability,". ROOT: TPARA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPARA Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A parallelepiped. . It has 9 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx: half-length in x; dy: half-length in y; dz: half-length in z; alpha: angle formed by the y axis and by the plane joining the centre of the faces parallel to the z-x plane at -DY and +DY; theta: polar angle of the line joining the centres of the faces at -DZ and +DZ in z; phi: azimuthal angle of the line joining the centres of the faces at -DZ and +DZ in z . Definition at line 30 of file TPARA.h. Public Member Functions;  TPARA ();  PARA shape default constructor. ;  ;  TPARA (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz, Float_t alpha, Float_t theta, Float_t phi);  PARA shape normal constructor. ;  ;  ~TPARA () override;  PARA shape default destructor. ;  ; virtual Float_t GetAlpha () const;  ; virtual Float_t GetPhi () const;  ; virtual Float_t GetTheta () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPARA.html:61,Guid,Guide,61,doc/master/classTPARA.html,https://root.cern,https://root.cern/doc/master/classTPARA.html,1,['Guid'],['Guide']
Usability,". ROOT: TPBHandleDSType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPBHandleDSType Class Reference. . Definition at line 83 of file TProofBenchTypes.h. Public Types; enum  EHandleDSType { kReleaseCache = 0; , kCheckCache = 1; , kRemoveFiles = 2; , kCopyFiles = 3; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPBHandleDSType (EHandleDSType type=kReleaseCache);  ;  ~TPBHandleDSType () override;  ; const char * GetName () const override;  Returns name of object. ;  ; EHandleDSType GetType () const;  ; TClass * IsA () const override;  ; Bool_t IsCheckCache () const;  ; Bool_t IsCopyFiles () const;  ; Bool_t IsReleaseCache () const;  ; Bool_t IsRemoveFiles () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void Appen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBHandleDSType.html:71,Guid,Guide,71,doc/master/classTPBHandleDSType.html,https://root.cern,https://root.cern/doc/master/classTPBHandleDSType.html,1,['Guid'],['Guide']
Usability,". ROOT: TPBHistType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPBHistType Class Reference. . Definition at line 57 of file TProofBenchTypes.h. Public Types; enum  EHistType { ;   kHistNotSpecified = 0; , kHist1D = 1; , kHist2D = 2; , kHist3D = 4; , ;   kHistAll = kHist1D | kHist2D | kHist3D. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPBHistType (EHistType type=kHist1D);  ;  ~TPBHistType () override;  ; const char * GetName () const override;  Returns name of object. ;  ; EHistType GetType () const;  ; TClass * IsA () const override;  ; Bool_t IsHist1D () const;  ; Bool_t IsHist2D () const;  ; Bool_t IsHist3D () const;  ; Bool_t IsHistAll () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBHistType.html:67,Guid,Guide,67,doc/master/classTPBHistType.html,https://root.cern,https://root.cern/doc/master/classTPBHistType.html,1,['Guid'],['Guide']
Usability,". ROOT: TPBReadType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPBReadType Class Reference. . Definition at line 33 of file TProofBenchTypes.h. Public Types; enum  EReadType { kReadNotSpecified = 0; , kReadFull = 1; , kReadOpt = 2; , kReadNo = 4; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPBReadType (EReadType type=kReadOpt);  ;  ~TPBReadType () override;  ; const char * GetName () const override;  Returns name of object. ;  ; EReadType GetType () const;  ; TClass * IsA () const override;  ; Bool_t IsReadFull () const;  ; Bool_t IsReadNo () const;  ; Bool_t IsReadOpt () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBReadType.html:67,Guid,Guide,67,doc/master/classTPBReadType.html,https://root.cern,https://root.cern/doc/master/classTPBReadType.html,1,['Guid'],['Guide']
Usability,". ROOT: TPCON Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPCON Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A polycone. . It has the following parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); phi1: the azimuthal angle phi at which the volume begins (angles are counted counterclockwise); dphi: opening angle of the volume, which extends from phi1 to phi1+dphi; nz: number of planes perpendicular to the z axis where the dimension of the section is given – this number should be at least 2; rmin: array of dimension nz with minimum radius at a given plane; rmax: array of dimension nz with maximum radius at a given plane; z: array of dimension nz with z position of given plane . Definition at line 33 of file TPCON.h. Public Member Functions;  TPCON ();  PCON shape default constructor. ;  ;  TPCON (const char *name, const char *title, const char *material, Float_t phi1, Float_t dphi1, Int_t nz);  PCON shape normal constructor. ;  ;  ~TPCON () override;  PCON shape default destructor. ;  ; virtual void DefineSection (Int_t secNum, Float_t z, Float_t rmin, Float_t rmax);  Defines section secNum of the polycone. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a PCON. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDhi1 () const;  ; virtual Float_t * GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Int_t GetNz () const;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t * GetRmax () const;  ; virtual Float_t * GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetNumberOfDivisions (Int_t p);  Set number of divisions. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPCON.html:61,Guid,Guide,61,doc/master/classTPCON.html,https://root.cern,https://root.cern/doc/master/classTPCON.html,1,['Guid'],['Guide']
Usability,". ROOT: TPDF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TPDF Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to PDF. ; Like PostScript, PDF is a vector graphics output format allowing a very high graphics output quality. The functionalities provided by this class are very similar to those provided by TPostScript.; Compare to PostScript output, the PDF files are usually smaller because some parts of them can be compressed.; PDF also allows to define table of contents. This facility can be used in ROOT. The following example shows how to proceed: {; TCanvas* canvas = new TCanvas(""canvas"");; TH1F* histo = new TH1F(""histo"",""test 1"",10,0.,10.);; histo->SetFillColor(2);; histo->Fill(2.);; histo->Draw();; canvas->Print(""plots.pdf("",""Title:One bin filled"");; histo->Fill(4.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Two bins filled"");; histo->Fill(6.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Three bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf"",""Title:Four bins filled"");; histo->Fill(8.);; histo->Draw();; canvas->Print(""plots.pdf)"",""Title:The fourth bin content is 2"");; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TPad::Printvoid Print(const char *filename="""") const overrideThis method is equivalent to SaveAs(""filename""). See TPad::SaveAs for details.Definition TPad.cxx:4798; Each charac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPDF.html:60,Guid,Guide,60,doc/master/classTPDF.html,https://root.cern,https://root.cern/doc/master/classTPDF.html,1,['Guid'],['Guide']
Usability,". ROOT: TPGON Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TPGON Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A polygon. . It has the following parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); phi1: the azimuthal angle &phi at which the volume begins (angles are counted counterclockwise); dphi1: opening angle of the volume, which extends from phi1 to phi1+dphi; npdv: number of sides of the cross section between the given phi limits; nz: number of planes perpendicular to the z axis where the dimension of the section is given – this number should be at least 2; rmin: array of dimension nz with minimum radius at a given plane; rmax: array of dimension nz with maximum radius at a given plane; z: array of dimension nz with z position of given plane . Definition at line 30 of file TPGON.h. Public Member Functions;  TPGON ();  PGON shape default constructor. ;  ;  TPGON (const char *name, const char *title, const char *material, Float_t phi1, Float_t dphi1, Int_t npdv, Int_t nz);  PGON shape normal constructor. ;  ;  ~TPGON () override;  PGON shape default destructor. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPCON;  TPCON ();  PCON shape default constructor. ;  ;  TPCON (const char *name, const char *title, const char *material, Float_t phi1, Float_t dphi1, Int_t nz);  PCON shape normal constructor. ;  ;  ~TPCON () override;  PCON shape default destructor. ;  ; virtual void DefineSection (Int_t secNum, Float_t z, Float_t rmin, Float_t rmax);  Defines section secNum of the polycone. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from poin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPGON.html:61,Guid,Guide,61,doc/master/classTPGON.html,https://root.cern,https://root.cern/doc/master/classTPGON.html,1,['Guid'],['Guide']
Usability,". ROOT: TPRegexp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TPRegexp Class Reference. . Definition at line 36 of file TPRegexp.h. Public Member Functions;  TPRegexp ();  Default ctor. ;  ;  TPRegexp (const TPRegexp &p);  Copy ctor. ;  ;  TPRegexp (const TString &pat);  Create and initialize with pat. ;  ; virtual ~TPRegexp ();  Cleanup. ;  ; TString GetModifiers () const;  Return PCRE modifier options as string. ;  ; TString GetPattern () const;  ; virtual TClass * IsA () const;  ; Bool_t IsValid () const;  Returns true if underlying PCRE structure has been successfully generated via regexp compilation. ;  ; Int_t Match (const TString &s, const TString &mods="""", Int_t start=0, Int_t nMaxMatch=10, TArrayI *pos=nullptr);  The number of matches is returned, this equals the full match + sub-pattern matches. ;  ; Bool_t MatchB (const TString &s, const TString &mods="""", Int_t start=0, Int_t nMaxMatch=10);  ; TObjArray * MatchS (const TString &s, const TString &mods="""", Int_t start=0, Int_t nMaxMatch=10);  Returns a TObjArray of matched substrings as TObjString's. ;  ; TPRegexp & operator= (const TPRegexp &p);  Assignment operator. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Substitute (TString &s, const TString &replace, const TString &mods="""", Int_t start=0, Int_t nMatchMax=10);  Substitute replaces the string s by a new string in which matching patterns are replaced by the replacePattern string. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t GetThrowAtCompileError ();  Get value of stat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPRegexp.html:64,Guid,Guide,64,doc/master/classTPRegexp.html,https://root.cern,https://root.cern/doc/master/classTPRegexp.html,1,['Guid'],['Guide']
Usability,". ROOT: TPServerSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TPServerSocket Class Reference. . Definition at line 31 of file TPServerSocket.h. Public Member Functions;  TPServerSocket (const char *service, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a parallel server socket object for a named service. ;  ;  TPServerSocket (Int_t port, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a parallel server socket object on a specified port. ;  ; virtual ~TPServerSocket ();  ; TPSocket * Accept (UChar_t Opt=kSrvNoAuth) override;  Accept a connection on a parallel server socket. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TServerSocket;  TServerSocket (const char *service, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object for a named service. ;  ;  TServerSocket (Int_t port, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object on a specified port. ;  ; virtual ~TServerSocket ();  Destructor: cleanup authentication stuff (if any) and close. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of host to which the server socket is bound, i.e. ;  ; Int_t GetLocalPort () override;  Get port # to which server socket is bound. In case of error returns -1. ;  ; TClass * IsA () const override;  ; Int_t Recv (char *, Int_t) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *, Int_t, Int_t &) override;  Receive a character string message of maximum ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:70,Guid,Guide,70,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TPSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TPSocket Class Reference. . Definition at line 33 of file TPSocket.h. Public Member Functions;  TPSocket (const char *host, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, TSocket *sock);  Create a parallel socket on a connection already opened via TSocket sock. ;  ;  TPSocket (TInetAddress address, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:64,Guid,Guide,64,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TPackMgr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TPackMgr Class ReferencePROOF » PROOF kernel Libraries. ; The PROOF package manager contains tools to manage packages. ; This class has been created to eliminate duplications, and to allow for standalone usage. ; Definition at line 37 of file TPackMgr.h. Public Types; enum  ECheckVersionOpt { kDontCheck = 0; , kCheckROOT = 1; , kCheckGIT = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPackMgr (const char *dir, const char *key=""L0"");  Create a PROOF package manager. ;  ;  ~TPackMgr () override;  Destroy a TPackMgr instance. ;  ; Int_t Build (const char *pack, Int_t opt=TPackMgr::kCheckROOT);  Method to build a package. ;  ; Int_t Clean (const char *pack);  Clean dir for package 'pack' Return -1 in case of error, 0 otherwise. ;  ; const char * GetDir () const;  ; Int_t GetDownloadDir (TString &dldir);  Method to get the download dir; create if not existing Return -1 in case of error (not found; not created), 0 otherwise. ;  ; void GetEnabledPackages (TString &packlist);  Method to get a semi-colon separated list with the names of the enabled p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackMgr.html:64,Guid,Guide,64,doc/master/classTPackMgr.html,https://root.cern,https://root.cern/doc/master/classTPackMgr.html,1,['Guid'],['Guide']
Usability,". ROOT: TPackageDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TPackageDescription Class Reference. . Definition at line 158 of file TSessionViewer.h. Public Member Functions; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPackageDescription.html:75,Guid,Guide,75,doc/master/classTPackageDescription.html,https://root.cern,https://root.cern/doc/master/classTPackageDescription.html,1,['Guid'],['Guide']
Usability,". ROOT: TPacketizer::TFileNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPacketizer::TFileNode Class Reference. . Definition at line 93 of file TPacketizer.cxx. Public Member Functions;  TFileNode (const char *name);  ;  ~TFileNode () override;  ; void Add (TDSetElement *elem);  ; Int_t Compare (const TObject *other) const override;  Compare abstract method. ;  ; void DecSlaveCnt (const char *slave);  ; const char * GetName () const override;  Returns name of object. ;  ; TFileStat * GetNextActive ();  ; TFileStat * GetNextUnAlloc ();  ; Int_t GetNumberOfActiveFiles () const;  ; Int_t GetSlaveCnt () const;  ; void IncMySlaveCnt ();  ; void IncSlaveCnt (const char *slave);  ; Bool_t IsSortable () const override;  ; void Print (Option_t *) const override;  This method must be overridden when a class wants to print itself. ;  ; void RemoveActive (TFileStat *file);  ; void Reset ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html:78,Guid,Guide,78,doc/master/classTPacketizer_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TPacketizer::TFileStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPacketizer::TFileStat Class Reference. . Definition at line 65 of file TPacketizer.cxx. Public Member Functions;  TFileStat (TFileNode *node, TDSetElement *elem);  ; TDSetElement * GetElement () const;  ; Long64_t GetNextEntry () const;  ; TFileNode * GetNode () const;  ; Bool_t IsDone () const;  ; void MoveNextEntry (Long64_t step);  ; void SetDone ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html:78,Guid,Guide,78,doc/master/classTPacketizer_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizer_1_1TFileStat.html,1,['Guid'],['Guide']
Usability,". ROOT: TPacketizerAdaptive::TFileNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPacketizerAdaptive::TFileNode Class Reference. . Definition at line 133 of file TPacketizerAdaptive.cxx. Public Member Functions;  TFileNode (const char *name, Int_t strategy, TSortedList *files);  ;  ~TFileNode () override;  ; void Add (TDSetElement *elem, Bool_t tolist);  ; Int_t Compare (const TObject *other) const override;  Compare abstract method. ;  ; void DecExtSlaveCnt (const char *slave);  ; void DecreaseProcessed (Long64_t nEvents);  ; void DecRunSlaveCnt ();  ; Long64_t GetEventsLeftPerSlave () const;  ; Int_t GetExtSlaveCnt () const;  ; Int_t GetMySlaveCnt () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetNEvents () const;  ; TFileStat * GetNextActive ();  ; TFileStat * GetNextUnAlloc ();  ; Int_t GetNumberOfActiveFiles () const;  ; Int_t GetNumberOfFiles ();  ; Long64_t GetProcessed () const;  ; Int_t GetRunSlaveCnt () const;  ; Int_t GetSlaveCnt () const;  ; void IncEvents (Long64_t nEvents);  ; void IncExtSlaveCnt (const char *slave);  ; void IncMySlaveCnt ();  ; void IncProcessed (Long64_t nEvents);  ; void IncRunSlaveCnt ();  ; Bool_t IsSortable () const override;  ; void Print (Option_t *=0) const override;  This method must be overridden when a class wants to print itself. ;  ; void RemoveActive (TFileStat *file);  ; void Reset ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html:86,Guid,Guide,86,doc/master/classTPacketizerAdaptive_1_1TFileNode.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TPacketizerAdaptive::TFileStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPacketizerAdaptive::TFileStat Class Reference. . Definition at line 75 of file TPacketizerAdaptive.cxx. Public Member Functions;  TFileStat (TFileNode *node, TDSetElement *elem, TList *file);  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; TDSetElement * GetElement () const;  ; Long64_t GetNextEntry () const;  ; TFileNode * GetNode () const;  ; Bool_t IsDone () const;  ; Bool_t IsSortable () const override;  ; void MoveNextEntry (Long64_t step);  ; void Print (Option_t *=0) const override;  This method must be overridden when a class wants to print itself. ;  ; void SetDone ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html:86,Guid,Guide,86,doc/master/classTPacketizerAdaptive_1_1TFileStat.html,https://root.cern,https://root.cern/doc/master/classTPacketizerAdaptive_1_1TFileStat.html,1,['Guid'],['Guide']
Usability,". ROOT: TPacketizerFile::TIterObj Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPacketizerFile::TIterObj Class Reference. . Definition at line 74 of file TPacketizerFile.cxx. Public Member Functions;  TIterObj (const char *n, TIter *iter);  ;  ~TIterObj () override;  ; TIter * GetIter () const;  ; const char * GetName () const override;  Returns name of object. ;  ; void Print (Option_t *option="""") const override;  Printf info. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html:81,Guid,Guide,81,doc/master/classTPacketizerFile_1_1TIterObj.html,https://root.cern,https://root.cern/doc/master/classTPacketizerFile_1_1TIterObj.html,1,['Guid'],['Guide']
Usability,". ROOT: TPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TPad Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The most important graphics class in the ROOT system. ; A Pad is contained in a Canvas.; A Pad may contain other pads (unlimited pad hierarchy).; A pad is a linked list of primitives of any type (graphics objects, histograms, detectors, tracks, etc.).; Adding a new element into a pad is in general performed by the Draw member function of the object classes.; It is important to realize that the pad is a linked list of references to the original object. For example, in case of a histogram, the histogram.Draw() operation only stores a reference to the histogram object and not a graphical representation of this histogram. When the mouse is used to change (say the bin content), the bin content of the original histogram is changed.; The convention used in ROOT is that a Draw operation only adds a reference to the object. The effective drawing is performed when the canvas receives a signal to be painted. This signal is generally sent when typing carriage return in the command input or when a graphical operation has been performed on one of the pads of this canvas. When a Canvas/Pad is repainted, the member function Paint for all objects in the Pad linked list is invoked. When the mouse is moved on the Pad, The member function DistancetoPrimitive is called for all the elements in the pad. DistancetoPrimitive returns the distance in pixels to this object.; When the object is within the distance window, the member function ExecuteEvent is called for this object.; In ExecuteEvent, move, changes can be performed on the object.; For examples of Dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:60,Guid,Guide,60,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Guid'],['Guide']
Usability,". ROOT: TPadPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TPadPainter Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Implement TVirtualPadPainter which abstracts painting operations. ; Definition at line 26 of file TPadPainter.h. Public Member Functions;  TPadPainter ();  Empty ctor. We need it only because of explicit copy ctor. ;  ; void ClearDrawable () override;  Clear the current gVirtualX window. ;  ; void CopyDrawable (Int_t device, Int_t px, Int_t py) override;  Copy a gVirtualX pixmap. ;  ; Int_t CreateDrawable (UInt_t w, UInt_t h) override;  Create a gVirtualX Pixmap. ;  ; void DestroyDrawable (Int_t device) override;  Close the current gVirtualX pixmap. ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode) override;  Paint a simple box. ;  ; void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y) override;  Paint filled area. ;  ; void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y) override;  Paint filled area. ;  ; void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint a simple line. ;  ; void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint a simple line in normalized coordinates. ;  ; void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending) override;  Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ;  ; void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y) override;  Paint Polyline. ;  ; void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polyline. ;  ; void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v) override;  Paint polyline in normalized coordinates. ;  ; void DrawPolyMarker (Int_t n, const Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadPainter.html:67,Guid,Guide,67,doc/master/classTPadPainter.html,https://root.cern,https://root.cern/doc/master/classTPadPainter.html,4,"['Clear', 'Guid', 'simpl']","['Clear', 'ClearDrawable', 'Guide', 'simple']"
Usability,". ROOT: TPadWebSnapshot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPadWebSnapshot Class Reference. . Definition at line 60 of file TWebSnapshot.h. Public Member Functions;  TPadWebSnapshot (bool readonly=true, bool setids=true, bool batchmode=false);  ; TClass * IsA () const override;  ; bool IsBatchMode () const;  ; bool IsReadOnly () const;  ; bool IsSetObjectIds () const;  ; TWebSnapshot & NewPrimitive (TObject *obj=nullptr, const std::string &opt="""", const std::string &suffix="""");  Create new entry in list of primitives. ;  ; TWebSnapshot & NewSpecials ();  Create new entry in list of primitives in the front. ;  ; TPadWebSnapshot & NewSubPad ();  Create new entry for subpad. ;  ; void SetActive (bool on=true);  ; void SetHasExecs (bool on=true);  ; void SetWithoutPrimitives (bool on=true);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWebSnapshot;  ~TWebSnapshot () override;  destructor ;  ; Int_t GetKind () const;  ; const char * GetObjectID () const;  ; TObject * GetSnapshot () const;  ; TClass * IsA () const override;  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (void *ptr, const std::string &suffix="""");  Use pointer to assign object id - TString::Hash. ;  ; void SetOption (const std::string &opt);  ; void SetSnapshot (Int_t kind, TObject *snapshot, Bool_t owner=kFALSE);  SetUse pointer to assign object id - TString::Hash. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPadWebSnapshot.html:71,Guid,Guide,71,doc/master/classTPadWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTPadWebSnapshot.html,1,['Guid'],['Guide']
Usability,". ROOT: TPainter3dAlgorithms Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TPainter3dAlgorithms Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The Legos and Surfaces painter class. ; 3D graphics representations package.; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino.; The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and Evgueni Tcherniaev.; This class is a subset of the original system. It has been converted to a C++ class by Rene Brun. ; Definition at line 28 of file TPainter3dAlgorithms.h. Public Types; typedef void(TPainter3dAlgorithms::* DrawFaceFunc_t) (Int_t *, Double_t *, Int_t, Int_t *, Double_t *);  ; typedef void(TPainter3dAlgorithms::* LegoFunc_t) (Int_t, Int_t, Int_t &, Double_t *, Double_t *, Double_t *);  ; typedef void(TPainter3dAlgorithms::* SurfaceFunc_t) (Int_t, Int_t, Double_t *, Double_t *);  . Public Member Functions;  TPainter3dAlgorithms ();  Lego default constructor. ;  ;  TPainter3dAlgorithms (Double_t *rmin, Double_t *rmax, Int_t system=1);  Normal default constructor. ;  ;  ~TPainter3dAlgorithms () override;  destructor ;  ; void BackBox (Double_t ang);  Draw back surfaces of surrounding box. ;  ; void ColorFunction (Int_t nl, Double_t *fl, Int_t *icl, Int_t &irep);  Set correspondence between function and color levels. ;  ; void DefineGridLevels (Int_t ndivz);  Define the grid levels drawn in the background of surface and lego plots. ;  ; void DrawFaceGouraudShaded (Int_t *icodes, Double_t xyz[][3], Int_t np, Int_t *iface, Double_t *t);  Draw the faces for the Gouraud Shaded Iso surfaces. ;  ; void DrawFaceMode1 (Int_t *icodes, Double_t *xyz, Int_t np, Int_t *iface, Double_t *t);  Draw face - 1st variant (2 colors: 1st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:76,Guid,Guide,76,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['Guid'],['Guide']
Usability,". ROOT: TPair Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TPair Class Reference. ; Class used by TMap to store (key,value) pairs. ; Definition at line 102 of file TMap.h. Public Member Functions;  TPair (const TPair &a);  ;  TPair (TObject *key, TObject *value);  ; virtual ~TPair ();  TPair destructor. ;  ; void Browse (TBrowser *b) override;  Browse the pair. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; TObject * Key () const;  ; void SetValue (TObject *val);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TObject * Value () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPair.html:61,Guid,Guide,61,doc/master/classTPair.html,https://root.cern,https://root.cern/doc/master/classTPair.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaletteAxis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaletteAxis Class ReferenceHistogram Library » Painting classes » Histograms and graphs painting classes. ; The palette painting class. ; A TPaletteAxis object is used to display the color palette when drawing 2-d histograms.; The TPaletteAxis is automatically created drawn when drawing a 2-D histogram when the option ""Z"" is specified.; A TPaletteAxis object is added to the histogram list of functions and can be retrieved doing: TPaletteAxis *palette = (TPaletteAxis*)h->GetListOfFunctions()->FindObject(""palette"");; then the pointer palette can be used to change the palette attributes.; Because the palette is created at painting time only, one must issue a: gPad->Update();; before retrieving the palette pointer in order to create the palette. The following macro gives an example.; {; auto h2 = new TH2F(""h2"",""Example of a resized palette "",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; h2->Fill(px,5*py);; }; gStyle->SetPalette(1);; h2->Draw(""COLZ"");; gPad->Update();; auto palette = (TPaletteAxis*)h2->GetListOfFunctions()->FindObject(""palette"");; palette->SetY2NDC(0.7);; }; Float_tfloat Float_tDefinition RtypesCore.h:57; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TPaletteAxisThe palette painting class.Definition TPaletteAxis.h:28; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteAxis.html:68,Guid,Guide,68,doc/master/classTPaletteAxis.html,https://root.cern,https://root.cern/doc/master/classTPaletteAxis.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaletteEditor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaletteEditor Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Edit the palette via a GUI. ; This class provides a way to edit the palette via a GUI. ; Definition at line 19 of file TAttImage.h. Public Member Functions;  TPaletteEditor (TAttImage *attImage, UInt_t w, UInt_t h);  Constructor. ;  ; virtual ~TPaletteEditor ();  ; virtual void CloseWindow ();  Closes the window and deletes itself. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; TAttImage * fAttImage {nullptr};  . #include <TAttImage.h>. Inheritance diagram for TPaletteEditor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TPaletteEditor(). TPaletteEditor::TPaletteEditor ; (; TAttImage * ; attImage, . UInt_t ; w, . UInt_t ; h . ). Constructor. ; Definition at line 257 of file TAttImage.cxx. ◆ ~TPaletteEditor(). virtual TPaletteEditor::~TPaletteEditor ; (; ). inlinevirtual . Definition at line 26 of file TAttImage.h. Member Function Documentation. ◆ Class(). static TClass * TPaletteEditor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPaletteEditor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPaletteEditor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 30 of file TAttImage.h. ◆ CloseWindow(). void TPalett",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaletteEditor.html:70,Guid,Guide,70,doc/master/classTPaletteEditor.html,https://root.cern,https://root.cern/doc/master/classTPaletteEditor.html,1,['Guid'],['Guide']
Usability,". ROOT: TParallelCoord Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TParallelCoord Class Reference. ; Parallel Coordinates class. ; The multidimensional system of Parallel coordinates is a common way of studying high-dimensional geometry and visualizing multivariate problems. It has first been proposed by A. Inselberg in 1981.; To show a set of points in an n-dimensional space, a backdrop is drawn consisting of n parallel lines. A point in n-dimensional space is represented as a polyline with vertices on the parallel axes; the position of the vertex on the i-th axis corresponds to the i-th coordinate of the point.; This tool comes with a rather large gui in the editor. It is necessary to use this editor in order to explore a data set, as explained below. Reduce cluttering:; The main issue for parallel coordinates is the very high cluttering of the output when dealing with large data set. Two techniques have been implemented to bypass that so far:. Draw doted lines instead of plain lines with an adjustable dots spacing. A slider to adjust the dots spacing is available in the editor.; Sort the entries to display with a ""weight cut"". On each axis is drawn a histogram describing the distribution of the data on the corresponding variable. The ""weight"" of an entry is the sum of the bin content of each bin the entry is going through. An entry going through the histograms peaks will have a big weight wether an entry going randomly through the histograms will have a rather small weight. Setting a cut on this weight allows to draw only the most representative entries. A slider set the cut is also available in the gui. Selections:; Selections of specific entries can be defined over the data se using parallel coordinates. With that representation, a selectio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:70,Guid,Guide,70,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['Guid'],['Guide']
Usability,". ROOT: TParallelCoordRange Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TParallelCoordRange Class Reference. ; A TParallelCoordRange is a range used for parallel coordinates plots. ; Definition at line 25 of file TParallelCoordRange.h. Public Types; enum  EStatusBits { kShowOnPad = (1ULL << ( 15 )); , kLiveUpdate = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoordRange ();  Default constructor. ;  ;  TParallelCoordRange (TParallelCoordVar *var, Double_t min=0, Double_t max=0, TParallelCoordSelect *sel=nullptr);  Normal constructor. ;  ;  ~TParallelCoordRange () override;  Destructor. ;  ; virtual void BringOnTop ();  Make the selection which owns the range to be drawn on top of the others. ;  ; void Delete (const Option_t *options="""") override;  Delete the range. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance to the primitive. ;  ; void Draw (Option_t *options="""") override;  Draw a TParallelCoordRange. ;  ; void ExecuteEvent (Int_t entry, Int_t px, Int_t py) override;  Execute the entry. ;  ; virtual Double_t GetMax ();  ; virtual Double_t GetMin ();  ; TParallelCoordS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordRange.html:75,Guid,Guide,75,doc/master/classTParallelCoordRange.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordRange.html,1,['Guid'],['Guide']
Usability,". ROOT: TParallelCoordSelect Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TParallelCoordSelect Class Reference. ; A TParallelCoordSelect is a specialised TList to hold TParallelCoordRanges used by TParallelCoord. ; Selections of specific entries can be defined over the data se using parallel coordinates. With that representation, a selection is an ensemble of ranges defined on the axes. Ranges defined on the same axis are conjugated with OR (an entry must be in one or the other ranges to be selected). Ranges on different axes are are conjugated with AND (an entry must be in all the ranges to be selected). Several selections can be defined with different colors. It is possible to generate an entry list from a given selection and apply it to the tree using the editor (""Apply to tree"" button). ; Definition at line 69 of file TParallelCoordRange.h. Public Types; enum  { kActivated = (1ULL << ( 18 )); , kShowRanges = (1ULL << ( 19 )); };  ;  Public Types inherited from TList; typedef TListIter Iterator_t;  ;  Public Types inherited from TCollection; enum  { kInitCapacity = 16; , kInitHashTableCapacity = 17; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoord",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordSelect.html:76,Guid,Guide,76,doc/master/classTParallelCoordSelect.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordSelect.html,1,['Guid'],['Guide']
Usability,". ROOT: TParallelCoordVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TParallelCoordVar Class Reference. ; TParallelCoord axes. ; Class containing a variable for the TParallelCoord.; Options can be defined each axis separately using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. ; Definition at line 24 of file TParallelCoordVar.h. Public Types; enum  EStatusBits { kLogScale = (1ULL << ( 14 )); , kShowBox = (1ULL << ( 15 )); , kShowBarHisto = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParallelCoordVar ();  Default constructor. ;  ;  TParallelCoordVar (Double_t *val, const char *title, Int_t id, TParallelCoord *gram);  Normal constructor. ;  ;  ~TParallelCoordVar () override;  Destructor. ;  ; void AddRange ()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:73,Guid,Guide,73,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TParallelMergingFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TParallelMergingFile Class Reference. . Definition at line 38 of file TParallelMergingFile.h. Public Member Functions;  TParallelMergingFile (const char *filename, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Constructor. ;  ;  ~TParallelMergingFile ();  Destructor. ;  ; void Close (Option_t *option="""") override;  Close a file. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t UploadAndReset ();  Upload the current file data to the merging server. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) const override;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *name=nullptr, Int_t opt=0, Int_t bufsiz=0) override;  Write memory objects to this file and upload them to the parallel merge server. ;  ; void WriteStreamerInfo () override;  Write the list of TStreamerInfo as a single object in this file The class Streamer description for all classes written to this file is saved. ;  ;  Public Member Functions inherited from TMemFile;  TMemFile (const char *name, char *buffer, Long64_t size, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Long64_t defBlockSize=0LL);  Usual Constructor. See the TFile constructor for details. Copy data from buffer. ;  ;  TMemFile (const char *name, const ZeroCopyView_t &datarange);  Constructor to create a TMemFile re-using external C-Style storage. ;  ;  TMemFile (const char *name, ExternalDataPtr_t data);  Constructor to create a TMemFile re-using external storage. ;  ;  TMemFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelMergingFile.html:76,Guid,Guide,76,doc/master/classTParallelMergingFile.html,https://root.cern,https://root.cern/doc/master/classTParallelMergingFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TParameter< AParamType > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TParameter< AParamType > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<class AParamType>; class TParameter< AParamType >Named parameter, streamable and storable. ; Definition at line 35 of file TParameter.h. Public Types; enum  EStatusBits { ;   kMultiply = (1ULL << ( 16 )); , kMax = (1ULL << ( 17 )); , kMin = (1ULL << ( 18 )); , kFirst = (1ULL << ( 19 )); , ;   kLast = (1ULL << ( 20 )); , kIsConst = (1ULL << ( 21 )). };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TParameter ();  ;  TParameter (const char *name, const AParamType &val);  ;  TParameter (const char *name, const AParamType &val, char mergemode);  ; virtual ~TParameter ();  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const AParamType & GetVal () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsConst () const;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *) cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParameter.html:89,Guid,Guide,89,doc/master/classTParameter.html,https://root.cern,https://root.cern/doc/master/classTParameter.html,1,['Guid'],['Guide']
Usability,". ROOT: TParticle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TParticle Class ReferenceMonte Carlo » EG. ; Description of the dynamic properties of a particle. ; A dynamic particle class created by event generators and used during the propagation in detectors. The static attributes of a TParticle are described by TParticlePDG.; Int_t fPdgCode; // PDG code of the particle; Int_t fStatusCode; // generation status code; Int_t fMother[2]; // Indices of the mother particles; Int_t fDaughter[2]; // Indices of the daughter particles; Float_t fWeight; // particle weight. Double_t fCalcMass; // Calculated mass. Double_t fPx; // x component of momentum; Double_t fPy; // y component of momentum; Double_t fPz; // z component of momentum; Double_t fE; // Energy. Double_t fVx; // x of production vertex; Double_t fVy; // y of production vertex; Double_t fVz; // z of production vertex; Double_t fVt; // t of production vertex. Double_t fPolarTheta; // Polar angle of polarisation; Double_t fPolarPhi; // azymutal angle of polarisation. TParticlePDG* fParticlePDG; //! reference to the particle record in PDG database. Definition at line 26 of file TParticle.h. Public Member Functions;  TParticle ();  reference to the particle record in PDG database ;  ;  TParticle (const TParticle &part);  copy constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, const TLorentzVector &p, const TLorentzVector &v);  constructor ;  ;  TParticle (Int_t pdg, Int_t status, Int_t mother1, Int_t mother2, Int_t daughter1, Int_t daughter2, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time);  constructor ;  ;  ~TParticle () override;  destructor ;  ; Int_t Beauty () const;  Return beauty quantum number. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticle.html:65,Guid,Guide,65,doc/master/classTParticle.html,https://root.cern,https://root.cern/doc/master/classTParticle.html,1,['Guid'],['Guide']
Usability,". ROOT: TParticleClassPDG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TParticleClassPDG Class ReferenceMonte Carlo » EG. ; Utility class used internally by TDatabasePDG. ; Definition at line 19 of file TParticleClassPDG.h. Public Member Functions;  TParticleClassPDG (const char *name=0);  default constructor ;  ;  ~TParticleClassPDG () override;  destructor, class doesn't own its particles... ;  ; void AddParticle (TObject *p);  ; void Browse (TBrowser *b) override;  browse this particle class ;  ; TObjArray * GetListOfParticles ();  ; Int_t GetNParticles ();  ; TParticlePDG * GetParticle (Int_t i);  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Print (Option_t *opt="""") const override;  Print the entire information of this kind of particle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticleClassPDG.html:73,Guid,Guide,73,doc/master/classTParticleClassPDG.html,https://root.cern,https://root.cern/doc/master/classTParticleClassPDG.html,1,['Guid'],['Guide']
Usability,". ROOT: TParticlePDG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TParticlePDG Class ReferenceMonte Carlo » EG. ; Description of the static properties of a particle. ; The class is typically generated by the TDatabasePDG class. It is referenced by the dynamic particle class TParticle. Int_t fPdgCode; // PDG code of the particle; Double_t fMass; // particle mass in GeV; Double_t fCharge; // charge in units of |e|/3; Double_t fLifetime; // proper lifetime in seconds; Double_t fWidth; // total width in GeV; Int_t fParity; // parity; Double_t fSpin; // spin; Double_t fIsospin; // isospin; Double_t fI3; // i3; Int_t fStrangeness; // flavours are defined if i3 != -1; Int_t fCharm; // 1 or -1 for C-particles, 0 for others; Int_t fBeauty;; Int_t fTop;; Int_t fY; // X,Y: quantum numbers for the 4-th generation; Int_t fX;; Int_t fStable; // 1 if stable, 0 otherwise. TObjArray* fDecayList; // array of decay channels. TString fParticleClass; // lepton, meson etc. Int_t fTrackingCode; // G3 tracking code of the particle; TParticlePDG* fAntiParticle; // pointer to antiparticle. Definition at line 19 of file TParticlePDG.h. Public Member Functions;  TParticlePDG ();  default constructor ;  ;  TParticlePDG (const char *Name, const char *Title, Double_t Mass, Bool_t Stable, Double_t Width, Double_t Charge, const char *ParticleClass, Int_t PdgCode, Int_t Anti, Int_t TrackingCode);  constructor ;  ;  ~TParticlePDG () override;  destructor ;  ; Int_t AddDecayChannel (Int_t Type, Double_t BranchingRatio, Int_t NDaughters, Int_t *DaughterPdgCode);  add new decay channel, Particle owns those... ;  ; TParticlePDG * AntiParticle ();  ; const TParticlePDG * AntiParticle () const;  ; Int_t Beauty () const;  ; Double_t Charge () const;  ; Int_t Charm () const;  ; TDecayChannel * DecayC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticlePDG.html:68,Guid,Guide,68,doc/master/classTParticlePDG.html,https://root.cern,https://root.cern/doc/master/classTParticlePDG.html,1,['Guid'],['Guide']
Usability,". ROOT: TPave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPave Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A TBox with a bordersize and a shadow option. ; The corners of a TPave can be rounded (option ""arc"") More functional objects like TPavelabel, TPaveText derive from TPave. Definition at line 19 of file TPave.h. Public Types; enum  { kNameIsAction = (1ULL << ( 11 )); };  ;  Public Types inherited from TBox; enum  { kCannotMove = (1ULL << ( 12 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TPave ();  Pave default constructor. ;  ;  TPave (const TPave &pave);  Pave copy constructor. ;  ;  TPave (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"");  Pave normal constructor. ;  ;  ~TPave () override;  Pave default destructor. ;  ; virtual void ConvertNDCtoPad ();  Convert pave coordinates from NDC to Pad coordinates. ;  ; void Copy (TObject &pave) const override;  Copy this pave to pave. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a pave. ;  ; void Draw (Option_t *option="""") override;  Draw this pave with its current attributes. ;  ; virtual TPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:61,Guid,Guide,61,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaveClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaveClass Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A TPaveLabel specialized to process classes inside a TClassTree. ; A TPaveClass object is used by the TClassTree to represent a class. A TPaveClass has the same graphical representation as a TPaveLabel.; Using the context menu on can select additional options in the ClassTree:; Show classes using this class; Show all classes used by this class . Definition at line 23 of file TPaveClass.h. Public Member Functions;  TPaveClass ();  PaveClass default constructor. ;  ;  TPaveClass (const TPaveClass &PaveVar);  PaveClass copy constructor. ;  ;  TPaveClass (Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, TClassTree *classtree);  PaveClass normal constructor. ;  ;  ~TPaveClass () override;  PaveClass default destructor. ;  ; void Copy (TObject &PaveVar) const override;  Copy this PaveClass to PaveClass. ;  ; virtual void DrawClasses (const char *classes=""this"");  Draw classes. ;  ; TClassTree * GetClassTree () const;  ; TClass * IsA () const override;  ; void SaveAs (const char *filename="""", Option_t *option="""") const override;  Save as. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetClasses (const char *classes=""this"", Option_t *option=""ID"");  Set classes. ;  ; virtual void SetClassTree (TClassTree *classtree);  ; virtual void ShowClassesUsedBy (const char *classes=""this"");  Show classes used by. ;  ; virtual void ShowClassesUsing (const char *classes=""this"");  Show classes using. ;  ; virtual void ShowLinks (Option_t *option=""HMR"");  Set link options in the ClassTree object. ;  ; void Streamer (TBuffer &) override;  Stream an object o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveClass.html:66,Guid,Guide,66,doc/master/classTPaveClass.html,https://root.cern,https://root.cern/doc/master/classTPaveClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaveLabel Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaveLabel Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A Pave (see TPave) with a text centered in the Pave. . Definition at line 20 of file TPaveLabel.h. Public Member Functions;  TPaveLabel ();  Pavelabel default constructor. ;  ;  TPaveLabel (const TPaveLabel &pavelabel);  TPaveLabel copy constructor. ;  ;  TPaveLabel (Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option=""br"");  Pavelabel normal constructor. ;  ;  ~TPaveLabel () override;  TPaveLabel default destructor. ;  ; void Copy (TObject &pavelabel) const override;  Copy this pavelabel to pavelabel. ;  ; void Draw (Option_t *option="""") override;  Draw this pavelabel with its current attributes. ;  ; virtual TPaveLabel * DrawPaveLabel (Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""");  Draw this pavelabel with new coordinates. ;  ; const char * GetLabel () const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; TClass * IsA () const override;  ; TPaveLabel & operator= (const TPaveLabel &pavelabel);  TPaveLabel assign operator. ;  ; void Paint (Option_t *option="""") override;  Paint this pavelabel with its current attributes. ;  ; virtual void PaintPaveLabel (Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""");  Draw this pavelabel with new coordinates. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetLabel (const char *label);  ; void Streamer (TBuffer &) override;  Stream an object of class TPave. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveLabel.html:66,Guid,Guide,66,doc/master/classTPaveLabel.html,https://root.cern,https://root.cern/doc/master/classTPaveLabel.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaveStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaveStats Class ReferenceGraphics » 2D Graphics » Basic graphics. ; The histogram statistics painter class. ; To draw histogram statistics and fit parameters. Statistics Display; Fit Statistics; Statistics box editing. Statistics Display; The type of information shown in the histogram statistics box can be selected with: gStyle->SetOptStat(mode);; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TStyle::SetOptStatvoid SetOptStat(Int_t stat=1)The type of information printed in the histogram statistics box can be selected via the parameter mod...Definition TStyle.cxx:1640; The ""`mode`"" has up to nine digits that can be set to on (1 or 2), off (0). mode = ksiourmen (default = 000001111); k = 1; kurtosis printed; k = 2; kurtosis and kurtosis error printed; s = 1; skewness printed; s = 2; skewness and skewness error printed; i = 1; integral of bins printed; o = 1; number of overflows printed; u = 1; number of underflows printed; r = 1; rms printed; r = 2; rms and rms error printed; m = 1; mean value printed; m = 2; mean and mean error values printed; e = 1; number of entries printed; n = 1; name of histogram is printed; e#define e(i)Definition RSha256.hxx:103; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; namechar name[80]Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:66,Guid,Guide,66,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,1,['Guid'],['Guide']
Usability,". ROOT: TPaveText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPaveText Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A Pave (see TPave) with text, lines or/and boxes inside. ; Line (and boxes) are positioned in the pave using coordinates relative to the pave (%).; The text lines are added in order using the AddText method. Also line separators can be added, in order too, using the AddLine method.; AddText returns a TText corresponding to the line added to the pave. This return value can be used to modify the text attributes.; Once the TPaveText is build the text of each line can be retrieved using GetLine or GetLineWith as a TText wich is useful to modify the text attributes of a line.; Example:; ; TCanvas *pavetext(){; TCanvas *c = new TCanvas(""c"");; TPaveText *pt = new TPaveText(.05,.1,.95,.8);; ; pt->AddText(""A TPaveText can contain severals line of text."");; pt->AddText(""They are added to the pave using the AddText method."");; pt->AddLine(.0,.5,1.,.5);; pt->AddText(""Even complex TLatex formulas can be added:"");; TText *t1 = pt->AddText(""F(t) = #sum_{i=-#infty}^{#infty}A(i)cos#[]{#frac{i}{t+i}}"");; ; t1->SetTextColor(kBlue);; ; pt->Draw();; ; TText *t2 = pt->GetLineWith(""Even"");; t2->SetTextColor(kOrange+1);; ; return c;; }; c#define c(i)Definition RSha256.hxx:101; kOrange@ kOrangeDefinition Rtypes.h:67; kBlue@ kBlueDefinition Rtypes.h:66; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TCanvasThe Canvas class.Definition TCanvas.h:23; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::TPa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText.html:65,Guid,Guide,65,doc/master/classTPaveText.html,https://root.cern,https://root.cern/doc/master/classTPaveText.html,1,['Guid'],['Guide']
Usability,". ROOT: TPavesText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPavesText Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A PaveText (see TPaveText) with several stacked paves. . Definition at line 18 of file TPavesText.h. Public Member Functions;  TPavesText ();  Pavestext default constructor. ;  ;  TPavesText (const TPavesText &pavestext);  Pavestext copy constructor. ;  ;  TPavesText (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t npaves=5, Option_t *option=""br"");  Pavestext normal constructor. ;  ;  ~TPavesText () override;  Pavestext default destructor. ;  ; void Draw (Option_t *option="""") override;  Draw this pavestext with its current attributes. ;  ; virtual Int_t GetNpaves ();  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this pavestext with its current attributes. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetNpaves (Int_t npaves=5);  ; void Streamer (TBuffer &) override;  Stream an object of class TPave. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TPaveText;  TPaveText ();  pavetext default constructor. ;  ;  TPaveText (const TPaveText &pavetext);  pavetext copy constructor. ;  ;  TPaveText (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Option_t *option=""br"");  PaveText normal constructor. ;  ;  ~TPaveText () override;  pavetext default destructor. ;  ; virtual TBox * AddBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2);  Add a new graphics box to this pavetext. ;  ; virtual TLine * AddLine (Double_t x1=0, Double_t y1=0, Double_t x2=0, Double_t y2=0);  Add a new graphics line to this pavetext. ;  ; virtual TText * AddText (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPavesText.html:66,Guid,Guide,66,doc/master/classTPavesText.html,https://root.cern,https://root.cern/doc/master/classTPavesText.html,1,['Guid'],['Guide']
Usability,". ROOT: TPerfEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TPerfEvent Class Reference. . Definition at line 39 of file TPerfStats.h. Public Member Functions;  TPerfEvent (TTimeStamp *offset=0);  Constructor. ;  ;  ~TPerfEvent () override;  ; Int_t Compare (const TObject *obj) const override;  Compare method. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void Print (Option_t *option="""") const override;  Dump content of this instance. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfEvent.html:66,Guid,Guide,66,doc/master/classTPerfEvent.html,https://root.cern,https://root.cern/doc/master/classTPerfEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TPerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TPerfStats Class ReferencePROOF » PROOF kernel Libraries. ; Provides the interface for the PROOF internal performance measurement and event tracing. ; Definition at line 70 of file TPerfStats.h. Public Member Functions;  ~TPerfStats () override;  Destructor. ;  ; void FileEvent (const char *slave, const char *slavename, const char *nodename, const char *filename, Bool_t isStart) override;  File event. ;  ; void FileOpenEvent (TFile *file, const char *filename, Double_t start) override;  Open file event. ;  ; void FileReadEvent (TFile *file, Int_t len, Double_t start) override;  Read file event. ;  ; Long64_t GetBytesRead () const override;  Get number of bytes read. ;  ; Long64_t GetNumEvents () const override;  ; TClass * IsA () const override;  ; void PacketEvent (const char *slave, const char *slavename, const char *filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead) override;  Packet event. ;  ; void PrintBasketInfo (Option_t *="""") const override;  ; void RateEvent (Double_t proctime, Double_t deltatime, Long64_t eventsprocessed, Long64_t bytesRead) override;  Rate event. ;  ; void SetBytesRead (Long64_t num) override;  Set number of bytes read. ;  ; void SetLoaded (size_t, size_t) override;  ; void SetLoaded (TBranch *, size_t) override;  ; void SetLoadedMiss (size_t, size_t) override;  ; void SetLoadedMiss (TBranch *, size_t) override;  ; void SetMissed (size_t, size_t) override;  ; void SetMissed (TBranch *, size_t) override;  ; void SetNumEvents (Long64_t num) override;  ; void SetUsed (size_t, size_t) override;  ; void SetUsed (TBranch *, size_t) override;  ; void SimpleEvent (EEventType type)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPerfStats.html:66,Guid,Guide,66,doc/master/classTPerfStats.html,https://root.cern,https://root.cern/doc/master/classTPerfStats.html,1,['Guid'],['Guide']
Usability,". ROOT: TPie Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TPie Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Draw a Pie Chart,. ; Example:; ; void piechart(); {; Float_t vals[] = {.2,1.1,.6,.9,2.3};; Int_t colors[] = {2,3,4,5,6};; Int_t nvals = sizeof(vals)/sizeof(vals[0]);; ; TCanvas *cpie = new TCanvas(""cpie"",""TPie test"",700,700);; cpie->Divide(2,2);; ; TPie *pie1 = new TPie(""pie1"",; ""Pie with offset and no colors"",nvals,vals);; TPie *pie2 = new TPie(""pie2"",; ""Pie with radial labels"",nvals,vals,colors);; TPie *pie3 = new TPie(""pie3"",; ""Pie with tangential labels"",nvals,vals,colors);; TPie *pie4 = new TPie(""pie4"",; ""Pie with verbose labels"",nvals,vals,colors);; ; cpie->cd(1);; pie1->SetAngularOffset(30.);; pie1->SetEntryRadiusOffset( 4, 0.1);; pie1->SetRadius(.35);; pie1->Draw(""3d"");; ; cpie->cd(2);; pie2->SetEntryRadiusOffset(2,.05);; pie2->SetEntryLineColor(2,2);; pie2->SetEntryLineWidth(2,5);; pie2->SetEntryLineStyle(2,2);; pie2->SetEntryFillStyle(1,3030);; pie2->SetCircle(.5,.45,.3);; pie2->Draw(""rsc"");; ; cpie->cd(3);; pie3->SetY(.32);; pie3->GetSlice(0)->SetValue(.8);; pie3->GetSlice(1)->SetFillStyle(3031);; pie3->SetLabelsOffset(-.1);; pie3->Draw(""3d t nol"");; TLegend *pieleg = pie3->MakeLegend();; pieleg->SetY1(.56); pieleg->SetY2(.86);; ; cpie->cd(4);; pie4->SetRadius(.2);; pie4->SetLabelsOffset(.01);; pie4->SetLabelFormat(""#splitline{%val (%perc)}{%txt}"");; pie4->Draw(""nol <"");; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPie.html:60,Guid,Guide,60,doc/master/classTPie.html,https://root.cern,https://root.cern/doc/master/classTPie.html,1,['Guid'],['Guide']
Usability,". ROOT: TPieSlice Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; Friends |; List of all members ; TPieSlice Class ReferenceGraphics » 2D Graphics » Basic graphics. ; A slice of a piechart, see the TPie class. ; This class describe the property of single ; Definition at line 18 of file TPieSlice.h. Public Member Functions;  TPieSlice ();  This is the default constructor, used to create the standard. ;  ;  TPieSlice (const char *, const char *, TPie *, Double_t val=0);  This constructor create a slice with a particular value. ;  ;  ~TPieSlice () override;  ; void Copy (TObject &slice) const override;  Copy TPieSlice. ;  ; Int_t DistancetoPrimitive (Int_t, Int_t) override;  Eval if the mouse is over the area associated with this slice. ;  ; Double_t GetRadiusOffset () const;  return the value of the offset in radial direction for this slice. ;  ; Double_t GetValue () const;  Return the value of this slice. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *opts="""") override;  Save as C++ macro, used directly from TPie. ;  ; void SetIsActive (Bool_t is);  ; void SetRadiusOffset (Double_t);  Set the radial offset of this slice. ;  ; void SetValue (Double_t);  Set the value for this slice. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPieSlice.html:65,Guid,Guide,65,doc/master/classTPieSlice.html,https://root.cern,https://root.cern/doc/master/classTPieSlice.html,1,['Guid'],['Guide']
Usability,". ROOT: TPluginHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TPluginHandler Class Reference. . Definition at line 103 of file TPluginManager.h. Public Member Functions; Int_t CheckPlugin () const;  Check if the plugin library for this handler exits. ;  ; Longptr_t ExecPlugin (int nargs);  ; template<typename... T> ; Longptr_t ExecPlugin (int nargs, const T &... params);  ; Longptr_t ExecPluginImpl ();  ; const char * GetClass () const;  ; TClass * IsA () const override;  ; Int_t LoadPlugin ();  Load the plugin library for this handler. ;  ; void Print (Option_t *opt="""") const override;  Print info about the plugin handler. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Com",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPluginHandler.html:70,Guid,Guide,70,doc/master/classTPluginHandler.html,https://root.cern,https://root.cern/doc/master/classTPluginHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TPluginManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TPluginManager Class ReferenceCore ROOT classes » Base ROOT classes. ; This class implements a plugin library manager. ; It keeps track of a list of plugin handlers. A plugin handler knows which plugin library to load to get a specific class that is used to extend the functionality of a specific base class and how to create an object of this class. For example, to extend the base class TFile to be able to read SQLite files one needs to load the plugin library libRSQLite.so which defines the TRSQLiteServer class. This loading should be triggered when a given URI contains a regular expression defined by the handler.; Plugin handlers can be defined via macros in a list of plugin directories. With $ROOTSYS/etc/plugins the default top plugin directory specified in $ROOTSYS/etc/system.rootrc. Additional directories can be specified by adding them to the end of the list. Macros for identical plugin handlers in later directories will override previous ones (the inverse of normal search path behavior). The macros must have names like <BaseClass>/PX0_<PluginClass>.C, e.g. TSQLServer/P20_TMySQLServer.C, to allow easy sorting and grouping. If the BaseClass is in a namespace the directory must have the name NameSpace@BaseClass as : is a reserved pathname character on some operating systems. Macros not beginning with 'P' and ending with "".C"" are ignored. These macros typically look like: void P10_TDCacheFile(); {; gPluginMgr->AddHandler(""TFile"", ""^dcache"", ""TDCacheFile"",; ""DCache"", ""TDCacheFile(const char*,Option_t*)"");; }; gPluginMgrR__EXTERN TPluginManager * gPluginMgrDefinition TPluginManager.h:289; TPluginManager::AddHandlervoid AddHandler(const char *base, const char *regexp, const char *className, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPluginManager.html:70,Guid,Guide,70,doc/master/classTPluginManager.html,https://root.cern,https://root.cern/doc/master/classTPluginManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TPoint Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Friends |; List of all members ; TPoint Class Reference. . Definition at line 31 of file TPoint.h. Public Member Functions;  TPoint ();  ;  TPoint (SCoord_t x, SCoord_t y);  ;  TPoint (SCoord_t xy);  ; SCoord_t GetX () const;  ; SCoord_t GetY () const;  ; void SetX (SCoord_t x);  ; void SetY (SCoord_t y);  . Public Attributes; SCoord_t fX;  ; SCoord_t fY;  . Friends; bool operator!= (const TPoint &p1, const TPoint &p2);  ; bool operator== (const TPoint &p1, const TPoint &p2);  . #include <TPoint.h>; Constructor & Destructor Documentation. ◆ TPoint() [1/3]. TPoint::TPoint ; (; ). inline . Definition at line 43 of file TPoint.h. ◆ TPoint() [2/3]. TPoint::TPoint ; (; SCoord_t ; xy). inline . Definition at line 44 of file TPoint.h. ◆ TPoint() [3/3]. TPoint::TPoint ; (; SCoord_t ; x, . SCoord_t ; y . ). inline . Definition at line 45 of file TPoint.h. Member Function Documentation. ◆ GetX(). SCoord_t TPoint::GetX ; (; ); const. inline . Definition at line 46 of file TPoint.h. ◆ GetY(). SCoord_t TPoint::GetY ; (; ); const. inline . Definition at line 47 of file TPoint.h. ◆ SetX(). void TPoint::SetX ; (; SCoord_t ; x). inline . Definition at line 48 of file TPoint.h. ◆ SetY(). void TPoint::SetY ; (; SCoord_t ; y). inline . Definition at line 49 of file TPoint.h. Friends And Related Symbol Documentation. ◆ operator!=. bool operator!= ; (; const TPoint & ; p1, . const TPoint & ; p2 . ). friend . Definition at line 60 of file TPoint.h. ◆ operator==. bool operator== ; (; const TPoint & ; p1, . const TPoint & ; p2 . ). friend . Definition at line 55 of file TPoint.h. Member Data Documentation. ◆ fX. SCoord_t TPoint::fX. Definition at line 35 of file TPoint.h. ◆ fY. SCoord_t TPoint::fY. Definition at line 36 of file TPoint.h. Libraries for TPoint:. [legend]; The documentation for this class was gene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoint.html:62,Guid,Guide,62,doc/master/classTPoint.html,https://root.cern,https://root.cern/doc/master/classTPoint.html,1,['Guid'],['Guide']
Usability,". ROOT: TPointSet3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPointSet3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; TPolyMarker3D using TPointSet3DGL for direct OpenGL rendering. ; Supports only elementary marker types:; 4, 20, 24 : round points, size in pixels;; 2, 3, 5 : crosses, size in scene units;; 28 : as above, line width 2 pixels;; all other : square points, size in pixels. Marker-size (from TAttMarker) is multiplied by 5!; An identification of type TObject* can be assigned to each point via SetPointId() method. Set the fOwnIds flag if the ids are owned by the point-set and should be deleted when pointset is cleared or destructed.; Copy-constructor and assignment operator COPIES the ids if the are not owned and CLONES them if they are owned.; The ids are not streamed. ; Definition at line 21 of file TPointSet3D.h. Public Member Functions;  TPointSet3D ();  ;  TPointSet3D (const TPointSet3D &t);  Copy constructor. ;  ;  TPointSet3D (Int_t n, Double_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Float_t *p, Marker_t m=1, Option_t *opt="""");  ;  TPointSet3D (Int_t n, Marker_t m=1, Option_t *opt="""");  ;  ~TPointSet3D () override;  Destructor. ;  ; void ClearIds ();  Clears the id-array. If ids are owned the TObjects are deleted. ;  ; void ComputeBBox () override;  Compute the bounding box of this points set. ;  ; Bool_t GetOwnIds () const;  ; TObject * GetPointId (Int_t n) const;  ; TClass * IsA () const override;  ; TPointSet3D & operator= (const TPointSet3D &t);  Assignment operator. ;  ; virtual void PointSelected (Int_t n);  This virtual method is called from TPointSet3DGL when a point is selected. ;  ; void SetOwnIds (Bool_t o);  ; void SetPointId (Int_t n, TObject *id);  Set id of point n. ;  ; void SetPointId",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPointSet3D.html:67,Guid,Guide,67,doc/master/classTPointSet3D.html,https://root.cern,https://root.cern/doc/master/classTPointSet3D.html,2,"['Guid', 'clear']","['Guide', 'cleared']"
Usability,". ROOT: TPoints Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPoints Class ReferenceGraphics » 2D Graphics » Basic graphics. ; 2-D graphics point (world coordinates). ; Definition at line 19 of file TPoints.h. Public Member Functions;  TPoints ();  ;  TPoints (Double_t x, Double_t y);  ;  TPoints (Double_t xy);  ; virtual ~TPoints ();  ; Double_t GetX () const;  ; Double_t GetY () const;  ; virtual TClass * IsA () const;  ; void SetX (Double_t x);  ; void SetY (Double_t y);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; Double_t fX;  X world coordinate. ;  ; Double_t fY;  Y world coordinate. ;  . #include <TPoints.h>; Constructor & Destructor Documentation. ◆ TPoints() [1/3]. TPoints::TPoints ; (; ). inline . Definition at line 26 of file TPoints.h. ◆ TPoints() [2/3]. TPoints::TPoints ; (; Double_t ; xy). inline . Definition at line 27 of file TPoints.h. ◆ TPoints() [3/3]. TPoints::TPoints ; (; Double_t ; x, . Double_t ; y . ). inline . Definition at line 28 of file TPoints.h. ◆ ~TPoints(). virtual TPoints::~TPoints ; (; ). inlinevirtual . Definition at line 29 of file TPoints.h. Member Function Documentation. ◆ Class(). static TClass * TPoints::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPoints::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPoints::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 35 of file TPoints.h. ◆ DeclFileName(). static const char * TPoints::DeclFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints.html:63,Guid,Guide,63,doc/master/classTPoints.html,https://root.cern,https://root.cern/doc/master/classTPoints.html,1,['Guid'],['Guide']
Usability,". ROOT: TPoints3DABC Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TPoints3DABC Class ReferenceabstractGraphics » 3D Graphics » Basic 3D graphics. ; Abstract class to define Arrays of 3D points. ; Definition at line 25 of file TPoints3DABC.h. Public Member Functions;  TPoints3DABC ();  ;  ~TPoints3DABC () override;  ; virtual Int_t Add (Float_t x, Float_t y, Float_t z);  Add one 3D point defined by x,y,z to the array of the points as its last element. ;  ; virtual Int_t AddLast (Float_t x, Float_t y, Float_t z);  Add one 3D point defined by x,y,z to the array of the points as its last element. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override=0;  Computes distance from point (px,py) to the object. ;  ; virtual Int_t GetLastPosition () const =0;  ; virtual Int_t GetN () const;  GetN() returns the number of allocated cells if any. ;  ; Option_t * GetOption () const override=0;  ; virtual Float_t * GetP () const;  GetP() returns the pointer to the float point array of points if available The number of the available cells can be found via GetN() method. ;  ; virtual Float_t GetX (Int_t idx) const =0;  ; virtual Float_t * GetXYZ (Float_t *xyz, Int_t idx, Int_t num=1) const;  GetXYZ(Float_t *xyz,Int_t idx,Int_t num=1) fills the buffer supplied by the calling code with the points information. ;  ; virtual const Float_t * GetXYZ (Int_t idx)=0;  ; virtual Float_t GetY (Int_t idx) const =0;  ; virtual Float_t GetZ (Int_t idx) const =0;  ; TClass * IsA () const override;  ; virtual void PaintPoints (Int_t n, Float_t *p, Option_t *option="""")=0;  ; virtual Int_t SetLastPosition (Int_t idx)=0;  ; virtual Int_t SetNextPoint (Float_t x, Float_t y, Float_t z);  Add one 3D point defined by x,y,z to the array of the points as its last element. ;  ; virtual void SetOption (Option_t *option="""")=0;  ; virtual Int_t SetPoin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPoints3DABC.html:68,Guid,Guide,68,doc/master/classTPoints3DABC.html,https://root.cern,https://root.cern/doc/master/classTPoints3DABC.html,1,['Guid'],['Guide']
Usability,". ROOT: TPolyLine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPolyLine Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Defined by an array on N points in a 2-D space. ; One can draw the contour of the polyline or/and its fill area. Example:; {; Double_t x[5] = {.2,.7,.6,.25,.2};; Double_t y[5] = {.5,.1,.9,.7,.5};; TPolyLine *pline = new TPolyLine(5,x,y);; pline->SetFillColor(38);; pline->SetLineColor(2);; pline->SetLineWidth(4);; pline->Draw(""f"");; pline->Draw();; }; Double_tdouble Double_tDefinition RtypesCore.h:59; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TPolyLineDefined by an array on N points in a 2-D space.Definition TPolyLine.h:23; TPolyLine::TPolyLineTPolyLine()PolyLine default constructor.Definition TPolyLine.cxx:47; TPolyLine::Drawvoid Draw(Option_t *option="""") overrideDraw this polyline with its current attributes.Definition TPolyLine.cxx:215; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; plineTPolyLine * plineDefinition polyline.C:4. Definition at line 23 of file TPolyLine.h. Public Types; enum  { kPolyLineNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyLine.html:65,Guid,Guide,65,doc/master/classTPolyLine.html,https://root.cern,https://root.cern/doc/master/classTPolyLine.html,1,['Guid'],['Guide']
Usability,". ROOT: TPolyLine3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPolyLine3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A 3-dimensional polyline. ; It has 4 different constructors.; First one, without any parameters TPolyLine3D(), we call 'default constructor' and it's used in a case that just an initialisation is needed (i.e. pointer declaration).; Example:; TPolyLine3D *pl1 = new TPolyLine3D;; TPolyLine3DA 3-dimensional polyline.Definition TPolyLine3D.h:33; TPolyLine3D::TPolyLine3DTPolyLine3D()3-D polyline default constructor.Definition TPolyLine3D.cxx:100; Second one is 'normal constructor' with, usually, one parameter n (number of points), and it just allocates a space for the points.; Example:; TPolyLine3D pl1(150);; Third one allocates a space for the points, and also makes initialisation from the given array.; Example:; TPolyLine3D pl1(150, pointerToAnArray);; Fourth one is, almost, similar to the constructor above, except initialisation is provided with three independent arrays (array of x coordinates, y coordinates and z coordinates).; Example:; TPolyLine3D pl1(150, xArray, yArray, zArray);; Example:; {; TCanvas *c1 = new TCanvas(""c1"",""c1"",500,500);; TView *view = TView::CreateView(1);; view->SetRange(0,0,0,2,2,2);; const Int_t n = 500;; auto r = new TRandom();; Double_t x, y, z;; TPolyLine3D *l = new TPolyLine3D(n);; for (Int_t i=0;i<n;i++) {; r->Sphere(x, y, z, 1);; l->SetPoint(i,x+1,y+1,z+1);; }; l->Draw();; }; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TCanvasThe Canvas class.Definition TCanvas.h:23; TObject::Drawvirtual void Draw(Option_t *option="""")D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyLine3D.html:67,Guid,Guide,67,doc/master/classTPolyLine3D.html,https://root.cern,https://root.cern/doc/master/classTPolyLine3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TPolyMarker Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPolyMarker Class ReferenceHistogram Library » Graph classes. ; A PolyMarker is defined by an array on N points in a 2-D space. ; At each point x[i], y[i] a marker is drawn. Marker attributes are managed by TAttMarker. See TMarker for the list of possible marker types. ; Definition at line 31 of file TPolyMarker.h. Public Member Functions;  TPolyMarker ();  Default constructor. ;  ;  TPolyMarker (const TPolyMarker &polymarker);  Copy constructor. ;  ;  TPolyMarker (Int_t n, Double_t *x, Double_t *y, Option_t *option="""");  Constructor. ;  ;  TPolyMarker (Int_t n, Float_t *x, Float_t *y, Option_t *option="""");  Constructor. ;  ;  TPolyMarker (Int_t n, Option_t *option="""");  Constructor. ;  ;  ~TPolyMarker () override;  Destructor. ;  ; void Copy (TObject &polymarker) const override;  Copy this to obj. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a polymarker. ;  ; void Draw (Option_t *option="""") override;  Draw. ;  ; virtual void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y, Option_t *option="""");  Draw polymarker. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetLastPoint () const;  Get the index of the last filled point. ;  ; virtual Int_t GetN () const;  Get the current capacity (reserved size) of the TPolyMarker. ;  ; Option_t * GetOption () const override;  ; Double_t * GetX () const;  ; Double_t * GetY () const;  ; TClass * IsA () const override;  ; void ls (Option_t *option="""") const override;  ls. ;  ; virtual Int_t Merge (TCollection *list);  Merge polymarkers in the collection in this polymarker. ;  ; void Paint (Option_t *option="""") override;  Pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyMarker.html:67,Guid,Guide,67,doc/master/classTPolyMarker.html,https://root.cern,https://root.cern/doc/master/classTPolyMarker.html,1,['Guid'],['Guide']
Usability,". ROOT: TPolyMarker3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPolyMarker3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A 3D polymarker. ; It has three constructors.; First one, without any parameters TPolyMarker3D(), we call 'default constructor' and it's used in a case that just an initialisation is needed (i.e. pointer declaration).; Example:; TPolyMarker3D *pm = new TPolyMarker3D;; TPolyMarker3DA 3D polymarker.Definition TPolyMarker3D.h:33; TPolyMarker3D::TPolyMarker3DTPolyMarker3D()3-D polymarker default constructor.Definition TPolyMarker3D.cxx:75; Second one, takes, usually, two parameters, n (number of points) and marker (marker style). Third parameter is optional.; Example:; TPolyMarker3D (150, 1);; Third one takes, usually, three parameters, n (number of points), *p (pointer to an array of 3D points), and marker (marker style). Fourth parameter is optional.; Example:; Float_t *ptr = new Float_t [150*3];; ... ... ...; ... ... ...; ... ... ...; TPolyMarker3D (150, ptr, 1);; Float_tfloat Float_tDefinition RtypesCore.h:57. Definition at line 32 of file TPolyMarker3D.h. Public Member Functions;  TPolyMarker3D ();  3-D polymarker default constructor. ;  ;  TPolyMarker3D (const TPolyMarker3D &p);  3-D polymarker copy ctor. ;  ;  TPolyMarker3D (Int_t n, Double_t *p, Marker_t marker=1, Option_t *option="""");  3-D polymarker constructor. ;  ;  TPolyMarker3D (Int_t n, Float_t *p, Marker_t marker=1, Option_t *option="""");  3-D polymarker constructor. Polymarker is initialized with p. ;  ;  TPolyMarker3D (Int_t n, Marker_t marker=1, Option_t *option="""");  3-D polymarker normal constructor with initialization to 0. ;  ;  ~TPolyMarker3D () override;  3-D polymarker destructor. ;  ; void Copy (TObject &polymarker) const override;  Copy polymarker to polymarker obj. ;  ; Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPolyMarker3D.html:69,Guid,Guide,69,doc/master/classTPolyMarker3D.html,https://root.cern,https://root.cern/doc/master/classTPolyMarker3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TPopupDelayTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPopupDelayTimer Class Reference. . Definition at line 98 of file TGMenu.cxx. Public Member Functions;  TPopupDelayTimer (TGPopupMenu *p, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPopupDelayTimer.html:72,Guid,Guide,72,doc/master/classTPopupDelayTimer.html,https://root.cern,https://root.cern/doc/master/classTPopupDelayTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TPosixCondition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPosixCondition Class Reference. . Definition at line 33 of file TPosixCondition.h. Public Member Functions;  TPosixCondition (TMutexImp *m);  Create Condition variable. ;  ; virtual ~TPosixCondition ();  TCondition dtor. ;  ; Int_t Broadcast () override;  Broadcast is like signal but wakes all threads which have called Wait(). ;  ; TClass * IsA () const override;  ; Int_t Signal () override;  If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0) override;  TimedWait() is given an absolute time to wait until. ;  ; Int_t Wait () override;  Wait for the condition variable to be signalled. ;  ;  Public Member Functions inherited from TConditionImp;  TConditionImp ();  ; virtual ~TConditionImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixCondition.html:71,Guid,Guide,71,doc/master/classTPosixCondition.html,https://root.cern,https://root.cern/doc/master/classTPosixCondition.html,1,['Guid'],['Guide']
Usability,". ROOT: TPosixMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TPosixMutex Class Reference. . Definition at line 28 of file TPosixMutex.h. Public Member Functions;  TPosixMutex (Bool_t recursive=kFALSE);  Create a posix mutex lock. ;  ; virtual ~TPosixMutex ();  TMutex dtor. ;  ; TClass * IsA () const override;  ; Int_t Lock () override;  Lock the mutex. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  Try locking the mutex. Returns 0 if mutex can be locked. ;  ; Int_t UnLock () override;  Unlock the mutex. ;  ;  Public Member Functions inherited from TMutexImp;  TMutexImp ();  ; virtual ~TMutexImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixMutex.html:67,Guid,Guide,67,doc/master/classTPosixMutex.html,https://root.cern,https://root.cern/doc/master/classTPosixMutex.html,1,['Guid'],['Guide']
Usability,". ROOT: TPosixThread Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TPosixThread Class Reference. . Definition at line 33 of file TPosixThread.h. Public Member Functions;  TPosixThread ();  ;  ~TPosixThread ();  ; Int_t CancelPoint () override;  Introduce an explicit cancellation point. Returns 0. ;  ; Int_t CleanUp (void **main) override;  Default thread cleanup routine. ;  ; Int_t CleanUpPop (void **main, Int_t exe) override;  Pop thread cleanup function from stack. ;  ; Int_t CleanUpPush (void **main, void *free, void *arg) override;  Add thread cleanup function. ;  ; Int_t Exit (void *ret) override;  Terminates the execution of the calling thread. Return 0. ;  ; TClass * IsA () const override;  ; Int_t Join (TThread *th, void **ret) override;  Join suspends the execution of the calling thread until the thread identified by th terminates, either by calling pthread_exit or by being cancelled. ;  ; Int_t Kill (TThread *th) override;  Cancellation is the mechanism by which a thread can terminate the execution of another thread. ;  ; Int_t Run (TThread *th, const int affinity=-1) override;  Create a pthread. ;  ; Long_t SelfId () override;  Return the thread identifier for the calling thread. ;  ; Int_t SetCancelAsynchronous () override;  Set the cancellation response type of the calling thread to asynchronous, i.e. ;  ; Int_t SetCancelDeferred () override;  Set the cancellation response type of the calling thread to deferred, i.e. ;  ; Int_t SetCancelOff () override;  Turn off the cancellation state of the calling thread. ;  ; Int_t SetCancelOn () override;  Turn on the cancellation state of the calling thread. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadImp;  TThre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixThread.html:68,Guid,Guide,68,doc/master/classTPosixThread.html,https://root.cern,https://root.cern/doc/master/classTPosixThread.html,1,['Guid'],['Guide']
Usability,". ROOT: TPosixThreadFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TPosixThreadFactory Class Reference. . Definition at line 31 of file TPosixThreadFactory.h. Public Member Functions;  TPosixThreadFactory (const char *name=""Posix"", const char *title=""Posix Thread Factory"");  Create Posix thread factory. Also sets global gThreadFactory to this. ;  ; virtual ~TPosixThreadFactory ();  ; TConditionImp * CreateConditionImp (TMutexImp *m) override;  Return a Posix condition variable. ;  ; TMutexImp * CreateMutexImp (Bool_t recursive) override;  Return a Posix Mutex. ;  ; TThreadImp * CreateThreadImp () override;  Return a Posix thread. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadFactory;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPosixThreadFactory.html:75,Guid,Guide,75,doc/master/classTPosixThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTPosixThreadFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: TPostScript Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TPostScript Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to PostScript. ; To generate a Postscript (or encapsulated ps) file corresponding to a single image in a canvas, you can:. Select the Print PostScript item in the canvas File menu. By default, a Postscript file with the name of the canvas.ps is generated.; Click in the canvas area, near the edges, with the right mouse button and select the Print item. You can select the name of the Postscript file. If the file name is xxx.ps, you will generate a Postscript file named xxx.ps. If the file name is xxx.eps, you generate an encapsulated Postscript file instead.; In your program (or macro), you can type: c1->Print(""xxx.ps"");; c1return c1Definition legend1.C:41; or: c1->Print(""xxx.eps"");; This will generate a file corresponding to the picture in the canvas pointed by c1. pad1->Print(""xxx.ps"");; prints only the picture in the pad pointed by pad1. The size of the Postscript picture, by default, is computed to keep the aspect ratio of the picture on the screen, where the size along x is always 20cm. You can set the size of the PostScript picture before generating the picture with a command such as:; TPostScript myps(""myfile.ps"",111); myps.Range(xsize,ysize);; object->Draw();; myps.Close();; TPostScriptInterface to PostScript.Definition TPostScript.h:20; TPostScript::Rangevoid Range(Float_t xrange, Float_t yrange)Set the range for the paper in centimeters.Definition TPostScript.cxx:2062; TPostScript::Closevoid Close(Option_t *opt="""") overrideClose a PostScript file.Definition TPostScript.cxx:442; Drawth1 Draw(); You can set the default paper size with: gStyle->SetPaperSize(xsize,ysize);; gStyleR__EXTERN TStyle * gStyleD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPostScript.html:67,Guid,Guide,67,doc/master/classTPostScript.html,https://root.cern,https://root.cern/doc/master/classTPostScript.html,1,['Guid'],['Guide']
Usability,". ROOT: TPrimary Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TPrimary Class ReferenceMonte Carlo » EG. ; Old version of a dynamic particle class created by event generators. ; This class is now obsolete. Use TParticle instead. ; Definition at line 31 of file TPrimary.h. Public Member Functions;  TPrimary ();  Primary vertex particle default constructor. ;  ;  TPrimary (Int_t part, Int_t first, Int_t second, Int_t gener, Double_t px, Double_t py, Double_t pz, Double_t etot, Double_t vx, Double_t vy, Double_t vz, Double_t time, Double_t timend, const char *type="""");  TPrimary vertex particle normal constructor. ;  ;  ~TPrimary () override;  Primaray vertex particle default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a primary track. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Int_t GetFirstMother () const;  ; virtual Int_t GetGeneration () const;  ; const char * GetName () const override;  Return name of primary particle. ;  ; virtual const TAttParticle * GetParticle () const;  Returning a pointer to the particle attributes. ;  ; virtual Int_t GetSecondMother () const;  ; virtual Double_t GetTime () const;  ; virtual Double_t GetTimeEnd () const;  ; const char * GetTitle () const override;  Return title of primary particle. ;  ; virtual Double_t GetTotalEnergy () const;  ; virtual const char * GetType () const;  ; virtual Double_t GetXMomentum () const;  ; virtual Double_t GetXPosition () const;  ; virtual Double_t GetYMomentum () const;  ; virtual Double_t GetYPosition () const;  ; virtual Double_t GetZMomentum () const;  ; virtual Double_t GetZPosition () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrimary.html:64,Guid,Guide,64,doc/master/classTPrimary.html,https://root.cern,https://root.cern/doc/master/classTPrimary.html,1,['Guid'],['Guide']
Usability,". ROOT: TPrincipal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TPrincipal Class ReferenceHistogram Library. ; Principal Components Analysis (PCA) ; The current implementation is based on the LINTRA package from CERNLIB by R. Brun, H. Hansroul, and J. Kubler. The class has been implemented by Christian Holm Christensen in August 2000. Introduction; In many applications of various fields of research, the treatment of large amounts of data requires powerful techniques capable of rapid data reduction and analysis. Usually, the quantities most conveniently measured by the experimentalist, are not necessarily the most significant for classification and analysis of the data. It is then useful to have a way of selecting an optimal set of variables necessary for the recognition process and reducing the dimensionality of the problem, resulting in an easier classification procedure.; This paper describes the implementation of one such method of feature selection, namely the principal components analysis. This multidimensional technique is well known in the field of pattern recognition and and its use in Particle Physics has been documented elsewhere (cf. H. Wind, Function Parameterization, CERN 72-21). Overview; Suppose we have prototypes which are trajectories of particles, passing through a spectrometer. If one measures the passage of the particle at say 8 fixed planes, the trajectory is described by an 8-component vector: ; \[; \mathbf{x} = \left(x_0, x_1, \ldots, x_7\right); \]. in 8-dimensional pattern space.; One proceeds by generating a representative tracks sample and building up the covariance matrix \(\mathsf{C}\). Its eigenvectors and eigenvalues are computed by standard methods, and thus a new basis is obtained for the original 8-dimensional space the expa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPrincipal.html:66,Guid,Guide,66,doc/master/classTPrincipal.html,https://root.cern,https://root.cern/doc/master/classTPrincipal.html,1,['Guid'],['Guide']
Usability,". ROOT: TProcessEventTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TProcessEventTimer Class Reference. . Definition at line 257 of file TSystem.h. Public Member Functions;  TProcessEventTimer (Long_t delay);  Create async event processor timer. Delay is in milliseconds. ;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; Bool_t ProcessEvents ();  Process events if timer did time out. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessEventTimer.html:74,Guid,Guide,74,doc/master/classTProcessEventTimer.html,https://root.cern,https://root.cern/doc/master/classTProcessEventTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TProcessID Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TProcessID Class ReferenceCore ROOT classes » Base ROOT classes. ; A TProcessID identifies a ROOT job in a unique way in time and space. ; The TProcessID title consists of a TUUID object which provides a globally unique identifier (for more see TUUID.h).; A TProcessID is automatically created by the TROOT constructor. When a TFile contains referenced objects (see TRef), the TProcessID object is written to the file. If a file has been written in multiple sessions (same machine or not), a TProcessID is written for each session. These objects are used by the class TRef to uniquely identified any TObject pointed by a TRef.; When a referenced object is read from a file (its bit kIsReferenced is set), this object is entered into the objects table of the corresponding TProcessID. Each TFile has a list of TProcessIDs (see TFile::fProcessIDs) also accessible via TProcessID::fgPIDs (for all files). When this object is deleted, it is removed from the table via the cleanup mechanism invoked by the TObject destructor.; Each TProcessID has a table (TObjArray *fObjects) that keeps track of all referenced objects. If a referenced object has a fUniqueID set, a pointer to this unique object may be found via fObjects->At(fUniqueID). In the same way, when a TRef::GetObject is called, GetObject uses its own fUniqueID to find the pointer to the referenced object. See TProcessID::GetObjectWithID and PutObjectWithID.; When a referenced object is deleted, its slot in fObjects is set to null.; See also TProcessUUID: a specialized TProcessID to manage the single list of TUUIDs. ; Definition at line 74 of file TProcessID.h. Public Member Functions;  TProcessID ();  Default constructor. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessID.html:66,Guid,Guide,66,doc/master/classTProcessID.html,https://root.cern,https://root.cern/doc/master/classTProcessID.html,1,['Guid'],['Guide']
Usability,". ROOT: TProcessUUID Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TProcessUUID Class ReferenceCore ROOT classes » Base ROOT classes. ; This class is a specialized TProcessID managing the list of UUIDs. ; In addition to TProcessID, this object has the following members:. fUUIDs : a THashList of TUUIDs in string format (using a TObjString); fActive : a TBits table with one bit per TUUID in the table. When a new TUUID is entered into the list fUUIDs, it is assigned the first free slot in the list of bits and the TUUID UUIDNumber is set to this slot number.; When a TUUID is removed from the list, the corresponding bit is reset in fActive.; The object corresponding to a TUUID at slot I can be found via fObjects->At(I).; One can use two mechanisms to find the object corresponding to a TUUID:. the input is the TUUID.AsString. One can find the corresponding TObjString object objs in fUUIDs via THashList::FindObject(name). The slot number is then objs->GetUniqueID().; The input is the UUIDNumber. The slot number is UIUIDNumber. When a TRef points to an object having a TUUID, both the TRef and the referenced object have their bit kHasUUID set. In this case, the pointer TProcessID *fPID in TRef points to the unique object TProcessUUID. The TRef uniqueID is directly the UUIDNumber=slot number. ; Definition at line 32 of file TProcessUUID.h. Public Member Functions;  TProcessUUID ();  Default constructor. ;  ; virtual ~TProcessUUID ();  Destructor. ;  ; UInt_t AddUUID (const char *uuids);  Add uuid with name uuids to the table of UUIDs return entry number in the table. ;  ; UInt_t AddUUID (TUUID &uuid, TObject *obj);  Add uuid to the table of UUIDs The TObject *obj has its uniqueID set to the UUID number return entry number in the table. ;  ; TObjString * FindUUID (UInt_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProcessUUID.html:68,Guid,Guide,68,doc/master/classTProcessUUID.html,https://root.cern,https://root.cern/doc/master/classTProcessUUID.html,1,['Guid'],['Guide']
Usability,". ROOT: TProctimeTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProctimeTimer Class Reference. . Definition at line 141 of file TProofPlayer.cxx. Public Member Functions;  TProctimeTimer (TProofPlayer *p, Long_t to);  ; Bool_t Notify () override;  Handle expiration of the timer associated with dispatching pending events while processing. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProctimeTimer.html:70,Guid,Guide,70,doc/master/classTProctimeTimer.html,https://root.cern,https://root.cern/doc/master/classTProctimeTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TProfile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TProfile Class ReferenceHistogram Library » Histogram classes. ; Profile Histogram. ; Profile histograms are used to display the mean value of Y and its error for each bin in X. The displayed error is by default the standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ). Profile histograms are in many cases an elegant replacement of two-dimensional histograms. The inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter plot, but if Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for bin j. ; \[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \]. The bin content is always the mean of the Y values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:64,Guid,Guide,64,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['Guid'],['Guide']
Usability,". ROOT: TProfile2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TProfile2D Class ReferenceHistogram Library » Histogram classes. ; Profile2D histograms are used to display the mean value of Z and its error for each cell in X,Y. ; Profile2D histograms are in many cases an elegant replacement of three-dimensional histograms : the inter-relation of three measured quantities X, Y and Z can always be visualized by a three-dimensional histogram or scatter-plot; its representation on the line-printer is not particularly satisfactory, except for sparse data. If Z is an unknown (but single-valued) approximate function of X,Y this function is displayed by a profile2D histogram with much better precision than by a scatter-plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for cell i, j. ; \[; \begin{align}; H(i,j) &= \sum w \cdot Z \\; E(i,j) &= \sum w \cdot Z^2 \\; W(i,j) &= \sum w \\; h(i,j) &= \frac{H(i,j)}{W(i,j)} \\; s(i,j) &= \sqrt{E(i,j)/W(i,j)- h(i,j)^2} \\; e(i,j) &= \frac{s(i,j)}{\sqrt{W(i,j)}}; \end{align}; \]. The bin content is always the mean of the Z values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(i,j) &= h(i,j) \\; \text{GetBinError}(i,j) &=; \begin{cases}; e(i,j) &\text{if option="""" (default). Error of the mean of all z values.} \\; s(i,j) &\text{if option=""s"". Standard deviation of z values.} \\; \begin{cases} e(j) &\text{if } h(i,j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(i,j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(i,j)} &\text{if option=""g"". Error of a weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:66,Guid,Guide,66,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TProfile2Poly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProfile2Poly Class ReferenceHistogram Library » Histogram classes. ; 2D Profile Histogram with Polygonal Bins. ; tprofile2polyRealisticModuleError.C and tprofile2polyRealistic.C illustrate how to use this class. ; Definition at line 58 of file TProfile2Poly.h. Public Member Functions;  TProfile2Poly ();  ;  TProfile2Poly (const char *name, const char *title, Double_t xlow, Double_t xup, Double_t ylow, Double_t yup);  TProfile2Poly constructor. ;  ;  TProfile2Poly (const char *name, const char *title, Int_t nX, Double_t xlow, Double_t xup, Int_t nY, Double_t ylow, Double_t yup);  TProfile2Poly constructor. ;  ;  ~TProfile2Poly () override;  ; Int_t Fill (const char *, const char *, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Int_t Fill (const char *, Double_t, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Int_t Fill (const char *name, Double_t w) override;  Increment the bin named ""name"" by w. ;  ; Int_t Fill (Double_t x, Double_t y) override;  Increment the bin containing (x,y) by 1. ;  ; Int_t Fill (Double_t x, Double_t y, Double_t w) override;  Increment the bin containing (x,y) by w. ;  ; Int_t Fill (Double_t xcoord, Double_t ycoord, Double_t value) override;  Fill. ;  ; virtual Int_t Fill (Double_t xcoord, Double_t ycoord, Double_t value, Double_t weight);  Fill. ;  ; Int_t Fill (Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Int_t Fill (Double_t, const char *, Double_t) override;  NOT IMPLEMENTED for TH2Poly. ;  ; Double_t GetBinContent (Int_t bin) const override;  Returns the content of the input bin Bin numbers are from [1,nbins] and for the overflow/underflow/sea bins the range is [-9,-1]: ;  ; Double_t GetBinContent (Int_t bin) const override;  G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2Poly.html:69,Guid,Guide,69,doc/master/classTProfile2Poly.html,https://root.cern,https://root.cern/doc/master/classTProfile2Poly.html,1,['Guid'],['Guide']
Usability,". ROOT: TProfile2PolyBin Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProfile2PolyBin Class ReferenceHistogram Library. ; Helper class to represent a bin in the TProfile2Poly histogram. ; Definition at line 19 of file TProfile2Poly.h. Public Member Functions;  TProfile2PolyBin ();  TProfile2PolyBin constructor. ;  ;  TProfile2PolyBin (TObject *poly, Int_t bin_number);  TProfile2PolyBin constructor. ;  ;  ~TProfile2PolyBin () override;  ; void ClearStats ();  Clear statistics. ;  ; Double_t GetEffectiveEntries () const;  ; Double_t GetEntries () const;  ; Double_t GetEntriesVW () const;  ; Double_t GetEntriesW2 () const;  ; Double_t GetEntriesWV2 () const;  ; Double_t GetError () const;  ; TClass * IsA () const override;  ; void Merge (const TProfile2PolyBin *toMerge);  Merge. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update ();  Update. ;  ;  Public Member Functions inherited from TH2PolyBin;  TH2PolyBin ();  Default constructor. ;  ;  TH2PolyBin (TObject *poly, Int_t bin_number);  Normal constructor. ;  ;  ~TH2PolyBin () override;  Destructor. ;  ; void ClearContent ();  ; void Fill (Double_t w);  ; Double_t GetArea ();  Returns the area of the bin. ;  ; Int_t GetBinNumber () const;  ; Bool_t GetChanged () const;  ; Double_t GetContent () const;  ; TObject * GetPolygon () const;  ; Double_t GetXMax ();  Returns the maximum value for the x coordinates of the bin. ;  ; Double_t GetXMin ();  Returns the minimum value for the x coordinates of the bin. ;  ; Double_t GetYMax ();  Returns the maximum value for the y coordinates of the bin. ;  ; Double_t GetYMin ();  Returns the minimum value for the y coordinates of the bin. ;  ; Bool_t IsInside ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2PolyBin.html:72,Guid,Guide,72,doc/master/classTProfile2PolyBin.html,https://root.cern,https://root.cern/doc/master/classTProfile2PolyBin.html,3,"['Clear', 'Guid']","['Clear', 'ClearStats', 'Guide']"
Usability,". ROOT: TProfile3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TProfile3D Class ReferenceHistogram Library » Histogram classes. ; Profile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z. ; Profile3D histograms are in many cases an The inter-relation of three measured quantities X, Y, Z and T can always be visualized by a four-dimensional histogram or scatter-plot; its representation on the line-printer is not particularly satisfactory, except for sparse data. If T is an unknown (but single-valued) approximate function of X,Y,Z this function is displayed by a profile3D histogram with much better precision than by a scatter-plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for cell I, J. 2; H(I,J,K) = sum T E(I,J,K) = sum T; l(I,J,K) = sum l L(I,J,K) = sum l; h(I,J,K) = H(I,J,K)/L(I,J,K) s(I,J,K) = sqrt(E(I,J,K)/L(I,J,K)- h(I,J,K)**2); e(I,J,K) = s(I,J,K)/sqrt(L(I,J,K)); In the special case where s(I,J,K) is zero (eg, case of 1 entry only in one cell) e(I,J,K) is computed from the average of the s(I,J,K) for all cells, if the static function TProfile3D::Approximate has been called. This simple/crude approximation was suggested in order to keep the cell during a fit operation. But note that this approximation is not the default behaviour.; Example of a profile3D histogram {; auto c1 = new TCanvas(""c1"",""Profile histogram example"",200,10,700,500);; auto hprof3d = new TProfile3D(""hprof3d"",""Profile of pt versus px, py and pz"",40,-4,4,40,-4,4,40,0,20);; Double_t px, py, pz, pt;; TRandom3 r(0);; for ( Int_t i=0; i<25000; i++) {; r.Rannor(px",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:66,Guid,Guide,66,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TProfileHelper Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; List of all members ; TProfileHelper Class Reference. . Definition at line 30 of file TProfileHelper.h. Static Public Member Functions; template<typename T > ; static Bool_t Add (T *p, const TH1 *h1, const TH1 *h2, Double_t c1, Double_t c2=1);  ; template<typename T > ; static void BuildArray (T *p);  ; template<typename T > ; static T * ExtendAxis (T *p, Double_t x, TAxis *axis);  ; template<typename T > ; static Double_t GetBinEffectiveEntries (T *p, Int_t bin);  ; template<typename T > ; static Double_t GetBinError (T *p, Int_t bin);  ; template<typename T > ; static void LabelsDeflate (T *p, Option_t *);  ; template<typename T > ; static void LabelsInflate (T *p, Option_t *);  ; template<typename T > ; static Long64_t Merge (T *p, TCollection *list);  ; template<typename T > ; static void Scale (T *p, Double_t c1, Option_t *option);  ; template<typename T > ; static void SetBinEntries (T *p, Int_t bin, Double_t w);  ; template<typename T > ; static void SetErrorOption (T *p, Option_t *opt);  ; template<typename T > ; static void Sumw2 (T *p, Bool_t flag);  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/hist/hist/src/TProfileHelper.h>; Member Function Documentation. ◆ Add(). template<typename T > . Bool_t TProfileHelper::Add ; (; T * ; p, . const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1, . Double_t ; c2 = 1 . ). static . Definition at line 71 of file TProfileHelper.h. ◆ BuildArray(). template<typename T > . void TProfileHelper::BuildArray ; (; T * ; p). static . Definition at line 130 of file TProfileHelper.h. ◆ ExtendAxis(). template<typename T > . T * TProfileHelper::ExtendAxis ; (; T * ; p, . Double_t ; x, . TAxis * ; axis . ). static . Definition at line 430 of file TProfileHelper.h. ◆ GetBinEffectiveEntries(). template<typename T > . Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfileHelper.html:70,Guid,Guide,70,doc/master/classTProfileHelper.html,https://root.cern,https://root.cern/doc/master/classTProfileHelper.html,1,['Guid'],['Guide']
Usability,". ROOT: TProof Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProof Class ReferencePROOF » PROOF kernel Libraries. ; This class controls a Parallel ROOT Facility, PROOF, cluster. ; It fires the worker servers, it keeps track of how many workers are running, it keeps track of the workers running status, it broadcasts messages to all workers, it collects results, etc. ; Definition at line 316 of file TProof.h. Classes; struct  MD5Mod_t;  . Public Types; enum  EProofClearData { kPurge = 0x1; , kUnregistered = 0x2; , kDataset = 0x4; , kForceClear = 0x8; };  ; enum  EQueryMode { kSync = 0; , kAsync = 1; };  ; enum  ERegisterOpt { kFailIfExists = 0; , kOverwriteIfExists = 1; , kMergeIfExists = 2; };  ; enum  ERunStatus { kRunning = 0; , kStopped = 1; , kAborted = 2; };  ; enum  EStatusBits { ;   kUsingSessionGui = (1ULL << ( 14 )); , kNewInputData = (1ULL << ( 15 )); , kIsClient = (1ULL << ( 16 )); , kIsMaster = (1ULL << ( 17 )); , ;   kIsTopMaster = (1ULL << ( 18 )); , kUseProgressDialog = (1ULL << ( 19 )). };  ; enum  ESubMerger { ;   kOutputSize = 1; , kSendOutput = 2; , kBeMerger = 3; , kMergerDown = 4; , ;   kStopMerging = 5; , kOutputSent = 6. };  ; enum  EUploadOpt { ;   kAppend = 0x1; , kOverwriteDataSet = 0x2; , kNoOverwriteDataSet = 0x4; , kOverwriteAllFiles = 0x8; , ;   kOverwriteNoFiles = 0x10; , kAskUser = 0x0. };  ; enum  EUploadPackageOpt { kUntar = 0x0; , kRemoveOld = 0x1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x080000",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:62,Guid,Guide,62,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofBench Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; List of all members ; TProofBench Class ReferencePROOF » PROOF benchmark utilities. ; Steering class for PROOF benchmarks. ; Definition at line 37 of file TProofBench.h. Public Member Functions;  TProofBench (const char *url, const char *outfile=""<default>"", const char *proofopt=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBench () override;  Destructor. ;  ; void CloseOutFile ();  Close output file. ;  ; Int_t CopyDataSet (const char *dset, const char *dsetdst, const char *destdir);  Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst' decribing them. ;  ; Bool_t GetDebug ();  ; const char * GetOutFileName () const;  ; TClass * IsA () const override;  ; Int_t MakeDataSet (const char *dset=0, Long64_t nevt=-1, const char *fnroot=""event"", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:67,Guid,Guide,67,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofBenchDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofBenchDataSet Class ReferencePROOF » PROOF benchmark utilities. ; Handle operations on datasets used by ProofBench. ; Definition at line 27 of file TProofBenchDataSet.h. Public Member Functions;  TProofBenchDataSet (TProof *proof=0);  Constructor. ;  ;  ~TProofBenchDataSet () override;  ; Int_t CopyFiles (const char *dset, const char *destdir);  Copy the files of dataset 'dset' to another directory Return 0 on success, -1 on error. ;  ; TClass * IsA () const override;  ; Bool_t IsProof (TProof *p);  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveFiles (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchDataSet.html:74,Guid,Guide,74,doc/master/classTProofBenchDataSet.html,https://root.cern,https://root.cern/doc/master/classTProofBenchDataSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofBenchRun Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TProofBenchRun Class ReferenceabstractPROOF » PROOF benchmark utilities. ; Abstract base class for PROOF benchmark runs. ; Definition at line 28 of file TProofBenchRun.h. Public Member Functions;  TProofBenchRun (TProof *proof=0, const char *sel=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBenchRun () override;  destructor ;  ; virtual const char * GetParList ();  ; virtual const char * GetSelName ();  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override=0;  This method must be overridden when a class wants to print itself. ;  ; virtual void Run (const char *dset, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void Run (Long64_t nevents, Int_t start=-1, Int_t stop=-1, Int_t step=-1, Int_t ntries=-1, Int_t debug=-1, Int_t draw=-1)=0;  ; virtual void SetParList (const char *pars);  ; virtual void SetSelName (const char *sel);  ; virtual void SetSelOption (const char *opt);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRun.html:70,Guid,Guide,70,doc/master/classTProofBenchRun.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRun.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofBenchRunCPU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunCPU Class ReferencePROOF » PROOF benchmark utilities. ; CPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms. ; No I/O activity is involved. . Definition at line 41 of file TProofBenchRunCPU.h. Public Member Functions;  TProofBenchRunCPU (TPBHistType *histtype=0, Int_t nhists=16, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=1000000, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t draw=0, Int_t debug=0);  Default constructor. ;  ;  ~TProofBenchRunCPU () override;  Destructor. ;  ; void DrawPerfPlots ();  Draw Performance plots. ;  ; TCanvas * GetCanvas () const;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; Int_t GetDraw () const;  ; TPBHistType * GetHistType () const;  ; TList * GetListPerfPlots () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNHists () const;  ; Int_t GetNTries () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Show settings. ;  ; void Run (const char *, Int_t, Int_t, Int_t, Int_t, Int_t, Int_t) override;  ; void Run (Long64_t nevents, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t draw) override;  Run benchmark Input parameters nevents: Number of events to run per file. ;  ; void SetDebug (Int_t debug);  ; void SetDirProofBench (TDirectory *dir);  ; void SetDraw (Int_t draw);  ; void SetHistType (TPBHistType *histtype);  Set histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:73,Guid,Guide,73,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofBenchRunDataRead Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofBenchRunDataRead Class ReferencePROOF » PROOF benchmark utilities. ; I/O-intensive PROOF benchmark test reads in event files distributed on the cluster. ; Number of events processed per second and size of events processed per second are plotted against number of active workers. Performance rate for unit packets and performance rate for query are plotted. ; Definition at line 44 of file TProofBenchRunDataRead.h. Public Member Functions;  TProofBenchRunDataRead (TProofBenchDataSet *pbds, TPBReadType *readtype=0, TDirectory *dirproofbench=0, TProof *proof=0, TProofNodes *nodes=0, Long64_t nevents=-1, Int_t ntries=2, Int_t start=1, Int_t stop=-1, Int_t step=1, Int_t debug=0);  ;  ~TProofBenchRunDataRead () override;  Destructor. ;  ; void DrawPerfProfiles ();  Get canvas. ;  ; TCanvas * GetCPerfProfiles () const;  ; TFileCollection * GetDataSet (const char *dset, Int_t nact, Bool_t nx);  Get a subsample of dsname suited to run with 'nact' and option 'nx'. ;  ; Int_t GetDebug () const;  ; TDirectory * GetDirProofBench () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TString GetNameStem () const;  Get name for this run. ;  ; Long64_t GetNEvents () const;  ; Int_t GetNTries () const;  ; TPBReadType * GetReadType () const;  ; Int_t GetStart () const;  ; Int_t GetStep () const;  ; Int_t GetStop () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the content of this object. ;  ; void Run (const char *dset, Int_t start, Int_t stop, Int_t step, Int_t ntries, Int_t debug, Int_t) override;  Run benchmark Input parameters dset: Dataset on which to run start: Start scan with 'start' ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunDataRead.html:78,Guid,Guide,78,doc/master/classTProofBenchRunDataRead.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunDataRead.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofChain Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TProofChain Class Reference. . Definition at line 31 of file TProofChain.h. Public Types; enum  { kOwnsChain = (1ULL << ( 19 )); };  ;  Public Types inherited from TChain; enum  EStatusBits { kGlobalWeight = (1ULL << ( 15 )); , kAutoDelete = (1ULL << ( 16 )); , kProofUptodate = (1ULL << ( 17 )); , kProofLite = (1ULL << ( 18 )); };  ; enum  Mode { kWithoutGlobalRegistration; , kWithGlobalRegistration; };  ;  Public Types inherited from TTree; enum  { kSplitCollectionOfPointers = 100; };  ; enum  ESetBranchAddressStatus { ;   kMissingBranch = -5; , kInternalError = -4; , kMissingCompiledCollectionProxy = -3; , kMismatch = -2; , ;   kClassMismatch = -1; , kMatch = 0; , kMatchConversion = 1; , kMatchConversionCollection = 2; , ;   kMakeClass = 3; , kVoidPtr = 4; , kNoCheck = 5; , kNeedEnableDecomposedObj = (1ULL << ( 29 )); , ;   kNeedDisableDecomposedObj = (1ULL << ( 30 )); , kDecomposedObjMask = kNeedEnableDecomposedObj | kNeedDisableDecomposedObj. };  ; enum  EStatusBits { kForceRead = (1ULL << ( 11 )); , kCircular = (1ULL << ( 12 )); , kOnlyFlushAtCluster = (1ULL << ( 14 )); , kEntriesReshuffled = (1ULL << ( 19 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofChain.html:67,Guid,Guide,67,doc/master/classTProofChain.html,https://root.cern,https://root.cern/doc/master/classTProofChain.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofCondor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; Friends |; List of all members ; TProofCondor Class Reference. . Definition at line 33 of file TProofCondor.h. Public Member Functions;  TProofCondor (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start proof using condor. ;  ;  ~TProofCondor () override;  Clean up Condor PROOF environment. ;  ; TClass * IsA () const override;  ; virtual void SetActive ();  ; virtual void SetActive (Bool_t active);  Suspend or resume PROOF via Condor. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProof;  TProof (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProof () override;  Clean up PROOF environment. ;  ; Int_t ActivateWorker (const char *ord, Bool_t save=kTRUE);  Make sure that the worker identified by the ordinal number 'ord' is in the active list. ;  ; void AddChain (TChain *chain);  Add chain to data set. ;  ; Int_t AddDynamicPath (const char *libpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'libpath' to the lib path search. ;  ; void AddFeedback (const char *name);  Add object to feedback list. ;  ; Int_t AddIncludePath (const char *incpath, Bool_t onClient=kFALSE, TList *wrks=0, Bool_t doCollect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofCondor.html:68,Guid,Guide,68,doc/master/classTProofCondor.html,https://root.cern,https://root.cern/doc/master/classTProofCondor.html,2,"['Guid', 'resume']","['Guide', 'resume']"
Usability,". ROOT: TProofDesc Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofDesc Class Reference. . Definition at line 142 of file TProofMgr.h. Public Types; enum  EStatus { kUnknown = -1; , kIdle = 0; , kRunning =1; , kShutdown = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofDesc (const char *tag=0, const char *alias=0, const char *url=0, Int_t id=-1, Int_t remid=-1, Int_t status=kIdle, TProof *p=0);  ;  ~TProofDesc () override;  ; Int_t GetLocalId () const;  ; TProof * GetProof () const;  ; Int_t GetRemoteId () const;  ; Int_t GetStatus () const;  ; const char * GetUrl () const;  ; TClass * IsA () const override;  ; Bool_t IsIdle () const;  ; Bool_t IsRunning () const;  ; Bool_t IsShuttingDown () const;  ; Bool_t MatchId (Int_t id) const;  ; void Print (Option_t *opt="""") const override;  Dump the content to the screen. ;  ; void SetProof (TProof *p);  ; void SetRemoteId (Int_t id);  ; void SetStatus (Int_t st);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDesc.html:66,Guid,Guide,66,doc/master/classTProofDesc.html,https://root.cern,https://root.cern/doc/master/classTProofDesc.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDraw Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TProofDraw Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Implement Tree drawing using PROOF. ; Definition at line 49 of file TProofDraw.h. Public Member Functions;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; void Init (TTree *) override;  Init the tree. ;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveBegin (TTree *) override;  Executed by each slave before processing. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  Executed by the client after getting the processing retults. ;  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notif",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDraw.html:66,Guid,Guide,66,doc/master/classTProofDraw.html,https://root.cern,https://root.cern/doc/master/classTProofDraw.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawEntryList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawEntryList Class Reference. . Definition at line 145 of file TProofDraw.h. Public Member Functions;  TProofDrawEntryList ();  ;  ~TProofDrawEntryList () override;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void SlaveTerminate () override;  See TProofDraw::SlaveTerminate(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEntryList.html:75,Guid,Guide,75,doc/master/classTProofDrawEntryList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEntryList.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawEventList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawEventList Class Reference. . Definition at line 124 of file TProofDraw.h. Public Member Functions;  TProofDrawEventList ();  ;  ~TProofDrawEventList () override;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void SlaveTerminate () override;  See TProofDraw::SlaveTerminate(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Notify () ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawEventList.html:75,Guid,Guide,75,doc/master/classTProofDrawEventList.html,https://root.cern,https://root.cern/doc/master/classTProofDrawEventList.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawGraph Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawGraph Class Reference. . Definition at line 203 of file TProofDraw.h. Public Member Functions;  TProofDrawGraph ();  ; void Init (TTree *tree) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawGraph.html:71,Guid,Guide,71,doc/master/classTProofDrawGraph.html,https://root.cern,https://root.cern/doc/master/classTProofDrawGraph.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TProofDrawHist Class Reference. . Definition at line 97 of file TProofDraw.h. Public Member Functions;  TProofDrawHist ();  ; void Begin (TTree *t) override;  See TProofDraw::Begin(). ;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawHist.html:70,Guid,Guide,70,doc/master/classTProofDrawHist.html,https://root.cern,https://root.cern/doc/master/classTProofDrawHist.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawListOfGraphs Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawListOfGraphs Class Reference. . Definition at line 257 of file TProofDraw.h. Classes; struct  Point3D_t;  . Public Member Functions;  TProofDrawListOfGraphs ();  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; void Init (TTree *) override;  Init the tree. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the interna",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfGraphs.html:78,Guid,Guide,78,doc/master/classTProofDrawListOfGraphs.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfGraphs.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawListOfPolyMarkers3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawListOfPolyMarkers3D Class Reference. . Definition at line 281 of file TProofDraw.h. Classes; struct  Point4D_t;  . Public Member Functions;  TProofDrawListOfPolyMarkers3D ();  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; void Init (TTree *) override;  Init the tree. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html:85,Guid,Guide,85,doc/master/classTProofDrawListOfPolyMarkers3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawListOfPolyMarkers3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawPolyMarker3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawPolyMarker3D Class Reference. . Definition at line 221 of file TProofDraw.h. Public Member Functions;  TProofDrawPolyMarker3D ();  ; void Init (TTree *tree) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; void Begin (TTree *) override;  Executed by the client before processing. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawPolyMarker3D.html:78,Guid,Guide,78,doc/master/classTProofDrawPolyMarker3D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawPolyMarker3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawProfile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawProfile Class Reference. . Definition at line 165 of file TProofDraw.h. Public Member Functions;  TProofDrawProfile ();  ; void Begin (TTree *t) override;  See TProofDraw::Begin(). ;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; bool Noti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawProfile.html:73,Guid,Guide,73,doc/master/classTProofDrawProfile.html,https://root.cern,https://root.cern/doc/master/classTProofDrawProfile.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofDrawProfile2D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofDrawProfile2D Class Reference. . Definition at line 184 of file TProofDraw.h. Public Member Functions;  TProofDrawProfile2D ();  ; void Begin (TTree *t) override;  See TProofDraw::Begin(). ;  ; void Init (TTree *) override;  See TProofDraw::Init(). ;  ; TClass * IsA () const override;  ; void SlaveBegin (TTree *) override;  See TProofDraw::SlaveBegin(). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  See TProofDraw::Terminate(). ;  ;  Public Member Functions inherited from TProofDraw;  TProofDraw ();  Constructor. ;  ;  ~TProofDraw () override;  Destructor. ;  ; Bool_t Notify () override;  Called when a new tree is loaded. ;  ; Bool_t Process (Long64_t) override;  Executed for each entry. ;  ; void SlaveTerminate () override;  Executed by each slave after the processing has finished, before returning the results to the client. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; int Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual TList * GetOutputList () const;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; TClass * IsA () const override;  ; boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofDrawProfile2D.html:75,Guid,Guide,75,doc/master/classTProofDrawProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProofDrawProfile2D.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofInputHandler Class Reference. . Definition at line 198 of file TProof.h. Public Member Functions;  TProofInputHandler (TProof *p, TSocket *s);  Constructor. ;  ; Bool_t Notify () override;  Handle input. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofInputHandler.html:74,Guid,Guide,74,doc/master/classTProofInputHandler.html,https://root.cern,https://root.cern/doc/master/classTProofInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofInterruptHandler Class Reference. . Definition at line 185 of file TProof.h. Public Member Functions;  TProofInterruptHandler (TProof *p);  ; Bool_t Notify () override;  TProof interrupt handler. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofInterruptHandler.html:78,Guid,Guide,78,doc/master/classTProofInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTProofInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofLimitsFinder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TProofLimitsFinder Class ReferencePROOF » PROOF kernel Libraries. ; Class to find axis limits and synchronize them between workers. ; Definition at line 28 of file TProofLimitsFinder.h. Public Member Functions;  TProofLimitsFinder ();  ;  ~TProofLimitsFinder () override;  ; Int_t FindGoodLimits (TH1 *h, Axis_t xmin, Axis_t xmax) override;  Find good limits. ;  ; Int_t FindGoodLimits (TH1 *h, Axis_t xmin, Axis_t xmax, Axis_t ymin, Axis_t ymax) override;  Find good limits. ;  ; Int_t FindGoodLimits (TH1 *h, Axis_t xmin, Axis_t xmax, Axis_t ymin, Axis_t ymax, Axis_t zmin, Axis_t zmax) override;  Find good limits. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from THLimitsFinder;  THLimitsFinder ();  ;  ~THLimitsFinder () override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLimitsFinder.html:74,Guid,Guide,74,doc/master/classTProofLimitsFinder.html,https://root.cern,https://root.cern/doc/master/classTProofLimitsFinder.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofLite Class ReferencePROOF » PROOF kernel Libraries. ; This class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets. ; By default the number of workers started is NumberOfCores+1; a different number can be forced on construction. ; Definition at line 40 of file TProofLite.h. Public Member Functions;  TProofLite (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Create a PROOF environment. ;  ;  ~TProofLite () override;  Destructor. ;  ; Bool_t CancelStagingDataSet (const char *dataset) override;  Cancels a dataset staging request. ;  ; void ClearCache (const char *file=0) override;  Remove files from all file caches. ;  ; void ClearDataSetCache (const char *dataset=0) override;  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; Long64_t DrawSelect (TDSet *dset, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Execute the specified drawing action on a data set (TDSet). ;  ; Bool_t ExistsDataSet (const char *uri) override;  Returns kTRUE if 'dataset' described by 'uri' exists, kFALSE otherwise. ;  ; TFileCollection * GetDataSet (const char *uri, const char *=0) override;  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSets (const char *uri="""", const char *=0) override;  lists all datasets that match given uri ;  ; TList * GetListOfQueries (Option_t *opt="""") override;  Get the list of queries. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:66,Guid,Guide,66,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofLockPath Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofLockPath Class Reference. . Definition at line 349 of file TProofServ.h. Public Member Functions;  TProofLockPath (const char *path);  ;  ~TProofLockPath () override;  ; Bool_t IsLocked () const;  ; Int_t Lock ();  Locks the directory. ;  ; Int_t Unlock ();  Unlock the directory. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLockPath.html:70,Guid,Guide,70,doc/master/classTProofLockPath.html,https://root.cern,https://root.cern/doc/master/classTProofLockPath.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofLog Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of the PROOF session log handler. ; Definition at line 32 of file TProofLog.h. Public Types; enum  ELogLocationBit { kLogToBox = (1ULL << ( 16 )); };  ; enum  ERetrieveOpt { kLeading = 0x1; , kTrailing = 0x2; , kAll = 0x3; , kGrep = 0x4; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofLog (const char *stag, const char *url, TProofMgr *mgr);  Constructor. ;  ;  ~TProofLog () override;  Destructor. ;  ; void Display (const char *ord=""*"", Int_t from=-10, Int_t to=-1);  Display the content associated with worker 'ord' from line 'from' to line 'to' inclusive. ;  ; TList * GetListOfLogs () const;  ; Int_t Grep (const char *txt, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t LogToBox ();  ; void Print (Option_t *opt=0) const override;  Print head info about the content. ;  ; void Prt (const char *what, Bool_t newline=kTRUE);  Special printing procedure. ;  ; Int_t Retrieve (const char *ord=""*"", TProofLog::ERetrieveOpt o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLog.html:65,Guid,Guide,65,doc/master/classTProofLog.html,https://root.cern,https://root.cern/doc/master/classTProofLog.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofLogElem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofLogElem Class Reference. . Definition at line 79 of file TProofLog.h. Public Member Functions;  TProofLogElem (const char *ord, const char *url, TProofLog *logger);  Constructor. ;  ;  ~TProofLogElem () override;  Destructor. ;  ; void Display (Int_t from=0, Int_t to=-1);  Display the current content starting from line 'from' to line 'to' inclusive. ;  ; TMacro * GetMacro () const;  ; const char * GetRole ();  ; Int_t Grep (const char *txt, TString &res, Int_t from=0);  Search lines containing 'txt', starting from line 'from'. ;  ; TClass * IsA () const override;  ; Bool_t IsMaster () const;  ; Bool_t IsSubMaster () const;  ; Bool_t IsWorker () const;  ; void Print (Option_t *opt=0) const override;  Print a line with the relevant info. ;  ; void Prt (const char *what);  Special printing procedure. ;  ; Int_t Retrieve (TProofLog::ERetrieveOpt opt=TProofLog::kTrailing, const char *pattern=0);  Retrieve the content of the associated file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLogElem.html:69,Guid,Guide,69,doc/master/classTProofLogElem.html,https://root.cern,https://root.cern/doc/master/classTProofLogElem.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofMgr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; List of all members ; TProofMgr Class ReferencePROOF » PROOF kernel Libraries. ; The PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity on the cluster. ; At most one manager instance per server is allowed. ; Definition at line 43 of file TProofMgr.h. Public Types; enum  EServType { kProofd = 0; , kXProofd = 1; , kProofLite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgr.html:65,Guid,Guide,65,doc/master/classTProofMgr.html,https://root.cern,https://root.cern/doc/master/classTProofMgr.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofMgrLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TProofMgrLite Class ReferencePROOF » PROOF kernel Libraries. ; Basic TProofMgr functionality implementation in the case of Lite session. ; Definition at line 27 of file TProofMgrLite.h. Public Member Functions;  TProofMgrLite (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the Lite environment. ;  ;  ~TProofMgrLite () override;  ; TProof * CreateSession (const char *=0, const char *=0, Int_t=-1) override;  Create a new session. ;  ; TProofLog * GetSessionLogs (Int_t ridx=0, const char *stag=0, const char *pattern=""-v | SvcMsg"", Bool_t rescan=kFALSE) override;  Get logs or log tails from last session associated with this manager instance. ;  ; TClass * IsA () const override;  ; TObjString * ReadBuffer (const char *file, const char *pattern) override;  Read lines containing 'pattern' in 'file'. ;  ; TObjString * ReadBuffer (const char *file, Long64_t ofs, Int_t len) override;  Read 'len' bytes from offset 'ofs' of the local file 'fin'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofMgr;  TProofMgr (const char *url, Int_t loglevel=-1, const char *alias="""");  Create a PROOF manager for the standard (old) environment. ;  ;  ~TProofMgr () override;  Destroy a TProofMgr instance. ;  ; virtual TProof * AttachSession (Int_t, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; virtual TProof * AttachSession (TProofDesc *, Bool_t=kFALSE);  Dummy version provided for completeness. ;  ; void Close ();  ; virtual Int_t Cp (const char *, const char *=0, const char *=0);  ; virtual void DetachSession (Int_t, Option_t *="""");  Detach session with 'id' from its proofserv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgrLite.html:69,Guid,Guide,69,doc/master/classTProofMgrLite.html,https://root.cern,https://root.cern/doc/master/classTProofMgrLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofMonSender Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; List of all members ; TProofMonSender Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Provides the interface for PROOF monitoring to different writers. ; Allows to decouple the information sent from the backend. ; Definition at line 30 of file TProofMonSender.h. Classes; class  TDSetPlet;  . Public Member Functions;  TProofMonSender (const char *n=""Abstract"", const char *t=""ProofMonSender"");  ;  ~TProofMonSender () override;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; virtual Int_t SendDataSetInfo (TDSet *, TList *, const char *, const char *)=0;  ; virtual Int_t SendFileInfo (TDSet *, TList *, const char *, const char *)=0;  ; virtual Int_t SendSummary (TList *, const char *)=0;  ; Int_t SetSendOptions (const char *);  Parse send options from string 'sendopts'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSender.html:71,Guid,Guide,71,doc/master/classTProofMonSender.html,https://root.cern,https://root.cern/doc/master/classTProofMonSender.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofMonSender::TDSetPlet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofMonSender::TDSetPlet Class Reference. . Definition at line 43 of file TProofMonSender.h. Public Member Functions;  TDSetPlet (const char *name, TDSet *ds=0);  ;  ~TDSetPlet () override;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSender_1_1TDSetPlet.html:82,Guid,Guide,82,doc/master/classTProofMonSender_1_1TDSetPlet.html,https://root.cern,https://root.cern/doc/master/classTProofMonSender_1_1TDSetPlet.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofMonSenderSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TProofMonSenderSQL Class ReferencePROOF » PROOF kernel Libraries. ; TProofMonSender implementation for the SQL writers. ; Definition at line 30 of file TProofMonSenderSQL.h. Public Member Functions;  TProofMonSenderSQL (const char *serv, const char *user, const char *pass, const char *table=""proof.proofquerylog"", const char *dstab=0, const char *filestab=0);  Main constructor. ;  ;  ~TProofMonSenderSQL () override;  Destructor. ;  ; TClass * IsA () const override;  ; Int_t SendDataSetInfo (TDSet *, TList *, const char *, const char *) override;  Post information about the processed dataset(s). ;  ; Int_t SendFileInfo (TDSet *, TList *, const char *, const char *) override;  Post information about the requested files. ;  ; Int_t SendSummary (TList *, const char *) override;  Send 'summary' record for the table 'proofquerylog'. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofMonSender;  TProofMonSender (const char *n=""Abstract"", const char *t=""ProofMonSender"");  ;  ~TProofMonSender () override;  ; Bool_t IsValid () const;  ; Int_t SetSendOptions (const char *);  Parse send options from string 'sendopts'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMonSenderSQL.html:74,Guid,Guide,74,doc/master/classTProofMonSenderSQL.html,https://root.cern,https://root.cern/doc/master/classTProofMonSenderSQL.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofNodeInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofNodeInfo Class ReferencePROOF » PROOF kernel Libraries. ; The purpose of this class is to provide a complete node description for masters, submasters and workers. ; Definition at line 32 of file TProofNodeInfo.h. Public Types; enum  ENodeType { kMaster; , kSubMaster; , kWorker; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofNodeInfo ();  Default constructor. ;  ;  TProofNodeInfo (const char *str);  Constructor from a string containing all the information in a serialized way. ;  ;  TProofNodeInfo (const TProofNodeInfo &nodeInfo);  Copy constructor. ;  ;  ~TProofNodeInfo () override;  ; void Assign (const TProofNodeInfo &n);  Asssign content of node n to this node. ;  ; const TString & GetConfig () const;  ; const TString & GetId () const;  ; const TString & GetImage () const;  ; const TString & GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const TString & GetNodeName () const;  ; ENodeType GetNodeType () const;  ; Int_t GetNWrks () const;  ; const TString & GetOrdinal () const;  ; Int_t GetPerfIndex () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofNodeInfo.html:70,Guid,Guide,70,doc/master/classTProofNodeInfo.html,https://root.cern,https://root.cern/doc/master/classTProofNodeInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofNodes Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofNodes Class ReferencePROOF » PROOF benchmark utilities. ; PROOF worker node information . Definition at line 28 of file TProofNodes.h. Public Member Functions;  TProofNodes (TProof *proof);  Constructor. ;  ;  ~TProofNodes () override;  Destructor. ;  ; Int_t ActivateWorkers (const char *workers);  Description: Activate the same number of workers on all nodes. ;  ; Int_t ActivateWorkers (Int_t nwrks);  Description: Activate 'nwrks' workers; calls TProof::SetParallel and rebuild the internal lists Input: number of workers Return: 0 is successful, <0 otherwise. ;  ; TMap * GetMapOfActiveNodes () const;  ; TMap * GetMapOfNodes () const;  ; Int_t GetMaxWrksPerNode () const;  ; Int_t GetMinWrksPerNode () const;  ; Int_t GetNActives () const;  ; Int_t GetNCores () const;  ; Int_t GetNNodes () const;  ; Int_t GetNWorkersCluster () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Description: Print node information. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofNodes.html:67,Guid,Guide,67,doc/master/classTProofNodes.html,https://root.cern,https://root.cern/doc/master/classTProofNodes.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofOutputFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofOutputFile Class ReferencePROOF » PROOF kernel Libraries. ; Class to steer the merging of files produced on the workers. ; Definition at line 33 of file TProofOutputFile.h. Public Types; enum  ERunType { kMerge = 1; , kDataset = 2; };  ; enum  EStatusBits { kOutputFileNameSet = (1ULL << ( 16 )); , kRetrieve = (1ULL << ( 17 )); , kSwapFile = (1ULL << ( 18 )); };  ; enum  ETypeOpt { ;   kRemote = 1; , kLocal = 2; , kCreate = 4; , kRegister = 8; , ;   kOverwrite = 16; , kVerify = 32. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofOutputFile ();  ;  TProofOutputFile (const char *path, const char *option=""M"", const char *dsname=0);  Constructor with the old signature, kept for convenience and backard compatibility. ;  ;  TProofOutputFile (const char *path, ERunType type, UInt_t opt=kRemote, const char *dsname=0);  Main constructor. ;  ;  ~TProofOutputFile () override;  Main destructor. ;  ; Int_t AdoptFile (TFile *f);  Adopt a file already open. ;  ; const char * GetDir (Bool_t raw=kFALSE) const;  ; TFileCollection * GetFileCollection ();  Get insta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:72,Guid,Guide,72,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofOutputList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofOutputList Class ReferencePROOF » PROOF kernel Libraries. ; Derivation of TList with an overload of ls() and Print() allowing to filter out some of the variables. ; Definition at line 26 of file TProofOutputList.h. Public Member Functions;  TProofOutputList (const char *dontshow=""PROOF_*"");  Constructor. ;  ;  ~TProofOutputList () override;  Destructor. ;  ; void AttachList (TList *alist);  Attach to list 'alist'. ;  ;  ClassDefOverride (TProofOutputList, 1);  ; TList * GetDontShowList ();  ; void ls (Option_t *option="""") const override;  List the content of the list. ;  ; void Print (Option_t *option, const char *wildcard, Int_t recurse=1) const override;  Print the collection header and its elements that match the wildcard. ;  ; void Print (Option_t *option, Int_t recurse) const override;  Print the collection header and its elements. ;  ; void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const override;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Print the content of the list. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputList.html:72,Guid,Guide,72,doc/master/classTProofOutputList.html,https://root.cern,https://root.cern/doc/master/classTProofOutputList.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPerfAnalysis Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofPerfAnalysis Class ReferencePROOF » PROOF benchmark utilities. ; Set of tools to analyse the performance tree. ; Definition at line 32 of file TProofPerfAnalysis.h. Classes; class  TFileInfo;  ; class  TPackInfo;  ; class  TWrkEntry;  ; class  TWrkInfo;  ; class  TWrkInfoFile;  . Public Member Functions;  TProofPerfAnalysis (const char *perffile, const char *title="""", const char *treename=""PROOF_PerfStats"");  Constructor: open the file and attach to the tree. ;  ;  TProofPerfAnalysis (TTree *tree, const char *title="""");  Constructor: open the file and attach to the tree. ;  ;  ~TProofPerfAnalysis () override;  Destructor: detach the tree and close the file. ;  ; void EventDist ();  Display event and packet distribution. ;  ; void FileDist (Bool_t writedet=kFALSE);  Analyse the file distribution. ;  ; void FileProcPlot (const char *fn, const char *out=0);  Show event processing or MB processing rate plot vs time. ;  ; void FileRatePlot (const char *fns=0);  Show MB processing rate plot per file vs time. ;  ; void GetAverages (Double_t &evtmax, Double_t &mbmax, Double_t &evt, Double_t &mb) const;  ; Double_t GetEvtRateAvg () const;  ; Double_t GetEvtRateAvgMax () const;  ; Double_t GetMBRateAvg () const;  ; Double_t GetMBRateAvgMax () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  ; void LatencyPlot (const char *wrks=0);  Show event processing or MB processing rate plot vs time Create the histograms. ;  ; void PrintFileInfo (const char *fn, const char *opt=""P"", const char *out=0);  Print information for file 'fn' (path including directory) or server 'fn'. ;  ; void PrintFileInfo (Int_t showlast=10, const char *opt="""", const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis.html:74,Guid,Guide,74,doc/master/classTProofPerfAnalysis.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPerfAnalysis::TFileInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofPerfAnalysis::TFileInfo Class Reference. . Definition at line 147 of file TProofPerfAnalysis.cxx. Public Member Functions;  TFileInfo (const char *name, const char *srv);  ;  ~TFileInfo () override;  ; Int_t Compare (const TObject *o) const override;  Compare abstract method. ;  ; void Print (Option_t *opt="""") const override;  This method must be overridden when a class wants to print itself. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TFileInfo.html:85,Guid,Guide,85,doc/master/classTProofPerfAnalysis_1_1TFileInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TFileInfo.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofPerfAnalysis::TPackInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofPerfAnalysis::TPackInfo Class Reference. . Definition at line 100 of file TProofPerfAnalysis.cxx. Public Member Functions;  TPackInfo (const char *ord, const char *host);  ;  TPackInfo (const char *ord, const char *host, Float_t start, Float_t stop, Long64_t sz, Double_t mbr);  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TPackInfo.html:85,Guid,Guide,85,doc/master/classTProofPerfAnalysis_1_1TPackInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TPackInfo.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofPerfAnalysis::TWrkEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofPerfAnalysis::TWrkEntry Class Reference. . Definition at line 135 of file TProofPerfAnalysis.cxx. Public Member Functions;  TWrkEntry (Double_t xx, Double_t er, Double_t mbr, Double_t pt);  ; void Print (Option_t *="""") const override;  This method must be overridden when a class wants to print itself. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to whi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html:85,Guid,Guide,85,doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkEntry.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPerfAnalysis::TWrkInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofPerfAnalysis::TWrkInfo Class Reference. . Definition at line 44 of file TProofPerfAnalysis.cxx. Public Member Functions;  TWrkInfo (const char *ord, const char *name);  ;  ~TWrkInfo () override;  ; Double_t AvgIO ();  ; Double_t AvgRate ();  ; Int_t Compare (const TObject *o) const override;  Compare two TNamed objects. ;  ; void Print (Option_t *="""") const override;  Print TNamed name and title. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Siz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html:84,Guid,Guide,84,doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfo.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofPerfAnalysis::TWrkInfoFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TProofPerfAnalysis::TWrkInfoFile Class Reference. . Definition at line 118 of file TProofPerfAnalysis.cxx. Public Member Functions;  TWrkInfoFile (const char *ord, const char *name);  ;  ~TWrkInfoFile () override;  ; void Print (Option_t *opt="""") const override;  Print TNamed name and title. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html:88,Guid,Guide,88,doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html,https://root.cern,https://root.cern/doc/master/classTProofPerfAnalysis_1_1TWrkInfoFile.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Attributes |; List of all members ; TProofPlayer Class ReferencePROOF » PROOF kernel Libraries. ; Internal class steering processing in PROOF. ; Instances of the TProofPlayer class are created on the worker nodes per session and do the processing. Instances of its subclass - TProofPlayerRemote are created per each query on the master(s) and on the client. On the master(s), TProofPlayerRemote coordinate processing, check the dataset, create the packetizer and take care of merging the results of the workers. The instance on the client collects information on the input (dataset and selector), it invokes the Begin() method and finalizes the query by calling Terminate(). ; Definition at line 60 of file TProofPlayer.h. Classes; class  TCleanup;  . Public Types; enum  EStatusBits { kDispatchOneEvent = (1ULL << ( 15 )); , kIsProcessing = (1ULL << ( 16 )); , kMaxProcTimeReached = (1ULL << ( 17 )); , kMaxProcTimeExtended = (1ULL << ( 18 )); };  ;  Public Types inherited from TVirtualProofPlayer; enum  EExitStatus { kFinished; , kStopped; , kAborted; };  ; enum  EStatusBits { kIsSubmerger = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:68,Guid,Guide,68,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPlayerLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TProofPlayerLite Class ReferencePROOF » PROOF kernel Libraries. ; Version of TProofPlayerRemote merges the functionality needed by clients and masters. ; It is used in optmized local sessions. ; Definition at line 28 of file TProofPlayerLite.h. Public Member Functions;  TProofPlayerLite (TProof *proof=0);  ;  ~TProofPlayerLite () override;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize a query. ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; TClass * IsA () const override;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF. ;  ; void StoreFeedback (TObject *slave, TList *out) override;  Store feedback results from the specified slave. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayerRemote;  TProofPlayerRemote (TProof *proof=0);  ;  ~TProofPlayerRemote () override;  Destructor. ;  ; void AddOutput (TList *out) override;  Incorporate the content of the received output list 'out' into the final output list fOutput. ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate the received object 'obj' into the output list fOutput. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:72,Guid,Guide,72,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPlayerLocal Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TProofPlayerLocal Class Reference. . Definition at line 234 of file TProofPlayer.h. Public Member Functions;  TProofPlayerLocal (Bool_t client=kTRUE);  ;  ~TProofPlayerLocal () override;  ; TClass * IsA () const override;  ; Bool_t IsClient () const override;  ; Long64_t Process (const char *selector, Long64_t nentries=-1, Option_t *option="""");  Process the specified TSelector file 'nentries' times. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF worker. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF worker with TSelector object The return value is -1 in case of error and TSelector::GetStatus() in case of success. ;  ; Long64_t Process (TSelector *selector, Long64_t nentries=-1, Option_t *option="""");  Process the specified TSelector object 'nentries' times. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:73,Guid,Guide,73,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPlayerRemote Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofPlayerRemote Class Reference. . Definition at line 279 of file TProofPlayer.h. Public Member Functions;  TProofPlayerRemote (TProof *proof=0);  ;  ~TProofPlayerRemote () override;  Destructor. ;  ; void AddOutput (TList *out) override;  Incorporate the content of the received output list 'out' into the final output list fOutput. ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate the received object 'obj' into the output list fOutput. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (support for TChain::Draw()). ;  ; void Feedback (TList *objs) override;  Feedback signal. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize the results of a query already processed. ;  ; TDSetElement * GetNextPacket (TSlave *slave, TMessage *r) override;  Get next packet for specified slave. ;  ; TVirtualPacketizer * GetPacketizer () const override;  ; TObject * HandleHistogram (TObject *obj, Bool_t &merged);  Low statistic histograms need a special treatment when using autobin. ;  ; Bool_t HistoSameAxis (TH1 *h0, TH1 *h1);  Return kTRUE is the histograms 'h0' and 'h1' have the same binning and ranges on the axis (i.e. ;  ; Int_t Incorporate (TObject *obj, TList *out, Bool_t &merged);  Incorporate object 'newobj' in the list 'outlist'. ;  ; TClass * IsA () const override;  ; Bool_t IsClient () const override;  Is the player running on the client? ;  ; Bool_t JoinProcess (TList *workers) override;  Prepares the given list of new workers to join ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:74,Guid,Guide,74,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,3,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,". ROOT: TProofPlayerSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofPlayerSlave Class Reference. . Definition at line 372 of file TProofPlayer.h. Public Member Functions;  TProofPlayerSlave (TSocket *socket=0);  ; void HandleGetTreeHeader (TMessage *mess) override;  Handle tree header request. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSlave.html:73,Guid,Guide,73,doc/master/classTProofPlayerSlave.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSlave.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofPlayerSuperMaster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TProofPlayerSuperMaster Class Reference. . Definition at line 395 of file TProofPlayer.h. Public Member Functions;  TProofPlayerSuperMaster (TProof *proof=0);  ;  ~TProofPlayerSuperMaster () override;  ; TClass * IsA () const override;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process specified TDSet on PROOF. ;  ; void Progress (Long64_t total, Long64_t processed) override;  Progress signal. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti) override;  Progress signal. ;  ; void Progress (TProofProgressInfo *pi) override;  Progress signal. ;  ; void Progress (TSlave *sl, Long64_t total, Long64_t processed) override;  Report progress. ;  ; void Progress (TSlave *sl, Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti) override;  Report progress. ;  ; void Progress (TSlave *sl, TProofProgressInfo *pi) override;  Progress signal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayerRemote;  TProofPlayerRemote (TProof *proof=0);  ;  ~TProofPlayerRemote () override;  Destructor. ;  ; void AddOutput (TList *out) override;  Incorporate the content of the received output list 'out' into the final output list fOutput. ;  ; Int_t AddOutput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:79,Guid,Guide,79,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofProgressInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TProofProgressInfo Class Reference. . Definition at line 161 of file TProof.h. Public Member Functions;  TProofProgressInfo (Long64_t tot=0, Long64_t proc=0, Long64_t bytes=0, Float_t initt=-1., Float_t proct=-1., Float_t evts=-1., Float_t mbs=-1., Int_t actw=0, Int_t tsess=0, Float_t esess=0.);  ;  ~TProofProgressInfo () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressInfo.html:74,Guid,Guide,74,doc/master/classTProofProgressInfo.html,https://root.cern,https://root.cern/doc/master/classTProofProgressInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofProgressLog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TProofProgressLog Class ReferenceGUI » Session Viewer. ; Dialog used to display Proof session logs from the Proof progress dialog. ; It uses TProofMgr::GetSessionLogs() mechanism internally ; Definition at line 31 of file TProofProgressLog.h. Public Member Functions;  TProofProgressLog (const char *url=nullptr, Int_t sessionidx=0, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  TProofProgressLog (TProofProgressDialog *d, Int_t w=700, Int_t h=600);  Create a window frame for log messages. ;  ;  ~TProofProgressLog () override;  Destructor. ;  ; void AddBuffer (const char *buffer);  Add text to the window. ;  ; void BuildLogList (Bool_t create=kFALSE);  Build the list of workers. ;  ; void Clear (Option_t *=nullptr) override;  Clear log window. ;  ; void CloseWindow () override;  Handle close button or when closed via window manager action. ;  ; void DoLog (Bool_t grep=kFALSE);  Display logs. ;  ; TClass * IsA () const override;  ; void LoadBuffer (const char *buffer);  Load a text buffer in the window. ;  ; void LoadFile (const char *file);  Load a file in the window. ;  ; void LogMessage (const char *msg, Bool_t all);  Load/append a log msg in the log frame, if open. ;  ; void NoLineEntry ();  Enable/disable the line number entry. ;  ; void Popup ();  Show log window. ;  ; void Rebuild ();  Rebuild the log info for a new entered session. ;  ; void SaveToFile ();  Save the logs to a file Only the name of the file is taken, no expansion. ;  ; void Select (Int_t id, Bool_t all=kTRUE);  actions of select all/clear all button ;  ; void SetGrepView ();  Sets the view of grep filters according to the value of checkboxes. ;  ; void SetUrl (const char *url);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressLog.html:73,Guid,Guide,73,doc/master/classTProofProgressLog.html,https://root.cern,https://root.cern/doc/master/classTProofProgressLog.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofProgressMemoryPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TProofProgressMemoryPlot Class ReferenceGUI » Session Viewer. ; This class implements a dialog, used to display the memory footprint on the proof workers and master. ; For the workers, memory is plotted as a function of number of events processed. For the master, it is plotted as a function of number of objects merged ; Definition at line 28 of file TProofProgressMemoryPlot.h. Public Member Functions;  TProofProgressMemoryPlot (TProofProgressDialog *d, Int_t w=700, Int_t h=300);  Main constructor. ;  ;  ~TProofProgressMemoryPlot () override;  Destructor. ;  ; void Clear (Option_t *=nullptr) override;  Clear the canvases. ;  ; void DoPlot ();  Draw the plot from the logs. ;  ; void Select (Int_t id);  actions of select all/clear all button ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") override;  Save the GUI transient frame widget in a C++ macro file. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressMemoryPlot.html:80,Guid,Guide,80,doc/master/classTProofProgressMemoryPlot.html,https://root.cern,https://root.cern/doc/master/classTProofProgressMemoryPlot.html,3,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TProofProgressStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TProofProgressStatus Class ReferencePROOF » PROOF kernel Libraries. ; Container class for processing statistics. ; Definition at line 25 of file TProofProgressStatus.h. Public Types; enum  EStatusBits { kFileNotOpen = (1ULL << ( 15 )); , kFileCorrupted = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofProgressStatus (Long64_t fEntries=0, Long64_t fBytesRead=0, Long64_t fReadCalls=0, Double_t fProcTime=0, Double_t fCPUTime=0);  Main and default constructor. ;  ; Long64_t GetBytesRead () const;  ; Double_t GetCPUTime () const;  ; Double_t GetCurrentRate () const;  Get current rate. Rteunr the average rate if the current is not defined. ;  ; Long64_t GetEntries () const;  ; Double_t GetLastUpdate () const;  ; Double_t GetLearnTime () const;  ; Double_t GetProcTime () const;  ; Double_t GetRate () const;  ; Long64_t GetReadCalls () const;  ; void IncBytesRead (Long64_t bytesRead);  ; void IncCPUTime (Double_t procTime);  ; void IncEntries (Long64_t entries=1);  ; void IncProcTime (Double_t procTime);  ; void IncReadCalls (Long64_t readCalls);  ; TClass * IsA () const over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressStatus.html:76,Guid,Guide,76,doc/master/classTProofProgressStatus.html,https://root.cern,https://root.cern/doc/master/classTProofProgressStatus.html,1,['Guid'],['Guide']
Usability,. ROOT: TProofQueryResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TProofQueryResult Class ReferencePROOF » PROOF kernel Libraries. ; TQueryResult version adapted to PROOF neeeds. ; Definition at line 28 of file TProofQueryResult.h. Public Member Functions;  TProofQueryResult ();  ;  ~TProofQueryResult () override;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQueryResult;  TQueryResult ();  ;  ~TQueryResult () override;  Destructor. ;  ; void Browse (TBrowser *b=nullptr) override;  To support browsing of the results. ;  ; Long64_t GetBytes () const;  ; TDatime GetEndTime () const;  ; Long64_t GetEntries () const;  ; Long64_t GetFirst () const;  ; Float_t GetInitTime () const;  ; TList * GetInputList ();  ; TObject * GetInputObject (const char *classname) const;  Return first instance of class 'classname' in the input list. ;  ; const char * GetLibList () const;  ; TMacro * GetLogFile () const;  ; Float_t GetMergeTime () const;  ; Int_t GetNumMergers () const;  ; Int_t GetNumWrks () const;  ; const char * GetOptions () const;  ; TList * GetOutputList ();  ; const char * GetParList () const;  ; Float_t GetPrepTime () const;  ; Float_t GetProcTime () const;  ; Float_t GetRecvTime () const;  ; const char * GetResultFile () const;  ; TMacro * GetSelecHdr () const;  ; TMacro * GetSelecImp () const;  ; Int_t GetSeqNum () const;  ; TDatime GetStartTime () const;  ; EQueryStatus GetStatus () const;  ; Float_t GetTermTime () const;  ; Float_t GetUsedCPU () const;  ; TClass * IsA () const override;  ; bool IsArchived () const;  ; virtual bool IsDone () const;  ; bool IsDraw () const;  ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofQueryResult.html:73,Guid,Guide,73,doc/master/classTProofQueryResult.html,https://root.cern,https://root.cern/doc/master/classTProofQueryResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofResources Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TProofResources Class Referenceabstract. . Definition at line 34 of file TProofResources.h. Public Member Functions;  TProofResources ();  ;  ~TProofResources () override;  ; virtual TProofNodeInfo * GetMaster ()=0;  ; virtual TList * GetSubmasters ()=0;  ; virtual TList * GetWorkers ()=0;  ; TClass * IsA () const override;  ; virtual Bool_t IsValid () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Comput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResources.html:71,Guid,Guide,71,doc/master/classTProofResources.html,https://root.cern,https://root.cern/doc/master/classTProofResources.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofResourcesStatic Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TProofResourcesStatic Class ReferencePROOF » PROOF kernel Libraries. ; The purpose of this class is to provide a standard interface to static config files. ; It interprets Proof config files (proof.conf) and sorts the contents into TProofNodeInfo objects. Master info will be placed in fMaster (of type TProofNodeInfo). Submaster info will be put in fSubmasterList (a TList of TProofNodeInfo objects), while workers (and condorworkers) will be placed in fWorkerList (a TList of TProofNodeInfo objects). ; Definition at line 37 of file TProofResourcesStatic.h. Public Types; enum  EInfoType { kNodeType; , kOption; , kHost; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofResourcesStatic ();  This ctor is used in TProofServ::Setup() in combination with GetWorkDir() for a quick scan of the config file to retrieve the work directory. ;  ;  TProofResourcesStatic (const char *confDir, const char *fileName);  Using this ctor will retrieve all information in the config file and store it in fMaster, fSubmasterList and fWorkerList, condorwo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofResourcesStatic.html:77,Guid,Guide,77,doc/master/classTProofResourcesStatic.html,https://root.cern,https://root.cern/doc/master/classTProofResourcesStatic.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServ Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TProofServ Class ReferencePROOF » PROOF kernel Libraries. ; Class providing the PROOF server. ; It can act either as the master server or as a slave server, depending on its startup arguments. It receives and handles message coming from the client or from the master server. ; Definition at line 66 of file TProofServ.h. Public Types; enum  EQueryAction { kQueryOK; , kQueryModify; , kQueryStop; , kQueryEnqueued; };  ; enum  EStatusBits { kHighMemory = (1ULL << ( 17 )); };  ;  Public Types inherited from TApplication; enum  EExitOnException { kDontExit; , kExit; , kAbort; };  ; enum  EFileBits { kExpression = (1ULL << ( 14 )); };  ; enum  EStatusBits { kProcessRemotely = (1ULL << ( 15 )); , kDefaultApplication = (1ULL << ( 16 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofServ (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServ () override;  Cleanup. ;  ; virtual Int_t CreateServer ();  Finalize the server setup. ;  ; virtual void DisableTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:66,Guid,Guide,66,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServInputHandler Class Reference. . Definition at line 216 of file TProofServ.cxx. Public Member Functions;  TProofServInputHandler (TProofServ *s, Int_t fd);  ; Bool_t Notify () override;  Handle this input. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServInputHandler.html:78,Guid,Guide,78,doc/master/classTProofServInputHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServInterruptHandler Class Reference. . Definition at line 173 of file TProofServ.cxx. Public Member Functions;  TProofServInterruptHandler (TProofServ *s);  ; Bool_t Notify () override;  Handle this interrupt. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServInterruptHandler.html:82,Guid,Guide,82,doc/master/classTProofServInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TProofServLite Class ReferencePROOF » PROOF kernel Libraries. ; Version of the PROOF worker server for local running. ; The client starts directly the desired number of these workers; the master and daemons are eliminated, optimizing the number of messages exchanged and created / destroyed. ; Definition at line 30 of file TProofServLite.h. Public Member Functions;  TProofServLite (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServLite () override;  Cleanup. ;  ; Int_t CreateServer () override;  Finalize the server setup. ;  ; void HandleFork (TMessage *mess) override;  Cloning itself via fork. ;  ; void HandleSigPipe () override;  Called when the client is not alive anymore; terminate the session. ;  ; void HandleTermination () override;  Called when the client is not alive anymore; terminate the session. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate (Int_t status) override;  Terminate the proof server. ;  ;  Public Member Functions inherited from TProofServ;  TProofServ (Int_t *argc, char **argv, FILE *flog=0);  Main constructor. ;  ;  ~TProofServ () override;  Cleanup. ;  ; virtual void DisableTimeout ();  ; virtual void EnableTimeout ();  ; void FlushLogFile ();  Reposition the read pointer in the log file to the very end. ;  ; TObject * Get (const char *namecycle);  Get object with name ""name;cycle"" (e.g. ;  ; Int_t GetActSessions () const;  ; const char * GetCacheDir () const;  ; TProofLockPath * GetCacheLock ();  ; const char * GetConfDir () const;  ; const char * GetConfFile () const;  ; Float_t GetCpuTime () cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLite.html:70,Guid,Guide,70,doc/master/classTProofServLite.html,https://root.cern,https://root.cern/doc/master/classTProofServLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLiteInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServLiteInputHandler Class Reference. . Definition at line 160 of file TProofServLite.cxx. Public Member Functions;  TProofServLiteInputHandler (TProofServLite *s, Int_t fd);  ; Bool_t Notify () override;  Handle input on the socket. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteInputHandler.html:82,Guid,Guide,82,doc/master/classTProofServLiteInputHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLiteInterruptHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServLiteInterruptHandler Class Reference. . Definition at line 72 of file TProofServLite.cxx. Public Member Functions;  TProofServLiteInterruptHandler (TProofServLite *s);  ; Bool_t Notify () override;  Handle urgent data. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteInterruptHandler.html:86,Guid,Guide,86,doc/master/classTProofServLiteInterruptHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteInterruptHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLiteSegViolationHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServLiteSegViolationHandler Class Reference. . Definition at line 137 of file TProofServLite.cxx. Public Member Functions;  TProofServLiteSegViolationHandler (TProofServLite *s);  ; Bool_t Notify () override;  Handle seg violation. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteSegViolationHandler.html:89,Guid,Guide,89,doc/master/classTProofServLiteSegViolationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteSegViolationHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLiteSigPipeHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServLiteSigPipeHandler Class Reference. . Definition at line 95 of file TProofServLite.cxx. Public Member Functions;  TProofServLiteSigPipeHandler (TProofServLite *s);  ; Bool_t Notify () override;  Handle sig pipe. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteSigPipeHandler.html:84,Guid,Guide,84,doc/master/classTProofServLiteSigPipeHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteSigPipeHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLiteTerminationHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServLiteTerminationHandler Class Reference. . Definition at line 115 of file TProofServLite.cxx. Public Member Functions;  TProofServLiteTerminationHandler (TProofServLite *s);  ; Bool_t Notify () override;  Handle termination. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void Abst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteTerminationHandler.html:88,Guid,Guide,88,doc/master/classTProofServLiteTerminationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteTerminationHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServLogHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TProofServLogHandler Class Reference. . Definition at line 375 of file TProofServ.h. Public Types; enum  EStatusBits { kFileIsPipe = (1ULL << ( 23 )); };  ;  Public Types inherited from TFileHandler; enum  { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TProofServLogHandler (const char *cmd, TSocket *s, const char *pfx="""");  Execute 'cmd' in a pipe and handle output messages from the related file. ;  ;  TProofServLogHandler (FILE *f, TSocket *s, const char *pfx="""");  Handle available message from the open file 'f'. ;  ;  ~TProofServLogHandler () override;  Handle available message in the open file. ;  ; Bool_t IsValid ();  ; Bool_t Notify () override;  Handle available message in the open file. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLogHandler.html:76,Guid,Guide,76,doc/master/classTProofServLogHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLogHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServSigPipeHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServSigPipeHandler Class Reference. . Definition at line 196 of file TProofServ.cxx. Public Member Functions;  TProofServSigPipeHandler (TProofServ *s);  ; Bool_t Notify () override;  Handle this signal. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServSigPipeHandler.html:80,Guid,Guide,80,doc/master/classTProofServSigPipeHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServSigPipeHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofServTerminationHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TProofServTerminationHandler Class Reference. . Definition at line 152 of file TProofServ.cxx. Public Member Functions;  TProofServTerminationHandler (TProofServ *s);  ; Bool_t Notify () override;  Handle this interrupt. ;  ;  Public Member Functions inherited from TSignalHandler;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServTerminationHandler.html:84,Guid,Guide,84,doc/master/classTProofServTerminationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServTerminationHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofSuperMaster Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Friends |; List of all members ; TProofSuperMaster Class ReferencePROOF » PROOF kernel Libraries. ; Implementation of TProof controlling PROOF federated clusters. ; Definition at line 33 of file TProofSuperMaster.h. Public Member Functions;  TProofSuperMaster (const char *masterurl, const char *conffile=kPROOF_ConfFile, const char *confdir=kPROOF_ConfDir, Int_t loglevel=0, const char *alias=0, TProofMgr *mgr=0);  Start super master PROOF session. ;  ;  ~TProofSuperMaster () override;  ; TClass * IsA () const override;  ; Long64_t Process (const char *dsname, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process a dataset which is stored on the master with name 'dsetname'. ;  ; Long64_t Process (const char *dsname, TSelector *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0, TObject *enl=0) override;  Process with name of dataset and TSelector object. ;  ; Long64_t Process (const char *sel, Long64_t nent, Option_t *o="""") override;  Generic (non-data based) selector processing: the Process() method of the specified selector (.C) or TSelector object is called 'n' times. ;  ; Long64_t Process (TDSet *set, const char *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector (.C) file. ;  ; Long64_t Process (TDSet *set, TSelector *selector, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Process a data set (TDSet) using the specified selector object. ;  ; Long64_t Process (TFileCollection *fc, const char *sel, Option_t *o="""", Long64_t nent=-1, Long64_t fst=0) override;  Process a data set (TFileCollection) using the specified selector (.C) file or TSelector object. ;  ; Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofSuperMaster.html:73,Guid,Guide,73,doc/master/classTProofSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofSuperMaster.html,1,['Guid'],['Guide']
Usability,". ROOT: TProofVectorContainer< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TProofVectorContainer< T > Class Template Reference. ; template<typename T>; class TProofVectorContainer< T >; Definition at line 239 of file TProofDraw.h. Public Member Functions;  TProofVectorContainer ();  ;  TProofVectorContainer (std::vector< T > *anVector);  ;  ~TProofVectorContainer () override;  ; std::vector< T > * GetVector () const;  ; TClass * IsA () const override;  ; Long64_t Merge (TCollection *list);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofVectorContainer.html:91,Guid,Guide,91,doc/master/classTProofVectorContainer.html,https://root.cern,https://root.cern/doc/master/classTProofVectorContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TProtoClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TProtoClass Class Reference. ; Persistent version of a TClass. ; Definition at line 38 of file TProtoClass.h. Classes; struct  TProtoRealData;  . Public Member Functions;  TProtoClass ();  ;  TProtoClass (TClass *cl);  Initialize a TProtoClass from a TClass. ;  ;  TProtoClass (TProtoClass *pc);  ; virtual ~TProtoClass ();  Destructor. ;  ; void Delete (Option_t *opt="""") override;  Delete the containers that are usually owned by their TClass. ;  ; Bool_t FillTClass (TClass *pcl);  Move data from this TProtoClass into cl. ;  ; TList * GetBaseList ();  ; std::vector< TDataMember * > & GetData ();  ; std::vector< TString > & GetDepClasses ();  ; TList * GetEnumList ();  ; const TList * GetListOfEnums ();  ; std::vector< TProtoRealData > & GetPRDList ();  ; int GetSize ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProtoClass.html:67,Guid,Guide,67,doc/master/classTProtoClass.html,https://root.cern,https://root.cern/doc/master/classTProtoClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TPyDispatcher Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TPyDispatcher Class Reference. . Definition at line 54 of file TPyDispatcher.h. Public Member Functions;  TPyDispatcher (const TPyDispatcher &);  Copy constructor. Applies python object reference counting. ;  ;  TPyDispatcher (PyObject *callable);  ;  ~TPyDispatcher ();  Destructor. Reference counting for the held python object is in effect. ;  ; PyObject * Dispatch ();  ; PyObject * Dispatch (Bool_t param);  ; PyObject * Dispatch (char *param);  ; PyObject * Dispatch (const char *msg, Bool_t all);  ; PyObject * Dispatch (const char *msg, Bool_t status, Int_t done, Int_t total);  ; PyObject * Dispatch (const char *name, const TList *attr);  ; PyObject * Dispatch (const char *param);  ; PyObject * Dispatch (const char *sel, Int_t sz, Long64_t fst, Long64_t ent);  ; PyObject * Dispatch (const char *text, Int_t len);  ; PyObject * Dispatch (Double_t param);  ; PyObject * Dispatch (Event_t *event);  ; PyObject * Dispatch (Event_t *event, ULong_t wid);  ; PyObject * Dispatch (Int_t event, Int_t x, Int_t y, TObject *selected);  ; PyObject * Dispatch (Int_t param);  ; PyObject * Dispatch (Int_t x, Int_t y);  ; PyObject * Dispatch (Long64_t param);  ; PyObject * Dispatch (Long64_t total, Long64_t processed);  ; PyObject * Dispatch (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  ; PyObject * Dispatch (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  ; PyObject * Dispatch (Long_t param);  ; PyObject * Dispatch (TEveDigitSet *qs, Int_t idx);  ; PyObject * Dispatch (TEveElement *el);  ; PyObject * Dispatch (TEveTrack *et);  ; PyObject * Dispatch (TEveWindow *window);  ; PyObject *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:69,Guid,Guide,69,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['Guid'],['Guide']
Usability,". ROOT: TPyReturn Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TPyReturn Class Reference. . Definition at line 30 of file TPyReturn.h. Public Member Functions;  TPyReturn ();  ;  TPyReturn (const TPyReturn &);  Copy constructor. Applies python object reference counting. ;  ;  TPyReturn (PyObject *pyobject);  Construct a TPyReturn from a python object. ;  ; virtual ~TPyReturn ();  Destructor. Reference counting for the held python object is in effect. ;  ; virtual TClass * IsA () const;  ;  operator char * () const;  ;  operator Char_t () const;  Cast python return value to C++ char (may fail). ;  ;  operator const char * () const;  Cast python return value to C-style string (may fail). ;  ;  operator Double_t () const;  Cast python return value to C++ double (may fail). ;  ;  operator Float_t () const;  ;  operator Int_t () const;  ;  operator Long_t () const;  Cast python return value to C++ long (may fail). ;  ;  operator PyObject * () const;  Direct return of the held PyObject; note the new reference. ;  ;  operator Short_t () const;  ; template<class T > ;  operator T* () const;  ;  operator UInt_t () const;  ;  operator ULong_t () const;  Cast python return value to C++ unsigned long (may fail). ;  ;  operator UShort_t () const;  ;  operator void * () const;  Cast python return value to ROOT object with dictionary (may fail; note that you have to use the void* converter, as CINT will not call any other). ;  ; TPyReturn & operator= (const TPyReturn &);  Assignment operator. Applies python object reference counting. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyReturn.html:65,Guid,Guide,65,doc/master/classTPyReturn.html,https://root.cern,https://root.cern/doc/master/classTPyReturn.html,1,['Guid'],['Guide']
Usability,". ROOT: TPython Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Static Public Member Functions |; Static Private Member Functions |; List of all members ; TPython Class Reference. ; Accessing the Python interpreter from C++. ; The TPython class allows for access to python objects from Cling. The current functionality is only basic: ROOT objects and builtin types can freely cross the boundary between the two interpreters, python objects can be instantiated and their methods can be called. All other cross-coding is based on strings that are run on the python interpreter.; Examples:; $ root -l; // Execute a string of python code.; root [0] TPython::Exec( ""print('Hello World!')"" );; Hello World!; ; // Create a TNamed on the python side, and transfer it back and forth.; root [1] std::any res1;; root [2] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed']('hello', '')"", &res1);; root [3] TPython::Bind(&std::any_cast<TNamed&>(res1), ""n"");; root [4] std::any res2;; root [5] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed*', 'TNamed*'](n)"", &res2);; root [6] (&std::any_cast<TNamed&>(res1) == std::any_cast<TNamed*>(res2)); (bool) true; ; // Variables can cross-over by using an `std::any` with a specific name.; root [6] TPython::Exec(""_anyresult = ROOT.std.make_any['Int_t'](1 + 1)"", &res1);; root [7] std::any_cast<int>(res1); (int) 2; TPython::Execstatic Bool_t Exec(const char *cmd, std::any *result=nullptr, std::string const &resultName=""_anyresult"")Executes a Python command within the current Python environment.Definition TPython.cxx:425; int; lTLine lDefinition textangle.C:4; And with a python file MyPyClass.py like this: print 'creating class MyPyClass ... '; ; class MyPyClass:; def __init__( self ):; print 'in MyPyClass.__init__'; ; def gime( self, what ):; return what; one can load a python module, and use the class. Casts are necessary as the type information can not be otherwise derived. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPython.html:63,Guid,Guide,63,doc/master/classTPython.html,https://root.cern,https://root.cern/doc/master/classTPython.html,1,['Guid'],['Guide']
Usability,". ROOT: TQClass Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TQClass Class Reference. . Definition at line 33 of file TQClass.h. Public Member Functions;  TQClass (const char *name, Version_t cversion, const std::type_info &info, TVirtualIsAProxy *isa, const char *dfil=nullptr, const char *ifil=nullptr, Int_t dl=0, Int_t il=0);  ; virtual ~TQClass ();  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TQObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:63,Guid,Guide,63,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,1,['Guid'],['Guide']
Usability,". ROOT: TQCommand Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TQCommand Class ReferenceCore ROOT classes » Base ROOT classes. ; The Command design pattern is based on the idea, that all editing in an application is done by creating instances of command objects. ; Command objects apply changes to the edited object and then are stored on a command stack. Furthermore, each command knows how to undo its changes to bring the edited object back to its previous state. As long as the application only uses command objects to change the state of the edited object, it is possible to undo a sequence of commands by traversing the command stack downwards and calling the ""undo"" method of each command in turn. It is also possible to redo a sequence of commands by traversing the command stack upwards and calling the ""redo"" method of each command.; Examples:. Create a new command TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");; TQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creati...Definition TQCommand.h:27. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color; ; com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; Color_tshort Color_tDefinition RtypesCore.h:85; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:65,Guid,Guide,65,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,4,"['Guid', 'undo']","['Guide', 'undo']"
Usability,". ROOT: TQConnection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TQConnection Class ReferenceCore ROOT classes » Base ROOT classes. ; TQConnection class is an internal class, used in the object communication mechanism. ; TQConnection:; is a list of signal_lists containing pointers to this connection; receiver is the object to which slot-method is applied . Definition at line 37 of file TQConnection.h. Public Member Functions;  TQConnection ();  ;  TQConnection (const char *class_name, void *receiver, const char *method_name);  TQConnection ctor. ;  ;  TQConnection (const TQConnection &con);  Copy constructor. Ignore connections to this TQConnections. ;  ;  TQConnection (TClass *cl, void *receiver, const char *method_name);  TQConnection ctor. ;  ; virtual ~TQConnection ();  TQConnection dtor. ;  ; void Destroyed () override;  Signal Destroyed tells that connection is destroyed. ;  ; void ExecuteMethod ();  Apply slot-method to the fReceiver object without arguments. ;  ; void ExecuteMethod (const char *params);  Apply slot-method to the fReceiver object and with string parameter. ;  ; template<typename... T> ; void ExecuteMethod (const T &... params);  ; void ExecuteMethod (Double_t param);  Apply slot-method to the fReceiver object with single argument value. ;  ; void ExecuteMethod (Int_t nargs, va_list va)=delete;  ; template<typename... T> ; void ExecuteMethod (Int_t, const T &... params);  ; void ExecuteMethod (Long64_t param);  Apply slot-method to the fReceiver object with single argument value. ;  ; void ExecuteMethod (Long_t param);  Apply slot-method to the fReceiver object with single argument value. ;  ; void ExecuteMethod (Longptr_t *params, Int_t nparam=-1);  Apply slot-method to the fReceiver object with variable number of argument values. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQConnection.html:68,Guid,Guide,68,doc/master/classTQConnection.html,https://root.cern,https://root.cern/doc/master/classTQConnection.html,1,['Guid'],['Guide']
Usability,". ROOT: TQConnectionList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TQConnectionList Class Reference. ; TQConnectionList is the named list of connections, see also TQConnection class. ; Definition at line 309 of file TQObject.cxx. Public Member Functions;  TQConnectionList (const char *name, Int_t nsigargs);  ; virtual ~TQConnectionList ();  Destructor. ;  ; Bool_t Disconnect (void *receiver=nullptr, const char *slot_name=nullptr);  Remove connection from the list. ;  ; Int_t GetNargs () const;  ; void ls (Option_t *option="""") const override;  List signal name and list all connections in this signal list. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQConnectionList.html:72,Guid,Guide,72,doc/master/classTQConnectionList.html,https://root.cern,https://root.cern/doc/master/classTQConnectionList.html,1,['Guid'],['Guide']
Usability,". ROOT: TQObjSender Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TQObjSender Class Reference. . Definition at line 233 of file TQObject.h. Public Member Functions;  TQObjSender ();  ; virtual ~TQObjSender ();  ; TClass * IsA () const override;  ; virtual void SetSender (void *sender);  ; void SetSenderClassName (const char *sclass="""");  ; void Streamer (TBuffer &) override;  Stream an object of class TQObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single parameter. ;  ; template<typename... T> ; void EmitVA (const char *signal_name, Int_t, const T &... params);  Emit a signal with a varying number of arguments. ;  ; TList * GetListOfClassSignals () const;  Returns pointer to list of signals of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQObjSender.html:67,Guid,Guide,67,doc/master/classTQObjSender.html,https://root.cern,https://root.cern/doc/master/classTQObjSender.html,1,['Guid'],['Guide']
Usability,". ROOT: TQObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TQObject Class ReferenceCore ROOT classes » Base ROOT classes. ; This is the ROOT implementation of the Qt object communication mechanism (see also http://www.troll.no/qt/metaobjects.html) ; Signals and slots are used for communication between objects. When an object has changed in some way that might be interesting for the outside world, it emits a signal to tell whoever is listening. All slots that are connected to this signal will be activated (called). It is even possible to connect a signal directly to another signal (this will emit the second signal immediately whenever the first is emitted.) There is no limitation on the number of slots that can be connected to a signal. The slots will be activated in the order they were connected to the signal. This mechanism allows objects to be easily reused, because the object that emits a signal does not need to know to which objects the signals are connected. Together, signals and slots make up a powerfull component programming mechanism. Signals; Destroyed(); TQObject::Destroyedvirtual void Destroyed()Definition TQObject.h:197; Signal emitted when object is destroyed. This signal could be connected to some garbage-collector object.; ChangedBy(const char *method_name); TQObject::ChangedByvirtual void ChangedBy(const char *method)Definition TQObject.h:199; This signal is emitted when some important data members of the object were changed. method_name parameter can be used as an identifier of the modifier method.; Message(const char *msg); TQObject::Messagevirtual void Message(const char *msg)Definition TQObject.h:201; General purpose message signal ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQObject.html:64,Guid,Guide,64,doc/master/classTQObject.html,https://root.cern,https://root.cern/doc/master/classTQObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TQSlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TQSlot Class Reference. ; Slightly modified TMethodCall class used in the object communication mechanism. ; Definition at line 45 of file TQConnection.cxx. Public Member Functions;  TQSlot (const char *class_name, const char *funcname);  Create the method invocation environment. ;  ;  TQSlot (TClass *cl, const char *method, const char *funcname);  Create the method invocation environment. ;  ; virtual ~TQSlot ();  TQSlot dtor. ;  ; Bool_t CheckSlot (Int_t nargs) const;  Return true if the method is valid and the number of arguments is acceptable. ;  ; void EndExecuting ();  Mark the slot as no longer executing and cleanup if need be. ;  ; void ExecuteMethod (void *object);  ExecuteMethod the method (with preset arguments) for the specified object. ;  ; void ExecuteMethod (void *object, const char *params);  ExecuteMethod the method for the specified object and text param. ;  ; void ExecuteMethod (void *object, Double_t param);  ExecuteMethod the method for the specified object and with single argument value. ;  ; void ExecuteMethod (void *object, Int_t nargs, va_list ap)=delete;  ; void ExecuteMethod (void *object, Long64_t param);  ExecuteMethod the method for the specified object and with single argument value. ;  ; void ExecuteMethod (void *object, Long_t param);  ExecuteMethod the method for the specified object and with single argument value. ;  ; void ExecuteMethod (void *object, Longptr_t *paramArr, Int_t nparam=-1);  ExecuteMethod the method for the specified object and with several argument values. ;  ; CallFunc_t * GetFunc () const;  ; Int_t GetMethodNargs ();  ; const char * GetName () const override;  Returns name of object. ;  ; Longptr_t GetOffset () const;  ; Bool_t IsExecuting () const;  ; void ls (Option_t *opt="""") const override;  The ls functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQSlot.html:62,Guid,Guide,62,doc/master/classTQSlot.html,https://root.cern,https://root.cern/doc/master/classTQSlot.html,1,['Guid'],['Guide']
Usability,". ROOT: TQUndoManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TQUndoManager Class Reference. ; Recorder of operations for undo and redo. ; Definition at line 103 of file TQCommand.h. Public Member Functions;  TQUndoManager ();  Constructor. ;  ; virtual ~TQUndoManager ();  Destructor. ;  ; void Add (TObject *obj) override;  ; void Add (TObject *obj, Option_t *opt) override;  Add command to the stack of commands. ;  ; Bool_t CanRedo () const override;  Returns kTRUE if redo action is possible. ;  ; Bool_t CanUndo () const override;  Returns kTRUE if undo action is possible. ;  ; virtual void CurrentChanged (TQCommand *c);  emit signal ;  ; TQCommand * GetCurrent () const;  Returns the last executed command. ;  ; TQCommand * GetCursor () const;  Returns a command correspondent to the current cursor position in stack. ;  ; UInt_t GetLimit () const;  Returns a maximum number of commands which could be located in stack. ;  ; TClass * IsA () const override;  ; Bool_t IsLogging () const;  Returns kTRUE if logging is ON. ;  ; void ls (Option_t *option="""") const override;  Lists all commands in stack. ;  ; void Redo (Option_t *option="""") override;  Performs redo action. Move cursor position forward in history stack. ;  ; virtual void SetLimit (UInt_t limit);  Returns a maximum number of commands which could be located in stack. ;  ; virtual void SetLogging (Bool_t on=kTRUE);  Start logging. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Undo (Option_t *option="""") override;  Performs undo action. Move cursor position backward in history stack. ;  ;  Public Member Functions inherited from TQCommand;  TQCommand (const char *cl=nullpt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:69,Guid,Guide,69,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,3,"['Guid', 'undo']","['Guide', 'undo']"
Usability,". ROOT: TQpDataBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Static Protected Member Functions |; List of all members ; TQpDataBase Class Referenceabstract. ; Data for the general QP formulation. ; The Data class stores the data defining the problem and provides methods for performing the operations with this data required by the interior-point algorithms. These operations include assembling the linear systems (5) or (7), performing matrix-vector operations with the data, calculating norms of the data, reading input into the data structure from various sources, generating random problem instances, and printing the data. ; Definition at line 60 of file TQpDataBase.h. Public Member Functions;  TQpDataBase ();  Default constructor. ;  ;  TQpDataBase (const TQpDataBase &another);  Copy constructor. ;  ;  TQpDataBase (Int_t nx, Int_t my, Int_t mz);  Constructor. ;  ;  ~TQpDataBase () override;  ; virtual void Amult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x)=0;  ; virtual void ATransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x)=0;  ; virtual void Cmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x)=0;  ; virtual void CTransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x)=0;  ; virtual Double_t DataNorm ()=0;  ; virtual void DataRandom (TVectorD &x, TVectorD &y, TVectorD &z, TVectorD &s)=0;  ; virtual TVectorD & GetBa ();  ; virtual void GetDiagonalOfQ (TVectorD &dQ)=0;  ; virtual TVectorD & GetG ();  ; virtual TVectorD & GetiSlowerBound ();  ; virtual TVectorD & GetiSupperBound ();  ; virtual TVectorD & GetiXlowerBound ();  ; virtual TVectorD & GetiXupperBound ();  ; virtual TVectorD & GetSlowerBound ();  ; virtual TVectorD & GetSupperBound ();  ; virtual TVectorD & GetXlowerBound ();  ; virtual TVectorD & GetXupperBound ();  ; virtual Double_t ObjectiveValue (TQpVar ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataBase.html:67,Guid,Guide,67,doc/master/classTQpDataBase.html,https://root.cern,https://root.cern/doc/master/classTQpDataBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpDataDens Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TQpDataDens Class Reference. ; Data for the dense QP formulation. ; Definition at line 62 of file TQpDataDens.h. Public Member Functions;  TQpDataDens ();  ;  TQpDataDens (const TQpDataDens &another);  Copy constructor. ;  ;  TQpDataDens (Int_t nx, Int_t my, Int_t mz);  Constructor. ;  ;  TQpDataDens (TVectorD &c, TMatrixDSym &Q, TVectorD &xlow, TVectorD &ixlow, TVectorD &xupp, TVectorD &ixupp, TMatrixD &A, TVectorD &bA, TMatrixD &C, TVectorD &clow, TVectorD &iclow, TVectorD &cupp, TVectorD &icupp);  Constructor. ;  ;  ~TQpDataDens () override;  ; void Amult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fA*x) ;  ; void ATransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fA^T*x) ;  ; void Cmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fC*x) ;  ; void CTransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fC^T*x) ;  ; Double_t DataNorm () override;  Return the largest component of several vectors in the data class. ;  ; void DataRandom (TVectorD &x, TVectorD &y, TVectorD &z, TVectorD &s) override;  Choose randomly a QP problem. ;  ; void GetDiagonalOfQ (TVectorD &dQ) override;  Return in vector dq the diagonal of matrix fQ (Quadratic part of Objective function) ;  ; Double_t ObjectiveValue (TQpVar *vars) override;  Return value of the objective function. ;  ; TQpDataDens & operator= (const TQpDataDens &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print all class members. ;  ; void PutAIntoAt (TMatrixDBase &M, Int_t row, Int_t col) override;  Insert the constraint matrix A into t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataDens.html:67,Guid,Guide,67,doc/master/classTQpDataDens.html,https://root.cern,https://root.cern/doc/master/classTQpDataDens.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpDataSparse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TQpDataSparse Class Reference. ; Data for the sparse QP formulation. ; Definition at line 59 of file TQpDataSparse.h. Public Member Functions;  TQpDataSparse ();  ;  TQpDataSparse (const TQpDataSparse &another);  Copy constructor. ;  ;  TQpDataSparse (Int_t nx, Int_t my, Int_t mz);  Constructor. ;  ;  TQpDataSparse (TVectorD &c, TMatrixDSparse &Q, TVectorD &xlow, TVectorD &ixlow, TVectorD &xupp, TVectorD &ixupp, TMatrixDSparse &A, TVectorD &bA, TMatrixDSparse &C, TVectorD &clow, TVectorD &iclow, TVectorD &cupp, TVectorD &icupp);  Constructor. ;  ;  ~TQpDataSparse () override;  ; void Amult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fA*x) ;  ; void ATransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fA^T*x) ;  ; void Cmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fC*x) ;  ; void CTransmult (Double_t beta, TVectorD &y, Double_t alpha, const TVectorD &x) override;  calculate y = beta*y + alpha*(fC^T*x) ;  ; Double_t DataNorm () override;  Return the largest component of several vectors in the data class. ;  ; void DataRandom (TVectorD &x, TVectorD &y, TVectorD &z, TVectorD &s) override;  Choose randomly a QP problem. ;  ; void GetDiagonalOfQ (TVectorD &dQ) override;  Return in vector dq the diagonal of matrix fQ. ;  ; Double_t ObjectiveValue (TQpVar *vars) override;  Return value of the objective function. ;  ; TQpDataSparse & operator= (const TQpDataSparse &source);  Assignment operator. ;  ; void Print (Option_t *opt="""") const override;  Print class members. ;  ; void PutAIntoAt (TMatrixDBase &M, Int_t row, Int_t col) override;  Insert the constraint matrix A into the m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpDataSparse.html:69,Guid,Guide,69,doc/master/classTQpDataSparse.html,https://root.cern,https://root.cern/doc/master/classTQpDataSparse.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpLinSolverBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TQpLinSolverBase Class Referenceabstract. ; Implementation of main solver for linear systems. ; Definition at line 66 of file TQpLinSolverBase.h. Public Member Functions;  TQpLinSolverBase ();  Default constructor. ;  ;  TQpLinSolverBase (const TQpLinSolverBase &another);  Copy constructor. ;  ;  TQpLinSolverBase (TQpProbBase *factory, TQpDataBase *data);  Constructor. ;  ;  ~TQpLinSolverBase () override;  ; virtual void ComputeDiagonals (TVectorD &dd, TVectorD &omega, TVectorD &t, TVectorD &lambda, TVectorD &u, TVectorD &pi, TVectorD &v, TVectorD &gamma, TVectorD &w, TVectorD &phi);  Computes the diagonal matrices in the augmented system from the current set of variables. ;  ; virtual void Factor (TQpDataBase *prob, TQpVar *vars);  Sets up the matrix for the main linear system in ""augmented system"" form. ;  ; virtual void JoinRHS (TVectorD &rhs, TVectorD &rhs1, TVectorD &rhs2, TVectorD &rhs3);  Assembles a single vector object from three given vectors . ;  ; TQpLinSolverBase & operator= (const TQpLinSolverBase &source);  Assignment operator. ;  ; virtual void PutXDiagonal (TVectorD &xdiag)=0;  ; virtual void PutZDiagonal (TVectorD &zdiag)=0;  ; virtual void SeparateVars (TVectorD &vars1, TVectorD &vars2, TVectorD &vars3, TVectorD &vars);  Extracts three component vectors from a given aggregated vector. ;  ; virtual void Solve (TQpDataBase *prob, TQpVar *vars, TQpResidual *resids, TQpVar *step);  Solves the system for a given set of residuals. ;  ; virtual void SolveCompressed (TVectorD &rhs)=0;  ; virtual void SolveXYZS (TVectorD &stepx, TVectorD &stepy, TVectorD &stepz, TVectorD &steps, TVectorD &ztemp, TQpDataBase *data);  Assemble right-hand side of augmented system and call SolveCompressed to solve it. ;  ;  Public Member Functions inherited from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpLinSolverBase.html:72,Guid,Guide,72,doc/master/classTQpLinSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpLinSolverBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpProbBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TQpProbBase Class Referenceabstract. ; default general problem formulation: ; minimize c' x + ( 1/2 ) x' * Q x ;; subject to A x = b ;; clo <= C x <= cup ;; xlo <= x <= xup ;. Definition at line 88 of file TQpProbBase.h. Public Member Functions;  TQpProbBase ();  Default constructor. ;  ;  TQpProbBase (const TQpProbBase &another);  Copy constructor. ;  ;  TQpProbBase (Int_t nx, Int_t my, Int_t mz);  Constructor. ;  ;  ~TQpProbBase () override;  ; virtual void JoinRHS (TVectorD &rhs_in, TVectorD &rhs1_in, TVectorD &rhs2_in, TVectorD &rhs3_in)=0;  ; virtual TQpDataBase * MakeData (TVectorD &c, TMatrixDBase &Q_in, TVectorD &xlo, TVectorD &ixlo, TVectorD &xup, TVectorD &ixup, TMatrixDBase &A_in, TVectorD &bA, TMatrixDBase &C_in, TVectorD &clo, TVectorD &iclo, TVectorD &cup, TVectorD &icup)=0;  ; virtual TQpLinSolverBase * MakeLinSys (const TQpDataBase *data)=0;  ; virtual TQpResidual * MakeResiduals (const TQpDataBase *data)=0;  ; virtual TQpVar * MakeVariables (const TQpDataBase *data)=0;  ; TQpProbBase & operator= (const TQpProbBase &source);  Assignment operator. ;  ; virtual void SeparateVars (TVectorD &x_in, TVectorD &y_in, TVectorD &z_in, TVectorD &vars_in)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpProbBase.html:67,Guid,Guide,67,doc/master/classTQpProbBase.html,https://root.cern,https://root.cern/doc/master/classTQpProbBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpResidual Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TQpResidual Class Reference. ; The Residuals class calculates and stores the quantities that appear on the right-hand side of the linear systems that arise at each interior-point iteration. ; These residuals can be partitioned into two fundamental categories: the components arising from the linear equations in the KKT conditions, and the components arising from the complementarity conditions. ; Definition at line 61 of file TQpResidual.h. Public Member Functions;  TQpResidual ();  Constructor. ;  ;  TQpResidual (const TQpResidual &another);  Copy constructor. ;  ;  TQpResidual (Int_t nx, Int_t my, Int_t mz, TVectorD &ixlow, TVectorD &ixupp, TVectorD &iclow, TVectorD &icupp);  Constructor. ;  ;  ~TQpResidual () override;  ; void Add_r3_xz_alpha (TQpVar *vars, Double_t alpha);  Modify the ""complementarity"" component of the residuals, by adding the pairwise products of the complementary variables plus a constant alpha to this term. ;  ; void CalcResids (TQpDataBase *problem, TQpVar *vars);  Calculate residuals, their norms, and duality complementarity gap, given a problem and variable set. ;  ; void Clear_r1r2 ();  set the noncomplementarity components of the residual (the terms arising from the linear equalities in the KKT conditions) to 0. ;  ; void Clear_r3 ();  set the complementarity component of the residuals to 0. ;  ; Double_t GetDualityGap ();  ; Double_t GetResidualNorm ();  ; TQpResidual & operator= (const TQpResidual &source);  Assignment operator. ;  ; void Project_r3 (Double_t rmin, Double_t rmax);  Perform the projection operation required by Gondzio algorithm: replace each component r3_i of the complementarity component of the residuals by r3p_i-r3_i, where r3p_i is the projection of r3_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpResidual.html:67,Guid,Guide,67,doc/master/classTQpResidual.html,https://root.cern,https://root.cern/doc/master/classTQpResidual.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpSolverBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Attributes |; List of all members ; TQpSolverBase Class Referenceabstract. ; The Solver class contains methods for monitoring and checking the convergence status of the algorithm, methods to determine the step length along a given direction, methods to define the starting point, and the solve method that implements the interior-point algorithm. ; Definition at line 72 of file TQpSolverBase.h. Public Member Functions;  TQpSolverBase ();  Default constructor. ;  ;  TQpSolverBase (const TQpSolverBase &another);  Copy constructor. ;  ;  ~TQpSolverBase () override;  Deconstructor. ;  ; Double_t DataNorm ();  ; virtual void DefMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level)=0;  ; virtual void DefStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Default starting point. ;  ; virtual Int_t DefStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Default status method. ;  ; virtual void DoMonitor (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Double_t alpha, Double_t sigma, Int_t i, Double_t mu, Int_t stop_code, Int_t level);  Monitor progress / convergence aat each interior-point iteration. ;  ; virtual Int_t DoStatus (TQpDataBase *data, TQpVar *vars, TQpResidual *resids, Int_t i, Double_t mu, Int_t level);  Tests for termination. ;  ; virtual void DumbStart (TQpProbBase *formulation, TQpVar *iterate, TQpDataBase *prob, TQpResidual *resid, TQpVar *step);  Alternative starting point heuristic: sets the ""complementary"" variables to a large positive value (based on the norm of the problem data) and the remaining variables to zero . ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpSolverBase.html:69,Guid,Guide,69,doc/master/classTQpSolverBase.html,https://root.cern,https://root.cern/doc/master/classTQpSolverBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TQpVar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; Static Protected Member Functions |; Protected Attributes |; List of all members ; TQpVar Class Reference. ; Class containing the variables for the general QP formulation. ; In terms of in our abstract problem formulation, these variables are the vectors x, y, z and s. ; Definition at line 59 of file TQpVar.h. Public Types; enum  EVarBlock { ;   kno_block; , kt_block; , klambda_block; , ku_block; , ;   kpi_block; , kv_block; , kgamma_block; , kw_block; , ;   kphi_block. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TQpVar ();  Default constructor. ;  ;  TQpVar (const TQpVar &another);  Copy constructor. ;  ;  TQpVar (Int_t nx, Int_t my, Int_t mz, TVectorD &ixlow, TVectorD &ixupp, TVectorD &iclow, TVectorD &icupp);  Constructor. ;  ;  TQpVar (TVectorD &x_in, TVectorD &s_in, TVectorD &y_in, TVectorD &z_in, TVectorD &v_in, TVectorD &gamma_in, TVectorD &w_in, TVectorD &phi_in, TVectorD &t_in, TVectorD &lambda_in, TVectorD &u_in, TVectorD &pi_in, TVectorD &ixlow_in, TVectorD &ixupp_in, TVectorD &iclow_in, TVectorD &icupp_in);  Constructor. ;  ;  ~TQpVar () override;  ; virtual Double_t FindBlocking (TQpVar *step, Double_t &primalValue, Double_t &primalStep, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:62,Guid,Guide,62,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['Guid'],['Guide']
Usability,". ROOT: TQt5Timer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TQt5Timer Class ReferenceWeb Display » QT5 Web Display. . Definition at line 70 of file rootqt5.cpp. Public Member Functions;  TQt5Timer (Long_t milliSec, Bool_t mode);  ; void Timeout () override;  timeout handler used to process all qt5 events in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Star",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQt5Timer.html:65,Guid,Guide,65,doc/master/classTQt5Timer.html,https://root.cern,https://root.cern/doc/master/classTQt5Timer.html,1,['Guid'],['Guide']
Usability,". ROOT: TQt6Timer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TQt6Timer Class ReferenceWeb Display » QT6 Web Display. . Definition at line 49 of file rootqt6.cpp. Public Member Functions;  TQt6Timer (Long_t milliSec, Bool_t mode);  ; void Timeout () override;  timeout handler used to process all qt6 events in main ROOT thread ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Star",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQt6Timer.html:65,Guid,Guide,65,doc/master/classTQt6Timer.html,https://root.cern,https://root.cern/doc/master/classTQt6Timer.html,1,['Guid'],['Guide']
Usability,". ROOT: TQuaternion Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TQuaternion Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TQuaternion is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TQuaternion might still be a valid solution. Consider using instead ROOT::Math::Quaternion.; Quaternion is a 4-component mathematic object quite convenient when dealing with space rotation (or reference frame transformation). ; In short, think of quaternion Q as a 3-vector augmented by a real number. \( Q = Q|_r + Q|_V \); Quaternion multiplication :; Quaternion multiplication is given by : ; \[; Q.Q' = (Q|_r + Q|_V )*( Q'|_r + Q'|_V) = [ Q|_r*Q'|_r - Q|_V*Q'|_V ] + [ Q|_r*Q'|_V + Q'|_r*Q|_V + Q|_V X Q'|_V ]; \]. where :; \( Q|_r*Q'|_r \) is a real number product of real numbers; \( Q|_V*Q'|_V \) is a real number, scalar product of two 3-vectors; \( Q|_r*Q'|_V \) is a 3-vector, scaling of a 3-vector by a real number; \( Q|_VXQ'|_V \) is a 3-vector, cross product of two 3-vectors. Thus, quaternion product is a generalization of real number product and product of a vector by a real number. Product of two pure vectors gives a quaternion whose real part is the opposite of scalar product and the vector part the cross product.; The conjugate of a quaternion \( Q = Q|r + Q|V \) is \( \bar{Q} = Q|r - Q|V \); The magnitude of a quaternion \( Q \) is given by \( |Q|^2 = Q.\bar{Q} = \bar{Q}.Q = Q^2|r + |Q|V|^2 \); Therefore, the inverse of a quaternion is \( Q-1 = \bar{Q} /|Q|^2 \); ""unit"" quaternion is a quaternion of magnitude 1 : \( |Q|^2 = 1. \) Unit quaternions are a subset of the quaternions set.; Quaternion and rotations :; A rotation of angle \( f \) around a given ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQuaternion.html:67,Guid,Guide,67,doc/master/classTQuaternion.html,https://root.cern,https://root.cern/doc/master/classTQuaternion.html,1,['Guid'],['Guide']
Usability,". ROOT: TQueryDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TQueryDescription Class Reference. . Definition at line 82 of file TSessionViewer.h. Public Types; enum  ESessionQueryStatus { ;   kSessionQueryAborted = 0; , kSessionQuerySubmitted; , kSessionQueryRunning; , kSessionQueryStopped; , ;   kSessionQueryCompleted; , kSessionQueryFinalized; , kSessionQueryCreated; , kSessionQueryFromProof. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse ob",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryDescription.html:73,Guid,Guide,73,doc/master/classTQueryDescription.html,https://root.cern,https://root.cern/doc/master/classTQueryDescription.html,1,['Guid'],['Guide']
Usability,". ROOT: TQueryResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TQueryResult Class ReferenceTree Library. ; A container class for query results. ; Definition at line 41 of file TQueryResult.h. Public Types; enum  EQueryStatus { ;   kAborted = 0; , kSubmitted; , kRunning; , kStopped; , ;   kCompleted. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TQueryResult ();  ;  ~TQueryResult () override;  Destructor. ;  ; void Browse (TBrowser *b=nullptr) override;  To support browsing of the results. ;  ; Long64_t GetBytes () const;  ; TDatime GetEndTime () const;  ; Long64_t GetEntries () const;  ; Long64_t GetFirst () const;  ; Float_t GetInitTime () const;  ; TList * GetInputList ();  ; TObject * GetInputObject (const char *classname) const;  Return first instance of class 'classname' in the input list. ;  ; const char * GetLibList () const;  ; TMacro * GetLogFile () const;  ; Float_t GetMergeTime () const;  ; Int_t GetNumMergers () const;  ; Int_t GetNumWrks () const;  ; const char * GetOptions () const;  ; TList * GetOutputList ();  ; const char * GetParList () const;  ; Float_t GetPrepTime () const;  ; Float_t GetProcTime ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResult.html:68,Guid,Guide,68,doc/master/classTQueryResult.html,https://root.cern,https://root.cern/doc/master/classTQueryResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TQueryResultManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TQueryResultManager Class ReferencePROOF » PROOF kernel Libraries. ; Class managing the query-result area. ; Definition at line 35 of file TQueryResultManager.h. Public Member Functions;  TQueryResultManager (const char *qdir, const char *stag, const char *sdir, TProofLockPath *lck, FILE *logfile=0);  Constructor. ;  ;  ~TQueryResultManager () override;  Cleanup. ;  ; Int_t ApplyMaxQueries (Int_t mxq);  Scan the queries directory and remove the oldest ones (and relative dirs, if empty) in such a way only 'mxq' queries are kept. ;  ; Int_t CleanupQueriesDir ();  Remove all queries results referring to previous sessions. ;  ; Int_t CleanupSession (const char *sessiontag);  Cleanup query dir qdir. ;  ; Int_t DrawQueries () const;  ; Bool_t FinalizeQuery (TProofQueryResult *pq, TProof *proof, TVirtualProofPlayer *player);  Final steps after Process() to complete the TQueryResult instance. ;  ; Float_t GetCpuTime ();  ; Float_t GetRealTime ();  ; void IncrementDrawQueries ();  ; void IncrementSeqNum ();  ; TClass * IsA () const override;  ; Int_t KeptQueries () const;  ; TProofQueryResult * LocateQuery (TString queryref, Int_t &qry, TString &qdir);  Locate query referenced by queryref. ;  ; Int_t LockSession (const char *sessiontag, TProofLockPath **lck);  Try locking query area of session tagged sessiontag. ;  ; TList * PreviousQueries () const;  ; TList * Queries () const;  ; const char * QueryDir () const;  ; void RemoveQuery (const char *queryref, TList *otherlist=0);  Remove everything about query queryref; if defined 'otherlist' will containe the list of removed pointers (already deleted) ;  ; void RemoveQuery (TQueryResult *qr, Bool_t soft=kFALSE);  Remove everything about query qr. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResultManager.html:75,Guid,Guide,75,doc/master/classTQueryResultManager.html,https://root.cern,https://root.cern/doc/master/classTQueryResultManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TROOT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TROOT Class ReferenceCore ROOT classes » Base ROOT classes. ; ROOT top level object description. ; The TROOT object is the entry point to the ROOT system. The single instance of TROOT is accessible via the global gROOT. Using the gROOT pointer one has access to basically every object created in a ROOT based program. The TROOT object is essentially a container of several lists pointing to the main ROOT objects.; The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; gROOT#define gROOTDefinition TROOT.h:406; The TROOT class provides also many useful services:; Get pointer to an object in any of the lists above; Time utilities TROOT::Time. The ROOT object must be created as a static object. An example of a main program creating an interactive version is shown below:. Example of a main program; #include ""TRint.h""; ; int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);; ; // Init Intrinsics, build all windows, and enter event loop; theApp->Run();; ; return(0);; }; mainint main()Definition Prototype.cxx:12; TRint.h; TRintDefinition TRint.h:31; TRint::Runvoid Run(Bool_t retr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTROOT.html:61,Guid,Guide,61,doc/master/classTROOT.html,https://root.cern,https://root.cern/doc/master/classTROOT.html,1,['Guid'],['Guide']
Usability,". ROOT: TROOT Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TROOT Class ReferenceCore ROOT classes » Base ROOT classes. ; ROOT top level object description. ; The TROOT object is the entry point to the ROOT system. The single instance of TROOT is accessible via the global gROOT. Using the gROOT pointer one has access to basically every object created in a ROOT based program. The TROOT object is essentially a container of several lists pointing to the main ROOT objects.; The following lists are accessible from gROOT object:; gROOT->GetListOfClasses; gROOT->GetListOfColors; gROOT->GetListOfTypes; gROOT->GetListOfGlobals; gROOT->GetListOfGlobalFunctions; gROOT->GetListOfFiles; gROOT->GetListOfMappedFiles; gROOT->GetListOfSockets; gROOT->GetListOfSecContexts; gROOT->GetListOfCanvases; gROOT->GetListOfStyles; gROOT->GetListOfFunctions; gROOT->GetListOfSpecials (for example graphical cuts); gROOT->GetListOfGeometries; gROOT->GetListOfBrowsers; gROOT->GetListOfCleanups; gROOT->GetListOfMessageHandlers; gROOT#define gROOTDefinition TROOT.h:406; exampleDefinition example.py:1; The TROOT class provides also many useful services:; Get pointer to an object in any of the lists above; Time utilities TROOT::Time. The ROOT object must be created as a static object. An example of a main program creating an interactive version is shown below:. Example of a main program; #include ""TRint.h""; ; int main(int argc, char **argv); {; TRint *theApp = new TRint(""ROOT example"", &argc, argv);; ; // Init Intrinsics, build all windows, and enter event loop; theApp->Run();; ; return(0);; }; mainint main()Definition Prototype.cxx:12; TRint.h; TRintDefinition TRint.h:31;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTROOT.html:60,Guid,Guide,60,doc/v632/classTROOT.html,https://root.cern,https://root.cern/doc/v632/classTROOT.html,1,['Guid'],['Guide']
Usability,". ROOT: TRWLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRWLock Class Reference. . Definition at line 31 of file TRWLock.h. Public Member Functions;  TRWLock ();  Create reader/write lock. ;  ; virtual ~TRWLock ();  ; TClass * IsA () const override;  ; Int_t ReadLock ();  Obtain a reader lock. Returns always 0. ;  ; Int_t ReadUnLock ();  Unlock reader lock. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t WriteLock ();  Obtain a writer lock. Returns always 0. ;  ; Int_t WriteUnLock ();  Unlock writer lock. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRWLock.html:63,Guid,Guide,63,doc/master/classTRWLock.html,https://root.cern,https://root.cern/doc/master/classTRWLock.html,1,['Guid'],['Guide']
Usability,". ROOT: TRadialGradient Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRadialGradient Class Reference. . Definition at line 124 of file TColorGradient.h. Public Types; enum  EGradientType { kSimple; , kExtended; };  ;  Public Types inherited from TColorGradient; enum  ECoordinateMode { kPadMode; , kObjectBoundingMode; };  ; typedef std::vector< Color_t >::size_type SizeType_t;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRadialGradient ();  ; const Point & GetCenter () const;  Get center. ;  ; const Point & GetEnd () const;  Get end. ;  ; EGradientType GetGradientType () const;  Get gradient type. ;  ; Double_t GetR1 () const;  ; Double_t GetR2 () const;  Get R2. ;  ; Double_t GetRadius () const;  Get radius. ;  ; const Point & GetStart () const;  Get start. ;  ; TClass * IsA () const override;  ; void SetRadialGradient (const Point &center, Double_t radius);  Set radial gradient. ;  ; void SetStartEndR1R2 (const Point &p1, Double_t r1, const Point &p2, Double_t r2);  Set start and end R1 and R2. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  TColorGradient ();  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRadialGradient.html:71,Guid,Guide,71,doc/master/classTRadialGradient.html,https://root.cern,https://root.cern/doc/master/classTRadialGradient.html,1,['Guid'],['Guide']
Usability,". ROOT: TRandom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRandom Class ReferenceMath » MathCore » Interface classes for Random number generation. ; This is the base class for the ROOT Random number generators. ; This class defines the ROOT Random number interface and it should not be instantiated directly but used via its derived classes. The generator provided in TRandom itself is a LCG (Linear Congruential Generator), the BSD rand generator, that it should not be used because its period is only 2**31, i.e. approximately 2 billion events, that can be generated in just few seconds.; To generate random numbers, one should use one of the derived classes, which are:; TRandom3: it is based on the ""Mersenne Twister generator"", it is fast and a very long period of about \(10^{6000}\). However it fails some of the most stringent tests of the TestU01 suite. In addition this generator provide only numbers with 32 random bits, which might be not sufficient for some application based on double or extended precision. This generator is however used in ROOT used to instantiate the global pointer to the ROOT generator, gRandom.; TRandomRanluxpp : New implementation of the Ranlux generator algorithm based on a fast modular multiplication of 576 bits. This new implementation is built on the idea and the original code of Alexei Sibidanov, described in his paper . It generates random numbers with 52 bit precision (double precision) and it has an higher luxury level than the original Ranlux generator (p = 2048 instead of p=794).; TRandomMixMax: Generator based on the family of the MIXMAX matrix generators (see the MIXMAX HEPFORGE Web page and the documentation of the class ROOT::Math::MixMaxEngine for more information), that are base on the Asanov dynamical C systems. This generator has a state of N=240",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:63,Guid,Guide,63,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['Guid'],['Guide']
Usability,". ROOT: TRandom1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TRandom1 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; The Ranlux Random number generator class. ; The algorithm for this random engine has been taken from the original implementation in FORTRAN by Fred James as part of CLHEP.; The initialisation is carried out using a Multiplicative Congruential generator using formula constants of L'Ecuyer as described in ""F.James,; Comp. Phys. Comm. 60 (1990) 329-344"". ; Definition at line 27 of file TRandom1.h. Public Member Functions;  TRandom1 ();  Default constructor. ;  ;  TRandom1 (Int_t rowIndex, Int_t colIndex, Int_t lux);  Constructor. ;  ;  TRandom1 (UInt_t seed, Int_t lux=3);  Luxury level is set in the same way as the original FORTRAN routine. ;  ;  ~TRandom1 () override;  Destructor. ;  ; virtual Int_t GetLuxury () const;  Returns current luxury value. ;  ; UInt_t GetSeed () const override;  Returns the current seed (first element of the seed table) ;  ; const UInt_t * GetTheSeeds () const;  Returns the pointer to the current seeds array. ;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; Double_t Rndm () override;  Returns a random number in ]0,1]. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t size, Double_t *vect) override;  Returns an array of random numbers in ]0,1[. ;  ; void RndmArray (Int_t size, Float_t *vect) override;  Returns an array of random numbers in ]0,1]. ;  ; void SetSeed (ULong_t seed) override;  Set the state of the generator providing a single seed value and using the luxury level defined when constructing the class. ;  ; virtual void SetSeed2 (UInt_t seed, Int_t lux=3);  Set the state of the generator provid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom1.html:64,Guid,Guide,64,doc/master/classTRandom1.html,https://root.cern,https://root.cern/doc/master/classTRandom1.html,1,['Guid'],['Guide']
Usability,". ROOT: TRandom2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRandom2 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on the maximally quidistributed combined Tausworthe generator by L'Ecuyer. ; The period of the generator is 2**88 (about 10**26) and it uses only 3 words for the state.; For more information see: P. L'Ecuyer, Mathematics of Computation, 65, 213 (1996) P. L'Ecuyer, Mathematics of Computation, 68, 225 (1999); The publications are available online at [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme.ps] [http://www.iro.umontreal.ca/~lecuyer/myftp/papers/tausme2.ps] ; Definition at line 27 of file TRandom2.h. Public Member Functions;  TRandom2 (UInt_t seed=1);  Default constructor. ;  ;  ~TRandom2 () override;  Default destructor. ;  ; UInt_t GetSeed () const override;  Returns one of the seeds of the generator. ;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  TausWorth generator from L'Ecuyer, uses as seed 3x32bits integers Use a mask of 0xffffffffUL to make in work on 64 bit machines Periodicity of about 10**26 Generate number in interval (0,1) : 0 and 1 are not included in the interval. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void SetSeed (ULong_t seed=0) override;  Set the generator seed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Funct",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom2.html:64,Guid,Guide,64,doc/master/classTRandom2.html,https://root.cern,https://root.cern/doc/master/classTRandom2.html,1,['Guid'],['Guide']
Usability,". ROOT: TRandom3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRandom3 Class ReferenceMath » MathCore » Interface classes for Random number generation. ; Random number generator class based on M. ; Matsumoto and T. Nishimura, Mersenne Twister: A 623-diminsionally equidistributed uniform pseudorandom number generator ACM Transactions on Modeling and Computer Simulation, Vol. 8, No. 1, January 1998, pp 3–30.; For more information see the Mersenne Twister homepage [http://www.math.keio.ac.jp/~matumoto/emt.html]; Advantage:. large period 2**19937 -1; relatively fast (slightly slower than TRandom2 but much faster than TRandom1). Drawback:; a relative large internal state of 624 integers; generate only 32 random bits; not passing all the random generator tests. It fails some tests in TestU01 (see [http://simul.iro.umontreal.ca/testu01/tu01.html]). An altenativly excellent generator passing all tests of TestU01, having 61 random bits and fast as Mersenne and Twister is MIXMAX (TRandomMixMax). ; Definition at line 27 of file TRandom3.h. Public Member Functions;  TRandom3 (UInt_t seed=4357);  Default constructor If seed is 0, the seed is automatically computed via a TUUID object. ;  ;  ~TRandom3 () override;  Default destructor. ;  ; UInt_t GetSeed () const override;  Return one element of the generator state used to generate the random numbers. ;  ; virtual const UInt_t * GetState () const;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom3.html:64,Guid,Guide,64,doc/master/classTRandom3.html,https://root.cern,https://root.cern/doc/master/classTRandom3.html,1,['Guid'],['Guide']
Usability,". ROOT: TRandomGen< Engine > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRandomGen< Engine > Class Template Reference. ; template<class Engine>; class TRandomGen< Engine >; Definition at line 48 of file TRandomGen.h. Public Member Functions;  TRandomGen (ULong_t seed=1);  ;  ~TRandomGen () override;  ; TClass * IsA () const override;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; Double_t Rndm () override;  Machine independent random number generator. ;  ; virtual Double_t Rndm (Int_t);  ; void RndmArray (Int_t n, Double_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void RndmArray (Int_t n, Float_t *array) override;  Return an array of n random numbers uniformly distributed in ]0,1]. ;  ; void SetSeed (ULong_t seed=0) override;  Set the random generator seed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRandom;  TRandom (UInt_t seed=65539);  Default constructor. For seed see SetSeed(). ;  ;  ~TRandom () override;  Default destructor. ;  ; virtual Int_t Binomial (Int_t ntot, Double_t prob);  Generates a random integer N according to the binomial law. ;  ; virtual Double_t BreitWigner (Double_t mean=0, Double_t gamma=1);  Return a number distributed following a BreitWigner function with mean and gamma. ;  ; virtual void Circle (Double_t &x, Double_t &y, Double_t r);  Generates random vectors, uniformly distributed over a circle of given radius. ;  ; virtual Double_t Exp (Double_t tau);  Returns an exponential deviate. ;  ; virtual Double_t Gaus (Double_t mean=0, Double_t sigma=1);  Samples a random number from the standard Normal (Gaussian) Distribution with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandomGen.html:85,Guid,Guide,85,doc/master/classTRandomGen.html,https://root.cern,https://root.cern/doc/master/classTRandomGen.html,1,['Guid'],['Guide']
Usability,". ROOT: TRatioPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; List of all members ; TRatioPlot Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Class for displaying ratios, differences and fit residuals. ; TRatioPlot has two constructors, one which accepts two histograms, and is responsible for setting up the calculation of ratios and differences. This calculation is in part delegated to TEfficiency. A single option can be given as a parameter, that is used to determine which procedure is chosen. The remaining option string is then passed through to the calculation, if applicable. The other constructor uses a fitted histogram to calculate the fit residual and plot it with the histogram and the fit function. Ratios and differences; The simplest case is passing two histograms without specifying any options. This defaults to using TGraphAsymmErrors::Divide. The option variable is passed through, as are the parameters c1 and c2, that you can set via TRatioPlot::SetC1 and TRatioPlot::SetC1. If you set the option to divsym the method TH1::Divide will be used instead, also receiving all the parameters.; Using the option diff or diffsig, both histograms will be subtracted, and in the case of diffsig, the difference will be divided by the uncertainty. c1 and c2 will only be used to scale the histograms using TH1::Scale prior to subtraction.; Available options are for option: . Option Description . divsym uses the histogram TH1::Divide method, yields symmetric errors . diff subtracts the histograms . diffsig subtracts the histograms and divides by the uncertainty . ; void ratioplot1() {; gStyle->SetOptStat(0);; auto C = new TCanvas(""C"", ""A ratio example"");; auto h1 = new TH1D(""h1"", ""TRatioPlot Example; x; y"", 50, 0, 10);; auto h2 = new ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRatioPlot.html:66,Guid,Guide,66,doc/master/classTRatioPlot.html,https://root.cern,https://root.cern/doc/master/classTRatioPlot.html,1,['Guid'],['Guide']
Usability,". ROOT: TRealData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRealData Class Reference. ; The TRealData class manages the effective list of all data members for a given class. ; For example for an object of class TLine that inherits from TObject and TAttLine, the TRealData object for a line contains the complete list of all data members of the 3 classes.; The list of TRealData members in TClass is built when functions like object.Inspect or object.DrawClass are called. ; Definition at line 30 of file TRealData.h. Public Types; enum  EStatusBits { kTransient = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRealData ();  RealData default constructor. ;  ;  TRealData (const char *name, Long_t offset, TDataMember *datamember);  Constructor to define one persistent data member. ;  ; virtual ~TRealData ();  RealData default destructor. ;  ; void AdoptStreamer (TMemberStreamer *p);  ; TDataMember * GetDataMember () const;  ; const char * GetName () const override;  Returns name of object. ;  ; TMemberStreamer * GetStreamer () const;  Return the associate streamer object. ;  ; Long_t GetThisOffset () const;  ; TClass * IsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRealData.html:65,Guid,Guide,65,doc/master/classTRealData.html,https://root.cern,https://root.cern/doc/master/classTRealData.html,1,['Guid'],['Guide']
Usability,". ROOT: TReaperTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TReaperTimer Class Reference. . Definition at line 429 of file TProofServ.h. Public Member Functions;  TReaperTimer (Long_t frequency=1000);  ;  ~TReaperTimer () override;  Destructor. ;  ; void AddPid (Int_t pid);  Add an entry for 'pid' in the internal list. ;  ; Bool_t Notify () override;  Check if any of the registered children has changed its state. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTReaperTimer.html:68,Guid,Guide,68,doc/master/classTReaperTimer.html,https://root.cern,https://root.cern/doc/master/classTReaperTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecCmdEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRecCmdEvent Class ReferenceGUI » Events recorder. ; Class used for storing information about 1 commandline event. ; It means 1 command typed in by user in the commandline, e.g 'new TCanvas'. ; Definition at line 91 of file TRecorder.h. Public Member Functions;  TRecCmdEvent ();  ; const char * GetText () const;  ; ERecEventType GetType () const override;  ; TClass * IsA () const override;  ; void ReplayEvent (Bool_t) override;  ; void SetText (const char *text);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRecEvent; virtual TTime GetTime () const;  ; TClass * IsA () const override;  ; virtual void SetTime (TTime t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecCmdEvent.html:68,Guid,Guide,68,doc/master/classTRecCmdEvent.html,https://root.cern,https://root.cern/doc/master/classTRecCmdEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRecEvent Class ReferenceabstractGUI » Events recorder. ; Abstract class that defines interface for a class storing information about 1 ROOT event. ; Time of event is stored and this event can be replayed. Classes TRecCmdEvent and TRecGuiEvent implements this interface for command line and GUI events respectively. ; Definition at line 48 of file TRecorder.h. Public Types; enum  ERecEventType { kCmdEvent; , kGuiEvent; , kExtraEvent; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual TTime GetTime () const;  ; virtual ERecEventType GetType () const =0;  ; TClass * IsA () const override;  ; virtual void ReplayEvent (Bool_t showMouseCursor=kTRUE)=0;  ; virtual void SetTime (TTime t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecEvent.html:65,Guid,Guide,65,doc/master/classTRecEvent.html,https://root.cern,https://root.cern/doc/master/classTRecEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecExtraEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRecExtraEvent Class ReferenceGUI » Events recorder. ; class TRecExtraEvent ; Class used for storing information about 1 extra event. It means 1 TPaveLabel or 1 TLatex event produced in the Canvas ; Definition at line 136 of file TRecorder.h. Public Member Functions;  TRecExtraEvent ();  ; TString GetText () const;  ; ERecEventType GetType () const override;  ; TClass * IsA () const override;  ; void ReplayEvent (Bool_t) override;  ; void SetText (TString text);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRecEvent; virtual TTime GetTime () const;  ; virtual void SetTime (TTime t);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facilit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecExtraEvent.html:70,Guid,Guide,70,doc/master/classTRecExtraEvent.html,https://root.cern,https://root.cern/doc/master/classTRecExtraEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecGuiEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TRecGuiEvent Class ReferenceGUI » Events recorder. ; class TRecGuiEvent ; Class used for storing information about 1 GUI event in ROOT. For list of possible GUI events see EGEventType. ; Definition at line 180 of file TRecorder.h. Public Types; enum  EConfigureNotifyType { kCNMove = 0; , kCNResize = 1; , kCNMoveResize = 2; , kCNFilter = 3; };  ; enum  ERootAtoms { kWM_DELETE_WINDOW = 10001; , kROOT_MESSAGE = 10002; };  ;  Public Types inherited from TRecEvent; enum  ERecEventType { kCmdEvent; , kGuiEvent; , kExtraEvent; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; ERecEventType GetType () const override;  ; TClass * IsA () const override;  ; void ReplayEvent (Bool_t showMouseCursor=kTRUE) override;  Replays stored GUI event. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRecEvent; virtual TTime GetTime () const;  ; virtual void SetTime (TTime t);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherite",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecGuiEvent.html:68,Guid,Guide,68,doc/master/classTRecGuiEvent.html,https://root.cern,https://root.cern/doc/master/classTRecGuiEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecWinPair Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TRecWinPair Class ReferenceGUI » Events recorder. ; Class used for storing of window IDs mapping. ; Remapping of window IDs is needed for replaying events.; ID of original window is stored in fKey.; ID of a new window is stored in fValue. Whenever an event is replayed, its referenced window ID is changed from original to a new one according to the appropriate mapping. ; Definition at line 249 of file TRecorder.h. Public Member Functions;  TRecWinPair (Window_t key, Window_t value);  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecWinPair.html:67,Guid,Guide,67,doc/master/classTRecWinPair.html,https://root.cern,https://root.cern/doc/master/classTRecWinPair.html,1,['Guid'],['Guide']
Usability,". ROOT: TRecorder Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRecorder Class ReferenceGUI » Events recorder. ; Class provides direct recorder/replayer interface for a user. ; See 'ROOT EVENT RECORDING SYSTEM' for more information about usage.; Implementation uses C++ design pattern State. Functionality of recorder is divided into 4 classes according to the current state of recorder.; Internally, there is a pointer to TRecorderState object. This object changes whenever state of recorder is changed. States of recorder are the following:. INACTIVE Implemented in TRecorderInactive class. Default state after TRecorder object is created.; RECORDING Implemented in TRecorderRecording class.; REPLAYING Implemented in TRecorderReplaying class.; PAUSED Implemented in TRecorderPause class. Pause of replaying. Every command for TRecorder is just passed to TRecordeState object. Depending on the current state of recorder, this command is passed to some of the above mentioned classes and if valid, handled there.; Switching between states is not possible from outside. States are switched directly by state objects via:; ChangeState(TRecorderState* newstate, Bool_t deletePreviousState);; When recorder is switched to a new state, the old state object is typically deleted. The only exception is switching from REPLAYING state to PAUSED state. The previous state (REPLAYING) is not deleted in order to be used again after TRecorder::Resume call. STATE TRANSITIONS:. INACTIVE -> RECORDING via TRecorder::Start (Starts recording); RECORDING -> INACTIVE via TRecorder::Stop (Stops recording); INACTIVE -> REPLAYING via TRecorder::Replay (Starts replaying); REPLAYING -> INACTIVE via TRecorder::ReplayStop (Stops r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:65,Guid,Guide,65,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Guid'],['Guide']
Usability,". ROOT: TRef Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TRef Class ReferenceCore ROOT classes » Base ROOT classes. ; Persistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject. ; This object can be used instead of normal C++ pointers in case. the referenced object R and the pointer P are not written to the same file; P is read before R; R and P are written to different Tree branches. When a top level object (eg Event *event) is a tree/graph of many objects, the normal ROOT Streaming mechanism ensures that only one copy of each object in the tree/graph is written to the output buffer to avoid circular dependencies.; However if the object event is split into several files or into several branches of one or more Trees, normal C++ pointers cannot be used because each I/O operation will write the referenced objects.; When a TRef is used to point to a TObject *robj, for example in a class with TRef fRef;; TRefPersistent Reference link to a TObject A TRef is a lightweight object pointing to any TObject.Definition TRef.h:32; one can do: fRef = robj; //to set the pointer; This TRef and robj can be written with two different I/O calls in the same or different files, in the same or different branches of a Tree.; If the TRef is read and the referenced object has not yet been read, the TRef will return a null pointer. As soon as the referenced object will be read, the TRef will point to it. If the referenced object is contained in a TTree it can be auto-loaded using the TBranchRef mechanism, which is set up by simply calling TTree::BranchRef().; TRef also supports the complex situation where a TFile is updated multiple times on the same machine or a different machine. How does it work; A TRef is itself a TObject with an ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRef.html:60,Guid,Guide,60,doc/master/classTRef.html,https://root.cern,https://root.cern/doc/master/classTRef.html,1,['Guid'],['Guide']
Usability,". ROOT: TRefArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Friends |; List of all members ; TRefArray Class ReferenceCore ROOT classes » Containers. ; An array of references to TObjects. ; The array expands automatically when objects are added (shrinking can be done by hand using Expand() ); The TRefArray can be filled with: array.Add(obj); array.AddAt(obj,i); but not array[i] = obj !!!; The array elements can be retrieved with: TObject *obj = array.At(i);; TObjectMother of all ROOT objects.Definition TObject.h:41; By default the TRefArray 'points' to the current process and can only receive object that have been created in this process. To point the TRefArray to a different process do: TRefArray array( processId );; TRefArrayAn array of references to TObjects.Definition TRefArray.h:33; For example, if 'obj' is an instance that was created in the different process and you do: TRefArray array( TProcessID::GetProcessWithUID( obj ) );; TProcessID::GetProcessWithUIDstatic TProcessID * GetProcessWithUID(const TObject *obj)static function returning a pointer to TProcessID with its pid encoded in the highest byte of obj->Ge...Definition TProcessID.cxx:297; Then array.Add(obj);; is correct (obj comes from the process the array is pointed to while TObject *nobj = new TObject;; array.Add(nobj);; TObject::TObjectTObject()TObject constructor.Definition TObject.h:254; is incorrect since 'nobj' was created in a different process than the one the array is pointed to. In this case you will see error message: Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefArray.html:65,Guid,Guide,65,doc/master/classTRefArray.html,https://root.cern,https://root.cern/doc/master/classTRefArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TRefTable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TRefTable Class ReferenceCore ROOT classes » Containers. ; A TRefTable maintains the association between a referenced object and the parent object supporting this referenced object. ; The parent object is typically a branch of a TTree. For each object referenced in a TTree entry, the corresponding entry in the TTree's TBranchRef::fRefTable contains the index of the branch that needs to be loaded to bring the object into memory.; Persistency of a TRefTable is split into two parts:; entry specific information is stored (read) by FillBuffer (ReadBuffer). For each referenced object the object's fUniqueID and the referencing TRef::fPID is stored (to allow the TRefTable to autoload references created by different processes).; non-entry specific, i.e. global information is stored (read) by the Streamer function. This comprises all members marked as persistent. As TObject::fUniqueID is only unique for a given TProcessID, a table of unique IDs is kept for each used TProcessID. There is no natural order of TProcessIDs, so TRefTable stores a vector of the TGUID of all known TProcessIDs in fProcessGUIDs; the index of a TProcessID in this vector defines the index of the auto-loading info in fParentIDs for that TProcessID. The mapping of TProcessID* to index is cached for quick non-persistent lookup. ; Definition at line 35 of file TRefTable.h. Public Types; enum  EStatusBits { kHaveWarnedReadingOld = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:65,Guid,Guide,65,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Guid'],['Guide']
Usability,". ROOT: TRegexp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TRegexp Class ReferenceCore ROOT classes » Base ROOT classes. ; Regular expression class. ; '^' // start-of-line anchor; '$' // end-of-line anchor; '.' // matches any character; '[' // start a character class; ']' // end a character class; '^' // negates character class if 1st character; '*' // Kleene closure (matches 0 or more); '+' // Positive closure (1 or more); '?' // Optional closure (0 or 1); Note that the '|' operator (union) is not supported, nor are parentheses (grouping). Therefore ""a|b"" does not match ""a"".; Standard classes like [:alnum:], [:alpha:], etc. are not supported, only [a-zA-Z], [^ntf] and so on.; Warning: The preferred way to use regular expressions is via std::regex. E.g., Index() functions may return incorrect result. ; Definition at line 31 of file TRegexp.h. Public Types; enum  EStatVal { kOK = 0; , kIllegal; , kNomem; , kToolong; };  . Public Member Functions;  TRegexp (const char *re, Bool_t wildcard=kFALSE);  Create a regular expression from the input string. ;  ;  TRegexp (const TRegexp &re);  Copy ctor. ;  ;  TRegexp (const TString &re);  Create a regular expression from a TString. ;  ; virtual ~TRegexp ();  Destructor. ;  ; Ssiz_t Index (const TString &str, Ssiz_t *len, Ssiz_t start=0) const;  Find the first occurrence of the regexp in string and return the position, or -1 if there is no match. ;  ; virtual TClass * IsA () const;  ; TRegexp & operator= (const char *re);  Assignment operator taking a char* and assigning it to a regexp. ;  ; TRegexp & operator= (const TRegexp &re);  Assignment operator. ;  ; TRegexp & operator= (const TString &re);  Assignment operator taking a TString. ;  ; EStatVal Status ();  Check status of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRegexp.html:63,Guid,Guide,63,doc/master/classTRegexp.html,https://root.cern,https://root.cern/doc/master/classTRegexp.html,1,['Guid'],['Guide']
Usability,". ROOT: TRemoteObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRemoteObject Class ReferenceCore ROOT classes » Base ROOT classes. ; The TRemoteObject class provides protocol for browsing ROOT objects from a remote ROOT session. ; It contains information on the real remote object as:. Object Properties (i.e. file stat if the object is a TSystemFile); Object Name; Class Name; TKey Object Name (if the remote object is a TKey); TKey Class Name (if the remote object is a TKey); Remote object address . Definition at line 34 of file TRemoteObject.h. Public Member Functions;  TRemoteObject ();  Create a remote object. ;  ;  TRemoteObject (const char *name, const char *title, const char *classname);  Create a remote object. ;  ; virtual ~TRemoteObject ();  Delete remote object. ;  ; TList * Browse ();  Browse OS system directories. ;  ; void Browse (TBrowser *b) override;  Browse remote object. ;  ; const char * GetClassName () const;  ; Bool_t GetFileStat (FileStat_t *sbuf);  Get remote file status. ;  ; const char * GetKeyClassName () const;  ; const char * GetKeyObjectName () const;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void SetFolder (Bool_t isFolder);  ; void SetKeyClassName (const char *name);  ; void SetKeyObjectName (const char *name);  ; void SetRemoteAddress (Longptr_t addr);  ; void Streamer (TBuffer &) override;  Remote object streamer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRemoteObject.html:69,Guid,Guide,69,doc/master/classTRemoteObject.html,https://root.cern,https://root.cern/doc/master/classTRemoteObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TRepeatTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TRepeatTimer Class Reference. . Definition at line 1866 of file TGNumberEntry.cxx. Public Member Functions;  TRepeatTimer (TGRepeatFireButton *button, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRepeatTimer.html:68,Guid,Guide,68,doc/master/classTRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTRepeatTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TRint Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRint Class Reference. . Definition at line 31 of file TRint.h. Public Member Functions;  TRint (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0, Bool_t noLogo=kFALSE, Bool_t exitOnUnknownArgs=kFALSE);  Create an application environment. ;  ; virtual ~TRint ();  Destructor. ;  ; TFileHandler * GetInputHandler ();  ; virtual char * GetPrompt ();  Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". ;  ; void HandleException (Int_t sig) override;  Handle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ;  ; Bool_t HandleTermInput () override;  Handle input coming from terminal. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; virtual void PrintLogo (Bool_t lite=kFALSE);  Print the ROOT logo on standard output. ;  ; void Run (Bool_t retrn=kFALSE) override;  Main application eventloop. ;  ; void SetEchoMode (Bool_t mode) override;  Set console mode: ;  ; virtual const char * SetPrompt (const char *newPrompt);  Set a new default prompt. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TabCompletionHook (char *buf, int *pLoc, std::ostream &out) override;  Forward tab completion request to our TTabCom::Hook(). ;  ; virtual void Terminate (int status) override;  Terminate the application. ;  ;  Public Member Functions inherited from TApplication;  TApplication (const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0);  Create an application environment. ;  ; virtual ~TApplication ();  TApplication dtor. ;  ; virtual const char * Applicat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:61,Guid,Guide,61,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['Guid'],['Guide']
Usability,". ROOT: TRobustEstimator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TRobustEstimator Class ReferenceMath » Legacy Physics Classes. ; NoteDespite being in the group of Legacy statistics classes, TRobustEstimator is still useful and no drop-in replacement exists for it.; Minimum Covariance Determinant Estimator - a Fast Algorithm invented by Peter J.Rousseeuw and Katrien Van Dreissen ""A Fast Algorithm for the Minimum covariance Determinant Estimator"" Technometrics, August 1999, Vol.41, NO.3; What are robust estimators? ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recognise them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected."" R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz ""Data Analysis Techniques for High-Energy Physics"", 2nd edition; What does this algorithm do? It computes a highly robust estimator of multivariate location and scatter. Then, it takes those estimates to compute robust distances of all the data vectors. Those with large robust distances are considered outliers. Robust distances can then be plotted for better visualization of the data.; How does this algorithm do it? The MCD objective is to find h observations(out of n) whose classical covariance matrix has the lowest determinant. The MCD estimator of location is then the average of those h points and the MCD estimate of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:72,Guid,Guide,72,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['Guid'],['Guide']
Usability,". ROOT: TRolke Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TRolke Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TRolke is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TRolke might still be a valid solution. Consider switching to RooStats.; This class computes confidence intervals for the rate of a Poisson process in the presence of uncertain background and/or efficiency. ; The treatment and the resulting limits are fully frequentist. The limit calculations make use of the profile likelihood method.; AuthorJan Conrad (CERN) 2004, Updated: Johan Lundberg (CERN) 2009; For a full list of methods and their syntax, and build instructions, consult the header file TRolke.h.; Examples/tutorials are found in the separate file Rolke.C. TRolke implements the following Models; The signal is always assumed to be Poisson, with the following combinations of models of background and detection efficiency:; If unsure, first consider model 3, 4 or 5.; 1: SetPoissonBkgBinomEff(x,y,z,tau,m) Background: Poisson; Efficiency: Binomial; when the background is simultaneously measured from sidebands (or MC), and the signal efficiency was determined from Monte Carlo; 2: SetPoissonBkgGaussEff(x,y,em,tau,sde) Background: Poisson; Efficiency: Gaussian; when the background is simultaneously measured from sidebands (or MC), and the efficiency is modeled as Gaussian; 3: SetGaussBkgGaussEff(x,bm,em,sde,sdb) Background: Gaussian; Efficiency: Gaussian; when background and efficiency can both be modeled as Gaussian.; 4: SetPoissonBkgKnownEff(x,y,tau,e) Background: Poisson; Efficiency: Known; when the background is si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:62,Guid,Guide,62,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootBrowser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TRootBrowser Class ReferenceGUI » Low level GUI widgets. ; This class creates a ROOT object browser, constituted by three main tabs. ; All tabs can 'swallow' frames, thanks to the new method: ExecPlugin(const char *name = 0, const char *fname = 0, const char *cmd = 0, Int_t pos = kRight, Int_t subpos = -1) allowing to select plugins (can be a macro or a command) to be executed, and where to embed the frame created by the plugin (tab and tab element). Examples:; create a new browser:; TBrowser b;; b#define b(i)Definition RSha256.hxx:100; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; create a new TCanvas in a new top right tab element:; b.ExecPlugin(""Canvas"", 0, ""new TCanvas()"");; create a new top right tab element embedding the TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"");; create a new bottom tab element embedding the TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"", 0, TRootBrowser::kBottom);; TRootBrowser::kBottom@ kBottomDefinition TRootBrowser.h:121; this browser implementation can be selected via the env Browser.Name in .rootrc, (TRootBrowser or TRootBrowserLite) the default being TRootBrowserLite a list of options (plugins) for the new TRootBrowser is also specified via the env 'Browser.Options' in .rootrc, the default being: FECI; Here is the list of available options:; F: File browser; E: Text Editor; H: HTML browser C: Canvas I: I/O redirection; P: Proof; G: GL viewer . Definition at line 54 of file TRootBrowser.h. Public Types; enum  EInsertPosition { kLeft; , kRight; , kBottom; };  ; enum  ENewBrowserMessages { ;   kBrowse = 11011; , kOpenFile; , kClone; , kH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowser.html:68,Guid,Guide,68,doc/master/classTRootBrowser.html,https://root.cern,https://root.cern/doc/master/classTRootBrowser.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootBrowserHistory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TRootBrowserHistory Class Reference. . Definition at line 192 of file TRootBrowserLite.cxx. Public Member Functions; void DeleteItem (TGListTreeItem *item);  ; void RecursiveRemove (TObject *obj) override;  Remove object from this collection and recursively remove the object from all other objects (and collections). ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end of the list and also store option. ;  ; TObject * After (const TObject *obj) const override;  Returns the object after object obj. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * Befor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistory.html:75,Guid,Guide,75,doc/master/classTRootBrowserHistory.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistory.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootBrowserHistoryCursor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TRootBrowserHistoryCursor Class Reference. . Definition at line 182 of file TRootBrowserLite.cxx. Public Member Functions;  TRootBrowserHistoryCursor (TGListTreeItem *item);  ; void Print (Option_t *) const override;  This method must be overridden when a class wants to print itself. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html:81,Guid,Guide,81,doc/master/classTRootBrowserHistoryCursor.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootBrowserLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRootBrowserLite Class ReferenceGUI » Low level GUI widgets. ; This class creates a ROOT object browser (looking like Windows Explorer). ; The widgets used are the new native ROOT GUI widgets. ; Definition at line 40 of file TRootBrowserLite.h. Public Member Functions;  TRootBrowserLite (TBrowser *b, const char *title, Int_t x, Int_t y, UInt_t width, UInt_t height);  Create browser with a specified width and height and at position x, y. ;  ;  TRootBrowserLite (TBrowser *b=nullptr, const char *title=""ROOT Browser"", UInt_t width=800, UInt_t height=500);  Create browser with a specified width and height. ;  ;  ~TRootBrowserLite () override;  Browser destructor. ;  ; void Add (TObject *obj, const char *name=nullptr, Int_t check=-1) override;  Add items to the browser. ;  ; void AddCheckBox (TObject *obj, Bool_t check=kFALSE) override;  Add a checkbox in the TGListTreeItem corresponding to obj and a checkmark on TGLVEntry if check = kTRUE. ;  ; virtual void AddToBox (TObject *obj, const char *name);  Add items to the iconbox of the browser. ;  ; virtual void AddToTree (TObject *obj, const char *name, Int_t check=-1);  Add items to the current TGListTree of the browser. ;  ; void BrowseObj (TObject *obj) override;  Browse object. ;  ; virtual void Checked (TObject *obj, Bool_t check);  Emits signal when double clicking on icon. ;  ; void CheckObjectItem (TObject *obj, Bool_t check=kFALSE) override;  Check / uncheck the TGListTreeItem corresponding to this object and add a checkmark on TGLVEntry if check = kTRUE. ;  ; void CloseTabs () override;  ; void CloseWindow () override;  In case window is closed via WM we get here. ;  ; virtual void DoubleClicked (TObject *o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserLite.html:72,Guid,Guide,72,doc/master/classTRootBrowserLite.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TRootCanvas Class ReferenceGUI » Low level GUI widgets. ; This class creates a main window with menubar, scrollbars and a drawing area. ; The widgets used are the new native ROOT GUI widgets. ; Definition at line 34 of file TRootCanvas.h. Public Member Functions;  TRootCanvas (TCanvas *c, const char *name, Int_t x, Int_t y, UInt_t width, UInt_t height);  Create a basic ROOT canvas. ;  ;  TRootCanvas (TCanvas *c=nullptr, const char *name=""ROOT Canvas"", UInt_t width=500, UInt_t height=300);  Create a basic ROOT canvas. ;  ;  ~TRootCanvas () override;  Delete ROOT basic canvas. ;  ; void Activated (Int_t id);  Slot handling tab switching in the browser, to properly set the canvas and the model to the editor. ;  ; void AdjustSize ();  Keep the same canvas size while docking/undocking toolbar. ;  ; void Close () override;  Called via TCanvasImp interface by TCanvas. ;  ; void CloseWindow () override;  In case window is closed via WM we get here. ;  ; void EventInfo (Int_t event, Int_t px, Int_t py, TObject *selected);  Display a tooltip with infos about the primitive below the cursor. ;  ; void FitCanvas ();  Fit canvas container to current window size. ;  ; void ForceUpdate () override;  ; UInt_t GetCheight () const;  Return height of canvas container. ;  ; UInt_t GetCwidth () const;  Return width of canvas container. ;  ; TGMenuBar * GetMenuBar () const;  ; TGLayoutHints * GetMenuBarItemLayout () const;  ; TGStatusBar * GetStatusBar () const;  ; TGDockableFrame * GetToolDock () const;  ; UInt_t GetWindowGeometry (Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Gets the size and position of the window containing the canvas. ;  ; Bool_t HasEditor () const override;  Returns kTRUE if the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootCanvas.html:67,Guid,Guide,67,doc/master/classTRootCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TRootContainer Class Reference. . Definition at line 229 of file TRootCanvas.cxx. Public Member Functions;  TRootContainer (TRootCanvas *c, Window_t id, const TGWindow *parent);  Create a canvas container. ;  ; Bool_t HandleButton (Event_t *ev) override;  Directly handle scroll mouse buttons (4 and 5), only pass buttons 1, 2 and 3 on to the TCanvas. ;  ; Bool_t HandleConfigureNotify (Event_t *ev) override;  This event is generated when the frame is resized. ;  ; Bool_t HandleCrossing (Event_t *ev) override;  ; Bool_t HandleDoubleClick (Event_t *ev) override;  ; Bool_t HandleExpose (Event_t *ev) override;  ; Bool_t HandleKey (Event_t *ev) override;  ; Bool_t HandleMotion (Event_t *ev) override;  ; void SavePrimitive (std::ostream &out, Option_t *="""") override;  Save a canvas container as a C++ statement(s) on output stream out. ;  ; void SetEditable (Bool_t) override;  Switch ON/OFF edit mode. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this compo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootContainer.html:70,Guid,Guide,70,doc/master/classTRootContainer.html,https://root.cern,https://root.cern/doc/master/classTRootContainer.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootContextMenu Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRootContextMenu Class ReferenceGUI » Low level GUI widgets. ; This class provides an interface to context sensitive popup menus. ; These menus pop up when the user hits the right mouse button, and are destroyed when the menu pops downs. The picture below shows a canvas with a pop-up menu. ; Definition at line 22 of file TRootContextMenu.h. Public Member Functions;  TRootContextMenu (TContextMenu *c=nullptr, const char *name=""ROOT Context Menu"");  Create context menu. ;  ;  ~TRootContextMenu () override;  Delete a context menu. ;  ; void Dialog (TObject *object, TFunction *function) override;  Create dialog object with OK and Cancel buttons. ;  ; void Dialog (TObject *object, TMethod *method) override;  Create dialog object with OK and Cancel buttons. ;  ; void DisplayPopup (Int_t x, Int_t y) override;  Display context popup menu for currently selected object. ;  ; void DrawEntry (TGMenuEntry *entry) override;  Draw context menu entry. ;  ; TRootDialog * GetDialog () const;  ; Bool_t HandleButton (Event_t *event) override;  Handle button event in the context menu. ;  ; Bool_t HandleCrossing (Event_t *event) override;  Handle pointer crossing event in context menu. ;  ; Bool_t HandleMotion (Event_t *event) override;  Handle pointer motion event in context menu. ;  ; TClass * IsA () const override;  ; virtual void OnlineHelp ();  Open the online help matching the actual class/method. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Handle context menu messages. ;  ; void RecursiveRemove (TObject *obj) override;  Close the context menu if the object is deleted in the RecursiveRemove() operation. ;  ; void Streamer (TBuffer &) ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootContextMenu.html:72,Guid,Guide,72,doc/master/classTRootContextMenu.html,https://root.cern,https://root.cern/doc/master/classTRootContextMenu.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootControlBar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRootControlBar Class ReferenceGUI » Low level GUI widgets. ; This class provides an interface to the GUI dependent functions of the TControlBar class. ; A control bar is a horizontal or vertical bar with a number of buttons (text or picture buttons). ; Definition at line 23 of file TRootControlBar.h. Public Member Functions;  TRootControlBar (TControlBar *c=nullptr, const char *title=""ROOT Control Bar"", Int_t x=-999, Int_t y=-999);  Create a ROOT native GUI controlbar. ;  ;  ~TRootControlBar () override;  Delete the control bar implementation. ;  ; void CloseWindow () override;  Called when closed via window manager action. ;  ; void Create () override;  Create the control bar. ;  ; TList * GetWidgets () const;  ; void Hide () override;  Hide controlbar. ;  ; TClass * IsA () const override;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Handle controlbar button messages. ;  ; void ReallyDelete () override;  Really delete the control bar and the this GUI. ;  ; void SetButtonState (const char *label, Int_t state=0) override;  sets new font for control bar buttons ;  ; void SetButtonWidth (UInt_t width) override;  Set button width in pixels. ;  ; void SetFont (const char *fontName) override;  sets new font for control bar buttons ;  ; void SetTextColor (const char *colorName) override;  sets text color for control bar buttons, e.g.: root > .x tutorials/demos.C root > bar->SetTextColor(""red"") ;  ; void Show () override;  Show controlbar. If not yet created create it first. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGMainFrame;  TGMainFrame (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootControlBar.html:71,Guid,Guide,71,doc/master/classTRootControlBar.html,https://root.cern,https://root.cern/doc/master/classTRootControlBar.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TRootDialog Class ReferenceGUI » Low level GUI widgets. ; A TRootDialog is used to prompt for the arguments of an object's member function. ; A TRootDialog is created via the context menu's when selecting a member function taking arguments. ; Definition at line 21 of file TRootDialog.h. Public Member Functions;  TRootDialog (TRootContextMenu *cmenu=nullptr, const TGWindow *main=nullptr, const char *title=""ROOT Dialog"", Bool_t okB=kTRUE, Bool_t cancelB=kTRUE, Bool_t applyB=kFALSE, Bool_t helpB=kTRUE);  Create a method argument prompt dialog. ;  ;  ~TRootDialog () override;  Delete the dialog. ;  ; virtual void Add (const char *argname, const char *value, const char *type);  Add a label and text input field. ;  ; void CloseWindow () override;  Called when closed via window manager action. ;  ; virtual const char * GetParameters ();  Get parameter string (called by contextmenu after OK or Apply has been selected). ;  ; Bool_t HandleKey (Event_t *event) override;  The key press event handler in this dialog. ;  ; TClass * IsA () const override;  ; virtual void Popup ();  Popup dialog. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void TabPressed ();  Handle Tab keyboard navigation in this dialog. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootDialog.html:67,Guid,Guide,67,doc/master/classTRootDialog.html,https://root.cern,https://root.cern/doc/master/classTRootDialog.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootEmbeddedCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TRootEmbeddedCanvas Class ReferenceGUI » Low level GUI widgets. ; This class creates a TGCanvas in which a TCanvas is created. ; Use GetCanvas() to get a pointer to the TCanvas. ; Definition at line 24 of file TRootEmbeddedCanvas.h. Public Member Functions;  TRootEmbeddedCanvas (const char *name=nullptr, const TGWindow *p=nullptr, UInt_t w=10, UInt_t h=10, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Create an TCanvas embedded in a TGFrame. ;  ;  ~TRootEmbeddedCanvas () override;  Delete embedded ROOT canvas. ;  ; void AdoptCanvas (TCanvas *c);  Canvas c is adopted from this embedded canvas. ;  ; Bool_t GetAutoFit () const;  ; TCanvas * GetCanvas () const;  ; Int_t GetCanvasWindowId () const;  ; Bool_t HandleDNDDrop (TDNDData *data) override;  Handle drop events. ;  ; Atom_t HandleDNDEnter (Atom_t *typelist) override;  Handle drag enter events. ;  ; Bool_t HandleDNDLeave () override;  Handle drag leave events. ;  ; Atom_t HandleDNDPosition (Int_t, Int_t, Atom_t action, Int_t, Int_t) override;  Handle dragging position events. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save an embedded canvas as a C++ statement(s) on output stream out. ;  ; void SetAutoFit (Bool_t fit=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCanvas;  TGCanvas (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kSunkenFrame|kDoubleBorder, Pixel_t back=GetDefaultFrameBackground());  Create a canvas object. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootEmbeddedCanvas.html:75,Guid,Guide,75,doc/master/classTRootEmbeddedCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootEmbeddedCanvas.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootHelpDialog Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRootHelpDialog Class ReferenceGUI » Low level GUI widgets. ; A TRootHelpDialog is used to display help text (or any text in a dialog window). ; There is on OK button to popdown the dialog. ; Definition at line 22 of file TRootHelpDialog.h. Public Member Functions;  TRootHelpDialog (const TGWindow *main=nullptr, const char *title=""ROOT Help Dialog"", UInt_t w=1, UInt_t h=1);  Create a help text dialog. ;  ;  ~TRootHelpDialog () override;  Delete help text dialog. ;  ; void AddText (const char *helpText);  Add help text from helpText buffer to already existing text in TGTextView. ;  ; void CloseWindow () override;  Called when closed via window manager action. ;  ; TClass * IsA () const override;  ; void Popup ();  Show help dialog. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process OK button. ;  ; void SetText (const char *helpText);  Set help text from helpText buffer in TGTextView. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE, EPlacement pos=kCenter);  Position transient frame centered relative to the parent frame. ;  ; const TGWindow * GetMain () const;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save a transient frame widget as a C++ statement(s) on output stream out. ;  ; void SaveSource (const char *filename=""Rootdlog.C"", Option_t *option="""") overrid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootHelpDialog.html:71,Guid,Guide,71,doc/master/classTRootHelpDialog.html,https://root.cern,https://root.cern/doc/master/classTRootHelpDialog.html,1,['Guid'],['Guide']
Usability,. ROOT: TRootIOCtor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRootIOCtor Class Reference. . Definition at line 32 of file TRootIOCtor.h. #include <TRootIOCtor.h>; The documentation for this class was generated from the following file:; core/base/inc/TRootIOCtor.h. TRootIOCtor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootIOCtor.html:67,Guid,Guide,67,doc/master/classTRootIOCtor.html,https://root.cern,https://root.cern/doc/master/classTRootIOCtor.html,2,['Guid'],['Guide']
Usability,". ROOT: TRootIconList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TRootIconList Class Reference. . Definition at line 334 of file TRootBrowserLite.cxx. Public Member Functions;  TRootIconList (TRootIconBox *box=nullptr);  constructor ;  ;  ~TRootIconList () override;  destructor ;  ; void Browse (TBrowser *b) override;  browse icon list ;  ; const TGPicture * GetPicture () const;  ; const char * GetTitle () const override;  Returns title of object. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void UpdateName ();  composite name ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; void AddAfter (const TObject *after, TObject *obj) override;  Insert object after object after in the list. ;  ; virtual void AddAfter (TObjLink *after, TObject *obj);  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Insert object before object before in the list. ;  ; virtual void AddBefore (TObjLink *before, TObject *obj);  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; virtual void AddFirst (TObject *obj, Option_t *opt);  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; virtual void AddLast (TObject *obj, Option_t *opt);  Add object at the end ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootIconList.html:69,Guid,Guide,69,doc/master/classTRootIconList.html,https://root.cern,https://root.cern/doc/master/classTRootIconList.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootSecContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TRootSecContext Class Reference. . Definition at line 27 of file TRootSecContext.h. Public Member Functions;  TRootSecContext (const char *url, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=1);  Ctor for SecContext object. ;  ;  TRootSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr, Int_t key=1);  Ctor for SecContext object. ;  ; virtual ~TRootSecContext ();  Dtor: delete (deActivate, local/remote cleanup, list removal) all what is still active. ;  ; const char * AsString (TString &out) override;  Returns short string with relevant information about this security context. ;  ; void DeActivate (Option_t *opt=""CR"") override;  Set OffSet to -1 and expiring Date to default Remove from the list If Opt contains ""C"" or ""c"", ask for remote cleanup If Opt contains ""R"" or ""r"", remove from the list Default Opt=""CR"". ;  ; Int_t GetRSAKey () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option=""F"") const override;  If opt is ""F"" (default) print object content. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSecContext;  TSecContext (const char *url, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ;  ;  TSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSecContext.html:71,Guid,Guide,71,doc/master/classTRootSecContext.html,https://root.cern,https://root.cern/doc/master/classTRootSecContext.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootSniffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Types |; List of all members ; TRootSniffer Class ReferenceHTTP server. ; Sniffer of ROOT objects, data provider for THttpServer. ; Provides methods to scan different structures like folders, directories, files and collections. Can locate objects (or its data member) per name. Can be extended to application-specific classes.; Normally TRootSnifferFull class is used which able to access data from trees, canvases, histograms. ; Definition at line 115 of file TRootSniffer.h. Public Member Functions;  TRootSniffer (const char *name=""sniff"", const char *objpath=""Objects"");  constructor ;  ; virtual ~TRootSniffer ();  destructor ;  ; Bool_t CanDrawItem (const char *path);  Method verifies if object can be drawn. ;  ; Bool_t CanExploreItem (const char *path);  Method returns true when object has childs or one could try to expand item. ;  ; Int_t CheckRestriction (const char *item_name);  Checked if restriction is applied to the item full_item_name should have full path to the item. ;  ; Bool_t CreateItem (const char *fullname, const char *title);  Create item element. ;  ; void CreateOwnTopFolder ();  Create own TFolder structures independent from gROOT This allows to have many independent TRootSniffer instances At the same time such sniffer lost access to all global lists and folders. ;  ; virtual void * FindInHierarchy (const char *path, TClass **cl=nullptr, TDataMember **member=nullptr, Int_t *chld=nullptr);  Search element with specified path Returns pointer on element Optionally one could obtain element class, member description and number of childs. ;  ; TObject * FindTObjectInHierarchy (const char *path);  Search element in hierarchy, derived from TObject. ;  ; const char * GetAutoLoad () const;  return nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSniffer.html:68,Guid,Guide,68,doc/master/classTRootSniffer.html,https://root.cern,https://root.cern/doc/master/classTRootSniffer.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootSnifferStore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRootSnifferStore Class ReferenceHTTP server. ; Abstract interface for storage of hierarchy scan in TRootSniffer. ; Used to store different results of objects scanning by TRootSniffer. ; Definition at line 24 of file TRootSnifferStore.h. Public Member Functions; virtual ~TRootSnifferStore ()=default;  ; virtual void BeforeNextChild (Int_t, Int_t, Int_t);  ; virtual void CloseNode (Int_t, Int_t);  ; virtual void CreateNode (Int_t, const char *);  ; TClass * GetResClass () const;  ; TDataMember * GetResMember () const;  ; Int_t GetResNumChilds () const;  ; void * GetResPtr () const;  ; Int_t GetResRestrict () const;  ; TClass * IsA () const override;  ; virtual Bool_t IsXml () const;  ; virtual void SetField (Int_t, const char *, const char *, Bool_t);  ; void SetResult (void *_res, TClass *_rescl, TDataMember *_resmemb, Int_t _res_chld, Int_t restr=0);  set pointer on found element, class and number of childs ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSnifferStore.html:73,Guid,Guide,73,doc/master/classTRootSnifferStore.html,https://root.cern,https://root.cern/doc/master/classTRootSnifferStore.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootSnifferStoreJson Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRootSnifferStoreJson Class ReferenceHTTP server. ; Storage of hierarchy scan in TRootSniffer in JSON format. ; Used to store scanned objects hierarchy in JSON form. ; Definition at line 79 of file TRootSnifferStore.h. Public Member Functions;  TRootSnifferStoreJson (TString &_buf, Bool_t _compact=kFALSE);  ; void BeforeNextChild (Int_t lvl, Int_t nchld, Int_t nfld) final;  called before next child node created ;  ; void CloseNode (Int_t lvl, Int_t numchilds) final;  called when node should be closed depending from number of childs different xml format is applied ;  ; void CreateNode (Int_t lvl, const char *nodename) final;  starts new json object, will be closed by CloseNode ;  ; TClass * IsA () const override;  ; void SetField (Int_t lvl, const char *field, const char *value, Bool_t with_quotes) final;  set field (json field) in current node ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRootSnifferStore; virtual ~TRootSnifferStore ()=default;  ; TClass * GetResClass () const;  ; TDataMember * GetResMember () const;  ; Int_t GetResNumChilds () const;  ; void * GetResPtr () const;  ; Int_t GetResRestrict () const;  ; virtual Bool_t IsXml () const;  ; void SetResult (void *_res, TClass *_rescl, TDataMember *_resmemb, Int_t _res_chld, Int_t restr=0);  set pointer on found element, class and number of childs ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void Abst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSnifferStoreJson.html:77,Guid,Guide,77,doc/master/classTRootSnifferStoreJson.html,https://root.cern,https://root.cern/doc/master/classTRootSnifferStoreJson.html,1,['Guid'],['Guide']
Usability,". ROOT: TRootSnifferStoreXml Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TRootSnifferStoreXml Class ReferenceHTTP server. ; Storage of hierarchy scan in TRootSniffer in XML format. ; Used to store scanned objects hierarchy in XML form. ; Definition at line 55 of file TRootSnifferStore.h. Public Member Functions;  TRootSnifferStoreXml (TString &_buf, Bool_t _compact=kFALSE);  ; void BeforeNextChild (Int_t lvl, Int_t nchld, Int_t) final;  called before next child node created ;  ; void CloseNode (Int_t lvl, Int_t numchilds) final;  Called when node should be closed. ;  ; void CreateNode (Int_t lvl, const char *nodename) final;  starts new xml node, will be closed by CloseNode ;  ; TClass * IsA () const override;  ; Bool_t IsXml () const final;  ; void SetField (Int_t lvl, const char *field, const char *value, Bool_t) final;  set field (xml attribute) in current node ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TRootSnifferStore; virtual ~TRootSnifferStore ()=default;  ; TClass * GetResClass () const;  ; TDataMember * GetResMember () const;  ; Int_t GetResNumChilds () const;  ; void * GetResPtr () const;  ; Int_t GetResRestrict () const;  ; void SetResult (void *_res, TClass *_rescl, TDataMember *_resmemb, Int_t _res_chld, Int_t restr=0);  set pointer on found element, class and number of childs ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" meth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootSnifferStoreXml.html:76,Guid,Guide,76,doc/master/classTRootSnifferStoreXml.html,https://root.cern,https://root.cern/doc/master/classTRootSnifferStoreXml.html,1,['Guid'],['Guide']
Usability,". ROOT: TRotMatrix Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TRotMatrix Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector rotation matrix. ; See class TGeometry. ; Definition at line 28 of file TRotMatrix.h. Public Types; enum  { kReflection = (1ULL << ( 23 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TRotMatrix ();  RotMatrix default constructor. ;  ;  TRotMatrix (const char *name, const char *title, Double_t *matrix);  RotMatrix normal constructor. ;  ;  TRotMatrix (const char *name, const char *title, Double_t theta, Double_t phi, Double_t psi);  RotMatrix normal constructor. ;  ;  TRotMatrix (const char *name, const char *title, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3);  RotMatrix normal constructor defined a la GEANT. ;  ;  ~TRotMatrix () override;  RotMatrix default destructor. ;  ; virtual Double_t Determinant () const;  Returns the value of the determinant of this matrix. ;  ; virtual Double_t * GetGLMatrix (Double_t *rGLMatrix) const;  Convert this matrix to the OpenGL [4x4]. ;  ; virtual Double_t * GetMatrix ();  ; virtual Int_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotMatrix.html:66,Guid,Guide,66,doc/master/classTRotMatrix.html,https://root.cern,https://root.cern/doc/master/classTRotMatrix.html,1,['Guid'],['Guide']
Usability,". ROOT: TRotation Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TRotation Class ReferenceMath » Legacy Physics Classes. ; Legacy Code TRotation is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TRotation might still be a valid solution. Consider using instead ROOT::Math::Rotation3D. ; The TRotation class describes a rotation of objects of the TVector3 class. It is a 3*3 matrix of Double_t:; | xx xy xz |; | yx yy yz |; | zx zy zz |; xyOption_t Option_t TPoint xyDefinition TGWin32VirtualXProxy.cxx:62; It describes a so called active rotation, i.e. rotation of objects inside a static system of coordinates. In case you want to rotate the frame and want to know the coordinates of objects in the rotated system, you should apply the inverse rotation to the objects. If you want to transform coordinates from the rotated frame to the original frame you have to apply the direct transformation.; A rotation around a specified axis means counterclockwise rotation around the positive direction of the axis. Declaration, Access, Comparisons; TRotation r; // r initialized as identity; TRotation m(r); // m = r; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRotation<div class=""legacybox""><h2>Legacy Code</h2> TRotation is a legacy interface: there will be no bug fix...Definition TRotation.h:20; mTMarker mDefinition textangle.C:8; There is no direct way to set the matrix elements - to ensure that a TRotation object always describes a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRotation.html:65,Guid,Guide,65,doc/master/classTRotation.html,https://root.cern,https://root.cern/doc/master/classTRotation.html,1,['Guid'],['Guide']
Usability,". ROOT: TS3HTTPRequest Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TS3HTTPRequest Class Reference. . Definition at line 45 of file TS3HTTPRequest.h. Public Types; enum  EAuthType { kNoAuth; , kAmazon; , kGoogle; };  ; enum  EHTTPVerb { ;   kGET; , kPOST; , kPUT; , kDELETE; , ;   kHEAD; , kCOPY. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TS3HTTPRequest ();  ;  TS3HTTPRequest (const TS3HTTPRequest &m);  Copy constructor. ;  ;  TS3HTTPRequest (EHTTPVerb httpVerb, const TString &host, const TString &bucket, const TString &objectKey, EAuthType authType, const TString &accessKey, const TString &secretKey);  Default constructor. ;  ; virtual ~TS3HTTPRequest ();  ; const TString & GetAccessKey () const;  ; TString GetAuthType () const;  ; const TString & GetBucket () const;  ; const TString & GetHost () const;  ; EHTTPVerb GetHTTPVerb () const;  ; const TString & GetObjectKey () const;  ; TString GetRequest (TS3HTTPRequest::EHTTPVerb httpVerb, Bool_t appendCRLF=kTRUE);  Returns the HTTP request ready to be sent to the server. ;  ; const TString & GetSecretKey () const;  ; const TString & GetTimeStamp () const;  ; TClass * IsA () const o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3HTTPRequest.html:70,Guid,Guide,70,doc/master/classTS3HTTPRequest.html,https://root.cern,https://root.cern/doc/master/classTS3HTTPRequest.html,1,['Guid'],['Guide']
Usability,". ROOT: TS3WebFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TS3WebFile Class ReferenceInput/Output Library. ; A TS3WebFile is a TWebFile which retrieves the file contents from a web server implementing the REST API of the Amazon S3 protocol. ; This class is meant to be as generic as possible to be used with files hosted not only by Amazon S3 servers but also by other providers implementing the core of the S3 protocol.; The S3 protocol works on top of HTTPS (and HTTP) and imposes that each HTTP request be signed using a specific convention: the request must include an 'Authorization' header which contains the signature of a concatenation of selected request fields. For signing the request, an 'Access Key Id' and a 'Secret Access Key' need to be known. These keys are used by the S3 servers to identify the client and to authenticate the request as genuine.; As an end user, you must know the Access Key and Secret Access Key in order to access each S3 file. They are provided to you by your S3 service provider. Those two keys can be provided to ROOT when initializing an object of this class by two means: a. by using the environmental variables S3_ACCESS_KEY and S3_SECRET_KEY, or b. by specifying them when opening each file.; You can use AWS temporary security credentials (temporary access key and secret access key), but you must also give the associated session token. The token may be set in the S3_SESSION_TOKEN environmental variable, or on open in the TOKEN option.; The first method is convenient if all the S3 files you want to access are hosted by a single provider. The second one is more flexible as it allows you to specify which credentials to use on a per-file basis. See the documentation of the constructor of this class for d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:66,Guid,Guide,66,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TSAXParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TSAXParser Class ReferenceInput/Output Library. ; TSAXParser is a subclass of TXMLParser, it is a wraper class to libxml library. ; SAX (Simple API for XML) is an event based interface, which doesn't maintain the DOM tree in memory, in other words, it's much more efficient for large document. TSAXParserCallback contains a number of callback routines to the parser in a xmlSAXHandler structure. The parser will then parse the document and call the appropriate callback when certain conditions occur. ; Definition at line 23 of file TSAXParser.h. Public Member Functions;  TSAXParser ();  Create SAX parser. ;  ;  ~TSAXParser () override;  TSAXParser desctructor. ;  ; virtual void ConnectToHandler (const char *handlerName, void *handler);  A default TSAXParser to a user-defined Handler connection function. ;  ; TClass * IsA () const override;  ; virtual void OnCdataBlock (const char *text, Int_t len);  Emit a signal for OnCdataBlock. ;  ; virtual void OnCharacters (const char *characters);  Emit a signal for OnCharacters, where characters are the characters outside of tags. ;  ; virtual void OnComment (const char *text);  Emit a signal for OnComment, where text is the comment. ;  ; virtual void OnEndDocument ();  Emit a signal for OnEndDocument. ;  ; virtual void OnEndElement (const char *name);  Emit a signal for OnEndElement, where name is the Element's name. ;  ; virtual Int_t OnError (const char *text);  Emit a signal for OnError, where text is the error and it returns the Parse Error Code, see TXMLParser. ;  ; virtual Int_t OnFatalError (const char *text);  Emit a signal for OnFactalError, where text is the error and it returns the Parse Error Code, see TXMLParser. ;  ; virtual void OnStartD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:66,Guid,Guide,66,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,2,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TSBRepeatTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSBRepeatTimer Class Reference. . Definition at line 73 of file TGScrollBar.cxx. Public Member Functions;  TSBRepeatTimer (TGScrollBar *s, Long_t ms, Int_t inc);  ; Int_t GetSmallInc () const;  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSBRepeatTimer.html:70,Guid,Guide,70,doc/master/classTSBRepeatTimer.html,https://root.cern,https://root.cern/doc/master/classTSBRepeatTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TSPHE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TSPHE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A Sphere. ; It has 9 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: minimum radius; rmax: maximum radius; themin: theta min; themax: theta max; phimin: phi min; phimax: phi max. ROOT color indx = max(i-i0,j-j0); ; Definition at line 28 of file TSPHE.h. Public Member Functions;  TSPHE ();  SPHE shape default constructor. ;  ;  TSPHE (const char *name, const char *title, const char *material, Float_t rmax);  SPHE shape ""simplified"" constructor. ;  ;  TSPHE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax);  SPHE shape normal constructor. ;  ;  ~TSPHE () override;  SPHE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a PSPHE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetPhimax () const;  ; virtual Float_t GetPhimin () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; virtual Float_t GetThemax () const;  ; virtual Float_t GetThemin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1.0);  ; virtual void SetEllipse (const Float_t *factors);  Set ellipse. ;  ; virtual void SetNumberOfDivisions (Int_t p);  Set number of divisions. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPHE.html:61,Guid,Guide,61,doc/master/classTSPHE.html,https://root.cern,https://root.cern/doc/master/classTSPHE.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: TSPlot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSPlot Class Reference. ; Legacy Code TSPlot is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSPlot might still be a valid solution. ; A common method used in High Energy Physics to perform measurements is the maximum Likelihood method, exploiting discriminating variables to disentangle signal from background. The crucial point for such an analysis to be reliable is to use an exhaustive list of sources of events combined with an accurate description of all the Probability Density Functions (PDF).; To assess the validity of the fit, a convincing quality check is to explore further the data sample by examining the distributions of control variables. A control variable can be obtained for instance by removing one of the discriminating variables before performing again the maximum Likelihood fit: this removed variable is a control variable. The expected distribution of this control variable, for signal, is to be compared to the one extracted, for signal, from the data sample. In order to be able to do so, one must be able to unfold from the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for the control variable, independently for each of the various sources of events, without making use of any a priori knowledge on this variable. The aim is thus to use the knowledge available for the discriminating variables to infer the behaviour of the individual sources of events with respect to the control variable.; TSPlot is optimal if the control variable is uncorrelated with the discriminating variables.; A detail description o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:62,Guid,Guide,62,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['Guid'],['Guide']
Usability,. ROOT: TSPlot tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TSPlot tutorialsTutorials. ; This tutorial illustrates the use of class TSPlot. . Files; file  TestSPlot.C;  This tutorial illustrates the use of class TSPlot and of the sPlots method. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__splot.html:56,Guid,Guide,56,doc/master/group__tutorial__splot.html,https://root.cern,https://root.cern/doc/master/group__tutorial__splot.html,2,['Guid'],['Guide']
Usability,". ROOT: TSQLClassColumnInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLClassColumnInfo Class Referencefinal. . Definition at line 21 of file TSQLClassInfo.h. Public Member Functions;  TSQLClassColumnInfo ();  ;  TSQLClassColumnInfo (const char *name, const char *sqlname, const char *sqltype);  normal constructor ;  ; const char * GetName () const final;  Returns name of object. ;  ; const char * GetSQLName () const;  ; const char * GetSQLType () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLClassColumnInfo.html:75,Guid,Guide,75,doc/master/classTSQLClassColumnInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLClassColumnInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLClassInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLClassInfo Class ReferencefinalInput/Output Library. ; Contains information about tables specific to one class and version. ; It provides names of table for that class. For each version of class not more than two tables can exists. Normal table has typically name like TH1_ver4 and additional table has name like TH1_raw4. List of this objects are kept by TSQLFile class. ; Definition at line 41 of file TSQLClassInfo.h. Public Member Functions;  TSQLClassInfo ();  ;  TSQLClassInfo (Long64_t classid, const char *classname, Int_t version);  normal constructor of TSQLClassInfo class Sets names of tables, which are used for that version of class ;  ;  ~TSQLClassInfo () override;  destructor ;  ; Int_t FindColumn (const char *name, Bool_t sqlname=kFALSE);  Search for column of that name. ;  ; Long64_t GetClassId () const;  ; const char * GetClassTableName () const;  ; Int_t GetClassVersion () const;  ; TObjArray * GetColumns () const;  ; const char * GetName () const final;  Returns name of object. ;  ; const char * GetRawTableName () const;  ; TClass * IsA () const override;  ; Bool_t IsClassTableExist () const;  ; Bool_t IsRawTableExist () const;  ; void SetClassTableName (const char *name);  ; void SetColumns (TObjArray *columns);  assigns new list of columns ;  ; void SetRawExist (Bool_t on);  ; void SetRawTableName (const char *name);  ; void SetTableStatus (TObjArray *columns=nullptr, Bool_t israwtable=kFALSE);  set current status of class tables ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLClassInfo.html:69,Guid,Guide,69,doc/master/classTSQLClassInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLClassInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLColumnData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; List of all members ; TSQLColumnData Class ReferencefinalInput/Output Library. . Definition at line 37 of file TSQLStructure.h. Public Member Functions;  TSQLColumnData (const char *name, const char *sqltype, const char *value, Bool_t numeric);  normal constructor of TSQLColumnData class specifies name, type and value for one column ;  ;  TSQLColumnData (const char *name, Long64_t value);  constructs TSQLColumnData object for integer column ;  ;  ClassDefOverride (TSQLColumnData, 1);  ; const char * GetName () const final;  Returns name of object. ;  ; const char * GetType () const;  ; const char * GetValue () const;  ; Bool_t IsNumeric () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnData.html:70,Guid,Guide,70,doc/master/classTSQLColumnData.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnData.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLColumnInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLColumnInfo Class Reference. . Definition at line 17 of file TSQLColumnInfo.h. Public Member Functions;  TSQLColumnInfo ();  identify if value can be NULL ;  ;  TSQLColumnInfo (const char *columnname, const char *sqltypename=""unknown"", Bool_t nullable=kFALSE, Int_t sqltype=-1, Int_t size=-1, Int_t length=-1, Int_t scale=-1, Int_t sign=-1);  normal constructor ;  ; virtual ~TSQLColumnInfo ();  ; Int_t GetLength () const;  ; Int_t GetScale () const;  ; Int_t GetSigned () const;  ; Int_t GetSize () const;  ; Int_t GetSQLType () const;  ; const char * GetTypeName () const;  ; TClass * IsA () const override;  ; Bool_t IsNullable () const;  ; Bool_t IsSigned () const;  ; Bool_t IsUnsigned () const;  ; void Print (Option_t *option="""") const override;  Prints column information to standard output. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLColumnInfo.html:70,Guid,Guide,70,doc/master/classTSQLColumnInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLColumnInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TSQLFile Class ReferencefinalInput/Output Library. ; Access an SQL db via the TFile interface. ; The main motivation for the TSQLFile development is to have ""transparent"" access to SQL data base via standard TFile interface. The main approach that each class (but not each object) has one or two tables with names like _ver$(VERSION) and _raw$(VERSION) For example: TAxis_ver8 or TList_raw5 Second kind of tables appears, when some of class members can not be converted to normalized form or when class has custom streamer. For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4 Most of members are stored in TH1_ver4 table column-wise, and only member: Double_t* fBuffer; //[fBufferSize] can not be represented as column while size of array is not fixed. Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"". In this there are following columns: . Name Description . ""key:id"" key identifier to which belong object . ""obj:id"" object identifier . ""Class"" object class name . ""Version"" object class version . Data in each ""ObjectsTable"" row uniquely identify, in which table and which column object is stored.; In normal situation all class data should be sorted column-wise. Up to now following member are supported:; Basic data types. Here is everything clear. Column SQL type will be as much as possible close to the original type of value.; Fixed array of basic data types. In this case n columns like fArr[0], fArr[1] and so on will be created. If there is multidimensional array, names will be fArr2[1][2][1] and so on; Parent class. I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:64,Guid,Guide,64,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLMonitoringWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSQLMonitoringWriter Class Reference. . Definition at line 30 of file TSQLMonitoring.h. Public Member Functions;  TSQLMonitoringWriter (const char *serv, const char *user, const char *pass, const char *table);  Constructor. ;  ; virtual ~TSQLMonitoringWriter ();  Destructor. ;  ; TClass * IsA () const override;  ; Bool_t SendParameters (TList *values, const char *) override;  Register query log using the information in the list which is in the form TParameter(<par>,<value>) or TNamed(<name>,<string>). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Verbose (Bool_t onoff) override;  ;  Public Member Functions inherited from TVirtualMonitoringWriter;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLMonitoringWriter.html:76,Guid,Guide,76,doc/master/classTSQLMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTSQLMonitoringWriter.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLObjectData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLObjectData Class ReferenceInput/Output Library. ; TSQLObjectData is used in TBufferSQL2 class in reading procedure. ; It contains data, request from database table for one specific object for one specific class. For instance, when data for class TH1 required, requests will be done to TH1_ver4 and TH1_raw4 tables and result of these requests will be kept in single TSQLObjectData instance. ; Definition at line 47 of file TSQLObjectData.h. Public Member Functions;  TSQLObjectData ();  default constructor ;  ;  TSQLObjectData (TSQLClassInfo *sqlinfo, Long64_t objid, TSQLResult *classdata, TSQLRow *classrow, TSQLResult *blobdata, TSQLStatement *blobstmt);  normal constructor, ;  ;  ~TSQLObjectData () override;  destructor of TSQLObjectData object ;  ; void AddUnpack (const char *tname, const char *value);  add emulated data this used to place version or TObject raw data, read from normal tables ;  ; void AddUnpackInt (const char *tname, Int_t value);  emulate integer value in raw data ;  ; const char * GetBlobPrefixName () const;  ; const char * GetBlobTypeName () const;  ; TSQLClassInfo * GetInfo () const;  ; const char * GetLocatedField () const;  ; Long64_t GetObjId () const;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; Bool_t IsBlobData () const;  ; Bool_t LocateColumn (const char *colname, Bool_t isblob=kFALSE);  locate column of that name in results ;  ; Bool_t PrepareForRawData ();  prepare to read data from raw table ;  ; void ShiftToNextValue ();  shift to next column or next row in blob data ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t VerifyDataTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLObjectData.html:70,Guid,Guide,70,doc/master/classTSQLObjectData.html,https://root.cern,https://root.cern/doc/master/classTSQLObjectData.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLObjectDataPool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLObjectDataPool Class ReferenceInput/Output Library. ; XML object keeper class. ; Definition at line 108 of file TSQLObjectData.h. Public Member Functions;  TSQLObjectDataPool ();  ;  TSQLObjectDataPool (TSQLClassInfo *info, TSQLResult *data);  ;  ~TSQLObjectDataPool () override;  Destructor of TSQLObjectDataPool class Deletes not used rows and class data table. ;  ; TSQLResult * GetClassData () const;  ; TSQLRow * GetObjectRow (Long64_t objid);  Returns single sql row with object data for that class. ;  ; TSQLClassInfo * GetSqlInfo () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLObjectDataPool.html:74,Guid,Guide,74,doc/master/classTSQLObjectDataPool.html,https://root.cern,https://root.cern/doc/master/classTSQLObjectDataPool.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLObjectInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLObjectInfo Class ReferenceInput/Output Library. ; Info (classname, version) about object in database. ; Definition at line 26 of file TSQLObjectData.h. Public Member Functions;  TSQLObjectInfo ();  ;  TSQLObjectInfo (Long64_t objid, const char *classname, Version_t version);  ;  ~TSQLObjectInfo () override;  ; const char * GetObjClassName () const;  ; Long64_t GetObjId () const;  ; Version_t GetObjVersion () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLObjectInfo.html:70,Guid,Guide,70,doc/master/classTSQLObjectInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLObjectInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLResult Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLResult Class Referenceabstract. . Definition at line 31 of file TSQLResult.h. Public Member Functions; virtual ~TSQLResult ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Int_t GetFieldCount ()=0;  ; virtual const char * GetFieldName (Int_t field)=0;  ; virtual Int_t GetRowCount () const;  ; TClass * IsA () const override;  ; virtual TSQLRow * Next ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLResult.html:66,Guid,Guide,66,doc/master/classTSQLResult.html,https://root.cern,https://root.cern/doc/master/classTSQLResult.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLRow Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; List of all members ; TSQLRow Class Referenceabstract. . Definition at line 30 of file TSQLRow.h. Public Member Functions; virtual ~TSQLRow ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual const char * GetField (Int_t field)=0;  ; virtual ULong_t GetFieldLength (Int_t field)=0;  ; TClass * IsA () const override;  ; const char * operator[] (Int_t field);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLRow.html:63,Guid,Guide,63,doc/master/classTSQLRow.html,https://root.cern,https://root.cern/doc/master/classTSQLRow.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLServer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSQLServer Class Referenceabstract. . Definition at line 41 of file TSQLServer.h. Public Types; enum  ESQLDataTypes { ;   kSQL_NONE = -1; , kSQL_CHAR = 1; , kSQL_VARCHAR = 2; , kSQL_INTEGER = 3; , ;   kSQL_FLOAT = 4; , kSQL_DOUBLE = 5; , kSQL_NUMERIC = 6; , kSQL_BINARY = 7; , ;   kSQL_TIMESTAMP = 8. };  printf argument for floats and doubles, either ""%f"" or ""%e"" or ""%10f"" and so on More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TSQLServer ();  ; virtual void Close (Option_t *option="""")=0;  ; virtual Bool_t Commit ();  submit ""COMMIT"" query to database return kTRUE, if successful ;  ; virtual Int_t CreateDataBase (const char *dbname)=0;  ; virtual Int_t DropDataBase (const char *dbname)=0;  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t Exec (const char *sql);  Execute sql query. ;  ; virtual TSQLResult * GetColumns (const char *dbname, const char *table, const char *wild=nullptr)=0;  ; virtual TSQLResult * GetDataBases (const char *wild=nullptr)=0;  ; const char * GetDB () const;  ; const char * GetDBM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:66,Guid,Guide,66,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLStatement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLStatement Class Referenceabstract. . Definition at line 21 of file TSQLStatement.h. Public Member Functions; virtual ~TSQLStatement ()=default;  ; virtual void Close (Option_t *="""");  ; virtual void EnableErrorOutput (Bool_t on=kTRUE);  ; virtual Bool_t GetBinary (Int_t, void *&, Long_t &);  ; virtual Int_t GetBufferLength () const =0;  ; virtual Bool_t GetDate (Int_t, Int_t &, Int_t &, Int_t &);  ; TDatime GetDatime (Int_t);  return value of parameter in form of TDatime Be aware, that TDatime does not allow dates before 1995-01-01 ;  ; virtual Bool_t GetDatime (Int_t, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &, Int_t &);  ; Int_t GetDay (Int_t);  return day value for parameter (if applicable) ;  ; virtual Double_t GetDouble (Int_t);  ; virtual Int_t GetErrorCode () const;  returns error code of last operation if res==0, no error Each specific implementation of TSQLStatement provides its own error coding ;  ; virtual const char * GetErrorMsg () const;  returns error message of last operation if no errors, return 0 Each specific implementation of TSQLStatement provides its own error messages ;  ; virtual const char * GetFieldName (Int_t)=0;  ; Int_t GetHour (Int_t);  return hours value for parameter (if applicable) ;  ; virtual Int_t GetInt (Int_t);  ; virtual Bool_t GetLargeObject (Int_t col, void *&mem, Long_t &size);  ; virtual Long_t GetLong (Int_t);  ; virtual Long64_t GetLong64 (Int_t);  ; Int_t GetMinute (Int_t);  return minutes value for parameter (if applicable) ;  ; Int_t GetMonth (Int_t);  return month value for parameter (if applicable) ;  ; virtual Int_t GetNumAffectedRows ();  ; virtual Int_t GetNumFields ()=0;  ; virtual Int_t GetNumParameters ()=0;  ; Int_t GetSecond (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStatement.html:69,Guid,Guide,69,doc/master/classTSQLStatement.html,https://root.cern,https://root.cern/doc/master/classTSQLStatement.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLStructure Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLStructure Class ReferenceInput/Output Library. ; This is hierarchical structure, which is created when data is written by TBufferSQL2. ; It contains data all structural information such: version of written class, data member types of that class, value for each data member and so on. Such structure in some sense similar to XML node and subnodes structure Once it created, it converted to SQL statements, which are submitted to database server. ; Definition at line 88 of file TSQLStructure.h. Public Types; enum  ESQLColumns { ;   kColUnknown = 0; , kColSimple = 1; , kColSimpleArray = 2; , kColParent = 3; , ;   kColObject = 4; , kColObjectArray = 5; , kColNormObject = 6; , kColNormObjectArray = 7; , ;   kColObjectPtr = 8; , kColTString = 9; , kColRawData = 10. };  ; enum  ESQLIdType { kIdTable = 0; , kIdRawTable = 1; , kIdColumn = 2; };  ; enum  ESQLTypes { ;   kSqlObject = 10001; , kSqlPointer = 10002; , kSqlVersion = 10003; , kSqlStreamerInfo = 10004; , ;   kSqlClassStreamer = 10005; , kSqlElement = 10006; , kSqlValue = 10007; , kSqlArray = 10008; , ;   kSqlObjectData = 10009; , kSqlCustomClass = 10010; , kSqlCustomElement = 10011. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLStructure.html:69,Guid,Guide,69,doc/master/classTSQLStructure.html,https://root.cern,https://root.cern/doc/master/classTSQLStructure.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLTableData Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSQLTableData Class Reference. . Definition at line 59 of file TSQLStructure.h. Public Member Functions;  TSQLTableData (TSQLFile *f=nullptr, TSQLClassInfo *info=nullptr);  normal constructor ;  ;  ~TSQLTableData () override;  destructor ;  ; void AddColumn (const char *name, const char *sqltype, const char *value, Bool_t numeric);  Add normal column to list of columns. ;  ; void AddColumn (const char *name, Long64_t value);  Add INT column to list of columns. ;  ;  ClassDefOverride (TSQLTableData, 1);  ; const char * GetColumn (Int_t n);  return column value ;  ; Int_t GetNumColumns ();  returns number of columns in provided set ;  ; Bool_t IsNumeric (Int_t n);  identifies if column has numeric value ;  ; TObjArray * TakeColInfos ();  take ownership over colinfos ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableData.html:69,Guid,Guide,69,doc/master/classTSQLTableData.html,https://root.cern,https://root.cern/doc/master/classTSQLTableData.html,1,['Guid'],['Guide']
Usability,". ROOT: TSQLTableInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSQLTableInfo Class Reference. . Definition at line 20 of file TSQLTableInfo.h. Public Member Functions;  TSQLTableInfo ();  table update time ;  ;  TSQLTableInfo (const char *tablename, TList *columns, const char *comment=""SQL table"", const char *engine=nullptr, const char *create_time=nullptr, const char *update_time=nullptr);  normal constructor ;  ; virtual ~TSQLTableInfo ();  destructor ;  ; TSQLColumnInfo * FindColumn (const char *columnname);  Return column info object of given name. ;  ; TList * GetColumns () const;  ; const char * GetCreateTime () const;  ; const char * GetEngine () const;  ; const char * GetUpdateTime () const;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Prints table and table columns info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLTableInfo.html:69,Guid,Guide,69,doc/master/classTSQLTableInfo.html,https://root.cern,https://root.cern/doc/master/classTSQLTableInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSSLSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TSSLSocket Class Reference. . Definition at line 28 of file TSSLSocket.h. Public Member Functions;  TSSLSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const char *sockpath);  ;  TSSLSocket (const char *url, Int_t port, Int_t tcpwindowsize=-1);  ;  TSSLSocket (const TSSLSocket &s);  ;  TSSLSocket (Int_t desc);  ;  TSSLSocket (Int_t desc, const char *sockpath);  ;  TSSLSocket (TInetAddress addr, const char *service, Int_t tcpwindowsize=-1);  ;  TSSLSocket (TInetAddress addr, Int_t port, Int_t tcpwindowsize=-1);  ; virtual ~TSSLSocket ();  Close gracefully the connection, and free SSL structures. ;  ; void Close (Option_t *option="""") override;  Close the SSL connection. ;  ; TClass * IsA () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Receive a raw buffer of specified length bytes. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t Send (const TMessage &mess) override;  Send a TMessage object. ;  ; Int_t Send (Int_t kind) override;  Send a single message opcode. ;  ; Int_t Send (Int_t status, Int_t kind) override;  Send a status and a single message opcode. ;  ; Int_t SendRaw (const void *buffer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:66,Guid,Guide,66,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TSVDUnfold Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; List of all members ; TSVDUnfold Class ReferenceHistogram Library. ; SVD Approach to Data Unfolding. ; Reference: Nucl. Instrum. Meth. A372, 469 (1996) [hep-ph/9509307] ; TSVDUnfold implements the singular value decomposition based unfolding method (see reference). Currently, the unfolding of one-dimensional histograms is supported, with the same number of bins for the measured and the unfolded spectrum. ; The unfolding procedure is based on singular value decomposition of the response matrix. The regularisation of the unfolding is implemented via a discrete minimum-curvature condition. ; Monte Carlo inputs: . xini: true underlying spectrum (TH1D, n bins) . bini: reconstructed spectrum (TH1D, n bins) . Adet: response matrix (TH2D, nxn bins) . Consider the unfolding of a measured spectrum bdat with covariance matrix Bcov (if not passed explicitly, a diagonal covariance will be built given the errors of bdat). The corresponding spectrum in the Monte Carlo is given by bini, with the true underlying spectrum given by xini. The detector response is described by Adet, with Adet filled with events (not probabilities) with the true observable on the y-axis and the reconstructed observable on the x-axis. ; The measured distribution can be unfolded for any combination of resolution, efficiency and acceptance effects, provided an appropriate definition of xini and Adet. The unfolding can be performed by TSVDUnfold *tsvdunf = new TSVDUnfold( bdat, Bcov, bini, xini, Adet );; TH1D* unfresult = tsvdunf->Unfold( kreg );; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TSVDUnfoldSVD Approach to Data Unfolding.Definition TSVDUnfold.h:46; TSVDUnfold::UnfoldTH1D * Unfold(Int_t kreg)Perfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVDUnfold.html:66,Guid,Guide,66,doc/master/classTSVDUnfold.html,https://root.cern,https://root.cern/doc/master/classTSVDUnfold.html,1,['Guid'],['Guide']
Usability,". ROOT: TSVG Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSVG Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to SVG. ; SVG (Scalable Vector Graphics) is a language for describing two-dimensional graphics in XML. SVG allows high quality vector graphics in HTML pages.; To print a ROOT canvas ""c1"" into an SVG file simply do: c1->Print(""c1.svg"");; c1return c1Definition legend1.C:41; The result is the ASCII file c1.svg.; It can be open directly using a web browser or included in a html document the following way: <embed width=""95%"" height=""500"" src=""c1.svg"">; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; srcOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t srcDefinition TGWin32VirtualXProxy.cxx:164; heightOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t heightDefinition TGWin32VirtualXProxy.cxx:164; It is best viewed with Internet Explorer and you need the Adobe SVG Viewer; To zoom using the Adobe SVG Viewer, position the mouse over the area you want to zoom and click the right button.; To define the zoom area, use Control+drag to mark the boundaries of the zoom area.; To pan, use Alt+drag. By clicking with the right mouse button on the SVG graphics you will get a pop-up menu giving other ways to interact with the image.; SVG files can be used directly in compressed mode to minimize the time transfer over the network. Compressed SVG files should be created using gzip on a normal ASCII SVG file and should then be renamed using the file extension .svgz. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSVG.html:60,Guid,Guide,60,doc/master/classTSVG.html,https://root.cern,https://root.cern/doc/master/classTSVG.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TScatter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TScatter Class ReferenceHistogram Library » Graph classes. ; A TScatter is able to draw four variables scatter plot on a single plot. ; The two first variables are the x and y position of the markers, the third is mapped on the current color map and the fourth on the marker size.; The following example demonstrates how it works:; ; void scatter(); {; auto canvas = new TCanvas();; canvas->SetRightMargin(0.14);; gStyle->SetPalette(kBird, 0, 0.6); // define a transparent palette; ; const int n = 175;; double x[n];; double y[n];; double c[n];; double s[n];; ; // Define four random data set; auto r = new TRandom();; for (int i=0; i<n; i++) {; x[i] = 100*r->Rndm(i);; y[i] = 200*r->Rndm(i);; c[i] = 300*r->Rndm(i);; s[i] = 400*r->Rndm(i);; }; ; auto scatter = new TScatter(n, x, y, c, s);; scatter->SetMarkerStyle(20);; scatter->SetTitle(""Scatter plot title;X title;Y title;Z title"");; scatter->GetXaxis()->SetRangeUser(20.,90.);; scatter->GetYaxis()->SetRangeUser(55.,90.);; scatter->GetZaxis()->SetRangeUser(10.,200.);; scatter->Draw(""A"");; }; c#define c(i)Definition RSha256.hxx:101; kBird@ kBirdDefinition TColor.h:118; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TCanvasThe Canvas class.Definition TCanvas.h:23; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TScatter::TScatterTScatter()TScatter default constructor.Definition TScatter.cxx:58; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTScatter.html:64,Guid,Guide,64,doc/master/classTScatter.html,https://root.cern,https://root.cern/doc/master/classTScatter.html,1,['Guid'],['Guide']
Usability,". ROOT: TSecContext Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TSecContext Class Reference. . Definition at line 36 of file TSecContext.h. Public Member Functions;  TSecContext (const char *url, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ;  ;  TSecContext (const char *user, const char *host, Int_t meth, Int_t offset, const char *id, const char *token, TDatime expdate=kROOTTZERO, void *ctx=nullptr);  Ctor for SecContext object. ;  ; virtual ~TSecContext ();  Dtor: delete (deActivate, local/remote cleanup, list removal) all what is still active. ;  ; void AddForCleanup (Int_t port, Int_t proto, Int_t type);  Create a new TSecContextCleanup Internally is added to the list. ;  ; virtual const char * AsString (TString &out);  Returns short string with relevant information about this security context. ;  ; virtual void DeActivate (Option_t *opt=""CR"");  Set OffSet to -1 and expiring Date to default Remove from the list If Opt contains ""C"" or ""c"", ask for remote cleanup If Opt contains ""R"" or ""r"", remove from the list Default Opt=""CR"". ;  ; void * GetContext () const;  ; TDatime GetExpDate () const;  ; const char * GetHost () const;  ; const char * GetID () const;  ; Int_t GetMethod () const;  ; const char * GetMethodName () const;  ; Int_t GetOffSet () const;  ; TList * GetSecContextCleanup () const;  ; const char * GetToken () const;  ; const char * GetUser () const;  ; TClass * IsA () const override;  ; Bool_t IsA (const char *methodname);  Checks if this security context is for method named 'methname' Case sensitive. ;  ; Bool_t IsActive () const;  Check remote OffSet and expiring Date. ;  ; void Print (Option_t *option=""F"") const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContext.html:67,Guid,Guide,67,doc/master/classTSecContext.html,https://root.cern,https://root.cern/doc/master/classTSecContext.html,1,['Guid'],['Guide']
Usability,". ROOT: TSecContextCleanup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSecContextCleanup Class Reference. . Definition at line 108 of file TSecContext.h. Public Member Functions;  TSecContextCleanup (Int_t port, Int_t proto, Int_t type);  ; virtual ~TSecContextCleanup ();  ; Int_t GetPort () const;  ; Int_t GetProtocol () const;  ; Int_t GetType () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSecContextCleanup.html:74,Guid,Guide,74,doc/master/classTSecContextCleanup.html,https://root.cern,https://root.cern/doc/master/classTSecContextCleanup.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelEvent Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TSelEvent Class ReferencePROOF » PROOF benchmark utilities. ; Selector for PROOF I/O benchmark test. ; For the I/O benchmark, event files are read in and histograms are filled. For memory clean-up, dedicated files large enough to clean up memory cache on the machine are read in. Or memory clean-up can be accompolished by system call on Linux machine inside SlaveBegin(..) which should be much faster the reading in large files. ; Definition at line 42 of file TSelEvent.h. Public Member Functions;  TSelEvent ();  Constructor. ;  ;  TSelEvent (TTree *);  Constructor. ;  ; virtual ~TSelEvent ();  ; virtual void Begin (TTree *);  The Begin() function is called at the start of the query. ;  ; TCanvas * GetCHist ();  ; Bool_t GetDebug ();  ; TH1F * GetNTracksHist ();  ; virtual TList * GetOutputList () const;  ; TH1F * GetPtHist ();  ; TPBReadType * GetReadType ();  ; virtual void Init (TTree *tree);  ; TClass * IsA () const override;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual Bool_t Process (Long64_t entry);  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; virtual void SetInputList (TList *input);  ; virtual void SetObject (TObject *obj);  ; virtual void SetOption (const char *option);  ; virtual void SlaveBegin (TTree *tree);  The SlaveBegin() function is called after the Begin() function. ;  ; virtual void SlaveTerminate ();  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEvent.html:65,Guid,Guide,65,doc/master/classTSelEvent.html,https://root.cern,https://root.cern/doc/master/classTSelEvent.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelEventGen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Protected Member Functions |; Private Attributes |; List of all members ; TSelEventGen Class ReferencePROOF » PROOF benchmark utilities. ; Selector for event file generation. ; List of files to be generated for each node is provided by client. And list of files generated is sent back. Existing files are reused if not forced to be regenerated. ; Definition at line 33 of file TSelEventGen.h. Public Member Functions;  TSelEventGen ();  pointer to the analyzed TTree or TChain ;  ;  ~TSelEventGen () override;  ; void Begin (TTree *) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; void Init (TTree *tree) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:68,Guid,Guide,68,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelHandleDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSelHandleDataSet Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for file cache release. ; List of files to be cleaned for each node is provided by client. ; Definition at line 30 of file TSelHandleDataSet.h. Public Member Functions;  TSelHandleDataSet ();  ;  ~TSelHandleDataSet () override;  ; void Begin (TTree *) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *) override;  Init the type from the input parameters. ;  ; void SlaveTerminate () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:73,Guid,Guide,73,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelHist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSelHist Class ReferencePROOF » PROOF benchmark utilities. ; PROOF selector for CPU-intensive benchmark test. ; Events are generated and 1-D, 2-D, and/or 3-D histograms are filled. ; Definition at line 32 of file TSelHist.h. Public Member Functions;  TSelHist ();  Constructor. ;  ;  ~TSelHist () override;  Destructor. ;  ; void Begin (TTree *tree) override;  The Begin() function is called at the start of the query. ;  ; TList * GetOutputList () const override;  ; TClass * IsA () const override;  ; Bool_t Process (Long64_t entry) override;  The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  The SlaveBegin() function is called after the Begin() function. ;  ; void SlaveTerminate () override;  The SlaveTerminate() function is called after all entries or objects have been processed. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  The Terminate() function is the last function to be called during a query. ;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHist.html:64,Guid,Guide,64,doc/master/classTSelHist.html,https://root.cern,https://root.cern/doc/master/classTSelHist.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelVerifyDataSet Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSelVerifyDataSet Class ReferencePROOF » PROOF kernel Libraries. ; Selector to verify dataset in parallel on workers. ; Definition at line 28 of file TSelVerifyDataSet.h. Public Member Functions;  TSelVerifyDataSet ();  Constructor. ;  ;  TSelVerifyDataSet (TTree *);  Constructor. ;  ;  ~TSelVerifyDataSet () override;  ; void Begin (TTree *) override;  ; TList * GetOutputList () const override;  ; void Init (TTree *) override;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; Bool_t Process (Long64_t entry) override;  Process a single entry. ;  ; void SetInputList (TList *input) override;  ; void SetObject (TObject *obj) override;  ; void SetOption (const char *option) override;  ; void SlaveBegin (TTree *tree) override;  Worker Begin. ;  ; void SlaveTerminate () override;  Worker Terminate. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Terminate () override;  ; Int_t Version () const override;  ;  Public Member Functions inherited from TSelector;  TSelector ();  Default selector ctor. ;  ;  ~TSelector () override;  Selector destructor. ;  ; virtual void Abort (const char *why, EAbort what=kAbortProcess);  Abort processing. ;  ; virtual EAbort GetAbort () const;  ; virtual Int_t GetEntry (Long64_t, Int_t=0);  ; virtual TList * GetInputList () const;  ; const char * GetOption () const override;  ; virtual Long64_t GetStatus () const;  ; virtual void ImportOutput (TList *output);  Imports the content of 'output' in the internal output list. ;  ; virtual bool ProcessCut (Long",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelVerifyDataSet.html:73,Guid,Guide,73,doc/master/classTSelVerifyDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelVerifyDataSet.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelector Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSelector Class ReferenceTree Library. ; A TSelector object is used by the TTree::Draw, TTree::Scan, TTree::Process to navigate in a TTree and make selections. ; It contains the following main methods:. void TSelector::Init(TTree *t). Called every time a new TTree is attached.; void TSelector::SlaveBegin(). Create e.g. histograms in this method. This method is called (with or without PROOF) before looping on the entries in the Tree. When using PROOF, this method is called on each worker node.; void TSelector::Begin(). Mostly for backward compatibility; use SlaveBegin() instead. Both methods are called before looping on the entries in the Tree. When using PROOF, Begin() is called on the client only.; bool TSelector::Notify(). This method is called at the first entry of a new file in a chain.; bool TSelector::Process(Long64_t entry). This method is called to process an entry. It is the user's responsibility to read the corresponding entry in memory (may be just a partial read). Once the entry is in memory one can apply a selection and if the entry is selected histograms can be filled. Processing stops when this function returns false. This function combines the next two functions in one, avoiding to have to maintain state in the class to communicate between these two functions. See WARNING below about entry. This method is used by PROOF.; bool TSelector::ProcessCut(Long64_t entry). This method is called before processing entry. It is the user's responsibility to read the corresponding entry in memory (may be just a partial read). The function returns true if the entry must be processed, false otherwise. This method is obsolete, use Process(). See WARNING below about entry.; void TSele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelector.html:65,Guid,Guide,65,doc/master/classTSelector.html,https://root.cern,https://root.cern/doc/master/classTSelector.html,1,['Guid'],['Guide']
Usability,. ROOT: TSelectorDraw Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSelectorDraw Class Reference. ; A specialized TSelector for TTree::Draw. ; Definition at line 33 of file TSelectorDraw.h. Public Member Functions;  TSelectorDraw ();  Default selector constructor. ;  ;  ~TSelectorDraw () override;  Selector destructor. ;  ; void Begin (TTree *tree) override;  Called every time a loop on the tree(s) starts. ;  ; virtual Int_t GetAction () const;  ; virtual bool GetCleanElist () const;  ; virtual Int_t GetDimension () const;  ; virtual Long64_t GetDrawFlag () const;  ; Int_t GetMultiplicity () const;  ; virtual Int_t GetNfill () const;  ; TObject * GetObject () const;  ; TH1 * GetOldHistogram () const;  ; TTreeFormula * GetSelect () const;  ; virtual Long64_t GetSelectedRows () const;  ; TTree * GetTree () const;  ; virtual Double_t * GetV1 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV2 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV3 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetV4 () const;  See TSelectorDraw::GetVal. ;  ; virtual Double_t * GetVal (Int_t i) const;  Return the last values corresponding to the i-th component of the formula being processed (where the component are ':' separated). ;  ; TTreeFormula * GetVar (Int_t i) const;  Return the TTreeFormula corresponding to the i-th component of the request formula (where the component are ':' separated). ;  ; TTreeFormula * GetVar1 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar2 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar3 () const;  See TSelectorDraw::GetVar. ;  ; TTreeFormula * GetVar4 () const;  See TSelectorDraw::GetVar. ;  ; virtual Double_t * GetW () con,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:69,Guid,Guide,69,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelectorEntries Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Attributes |; List of all members ; TSelectorEntries Class Reference. ; The class is derived from the ROOT class TSelector. ; For more information on the TSelector framework see $ROOTSYS/README/README.SELECTOR or the ROOT User Manual.; The following methods are defined in this file:. Begin(): called every time a loop on the tree starts, a convenient place to create your histograms.; SlaveBegin(): called after Begin(), when on PROOF called only on the slave servers.; Process(): called for each event, in this function you decide what to read and fill your histograms.; SlaveTerminate: called at the end of the loop on the tree, when on PROOF called only on the slave servers.; Terminate(): called at the end of the loop on the tree, a convenient place to draw/fit your histograms. To use this file, try the following session on your Tree T: Root > T->Process(""TSelectorEntries.C""); Root > T->Process(""TSelectorEntries.C"",""some options""); Root > T->Process(""TSelectorEntries.C+""). Definition at line 34 of file TSelectorEntries.h. Public Member Functions;  TSelectorEntries (const char *selection);  Constructor. ;  ;  TSelectorEntries (TTree *tree=nullptr, const char *selection=nullptr);  Default, constructor. ;  ;  ~TSelectorEntries () override;  Destructor. ;  ; void Begin (TTree *tree) override;  The Begin() function is called at the start of the query. ;  ; Int_t GetEntry (Long64_t entry, Int_t getall=0) override;  Read entry. ;  ; TList * GetOutputList () const override;  ; virtual Long64_t GetSelectedRows () const;  ; void Init (TTree *tree) override;  The Init() function is called when the selector needs to initialize a new tree or chain. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This function is called at the first en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorEntries.html:72,Guid,Guide,72,doc/master/classTSelectorEntries.html,https://root.cern,https://root.cern/doc/master/classTSelectorEntries.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelectorList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; List of all members ; TSelectorList Class ReferenceTree Library. ; A TList derived class that makes sure that objects added to it are not linked to the currently open file (like histograms, eventlists and trees). ; Also it makes sure the name of the added object is unique. This class is used in the TSelector for the output list. ; Definition at line 31 of file TSelectorList.h. Public Member Functions;  TSelectorList ();  ; void AddAfter (const TObject *after, TObject *obj) override;  Add to the list. ;  ; void AddAfter (TObjLink *after, TObject *obj) override;  Add to the list. ;  ; void AddAt (TObject *obj, Int_t idx) override;  Add to the list. ;  ; void AddBefore (const TObject *before, TObject *obj) override;  Add to the list. ;  ; void AddBefore (TObjLink *before, TObject *obj) override;  Add to the list. ;  ; void AddFirst (TObject *obj) override;  Add at the start of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add at the start of the list. ;  ; void AddLast (TObject *obj) override;  Add at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add at the end of the list. ;  ;  Public Member Functions inherited from THashList;  THashList (Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  Create a THashList object. ;  ;  THashList (TObject *parent, Int_t capacity=TCollection::kInitHashTableCapacity, Int_t rehash=0);  For backward compatibility only. Use other ctor. ;  ; virtual ~THashList ();  Delete a hashlist. ;  ; Float_t AverageCollisions () const;  Return the average collision rate. ;  ; void Clear (Option_t *option="""") override;  Remove all objects from the list. ;  ; void Delete (Option_t *option="""") override;  Remove all objects from the list AND delete all heap based objects. ;  ; TObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorList.html:69,Guid,Guide,69,doc/master/classTSelectorList.html,https://root.cern,https://root.cern/doc/master/classTSelectorList.html,1,['Guid'],['Guide']
Usability,". ROOT: TSelectorScalar Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TSelectorScalar Class ReferenceTree Library. ; Named scalar type, based on Long64_t, streamable, storable and mergeable. ; Ideally to be used in tree selectors in the PROOF environment due to its merge functionality which allows a single merged value to be returned to the user. ; Definition at line 35 of file TSelectorScalar.h. Public Member Functions;  TSelectorScalar (const char *name="""", Long64_t val=0);  ;  ~TSelectorScalar () override;  ; void Inc (Long_t n=1);  Increment scalar value by n. ;  ; TClass * IsA () const override;  ; Int_t Merge (TCollection *list) override;  Merge scalars with scalars in the list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TParameter< Long64_t >;  TParameter ();  ;  TParameter (const char *name, const Long64_t &val);  ;  TParameter (const char *name, const Long64_t &val, char mergemode);  ; virtual ~TParameter ();  ; Int_t Compare (const TObject *obj) const override;  Compare abstract method. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const Long64_t & GetVal () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsConst () const;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *) const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t Merge (TCollection *in);  ; void Print (Option_t *) const override;  This method must be overridden when a class wants to print itself. ;  ; void SetMergeMode (char mergemode='+');  ; void SetVal (const Long64_t &val);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorScalar.html:71,Guid,Guide,71,doc/master/classTSelectorScalar.html,https://root.cern,https://root.cern/doc/master/classTSelectorScalar.html,1,['Guid'],['Guide']
Usability,". ROOT: TSemaphore Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSemaphore Class Reference. . Definition at line 29 of file TSemaphore.h. Public Member Functions;  TSemaphore (Int_t initial=1);  Create counting semaphore. ;  ; virtual ~TSemaphore ();  ; TClass * IsA () const override;  ; Int_t Post ();  Increment the value of the semaphore. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryWait ();  If the semaphore value is > 0 then decrement it and return 0. ;  ; Int_t Wait ();  If the semaphore value is > 0 then decrement it and carry on, else block, waiting on the condition until it is signaled. ;  ; Int_t Wait (Int_t millisec);  If the semaphore value is > 0 then decrement it and carry on, else block. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSemaphore.html:66,Guid,Guide,66,doc/master/classTSemaphore.html,https://root.cern,https://root.cern/doc/master/classTSemaphore.html,1,['Guid'],['Guide']
Usability,". ROOT: TSeqCollection Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSeqCollection Class ReferenceabstractCore ROOT classes » Containers. ; Sequenceable collection abstract base class. ; TSeqCollection's have an ordering relation, i.e. there is a first and last element. ; Definition at line 28 of file TSeqCollection.h. Public Member Functions; virtual ~TSeqCollection ();  ; void Add (TObject *obj) override;  ; virtual void AddAfter (const TObject *after, TObject *obj)=0;  ; virtual void AddAt (TObject *obj, Int_t idx)=0;  ; virtual void AddBefore (const TObject *before, TObject *obj)=0;  ; virtual void AddFirst (TObject *obj)=0;  ; virtual void AddLast (TObject *obj)=0;  ; virtual TObject * After (const TObject *obj) const =0;  ; virtual TObject * At (Int_t idx) const =0;  ; virtual TObject * Before (const TObject *obj) const =0;  ; virtual TObject * First () const =0;  ; virtual Int_t GetLast () const;  Returns index of last object in collection. ;  ; virtual Int_t IndexOf (const TObject *obj) const;  Return index of object in collection. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; virtual TObject * Last () const =0;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; virtual void RemoveLast ();  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection.html:70,Guid,Guide,70,doc/master/classTSeqCollection.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection.html,1,['Guid'],['Guide']
Usability,". ROOT: TServerSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TServerSocket Class Reference. . Definition at line 42 of file TServerSocket.h. Public Types; enum  { kDefaultBacklog = 10; };  ;  Public Types inherited from TSocket; enum  EInterest { kRead = 1; , kWrite = 2; };  ; enum  EServiceType { kSOCKD; , kROOTD; , kPROOFD; };  ; enum  EStatusBits { kIsUnix = (1ULL << ( 16 )); , kBrokenConn = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TServerSocket (const char *service, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object for a named service. ;  ;  TServerSocket (Int_t port, Bool_t reuse=kFALSE, Int_t backlog=kDefaultBacklog, Int_t tcpwindowsize=-1);  Create a server socket object on a specified port. ;  ; virtual ~TServerSocket ();  Destructor: cleanup authentication stuff (if any) and close. ;  ; virtual TSocket * Accept (UChar_t Opt=0);  Accept a connection on a server socket. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of host to which the server socket is bound, i.e. ;  ; Int_t GetLocalP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:69,Guid,Guide,69,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionDescription Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSessionDescription Class Reference. . Definition at line 127 of file TSessionViewer.h. Public Member Functions; const char * GetName () const override;  Returns name of object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionDescription.html:75,Guid,Guide,75,doc/master/classTSessionDescription.html,https://root.cern,https://root.cern/doc/master/classTSessionDescription.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionFrame Class Reference. . Definition at line 246 of file TSessionViewer.h. Public Member Functions;  TSessionFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build session frame. ;  ; void CheckAutoEnPack (Bool_t checked=kTRUE);  ; Int_t GetLogLevel () const;  ; TGTab * GetTab () const;  ; TClass * IsA () const override;  ; void OnApplyLogLevel ();  Apply selected log level on current session. ;  ; void OnApplyParallel ();  Apply selected number of workers on current Proof session. ;  ; void OnBtnAddClicked ();  Open file dialog and add selected package file to the list. ;  ; void OnBtnDisconnectClicked ();  Disconnect from current Proof session. ;  ; void OnBtnDownClicked ();  Move selected package entry one position down in the list. ;  ; void OnBtnGetQueriesClicked ();  Get list of queries from current Proof server and populate the list tree. ;  ; void OnBtnNewQueryClicked ();  Call ""New Query"" Dialog. ;  ; void OnBtnRemoveClicked ();  Remove selected package from the list. ;  ; void OnBtnRemoveDSet ();  Remove dataset from the list and from the cluster. ;  ; void OnBtnShowLogClicked ();  Show session log. ;  ; void OnBtnUpClicked ();  Move selected package entry one position up in the list. ;  ; void OnBtnUploadDSet ();  Open Upload Dataset dialog. ;  ; void OnBtnVerifyDSet ();  Verify that the files in the selected dataset are present on the cluster. ;  ; void OnClearPackages ();  Clear (disable) all packages in the current session. ;  ; void OnCommandLine ();  Command line handling. ;  ; void OnDisablePackages ();  Disable selected package(s) in the current session. ;  ; void OnEnablePackages ();  Enable selected pac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionFrame.html:69,Guid,Guide,69,doc/master/classTSessionFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionInputFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionInputFrame Class Reference. . Definition at line 488 of file TSessionViewer.h. Public Member Functions;  TSessionInputFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionInputFrame () override;  Destructor. ;  ; void AddObject (TObject *obj);  Add object to input list view. ;  ; void Build (TSessionViewer *gui);  Build query input information frame. ;  ; TGLVContainer * GetLVContainer ();  ; TClass * IsA () const override;  ; void RemoveAll () override;  Remove all frames from composite frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup and delete all objects contained in this composite frame. ;  ; virtual TGFrameElement * FindFrameElement (TGFrame *f) const;  Find frame-element holding frame f. ;  ; UInt_t GetDefaultHeight () const override;  ; TGDimension GetDefaultSize () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionInputFrame.html:74,Guid,Guide,74,doc/master/classTSessionInputFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionInputFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionOutputFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionOutputFrame Class Reference. . Definition at line 459 of file TSessionViewer.h. Public Member Functions;  TSessionOutputFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionOutputFrame () override;  Destructor. ;  ; void AddObject (TObject *obj);  Add object to output list view. ;  ; void Build (TSessionViewer *gui);  Build query output information frame. ;  ; TGLVContainer * GetLVContainer ();  ; TClass * IsA () const override;  ; void OnElementClicked (TGLVEntry *entry, Int_t btn, Int_t x, Int_t y);  Handle mouse clicks on list view items. ;  ; void OnElementDblClicked (TGLVEntry *entry, Int_t btn, Int_t x, Int_t y);  Handle double-clicks on list view items. ;  ; void RemoveAll () override;  Remove all frames from composite frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (Pixel_t back);  Change background color for this frame and all subframes. ;  ; virtual void Cleanup ();  Cleanup ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionOutputFrame.html:75,Guid,Guide,75,doc/master/classTSessionOutputFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionOutputFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionQueryFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TSessionQueryFrame Class Reference. . Definition at line 377 of file TSessionViewer.h. Public Member Functions;  TSessionQueryFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionQueryFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build query information frame. ;  ; void Feedback (TList *objs);  Feedback function connected to Feedback signal. ;  ; TEditQueryFrame * GetQueryEditFrame () const;  ; TCanvas * GetStatsCanvas () const;  ; TGTab * GetTab () const;  ; void IndicateStop (Bool_t aborted);  Indicate that Cancel or Stop was clicked. ;  ; TClass * IsA () const override;  ; void Modified (Bool_t mod=kTRUE);  Notify changes in query editor settings. ;  ; void OnBtnAbort ();  Abort processing query. ;  ; void OnBtnFinalize ();  Finalize query. ;  ; void OnBtnRetrieve ();  Retrieve query. ;  ; void OnBtnShowLog ();  Show query log. ;  ; void OnBtnStop ();  Stop processing query. ;  ; void OnBtnSubmit ();  Submit query. ;  ; void Progress (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  New version of Progress (just forward to the old version for the time being). ;  ; void ProgressLocal (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void ResetProgressDialog (const char *selec, Int_t files, Long64_t first, Long64_t entries);  Reset progress frame information fields. ;  ; void S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:74,Guid,Guide,74,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,4,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,". ROOT: TSessionServerFrame Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionServerFrame Class Reference. . Definition at line 180 of file TSessionViewer.h. Public Member Functions;  TSessionServerFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionServerFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build server configuration frame. ;  ; const char * GetAddress () const;  ; const char * GetConfigText () const;  ; Int_t GetLogLevel () const;  ; const char * GetName () const override;  Return unique name, used in SavePrimitive methods. ;  ; Int_t GetPortNumber () const;  ; const char * GetUserName () const;  ; Bool_t HandleExpose (Event_t *event) override;  Handle expose event in server frame. ;  ; TClass * IsA () const override;  ; Bool_t IsSync () const;  ; void OnBtnAddClicked ();  Add newly created session configuration in the list of sessions. ;  ; void OnBtnConnectClicked ();  Connect to selected server. ;  ; void OnBtnDeleteClicked ();  Delete selected session configuration (remove it from the list). ;  ; void OnBtnNewServerClicked ();  Reset server configuration fields. ;  ; void OnConfigFileClicked ();  Browse configuration files. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for session server frame. ;  ; void SetAddEnabled (Bool_t on=kTRUE);  ; void SetAddress (const char *str);  ; void SetConfigText (const char *str);  ; void SetConnectEnabled (Bool_t on=kTRUE);  ; void SetLogLevel (Int_t log);  ; void SetName (const char *str) override;  ; void SetPortNumber (Int_t port);  ; void SetSync (Bool_t sync);  ; void SettingsChanged ();  Settings have changed, update GUI accordingly. ;  ; void SetUserName (const char *str);  ; void Streamer (TBuffer &) override;  Stream an obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionServerFrame.html:75,Guid,Guide,75,doc/master/classTSessionServerFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionServerFrame.html,1,['Guid'],['Guide']
Usability,". ROOT: TSessionViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSessionViewer Class ReferenceGUI » Session Viewer. ; Widget used to manage PROOF or local sessions, PROOF connections, queries construction and results handling. ; Definition at line 515 of file TSessionViewer.h. Public Member Functions;  TSessionViewer (const char *title, Int_t x, Int_t y, UInt_t w, UInt_t h);  Main Session viewer constructor. ;  ;  TSessionViewer (const char *title=""ROOT Session Viewer"", UInt_t w=550, UInt_t h=320);  Main Session viewer constructor. ;  ;  ~TSessionViewer () override;  Destructor. ;  ; virtual void Build ();  Build main session viewer frame and subframes. ;  ; void ChangeRightLogo (const char *name);  Change the right logo (used for animation). ;  ; void CleanupSession ();  Clean-up Proof session. ;  ; void CloseWindow () override;  Close main Session Viewer window. ;  ; void DeleteQuery ();  Delete query from list tree and ask user if they want to delete it also from server. ;  ; void DisableTimer ();  Disable animation timer. ;  ; void EditQuery ();  Edit currently selected query. ;  ; void EnableTimer ();  Enable animation timer. ;  ; TSessionDescription * GetActDesc () const;  ; const TGPicture * GetBasePict () const;  ; TGPopupMenu * GetCascadeMenu () const;  ; TGHProgressBar * GetConnectProg () const;  ; TContextMenu * GetContextMenu () const;  ; TSessionInputFrame * GetInputFrame () const;  ; const TGPicture * GetLocalPict () const;  ; TGPopupMenu * GetOptionsMenu () const;  ; TSessionOutputFrame * GetOutputFrame () const;  ; TGPopupMenu * GetPopupQry () const;  ; TGPopupMenu * GetPopupSrv () const;  ; const TGPicture * GetProofConPict () const;  ; const TGPicture * GetProofDisconPict () const;  ; const TGPicture * GetQueryConPict () const;  ; const TGPicture * GetQueryDisconPict ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionViewer.html:70,Guid,Guide,70,doc/master/classTSessionViewer.html,https://root.cern,https://root.cern/doc/master/classTSessionViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TShape Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TShape Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; This is the base class for all geometry shapes. ; /The list of shapes currently supported correspond to the shapes in Geant version 3:; TBRIK,TCONE,TCONS,TGTRA,TPARA,TPCON,TPGON; TTRAP,TTRD1,TTRD2,THYPE, TTUBE and TTUBS.; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TCONEA conical tube.Definition TCONE.h:28; TCONSA segment of a conical tube.Definition TCONS.h:27; TGTRAA general twisted trapezoid.Definition TGTRA.h:27; THYPEAn hyperboloid (not implemented)Definition THYPE.h:28; TPARAA parallelepiped.Definition TPARA.h:30; TPCONA polycone.Definition TPCON.h:33; TPGONA polygon.Definition TPGON.h:30; TTRAPA general trapezoid.Definition TTRAP.h:33; TTRD1A trapezoid with the x dimension varying along z.Definition TTRD1.h:28; TTRD2A trapezoid with both x and y dimensions varying along z.Definition TTRD2.h:29; TTUBEA tube.Definition TTUBE.h:32; TTUBSA segment of a tube.Definition TTUBS.h:29; The figure below shows instances of all these shapes. This figure is generated by the ROOT 3-D viewer. Definition at line 35 of file TShape.h. Public Member Functions;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *material);  Shape normal constructor. ;  ;  TShape (const TShape &);  copy constructor ;  ;  ~TShape () override;  Shape default destructor. ;  ; virtual const TBuffer3D & GetBuffer3D (Int_t reqSections) const;  Stub to avoid forcing implementation at this stage. ;  ; TMaterial * GetMaterial () const;  ; virtual Int_t GetNumber () const;  ; Int_t GetVisibility () const;  ; TClass * IsA () const override;  ; TShape & operator= (const TShape &);  assignment operat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTShape.html:62,Guid,Guide,62,doc/master/classTShape.html,https://root.cern,https://root.cern/doc/master/classTShape.html,1,['Guid'],['Guide']
Usability,". ROOT: TShutdownTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TShutdownTimer Class Reference. . Definition at line 416 of file TProofServ.h. Public Member Functions;  TShutdownTimer (TProofServ *p, Int_t delay);  Construtor. ;  ; Bool_t Notify () override;  Handle expiration of the shutdown timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTShutdownTimer.html:70,Guid,Guide,70,doc/master/classTShutdownTimer.html,https://root.cern,https://root.cern/doc/master/classTShutdownTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TSignalHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSignalHandler Class Reference. . Definition at line 127 of file TSysEvtHandler.h. Public Member Functions;  TSignalHandler (ESignals sig, Bool_t sync=kTRUE);  Create signal event handler. ;  ; virtual ~TSignalHandler ();  ; void Add () override;  Add signal handler to system signal handler list. ;  ; void Delay ();  ; ESignals GetSignal () const;  ; void HandleDelayedSignal ();  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove signal handler from system signal handler list. ;  ; void SetSignal (ESignals sig);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSignalHandler.html:70,Guid,Guide,70,doc/master/classTSignalHandler.html,https://root.cern,https://root.cern/doc/master/classTSignalHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TSingleShotCleaner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSingleShotCleaner Class Reference. . Definition at line 54 of file TTimer.cxx. Public Member Functions;  TSingleShotCleaner ();  ; virtual ~TSingleShotCleaner ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void TurnOn () override;  Add the timer to the system timer list. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSingleShotCleaner.html:74,Guid,Guide,74,doc/master/classTSingleShotCleaner.html,https://root.cern,https://root.cern/doc/master/classTSingleShotCleaner.html,1,['Guid'],['Guide']
Usability,". ROOT: TSlave Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Static Private Attributes |; Friends |; List of all members ; TSlave Class ReferencePROOF » PROOF kernel Libraries. ; Class describing a PROOF worker server. ; It contains information like the workers host name, ordinal number, performance index, socket, etc. Objects of this class can only be created via TProof member functions. ; Definition at line 46 of file TSlave.h. Public Types; enum  ESlaveStatus { kInvalid; , kActive; , kInactive; };  ; enum  ESlaveType { kMaster; , kSlave; };  ; enum  EStatusBits { kOutputRequested = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TSlave () override;  Destroy slave. ;  ; virtual void Close (Option_t *opt="""");  Close slave socket. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlave.html:62,Guid,Guide,62,doc/master/classTSlave.html,https://root.cern,https://root.cern/doc/master/classTSlave.html,1,['Guid'],['Guide']
Usability,". ROOT: TSlaveInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TSlaveInfo Class Reference. . Definition at line 212 of file TProof.h. Public Types; enum  ESlaveStatus { kActive; , kNotActive; , kBad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSlaveInfo (const char *ordinal="""", const char *host="""", Int_t perfidx=0, const char *msd="""", const char *datadir="""");  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaveinfos by ordinal. ;  ; const char * GetDataDir () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; SysInfo_t GetSysInfo () const;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Used to compare slaveinfos by ordinal. ;  ; Bool_t IsSortable () const override;  ; void Print (Option_t *option="""") const override;  Print slave info. ;  ; void SetOrdinal (const char *ord);  ; void SetStatus (ESlaveStatus stat);  ; void SetSysInfo (SysInfo_t si);  Setter for fSysInfo. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlaveInfo.html:66,Guid,Guide,66,doc/master/classTSlaveInfo.html,https://root.cern,https://root.cern/doc/master/classTSlaveInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TSlaveLite Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TSlaveLite Class ReferencePROOF » PROOF kernel Libraries. ; Version of TSlave for local worker servers. ; See TSlave for details. ; Definition at line 31 of file TSlaveLite.h. Public Member Functions;  TSlaveLite (const char *ord, Int_t perf, const char *image, TProof *proof, Int_t stype, const char *workdir, const char *msd, Int_t=1);  Create a PROOF slave object. Called via the TProof ctor. ;  ;  ~TSlaveLite () override;  Destroy slave. ;  ; void Close (Option_t *opt="""") override;  Close slave socket. ;  ; void DoError (int level, const char *location, const char *fmt, va_list va) const override;  Interface to ErrorHandler (protected). ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Printf info about slave. ;  ; Int_t SetupServ (Int_t stype, const char *conffile) override;  Init a PROOF slave object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSlave;  ~TSlave () override;  Destroy slave. ;  ; Int_t Compare (const TObject *obj) const override;  Used to sort slaves by performance index. ;  ; const char * GetArchCompiler () const;  ; Long64_t GetBytesRead () const;  ; Float_t GetCpuTime () const;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TFileHandler * GetInputHandler () const;  ; const char * GetMsd () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Int_t GetParallel () const;  ; Int_t GetPerfIdx () const;  ; Int_t GetPort () const;  ; TProof * GetProof () const;  ; const char * GetProofWorkDir () const;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlaveLite.html:66,Guid,Guide,66,doc/master/classTSlaveLite.html,https://root.cern,https://root.cern/doc/master/classTSlaveLite.html,1,['Guid'],['Guide']
Usability,". ROOT: TSlider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSlider Class ReferenceGraphics » 2D Graphics » Graphics pad. ; A specialized TPad including a TSliderBox object. ; The TSliderBox can be moved in the pad.; Slider drawing options include the possibility to change the slider starting and ending positions or only one of them.; The current slider position can be retrieved via the functions TSlider::GetMinimum and TSlider::GetMaximum These two functions return numbers in the range [0,1].; If a method has been set (via TSlider::SetMethod), the expression is executed via the interpreter when the button 1 is released.; if no method has been set, and an object is referenced (TSlider::SetObject has been called), while the slider is being moved/resized, the object ExecuteEvent function is called. Example 1 using TSlider::SetMethod; macro xyslider.C; void xyslider(); {; // Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""Color plot pad"",0.1,0.1,0.98,0.98);; pad->Draw();; pad->cd();; hpxpy->Draw(""COLZ"");; c1->cd();; ; // Create two sliders in main canvas. When button1 will be released; // the macro action.C will be called.; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSlider.html:63,Guid,Guide,63,doc/master/classTSlider.html,https://root.cern,https://root.cern/doc/master/classTSlider.html,1,['Guid'],['Guide']
Usability,". ROOT: TSliderBox Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSliderBox Class ReferenceGraphics » 2D Graphics » Graphics pad. ; The moving box in a TSlider. ; Definition at line 20 of file TSliderBox.h. Public Member Functions;  TSliderBox ();  SliderBox default constructor. ;  ;  TSliderBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=2, Short_t bordermode=-1);  SliderBox normal constructor. ;  ;  ~TSliderBox () override;  SliderBox default destructor. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Interaction with a slider. ;  ; TClass * IsA () const override;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void SetSlider (TSlider *slider);  ; void Streamer (TBuffer &) override;  Stream an object of class TBox. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TWbox;  TWbox ();  ;  TWbox (const TWbox &wbox);  wbox copy constructor. ;  ;  TWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=18, Short_t bordersize=5, Short_t bordermode=1);  wbox normal constructor. ;  ;  ~TWbox () override=default;  ; void Copy (TObject &wbox) const override;  Copy this wbox to wbox. ;  ; void Draw (Option_t *option="""") override;  Draw this wbox with its current attributes. ;  ; virtual TWbox * DrawWbox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color=33, Short_t bordersize=5, Short_t bordermode=-1);  Draw this wbox with new coordinates. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; Short_t GetBorderMode () const;  ; Short_t GetBorderSize () const;  ; In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSliderBox.html:66,Guid,Guide,66,doc/master/classTSliderBox.html,https://root.cern,https://root.cern/doc/master/classTSliderBox.html,1,['Guid'],['Guide']
Usability,". ROOT: TSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TSocket Class Reference. . Definition at line 41 of file TSocket.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ; enum  EServiceType { kSOCKD; , kROOTD; , kPROOFD; };  ; enum  EStatusBits { kIsUnix = (1ULL << ( 16 )); , kBrokenConn = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSocket (const char *host, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (const char *host, Int_t port, Int_t tcpwindowsize=-1);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TSocket (const TSocket &s);  TSocket copy ctor. ;  ;  TSocket (Int_t descriptor);  Create a socket. ;  ;  TSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TSocket (TInetAddress address, const char *service, Int_t tcpwindowsize=-1);  Create a socket. ;  ;  TSocket (TInetAddress address, Int_t port, Int_t tcpwindowsize=-1);  Create a socket. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:63,Guid,Guide,63,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TSocketHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TSocketHandler Class Reference. . Definition at line 39 of file TMonitor.cxx. Public Member Functions;  TSocketHandler (TMonitor *m, TSocket *s, Int_t interest, Bool_t mainloop=kTRUE);  ; TSocket * GetSocket () const;  ; Bool_t Notify () override;  Notify when event occurred on descriptor associated with this handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ; Bool_t WriteNotify () override;  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocketHandler.html:70,Guid,Guide,70,doc/master/classTSocketHandler.html,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TSortedList Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TSortedList Class ReferenceCore ROOT classes » Containers. ; A sorted doubly linked list. ; All sortable classes inheriting from TObject can be inserted in a TSortedList. ; Definition at line 28 of file TSortedList.h. Public Member Functions;  TSortedList (Bool_t order=kSortAscending);  ; void Add (TObject *obj) override;  Add object in sorted list. ;  ; void Add (TObject *obj, Option_t *opt) override;  Add object in sorted list. ;  ; void AddAfter (const TObject *, TObject *obj) override;  Insert object after object after in the list. ;  ; void AddAfter (TObjLink *, TObject *obj) override;  Insert object after the specified ObjLink object. ;  ; void AddAt (TObject *obj, Int_t) override;  Insert object at position idx in the list. ;  ; void AddBefore (const TObject *, TObject *obj) override;  Insert object before object before in the list. ;  ; void AddBefore (TObjLink *, TObject *obj) override;  Insert object before the specified ObjLink object. ;  ; void AddFirst (TObject *obj) override;  Add object at the beginning of the list. ;  ; void AddFirst (TObject *obj, Option_t *opt) override;  Add object at the beginning of the list and also store option. ;  ; void AddLast (TObject *obj) override;  Add object at the end of the list. ;  ; void AddLast (TObject *obj, Option_t *opt) override;  Add object at the end of the list and also store option. ;  ; TClass * IsA () const override;  ; Bool_t IsSorted () const override;  ; void Sort (Bool_t=kSortAscending) override;  Sort linked list. ;  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSortedList.html:67,Guid,Guide,67,doc/master/classTSortedList.html,https://root.cern,https://root.cern/doc/master/classTSortedList.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced Spectra Processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions for:. One-dimensional background estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. . Definition at line 18 of file TSpectrum.h. Public Types; enum  { ;   kBackOrder2 =0; , kBackOrder4 =1; , kBackOrder6 =2; , kBackOrder8 =3; , ;   kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSmoothing3 =3; , kBackSmoothing5 =5; , ;   kBackSmoothing7 =7; , kBackSmoothing9 =9; , kBackSmoothing11 =11; , kBackSmoothing13 =13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:65,Guid,Guide,65,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TSpectrum2 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra processing. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. One-dimensional background estimation functions; Two-dimensional background estimation functions; One-dimensional smoothing functions; Two-dimensional smoothing functions; One-dimensional deconvolution functions; Two-dimensional deconvolution functions; One-dimensional peak search functions; Two-dimensional peak search functions. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documenta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2.html:66,Guid,Guide,66,doc/master/classTSpectrum2.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum2Fit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Fit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Fit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Fit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 2D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming.; The algorithms in this class have been published in the following references:. M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 16 of file TSpectrum2Fit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:69,Guid,Guide,69,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum2Painter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSpectrum2Painter Class ReferenceHistogram Library » Painting classes » TSpectrum painting class. ; Legacy Code TSpectrum2Painter is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Painter might still be a valid solution. ; Two-dimensional graphics function; TSpectrum2Painter is a set of graphical functions developed by Miroslav Morhac to paint 2D-histograms in three dimensions. This package is accessed via THistPainter in a transparent way. For the ROOT user it is enough to use the ""SPEC"" option to draw a 2D-Histogram. This option offers many functionalities detailed in the header of the PaintSpectrum function.; Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization algorithms for analysis of multidimensional experimental nuclear data. Acta Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. ; Definition at line 30 of file TSpectrum2Painter.h. Public Types; enum  { ;   kModeGroupSimple =0; , kModeGroupHeight =1; , kModeGroupLight =2; , kModeGroupLightHeight =3; , ;   kDisplayModePoints =1; , kDisplayModeGrid =2; , kDisplayModeContours =3; , kDisplayModeBars =4; , ;   kDisplayModeLinesX =5; , kDisplayModeLinesY =6; , kDisplayModeBarsX =7; , kDisplayModeBarsY =8; , ;   kDisplayModeNeedles =9; , kDisplayModeSurface =10; , kDisplayModeTriangles =11; , kZScaleLinear =0; , ;   kZScaleLog =1; , kZScaleSqrt =2; , kColorAlgRgbSmooth =0; , kColorAlgRgbModulo =1; , ;   kColorAlgCmySmooth =2; , kColorAlgCmyModulo =3; , kColorAlgCieSmooth =4; , kColorAlgCieModulo =5; , ;   kColorAlgYiqSmooth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:73,Guid,Guide,73,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum2Transform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrum2Transform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 2-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum2Transform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum2Transform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 2D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353 (1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 16 of file TSpectrum2Transform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Transform.html:75,Guid,Guide,75,doc/master/classTSpectrum2Transform.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Transform.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrum3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TSpectrum3 Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 3-dimensional spectra processing functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrum3 is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrum3 might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; This class contains advanced spectra processing functions. Three-dimensional background estimation functions; Three-dimensional smoothing functions; Three-dimensional deconvolution functions; Three-dimensional peak search functions. The algorithms in this class have been published in the following references:; [1] M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:66,Guid,Guide,66,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrumFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumFit Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional spectra fitting functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumFit is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumFit might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class for fitting 1D spectra using AWMI (algorithm without matrix inversion) and conjugate gradient algorithms for symmetrical matrices (Stiefel-Hestens method). AWMI method allows to fit simultaneously 100s up to 1000s peaks. Stiefel method is very stable, it converges faster, but is more time consuming; The algorithms in this class have been published in the following references:; M. Morhac et al.: Efficient fitting algorithms applied to analysis of coincidence gamma-ray spectra. Computer Physics Communications, Vol 172/1 (2005) pp. 19-41.; M. Morhac et al.: Study of fitting algorithms applied to simultaneous analysis of large number of peaks in gamma-ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. . Definition at line 18 of file TSpectrumFit.h. Public Types; enum  { ;   kFitOptimChiCounts =0; , kFitOptimChiFuncValues =1; , kFitOptimMaxLikelihood =2; , kFitAlphaHalving =0; , ;   kFitAlphaOptimal =1; , kFitPower2 =2; , kFitPower4 =4; , kFitPower6 =6; , ;   kFitPower8 =8; , kFitPower10 =10; , kFitPower12 =12; , kFitTaylorOrderFirst =0; , ;   kFitTaylorOrderSecond =1; , kFitNumRegulCycles =100. };  ;  Public ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:68,Guid,Guide,68,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpectrumTransform Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpectrumTransform Class ReferenceHistogram Library » Advanced spectra processing classes. ; Advanced 1-dimensional orthogonal transform functions. ; AuthorMiroslav Morhac; Legacy Code TSpectrumTransform is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TSpectrumTransform might still be a valid solution. For modeling a spectrum fitting and estimating the background one can use RooFit while for deconvolution and unfolding one can use TUnfold.; Class to carry out transforms of 1D spectra, its filtering and enhancement. It allows to calculate classic Fourier, Cosine, Sin, Hartley, Walsh, Haar transforms as well as mixed transforms (Fourier- Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sin-Walsh and Sin-Haar). All the transforms are fast.; The algorithms in this class have been published in the following references:. C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray spectroscopy.NIM A353(1994) 280-284.; Morhac M., Matousek V., New adaptive Cosine-Walsh transform and its application to nuclear data compression, IEEE Transactions on Signal Processing 48 (2000) 2693.; Morhac M., Matousek V., Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; Morhac M., Matousek V.: Multidimensional nuclear data compression using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51 (2001) 307. . Definition at line 18 of file TSpectrumTransform.h. Public Types; enum  { ;   kTransformHaar =0; , kTransformWalsh =1; , kTransformCos =2;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumTransform.html:74,Guid,Guide,74,doc/master/classTSpectrumTransform.html,https://root.cern,https://root.cern/doc/master/classTSpectrumTransform.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpider Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSpider Class Reference. ; Spider class. ; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as many polar axes as selected data members. For each of them, it draws on the axis the position of the present event between the min and max of the data member. Two modes are available:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display.; {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }; f#define f(i)Definition RSha256.hxx:104; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TSpiderSpider class.Definition TSpider.h:40; TSpider::Drawvoid Draw(Option_t *options="""") overrideDraw the spider.Definition TSpider.cxx:454; TSpider::TSpiderTSpider()Default co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpider.html:63,Guid,Guide,63,doc/master/classTSpider.html,https://root.cern,https://root.cern/doc/master/classTSpider.html,2,"['Guid', 'simpl']","['Guide', 'simply']"
Usability,". ROOT: TSpline Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpline Class ReferenceabstractHistogram Library. ; Base class for spline implementation containing the Draw/Paint methods. ; Definition at line 29 of file TSpline.h. Public Member Functions;  TSpline ();  ;  TSpline (const char *title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step);  ;  ~TSpline () override;  Destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a spline. ;  ; void Draw (Option_t *option="""") override;  Draw this function with its current attributes. ;  ; virtual Double_t Eval (Double_t x) const =0;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual Double_t GetDelta () const;  ; TH1F * GetHistogram () const;  ; virtual void GetKnot (Int_t i, Double_t &x, Double_t &y) const =0;  ; virtual Int_t GetNp () const;  ; virtual Int_t GetNpx () const;  ; virtual Double_t GetXmax () const;  ; virtual Double_t GetXmin () const;  ; TClass * IsA () const override;  ; void Paint (Option_t *option="""") override;  Paint this function with its current attributes. ;  ; void SaveAs (const char *="""", Option_t *="""") const override;  Save this object in the file specified by filename. ;  ; void SetNpx (Int_t n);  ; void Streamer (TBuffer &) override;  Stream an object of class TSpline. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline.html:63,Guid,Guide,63,doc/master/classTSpline.html,https://root.cern,https://root.cern/doc/master/classTSpline.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpline3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpline3 Class ReferenceHistogram Library. ; Class to create third splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives at beginning and ending points. ; Definition at line 181 of file TSpline.h. Public Member Functions;  TSpline3 ();  ;  TSpline3 (const char *title, const TGraph *g, const char *opt=nullptr, Double_t valbeg=0, Double_t valend=0);  Third spline creator given a TGraph with abscissa in increasing order and possibly end point conditions. ;  ;  TSpline3 (const char *title, Double_t x[], const TF1 *func, Int_t n, const char *opt=nullptr, Double_t valbeg=0, Double_t valend=0);  Third spline creator given an array of arbitrary abscissas in increasing order and a function to interpolate and possibly end point conditions. ;  ;  TSpline3 (const char *title, Double_t x[], Double_t y[], Int_t n, const char *opt=nullptr, Double_t valbeg=0, Double_t valend=0);  Third spline creator given an array of arbitrary knots in increasing abscissa order and possibly end point conditions. ;  ;  TSpline3 (const char *title, Double_t xmin, Double_t xmax, const TF1 *func, Int_t n, const char *opt=nullptr, Double_t valbeg=0, Double_t valend=0);  Third spline creator given a function to be evaluated on n equidistant abscissa points between xmin and xmax and possibly end point conditions. ;  ;  TSpline3 (const char *title, Double_t xmin, Double_t xmax, Double_t y[], Int_t n, const char *opt=nullptr, Double_t valbeg=0, Double_t valend=0);  Third spline creator given an array of arbitrary function values on equidistant n abscissa values from xmin to xmax and possibly end point conditions. ;  ;  TSpline3 (const TH1 *h, const char *opt=nullptr, Double_t valbeg=0, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline3.html:64,Guid,Guide,64,doc/master/classTSpline3.html,https://root.cern,https://root.cern/doc/master/classTSpline3.html,1,['Guid'],['Guide']
Usability,". ROOT: TSpline5 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSpline5 Class ReferenceHistogram Library. ; Class to create quintic natural splines to interpolate knots Arbitrary conditions can be introduced for first and second derivatives using double knots (see BuildCoeff) for more on this. ; Double knots are automatically introduced at ending points ; Definition at line 237 of file TSpline.h. Public Member Functions;  TSpline5 ();  ;  TSpline5 (const char *title, const TGraph *g, const char *opt=nullptr, Double_t b1=0, Double_t e1=0, Double_t b2=0, Double_t e2=0);  Quintic natural spline creator given a TGraph with abscissa in increasing order and possibly end point conditions. ;  ;  TSpline5 (const char *title, Double_t x[], const TF1 *func, Int_t n, const char *opt=nullptr, Double_t b1=0, Double_t e1=0, Double_t b2=0, Double_t e2=0);  Quintic natural spline creator given an array of arbitrary abscissas in increasing order and a function to interpolate and possibly end point conditions. ;  ;  TSpline5 (const char *title, Double_t x[], Double_t y[], Int_t n, const char *opt=nullptr, Double_t b1=0, Double_t e1=0, Double_t b2=0, Double_t e2=0);  Quintic natural spline creator given an array of arbitrary knots in increasing abscissa order and possibly end point conditions. ;  ;  TSpline5 (const char *title, Double_t xmin, Double_t xmax, const TF1 *func, Int_t n, const char *opt=nullptr, Double_t b1=0, Double_t e1=0, Double_t b2=0, Double_t e2=0);  Quintic natural spline creator given a function to be evaluated on n equidistant abscissa points between xmin and xmax and possibly end point conditions. ;  ;  TSpline5 (const char *title, Double_t xmin, Double_t xmax, Double_t y[], Int_t n, const char *opt=nullptr, Double_t b1=0, Double_t e1=0, Double_t b2=0, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline5.html:64,Guid,Guide,64,doc/master/classTSpline5.html,https://root.cern,https://root.cern/doc/master/classTSpline5.html,1,['Guid'],['Guide']
Usability,". ROOT: TSplinePoly Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSplinePoly Class ReferenceHistogram Library. ; Base class for TSpline knot. ; Definition at line 74 of file TSpline.h. Public Member Functions;  TSplinePoly ();  ;  TSplinePoly (Double_t x, Double_t y);  ;  TSplinePoly (TSplinePoly const &other);  ; virtual Double_t Eval (Double_t) const;  ; void GetKnot (Double_t &x, Double_t &y) const;  ; TClass * IsA () const override;  ; TSplinePoly & operator= (TSplinePoly const &other);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t & X ();  ; Double_t & Y ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSplinePoly.html:67,Guid,Guide,67,doc/master/classTSplinePoly.html,https://root.cern,https://root.cern/doc/master/classTSplinePoly.html,1,['Guid'],['Guide']
Usability,". ROOT: TSplinePoly3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSplinePoly3 Class ReferenceHistogram Library. ; Class for TSpline3 knot. ; Definition at line 104 of file TSpline.h. Public Member Functions;  TSplinePoly3 ();  ;  TSplinePoly3 (Double_t x, Double_t y, Double_t b, Double_t c, Double_t d);  ;  TSplinePoly3 (TSplinePoly3 const &other);  ; Double_t & B ();  ; Double_t & C ();  ; Double_t & D ();  ; Double_t Derivative (Double_t x) const;  ; Double_t Eval (Double_t x) const override;  ; TClass * IsA () const override;  ; TSplinePoly3 & operator= (TSplinePoly3 const &other);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSplinePoly;  TSplinePoly ();  ;  TSplinePoly (Double_t x, Double_t y);  ;  TSplinePoly (TSplinePoly const &other);  ; void GetKnot (Double_t &x, Double_t &y) const;  ; TSplinePoly & operator= (TSplinePoly const &other);  Assignment operator. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t & X ();  ; Double_t & Y ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSplinePoly3.html:68,Guid,Guide,68,doc/master/classTSplinePoly3.html,https://root.cern,https://root.cern/doc/master/classTSplinePoly3.html,1,['Guid'],['Guide']
Usability,". ROOT: TSplinePoly5 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSplinePoly5 Class ReferenceHistogram Library. ; Class for TSpline5 knot. ; Definition at line 139 of file TSpline.h. Public Member Functions;  TSplinePoly5 ();  ;  TSplinePoly5 (Double_t x, Double_t y, Double_t b, Double_t c, Double_t d, Double_t e, Double_t f);  ;  TSplinePoly5 (TSplinePoly5 const &other);  ; Double_t & B ();  ; Double_t & C ();  ; Double_t & D ();  ; Double_t Derivative (Double_t x) const;  ; Double_t & E ();  ; Double_t Eval (Double_t x) const override;  ; Double_t & F ();  ; TClass * IsA () const override;  ; TSplinePoly5 & operator= (TSplinePoly5 const &other);  Assignment operator. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSplinePoly;  TSplinePoly ();  ;  TSplinePoly (Double_t x, Double_t y);  ;  TSplinePoly (TSplinePoly const &other);  ; void GetKnot (Double_t &x, Double_t &y) const;  ; TSplinePoly & operator= (TSplinePoly const &other);  Assignment operator. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t & X ();  ; Double_t & Y ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSplinePoly5.html:68,Guid,Guide,68,doc/master/classTSplinePoly5.html,https://root.cern,https://root.cern/doc/master/classTSplinePoly5.html,1,['Guid'],['Guide']
Usability,". ROOT: TSqlCmdsBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TSqlCmdsBuffer Class Reference. . Definition at line 787 of file TSQLStructure.cxx. Public Member Functions;  TSqlCmdsBuffer (TSQLFile *f, TSQLClassInfo *info);  ;  ~TSqlCmdsBuffer () override;  ; void AddValues (Bool_t isnorm, const char *values);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlCmdsBuffer.html:70,Guid,Guide,70,doc/master/classTSqlCmdsBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlCmdsBuffer.html,1,['Guid'],['Guide']
Usability,". ROOT: TSqlRawBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TSqlRawBuffer Class Reference. . Definition at line 1077 of file TSQLStructure.cxx. Public Member Functions;  TSqlRawBuffer (TSqlRegistry *reg, TSQLClassInfo *sqlinfo);  ;  ~TSqlRawBuffer () override;  ; void AddLine (const char *name, const char *value, const char *topname=nullptr, const char *ns=nullptr);  ; Bool_t IsAnyData () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRawBuffer.html:69,Guid,Guide,69,doc/master/classTSqlRawBuffer.html,https://root.cern,https://root.cern/doc/master/classTSqlRawBuffer.html,1,['Guid'],['Guide']
Usability,". ROOT: TSqlRegistry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TSqlRegistry Class Reference. . Definition at line 821 of file TSQLStructure.cxx. Public Member Functions;  TSqlRegistry ();  ;  ~TSqlRegistry () override;  ; Int_t AddLongString (const char *strvalue);  ; void AddRegCmd (Long64_t objid, TClass *cl);  ; void AddSqlCmd (const char *query);  ; void ConvertPoolValues ();  ; void ConvertSqlValues (TObjArray &values, const char *tablename);  ; TSqlCmdsBuffer * GetCmdsBuffer (TSQLClassInfo *sqlinfo);  ; Long64_t GetNextObjId ();  ; void InsertToNormalTable (TSQLTableData *columns, TSQLClassInfo *sqlinfo);  ; Bool_t InsertToNormalTableOracle (TSQLTableData *columns, TSQLClassInfo *sqlinfo);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSqlRegistry.html:68,Guid,Guide,68,doc/master/classTSqlRegistry.html,https://root.cern,https://root.cern/doc/master/classTSqlRegistry.html,1,['Guid'],['Guide']
Usability,". ROOT: TStatistic Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatistic Class ReferenceMath » MathCore. ; Statistical variable, defined by its mean and variance (RMS). ; Named, streamable, storable and mergeable. ; Definition at line 33 of file TStatistic.h. Public Member Functions;  TStatistic (const char *name, Int_t n, const Double_t *val, const Double_t *w=nullptr);  Constructor from a vector of values. ;  ;  TStatistic (const char *name="""");  ;  ~TStatistic () override;  TStatistic destructor. ;  ; void Fill (Double_t val, Double_t w=1.);  Increment the entries in the object by one value-weight pair. ;  ; Double_t GetM2 () const;  ; Double_t GetMax () const;  ; Double_t GetMean () const;  ; Double_t GetMeanErr () const;  ; Double_t GetMin () const;  ; Long64_t GetN () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetNeff () const;  ; Double_t GetRMS () const;  ; Double_t GetVar () const;  ; Double_t GetW () const;  ; Double_t GetW2 () const;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void ls (Option_t *opt="""") const override;  The ls function lists the contents of a class on stdout. ;  ; Int_t Merge (TCollection *in);  Merge implementation of TStatistic. ;  ; void Print (Option_t *="""") const override;  Print the content of the object. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatistic.html:66,Guid,Guide,66,doc/master/classTStatistic.html,https://root.cern,https://root.cern/doc/master/classTStatistic.html,1,['Guid'],['Guide']
Usability,". ROOT: TStatsFeedback Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TStatsFeedback Class ReferencePROOF » PROOF kernel Libraries. ; Utility class to display PROOF stats feedback histos during queries. ; Definition at line 32 of file TStatsFeedback.h. Public Member Functions;  TStatsFeedback (TProof *proof=0);  Constructor. ;  ;  ~TStatsFeedback () override;  Destructor. ;  ; void Feedback (TList *objs);  Display feedback. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:70,Guid,Guide,70,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,4,"['Feedback', 'Guid', 'feedback']","['Feedback', 'Guide', 'feedback']"
Usability,". ROOT: TStatus Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStatus Class ReferencePROOF » PROOF kernel Libraries. ; This class holds the status of an ongoing operation and collects error messages. ; It provides a Merge() operation allowing it to be used in PROOF to monitor status in the slaves. No messages indicates success. ; Definition at line 32 of file TStatus.h. Public Types; enum  EProcStatus { kNotOk = (1ULL << ( 15 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStatus ();  Default constructor. ;  ;  ~TStatus () override;  ; void Add (const char *mesg);  Add an error message. ;  ; void AddInfo (const char *mesg);  Add an info message. ;  ; Int_t GetExitStatus () const;  ; Long_t GetResMemMax (Bool_t master=kFALSE) const;  ; Long_t GetVirtMemMax (Bool_t master=kFALSE) const;  ; TClass * IsA () const override;  ; Bool_t IsOk () const;  ; virtual Int_t Merge (TCollection *list);  PROOF Merge() function. ;  ; const char * NextMesg ();  Return the next message or 0. ;  ; void Print (Option_t *option="""") const override;  Standard print function. ;  ; void Reset ();  Reset the iterator on the messages. ;  ; void SetExitStatus (Int_t est);  ; void SetMemVal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatus.html:63,Guid,Guide,63,doc/master/classTStatus.html,https://root.cern,https://root.cern/doc/master/classTStatus.html,1,['Guid'],['Guide']
Usability,". ROOT: TStdExceptionHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TStdExceptionHandler Class Referenceabstract. . Definition at line 172 of file TSysEvtHandler.h. Public Types; enum  EStatus { kSEProceed; , kSEHandled; , kSEAbort; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TStdExceptionHandler ();  Handle standard C++ exceptions intercepted by the TSystem::Run(). ;  ; virtual ~TStdExceptionHandler ();  ; void Add () override;  Add std::exception handler to system handler list. ;  ; virtual EStatus Handle (std::exception &exc)=0;  ; TClass * IsA () const override;  ; Bool_t Notify () override;  Notify when signal occurs. ;  ; void Remove () override;  Remove std::exception handler from system handler list. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStdExceptionHandler.html:76,Guid,Guide,76,doc/master/classTStdExceptionHandler.html,https://root.cern,https://root.cern/doc/master/classTStdExceptionHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TStopTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TStopTimer Class Reference. . Definition at line 169 of file TProofPlayer.cxx. Public Member Functions;  TStopTimer (TProofPlayer *p, Bool_t abort, Int_t to);  Constructor for the timer to stop/abort processing. ;  ; Bool_t Notify () override;  Handle the signal coming from the expiration of the timer associated with an abort or stop request. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStopTimer.html:66,Guid,Guide,66,doc/master/classTStopTimer.html,https://root.cern,https://root.cern/doc/master/classTStopTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TStopwatch Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Static Private Member Functions |; Private Attributes |; List of all members ; TStopwatch Class ReferenceCore ROOT classes » Base ROOT classes. ; Stopwatch class. ; This class returns the real and cpu time between the start and stop events. ; Definition at line 28 of file TStopwatch.h. Public Member Functions;  TStopwatch ();  Create a stopwatch and start it. ;  ; void Continue ();  Resume a stopped stopwatch. ;  ; Int_t Counter () const;  ; Double_t CpuTime ();  Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start and stop events. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the real and cpu time passed between the start and stop events. ;  ; Double_t RealTime ();  Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start and stop events. ;  ; void Reset ();  ; void ResetCpuTime (Double_t time=0);  ; void ResetRealTime (Double_t time=0);  ; void Start (Bool_t reset=kTRUE);  Start the stopwatch. ;  ; void Stop ();  Stop the stopwatch. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStopwatch.html:66,Guid,Guide,66,doc/master/classTStopwatch.html,https://root.cern,https://root.cern/doc/master/classTStopwatch.html,2,"['Guid', 'Resume']","['Guide', 'Resume']"
Usability,". ROOT: TStorage Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Types |; Static Private Attributes |; List of all members ; TStorage Class ReferenceCore ROOT classes » Base ROOT classes. ; Storage manager. ; The storage manager works best in conjunction with the custom ROOT new and delete operators defined in the file NewDelete.cxx (libNew.so). Only when using the custom allocation operators will memory usage statistics be gathered using the TStorage EnterStat(), RemoveStat(), etc. functions. Memory checking is by default enabled (when using libNew.so) and usage statistics is gathered. Using the resource (in .rootrc): Root.MemStat one can toggle statistics gathering on or off. More specifically on can trap the allocation of a block of memory of a certain size. This can be specified using the resource: Root.MemStat.size, using the resource Root.MemStat.cnt one can specify after how many allocations of this size the trap should occur.; Set the compile option R__NOSTATS to de-activate all memory checking and statistics gathering in the system. ; Definition at line 33 of file TStorage.h. Public Member Functions; virtual ~TStorage ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static void * Alloc (size_t size);  Allocate a block of memory, that later can be resized using TStorage::ReAlloc(). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Dealloc (void *ptr);  De-allocate block of memory, that was allocated via TStorage::Alloc(). ;  ; static const char * DeclFileName ();  ; static void EnableStatistics (int size=-1, int ix=-1);  Enable memory usage statistics gathering. ;  ; static void EnterSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStorage.html:64,Guid,Guide,64,doc/master/classTStorage.html,https://root.cern,https://root.cern/doc/master/classTStorage.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerArtificial Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerArtificial Class Reference. . Definition at line 449 of file TStreamerElement.h. Public Member Functions;  TStreamerArtificial (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  ; ROOT::TSchemaRule::ReadFuncPtr_t GetReadFunc ();  ; ROOT::TSchemaRule::ReadRawFuncPtr_t GetReadRawFunc ();  ; TClass * IsA () const override;  ; void SetReadFunc (ROOT::TSchemaRule::ReadFuncPtr_t val);  ; void SetReadRawFunc (ROOT::TSchemaRule::ReadRawFuncPtr_t val);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; virtual const char * GetInclude () const;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerArtificial.html:75,Guid,Guide,75,doc/master/classTStreamerArtificial.html,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerBase Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerBase Class Reference. . Definition at line 150 of file TStreamerElement.h. Public Member Functions;  TStreamerBase ();  ;  TStreamerBase (const char *name, const char *title, Int_t offset, Bool_t isTransient=kFALSE);  ; virtual ~TStreamerBase ();  TStreamerBase dtor. ;  ; UInt_t GetBaseCheckSum ();  ; TVirtualStreamerInfo * GetBaseStreamerInfo () const;  ; Int_t GetBaseVersion ();  ; TClass * GetClassPointer () const override;  Returns a pointer to the TClass of this element. ;  ; const char * GetErrorMessage () const;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; ULongptr_t GetMethod () const override;  ; TClass * GetNewBaseClass ();  ; Int_t GetSize () const override;  Returns size of baseclass in bytes. ;  ; void Init (Bool_t isTransient=kFALSE);  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; Int_t ReadBuffer (TBuffer &b, char *pointer);  Read the content of the buffer. ;  ; void SetBaseCheckSum (UInt_t cs);  ; void SetBaseVersion (Int_t v);  ; void SetErrorMessage (const char *msg);  ; void SetNewBaseClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBase. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *oldClass, TClass *newClass) override;  Function called by the TClass constructor when replacing an emulated class by the real class. ;  ; Int_t WriteBuffer (TBuffer &b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBase.html:69,Guid,Guide,69,doc/master/classTStreamerBase.html,https://root.cern,https://root.cern/doc/master/classTStreamerBase.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerBasicPointer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerBasicPointer Class Reference. . Definition at line 198 of file TStreamerElement.h. Public Member Functions;  TStreamerBasicPointer ();  pointer to basic type counter ;  ;  TStreamerBasicPointer (const char *name, const char *title, Int_t offset, Int_t dtype, const char *countName, const char *countClass, Int_t version, const char *typeName);  Create a TStreamerBasicPointer object. ;  ; virtual ~TStreamerBasicPointer ();  TStreamerBasicPointer dtor. ;  ; TClass * GetClassPointer () const override;  Returns a pointer to the TClass of this element. ;  ; const char * GetCountClass () const;  ; const char * GetCountName () const;  ; Int_t GetCountVersion () const;  ; ULongptr_t GetMethod () const override;  return offset of counter ;  ; Int_t GetSize () const override;  Returns size of basicpointer in bytes. ;  ; Bool_t HasCounter () const override;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void SetCountClass (const char *clname);  ; void SetCountName (const char *name);  ; void SetCountVersion (Int_t count);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBasicPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *, TClass *) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicPointer.html:77,Guid,Guide,77,doc/master/classTStreamerBasicPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicPointer.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerBasicType Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerBasicType Class Reference. . Definition at line 269 of file TStreamerElement.h. Public Member Functions;  TStreamerBasicType ();  value of data member when referenced by an array ;  ;  TStreamerBasicType (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerBasicType object. ;  ; virtual ~TStreamerBasicType ();  TStreamerBasicType dtor. ;  ; TClass * GetClassPointer () const override;  Returns a pointer to the TClass of this element. ;  ; Int_t GetCounter () const;  ; ULongptr_t GetMethod () const override;  return address of counter ;  ; Int_t GetSize () const override;  Returns size of this element in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerBasicType. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (const TClass *, TClass *) override;  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerBasicType.html:74,Guid,Guide,74,doc/master/classTStreamerBasicType.html,https://root.cern,https://root.cern/doc/master/classTStreamerBasicType.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerElement Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerElement Class Reference. . Definition at line 32 of file TStreamerElement.h. Public Types; enum  EStatusBits { ;   kHasRange = (1ULL << ( 6 )); , kCache = (1ULL << ( 9 )); , kRepeat = (1ULL << ( 10 )); , kRead = (1ULL << ( 11 )); , ;   kWrite = (1ULL << ( 12 )); , kDoNotDelete = (1ULL << ( 13 )); , kWholeObject = (1ULL << ( 14 )); , kWarned = (1ULL << ( 21 )). };  ; enum class  EStatusBitsDupExceptions { kDoNotDelete = TStreamerElement::kDoNotDelete; , kHasRange = TStreamerElement::kHasRange; };  ; enum  ESTLtype { ;   kSTL = ROOT::kSTLany; , kSTLstring = ROOT::kSTLstring; , kSTLvector = ROOT::kSTLvector; , kSTLlist = ROOT::kSTLlist; , ;   kSTLforwardlist = ROOT::kSTLforwardlist; , kSTLdeque = ROOT::kSTLdeque; , kSTLmap = ROOT::kSTLmap; , kSTLmultimap = ROOT::kSTLmultimap; , ;   kSTLset = ROOT::kSTLset; , kSTLmultiset = ROOT::kSTLmultiset; , kSTLunorderedset = ROOT::kSTLunorderedset; , kSTLunorderedmultiset = ROOT::kSTLunorderedmultiset; , ;   kSTLunorderedmap = ROOT::kSTLunorderedmap; , kSTLunorderedmultimap = ROOT::kSTLunorderedmultimap; , kSTLbitset = ROOT::kSTLbitset. };  Conversion factor if a range is specified fFactor = (1<<nbits/(xmax-xmin) More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerElement.html:72,Guid,Guide,72,doc/master/classTStreamerElement.html,https://root.cern,https://root.cern/doc/master/classTStreamerElement.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TStreamerInfo Class ReferenceInput/Output Library. ; Describes a persistent version of a class. ; A ROOT file contains the list of TStreamerInfo objects for all the class versions written to this file. When reading a file, all the TStreamerInfo objects are read back in memory and registered to the TClass list of TStreamerInfo. One can see the list and contents of the TStreamerInfo on a file with, e.g., TFile f(""myfile.root"");; f.ShowStreamerInfo();; f#define f(i)Definition RSha256.hxx:104; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; A TStreamerInfo is a list of TStreamerElement objects (one per data member or base class). When streaming an object, the system (TClass) loops on all the TStreamerElement objects and calls the appropriate function for each element type. ; Definition at line 39 of file TStreamerInfo.h. Classes; class  TCompInfo;  ; class  TPointerCollectionAdapter;  . Public Types; typedef TCompInfo TCompInfo_t;  ;  Public Types inherited from TVirtualStreamerInfo; enum  EReadWrite { ;   kBase = 0; , kOffsetL = 20; , kOffsetP = 40; , kCounter = 6; , ;   kCharStar = 7; , kChar = 1; , kShort = 2; , kInt = 3; , ;   kLong = 4; , kFloat = 5; , kDouble = 8; , kDouble32 = 9; , ;   kLegacyChar = 10; , kUChar = 11; , kUShort = 12; , kUInt = 13; , ;   kULong = 14; , kBits = 15; , kLong64 = 16; , kULong64 = 17; , ;   kBool = 18; , kFloat16 = 19; , kObject = 61; , kAny = 62; , ;   kObjectp = 63; , kObjectP = 64; , kTString = 65; , kTObject = 66; , ;   kTNamed = 67; , kAnyp = 68; , kAnyP = 69; , kAnyPnoVT = 70; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo.html:69,Guid,Guide,69,doc/master/classTStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerInfo::TCompInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; TStreamerInfo::TCompInfo Class Reference. . Definition at line 41 of file TStreamerInfo.h. Public Member Functions;  TCompInfo ();  ;  ~TCompInfo ();  ; void Update (const TClass *oldcl, TClass *newcl);  Update the TClass pointer cached in this object. ;  . Public Attributes; TClass * fClass;  Not Owned. ;  ; TString fClassName;  ; TStreamerElement * fElem;  Not Owned. ;  ; Int_t fLength;  ; ULongptr_t fMethod;  ; TClass * fNewClass;  Not Owned. ;  ; Int_t fNewType;  ; Int_t fOffset;  ; TMemberStreamer * fStreamer;  Not Owned. ;  ; Int_t fType;  . Constructor & Destructor Documentation. ◆ TCompInfo(). TStreamerInfo::TCompInfo::TCompInfo ; (; ). inline . Definition at line 57 of file TStreamerInfo.h. ◆ ~TCompInfo(). TStreamerInfo::TCompInfo::~TCompInfo ; (; ). inline . Definition at line 59 of file TStreamerInfo.h. Member Function Documentation. ◆ Update(). void TStreamerInfo::TCompInfo::Update ; (; const TClass * ; oldcl, . TClass * ; newcl . ). Update the TClass pointer cached in this object. ; Definition at line 5644 of file TStreamerInfo.cxx. Member Data Documentation. ◆ fClass. TClass* TStreamerInfo::TCompInfo::fClass. Not Owned. ; Definition at line 53 of file TStreamerInfo.h. ◆ fClassName. TString TStreamerInfo::TCompInfo::fClassName. Definition at line 55 of file TStreamerInfo.h. ◆ fElem. TStreamerElement* TStreamerInfo::TCompInfo::fElem. Not Owned. ; Definition at line 51 of file TStreamerInfo.h. ◆ fLength. Int_t TStreamerInfo::TCompInfo::fLength. Definition at line 50 of file TStreamerInfo.h. ◆ fMethod. ULongptr_t TStreamerInfo::TCompInfo::fMethod. Definition at line 52 of file TStreamerInfo.h. ◆ fNewClass. TClass* TStreamerInfo::TCompInfo::fNewClass. Not Owned. ; Definition at line 54 of file TStreamerInfo.h. ◆ fNewType. Int_t TStreamerI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo_1_1TCompInfo.html:80,Guid,Guide,80,doc/master/classTStreamerInfo_1_1TCompInfo.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo_1_1TCompInfo.html,1,['Guid'],['Guide']
Usability,. ROOT: TStreamerInfo::TPointerCollectionAdapter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TStreamerInfo::TPointerCollectionAdapter Class Reference. . Definition at line 72 of file TStreamerInfo.h. Public Member Functions;  TPointerCollectionAdapter (TVirtualCollectionProxy *proxy);  ; char * operator[] (UInt_t idx) const;  . Private Attributes; TVirtualCollectionProxy * fProxy;  . #include <TStreamerInfo.h>; Constructor & Destructor Documentation. ◆ TPointerCollectionAdapter(). TStreamerInfo::TPointerCollectionAdapter::TPointerCollectionAdapter ; (; TVirtualCollectionProxy * ; proxy). inline . Definition at line 75 of file TStreamerInfo.h. Member Function Documentation. ◆ operator[](). char * TStreamerInfo::TPointerCollectionAdapter::operator[] ; (; UInt_t ; idx); const. inline . Definition at line 78 of file TStreamerInfo.h. Member Data Documentation. ◆ fProxy. TVirtualCollectionProxy* TStreamerInfo::TPointerCollectionAdapter::fProxy. private . Definition at line 84 of file TStreamerInfo.h. Libraries for TStreamerInfo::TPointerCollectionAdapter:. [legend]; The documentation for this class was generated from the following file:; io/io/inc/TStreamerInfo.h. TStreamerInfoTPointerCollectionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfo_1_1TPointerCollectionAdapter.html:96,Guid,Guide,96,doc/master/classTStreamerInfo_1_1TPointerCollectionAdapter.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfo_1_1TPointerCollectionAdapter.html,2,['Guid'],['Guide']
Usability,". ROOT: TStreamerInfoActions Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions ; TStreamerInfoActions Namespace Reference. Classes; struct  AssociativeLooper;  ; struct  BitsMarker;  ; struct  ConvertBasicType;  ; struct  ConvertBasicType< BitsMarker, To >;  ; struct  ConvertBasicType< NoFactorMarker< From >, To >;  ; struct  ConvertBasicType< WithFactorMarker< From >, To >;  ; struct  GenericLooper;  ; struct  NoFactorMarker;  ; class  TActionSequence;  ; class  TAssocLoopConfig;  ; struct  TBitsConfiguration;  ; class  TConfigSTL;  ; class  TConfiguration;  Base class of the Configurations. More...;  ; class  TConfigurationPushDataCache;  ; class  TConfigurationUseCache;  ; class  TConfiguredAction;  ; class  TConfNoFactor;  ; class  TConfSTLNoFactor;  ; class  TConfSTLWithFactor;  ; class  TConfWithFactor;  ; struct  TGenericConfiguration;  ; class  TGenericLoopConfig;  ; struct  TIDNode;  ; class  TLoopConfiguration;  Base class of the Configurations for the member wise looping routines. More...;  ; struct  TNestedIDs;  ; class  TVectorLoopConfig;  ; struct  VectorLooper;  ; struct  VectorPtrLooper;  ; struct  WithFactorMarker;  . Typedefs; typedef std::vector< TConfiguredAction > ActionContainer_t;  ; typedef TVirtualCollectionProxy::Next_t Next_t;  ; using TIDs = std::vector< TIDNode >;  ; typedef Int_t(* TStreamerInfoAction_t) (TBuffer &buf, void *obj, const TConfiguration *conf);  ; typedef Int_t(* TStreamerInfoLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *conf);  ; typedef Int_t(* TStreamerInfoVecPtrLoopAction_t) (TBuffer &buf, void *iter, const void *end, const TConfiguration *conf);  . Enumerations; enum  ESelectLooper { kVectorLooper; , kVectorPtrLooper; , kAssociativeLooper; , kGenericLooper; };  . Functions; Int_t GenericReadAction (TBuffer &buf, void *addr, const TConfiguration *confi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTStreamerInfoActions.html:80,Guid,Guide,80,doc/master/namespaceTStreamerInfoActions.html,https://root.cern,https://root.cern/doc/master/namespaceTStreamerInfoActions.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerInfoActions::TActionSequence Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TStreamerInfoActions::TActionSequence Class Reference. . Definition at line 177 of file TStreamerInfoActions.h. Classes; struct  SequencePtr;  . Public Types; enum class  EStatusBits { kVectorPtrLooper = (1ULL << ( 14 )); };  ; using SequenceGetter_t = SequencePtr(*)(TStreamerInfo *info, TVirtualCollectionProxy *collectionProxy, TClass *originalClass);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TActionSequence (TVirtualStreamerInfo *info, UInt_t maxdata, Bool_t isForVecPtr=kFALSE);  ;  ~TActionSequence () override;  ; template<typename action_t > ; void AddAction (action_t action, TConfiguration *conf);  ; void AddAction (const TConfiguredAction &action);  ; void AddToOffset (Int_t delta);  ; void AddToSubSequence (TActionSequence *sequence, const TIDs &element_ids, Int_t offset, SequenceGetter_t create);  ; TActionSequence * CreateCopy ();  ; TActionSequence * CreateSubSequence (const std::vector< Int_t > &element_ids, size_t offset);  ; TActionSequence * CreateSubSequence (const TIDs &element_ids, size_t offset, SequenceGetter_t crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html:93,Guid,Guide,93,doc/master/classTStreamerInfoActions_1_1TActionSequence.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TActionSequence.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerInfoActions::TConfiguredAction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TStreamerInfoActions::TConfiguredAction Class Reference. . Definition at line 74 of file TStreamerInfoActions.h. Public Member Functions;  TConfiguredAction ();  ;  TConfiguredAction (const TConfiguredAction &rval);  ;  TConfiguredAction (TStreamerInfoAction_t action, TConfiguration *conf);  ;  TConfiguredAction (TStreamerInfoLoopAction_t action, TConfiguration *conf);  ;  TConfiguredAction (TStreamerInfoVecPtrLoopAction_t action, TConfiguration *conf);  ;  ~TConfiguredAction () override;  ; TClass * IsA () const override;  ; Int_t operator() (TBuffer &buffer, void *object) const;  ; Int_t operator() (TBuffer &buffer, void *start_collection, const void *end_collection) const;  ; Int_t operator() (TBuffer &buffer, void *start_collection, const void *end_collection, const TLoopConfiguration *loopconf) const;  ; TConfiguredAction & operator= (const TConfiguredAction &rval);  ; void PrintDebug (TBuffer &buffer, void *object) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html:95,Guid,Guide,95,doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,https://root.cern,https://root.cern/doc/master/classTStreamerInfoActions_1_1TConfiguredAction.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerLoop Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerLoop Class Reference. . Definition at line 235 of file TStreamerElement.h. Public Member Functions;  TStreamerLoop ();  pointer to basic type counter ;  ;  TStreamerLoop (const char *name, const char *title, Int_t offset, const char *countName, const char *countClass, Int_t version, const char *typeName);  Create a TStreamerLoop object. ;  ; virtual ~TStreamerLoop ();  TStreamerLoop dtor. ;  ; const char * GetCountClass () const;  ; const char * GetCountName () const;  ; Int_t GetCountVersion () const;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; ULongptr_t GetMethod () const override;  return address of counter ;  ; Int_t GetSize () const override;  Returns size of counter in bytes. ;  ; Bool_t HasCounter () const override;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetCountClass (const char *clname);  ; void SetCountName (const char *name);  ; void SetCountVersion (Int_t count);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerLoop. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerLoop.html:69,Guid,Guide,69,doc/master/classTStreamerLoop.html,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObject Class Reference. . Definition at line 293 of file TStreamerElement.h. Public Member Functions;  TStreamerObject ();  Default ctor. ;  ;  TStreamerObject (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObject object. ;  ; virtual ~TStreamerObject ();  TStreamerObject dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of object class in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObject.html:71,Guid,Guide,71,doc/master/classTStreamerObject.html,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerObjectAny Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObjectAny Class Reference. . Definition at line 312 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectAny ();  Default ctor. ;  ;  TStreamerObjectAny (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectAny object. ;  ; virtual ~TStreamerObjectAny ();  TStreamerObjectAny dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectAny. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectAny.html:74,Guid,Guide,74,doc/master/classTStreamerObjectAny.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAny.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerObjectAnyPointer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObjectAnyPointer Class Reference. . Definition at line 352 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectAnyPointer ();  Default ctor. ;  ;  TStreamerObjectAnyPointer (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectAnyPointer object. ;  ; virtual ~TStreamerObjectAnyPointer ();  TStreamerObjectAnyPointer dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of objectpointer in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectAnyPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html:81,Guid,Guide,81,doc/master/classTStreamerObjectAnyPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerObjectPointer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerObjectPointer Class Reference. . Definition at line 331 of file TStreamerElement.h. Public Member Functions;  TStreamerObjectPointer ();  Default ctor. ;  ;  TStreamerObjectPointer (const char *name, const char *title, Int_t offset, const char *typeName);  Create a TStreamerObjectPointer object. ;  ; virtual ~TStreamerObjectPointer ();  TStreamerObjectPointer dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of objectpointer in bytes. ;  ; void Init (TVirtualStreamerInfo *obj=nullptr) override;  Setup the element. ;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  ; void SetArrayDim (Int_t dim) override;  Set number of array dimensions. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerObjectPointer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFull",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectPointer.html:78,Guid,Guide,78,doc/master/classTStreamerObjectPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectPointer.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerSTL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TStreamerSTL Class Reference. . Definition at line 391 of file TStreamerElement.h. Public Member Functions;  TStreamerSTL ();  Default ctor. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const char *trueType, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const TVirtualCollectionProxy &proxy, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ; virtual ~TStreamerSTL ();  TStreamerSTL dtor. ;  ; Bool_t CannotSplit () const override;  We can not split STL's which are inside a variable size array. ;  ; Int_t GetCtype () const;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of STL container in bytes. ;  ; Int_t GetSTLtype () const;  ; TClass * IsA () const override;  ; Bool_t IsaPointer () const override;  Return true if the data member is a pointer. ;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; void SetCtype (Int_t t);  ; void SetSTLtype (Int_t t);  ; void SetStreamer (TMemberStreamer *streamer) override;  Set pointer to Streamer function for this element NOTE: we do not take ownership. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerSTL. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTL.html:68,Guid,Guide,68,doc/master/classTStreamerSTL.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTL.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerSTLstring Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerSTLstring Class Reference. . Definition at line 425 of file TStreamerElement.h. Public Member Functions;  TStreamerSTLstring ();  Default ctor. ;  ;  TStreamerSTLstring (const char *name, const char *title, Int_t offset, const char *typeName, Bool_t dmPointer);  Create a TStreamerSTLstring object. ;  ; virtual ~TStreamerSTLstring ();  TStreamerSTLstring dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerSTLstring. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerSTL;  TStreamerSTL ();  Default ctor. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const char *trueType, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ;  TStreamerSTL (const char *name, const char *title, Int_t offset, const char *typeName, const TVirtualCollectionProxy &proxy, Bool_t dmPointer);  Create a TStreamerSTL object. ;  ; virtual ~TStreamerSTL ();  TStreamerSTL dtor. ;  ; Bool_t CannotSplit () const override;  We can not split STL's which are inside a variable size array. ;  ; Int_t GetCtype () const;  ; Int_t GetSTLtype () const;  ; Bool_t IsaPointer () const override;  Return true if the data member is a pointer. ;  ; Bool_t IsBase () const override;  Return kTRUE if the element represent a base class. ;  ; void ls (Option_t *option="""") const override;  Print the content of the element. ;  ; void SetCtype (Int_t t);  ; void SetSTLtype (Int_t t);  ; void SetStreamer (TMemberStreamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerSTLstring.html:74,Guid,Guide,74,doc/master/classTStreamerSTLstring.html,https://root.cern,https://root.cern/doc/master/classTStreamerSTLstring.html,1,['Guid'],['Guide']
Usability,". ROOT: TStreamerString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; List of all members ; TStreamerString Class Reference. . Definition at line 373 of file TStreamerElement.h. Public Member Functions;  TStreamerString ();  Default ctor. ;  ;  TStreamerString (const char *name, const char *title, Int_t offset);  Create a TStreamerString object. ;  ; virtual ~TStreamerString ();  TStreamerString dtor. ;  ; const char * GetInclude () const override;  Return the proper include for this element. ;  ; Int_t GetSize () const override;  Returns size of anyclass in bytes. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerString. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStreamerElement;  TStreamerElement ();  Default ctor. ;  ;  TStreamerElement (const char *name, const char *title, Int_t offset, Int_t dtype, const char *typeName);  Create a TStreamerElement object. ;  ; virtual ~TStreamerElement ();  TStreamerElement dtor. ;  ; virtual Bool_t CannotSplit () const;  Returns true if the element cannot be split, false otherwise. ;  ; Int_t GetArrayDim () const;  ; Int_t GetArrayLength () const;  ; TClass * GetClass () const;  ; virtual TClass * GetClassPointer () const;  Returns a pointer to the TClass of this element. ;  ; virtual Int_t GetExecID () const;  Returns the TExec id for the EXEC instruction in the comment field of a TRef data member. ;  ; Double_t GetFactor () const;  ; virtual const char * GetFullName () const;  Return element name including dimensions, if any Note that this function stores the name into a static array. ;  ; Int_t GetMaxIndex (Int_t i) const;  ; virtual ULongptr_t GetMethod () const;  ; TClass * GetNewClass () const;  ; Int_t GetNewType () const;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerString.html:71,Guid,Guide,71,doc/master/classTStreamerString.html,https://root.cern,https://root.cern/doc/master/classTStreamerString.html,1,['Guid'],['Guide']
Usability,". ROOT: TString Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TString Class ReferenceCore ROOT classes » Base ROOT classes. ; Basic string class. ; Cannot be stored in a TCollection... use TObjString instead.; The underlying string is stored as a char* that can be accessed via TString::Data(). TString provides Short String Optimization (SSO) so that short strings (<15 on 64-bit and <11 on 32-bit) are contained in the TString internal data structure without the need for mallocing the required space.; Substring operations are provided by the TSubString class, which holds a reference to the original string and its data, along with the offset and length of the substring. To retrieve the substring as a TString, construct a TString from it, eg: root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; hellostd::string hello(std::string who, std::string msg)Definition FunModule.C:5; TStringBasic string class.Definition TString.h:139. Definition at line 139 of file TString.h. Classes; struct  LongStr_t;  ; struct  RawStr_t;  ; struct  Rep_t;  ; struct  ShortStr_t;  ; union  UStr_t;  . Public Types; enum  ECaseCompare { kExact; , kIgnoreCase; };  ; enum  EStripType { kLeading = 0x1; , kTrailing = 0x2; , kBoth = 0x3; };  ; using size_type = Ssiz_t;  . Public Member Functions;  TString ();  TString default ctor. ;  ;  TString (char c);  Initialize a string with a single character. ;  ;  TString (char c, Ssiz_t s);  Initialize the first n locations of a TString with character c. ;  ;  TString (const char *s);  Create TString and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTString.html:63,Guid,Guide,63,doc/master/classTString.html,https://root.cern,https://root.cern/doc/master/classTString.html,1,['Guid'],['Guide']
Usability,". ROOT: TString Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Types |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; TString Class ReferenceCore ROOT classes » Base ROOT classes. ; Basic string class. ; Cannot be stored in a TCollection... use TObjString instead.; The underlying string is stored as a char* that can be accessed via TString::Data(). TString provides Short String Optimization (SSO) so that short strings (<15 on 64-bit and <11 on 32-bit) are contained in the TString internal data structure without the need for mallocing the required space.; Substring operations are provided by the TSubString class, which holds a reference to the original string and its data, along with the offset and length of the substring. To retrieve the substring as a TString, construct a TString from it, eg: root [0] TString s(""hello world""); root [1] TString s2( s(0,5) ); root [2] s2; (class TString)""hello""; hellostd::string hello(std::string who, std::string msg)Definition FunModule.C:5; TStringBasic string class.Definition TString.h:139. Definition at line 139 of file TString.h. Classes; struct  LongStr_t;  ; struct  RawStr_t;  ; struct  Rep_t;  ; struct  ShortStr_t;  ; union  UStr_t;  . Public Types; enum  ECaseCompare { kExact; , kIgnoreCase; };  ; enum  EStripType { kLeading = 0x1; , kTrailing = 0x2; , kBoth = 0x3; };  ; using size_type = Ssiz_t;  . Public Member Functions;  TString ();  TString default ctor. ;  ;  TString (char c);  Initialize a string with a single character. ;  ;  TString (char c, Ssiz_t s);  Initialize the first n locations of a TString with character c. ;  ;  TString (const char *s);  Create TString and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTString.html:62,Guid,Guide,62,doc/v632/classTString.html,https://root.cern,https://root.cern/doc/v632/classTString.html,1,['Guid'],['Guide']
Usability,". ROOT: TStructNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TStructNode Class Reference. . Definition at line 34 of file TStructNode.h. Public Member Functions;  TStructNode (TString name, TString typeName, void *pointer, TStructNode *parent, ULong_t size, ENodeType type);  Constructs node with name ""name"" of class ""typeName"" and given parent ""parent"" which represents pointer ""pointer"". ;  ;  ~TStructNode () override;  Destructs list of nodes. ;  ; Int_t Compare (const TObject *obj) const override;  Overrided method. Compare to objects of TStructNode class. ;  ; ULong_t GetAllMembersCount () const;  Returns number of all members in node. ;  ; Float_t GetCenter () const;  Returns center of outlining box on x-axis. ;  ; Float_t GetHeight () const;  Returns height of outlining box. ;  ; UInt_t GetLevel () const;  Returns actual level of node. ;  ; UInt_t GetMaxLevel () const;  Returns maximum number of leves displayed when the node is top node on scene. ;  ; UInt_t GetMaxObjects () const;  Returns maximum number of objects displayed when the node is top node on scene. ;  ; TList * GetMembers () const;  Returns list with pointers to daughter nodes. ;  ; ULong_t GetMembersCount () const;  Returns numbers of members of node. ;  ; Float_t GetMiddle () const;  Returns center of outlining box on y-axis. ;  ; const char * GetName () const override;  Returns name of object. ;  ; ENodeType GetNodeType () const;  Returns type of node. ;  ; TStructNode * GetParent () const;  Returns pointer to parent node. ;  ; void * GetPointer () const;  Returns main pointer. ;  ; ULong_t GetRelativeMembersCount () const;  Returns relative numbers of members. ;  ; ULong_t GetRelativeSize () const;  Returns relative size of node. ;  ; ULong_t GetRelativeVolume () const;  Returns size o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNode.html:67,Guid,Guide,67,doc/master/classTStructNode.html,https://root.cern,https://root.cern/doc/master/classTStructNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TStructNodeProperty Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStructNodeProperty Class Reference. . Definition at line 19 of file TStructNodeProperty.h. Public Member Functions;  TStructNodeProperty (const char *name, Int_t color);  Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""color"". ;  ;  TStructNodeProperty (const char *name, Pixel_t pixel);  Contructs a TStructNodeProperty with p as parent window for class ""name"" with color ""pixel"". ;  ;  ~TStructNodeProperty () override;  Destructor. ;  ; Int_t Compare (const TObject *obj) const override;  Overrided method. Compare two objects of TStructNodeProperty class. ;  ; TColor GetColor () const;  Returns color of class. ;  ; Pixel_t GetPixel () const;  Return color in Pixel_t format. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  Retruns true, because we have overrided method Compare. ;  ; void SetColor (const TColor &color);  Sets the color to ""color"". ;  ; void SetColor (Int_t color);  Sets the color to ""color"". ;  ; void SetColor (Pixel_t pixel);  Sets the color to ""pixel"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructNodeProperty.html:75,Guid,Guide,75,doc/master/classTStructNodeProperty.html,https://root.cern,https://root.cern/doc/master/classTStructNodeProperty.html,1,['Guid'],['Guide']
Usability,". ROOT: TStructViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TStructViewer Class Reference. . Definition at line 26 of file TStructViewer.h. Public Member Functions;  TStructViewer (void *ptr=nullptr, const char *clname=nullptr);  Default constructor. An argument ""ptr"" is a main pointer of type ""clname"", which should be shown in the viewer. ;  ;  ~TStructViewer () override;  Destructor. Clean all object after closing the viewer. ;  ; void Draw (Option_t *option="""") override;  Draw object if there is valid pointer. ;  ; TCanvas * GetCanvas ();  Returns canvas used to keep TGeoVolumes. ;  ; TColor GetColor (const char *typeName);  Returns color associated with type ""typeName"". ;  ; TGMainFrame * GetFrame ();  Returns pointer to main window. ;  ; TExMap GetLevelMembersCount () const;  Returns TExMap with pairs <level number, number of objects> ;  ; TExMap GetLevelSize () const;  Returns TExMap with pairs <level number, size of level in bytes> ;  ; Bool_t GetLinksVisibility () const;  Get visibility of links between objects. ;  ; void * GetPointer () const;  Return main pointer. ;  ; TClass * IsA () const override;  ; void SetColor (TString name, Int_t color);  Sets color for the class ""name"" to color ""color"". ;  ; void SetLinksVisibility (Bool_t val);  ISets links visibility. ;  ; void SetPointer (void *ptr, const char *clname=nullptr);  Set main pointer of class ""clname"". ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewer.html:69,Guid,Guide,69,doc/master/classTStructViewer.html,https://root.cern,https://root.cern/doc/master/classTStructViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TStructViewerGUI Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TStructViewerGUI Class Reference. . Definition at line 37 of file TStructViewerGUI.h. Public Member Functions;  TStructViewerGUI (TStructViewer *parent, TStructNode *nodePtr, TList *colors, const TGWindow *p=nullptr, UInt_t w=800, UInt_t h=600);  Constructs window with ""w"" as width, ""h"" as height and given parent ""p"". ;  ;  ~TStructViewerGUI () override;  Destructor. ;  ; void AutoRefreshButtonSlot (Bool_t on);  Activated when user chage condition. ;  ; void BoxHeightValueSetSlot (Long_t h);  Emmited when user changes height of boxes. ;  ;  ClassDefOverride (TStructViewerGUI, 0);  ; void CloseWindow () override;  Delete window. ;  ; void ColorSelectedSlot (Pixel_t pixel);  Slot for default color selsect. ;  ; void DoubleClickedSlot ();  Activated when user double click on objects on 3D scene. ;  ; void Draw (Option_t *option="""") override;  Check limits and draws nodes and links. ;  ; TCanvas * GetCanvas ();  ; Int_t GetColor (TStructNode *node);  Returns color form fColors for given ""node"". ;  ; TStructNodeProperty * GetDefaultColor ();  Return default color for nodes. ;  ; Bool_t GetLinksVisibility () const;  Returns true if links are visible, otherwise return false. ;  ; TStructNode * GetNodePtr () const;  Returns top node pointer. ;  ; void GLWidgetProcessedEventSlot (Event_t *event);  Handle events. Sets fMouseX and fMouseY when user move a mouse over viewer and hides ToolTip. ;  ; void LevelDistValueSetSlot (Long_t dist);  Emmited when user changes distance between levels. ;  ; void MouseOverSlot (TGLPhysicalShape *shape);  MouseOver slot. ;  ; void RedoButtonSlot ();  Activated when user click Redo button. Repeat last Undo action. ;  ; void ResetButtonSlot ();  Resets camera. ;  ; void ScaleB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:72,Guid,Guide,72,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Guid'],['Guide']
Usability,". ROOT: TStyle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TStyle Class ReferenceCore ROOT classes » Base ROOT classes | Graphics » Graphics attributes. ; TStyle objects may be created to define special styles. ; By default ROOT creates a default style that can be accessed via the gStyle pointer.; This class includes functions to set some of the following object attributes.; Canvas; Pad; Histogram axis; Lines; Fill areas; Text; Markers; Functions; Histogram Statistics and Titles. All objects that can be drawn in a pad inherit from one or more attribute classes like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their default attributes are taken from the current style. The current style is an object of the classTStyle and can be referenced via the global variable gStyle (in TStyle.h).; ROOT provides two styles called ""Default"" and ""Plain"". The ""Default"" style is created simply by:; auto default = new TStyle(""Default"",""Default Style"");; TStyle::TStyleTStyle()Default constructor.Definition TStyle.cxx:145; The Plain style can be used if you are working on a monochrome display or if you want to get a ""conventional"" Postscript output. These are the instructions in the ROOT constructor to create the Plain style.; auto plain = new TStyle(""Plain"",""Plain Style (no colors/fill areas)"");; ; plain->SetCanvasBorderMode(0);; plain->SetPadBorderMode(0);; plain->SetPadColor(0);; plain->SetCanvasColor(0);; plain->SetTitleColor(0);; plain->SetStatColor(0);; You can set the current style with:; gROOT->SetStyle(style_name);; gROOT#define gROOTDefinition TROOT.h:406; You can get a pointer to an existing style with:; auto style = gROOT->GetStyle(style_name);; styleOption_t Option_t styleDefinition TGWin32VirtualXProxy.cxx:46; You can create additional styles with:; TSty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:62,Guid,Guide,62,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['Guid'],['Guide']
Usability,". ROOT: TSynapse Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSynapse Class Reference. ; This is a simple weighted bidirectional connection between two neurons. ; A network is built connecting two neurons by a synapse. In addition to the value, the synapse can return the DeDw ; Definition at line 20 of file TSynapse.h. Public Member Functions;  TSynapse ();  Default constructor. ;  ;  TSynapse (TNeuron *, TNeuron *, Double_t w=1);  Constructor that connects two neurons. ;  ;  ~TSynapse () override;  ; Double_t GetDeDw () const;  Computes the derivative of the error wrt the synapse weight. ;  ; Double_t GetDEDw () const;  ; TNeuron * GetPost () const;  ; TNeuron * GetPre () const;  ; Double_t GetValue () const;  Returns the value: weighted input. ;  ; Double_t GetWeight () const;  ; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the synapse weight. ;  ; void SetPost (TNeuron *post);  Sets the post-neuron. ;  ; void SetPre (TNeuron *pre);  Sets the pre-neuron. ;  ; void SetWeight (Double_t w);  Sets the weight of the synapse. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSynapse.html:64,Guid,Guide,64,doc/master/classTSynapse.html,https://root.cern,https://root.cern/doc/master/classTSynapse.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TSysEvtHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TSysEvtHandler Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract base class for handling system events. ; Definition at line 28 of file TSysEvtHandler.h. Public Member Functions;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Add ()=0;  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const override;  ; Bool_t IsActive () const;  ; virtual void Notified ();  ; virtual Bool_t Notify () override=0;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove ()=0;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSysEvtHandler.html:70,Guid,Guide,70,doc/master/classTSysEvtHandler.html,https://root.cern,https://root.cern/doc/master/classTSysEvtHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TSystem Class ReferenceCore ROOT classes » Base ROOT classes. ; Abstract base class defining a generic interface to the underlying Operating System. ; This is not an ABC in the strict sense of the (C++) word. For every member function there is an implementation (often not more than a call to AbstractMethod() which prints a warning saying that the method should be overridden in a derived class), which allows a simple partial implementation for new OS'es. ; Definition at line 266 of file TSystem.h. Public Types; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual Bool_t AccessPathName (const char *path, EAccessMode",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem.html:63,Guid,Guide,63,doc/master/classTSystem.html,https://root.cern,https://root.cern/doc/master/classTSystem.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TSystemDirectory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TSystemDirectory Class ReferenceCore ROOT classes » Base ROOT classes. ; Describes an Operating System directory for the browser. ; Definition at line 32 of file TSystemDirectory.h. Public Member Functions;  TSystemDirectory ();  Create a system directory object. ;  ;  TSystemDirectory (const char *dirname, const char *path);  Create a system directory object. ;  ; virtual ~TSystemDirectory ();  Delete system directory object. ;  ; void Browse (TBrowser *b) override;  Browse OS system directories. ;  ; void Copy (const char *) override;  copy this file ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; void Delete () override;  delete this file ;  ; void Delete (Option_t *) override;  Delete this object. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *) const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void Edit () override;  Invoke text editor on this file. ;  ; virtual TList * GetListOfFiles () const;  Returns a TList of TSystemFile objects representing the contents of the directory. ;  ; TClass * IsA () const override;  ; Bool_t IsDirectory (const char *=nullptr) const override;  Check if object is a directory. ;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; void Move (const char *) override;  move this file ;  ; virtual void SetDirectory (const char *name);  Create a system directory object. ;  ; void SetDrawOption (Option_t *) override;  Set drawing option for object. ;  ; void SetName (const char *name) override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemDirectory.html:72,Guid,Guide,72,doc/master/classTSystemDirectory.html,https://root.cern,https://root.cern/doc/master/classTSystemDirectory.html,1,['Guid'],['Guide']
Usability,". ROOT: TSystemFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TSystemFile Class ReferenceCore ROOT classes » Base ROOT classes. ; A TSystemFile describes an operating system file. ; The information is used by the browser (see TBrowser). ; Definition at line 29 of file TSystemFile.h. Public Member Functions;  TSystemFile ();  TSystemFile default constructor. ;  ;  TSystemFile (const char *filename, const char *dirname);  TSystemFile normal constructor. ;  ; virtual ~TSystemFile ();  Delete TSystemFile object. ;  ; void Browse (TBrowser *b) override;  Execute default action for this system file (action is specified in the $HOME/.root.mimes or $ROOTSYS/etc/root.mimes file. ;  ; virtual void Copy (const char *to);  copy this file ;  ; void Copy (TObject &) const override;  Copy this to obj. ;  ; virtual void Delete ();  delete this file ;  ; void Delete (Option_t *) override;  Delete this object. ;  ; void DrawClass () const override;  Draw class inheritance tree of the class to which this object belongs. ;  ; TObject * DrawClone (Option_t *) const override;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; void Dump () const override;  dump this file ;  ; virtual void Edit ();  Invoke text editor on this file. ;  ; const char * GetIconName () const override;  Returns mime type name of object. ;  ; void Inspect () const override;  inspect this file ;  ; TClass * IsA () const override;  ; virtual Bool_t IsDirectory (const char *dir=nullptr) const;  Check if object is a directory. ;  ; virtual void Move (const char *to);  move this file ;  ; virtual void Rename (const char *name);  rename this file ;  ; void SetDrawOption (Option_t *) override;  Set drawing option for object. ;  ; virtual void SetIconName (const char *name);  ; void SetName (const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystemFile.html:67,Guid,Guide,67,doc/master/classTSystemFile.html,https://root.cern,https://root.cern/doc/master/classTSystemFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TTF Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Static Protected Attributes |; Friends |; List of all members ; TTF Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Interface to the freetype 2 library. ; Definition at line 53 of file TTF.h. Classes; class  TTGlyph;  TTF helper class containing glyphs description. More...;  . Public Member Functions;  TTF ();  ; virtual ~TTF ();  Cleanup TTF environment. ;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Short_t CharToUnicode (UInt_t code);  Map char to unicode. Returns 0 in case no mapping exists. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void Cleanup ();  Cleanup. Is called by the gCleanupTTF destructor. ;  ; static void ComputeTrailingBlanksWidth (Int_t n);  Compute the trailing blanks width. ;  ; static const char * DeclFileName ();  ; static Int_t GetAscent ();  ; static const FT_BBox & GetBox ();  ; static TTGlyph * GetGlyphs ();  ; static Bool_t GetHinting ();  ; static Bool_t GetKerning ();  ; static Int_t GetNumGlyphs ();  ; static FT_Matrix * GetRotMatrix ();  ; static Bool_t GetSmoothing ();  ; static void GetTextAdvance (UInt_t &a, char *text);  Get advance (a) when text is horizontal. ;  ; static void GetTextExtent (UInt_t &w, UInt_t &h, char *text);  Get width (w) and height (h) when text is horizontal. ;  ; static void GetTextExtent (UInt_t &w, UInt_t &h, wchar_t *text);  Get width (w) and height (h) when text is horizontal. ;  ; static Int_t GetTrailingBlanksWidth ();  ; static Int_t GetWidth ();  ; static void Init ();  Initialise the TrueType fonts interface. ;  ; static Bool_t IsInitialized ();  ; static vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTF.html:59,Guid,Guide,59,doc/master/classTTF.html,https://root.cern,https://root.cern/doc/master/classTTF.html,1,['Guid'],['Guide']
Usability,". ROOT: TTRAP Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTRAP Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A general trapezoid. . The faces perpendicular to z are trapezia and their centres are not necessarily on a line parallel to the z axis. This shape has 14 parameters. name: name of the shape; title: shape's title; material: (see TMaterial); dz: half-length along the z axis; theta: polar angle of the line joining the centre of the face at -DZ to the centre of the one at +DZ; phi: azimuthal angle of the line joining the centre of the face at -DZ to the centre of the one at +DZ; h1: half-length along y of the face at -DZ; bl1: half-length along x of the side at -H1 in y of the face at -DZ in z; tl1: half-length along x of the side at +H1 in y of the face at -DZ in z; alpha1: angle with respect to the y axis from the centre of the side at -H1 in y to the centre of the side at +H1 in y of the face at -DZ in z; h2: half-length along y of the face at +DZ; bl2: half-length along x of the side at -H2 in y of the face at +DZ in z; tl2: half-length along x of the side at +H2 in y of the face at +DZ in z; alpha2: angle with respect to the y axis from the centre of the side at -H2 in y to the centre of the side at +H2 in y of the face at +DZ in z . Definition at line 33 of file TTRAP.h. Public Member Functions;  TTRAP ();  TRAP shape default constructor. ;  ;  TTRAP (const char *name, const char *title, const char *material, Float_t dz, Float_t theta, Float_t phi, Float_t h1, Float_t bl1, Float_t tl1, Float_t alpha1, Float_t h2, Float_t bl2, Float_t tl2, Float_t alpha2);  TRAP shape normal constructor. ;  ;  ~TTRAP () override;  TRAP shape default destructor. ;  ; virtual Float_t GetAlpha1 () const;  ; virtual Float_t GetAlpha2 () const;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTRAP.html:61,Guid,Guide,61,doc/master/classTTRAP.html,https://root.cern,https://root.cern/doc/master/classTTRAP.html,1,['Guid'],['Guide']
Usability,". ROOT: TTRD1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTRD1 Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A trapezoid with the x dimension varying along z. . It has 7 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx1: half-length along x at the z surface positioned at -DZ; dx2: half-length along x at the z surface positioned at +DZ; dy: half-length along the y-axis; dz: half-length along the z-axis . Definition at line 28 of file TTRD1.h. Public Member Functions;  TTRD1 ();  TRD1 shape default constructor. ;  ;  TTRD1 (const char *name, const char *title, const char *material, Float_t dx1, Float_t dx2, Float_t dy, Float_t dz);  TRD1 shape normal constructor. ;  ;  ~TTRD1 () override;  TRD1 shape default destructor. ;  ; virtual Float_t GetDx2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTRD1.html:61,Guid,Guide,61,doc/master/classTTRD1.html,https://root.cern,https://root.cern/doc/master/classTTRD1.html,1,['Guid'],['Guide']
Usability,". ROOT: TTRD2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTRD2 Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A trapezoid with both x and y dimensions varying along z. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); dx1: half-length along x at the z surface positioned at -DZ; dx2: half-length along x at the z surface positioned at +DZ; dy1: half-length along y at the z surface positioned at -DZ; dy2: half-length along y at the z surface positioned at +DZ; dz: half-length along the z-axis . Definition at line 29 of file TTRD2.h. Public Member Functions;  TTRD2 ();  TRD2 shape default constructor. ;  ;  TTRD2 (const char *name, const char *title, const char *material, Float_t dx1, Float_t dx2, Float_t dy1, Float_t dy2, Float_t dz);  TRD2 shape normal constructor. ;  ;  ~TTRD2 () override;  TRD2 shape default destructor. ;  ; Float_t GetDx2 () const;  ; Float_t GetDy2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TBRIK;  TBRIK ();  BRIK shape default constructor. ;  ;  TBRIK (const char *name, const char *title, const char *material, Float_t dx, Float_t dy, Float_t dz);  BRIK shape normal constructor. ;  ;  ~TBRIK () override;  BRIK shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a BRIK. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3D. ;  ; Float_t GetDx () const;  ; Float_t GetDy () const;  ; Float_t GetDz () const;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTRD2.html:61,Guid,Guide,61,doc/master/classTTRD2.html,https://root.cern,https://root.cern/doc/master/classTTRD2.html,1,['Guid'],['Guide']
Usability,". ROOT: TTUBE Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTUBE Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A tube. . It has 6 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z . Definition at line 32 of file TTUBE.h. Public Member Functions;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t aspect=1);  TUBE shape normal constructor. ;  ;  ~TTUBE () override;  TUBE shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; virtual Float_t GetAspectRatio () const;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetDz () const;  ; virtual Int_t GetNdiv () const;  ; virtual Int_t GetNumberOfDivisions () const;  ; virtual Float_t GetRmax () const;  ; virtual Float_t GetRmin () const;  ; TClass * IsA () const override;  ; virtual void SetAspectRatio (Float_t factor=1);  ; virtual void SetNumberOfDivisions (Int_t ndiv);  Set number of divisions used to draw this tube. ;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TShape;  TShape ();  Shape default constructor. ;  ;  TShape (const char *name, const char *title, const char *mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBE.html:61,Guid,Guide,61,doc/master/classTTUBE.html,https://root.cern,https://root.cern/doc/master/classTTUBE.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: TTUBS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTUBS Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A segment of a tube. . It has 8 parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); rmin: inside radius; rmax: outside radius; dz: half length in z; phi1: starting angle of the segment; phi2: ending angle of the segment. NOTE: phi1 should be smaller than phi2. If this is not the case, the system adds 360 degrees to phi2. ; Definition at line 29 of file TTUBS.h. Public Member Functions;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz);  TUBE shape ""simplified"" constructor. ;  ;  TTUBE (co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTUBS.html:61,Guid,Guide,61,doc/master/classTTUBS.html,https://root.cern,https://root.cern/doc/master/classTTUBS.html,2,"['Guid', 'simpl']","['Guide', 'simplified']"
Usability,". ROOT: TTVLVContainer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; Friends |; List of all members ; TTVLVContainer Class Reference. ; This class represent the list view container for the TreeView class. ; It is a TGLVContainer with item dragging capabilities for the TTVLVEntry objects inside. ; Definition at line 110 of file TTVLVContainer.h. Public Member Functions;  TTVLVContainer (const TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame);  TGLVContainer constructor. ;  ;  ~TTVLVContainer () override;  TGLVContainer destructor. ;  ; virtual void AddThisItem (TTVLVEntry *item);  ; const char * Cut ();  Return the cut entry. ;  ; void EmptyAll ();  Clear all names and aliases for expression type items. ;  ; const char * Ex ();  Return the expression on X. ;  ; TTVLVEntry * ExpressionItem (Int_t index);  Return the expression item at specific position. ;  ; TList * ExpressionList ();  Return the list of user-defined expressions. ;  ; const char * Ey ();  Return the expression on Y. ;  ; const char * Ez ();  Return the expression on Z. ;  ; TTreeViewer * GetViewer ();  ; bool HandleButton (Event_t *event) override;  Handle mouse button event in container. ;  ; bool HandleMotion (Event_t *event) override;  Handle mouse motion events. ;  ; void RemoveNonStatic ();  Remove all non-static items from the list view, except expressions. ;  ; const char * ScanList ();  Return the cut entry. ;  ; void SelectItem (const char *name);  Select an item. ;  ; void SetListView (TGListView *lv) override;  ; void SetViewer (TTreeViewer *viewer);  ;  Public Member Functions inherited from TGLVContainer;  TGLVContainer (const TGWindow *p, UInt_t w, UInt_t h, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackground());  Create a list view container. ;  ;  TGLVContainer (TGCanvas *p, UInt_t options=kSunkenFrame, Pixel_t back=GetDefaultFrameBackgr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVContainer.html:70,Guid,Guide,70,doc/master/classTTVLVContainer.html,https://root.cern,https://root.cern/doc/master/classTTVLVContainer.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TTVLVEntry Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTVLVEntry Class Reference. ; This class represent entries that goes into the TreeViewer listview container. ; It subclasses TGLVEntry and adds two data members: the item true name and the alias. ; Definition at line 56 of file TTVLVContainer.h. Public Member Functions;  TTVLVEntry (const TGWindow *p, const TGPicture *bigpic, const TGPicture *smallpic, TGString *name, TGString **subnames, EListViewMode ViewMode);  TTVLVEntry constructor. ;  ;  ~TTVLVEntry () override;  TTVLVEntry destructor. ;  ; const char * ConvertAliases ();  Convert all aliases into true names. ;  ; void CopyItem (TTVLVEntry *dest);  Copy this item's name and alias to an other. ;  ; void Empty ();  Clear all names and alias. ;  ; const char * GetAlias ();  ; TTVLVContainer * GetContainer ();  ; TGItemContext * GetContext ();  ; const char * GetConvName ();  ; TGToolTip * GetTip ();  ; const char * GetTrueName ();  ; bool HandleCrossing (Event_t *event) override;  Handle mouse crossing event. ;  ; bool HasAlias ();  Check if alias name is not empty. ;  ; bool IsCut ();  ; void PrependTilde ();  Prepend a ~ to item alias. ;  ; void SetAlias (const char *alias);  ; void SetCutType (bool type=false);  Set cut type. ;  ; void SetExpression (const char *name, const char *alias, bool cutType=false);  Set the true name, alias and type of the expression, then refresh it. ;  ; void SetItemName (const char *name);  Redraw this entry with new name. ;  ; void SetSmallPic (const TGPicture *spic);  Set small picture. ;  ; void SetToolTipText (const char *text, Long_t delayms=1000);  Set tool tip text associated with this item. ;  ; void SetTrueName (const char *name);  ;  Public Member Functions inherited from TGLVEntry;  TGLVEntry (const TGLVContainer *p, const TString &n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVLVEntry.html:66,Guid,Guide,66,doc/master/classTTVLVEntry.html,https://root.cern,https://root.cern/doc/master/classTTVLVEntry.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TTVRecord Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; List of all members ; TTVRecord Class Reference. ; I/O classes for TreeViewer session handling. ; Definition at line 29 of file TTVSession.h. Public Member Functions;  TTVRecord ();  Default constructor. ;  ;  ~TTVRecord () override;  Destructor. ;  ; void ExecuteUserCode ();  Execute user-defined code. ;  ; void FormFrom (TTreeViewer *tv);  Populate members from treeviewer tv. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetUserCode () const;  ; const char * GetX () const;  ; const char * GetY () const;  ; const char * GetZ () const;  ; bool HasUserCode () const;  ; TClass * IsA () const override;  ; bool MustExecuteCode () const;  ; void PlugIn (TTreeViewer *tv);  Change treeviewer status to this record. ;  ; void SaveSource (std::ofstream &out);  Save the TTVRecord in a C++ macro file. ;  ; void SetAutoexec (bool autoexec=true);  ; void SetCut (const char *cut="""", const char *cal=""-empty-"");  ; void SetName (const char *name="""");  ; void SetOption (const char *option="""");  ; void SetRC (bool redirect=false, bool cut=true);  ; void SetUserCode (const char *code, bool autoexec=true);  ; void SetX (const char *x="""", const char *xal=""-empty-"");  ; void SetY (const char *y="""", const char *yal=""-empty-"");  ; void SetZ (const char *z="""", const char *zal=""-empty-"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVRecord.html:65,Guid,Guide,65,doc/master/classTTVRecord.html,https://root.cern,https://root.cern/doc/master/classTTVRecord.html,1,['Guid'],['Guide']
Usability,". ROOT: TTVSession Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TTVSession Class Reference. ; I/O classes for TreeViewer session handling. ; Definition at line 75 of file TTVSession.h. Public Member Functions;  TTVSession (TTreeViewer *tv);  Constructor. ;  ;  ~TTVSession () override;  Destructor. ;  ; TTVRecord * AddRecord (bool fromFile=false);  Add a record. ;  ; TTVRecord * First ();  ; TTVRecord * GetCurrent ();  ; Int_t GetEntries ();  ; const char * GetName () const override;  Returns name of object. ;  ; TTVRecord * GetRecord (Int_t i);  Return record at index i. ;  ; TClass * IsA () const override;  ; TTVRecord * Last ();  ; TTVRecord * Next ();  ; TTVRecord * Previous ();  ; void RemoveLastRecord ();  Remove current record from list. ;  ; void SaveSource (std::ofstream &out);  Save the TTVSession in a C++ macro file. ;  ; void SetName (const char *name);  ; void SetRecordName (const char *name);  Set record name. ;  ; void Show (TTVRecord *rec);  Display record rec. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UpdateRecord (const char *name);  Updates current record according to new X, Y, Z settings. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVSession.html:66,Guid,Guide,66,doc/master/classTTVSession.html,https://root.cern,https://root.cern/doc/master/classTTVSession.html,1,['Guid'],['Guide']
Usability,". ROOT: TTabCom Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TTabCom Class Reference. . Definition at line 52 of file TTabCom.h. Public Types; enum  { kDebug = 17; };  ; enum  EContext_t { ;   kUNKNOWN_CONTEXT =-1; , kSYS_UserName; , kSYS_EnvVar; , kCINT_stdout; , ;   kCINT_stderr; , kCINT_stdin; , kCINT_Edit; , kCINT_Load; , ;   kCINT_Exec; , kCINT_EXec; , kCINT_pragma; , kCINT_includeSYS; , ;   kCINT_includePWD; , kCINT_cpp; , kROOT_Load; , kSYS_FileName; , ;   kCXX_NewProto; , kCXX_ConstructorProto; , kCXX_ScopeProto; , kCXX_DirectProto; , ;   kCXX_IndirectProto; , kCXX_ScopeMember; , kCXX_DirectMember; , kCXX_IndirectMember; , ;   kCXX_Global; , kCXX_GlobalProto; , kNUM_PAT. };  ; typedef TList TContainer;  ; typedef TListIter TContIter;  . Public Member Functions;  TTabCom ();  Default constructor. ;  ; virtual ~TTabCom ();  ; void ClearAll ();  clears all lists except for user names and system include files. ;  ; void ClearClasses ();  Clear classes and namespace collections. ;  ; void ClearCppDirectives ();  Forget all Cpp directives seen so far. ;  ; void ClearEnvVars ();  Forget all environment variables seen so far. ;  ; void ClearFiles ();  Close all files. ;  ; void ClearGlobalFunctions ();  Forget all global functions seen so far. ;  ; void ClearGlobals ();  Forget all global variables seen so far. ;  ; void ClearPragmas ();  Forget all pragmas seen so far. ;  ; void ClearSysIncFiles ();  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of envir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:63,Guid,Guide,63,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Guid'],['Guide']
Usability,". ROOT: TTask Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TTask Class ReferenceCore ROOT classes » Base ROOT classes. ; Legacy Code TTask is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TTask might still be a valid solution. ; TTask is a base class that can be used to build a complex tree of Tasks. Each TTask derived class may contain other TTasks that can be executed recursively, such that a complex program can be dynamically built and executed by invoking the services of the top level Task or one of its subtasks.; Use the TTask::Add function to add a subtask to an existing TTask. To execute a TTask, one calls the ExecuteTask function. ExecuteTask will call recursively:. the TTask::Exec function of the derived class; TTask::ExecuteTasks to execute for each task the list of its subtasks. If the top level task (see example below) is added to the list of Root browsable objects, the tree of tasks can be visualized by the Root browser. The browser can be used to start a task, set break points at the beginning of a task or when the task has completed. At a breakpoint, data structures generated by the execution up this point may be inspected asynchronously and then the execution can be resumed by selecting the ""Continue"" function of a task.; A Task may be active or inactive (controlled by TTask::SetActive). When a task is not active, its sub tasks are not executed.; A TTask tree may be made persistent, saving the status of all the tasks.; The Root browser's picture below has been generated by executing the following script: {; TTask *aliroot = new TTask(""aliroot"",""ALICE reconstruction main task"");; TTask *geominit = new TTask(""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTask.html:61,Guid,Guide,61,doc/master/classTTask.html,https://root.cern,https://root.cern/doc/master/classTTask.html,1,['Guid'],['Guide']
Usability,". ROOT: TTeXDump Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TTeXDump Class ReferenceGraphics » 2D Graphics » Graphics file output. ; Interface to TeX. ; This class allow to generate PGF/TikZ vector graphics output which can be included in TeX and LaTeX documents.; PGF is a TeX macro package for generating graphics. It is platform and format-independent and works together with the most important TeX backend drivers, including pdftex and dvips. It comes with a user-friendly syntax layer called TikZ.; To generate a such file it is enough to do: gStyle->SetPaperSize(10.,10.);; hpx->Draw();; gPad->Print(""hpx.tex"");; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:64,Guid,Guide,64,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,2,"['Guid', 'user-friendly']","['Guide', 'user-friendly']"
Usability,". ROOT: TTermInputHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TTermInputHandler Class Reference. . Definition at line 121 of file TRint.cxx. Public Member Functions;  TTermInputHandler (Int_t fd);  ; Bool_t Notify () override;  Notify implementation. Call the application interupt handler. ;  ; Bool_t ReadNotify () override;  Notify when something can be read from the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TFileHandler;  TFileHandler (int fd, int mask);  Create a file descriptor event handler. ;  ; virtual ~TFileHandler ();  ; void Add () override;  Add file event handler to system file handler list. ;  ; int GetFd () const;  ; virtual Bool_t HasReadInterest ();  True if handler is interested in read events. ;  ; virtual Bool_t HasWriteInterest ();  True if handler is interested in write events. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsReadReady () const;  ; virtual Bool_t IsWriteReady () const;  ; void Remove () override;  Remove file event handler from system file handler list. ;  ; virtual void ResetReadyMask ();  ; void SetFd (int fd);  ; virtual void SetInterest (Int_t mask);  Set interest mask to 'mask'. ;  ; virtual void SetReadReady ();  ; virtual void SetWriteReady ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t WriteNotify ();  Notify when something can be written to the descriptor associated with this handler. ;  ;  Public Member Functions inherited from TSysEvtHandler;  TSysEvtHandler ();  ; virtual ~TSysEvtHandler ();  ; void Activate ();  Activate a system event handler. ;  ; virtual void Activated ();  ; virtual void Added ();  ; void DeActivate ();  De-activate a system event handler. ;  ; virtual void DeActivated ();  ; TClass * IsA () const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTermInputHandler.html:73,Guid,Guide,73,doc/master/classTTermInputHandler.html,https://root.cern,https://root.cern/doc/master/classTTermInputHandler.html,1,['Guid'],['Guide']
Usability,". ROOT: TText Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TText Class ReferenceGraphics » 2D Graphics » Basic graphics. ; Base class for several text objects. ; See TAttText for a list of text attributes or fonts, and also for a discussion on text speed and font quality.; By default, the text is drawn in the pad coordinates system. One can draw in NDC coordinates [0,1] if the function SetNDC is called for a TText object.; Example:; {; TText *t = new TText(.5,.5,""Hello World !"");; t->SetTextAlign(22);; t->SetTextColor(kRed+2);; t->SetTextFont(43);; t->SetTextSize(40);; t->SetTextAngle(45);; t->Draw();; }; kRed@ kRedDefinition Rtypes.h:66; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TTextBase class for several text objects.Definition TText.h:22; TText::TTextTText()Definition TText.h:35. Definition at line 22 of file TText.h. Public Types; enum  { kTextNDC = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTText.html:61,Guid,Guide,61,doc/master/classTText.html,https://root.cern,https://root.cern/doc/master/classTText.html,1,['Guid'],['Guide']
Usability,". ROOT: TThread Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; Friends |; List of all members ; TThread Class Reference. ; Legacy Code TThread is a legacy interface: there will be no bug fixes nor new developments. Therefore it is not recommended to use it in new long-term production code. But, depending on the context, using TThread might still be a valid solution. ; This class implements threads. A thread is an execution environment much lighter than a process. A single process can have multiple threads. The actual work is done via the TThreadImp class (either TPosixThread or TWin32Thread). ; Definition at line 40 of file TThread.h. Public Types; enum  EPriority { kLowPriority; , kNormalPriority; , kHighPriority; };  ; enum  EState { ;   kInvalidState; , kNewState; , kRunningState; , kTerminatedState; , ;   kFinishedState; , kCancelingState; , kCanceledState; , kDeletingState. };  ; typedef void(* VoidFunc_t) (void *);  ; typedef void *(* VoidRtnFunc_t) (void *);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TThread (const char *thname, VoidFunc_t fn, void *arg=nullptr, EPriority pri=kNormalPrior",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThread.html:63,Guid,Guide,63,doc/master/classTThread.html,https://root.cern,https://root.cern/doc/master/classTThread.html,1,['Guid'],['Guide']
Usability,". ROOT: TThreadFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TThreadFactory Class Referenceabstract. . Definition at line 32 of file TThreadFactory.h. Public Member Functions;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; virtual TConditionImp * CreateConditionImp (TMutexImp *m)=0;  ; virtual TMutexImp * CreateMutexImp (Bool_t recursive)=0;  ; virtual TThreadImp * CreateThreadImp ()=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThreadFactory.html:70,Guid,Guide,70,doc/master/classTThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTThreadFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: TThreadImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TThreadImp Class Referenceabstract. . Definition at line 31 of file TThreadImp.h. Public Member Functions;  TThreadImp ();  ; virtual ~TThreadImp ();  ; virtual Int_t CancelPoint ()=0;  ; virtual Int_t CleanUp (void **main)=0;  ; virtual Int_t CleanUpPop (void **main, Int_t exe)=0;  ; virtual Int_t CleanUpPush (void **main, void *free, void *arg)=0;  ; virtual Int_t Exit (void *ret)=0;  ; TClass * IsA () const override;  ; virtual Int_t Join (TThread *th, void **ret)=0;  ; virtual Int_t Kill (TThread *th)=0;  ; virtual Int_t Run (TThread *th, const int affinity=-1)=0;  ; virtual Long_t SelfId ()=0;  ; virtual Int_t SetCancelAsynchronous ()=0;  ; virtual Int_t SetCancelDeferred ()=0;  ; virtual Int_t SetCancelOff ()=0;  ; virtual Int_t SetCancelOn ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThreadImp.html:66,Guid,Guide,66,doc/master/classTThreadImp.html,https://root.cern,https://root.cern/doc/master/classTThreadImp.html,1,['Guid'],['Guide']
Usability,". ROOT: TThreadTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TThreadTimer Class Reference. . Definition at line 203 of file TThread.h. Public Member Functions;  TThreadTimer (Long_t ms=kItimerResolution+10);  Create thread timer. ;  ; Bool_t Notify () override;  Periodically execute the TThread::XAction() method in the main thread. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTThreadTimer.html:68,Guid,Guide,68,doc/master/classTThreadTimer.html,https://root.cern,https://root.cern/doc/master/classTThreadTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TTime Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TTime Class ReferenceCore ROOT classes » Base ROOT classes. ; Basic time type with millisecond precision. ; Definition at line 27 of file TTime.h. Public Member Functions;  TTime ();  ;  TTime (const TTime &t);  ;  TTime (Long64_t msec);  ; virtual ~TTime ();  ; const char * AsString () const;  Return the time as a string. ;  ; virtual TClass * IsA () const;  ;  operator long () const;  ;  operator long long () const;  ;  operator unsigned long () const;  ;  operator unsigned long long () const;  ; TTime operator*= (const TTime &t);  ; TTime operator+= (const TTime &t);  ; TTime operator-= (const TTime &t);  ; TTime operator/= (const TTime &t);  ; TTime & operator= (const TTime &t);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; Long64_t fMilliSec;  . Friends; Bool_t operator!= (const TTime &t1, const TTime &t2);  ; TTime operator* (const TTime &t1, const TTime &t2);  ; TTime operator+ (const TTime &t1, const TTime &t2);  ; TTime operator- (const TTime &t1, const TTime &t2);  ; TTime operator/ (const TTime &t1, const TTime &t2);  ; Bool_t operator< (const TTime &t1, const TTime &t2);  ; Bool_t operator<= (const TTime &t1, const TTime &t2);  ; Bool_t operator== (const TTime &t1, const TTime &t2);  ; Bool_t operator> (const TTime &t1, const TTime &t2);  ; Bool_t operator>= (const TTime &t1, const TTime &t2);  . #include <TTime.h>; Constructor & Destructor Documentation. ◆ TTime() [1/3]. TTime::TTime ; (; ). inline . Definition at line 33 of file TTime.h. ◆ TTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTime.html:61,Guid,Guide,61,doc/master/classTTime.html,https://root.cern,https://root.cern/doc/master/classTTime.html,1,['Guid'],['Guide']
Usability,". ROOT: TTimeOutTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TTimeOutTimer Class Reference. . Definition at line 76 of file TMonitor.cxx. Public Member Functions;  TTimeOutTimer (TMonitor *m, Long_t ms);  ; Bool_t Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimeOutTimer.html:69,Guid,Guide,69,doc/master/classTTimeOutTimer.html,https://root.cern,https://root.cern/doc/master/classTTimeOutTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTimer Class ReferenceCore ROOT classes » Base ROOT classes. ; Handles synchronous and a-synchronous timer events. . synchronous timer is registered into TSystem and is processed within the standard ROOT event-loop.; asynchronous timer is passed to the operating system which sends an external signal to ROOT and thus interrupts its event-loop. You can use this class in one of the following ways:; Sub-class TTimer and override the Notify() method.; Re-implement the TObject::HandleTimer() method in your class and pass a pointer to this object to timer, see the SetObject() method.; Pass an interpreter command to timer, see SetCommand() method.; Create a TTimer, connect its Timeout() signal to the appropriate methods. Then when the time is up it will emit a Timeout() signal and call connected slots. Minimum timeout interval is defined in TSystem::ESysConstants as kItimerResolution (currently 10 ms).; Signal/slots example: TTimer *timer = new TTimer();; timer->Connect(""Timeout()"", ""myObjectClassName"",; myObject, ""TimerDone()"");; timer->Start(2000, kTRUE); // 2 seconds single-shot; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TQObject::ConnectBool_t Connect(const char *signal, const char *receiver_class, void *receiver, const char *slot)Non-static method is used to connect from the signal of this object to the receiver slot.Definition TQObject.cxx:869; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; TTimer::Startvirtual void Start(Long_t milliSec=-1, Bool_t singleShot=kFALSE)Starts the timer with a milliSec timeout.Definition TTimer.cxx:213; To emit the Timeout signal repeatedly with minimum timeout: timer->Start(0, kFALSE);; kFALSEconstexpr Bool_t kFALSEDefinition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTimer.html:62,Guid,Guide,62,doc/master/classTTimer.html,https://root.cern,https://root.cern/doc/master/classTTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TTipDelayTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TTipDelayTimer Class Reference. . Definition at line 56 of file TGToolTip.cxx. Public Member Functions;  TTipDelayTimer (TGToolTip *tip, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTipDelayTimer.html:70,Guid,Guide,70,doc/master/classTTipDelayTimer.html,https://root.cern,https://root.cern/doc/master/classTTipDelayTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TToggle Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Attributes |; List of all members ; TToggle Class Reference. ; This class defines toggling facility for both - object's method or variables. ; Assume that user provides an object with a two-state field , and methods to Get/Set value of this field. This object enables to switch values via this method when the only thing you know about the field is the name of the method (or method itself) which sets the field. This facility is required in context Pop-Up menu, when the only information about how to toggle a field is a name of methhod which sets it. This class may be also used for toggling an integer variable, which may be important while building universal objects... When user provides a ""set-method"" of name SetXXX this object tries automaticaly find a matching ""get-method"" by lookin for a method with name GetXXX, IsXXX or HasXXX for given object. ; Definition at line 47 of file TToggle.h. Public Member Functions;  TToggle ();  TToggle default constructor. ;  ; TMethodCall * GetGetter () const;  ; virtual Long_t GetOffValue ();  ; virtual Long_t GetOnValue ();  ; TMethodCall * GetSetter () const;  ; virtual Bool_t GetState ();  Returns the state of Toggle according to its current value and fOnValue, returns true if they match. ;  ; virtual Int_t GetValue ();  ; TClass * IsA () const override;  ; virtual Bool_t IsInitialized ();  ; virtual void SetOffValue (Long_t lof);  ; virtual void SetOnValue (Long_t lon);  ; virtual void SetState (Bool_t state);  Sets the value of toggle to fOnValue or fOffValue according to passed argument. ;  ; virtual void SetToggledObject (TObject *obj, TMethod *anymethod);  Initializes it to toggle an object's datamember using this object's method. ;  ; virtual void SetToggledVariable (Int_t &var);  Initializes object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggle.html:63,Guid,Guide,63,doc/master/classTToggle.html,https://root.cern,https://root.cern/doc/master/classTToggle.html,1,['Guid'],['Guide']
Usability,". ROOT: TToggleGroup Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TToggleGroup Class Reference. ; This class defines check-box facility for TToggle objects It is used in context menu ""selectors"" for picking up a value. ; Definition at line 30 of file TToggleGroup.h. Public Member Functions;  TToggleGroup ();  Constructor. ;  ;  TToggleGroup (const TToggleGroup &);  Copy constructor. ;  ; virtual ~TToggleGroup ();  Deletes togglegroup but does not disposes toggled objects! ;  ; virtual Int_t Add (TToggle *t, Bool_t select=1);  Add a new toggle. ;  ; virtual TToggle * At (Int_t idx);  ; virtual void DeleteAll ();  Disposes of all objects and clears array. ;  ; virtual TToggle * First ();  ; virtual Int_t GetTogglesCount ();  ; virtual Int_t IndexOf (TToggle *t);  ; virtual Int_t InsertAt (TToggle *t, Int_t pos, Bool_t select=1);  Add a new toggle at a specific position. ;  ; TClass * IsA () const override;  ; virtual TToggle * Last ();  ; TToggleGroup & operator= (const TToggleGroup &);  Assignment operator. ;  ; virtual void Remove (Int_t pos);  ; virtual void Remove (TToggle *t);  ; virtual void Select (Int_t idx);  Select a toggle. ;  ; virtual void Select (TToggle *t);  Selector a toggle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggleGroup.html:68,Guid,Guide,68,doc/master/classTToggleGroup.html,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html,2,"['Guid', 'clear']","['Guide', 'clears']"
Usability,". ROOT: TTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTree Class ReferenceTree Library. ; A TTree represents a columnar dataset. ; Any C++ type can be stored in its columns.; A TTree, often called in jargon tree, consists of a list of independent columns or branches, represented by the TBranch class. Behind each branch, buffers are allocated automatically by ROOT. Such buffers are automatically written to disk or kept in memory until the size stored in the attribute fMaxVirtualSize is reached. Variables of one branch are written to the same buffer. A branch buffer is automatically compressed if the file compression attribute is set (default). Branches may be written to different files (see TBranch::SetFile).; The ROOT user can decide to make one single branch and serialize one object into one single I/O buffer or to make several branches. Making several branches is particularly interesting in the data analysis phase, when it is desirable to have a high reading rate and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:61,Guid,Guide,61,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TTree Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTree Class ReferenceTree Library. ; A TTree represents a columnar dataset. ; Any C++ type can be stored in its columns.; A TTree, often called in jargon tree, consists of a list of independent columns or branches, represented by the TBranch class. Behind each branch, buffers are allocated automatically by ROOT. Such buffers are automatically written to disk or kept in memory until the size stored in the attribute fMaxVirtualSize is reached. Variables of one branch are written to the same buffer. A branch buffer is automatically compressed if the file compression attribute is set (default). Branches may be written to different files (see TBranch::SetFile).; The ROOT user can decide to make one single branch and serialize one object into one single I/O buffer or to make several branches. Making several branches is particularly interesting in the data analysis phase, when it is desirable to have a high reading rate and not all columns are equally interesting. Create a TTree to store columnar data. Construct a TTree; Add a column of Fundamental Types and Arrays thereof; Add a column of a STL Collection instances; Add a column holding an object; Add a column holding a TObjectArray; Fill the tree; Add a column to an already existing Tree; An Example. Construct a TTree; TTree tree(name, title); namechar name[80]Definition TGX11.cxx:110; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; Creates a Tree with name and title.; Various kinds of branches can be added to a tree:; Variables representing fundamental types",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:60,Guid,Guide,60,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['Guid'],['Guide']
Usability,". ROOT: TTree::TClusterIterator Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTree::TClusterIterator Class Reference. ; Helper class to iterate over cluster of baskets. ; Definition at line 269 of file TTree.h. Public Member Functions; Long64_t GetNextEntry ();  ; Long64_t GetStartEntry ();  ; Long64_t Next ();  Move on to the next cluster and return the starting entry of this next cluster. ;  ; Long64_t operator() ();  ; Long64_t Previous ();  Move on to the previous cluster and return the starting entry of this previous cluster. ;  . Protected Member Functions;  TClusterIterator (TTree *tree, Long64_t firstEntry);  Regular constructor. ;  . Private Member Functions; Long64_t GetEstimatedClusterSize ();  Estimate the cluster size. ;  . Private Attributes; Int_t fClusterRange;  ; Long64_t fEstimatedSize;  ; Long64_t fNextEntry;  ; Long64_t fStartEntry;  ; TTree * fTree;  . Friends; class TTree;  . #include <TTree.h>; Constructor & Destructor Documentation. ◆ TClusterIterator(). TTree::TClusterIterator::TClusterIterator ; (; TTree * ; tree, . Long64_t ; firstEntry . ). protected . Regular constructor. ; TTree is not set as const, since we might modify if it is a TChain. ; Definition at line 560 of file TTree.cxx. Member Function Documentation. ◆ GetEstimatedClusterSize(). Long64_t TTree::TClusterIterator::GetEstimatedClusterSize ; (; ). private . Estimate the cluster size. ; In almost all cases, this quickly returns the size of the auto-flush in the TTree.; However, in the case where the cluster size was not fixed (old files and case where autoflush was explicitly set to zero), we need estimate a cluster size in relation to the size of the cache.; After this value is calculated once for the TClusterIterator, it is cached and reused in future calls. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree_1_1TClusterIterator.html:79,Guid,Guide,79,doc/master/classTTree_1_1TClusterIterator.html,https://root.cern,https://root.cern/doc/master/classTTree_1_1TClusterIterator.html,1,['Guid'],['Guide']
Usability,". ROOT: TTree::TFriendLock Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TTree::TFriendLock Class Reference. ; Helper class to prevent infinite recursion in the usage of TTree Friends. ; Definition at line 188 of file TTree.h. Public Member Functions;  TFriendLock (TTree *tree, UInt_t methodbit);  Record in tree that it has been used while recursively looks through the friends. ;  ;  ~TFriendLock ();  Restore the state of tree the same as before we set the lock. ;  . Protected Member Functions;  TFriendLock (const TFriendLock &);  Copy constructor. ;  ; TFriendLock & operator= (const TFriendLock &);  Assignment operator. ;  . Private Attributes; UInt_t fMethodBit;  ; bool fPrevious;  ; TTree * fTree;  . #include <TTree.h>; Constructor & Destructor Documentation. ◆ TFriendLock() [1/2]. TTree::TFriendLock::TFriendLock ; (; const TFriendLock & ; tfl). protected . Copy constructor. ; Definition at line 520 of file TTree.cxx. ◆ TFriendLock() [2/2]. TTree::TFriendLock::TFriendLock ; (; TTree * ; tree, . UInt_t ; methodbit . ). Record in tree that it has been used while recursively looks through the friends. ; Definition at line 503 of file TTree.cxx. ◆ ~TFriendLock(). TTree::TFriendLock::~TFriendLock ; (; ). Restore the state of tree the same as before we set the lock. ; Definition at line 543 of file TTree.cxx. Member Function Documentation. ◆ operator=(). TTree::TFriendLock & TTree::TFriendLock::operator= ; (; const TFriendLock & ; tfl). protected . Assignment operator. ; Definition at line 530 of file TTree.cxx. Member Data Documentation. ◆ fMethodBit. UInt_t TTree::TFriendLock::fMethodBit. private . Definition at line 192 of file TTree.h. ◆ fPrevious. bool TTree::TFriendLock::fPrevious. private . Definition at line 193 of file TTree.h. ◆ fTree. TTree* TTree::TFriendLock::fTree. private . Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree_1_1TFriendLock.html:74,Guid,Guide,74,doc/master/classTTree_1_1TFriendLock.html,https://root.cern,https://root.cern/doc/master/classTTree_1_1TFriendLock.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeCache Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TTreeCache Class ReferenceTree Library. ; A cache to speed-up the reading of ROOT datasets. . A cache to speed-up the reading of ROOT datasets. Table of Contents. Motivation; General Description; Changes in behaviour; Self-optimization; Examples of usage; Check performance and stats. Motivation: why having a cache is needed?; When writing a TTree, the branch buffers are kept in memory. A typical branch buffersize (before compression) is typically 32 KBytes. After compression, the zipped buffer may be just a few Kbytes. The branch buffers cannot be much larger in case of TTrees with several hundred or thousand branches.; When writing, this does not generate a performance problem because branch buffers are always written sequentially and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:66,Guid,Guide,66,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeCache Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; List of all members ; TTreeCache Class ReferenceTree Library. ; A cache to speed-up the reading of ROOT datasets. . A cache to speed-up the reading of ROOT datasets. Table of Contents. Motivation; General Description; Changes in behaviour; Self-optimization; Examples of usage; Check performance and stats. Motivation: why having a cache is needed?; When writing a TTree, the branch buffers are kept in memory. A typical branch buffersize (before compression) is typically 32 KBytes. After compression, the zipped buffer may be just a few Kbytes. The branch buffers cannot be much larger in case of TTrees with several hundred or thousand branches.; When writing, this does not generate a performance problem because branch buffers are always written sequentially and, thanks to OS optimisations, content is flushed to the output file when a few MBytes of data are available. On the other hand, when reading, one may hit performance problems because of latencies e.g imposed by network. For example in a WAN with 10ms latency, reading 1000 buffers of 10 KBytes each with no cache will imply 10s penalty where a local read of the 10 MBytes would take about 1 second.; The TreeCache tries to prefetch all the buffers for the selected branches in order to transfer a few multi-Megabytes large buffers instead of many multi-kilobytes small buffers. In addition, TTreeCache can sort the blocks to be read in increasing order such that the file is read sequentially.; Systems like xrootd, dCache or httpd take advantage of the TTreeCache in reading ahead as much data as they can and return to the application the maximum data specified in the cache and have the next chunk of data ready when the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:65,Guid,Guide,65,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeCacheUnzip Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TTreeCacheUnzip Class ReferenceTree Library. ; A TTreeCache which exploits parallelized decompression of its own content. ; Definition at line 35 of file TTreeCacheUnzip.h. Classes; struct  UnzipState;  . Public Types; enum  EParUnzipMode { kEnable; , kDisable; , kForce; };  ; enum  EUnzipState { kUntouched; , kProgress; , kFinished; };  ;  Public Types inherited from TTreeCache; enum  EPrefillType { kNoPrefill; , kAllBranches; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:71,Guid,Guide,71,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeCacheUnzip Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TTreeCacheUnzip Class ReferenceTree Library. ; A TTreeCache which exploits parallelized decompression of its own content. ; Definition at line 35 of file TTreeCacheUnzip.h. Classes; struct  UnzipState;  . Public Types; enum  EParUnzipMode { kEnable; , kDisable; , kForce; };  ; enum  EUnzipState { kUntouched; , kProgress; , kFinished; };  ;  Public Types inherited from TTreeCache; enum  EPrefillType { kNoPrefill; , kAllBranches; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeCacheUnzip ();  ;  TTreeCacheUnzip (TTree *tree, Int_t buffersize=0);  Constructor. ;  ;  ~TTreeCacheUnzip () override;  Destructor. (in general called by the TFile destructor) ;  ; Int_t AddBranch (const char *branch, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket Returns: ;  ; Int_t AddBranch (TBranch *b, bool subbranches=false) override;  Add a branch to the list of branches to be stored in the cache this functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:70,Guid,Guide,70,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeCloner Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeCloner Class ReferenceTree Library. ; Class implementing or helping the various TTree cloning method. ; Definition at line 31 of file TTreeCloner.h. Classes; class  CompareEntry;  ; class  CompareSeek;  . Public Types; enum  EClonerOptions { kNone = 0; , kNoWarnings = BIT(1); , kIgnoreMissingTopLevel = BIT(2); , kNoFileCache = BIT(3); };  . Public Member Functions;  TTreeCloner (TTree *from, TDirectory *newdirectory, Option_t *method, UInt_t options=kNone);  Constructor. In place cloning. ;  ;  TTreeCloner (TTree *from, TTree *to, Option_t *method, UInt_t options=kNone);  Constructor. ;  ; virtual ~TTreeCloner ();  TTreeCloner destructor. ;  ;  ClassDef (TTreeCloner, 0);  ; void CloseOutWriteBaskets ();  Before we can start adding new basket, we need to flush to disk the partially filled baskets (the WriteBasket) ;  ; void CollectBaskets ();  Collect the information about the on-file basket that need to be copied. ;  ; UInt_t CollectBranches ();  Fill the array of branches, matching the branches of the 'from' and 'to' TTrees Returns the total number of baskets in all the branches. ;  ; UInt_t CollectBranches (TBranch *from, TBranch *to);  Fill the array of branches, adding the branch 'from' and 'to', and matching the sub-branches of the 'from' and 'to' branches. ;  ; UInt_t CollectBranches (TObjArray *from, TObjArray *to);  Fill the array of branches, matching the branches of the 'from' and 'to' arrays. ;  ; void CopyMemoryBaskets ();  Transfer the basket from the input file to the output file. ;  ; void CopyProcessIds ();  Make sure that all the needed TStreamerInfo are present in the output file. ;  ; void CopyStreamerInfos ();  Make sure that all the needed TStreamerInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCloner.html:67,Guid,Guide,67,doc/master/classTTreeCloner.html,https://root.cern,https://root.cern/doc/master/classTTreeCloner.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeDrawArgsParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Member Functions |; Protected Attributes |; List of all members ; TTreeDrawArgsParser Class Reference. ; A class that parses all parameters for TTree::Draw(). ; See TTree::Draw() for the format description. ; Definition at line 29 of file TTreeDrawArgsParser.h. Public Types; enum  EOutputType { ;   kUNKNOWN; , kEVENTLIST; , kENTRYLIST; , kPROFILE; , ;   kPROFILE2D; , kGRAPH; , kPOLYMARKER3D; , kHISTOGRAM1D; , ;   kHISTOGRAM2D; , kLISTOFGRAPHS; , kLISTOFPOLYMARKERS3D; , kHISTOGRAM3D. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TTreeDrawArgsParser ();  Constructor - cleans all the class variables. ;  ;  ~TTreeDrawArgsParser () override;  Destructor. ;  ; bool GetAdd () const;  ; Int_t GetDimension () const;  ; TString const & GetExp () const;  ; Double_t GetIfSpecified (Int_t num, Double_t def) const;  ; Int_t GetNoParameters () const;  ; TString const & GetObjectName () const;  ; TString GetObjectTitle () const;  Returns the desired plot title. ;  ; bool GetOptionSame () const;  ; TObject * GetOriginal () const;  ; Double_t GetParameter (int num) const;  returns num-th parameter from brackets in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeDrawArgsParser.html:75,Guid,Guide,75,doc/master/classTTreeDrawArgsParser.html,https://root.cern,https://root.cern/doc/master/classTTreeDrawArgsParser.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeFormula Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TTreeFormula Class Reference. ; Used to pass a selection expression to the Tree drawing routine. ; See TTree::Draw; A TreeFormula can contain any arithmetic expression including standard operators and mathematical functions separated by operators. Examples of valid expression: ""x<y && sqrt(z)>3.2""; TTreeFormula now relies on a variety of TFormLeafInfo classes to handle the reading of the information. Here is the list of theses classes:; TFormLeafInfo; TFormLeafInfoDirect; TFormLeafInfoNumerical; TFormLeafInfoClones; TFormLeafInfoCollection; TFormLeafInfoPointer; TFormLeafInfoMethod; TFormLeafInfoMultiVarDim; TFormLeafInfoMultiVarDimDirect; TFormLeafInfoCast. The following method are available from the TFormLeafInfo interface:. AddOffset(Int_t offset, TStreamerElement* element); GetCounterValue(TLeaf* leaf) : return the size of the array pointed to.; GetObjectAddress(TLeafElement* leaf) : Returns the location of the object pointed to.; GetMultiplicity() : Returns info on the variability of the number of elements; GetNdata(TLeaf* leaf) : Returns the number of elements; GetNdata() : Used by GetNdata(TLeaf* leaf); GetValue(TLeaf *leaf, Int_t instance = 0) : Return the value; GetValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value; GetLocalValuePointer(TLeaf *leaf, Int_t instance = 0) : Returns the address of the value of 'this' LeafInfo; IsString(); ReadValue(char *where, Int_t instance = 0) : Internal function to interpret the location 'where'; Update() : react to the possible loading of a shared library. . Definition at line 58 of file TTreeFormula.h. Classes; struct  RealInstanceCache;  . Public Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormula.html:68,Guid,Guide,68,doc/master/classTTreeFormula.html,https://root.cern,https://root.cern/doc/master/classTTreeFormula.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeFormulaManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeFormulaManager Class Reference. ; Used to coordinate one or more TTreeFormula objects. ; In particular it makes sure that the dimensions and size of all the formulas is properly coordinated. ; Definition at line 30 of file TTreeFormulaManager.h. Public Member Functions;  TTreeFormulaManager ();  Tree FormulaManger default constructor. ;  ;  ~TTreeFormulaManager () override;  Tree FormulaManager default destructor. ;  ; virtual void Add (TTreeFormula *);  Add a new formula to the list of formulas managed The manager of the formula will be changed and the old one will be deleted if it is empty. ;  ; virtual Int_t GetMultiplicity () const;  ; virtual Int_t GetNdata (bool forceLoadDim=false);  Return number of available instances in the formulas. ;  ; TClass * IsA () const override;  ; bool Notify () override;  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; virtual void Remove (TTreeFormula *);  Remove a formula from this manager. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual bool Sync ();  Synchronize all the formulae. ;  ; virtual void UpdateFormulaLeaves ();  This function could be called TTreePlayer::UpdateFormulaLeaves, itself called by TChain::LoadTree when a new Tree is loaded. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeFormulaManager.html:75,Guid,Guide,75,doc/master/classTTreeFormulaManager.html,https://root.cern,https://root.cern/doc/master/classTTreeFormulaManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTreeIndex Class Reference. ; A Tree Index with majorname and minorname. ; Definition at line 29 of file TTreeIndex.h. Public Member Functions;  TTreeIndex ();  Default constructor for TTreeIndex. ;  ;  TTreeIndex (const TTree *T, const char *majorname, const char *minorname);  Normal constructor for TTreeIndex. ;  ;  ~TTreeIndex () override;  Destructor. ;  ; void Append (const TVirtualIndex *, bool delaySort=false) override;  Append 'add' to this index. ;  ; TObject * Clone (const char *newname="""") const override;  Create a deep copy of the TTreeIndex. ;  ; bool ConvertOldToNew ();  conversion from old 64bit indexes return true if index was converted ;  ; Long64_t FindValues (Long64_t major, Long64_t minor) const;  find position where major|minor values are in the IndexValues tables this is the index in IndexValues table, not entry# ! use lower_bound STD algorithm. ;  ; Long64_t GetEntryNumberFriend (const TTree *parent) override;  Returns the entry number in this (friend) Tree corresponding to entry in the master Tree 'parent'. ;  ; Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const override;  Return entry number corresponding to major and minor number. ;  ; Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const override;  Return entry number corresponding to major and minor number. ;  ; virtual Long64_t * GetIndex () const;  ; virtual Long64_t * GetIndexValues () const;  ; virtual Long64_t * GetIndexValuesMinor () const;  ; virtual TTreeFormula * GetMajorFormula ();  Return a pointer to the TreeFormula corresponding to the majorname. ;  ; const char * GetMajorName () const override;  ; virtual TTreeFormula * GetMinorFormul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeIndex.html:66,Guid,Guide,66,doc/master/classTTreeIndex.html,https://root.cern,https://root.cern/doc/master/classTTreeIndex.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreePerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTreePerfStats Class Reference. ; TTree I/O performance measurement. ; see example of use below.; The function FileReadEvent is called from TFile::ReadBuffer. For each call the following information is stored in fGraphIO; x[i] = Tree entry number; y[i] = 1e-6*(file position); ey[i] = 1e-9*number of bytes read For each call the following information is stored in fGraphTime; x[i] = Tree entry number; y[i] = Time now; ey[i] = readtime, eg timenow - start The TTreePerfStats object can be saved in a ROOT file in such a way that its inspection can be done outside the job that generated it. Example of use: {; TFile *f = TFile::Open(""RelValMinBias-GEN-SIM-RECO.root"");; T = (TTree*)f->Get(""Events"");; Long64_t nentries = T->GetEntries();; T->SetCacheSize(10000000);; T->SetCacheEntryRange(0,nentries);; T->AddBranchToCache(""*"");; //; TTreePerfStats *ps= new TTreePerfStats(""ioperf"",T);; //; for (Int_t i=0;i<nentries;i++) {; T->GetEntry(i);; }; ps->SaveAs(""cmsperf.root"");; }; f#define f(i)Definition RSha256.hxx:104; Long64_tlong long Long64_tDefinition RtypesCore.h:69; nentriesint nentriesDefinition THbookFile.cxx:91; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TTreePerfStatsTTree I/O performance measurement.Definition TTreePerfStats.h:38; TTreePerfStats::SaveAsvoid SaveAs(const char *filename="""", Option_t *option="""") const overrideSave this object to filename.Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats.html:70,Guid,Guide,70,doc/master/classTTreePerfStats.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreePerfStats::BasketInfo Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; TTreePerfStats::BasketInfo Struct Reference. . Definition at line 41 of file TTreePerfStats.h. Public Attributes; UInt_t fLoaded = {0};  Number of times the basket was put in the primary TTreeCache. ;  ; UInt_t fLoadedMiss = {0};  Number of times the basket was put in the secondary cache. ;  ; UInt_t fMissed = {0};  Number of times the basket was read directly from the file. ;  ; UInt_t fUsed = {0};  Number of times the basket was requested from the disk. ;  . #include <TTreePerfStats.h>; Member Data Documentation. ◆ fLoaded. UInt_t TTreePerfStats::BasketInfo::fLoaded = {0}. Number of times the basket was put in the primary TTreeCache. ; Definition at line 43 of file TTreePerfStats.h. ◆ fLoadedMiss. UInt_t TTreePerfStats::BasketInfo::fLoadedMiss = {0}. Number of times the basket was put in the secondary cache. ; Definition at line 44 of file TTreePerfStats.h. ◆ fMissed. UInt_t TTreePerfStats::BasketInfo::fMissed = {0}. Number of times the basket was read directly from the file. ; Definition at line 45 of file TTreePerfStats.h. ◆ fUsed. UInt_t TTreePerfStats::BasketInfo::fUsed = {0}. Number of times the basket was requested from the disk. ; Definition at line 42 of file TTreePerfStats.h. Collaboration diagram for TTreePerfStats::BasketInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/treeplayer/inc/TTreePerfStats.h. TTreePerfStatsBasketInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTTreePerfStats_1_1BasketInfo.html:83,Guid,Guide,83,doc/master/structTTreePerfStats_1_1BasketInfo.html,https://root.cern,https://root.cern/doc/master/structTTreePerfStats_1_1BasketInfo.html,2,['Guid'],['Guide']
Usability,". ROOT: TTreePlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TTreePlayer Class Reference. ; Implement some of the functionality of the class TTree requiring access to extra libraries (Histogram, display, etc). ; Definition at line 37 of file TTreePlayer.h. Public Member Functions;  TTreePlayer ();  Default Tree constructor. ;  ;  ~TTreePlayer () override;  Tree destructor. ;  ; TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname) override;  Build the index for the tree (see TTree::BuildIndex) ;  ; TTree * CopyTree (const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Copy a Tree with selection, make a clone of this Tree header, then copy the selected entries. ;  ; Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw the result of a C++ script. ;  ; Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry) override;  Draw expression varexp for specified entries that matches the selection. ;  ; Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry) override;  Fit a projected item(s) from a Tree. ;  ; Int_t GetDimension () const override;  ; Long64_t GetEntries (const char *selection) override;  Return the number of entries matching the selection. ;  ; virtual Long64_t GetEntriesToProcess (Long64_t firstentry, Long64_t nentries) const;  return the number of entries to be processed this function checks that nentries is not bigger than the number of entries in the Tree or in the a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePlayer.html:67,Guid,Guide,67,doc/master/classTTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTTreePlayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:67,Guid,Guide,67,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TTreeReaderValue< T > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Protected Member Functions |; List of all members ; TTreeReaderValue< T > Class Template ReferencefinalTreePlayer Library. ; template<typename T>; class TTreeReaderValue< T >An interface for reading values stored in ROOT columnar datasets. ; The TTreeReaderValue is a type-safe tool to be used in association with a TTreeReader to access the values stored in TTree, TNtuple and TChain datasets. TTreeReaderValue can be also used to access collections such as std::vectors or TClonesArray stored in columnar datasets but it is recommended to use TTreeReaderArray instead as it offers several advantages.; See the documentation of TTreeReader for more details and examples. ; Definition at line 174 of file TTreeReaderValue.h. Public Types; using NonConstT_t = typename std::remove_const< T >::type;  ;  Public Types inherited from ROOT::Internal::TTreeReaderValueBase; typedef bool(ROOT::Detail::TBranchProxy::* BranchProxyRead_t) ();  ; enum  EReadStatus { kReadSuccess = 0; , kReadNothingYet; , kReadError; };  ; enum  ESetupStatus { ;   kSetupNotSetup = -7; , kSetupTreeDestructed = -8; , kSetupMakeClassModeMismatch = -9; , kSetupMissingCounterBranch = -6; , ;   kSetupMissingBranch = -5; , kSetupInternalError = -4; , kSetupMissingDictionary = -3; , kSetupMismatch = -2; , ;   kSetupNotACollection = -1; , kSetupMatch = 0; , kSetupMatchBranch = 7; , kSetupNoCheck = 5; , ;   kSetupMatchLeaf = 6. };  Status flags, 0 is good. More...;  . Public Member Functions;  TTreeReaderValue ()=delete;  ;  TTreeReaderValue (TTreeReader &tr, const char *branchname);  ; T * Get ();  Return a pointer to the value of the current entry. ;  ; T & operator* ();  Return a reference to the value of the current entry. ;  ; T * operator-> ();  Return a pointer to the value of the current entry. ;  ;  Public Mem",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReaderValue.html:86,Guid,Guide,86,doc/master/classTTreeReaderValue.html,https://root.cern,https://root.cern/doc/master/classTTreeReaderValue.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeSQL Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TTreeSQL Class ReferenceTree Library. ; A TTree object is a list of TBranch. ; To Create a TTree object one must:; Create the TTree header via the TTree constructor; Call the TBranch constructor for every branch. To Fill this object, use member function Fill with no parameters. The Fill function loops on all defined TBranch.; TTreeSQL is the TTree implementation interfacing with an SQL database ; Definition at line 42 of file TTreeSQL.h. Public Member Functions;  TTreeSQL (TSQLServer *server, TString DB, const TString &table);  Constructor with an explicit TSQLServer. ;  ;  ~TTreeSQL () override;  ; Int_t Branch (const char *folder, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; TBranch * Branch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; TBranch * Branch (const char *name, void *address, const char *leaflist, Int_t bufsize) override;  Create a branch. ;  ; Int_t Branch (TCollection *list, Int_t bufsize=32000, Int_t splitlevel=99, const char *name="""") override;  Not implemented yet. ;  ; Int_t Branch (TList *list, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; TBranch * BranchOld (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=1) override;  Not implemented yet. ;  ; TBranch * Bronch (const char *name, const char *classname, void *addobj, Int_t bufsize=32000, Int_t splitlevel=99) override;  Not implemented yet. ;  ; Int_t Fill () override;  Copy the information from the user object to the TTree. ;  ; Long64_t GetEntries () const override;  Get the number of rows in the database. ;  ; Long64_t GetEntri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeSQL.html:64,Guid,Guide,64,doc/master/classTTreeSQL.html,https://root.cern,https://root.cern/doc/master/classTTreeSQL.html,1,['Guid'],['Guide']
Usability,". ROOT: TTreeViewer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TTreeViewer Class Reference. ; A graphic user interface designed to handle ROOT trees and to take advantage of TTree class features. ; It uses ROOT native GUI widgets adapted for ""drag and drop"" functionality. in the same session. The following capabilities are making the viewer a helpful tool for analysis:. several trees may be opened in the same session;; branches and leaves can be easily browsed or scanned;; fast drawing of branch expressions by double-clicking;; new variables/selections easy to compose with the built-in editor;; histograms can be composed by dragging leaves or user-defined expressions to X, Y and Z axis items;; the tree entries to be processed can be selected with a double slider;; selections can be defined and activated by dragging them to the 'Cut' item;; all expressions can be aliased and aliases can be used in composing others;; input/output event lists easy to handle;; menu with histogram drawing options;; user commands may be executed within the viewer and the current command can be echoed;; current 'Draw' event loop is reflected by a progress bar and may be interrupted by the user;; all widgets have self-explaining tool tips and/or context menus;; expressions/leaves can be dragged to a 'scan box' and scanned by double-clicking this item. The result can be redirected to an ASCII file;. The layout has the following items:. a menu bar with entries : File, Edit, Run, Options and Help;; a toolbar in the upper part where you can issue user commands, change the drawing option and the histogram name, three check buttons Hist, Rec and Scan.HIST toggles histogram drawing mode, REC enables recording of the last command issued and SCAN enables redirecting of TTree::Scan command",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeViewer.html:67,Guid,Guide,67,doc/master/classTTreeViewer.html,https://root.cern,https://root.cern/doc/master/classTTreeViewer.html,1,['Guid'],['Guide']
Usability,". ROOT: TUDPSocket Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TUDPSocket Class Reference. . Definition at line 37 of file TUDPSocket.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ; enum  EServiceType { kSOCKD; , kROOTD; , kPROOFD; };  ; enum  EStatusBits { kIsUnix = (1ULL << ( 16 )); , kBrokenConn = (1ULL << ( 17 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TUDPSocket (const char *host, const char *service);  Create a socket. ;  ;  TUDPSocket (const char *host, Int_t port);  Create a socket; see CreateAuthSocket for the form of url. ;  ;  TUDPSocket (const char *sockpath);  Create a socket in the Unix domain on 'sockpath'. ;  ;  TUDPSocket (const TUDPSocket &s);  TUDPSocket copy ctor. ;  ;  TUDPSocket (Int_t descriptor);  Create a socket. ;  ;  TUDPSocket (Int_t descriptor, const char *sockpath);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, const char *service);  Create a socket. ;  ;  TUDPSocket (TInetAddress address, Int_t port);  Create a socket. ;  ; virtual ~TUDPSocket ();  ; virtual void Close (Option_t *opt="""");  Clos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:66,Guid,Guide,66,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['Guid'],['Guide']
Usability,". ROOT: TUUID Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUUID Class ReferenceCore ROOT classes » Base ROOT classes. ; This class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDentifier). ; A UUID is 128 bits long, and if generated according to this algorithm, is either guaranteed to be different from all other UUIDs/GUIDs generated until 3400 A.D. or extremely likely to be different. UUIDs were originally used in the Network Computing System (NCS) and later in the Open Software Foundation's (OSF) Distributed Computing Environment (DCE).; NoteIn the way this UUID is constructed, when used outside of their original concept (NCS), they are actually not Globally unique and indeed multiple distinct concurrent processes are actually likely to generate the same UUID. Technically this is because the UUID is constructed only from the node information and time information. To make a globally unique number, this needs to be combined with TProcessUUID.; Structure of universal unique IDs (UUIDs).; Depending on the network data representation, the multi- octet unsigned integer fields are subject to byte swapping when communicated between dissimilar endian machines. +-----------------------------------+; | low 32 bits of time | 0-3 .fTimeLow; +-------------------------------+----; | mid 16 bits of time | 4-5 .fTimeMid; +-------+-----------------------+; | vers. | hi 12 bits of time | 6-7 .fTimeHiAndVersion; +-------+-------+---------------+; |Res | clkSeqHi | 8 .fClockSeqHiAndReserved; +---------------+; | clkSeqLow | 9 .fClockSeqLow; +---------------+------------------+; | node ID | 10-15 .fNode; +----------------------------------+; hi#define hiDefinition THbookFile.cxx:128; The adjusted time stamp is split into three",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUUID.html:61,Guid,Guide,61,doc/master/classTUUID.html,https://root.cern,https://root.cern/doc/master/classTUUID.html,3,"['GUID', 'Guid']","['GUIDs', 'Guide']"
Usability,". ROOT: TUnfold Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TUnfold Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfold is used to decompose a measurement y into several sources x, given the measurement uncertainties and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfold has an adjustable regularisation term and also supports an optional constraint on the total number of events.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfold. TUnfoldDensity adds various features to TUnfold, such as: background subtraction, propagation of systematic uncertainties, complex multidimensional arrangements of the bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfold are the getter functions. For TUnfold, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfold: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . a vector of measurements is given as one-dimensional histogram using the SetInput() method . The unfolding is performed . either once with a fixed parameter tau, method DoUnfold(tau) . or multiple ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:63,Guid,Guide,63,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TUnfold classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TUnfold classesHistogram Library. ; An algorithm to unfold distributions from detector to truth level.; AuthorStefan Schmitt DESY . Classes; class  TUnfoldSys;  An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Unfold.html:55,Guid,Guide,55,doc/master/group__Unfold.html,https://root.cern,https://root.cern/doc/master/group__Unfold.html,2,['Guid'],['Guide']
Usability,". ROOT: TUnfold tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TUnfold tutorialsTutorials. ; Test programs for the classes TUnfold and related. ; TUnfold is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.; TUnfold is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.; You should have received a copy of the GNU General Public License along with TUnfold. If not, see http://www.gnu.org/licenses/. . Files; file  testUnfold1.C;   Test program for the classes TUnfold and related. ;  ; file  testUnfold2.C;   Test program as an example for a user specific regularisation scheme. ;  ; file  testUnfold3.C;   Simple Test program for the class TUnfoldDensity. ;  ; file  testUnfold4.C;   Test program for the class TUnfoldSys. ;  ; file  testUnfold5a.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ; file  testUnfold5b.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold5c.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold5d.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold6.C;   Test program for the class TUnfoldBinning. ;  ; file  testUnfold7a.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  ; file  testUnfold7b.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ; file  testUnfold7c.C;   Test program for the classes TUnfoldDensity and TUnfoldBinning. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__unfold.html:57,Guid,Guide,57,doc/master/group__tutorial__unfold.html,https://root.cern,https://root.cern/doc/master/group__tutorial__unfold.html,3,"['Guid', 'Simpl']","['Guide', 'Simple']"
Usability,". ROOT: TUnfoldBinning Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldBinning Class Reference. ; Binning schemes for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Functionality; The TUnfoldBinning objects are connected by a tree-like structure. The structure does not hold any data, but is only responsible for arranging the analysis bins in the proper order. Each node of the tree is responsible for a group of bins. That group may consist of . several unconnected bins, each with a dedicated name. . bins organized in a multidimensional distribution, defined by a set of axes. The axes are defined by a number of bins N and by (N+1) bin borders. In addition to the N bins inside there may be an underflow and an overflow bin . Each bin has a ""global"" bin number, which can be found using the GetGlobalBinNumber() methods. The global bin number 0 is reserved and corresponds to the case where no bin is found in the TUnfoldBinning tree.; Use in the analysis; Booking histograms: . Define binning schemes on detector level and on truth level. This can be done using the XML language, use the class TUnfoldBinningXML to read the binning scheme. The TUnfoldBinning objects can be written to a root file, preferentially together with the corresponding histograms. . For Monte Carlo, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinning.html:70,Guid,Guide,70,doc/master/classTUnfoldBinning.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinning.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnfoldBinningXML Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; List of all members ; TUnfoldBinningXML Class Reference. ; XML interfate to binning schemes, for use with the unfolding algorithm TUnfoldDensity. ; Binning schemes are used to map analysis bins on a single histogram axis and back. The analysis bins may include unconnected bins (e.g nuisances for background normalisation) or various multidimensional histograms (signal bins, differential background normalisation bins, etc). ; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Please consult the documentation of the class TUnfoldBinning about how to use binning schemes. This class provides methods to read and write binning schemes in the XML language. There is also a method which writes out a dtd file for validation. Example XML code; The example below encodes two binning schemes, detector and generator. The detecor scheme consists of a single, three-dimensional distribution (pt,eta,discriminator). The generator scheme consists of two two-dimensional distributions, signal and background. ; <?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>; <!DOCTYPE TUnfoldBinning SYSTEM ""tunfoldbinning.dtd"">; <TUnfoldBinning>; <BinningNode name=""detector"" firstbin=""1"" factor=""1"">; <BinningNode name=""detectordistribution"" firstbin=""1"" factor=""1"">; ; <Bin repeat=""3"" width=""0.5"" >; <Bin repeat=""3"" width=""1"" >; <Bin width=""2"" >; <Bin width=""3"" >; <Bin location=""overflow"">; ; <Bin repeat=""2"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""4"" width=""0.5"" >; <Bin width=""1"" >; <Bin repeat=""2"" width=""0.5"" >; ; <Bin width=""0.15"" >; <Bin repeat=""2"" width=""0.35"" >; <Bin width=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldBinningXML.html:73,Guid,Guide,73,doc/master/classTUnfoldBinningXML.html,https://root.cern,https://root.cern/doc/master/classTUnfoldBinningXML.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnfoldDensity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldDensity Class Reference. ; An algorithm to unfold distributions from detector to truth level. ; TUnfoldDensity is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldDensity has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties. Complex, multidimensional arrangements of signal and background bins are managed with the help of the class TUnfoldBinning.; If you use this software, please consider the following citation ; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201] ; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys:. Set up binning schemes for the truth and measured distributions. The binning schemes may be coded in the XML language, for reading use TUnfoldBinningXML. . A matrix (truth,reconstructed) is given as a two-dimensional histogram as argument to the constructor of TUnfold . A vector of measurements is given as one-dimensional histogram using the SetInput() method . Repeated calls to SubtractBackground() to specify background sources . Repeated calls to AddSysError() to specify systematic uncertainties . The unfolding is performed . either once with a fixed pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:70,Guid,Guide,70,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TUnfoldIterativeEM Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnfoldIterativeEM Class Reference. . Definition at line 45 of file TUnfoldIterativeEM.h. Public Member Functions;  TUnfoldIterativeEM (const TH2 *hist_A, TUnfold::EHistMap histmap, const TUnfoldBinning *outputBins=nullptr, const TUnfoldBinning *inputBins=nullptr);  ;  TUnfoldIterativeEM (void);  ;  ~TUnfoldIterativeEM () override;  ; void DoUnfold (Int_t nIter, const TH1 *hist_y, Double_t scaleBias=1.0);  ; virtual void DoUnfold (Int_t numIterations);  ; Double_t GetDeviance (void) const;  ; Double_t GetDF (void) const;  ; TH1 * GetFoldedOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE, Bool_t addBgr=kFALSE) const;  ; TH1 * GetOutput (const char *histogramName, const char *histogramTitle=nullptr, const char *distributionName=nullptr, const char *projectionMode=nullptr, Bool_t useAxisBinning=kTRUE) const;  ; Double_t GetSURE (void) const;  ; TClass * IsA () const override;  ; virtual Int_t ScanSURE (Int_t nIterMax, TGraph **SURE=nullptr, TGraph **df_deviance=nullptr);  ; virtual Int_t SetInput (const TH1 *hist_y, Double_t scaleBias=1.0);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SubtractBackground (const TH1 *hist_bgr, const char *name, Double_t scale=1.0);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldIterativeEM.html:74,Guid,Guide,74,doc/master/classTUnfoldIterativeEM.html,https://root.cern,https://root.cern/doc/master/classTUnfoldIterativeEM.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnfoldSys Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TUnfoldSys Class ReferenceHistogram Library » TUnfold classes. ; An algorithm to unfold distributions from detector to truth level, with background subtraction and propagation of systematic uncertainties. ; TUnfoldSys is used to decompose a measurement y into several sources x, given the measurement uncertainties, background b and a matrix of migrations A. The method can be applied to a large number of problems, where the measured distribution y is a linear superposition of several Monte Carlo shapes. Beyond such a simple template fit, TUnfoldSys has an adjustable regularisation term and also supports an optional constraint on the total number of events. Background sources can be specified, with a normalisation constant and normalisation uncertainty. In addition, variants of the response matrix may be specified, these are taken to determine systematic uncertainties.; For most applications, it is better to use the derived class TUnfoldDensity instead of TUnfoldSys. TUnfoldDensity adds features to TUnfoldSys, related to possible complex multidimensional arrangements of bins. For innocent users, the most notable improvement of TUnfoldDensity over TUnfoldSys are the getter functions. For TUnfoldSys, histograms have to be booked by the user and the getter functions fill the histogram bins. TUnfoldDensity simply returns a new, already filled histogram.; If you use this software, please consider the following citation; S.Schmitt, JINST 7 (2012) T10003 [arXiv:1205.6201]; Detailed documentation and updates are available on http://www.desy.de/~sschmitt; Brief recipy to use TUnfoldSys: . a matrix (truth,reconstructed) is given as a two-dimensional histogram as ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:66,Guid,Guide,66,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: TUnixSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Member Functions |; List of all members ; TUnixSystem Class Reference. . Definition at line 32 of file TUnixSystem.h. Public Member Functions;  TUnixSystem ();  ; virtual ~TUnixSystem ();  Reset to original state. ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *lib) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void AddTimer (TTimer *ti) override;  Add timer to list of system timers. ;  ; int AnnounceTcpService (int port, Bool_t reuse, int backlog, int tcpwindowsize=-1) override;  Announce TCP/IP service. ;  ; int AnnounceUdpService (int port, int backlog) override;  Announce UDP service. ;  ; int AnnounceUnixService (const char *sockpath, int backlog) override;  Announce unix domain service on path 'sockpath'. ;  ; int AnnounceUnixService (int port, int backlog) override;  Announce unix domain service on path ""kServerPath/<port>"". ;  ; Bool_t ChangeDirectory (const char *path) override;  Change directory. Returns kTRUE in case of success, kFALSE otherwise. ;  ; void CheckChilds ();  Check if children have finished. ;  ; Bool_t CheckDescriptors ();  Check if there is activity on some file descriptors and call their Notify() member. ;  ; Bool_t CheckSignals (Bool_t sync);  Check if some s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:67,Guid,Guide,67,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnuran Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TUnuran Class ReferenceMath » Unuran. ; TUnuran class. ; Interface to the UNU.RAN package for generating non uniform random numbers. This class wraps the UNU.RAN calls in C++ methods. It provides methods for initializing Unuran and then to sample the desired distribution. It provides support for initializing UNU.RAN in these following way (various signatures for TUnuran::Init); with string API via TUnuran::Init passing the distribution type and the method; using a one-dimensional distribution object defined by TUnuranContDist; using a multi-dimensional distribution object defined by TUnuranMultiContDist; using a discrete one-dimensional distribution object defined by TUnuranDiscrDist; using an empirical distribution defined by TUnuranEmpDist; using pre-defined distributions. Presently only support for Poisson (TUnuran::InitPoisson) and Binomial (TUnuran::InitBinomial) are provided. Other distributions can however be generated using the previous methods (in particular via the string API). The sampling is provided via these methods:; TUnuran::Sample() returns a double for all one-dimensional distribution; TUnuran::SampleDiscr() returns an integer for one-dimensional discrete distribution; TUnuran::Sample(double *) sample a multi-dimensional distribution. A pointer to a vector with size at least equal to the distribution dimension must be passed. In addition is possible to set the random number generator in the constructor of the class, its seed via the TUnuran::SetSeed() method. ; Definition at line 79 of file TUnuran.h. Public Member Functions;  TUnuran (const TUnuran &)=delete;  ;  TUnuran (TRandom *r=nullptr, unsigned int log=0);  Constructor with a generator instance and given level of log output. ;  ;  TUnuran (TUnuran &&)=delet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuran.html:63,Guid,Guide,63,doc/master/classTUnuran.html,https://root.cern,https://root.cern/doc/master/classTUnuran.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnuranContDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranContDist Class ReferenceMath » Unuran. ; TUnuranContDist class describing one dimensional continuous distribution. ; It is used by TUnuran to generate random numbers according to this distribution via TUnuran::Sample(); The class can be constructed from a function (TF1) representing the probability density function of the distribution. Optionally the derivative of the pdf can also be passed.; It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is (-inf, + inf), independently of the range set in the TF1 class used to construct the distribution.; In addition, some UNURAN methods requires extra information (cdf function, distribution mode, area of pdf, etc...). This information can as well be set. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 48 of file TUnuranContDist.h. Public Member Functions;  TUnuranContDist (const ROOT::Math::IGenFunction &pdf, const ROOT::Math::IGenFunction *dpdf=nullptr, bool isLogPdf=false, bool copyFunc=false);  Constructor as before but from a generic function object interface for one-dim functions. ;  ;  TUnuranContDist (const ROOT::Math::IGenFunction *pdf, const ROOT::Math::IGenFunction *dpdf, const ROOT::Math::IGenFunction *cdf, bool isLogPdf=false, bool copyFunc=false);  Constructor as before from pointers to generic function object interface for one-dim functions which can be use for all algorithms including those requiring only the Cdf. ;  ;  TUnuranContDist (const TUnuranContDist &);  Copy constructor. ;  ;  TUnuranContDist (TF1 *pdf, TF1 *deriv, TF1 *cdf, bool isLo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranContDist.html:71,Guid,Guide,71,doc/master/classTUnuranContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranContDist.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnuranDiscrDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranDiscrDist Class ReferenceMath » Unuran. ; TUnuranDiscrDist class for one dimensional discrete distribution. ; It is used by TUnuran to generate integer random numbers according to this distribution via TUnuran::SampleDiscr().; The class can be constructed from a one-dimensional function (TF1 pointer) representing the discrete distribution (probability mesh function) (for example a TF1(""f"",""TMath::PoissonI(x,[0])"") ) or from a vector of probability, used by passing an iterator specifying the begin and the end of the vector. In the latter case the domain of the distribution will be defined by the vector, while in the first case is by default (0,+inf). a Method to set the domain of the distribution ( SetDomain ) is provided and it defines the range of the generated random numbers.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode, cdf function, probability sum, etc..) can be set as well otherwise will be estimated internally if required. ; Definition at line 51 of file TUnuranDiscrDist.h. Public Member Functions;  TUnuranDiscrDist (const ROOT::Math::IGenFunction &func, bool copyFunc=false);  Constructor from a generic function object specifying the pdf. ;  ;  TUnuranDiscrDist (const TUnuranDiscrDist &);  Copy constructor. ;  ; template<class Iterator > ;  TUnuranDiscrDist (Iterator *begin, Iterator *end);  Constructor from a vector of probability. ;  ;  TUnuranDiscrDist (TF1 *func);  Constructor from a TF1 objects specifying the pdf. ;  ;  ~TUnuranDiscrDist () override;  Destructor. ;  ; double Cdf (int x) const;  evaluate the integral (cdf) on the given domain ;  ; TUnuranDiscrDist * Clone () const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranDiscrDist.html:72,Guid,Guide,72,doc/master/classTUnuranDiscrDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranDiscrDist.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnuranEmpDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranEmpDist Class ReferenceMath » Unuran. ; TUnuranEmpDist class for describing empirical distributions. ; It is used by TUnuran to generate double random number according to this distribution via TUnuran::Sample() or TUnuran::Sample(double *) in case of multi-dimensional empirical distributions.; An empirical distribution can be one or multi-dimension constructed from a set of unbinned data, (the class can be constructed from an iterator to a vector of data) or by using an histogram (with a pointer to the TH1 class). If the histogram contains a buffer with the original data they are used by default to estimate the empirical distribution, otherwise the bins information is used. In this binned case only one dimension is now supported.; In the case of unbinned data the density distribution is estimated by UNURAN using kernel smoothing and then random numbers are generated. In the case of bin data (which can only be one dimension) the probability density is estimated directly from the histograms and the random numbers are generated according to the histogram (like in TH1::GetRandom). This method requires some initialization time but it is faster in generating the random numbers than TH1::GetRandom and it becomes convenient to use when generating a large amount of data. ; Definition at line 49 of file TUnuranEmpDist.h. Public Member Functions;  TUnuranEmpDist (const TH1 *h1=nullptr, bool useBuffer=true);  Constructor from a TH1 objects. ;  ;  TUnuranEmpDist (const TUnuranEmpDist &);  Copy constructor. ;  ; template<class Iterator > ;  TUnuranEmpDist (Iterator begin, Iterator end, unsigned int dim=1);  Constructor from a set of data using an iterator to specify begin/end of the data In the case of multi-dimension the data ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranEmpDist.html:70,Guid,Guide,70,doc/master/classTUnuranEmpDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranEmpDist.html,1,['Guid'],['Guide']
Usability,". ROOT: TUnuranMultiContDist Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUnuranMultiContDist Class ReferenceMath » Unuran. ; TUnuranMultiContDist class describing multi dimensional continuous distributions. ; It is used by TUnuran to generate a set of random numbers according to this distribution via TUnuran::Sample(double *). The class can be constructed from a multi-dimensional function (TF1 pointer, which can be actually also a TF2 or a TF3). It provides a method to set the domain of the distribution ( SetDomain ) which will correspond to the range of the generated random numbers. By default the domain is [(-inf,-inf,...)(+inf,+inf,...)], independently of the range set in the TF1 class used to construct the distribution.; The derivatives of the pdf which are used by some UNURAN methods are estimated numerically in the Derivative() method. Some extra information (like distribution mode) can be set using SetMode. Some methods require instead of the pdf the log of the pdf. This can also be controlled by setting a flag when constructing this class. ; Definition at line 47 of file TUnuranMultiContDist.h. Public Member Functions;  TUnuranMultiContDist (const ROOT::Math::IMultiGenFunction &pdf, bool isLogPdf=false);  Constructor as before but from a generic function object interface for multi-dim functions. ;  ;  TUnuranMultiContDist (const TUnuranMultiContDist &);  Copy constructor. ;  ;  TUnuranMultiContDist (TF1 *func=nullptr, unsigned int dim=0, bool isLogPdf=false);  Constructor from a TF1 object representing the Probability density function. ;  ;  ~TUnuranMultiContDist () override;  Destructor. ;  ; TUnuranMultiContDist * Clone () const override;  Clone (required by base class) ;  ; double Derivative (const double *x, int icoord) const;  evaluate the partial derivative for the given co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnuranMultiContDist.html:76,Guid,Guide,76,doc/master/classTUnuranMultiContDist.html,https://root.cern,https://root.cern/doc/master/classTUnuranMultiContDist.html,1,['Guid'],['Guide']
Usability,". ROOT: TUploadDataSetDlg Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TUploadDataSetDlg Class Reference. . Definition at line 117 of file TSessionDialogs.h. Public Member Functions;  TUploadDataSetDlg (TSessionViewer *gui, Int_t w, Int_t h);  Create a Upload DataSet dialog box. Used to create and upload a dataset. ;  ;  ~TUploadDataSetDlg () override;  Delete chain dialog. ;  ; void AddFiles (const char *fileName);  Add File name(s) from the file location URL to the list view. ;  ; void AddFiles (TList *fileList);  Add File name(s) from the file location URL to the list view. ;  ; void BrowseFiles ();  Opens the TGFileDialog to allow user to select local file(s) to be added in the list view of dataset files. ;  ; void ClearFiles ();  Clear content of the list view. ;  ; void CloseWindow () override;  Close upload dataset dialog. ;  ; TClass * IsA () const override;  ; void OnAppendFiles (Bool_t on);  Notification of Append Files check button. ;  ; void OnOverwriteDataset (Bool_t on);  Notification of Overwrite Dataset check button. ;  ; void OnOverwriteFiles (Bool_t on);  Notification of Overwrite Files check button. ;  ; Bool_t ProcessMessage (Longptr_t msg, Longptr_t parm1, Longptr_t parm2) override;  Process messages for upload dataset dialog. ;  ; void RemoveFile ();  Remove the selected entry from the list view. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UploadDataSet ();  Upload the dataset to the server. ;  ;  Public Member Functions inherited from TGTransientFrame;  TGTransientFrame (const TGWindow *p=nullptr, const TGWindow *main=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=kVerticalFrame);  Create a transient window. ;  ; virtual void CenterOnParent (Bool_t croot=kTRUE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUploadDataSetDlg.html:73,Guid,Guide,73,doc/master/classTUploadDataSetDlg.html,https://root.cern,https://root.cern/doc/master/classTUploadDataSetDlg.html,3,"['Clear', 'Guid']","['Clear', 'ClearFiles', 'Guide']"
Usability,". ROOT: TUri Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TUri Class ReferenceCore ROOT classes » Base ROOT classes. ; This class represents a RFC 3986 compatible URI. ; See alsohttps://doi.org/10.17487/RFC3986 It provides member functions to set and return the different the different parts of an URI. The functionality is that of a validating parser. ; Definition at line 35 of file TUri.h. Public Member Functions;  TUri ();  ;  TUri (const char *uri);  Constructor that calls SetUri with a complete URI. ;  ;  TUri (const TString &uri);  Constructor that calls SetUri with a complete URI. ;  ;  TUri (const TUri &uri);  TUri copy ctor. ;  ; virtual ~TUri ();  ; const TString GetAuthority () const;  Returns the authority part of the instance: ;  ; const TString GetFragment () const;  ; const TString GetHierPart () const;  ; const TString GetHost () const;  ; const TString GetPath () const;  ; const TString GetPort () const;  ; const TString GetQuery () const;  ; const TString GetRelativePart () const;  relative-part = ""//"" authority path-abempty ;  ; const TString GetScheme () const;  ; const TString GetUri () const;  Returns the whole URI - an implementation of chapter 5.3 component recomposition. ;  ; const TString GetUserInfo () const;  ; Bool_t HasAuthority () const;  ; Bool_t HasFragment () const;  ; Bool_t HasHierPart () const;  ; Bool_t HasHost () const;  ; Bool_t HasPath () const;  ; Bool_t HasPort () const;  ; Bool_t HasQuery () const;  ; Bool_t HasRelativePart () const;  ; Bool_t HasScheme () const;  ; Bool_t HasUserInfo () const;  ; TClass * IsA () const override;  ; Bool_t IsAbsolute () const;  Returns kTRUE if instance qualifies as absolute-URI absolute-URI = scheme "":"" hier-part [ ""?"" query ] cf. ;  ; Bool_t IsReference () const;  Returns kTRUE if instance qualifies as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUri.html:60,Guid,Guide,60,doc/master/classTUri.html,https://root.cern,https://root.cern/doc/master/classTUri.html,1,['Guid'],['Guide']
Usability,". ROOT: TUrl Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TUrl Class ReferenceCore ROOT classes » Base ROOT classes. ; This class represents a WWW compatible URL. ; It provides member functions to return the different parts of an URL. The supported url format is: [proto://][user[:passwd]@]host[:port]/file.ext[#anchor][?options]; protoconst char * protoDefinition civetweb.c:17535. Definition at line 33 of file TUrl.h. Public Member Functions;  TUrl ();  ;  TUrl (const char *url, Bool_t defaultIsFile=kFALSE);  Parse url character string and split in its different subcomponents. ;  ;  TUrl (const TUrl &url);  TUrl copy ctor. ;  ; virtual ~TUrl ();  Cleanup. ;  ; void CleanRelativePath ();  Recompute the path removing all relative directory jumps via '..'. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two urls as strings. ;  ; const char * GetAnchor () const;  ; const char * GetFile () const;  ; const char * GetFileAndOptions () const;  Return the file and its options (the string specified behind the ?). ;  ; const char * GetHost () const;  ; const char * GetHostFQDN () const;  Return fully qualified domain name of url host. ;  ; Int_t GetIntValueFromOptions (const char *key) const;  Return a value for a given key from the URL options as an Int_t, a missing key returns -1. ;  ; const char * GetOptions () const;  ; const char * GetPasswd () const;  ; Int_t GetPort () const;  ; const char * GetProtocol () const;  ; const char * GetUrl (Bool_t withDeflt=kFALSE) const;  Return full URL. ;  ; const char * GetUser () const;  ; const char * GetValueFromOptions (const char *key) const;  Return a value for a given key from the URL options. ;  ; Bool_t HasOption (const char *key) const;  Returns true if the give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUrl.html:60,Guid,Guide,60,doc/master/classTUrl.html,https://root.cern,https://root.cern/doc/master/classTUrl.html,1,['Guid'],['Guide']
Usability,". ROOT: TUsrHit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrHit Class Reference. . Definition at line 4 of file clonesA_Event.h. Public Member Functions;  TUsrHit (Int_t ev=0);  ; virtual ~TUsrHit ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrHit.html:63,Guid,Guide,63,doc/master/classTUsrHit.html,https://root.cern,https://root.cern/doc/master/classTUsrHit.html,1,['Guid'],['Guide']
Usability,". ROOT: TUsrHitBuffer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrHitBuffer Class Reference. . Definition at line 20 of file clonesA_Event.h. Public Member Functions;  TUsrHitBuffer (Int_t maxent=10);  ; virtual ~TUsrHitBuffer ();  ; TUsrHit * AddHit (Int_t ev);  ; void Clear (Option_t *opt="""");  ; Int_t GetBufSize ();  ; TClonesArray * GetCA ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrHitBuffer.html:69,Guid,Guide,69,doc/master/classTUsrHitBuffer.html,https://root.cern,https://root.cern/doc/master/classTUsrHitBuffer.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TUsrSevtData1 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrSevtData1 Class Reference. . Definition at line 63 of file clonesA_Event.h. Public Member Functions;  TUsrSevtData1 ();  ; virtual ~TUsrSevtData1 ();  ; Int_t GetPileup ();  ; virtual TClass * IsA () const;  ; void SetEvent (Int_t ev);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMrbSubevent_Caen;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrSevtData1.html:69,Guid,Guide,69,doc/master/classTUsrSevtData1.html,https://root.cern,https://root.cern/doc/master/classTUsrSevtData1.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TUsrSevtData2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TUsrSevtData2 Class Reference. . Definition at line 80 of file clonesA_Event.h. Public Member Functions;  TUsrSevtData2 ();  ; virtual ~TUsrSevtData2 ();  ; Int_t GetPileup ();  ; virtual TClass * IsA () const;  ; void SetEvent (Int_t ev);  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMrbSubevent_Caen;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUsrSevtData2.html:69,Guid,Guide,69,doc/master/classTUsrSevtData2.html,https://root.cern,https://root.cern/doc/master/classTUsrSevtData2.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TVector2 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TVector2 Class ReferenceMath » Legacy Physics Classes. ; AttentionTVector2 is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::XYVector.; More details can be found in the documentation of the Physics Vectors package. . TVector2 is a general two vector class, which can be used for the description of different vectors in 2D. ; Definition at line 18 of file TVector2.h. Public Types; typedef Double_t Scalar;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVector2 ();  Constructor. ;  ;  TVector2 (const TVector2 &)=default;  ;  TVector2 (Double_t *s);  Constructor. ;  ;  TVector2 (Double_t x0, Double_t y0);  Constructor. ;  ;  ~TVector2 () override;  ; Double_t DeltaPhi (const TVector2 &v) const;  ; TClass * IsA () const override;  ; Double_t Mod () const;  Return modulo of this vector. ;  ; Double_t Mod2 () const;  ; TVector2 Norm (const TVector2 &v) const;  ; TVector2 & operator*= (Double_t s);  ; Double_t operator*= (TVector2 const &v);  ; TVector2 & operator+= (TVector2 const &v);  ; TVector2 & operator-= (TVector2 const &v);  ; TVe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVector2.html:64,Guid,Guide,64,doc/master/classTVector2.html,https://root.cern,https://root.cern/doc/master/classTVector2.html,1,['Guid'],['Guide']
Usability,". ROOT: TVector3 Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TVector3 Class ReferenceMath » Legacy Physics Classes. ; AttentionTVector3 is a legacy class. It is slower and worse for serialization than the recommended superior alternative ROOT::Math::XYZVector.; More details can be found in the documentation of the Physics Vectors package. . TVector3 is a general three vector class, which can be used for the description of different vectors in 3D. Declaration / Access to the components; TVector3 has been implemented as a vector of three Double_t variables, representing the cartesian coordinates. By default all components are initialized to zero:; TVector3 v1; // v1 = (0,0,0); TVector3 v3(1,2,3); // v3 = (1,2,3); TVector3 v4(v2); // v4 = v2; TVector3Definition TVector3.h:22; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; It is also possible (but not recommended) to initialize a TVector3 with a Double_t or Float_t C array.; You can get the basic components either by name or by index using operator():; xx = v1.X(); or xx = v1(0);; yy = v1.Y(); yy = v1(1);; zz = v1.Z(); zz = v1(2);; The member functions SetX(), SetY(), SetZ() and SetXYZ() allow to set the components:; v1.SetX(1.); v1.SetY(2.); v1.SetZ(3.);; v1.SetXYZ(1.,2.,3.);. Non-cartesian coordinates; To get information on the TVector3 in spherical (rho,phi,theta) or cylindrical (z,r,theta) coordinates, the; the member functions Mag() (=magnitude=rho in spherical coordinates), Mag2(), Theta(), CosTheta(), Phi(), Perp() (the transverse component=r in cylindrical coordinates), Perp2() can be used:; Double_t m = v.Mag(); // get magnitude (=rho=Sqrt(x*x+y*y+z*z))); Double_t m2 = v.Mag2(); // get ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVector3.html:64,Guid,Guide,64,doc/master/classTVector3.html,https://root.cern,https://root.cern/doc/master/classTVector3.html,1,['Guid'],['Guide']
Usability,". ROOT: TVectorT< Element > Class Template Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVectorT< Element > Class Template ReferenceMath » Matrix Linear Algebra. ; template<class Element>; class TVectorT< Element >TVectorT. ; Template class of Vectors in the linear algebra package.; See the Matrix Linear Algebra page for the documentation of the linear algebra package; Unless otherwise specified, vector indices always start with 0, spanning up to the specified limit-1.; For (n) vectors where n <= kSizeMax (5 currently) storage space is available on the stack, thus avoiding expensive allocation/ deallocation of heap space . However, this introduces of course kSizeMax overhead for each vector object . If this is an issue recompile with a new appropriate value (>=0) for kSizeMax; Another way to assign and store vector data is through Use see for instance stressLinear.cxx file .; Note that Constructors/assignments exists for all different matrix views; For usage examples see $ROOTSYS/test/stressLinear.cxx ; Definition at line 27 of file TVectorT.h. Public Member Functions;  TVectorT ();  ;  TVectorT (const TMatrixTColumn_const< Element > &mc);  Constructor : create vector from matrix column. ;  ;  TVectorT (const TMatrixTDiag_const< Element > &md);  Constructor : create vector from matrix diagonal. ;  ;  TVectorT (const TMatrixTRow_const< Element > &mr);  Constructor : create vector from matrix row. ;  ;  TVectorT (const TVectorT< Element > &another);  Copy constructor. ;  ; template<class Element2 > ;  TVectorT (const TVectorT< Element2 > &another);  ;  TVectorT (Int_t lwb, Int_t upb);  Constructor [lwb..upb]-vector. ;  ;  TVectorT (Int_t lwb, Int_t upb, const Element *elements);  Constructor [lwb..upb]-vector with data copied from array elements. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVectorT.html:84,Guid,Guide,84,doc/master/classTVectorT.html,https://root.cern,https://root.cern/doc/master/classTVectorT.html,1,['Guid'],['Guide']
Usability,". ROOT: TView Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TView Class ReferenceabstractGraphics » 2D Graphics » Graphics pad. ; See TView3D. ; Definition at line 25 of file TView.h. Public Member Functions;  TView ();  ;  ~TView () override=default;  ; virtual void AdjustScales (TVirtualPad *pad=nullptr)=0;  ; virtual void AxisVertex (Double_t ang, Double_t *av, Int_t &ix1, Int_t &ix2, Int_t &iy1, Int_t &iy2, Int_t &iz1, Int_t &iz2)=0;  ; virtual void Centered ()=0;  ; virtual void Centered3DImages (TVirtualPad *pad=nullptr)=0;  ; virtual void DefinePerspectiveView ()=0;  ; virtual void DefineViewDirection (const Double_t *s, const Double_t *c, Double_t cosphi, Double_t sinphi, Double_t costhe, Double_t sinthe, Double_t cospsi, Double_t sinpsi, Double_t *tnorm, Double_t *tback)=0;  ; virtual void DrawOutlineCube (TList *outline, Double_t *rmin, Double_t *rmax)=0;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override=0;  Execute action corresponding to an event at (px,py). ;  ; virtual void ExecuteRotateView (Int_t event, Int_t px, Int_t py)=0;  ; virtual void FindNormal (Double_t x, Double_t y, Double_t z, Double_t &zn)=0;  ; virtual void FindPhiSectors (Int_t iopt, Int_t &kphi, Double_t *aphi, Int_t &iphi1, Int_t &iphi2)=0;  ; virtual void FindScope (Double_t *scale, Double_t *center, Int_t &irep)=0;  ; virtual void FindThetaSectors (Int_t iopt, Double_t phi, Int_t &kth, Double_t *ath, Int_t &ith1, Int_t &ith2)=0;  ; virtual void Front ()=0;  ; virtual void FrontView (TVirtualPad *pad=nullptr)=0;  ; virtual Bool_t GetAutoRange ()=0;  ; virtual Int_t GetDistancetoAxis (Int_t axis, Int_t px, Int_t py, Double_t &ratio)=0;  ; virtual Double_t GetDproj () const =0;  ; virtual Double_t GetDview () const =0;  ; virtual Double_t GetExtent () const =0;  ; virtual Double_t GetLatitude ()=0;  ; virtual Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView.html:61,Guid,Guide,61,doc/master/classTView.html,https://root.cern,https://root.cern/doc/master/classTView.html,1,['Guid'],['Guide']
Usability,". ROOT: TView3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TView3D Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; The 3D view class. ; This package was originally written by Evgueni Tcherniaev from IHEP/Protvino.; The original Fortran implementation was adapted to HIGZ/PAW by Olivier Couet and Evgueni Tcherniaev.; This View class is a subset of the original system. It has been converted to a C++ class by Rene Brun.; TView3D creates a 3-D view in the current pad. In this 3D view Lego and Surface plots can be drawn and also 3D polyline and markers. Most of the time a TView3D is created automatically when a 3D object needs to be painted in a pad (for instance a Lego or a Surface plot).; In some case a TView3D should be explicitly. For instance to paint a 3D simple scene composed of simple objects like polylines and polymarkers. The following macro gives an example:; {; auto cV3D = new TCanvas(""cV3D"",""PolyLine3D & PolyMarker3D Window"",200,10,500,500);; ; // Creating a view; TView3D *view = (TView3D*) TView::CreateView(1);; view->SetRange(5,5,5,25,25,25);; ; // Create a first PolyLine3D; TPolyLine3D *pl3d1 = new TPolyLine3D(6);; pl3d1->SetPoint(0, 10, 20, 10);; pl3d1->SetPoint(1, 15, 15, 15);; pl3d1->SetPoint(2, 20, 20, 20);; pl3d1->SetPoint(3, 20, 10, 20);; pl3d1->SetPoint(4, 10, 10, 20);; pl3d1->SetPoint(5, 10, 10, 10);; ; // Create a first PolyMarker3D; TPolyMarker3D *pm3d1 = new TPolyMarker3D(9);; pm3d1->SetPoint( 0, 10, 10, 10);; pm3d1->SetPoint( 1, 20, 20, 20);; pm3d1->SetPoint( 2, 10, 20, 20);; pm3d1->SetPoint( 3, 10, 10, 20);; pm3d1->SetPoint( 4, 20, 20, 10);; pm3d1->SetPoint( 5, 20, 10, 10);; pm3d1->SetPoint( 6, 20, 10, 20);; pm3d1->SetPoint( 7, 10, 20, 10);; pm3d1->SetPoint( 8, 15, 15, 15);; pm3d1->SetMarkerSize(2);; pm3d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTView3D.html:63,Guid,Guide,63,doc/master/classTView3D.html,https://root.cern,https://root.cern/doc/master/classTView3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TViewPubDataMembers Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubDataMembers Class Reference. ; View implementing the TList interface and giving access all the TDictionary describing public data members in a class and all its base classes without caching any of the TDictionary pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubDataMembers.h. Public Member Functions;  TViewPubDataMembers (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubDataMembers ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public data members(currently loaded in the list; of DataMembers) in this class and all its base classes. ;  ; void Load ();  Load all the DataMembers known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubDataMembers.html:75,Guid,Guide,75,doc/master/classTViewPubDataMembers.html,https://root.cern,https://root.cern/doc/master/classTViewPubDataMembers.html,1,['Guid'],['Guide']
Usability,". ROOT: TViewPubFunctions Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TViewPubFunctions Class Reference. ; View implementing the TList interface and giving access all the TFunction describing public methods in a class and all its base classes without caching any of the TFunction pointers. ; Adding to this collection directly is prohibited. Iteration can only be done via the TIterator interfaces. ; Definition at line 28 of file TViewPubFunctions.h. Public Member Functions;  TViewPubFunctions (TClass *cl=nullptr);  Usual constructor. ;  ; virtual ~TViewPubFunctions ();  Default destructor. ;  ; TObject * At (Int_t idx) const override;  Returns the object at position idx. Returns 0 if idx is out of range. ;  ; TObject * FindObject (const char *name) const override;  Find an object in this list using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this list using the object's IsEqual() member function. ;  ; virtual const TList * GetListOfClasses () const;  ; Int_t GetSize () const override;  Return the total number of public methods (currently loaded in the list of functions) in this class and all its base classes. ;  ; void Load ();  Load all the functions known to the interpreter for the scope 'fClass' and all its bases classes. ;  ; TIterator * MakeIterator (Bool_t dir=kIterForward) const override;  Return a list iterator. ;  ;  Public Member Functions inherited from TList;  TList ();  ; The argument is ignored Use the default constructor TList ()."") ;  ;  TList (TObject *) R__DEPRECATED(6;  ; virtual ~TList ();  Delete the list. ;  ; void Add (TObject *obj) override;  ; virtual void Add (TObject *obj, Option_t *opt);  ; TClass * IsA () const override;  ; Bool_t IsAscending ();  ; TObject * Remove (const TObjLinkPtr_t &l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:73,Guid,Guide,73,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['Guid'],['Guide']
Usability,". ROOT: TViewTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TViewTimer Class Reference. . Definition at line 145 of file TGTextView.h. Public Member Functions;  TViewTimer (TGView *t, Long_t ms);  ; Bool_t Notify () override;  Notify when timer times out and reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewTimer.html:66,Guid,Guide,66,doc/master/classTViewTimer.html,https://root.cern,https://root.cern/doc/master/classTViewTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TViewUpdateTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TViewUpdateTimer Class Reference. . Definition at line 66 of file TGFSContainer.cxx. Public Member Functions;  TViewUpdateTimer (TGFileContainer *t, Long_t ms);  ; Bool_t Notify () override;  Reset the timer. ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTimerID (UInt_t id=0);  ; virtual void Start (Long_t milliSec=-1, Bool_t singleShot=kFALSE);  Starts the timer with a milliSec timeou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewUpdateTimer.html:72,Guid,Guide,72,doc/master/classTViewUpdateTimer.html,https://root.cern,https://root.cern/doc/master/classTViewUpdateTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TViewer3DPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TViewer3DPad Class ReferenceGraphics » 2D Graphics » Graphics pad. ; Provides 3D viewer interface (TVirtualViewer3D) support on a pad. ; Will be merged with TView / TView3D eventually. ; Definition at line 19 of file TViewer3DPad.h. Public Member Functions;  TViewer3DPad (TVirtualPad &pad);  ;  ~TViewer3DPad () override;  ; void AddCompositeOp (UInt_t operation) override;  ; Int_t AddObject (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Add an 3D object described by the buffer to the viewer. ;  ; Int_t AddObject (UInt_t placedID, const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  We don't support placed ID shapes - ID is discarded. ;  ; void BeginScene () override;  Open a scene on the viewer. ;  ; Bool_t BuildingScene () const override;  ; void CloseComposite () override;  ; void EndScene () override;  Close the scene on the viewer. ;  ; TClass * IsA () const override;  ; Bool_t OpenComposite (const TBuffer3D &buffer, Bool_t *addChildren=nullptr) override;  Composite shapes not supported on this viewer currently - ignore. ;  ; Bool_t PreferLocalFrame () const override;  Indicates if we prefer positions in local frame. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualViewer3D; virtual ~TVirtualViewer3D ();  ; virtual Bool_t CanLoopOnPrimitives () const;  ; virtual void DrawViewer ();  ; TClass * IsA () const override;  ; virtual void ObjectPaint (TObject *, Option_t *="""");  ; virtual void PadPaint (TVirtualPad *);  ; virtual void PrintObjects ();  ; virtual void ResetCameras ();  ; virtual void ResetCamerasAfterNextUpdate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewer3DPad.html:68,Guid,Guide,68,doc/master/classTViewer3DPad.html,https://root.cern,https://root.cern/doc/master/classTViewer3DPad.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualArray Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; TVirtualArray Class ReferenceInput/Output Library. ; Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. ; Definition at line 27 of file TVirtualArray.h. Public Types; using ObjectPtr = TClass::ObjectPtr;  . Public Member Functions;  TVirtualArray (TClass *cl, UInt_t size);  ;  ~TVirtualArray ();  ; TClass * GetClass ();  ; char * GetObjectAt (UInt_t ind) const;  ; char * operator[] (UInt_t ind) const;  ; void SetSize (UInt_t size);  . Public Attributes; ObjectPtr fArray;  fSize elements ;  ; UInt_t fCapacity;  ; TClassRef fClass;  ; UInt_t fSize;  . #include <TVirtualArray.h>; Member Typedef Documentation. ◆ ObjectPtr. using TVirtualArray::ObjectPtr = TClass::ObjectPtr. Definition at line 29 of file TVirtualArray.h. Constructor & Destructor Documentation. ◆ TVirtualArray(). TVirtualArray::TVirtualArray ; (; TClass * ; cl, . UInt_t ; size . ). inline . Definition at line 36 of file TVirtualArray.h. ◆ ~TVirtualArray(). TVirtualArray::~TVirtualArray ; (; ). inline . Definition at line 37 of file TVirtualArray.h. Member Function Documentation. ◆ GetClass(). TClass * TVirtualArray::GetClass ; (; ). inline . Definition at line 39 of file TVirtualArray.h. ◆ GetObjectAt(). char * TVirtualArray::GetObjectAt ; (; UInt_t ; ind); const. inline . Definition at line 41 of file TVirtualArray.h. ◆ operator[](). char * TVirtualArray::operator[] ; (; UInt_t ; ind); const. inline . Definition at line 40 of file TVirtualArray.h. ◆ SetSize(). void TVirtualArray::SetSize ; (; UInt_t ; size). inline . Definition at line 43 of file TVirtualArray.h. Member Data Documentation. ◆ fArray. ObjectPtr TVirtualArray::fArray. fSize elements ; Definition at line 34 of file TVirtualArray.h. ◆ f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualArray.html:69,Guid,Guide,69,doc/master/classTVirtualArray.html,https://root.cern,https://root.cern/doc/master/classTVirtualArray.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualBranchBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Static Private Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TVirtualBranchBrowsable Class ReferenceTree Library. ; TVirtualBranchBrowsable is a base class (not really abstract, but useless by itself) for helper objects that extend TBranch's browsing support. ; Each registered derived class's generator method is called, which fills all created helper objects into a list which can then be browsed. For details of what these browser helper objects can do, see e.g. TMethodBrowsable, which allows methods to show up in the TBrowser.; Only registered helper objects are created. By default, only TMethodBrowsable, TNonSplitBrowsable, and TCollectionPropertyBrowsable are registered (see RegisterDefaultGenerators). You can prevent any of their objects to show up in the browser by unregistering the generator: TMethodBrowsable::Unregister(); TMethodBrowsable::Unregisterstatic void Unregister()Wrapper for the registration method.Definition TBranchBrowsable.cxx:595; will stop creating browsable method helper objects from that call on. Note that these helper objects are cached (in TBranch::fBrowsables); already created (and thus cached) browsables will still appear in the browser even after unregistering the corresponding generator.; You can implement your own browsable objects and their generator; see e.g. the simple TCollectionPropertyBrowsable. Note that you will have to register your generator just like any other, and that you should implement the following methods for your own class, mainly for consistency reasons: static void Register() {; TVirtualBranchBrowsable::RegisterGenerator(GetBrowsables); }; static void Unregister() {; TVirtualBra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualBranchBrowsable.html:79,Guid,Guide,79,doc/master/classTVirtualBranchBrowsable.html,https://root.cern,https://root.cern/doc/master/classTVirtualBranchBrowsable.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualCollectionIterators Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualCollectionIterators Class ReferenceInput/Output Library. ; Small helper class to generically acquire and release iterators. ; Definition at line 25 of file TVirtualCollectionIterators.h. Public Types; typedef TVirtualCollectionProxy::CreateIterators_t CreateIterators_t;  ; typedef TVirtualCollectionProxy::DeleteTwoIterators_t DeleteTwoIterators_t;  . Public Member Functions;  TVirtualCollectionIterators (CreateIterators_t creator, DeleteTwoIterators_t destruct);  ;  TVirtualCollectionIterators (TVirtualCollectionProxy *proxy, Bool_t read_from_file=kTRUE);  ;  ~TVirtualCollectionIterators ();  ; void CreateIterators (void *collection, TVirtualCollectionProxy *proxy);  . Public Attributes; void * fBegin;  ; char fBeginBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  ; CreateIterators_t fCreateIterators;  ; DeleteTwoIterators_t fDeleteTwoIterators;  ; void * fEnd;  ; char fEndBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  . Private Member Functions;  TVirtualCollectionIterators ()=delete;  ;  TVirtualCollectionIterators (const TVirtualCollectionIterators &)=delete;  . #include <TVirtualCollectionIterators.h>; Member Typedef Documentation. ◆ CreateIterators_t. typedef TVirtualCollectionProxy::CreateIterators_t TVirtualCollectionIterators::CreateIterators_t. Definition at line 36 of file TVirtualCollectionIterators.h. ◆ DeleteTwoIterators_t. typedef TVirtualCollectionProxy::DeleteTwoIterators_t TVirtualCollectionIterators::DeleteTwoIterators_t. Definition at line 37 of file TVirtualCollectionIterators.h. Constructor & Destructor Documentation. ◆ TVirtualCollectionIterators() [1/4]. TVirtualCollectionIterators::TVirtualCollectionIterators ; (; ). privatedelete . ◆ TVirtualCollectionI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionIterators.html:83,Guid,Guide,83,doc/master/classTVirtualCollectionIterators.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionIterators.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualCollectionProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Attributes |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TVirtualCollectionProxy Class Referenceabstract. ; Defines a common interface to inspect/change the contents of an object that represents a collection. ; Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that matches the proxied collection type. The interface provides two families of functions: (i) for direct manipulation, e.g. Insert() or At(); and (ii) iterator-based, e.g. GetFunctionCreateIterators() or GetFunctionNext(). TVirtualCollectionProxy objects are stateful; in particular, many functions require to set the object to operate on via PushProxy() / PopProxy(). The TPushPop RAII class is provided for convenience. A collection proxy for a given class can be permanently set using TClass::CopyCollectionProxy(). The Generate() function should be overridden in derived classes to return a clean object of the most-derived class. ; Definition at line 52 of file TVirtualCollectionProxy.h. Classes; class  TPushPop;  RAII helper class that ensures that PushProxy() / PopProxy() are called when entering / leaving a C++ context. More...;  . Public Types; typedef void *(* CopyIterator_t) (void *dest, const void *source);  Copy the iterator source into dest. ;  ; typedef void(* CreateIterators_t) (void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy);  *begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize. ;  ; typedef void(* DeleteIterator_t) (void *iter);  If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherwise, just call the iterator's destructor. ;  ; typedef void(* DeleteT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:79,Guid,Guide,79,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualCollectionProxy::TPushPop Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualCollectionProxy::TPushPop Class Reference. ; RAII helper class that ensures that PushProxy() / PopProxy() are called when entering / leaving a C++ context. ; Definition at line 75 of file TVirtualCollectionProxy.h. Public Member Functions;  TPushPop (TVirtualCollectionProxy *proxy, void *objectstart);  ;  ~TPushPop ();  . Public Attributes; TVirtualCollectionProxy * fProxy;  . Private Member Functions;  TPushPop (const TPushPop &)=delete;  ; TPushPop & operator= (const TPushPop &)=delete;  . #include <TVirtualCollectionProxy.h>; Constructor & Destructor Documentation. ◆ TPushPop() [1/2]. TVirtualCollectionProxy::TPushPop::TPushPop ; (; TVirtualCollectionProxy * ; proxy, . void * ; objectstart . ). inline . Definition at line 78 of file TVirtualCollectionProxy.h. ◆ ~TPushPop(). TVirtualCollectionProxy::TPushPop::~TPushPop ; (; ). inline . Definition at line 80 of file TVirtualCollectionProxy.h. ◆ TPushPop() [2/2]. TVirtualCollectionProxy::TPushPop::TPushPop ; (; const TPushPop & ; ). privatedelete . Member Function Documentation. ◆ operator=(). TPushPop & TVirtualCollectionProxy::TPushPop::operator= ; (; const TPushPop & ; ). privatedelete . Member Data Documentation. ◆ fProxy. TVirtualCollectionProxy* TVirtualCollectionProxy::TPushPop::fProxy. Definition at line 77 of file TVirtualCollectionProxy.h. Libraries for TVirtualCollectionProxy::TPushPop:. [legend]; The documentation for this class was generated from the following file:; core/cont/inc/TVirtualCollectionProxy.h. TVirtualCollectionProxyTPushPop. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy_1_1TPushPop.html:89,Guid,Guide,89,doc/master/classTVirtualCollectionProxy_1_1TPushPop.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy_1_1TPushPop.html,2,['Guid'],['Guide']
Usability,". ROOT: TVirtualCollectionPtrIterators Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TVirtualCollectionPtrIterators Class ReferenceInput/Output Library. . Definition at line 194 of file TVirtualCollectionIterators.h. Classes; struct  TInternalIterator;  . Public Types; typedef TVirtualCollectionProxy::CopyIterator_t Copy_t;  ; typedef TVirtualCollectionProxy::CreateIterators_t CreateIterators_t;  ; typedef TVirtualCollectionProxy::DeleteIterator_t Delete_t;  ; typedef TVirtualCollectionProxy::DeleteTwoIterators_t DeleteTwoIterators_t;  ; typedef TVirtualCollectionProxy::Next_t Next_t;  . Public Member Functions;  TVirtualCollectionPtrIterators (TVirtualCollectionProxy *proxy);  ;  ~TVirtualCollectionPtrIterators ();  ; void CreateIterators (void *collection, TVirtualCollectionProxy *proxy);  . Static Public Member Functions; static void * CopyIterator (void *dest, const void *source);  ; static void DeleteIterator (void *iter);  ; static void * Next (void *iter, const void *end);  . Public Attributes; void * fBegin;  ; void * fEnd;  . Private Member Functions;  TVirtualCollectionPtrIterators ();  ;  TVirtualCollectionPtrIterators (const TVirtualCollectionPtrIterators &);  . Private Attributes; Bool_t fAllocated;  ; TInternalIterator fBeginBuffer;  ; CreateIterators_t fCreateIterators;  ; DeleteTwoIterators_t fDeleteTwoIterators;  ; TInternalIterator fEndBuffer;  ; char fRawBeginBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  ; char fRawEndBuffer [TVirtualCollectionProxy::fgIteratorArenaSize];  . #include <TVirtualCollectionIterators.h>; Member Typedef Documentation. ◆ Copy_t. typedef TVirtualCollectionProxy::CopyIterator_t TVirtualCollectionPtrIterators::Copy_t. Definition at line 198 of file TVirtualCollect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionPtrIterators.html:86,Guid,Guide,86,doc/master/classTVirtualCollectionPtrIterators.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionPtrIterators.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualFFT Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualFFT Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualFFT is an interface class for Fast Fourier Transforms. ; The default FFT library is FFTW. To use it, FFTW3 library should already be installed, and ROOT should be have fftw3 module enabled, with the directories of fftw3 include file and library specified (see installation instructions). Function SetDefaultFFT() allows to change the default library. Available transform types:; FFT:; ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT) in one or more dimensions, -1 in the exponent; ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT) in one or more dimensions, +1 in the exponent; ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT) in one or more dimensions,; ""C2R"" - inverse transforms to ""R2C"", taking complex input (storing the non-redundant half of a logically Hermitian array) to real output; ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format, i.e. real and imaginary parts for a transform of size n stored as r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; ""HC2R"" - computes the reverse of FFTW_R2HC, above; ""DHT"" - computes a discrete Hartley transform. Sine/cosine transforms:; Different types of transforms are specified by parameter kind of the SineCosine() static function. 4 different kinds of sine and cosine transforms are available. DCT-I (REDFT00 in FFTW3 notation)- kind=0; DCT-II (REDFT01 in FFTW3 notation)- kind=1; DCT-III(REDFT10 in FFTW3 notation)- kind=2; DCT-IV (REDFT11 in FFTW3 notation)- kind=3; DST-I (RODFT00 in FFTW3 notation)- kind=4; DST-II (RODFT01 in FFTW3 notation)- kind=5; DST-III(RODFT10 in FFTW3 notation)- kind=6; DST-IV (RODFT11 in FFTW3 notation)- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFFT.html:67,Guid,Guide,67,doc/master/classTVirtualFFT.html,https://root.cern,https://root.cern/doc/master/classTVirtualFFT.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualFitter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualFitter Class ReferenceabstractHistogram Library. ; Abstract Base Class for Fitting. ; Definition at line 29 of file TVirtualFitter.h. Public Types; typedef void(* FCNFunc_t) (Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualFitter ();  Default constructor. ;  ;  ~TVirtualFitter () override;  Cleanup virtual fitter. ;  ; virtual Double_t Chisquare (Int_t npar, Double_t *params) const =0;  ; void Clear (Option_t *option="""") override=0;  Set name and title to empty strings (""""). ;  ; virtual Int_t ExecuteCommand (const char *command, Double_t *args, Int_t nargs)=0;  ; virtual void FixParameter (Int_t ipar)=0;  ; virtual void GetConfidenceIntervals (Int_t n, Int_t ndim, const Double_t *x, Double_t *ci, Double_t cl=0.95);  return confidence intervals in array x of dimension ndim implemented in TFitter and TLinearFitter ;  ; virtual void GetConfidenceIntervals (TObject *obj, Double_t cl=0.95);  return confidence intervals in TObject obj implemented in TFitter and TLinearFitter ;  ; virtual Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualFitter.html:70,Guid,Guide,70,doc/master/classTVirtualFitter.html,https://root.cern,https://root.cern/doc/master/classTVirtualFitter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualGeoConverter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TVirtualGeoConverter Class ReferenceThe Geometry Package » Geometry classes. ; Abstract class for geometry converters. ; Definition at line 18 of file TVirtualGeoConverter.h. Public Member Functions;  TVirtualGeoConverter (TGeoManager *geom);  Geometry converter default constructor. ;  ;  ~TVirtualGeoConverter () override;  Geometry converter default destructor. ;  ; virtual void ConvertGeometry ();  ; TClass * IsA () const override;  ; void SetGeometry (TGeoManager *geom);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoConverter.html:76,Guid,Guide,76,doc/master/classTVirtualGeoConverter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoConverter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualGeoPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Attributes |; List of all members ; TVirtualGeoPainter Class ReferenceabstractThe Geometry Package » Geometry classes. ; Abstract class for geometry painters. ; Definition at line 32 of file TVirtualGeoPainter.h. Public Types; enum  EGeoBombOption { kGeoNoBomb = 0; , kGeoBombXYZ = 1; , kGeoBombCyl = 2; , kGeoBombSph = 3; };  ; enum  EGeoVisLevel { kGeoVisLevel = 0; };  ; enum  EGeoVisOption { ;   kGeoVisDefault = 0; , kGeoVisLeaves = 1; , kGeoVisOnly = 2; , kGeoVisBranch = 3; , ;   kGeoVisChanged = 4. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualGeoPainter (TGeoManager *manager);  Geometry painter default constructor. ;  ;  ~TVirtualGeoPainter () override;  Geometry painter default destructor. ;  ; virtual void AddSize3D (Int_t numpoints, Int_t numsegs, Int_t numpolys)=0;  ; virtual TVirtualGeoTrack * AddTrack (Int_t id, Int_t pdgcode, TObject *particle)=0;  ; virtual void AddTrackPoint (Double_t *point, Double_t *box, Bool_t reset=kFALSE)=0;  ; virtual void BombTranslation (const Double_t *tr, Double_t *bombtr)=0;  ; virtual void CheckBoundaryErrors (Int_t ntracks=1000000, Double_t radius=-1.)=0;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoPainter.html:74,Guid,Guide,74,doc/master/classTVirtualGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualGeoTrack Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualGeoTrack Class ReferenceabstractThe Geometry Package » Geometry classes. ; Base class for user-defined tracks attached to a geometry. ; Tracks are 3D objects made of points and they store a pointer to a TParticle. The geometry manager holds a list of all tracks that will be deleted on destruction of gGeoManager. ; Definition at line 23 of file TVirtualGeoTrack.h. Public Member Functions;  TVirtualGeoTrack ();  Virtual tracks default constructor. ;  ;  TVirtualGeoTrack (Int_t id, Int_t pdgcode, TVirtualGeoTrack *parent=nullptr, TObject *particle=nullptr);  Constructor providing ID for parent track (-1 for primaries), ID of this track and related particle pointer. ;  ;  ~TVirtualGeoTrack () override;  Destructor. ;  ; virtual TVirtualGeoTrack * AddDaughter (Int_t id, Int_t pdgcode, TObject *particle=nullptr)=0;  ; virtual Int_t AddDaughter (TVirtualGeoTrack *other)=0;  ; virtual void AddPoint (Double_t x, Double_t y, Double_t z, Double_t t)=0;  ; virtual TVirtualGeoTrack * FindTrackWithId (Int_t id) const;  Recursively search through this track for a daughter particle (at any depth) with the specified id. ;  ; TVirtualGeoTrack * GetDaughter (Int_t index) const;  ; virtual Int_t GetDaughterId (Int_t index) const;  Returns daughter id. ;  ; const Double_t * GetFirstPoint () const;  ; Int_t GetId () const;  ; const Double_t * GetLastPoint () const;  ; Int_t GetLastPoint (Double_t &x, Double_t &y, Double_t &z, Double_t &t) const;  ; TVirtualGeoTrack * GetMother () const;  ; TObject * GetMotherParticle () const;  ; const char * GetName () const override;  Get the PDG name. ;  ; Int_t GetNdaughters () const;  ; virtual Int_t GetNpoints () const =0;  ; Int_t GetParentId () const;  ; TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGeoTrack.html:72,Guid,Guide,72,doc/master/classTVirtualGeoTrack.html,https://root.cern,https://root.cern/doc/master/classTVirtualGeoTrack.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualGraphPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TVirtualGraphPainter Class ReferenceabstractHistogram Library » Painting classes » Histograms and graphs painting classes. ; Abstract interface to a histogram painter. ; Definition at line 28 of file TVirtualGraphPainter.h. Public Member Functions;  TVirtualGraphPainter ();  ;  ~TVirtualGraphPainter () override;  ; virtual Int_t DistancetoPrimitiveHelper (TGraph *theGraph, Int_t px, Int_t py)=0;  ; virtual void DrawPanelHelper (TGraph *theGraph)=0;  ; virtual void ExecuteEventHelper (TGraph *theGraph, Int_t event, Int_t px, Int_t py)=0;  ; virtual char * GetObjectInfoHelper (TGraph *theGraph, Int_t px, Int_t py) const =0;  ; TClass * IsA () const override;  ; virtual void PaintGraph (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintGrapHist (TGraph *theGraph, Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)=0;  ; virtual void PaintHelper (TGraph *theGraph, Option_t *option)=0;  ; virtual void PaintScatter (TScatter *theScatter, Option_t *option)=0;  ; virtual void PaintStats (TGraph *theGraph, TF1 *fit)=0;  ; virtual void SetHighlight (TGraph *theGraph)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualGraphPainter.html:76,Guid,Guide,76,doc/master/classTVirtualGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualGraphPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualHistPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Private Attributes |; List of all members ; TVirtualHistPainter Class ReferenceabstractHistogram Library » Painting classes » Histograms and graphs painting classes. ; Abstract interface to a histogram painter. ; Definition at line 30 of file TVirtualHistPainter.h. Public Member Functions;  TVirtualHistPainter ();  ;  ~TVirtualHistPainter () override;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override=0;  Computes distance from point (px,py) to the object. ;  ; virtual void DrawPanel ()=0;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override=0;  Execute action corresponding to an event at (px,py). ;  ; virtual TList * GetContourList (Double_t contour) const =0;  ; char * GetObjectInfo (Int_t px, Int_t py) const override=0;  Returns string containing info about the object at position (px,py). ;  ; virtual TList * GetStack () const =0;  ; TClass * IsA () const override;  ; virtual Bool_t IsInside (Double_t x, Double_t y)=0;  ; virtual Bool_t IsInside (Int_t x, Int_t y)=0;  ; virtual Int_t MakeCuts (char *cutsopt)=0;  ; void Paint (Option_t *option="""") override=0;  This method must be overridden if a class wants to paint itself. ;  ; virtual void PaintStat (Int_t dostat, TF1 *fit)=0;  ; virtual void ProcessMessage (const char *mess, const TObject *obj)=0;  ; virtual void SetHighlight ()=0;  ; virtual void SetHistogram (TH1 *h)=0;  ; virtual void SetShowProjection (const char *option, Int_t nbins)=0;  ; virtual void SetShowProjectionXY (const char *option, Int_t nbinsY, Int_t nbinsX)=0;  ; virtual void SetStack (TList *stack)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualHistPainter.html:75,Guid,Guide,75,doc/master/classTVirtualHistPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualHistPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualIndex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TVirtualIndex Class ReferenceabstractTree Library. ; Abstract interface for Tree Index. ; Definition at line 30 of file TVirtualIndex.h. Public Member Functions;  TVirtualIndex ();  pointer to Tree ;  ;  ~TVirtualIndex () override;  ; virtual void Append (const TVirtualIndex *, bool delaySort=false)=0;  ; virtual Long64_t GetEntryNumberFriend (const TTree *)=0;  ; virtual Long64_t GetEntryNumberWithBestIndex (Long64_t major, Long64_t minor) const =0;  ; virtual Long64_t GetEntryNumberWithIndex (Long64_t major, Long64_t minor) const =0;  ; virtual const char * GetMajorName () const =0;  ; virtual const char * GetMinorName () const =0;  ; virtual Long64_t GetN () const =0;  ; virtual TTree * GetTree () const;  ; TClass * IsA () const override;  ; virtual bool IsValidFor (const TTree *parent)=0;  ; virtual void SetTree (TTree *T)=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateFormulaLeaves (const TTree *parent)=0;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualIndex.html:69,Guid,Guide,69,doc/master/classTVirtualIndex.html,https://root.cern,https://root.cern/doc/master/classTVirtualIndex.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualIsAProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TVirtualIsAProxy Class Referenceabstract. . Definition at line 27 of file TVirtualIsAProxy.h. Public Member Functions; virtual ~TVirtualIsAProxy ();  ; virtual TClass * operator() (const void *obj)=0;  ; virtual void SetClass (TClass *cl)=0;  . #include <TVirtualIsAProxy.h>. Inheritance diagram for TVirtualIsAProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TVirtualIsAProxy(). virtual TVirtualIsAProxy::~TVirtualIsAProxy ; (; ). inlinevirtual . Definition at line 29 of file TVirtualIsAProxy.h. Member Function Documentation. ◆ operator()(). virtual TClass * TVirtualIsAProxy::operator() ; (; const void * ; obj). pure virtual . Implemented in TIsAProxy, and TInstrumentedIsAProxy< T >. ◆ SetClass(). virtual void TVirtualIsAProxy::SetClass ; (; TClass * ; cl). pure virtual . Implemented in TIsAProxy, and TInstrumentedIsAProxy< T >. The documentation for this class was generated from the following file:; core/meta/inc/TVirtualIsAProxy.h. TVirtualIsAProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualIsAProxy.html:72,Guid,Guide,72,doc/master/classTVirtualIsAProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualIsAProxy.html,2,['Guid'],['Guide']
Usability,". ROOT: TVirtualIsAProxy Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TVirtualIsAProxy Class Referenceabstract. . Definition at line 27 of file TVirtualIsAProxy.h. Public Member Functions; virtual ~TVirtualIsAProxy ();  ; virtual TClass * operator() (const void *obj)=0;  ; virtual void SetClass (TClass *cl)=0;  . #include <TVirtualIsAProxy.h>. Inheritance diagram for TVirtualIsAProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TVirtualIsAProxy(). virtual TVirtualIsAProxy::~TVirtualIsAProxy ; (; ). inlinevirtual . Definition at line 29 of file TVirtualIsAProxy.h. Member Function Documentation. ◆ operator()(). virtual TClass * TVirtualIsAProxy::operator() ; (; const void * ; obj). pure virtual . Implemented in TIsAProxy, and TInstrumentedIsAProxy< T >. ◆ SetClass(). virtual void TVirtualIsAProxy::SetClass ; (; TClass * ; cl). pure virtual . Implemented in TIsAProxy, and TInstrumentedIsAProxy< T >. The documentation for this class was generated from the following file:; core/meta/inc/TVirtualIsAProxy.h. TVirtualIsAProxy. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTVirtualIsAProxy.html:71,Guid,Guide,71,doc/v632/classTVirtualIsAProxy.html,https://root.cern,https://root.cern/doc/v632/classTVirtualIsAProxy.html,2,['Guid'],['Guide']
Usability,". ROOT: TVirtualMCDecayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMCDecayer Class ReferenceabstractMonte Carlo » EG. ; Abstract base class for particle decays. ; Clients are the transport code and the primary particle generators; andre.nosp@m.as.m.nosp@m.orsch.nosp@m.@cer.nosp@m.n.ch ; Definition at line 23 of file TVirtualMCDecayer.h. Public Member Functions;  TVirtualMCDecayer ();  ;  ~TVirtualMCDecayer () override;  ; virtual void Decay (Int_t idpart, TLorentzVector *p)=0;  Decay a particle of type IDPART (PDG code) and momentum P. ;  ; virtual void ForceDecay ()=0;  Force a particle decay mode. ;  ; virtual Float_t GetLifetime (Int_t kf)=0;  Get the life-time of a particle of type KF (a PDG code). ;  ; virtual Float_t GetPartialBranchingRatio (Int_t ipart)=0;  Get the partial branching ratio for a particle of type IPART (a PDG code). ;  ; virtual Int_t ImportParticles (TClonesArray *particles)=0;  Get the decay products into the passed PARTICLES TClonesArray of TParticles. ;  ; virtual void Init ()=0;  Initialize the decayer. ;  ; TClass * IsA () const override;  ; virtual void ReadDecayTable ()=0;  Read in particle data from an ASCII file. ;  ; virtual void SetForceDecay (Int_t type)=0;  Force a particular decay type. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMCDecayer.html:73,Guid,Guide,73,doc/master/classTVirtualMCDecayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualMCDecayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualMagField Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMagField Class ReferenceabstractThe Geometry Package » Geometry classes. ; Abstract class for magnetic field. ; Derived classes are encouraged to use the TVirtualMagField named constructor and must implement the method:; Field(const Double_t *x, Double_t *B); TVirtualMagField::Fieldvirtual void Field(const Double_t *x, Double_t *B)=0; double; xDouble_t x[n]Definition legend1.C:17; A field object can be made global via:; TGlobalMagField::Instance()->SetField(field) [1]; A field which is made global is owned by the field manager. The used is not allowed to delete it directly anymore (otherwise a Fatal() is issued). Global field can be deleted by calling [1] with a different argument (which can be NULL). Otherwise the global field is deleted together with the field manager. ; Definition at line 16 of file TVirtualMagField.h. Public Member Functions;  TVirtualMagField ();  ;  TVirtualMagField (const char *name);  ;  ~TVirtualMagField () override;  Destructor. Unregisters the field. ;  ; virtual void Field (const Double_t *x, Double_t *B)=0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMagField.html:72,Guid,Guide,72,doc/master/classTVirtualMagField.html,https://root.cern,https://root.cern/doc/master/classTVirtualMagField.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualMapFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMapFile Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract base class for TMapFile. ; This allows Core to handle TMapFile which is implemented in RIO ; Definition at line 27 of file TVirtualMapFile.h. Public Member Functions; virtual void Close (Option_t *option="""")=0;  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMapFile.html:71,Guid,Guide,71,doc/master/classTVirtualMapFile.html,https://root.cern,https://root.cern/doc/master/classTVirtualMapFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualMonitoringReader Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMonitoringReader Class Reference. . Definition at line 89 of file TVirtualMonitoring.h. Public Member Functions;  TVirtualMonitoringReader (const char *="""");  ; virtual ~TVirtualMonitoringReader ();  ; virtual void DeleteMap (TMap *);  ; virtual void DumpResult ();  ; virtual void GetLastValues (const char *, const char *, const char *, const char *, Bool_t=kFALSE);  ; virtual TMap * GetMap ();  ; virtual void GetValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Bool_t=kFALSE);  ; TClass * IsA () const override;  ; virtual void ProxyValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Long_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMonitoringReader.html:80,Guid,Guide,80,doc/master/classTVirtualMonitoringReader.html,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualMonitoringWriter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TVirtualMonitoringWriter Class Reference. . Definition at line 35 of file TVirtualMonitoring.h. Public Member Functions;  TVirtualMonitoringWriter ();  ;  TVirtualMonitoringWriter (const char *name, Double_t value);  ; virtual ~TVirtualMonitoringWriter ();  destructor ;  ; TClass * IsA () const override;  ; virtual Bool_t SendFileCloseEvent (TFile *);  ; virtual Bool_t SendFileOpenProgress (TFile *, TList *, const char *, Bool_t=kFALSE);  ; virtual Bool_t SendFileReadProgress (TFile *);  ; virtual Bool_t SendFileWriteProgress (TFile *);  ; virtual Bool_t SendInfoDescription (const char *);  ; virtual Bool_t SendInfoStatus (const char *);  ; virtual Bool_t SendInfoTime ();  ; virtual Bool_t SendInfoUser (const char *=nullptr);  ; virtual Bool_t SendParameters (TList *, const char *=nullptr);  ; virtual Bool_t SendProcessingProgress (Double_t, Double_t, Bool_t=kFALSE);  ; virtual Bool_t SendProcessingStatus (const char *, Bool_t=kFALSE);  ; virtual void SetLogLevel (const char *=""WARNING"");  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Verbose (Bool_t);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMonitoringWriter.html:80,Guid,Guide,80,doc/master/classTVirtualMonitoringWriter.html,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringWriter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualMutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualMutex Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; This class implements a mutex interface. ; The actual work is done via TMutex which is available as soon as the thread library is loaded.; and; TLockGuard; This class provides mutex resource management in a guaranteed and exception safe way. Use like this: {; TLockGuard guard(mutex);; ... // do something; }; TLockGuardDefinition TVirtualMutex.h:70; when guard goes out of scope the mutex is unlocked in the TLockGuard destructor. The exception mechanism takes care of calling the dtors of local objects so it is exception safe. ; Definition at line 32 of file TVirtualMutex.h. Public Member Functions;  TVirtualMutex (Bool_t=kFALSE);  ; virtual ~TVirtualMutex ();  ; Int_t Acquire ();  ; virtual Int_t CleanUp ()=0;  ; virtual TVirtualMutex * Factory (Bool_t=kFALSE)=0;  ; virtual TClass * IsA () const;  ; virtual Int_t Lock ()=0;  ; Int_t Release ();  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . #include <TVirtualMutex.h>. Inheritance diagram for TVirtualMutex:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TVirtualMutex(). TVirtualMutex::TVirtualMutex ; (; Bool_t ; = kFALSE). inline . Definition at line 35 of file TVirtualMutex.h. ◆ ~TVirtualMutex(). virtual TVirtualMutex::~TVirtualMutex ; (; ). inlinevirtual . Definition at line 36 of file TVirtualMutex.h. Member Function Documentat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMutex.html:69,Guid,Guide,69,doc/master/classTVirtualMutex.html,https://root.cern,https://root.cern/doc/master/classTVirtualMutex.html,1,['Guid'],['Guide']
Usability,. ROOT: TVirtualObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TVirtualObject Class ReferenceInput/Output Library. ; Wrapper around an object and giving indirect access to its content even if the object is not of a class in the Cint/Reflex dictionary. ; Definition at line 26 of file TVirtualObject.h. Public Member Functions;  TVirtualObject (TClass *cl);  ;  ~TVirtualObject ();  ; TClass * GetClass () const;  ; void * GetObject () const;  . Public Attributes; TClassRef fClass;  ; void * fObject;  . Private Member Functions;  TVirtualObject (const TVirtualObject &)=delete;  ; TVirtualObject & operator= (const TVirtualObject &)=delete;  . #include <TVirtualObject.h>; Constructor & Destructor Documentation. ◆ TVirtualObject() [1/2]. TVirtualObject::TVirtualObject ; (; const TVirtualObject & ; ). privatedelete . ◆ TVirtualObject() [2/2]. TVirtualObject::TVirtualObject ; (; TClass * ; cl). inline . Definition at line 36 of file TVirtualObject.h. ◆ ~TVirtualObject(). TVirtualObject::~TVirtualObject ; (; ). inline . Definition at line 37 of file TVirtualObject.h. Member Function Documentation. ◆ GetClass(). TClass * TVirtualObject::GetClass ; (; ); const. inline . Definition at line 40 of file TVirtualObject.h. ◆ GetObject(). void * TVirtualObject::GetObject ; (; ); const. inline . Definition at line 41 of file TVirtualObject.h. ◆ operator=(). TVirtualObject & TVirtualObject::operator= ; (; const TVirtualObject & ; ). privatedelete . Member Data Documentation. ◆ fClass. TClassRef TVirtualObject::fClass. Definition at line 33 of file TVirtualObject.h. ◆ fObject. void* TVirtualObject::fObject. Definition at line 34 of file TVirtualObject.h. Libraries for TVirtualObject:. [legend]; The documentation for this class was generated from the following file:; core/meta/inc/TVirtualObject.h. TVirtualObject. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualObject.html:70,Guid,Guide,70,doc/master/classTVirtualObject.html,https://root.cern,https://root.cern/doc/master/classTVirtualObject.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TVirtualPS Class ReferenceabstractCore ROOT classes » Base ROOT classes | Graphics » 2D Graphics » Graphics file output. ; TVirtualPS is an abstract interface to Postscript, PDF, SVG. ; TeX etc... drivers ; Definition at line 30 of file TVirtualPS.h. Public Member Functions;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2)=0;  ; virtual void CellArrayEnd ()=0;  ; virtual void CellArrayFill (Int_t r, Int_t g, Int_t b)=0;  ; virtual void Close (Option_t *opt="""")=0;  ; virtual void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2)=0;  ; virtual void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light)=0;  ; virtual void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y)=0;  ; virtual void DrawPolyMarker (Int_t n, Float_t *x, Float_t *y)=0;  ; virtual void DrawPS (Int_t n, Double_t *xw, Double_t *yw)=0;  ; virtual void DrawPS (Int_t n, Float_t *xw, Float_t *yw)=0;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; TClass * IsA () const override;  ; virtual void NewPage ()=0;  ; virtual void Open (const char *filename, Int_t type=-111)=0;  ; virtual void PrintFast (Int_t nch, const char *string="""");  Fast version of Print. ;  ; virtual void PrintRaw (Int_t len, const char *str);  Print a raw. ;  ; virtual void PrintStr (const char *string="""");  Output the string str in the output buffer. ;  ; virtual void SetColor (Float_t r, Float_t g, Float_t b)=0;  ; virtual void SetStrea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPS.html:66,Guid,Guide,66,doc/master/classTVirtualPS.html,https://root.cern,https://root.cern/doc/master/classTVirtualPS.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPacketizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualPacketizer Class ReferencePROOF » PROOF kernel Libraries. ; The packetizer is a load balancing object created for each query. ; It generates packets to be processed on PROOF worker servers. A packet is an event range (begin entry and number of entries) or object range (first object and number of objects) in a TTree (entries) or a directory (objects) in a file. Packets are generated taking into account the performance of the remote machine, the time it took to process a previous packet on the remote machine, the locality of the database files, etc.; TVirtualPacketizer includes common parts of PROOF packetizers. Look in subclasses for details. The default packetizer is TPacketizerAdaptive (TPacketizer for Proof-Lite). To use an alternative one, for instance - the TPacketizer, call: proof->SetParameter(""PROOF_Packetizer"", ""TPacketizer""); ; Definition at line 53 of file TVirtualPacketizer.h. Classes; class  TVirtualSlaveStat;  . Public Types; enum  EStatusBits { kIsInitializing = (1ULL << ( 16 )); , kIsDone = (1ULL << ( 17 )); , kIsTree = (1ULL << ( 18 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer.html:74,Guid,Guide,74,doc/master/classTVirtualPacketizer.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPacketizer::TVirtualSlaveStat Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Protected Attributes |; Friends |; List of all members ; TVirtualPacketizer::TVirtualSlaveStat Class Referenceabstract. . Definition at line 157 of file TVirtualPacketizer.h. Public Member Functions; virtual TProofProgressStatus * AddProcessed (TProofProgressStatus *st)=0;  ; Float_t GetAvgRate ();  ; Long64_t GetEntriesProcessed () const;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetOrdinal () const;  ; Double_t GetProcTime () const;  ; TProofProgressStatus * GetProgressStatus ();  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:93,Guid,Guide,93,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPad Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TVirtualPad Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; TVirtualPad is an abstract base class for the Pad and Canvas classes. ; Definition at line 50 of file TVirtualPad.h. Classes; class  TContext;  small helper class to store/restore gPad context in TPad methods More...;  . Public Member Functions;  TVirtualPad ();  VirtualPad default constructor. ;  ;  TVirtualPad (const char *name, const char *title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color=19, Short_t bordersize=4, Short_t bordermode=1);  VirtualPad constructor. ;  ; virtual ~TVirtualPad ();  VirtualPad destructor. ;  ; virtual void AbsCoordinates (Bool_t set)=0;  ; virtual Double_t AbsPixeltoX (Int_t px)=0;  ; virtual Double_t AbsPixeltoY (Int_t py)=0;  ; virtual void Add (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE)=0;  ; virtual void AddExec (const char *name, const char *command)=0;  ; virtual void AddFirst (TObject *obj, Option_t *opt="""", Bool_t modified=kTRUE)=0;  ; virtual TLegend * BuildLegend (Double_t x1=0.3, Double_t y1=0.21, Double_t x2=0.3, Double_t y2=0.21, const char *title="""", Option_t *option="""")=0;  ; virtual TVirtualPad * cd (Int_t subpadnumber=0)=0;  ; void Clear (Option_t *option="""") override=0;  ; virtual Int_t Clip (Double_t *x, Double_t *y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt)=0;  ; virtual void Close (Option_t *option="""")=0;  ; virtual void CloseToolTip (TObject *tip)=0;  ; virtual void CopyPixmap ()=0;  ; virtual void CopyPixmaps ()=0;  ; virtual TObject * CreateToolTip (const TBox *b, const char *text, Long_t delayms)=0;  ; virtual void DeleteExec (const char *name)=0;  ; virtual void DeleteToolTip (TObject *tip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:67,Guid,Guide,67,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPadPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualPadPainter Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; To make it possible to use GL for 2D graphic in a TPad/TCanvas. ; TVirtualPadPainter interface must be used instead of TVirtualX. Internally, non-GL implementation should delegate all calls to gVirtualX, GL implementation will delegate part of calls to gVirtualX, and has to implement some of the calls from the scratch. ; Definition at line 19 of file TVirtualPadPainter.h. Public Types; enum  EBoxMode { kHollow; , kFilled; };  ; enum  ETextMode { kClear; , kOpaque; };  . Public Member Functions; virtual ~TVirtualPadPainter ();  Virtual dtor. ;  ; virtual void ClearDrawable ()=0;  ; virtual void CopyDrawable (Int_t device, Int_t px, Int_t py)=0;  ; virtual Int_t CreateDrawable (UInt_t w, UInt_t h)=0;  ; virtual void DestroyDrawable (Int_t device)=0;  ; virtual void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode)=0;  ; virtual void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y)=0;  ; virtual void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2)=0;  ; virtual void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2)=0;  ; virtual void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending)=0;  ; virtual void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y)=0;  ; virtual void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v)=0;  ; virtual void DrawPolyMarker (Int_t n, const Double_t *x, const Double_t *y)=0;  ; virtual void DrawPolyMark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPadPainter.html:74,Guid,Guide,74,doc/master/classTVirtualPadPainter.html,https://root.cern,https://root.cern/doc/master/classTVirtualPadPainter.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualPerfStats Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Friends |; List of all members ; TVirtualPerfStats Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Provides the interface for the PROOF internal performance measurement and event tracing. ; Definition at line 32 of file TVirtualPerfStats.h. Public Types; enum  EEventType { ;   kUnDefined; , kPacket; , kStart; , kStop; , ;   kFile; , kFileOpen; , kFileRead; , kRate; , ;   kNumEventType. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions; virtual ~TVirtualPerfStats ();  ; virtual void FileEvent (const char *slave, const char *slavename, const char *nodename, const char *filename, Bool_t isStart)=0;  ; virtual void FileOpenEvent (TFile *file, const char *filename, Double_t start)=0;  ; virtual void FileReadEvent (TFile *file, Int_t len, Double_t start)=0;  ; virtual Long64_t GetBytesRead () const =0;  ; virtual Long64_t GetNumEvents () const =0;  ; TClass * IsA () const override;  ; virtual void PacketEvent (const char *slave, const char *slavename, const char *filename, Long64_t eventsprocessed, Double_t latency, Double_t proctime, Double_t cputime, Long64_t bytesRead)=0;  ; virtual void PrintBasketIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPerfStats.html:73,Guid,Guide,73,doc/master/classTVirtualPerfStats.html,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualProofPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualProofPlayer Class ReferenceabstractPROOF » PROOF kernel Libraries. ; Abstract interface for the PROOF player. ; See the concrete implementations under 'proofplayer' for details. ; Definition at line 43 of file TVirtualProofPlayer.h. Public Types; enum  EExitStatus { kFinished; , kStopped; , kAborted; };  ; enum  EStatusBits { kIsSubmerger = (1ULL << ( 14 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualProofPlayer ();  ;  ~TVirtualProofPlayer () override;  ; virtual void AddEventsProcessed (Long64_t ev)=0;  ; virtual void AddInput (TObject *inp)=0;  ; virtual void AddOutput (TList *out)=0;  ; virtual Int_t AddOutputObject (TObject *obj)=0;  ; virtual void AddQueryResult (TQueryResult *q)=0;  ; virtual void ClearInput ()=0;  ; virtual TDrawFeedback * CreateDrawFeedback (TProof *p)=0;  ; virtual void DeleteDrawFeedback (TDrawFeedback *f)=0;  ; virtual Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0)=0;  ; virtual void Feedback (TList *objs)=0;  ; virtual Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualProofPlayer.html:75,Guid,Guide,75,doc/master/classTVirtualProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualProofPlayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualRefProxy Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TVirtualRefProxy Class Referenceabstract. . Definition at line 81 of file TVirtualRefProxy.h. Public Member Functions; virtual ~TVirtualRefProxy ();  ; virtual TVirtualRefProxy * Clone () const =0;  ; virtual TClass * GetClass () const =0;  ; virtual Int_t GetCounterValue (TFormLeafInfoReference *info, void *data)=0;  ; virtual void * GetObject (TFormLeafInfoReference *info, void *data, int instance)=0;  ; virtual void * GetPreparedReference (void *data)=0;  ; virtual TClass * GetValueClass (void *data) const =0;  ; virtual Bool_t HasCounter () const =0;  ; virtual void Release ()=0;  ; virtual void SetClass (TClass *classptr)=0;  ; virtual Bool_t Update ()=0;  . #include <TVirtualRefProxy.h>. Inheritance diagram for TVirtualRefProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TVirtualRefProxy(). virtual TVirtualRefProxy::~TVirtualRefProxy ; (; ). inlinevirtual . Definition at line 84 of file TVirtualRefProxy.h. Member Function Documentation. ◆ Clone(). virtual TVirtualRefProxy * TVirtualRefProxy::Clone ; (; ); const. pure virtual . Implemented in TRefArrayProxy, and TRefProxy. ◆ GetClass(). virtual TClass * TVirtualRefProxy::GetClass ; (; ); const. pure virtual . Implemented in TRefProxy. ◆ GetCounterValue(). virtual Int_t TVirtualRefProxy::GetCounterValue ; (; TFormLeafInfoReference * ; info, . void * ; data . ). pure virtual . Implemented in TRefProxy, and TRefArrayProxy. ◆ GetObject(). virtual void * TVirtualRefProxy::GetObject ; (; TFormLeafInfoReference * ; info, . void * ; data, . int ; instance . ). pure virtual . Implemented in TRefProxy, and TRefArrayProxy. ◆ GetPreparedReference(). virtual void * TVirtualRefProxy::GetPreparedReference ; (; void * ; data). pure virtual .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualRefProxy.html:72,Guid,Guide,72,doc/master/classTVirtualRefProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualRefProxy.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualStreamerInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; List of all members ; TVirtualStreamerInfo Class Referenceabstract. ; Abstract Interface class describing Streamer information for one class. ; Definition at line 44 of file TVirtualStreamerInfo.h. Public Types; enum  EReadWrite { ;   kBase = 0; , kOffsetL = 20; , kOffsetP = 40; , kCounter = 6; , ;   kCharStar = 7; , kChar = 1; , kShort = 2; , kInt = 3; , ;   kLong = 4; , kFloat = 5; , kDouble = 8; , kDouble32 = 9; , ;   kLegacyChar = 10; , kUChar = 11; , kUShort = 12; , kUInt = 13; , ;   kULong = 14; , kBits = 15; , kLong64 = 16; , kULong64 = 17; , ;   kBool = 18; , kFloat16 = 19; , kObject = 61; , kAny = 62; , ;   kObjectp = 63; , kObjectP = 64; , kTString = 65; , kTObject = 66; , ;   kTNamed = 67; , kAnyp = 68; , kAnyP = 69; , kAnyPnoVT = 70; , ;   kSTLp = 71; , kSkip = 100; , kSkipL = 120; , kSkipP = 140; , ;   kConv = 200; , kConvL = 220; , kConvP = 240; , kSTL = ROOT::kSTLany; , ;   kSTLstring = ROOT::kSTLstring; , kStreamer = 500; , kStreamLoop = 501; , kCache = 600; , ;   kArtificial = 1000; , kCacheNew = 1001; , kCacheDelete = 1002; , kNeedObjectForVirtualBaseClass = 99997; , ;   kMissing = 99999; , kNoType = -1; , kUnsupportedConversion = -2; , kUnset = -3. };  EReadWrite Enumerator. More...;  ; enum  EStatusBits { ;   kCannotOptimize = (1ULL << ( 12 )); , kIgnoreTObjectStreamer = (1ULL << ( 13 )); , kRecovered = (1ULL << ( 14 )); , kNeedCheck = (1ULL << ( 15 )); , ;   kIsCompiled = (1ULL << ( 16 )); , kBuildOldUsed = (1ULL << ( 17 )); , kBuildRunning = (1ULL << ( 18 )). };  ; enum class  EStatusBitsDupExceptions { kIgnoreTObjectStreamer = TVirtualStreamerInfo::kIgnoreTObjectStreamer; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualStreamerInfo.html:76,Guid,Guide,76,doc/master/classTVirtualStreamerInfo.html,https://root.cern,https://root.cern/doc/master/classTVirtualStreamerInfo.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualTreePlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Static Private Attributes |; List of all members ; TVirtualTreePlayer Class ReferenceabstractTree Library. ; Abstract base class defining the interface for the plugins that implement Draw, Scan, Process, MakeProxy, etc. ; for a TTree object. See the individual documentations in TTree. ; Definition at line 38 of file TVirtualTreePlayer.h. Public Member Functions;  TVirtualTreePlayer ();  ;  ~TVirtualTreePlayer () override;  Common destructor. ;  ; virtual TVirtualIndex * BuildIndex (const TTree *T, const char *majorname, const char *minorname)=0;  ; virtual TTree * CopyTree (const char *selection, Option_t *option="""", Long64_t nentries=kMaxEntries, Long64_t firstentry=0)=0;  ; virtual Long64_t DrawScript (const char *wrapperPrefix, const char *macrofilename, const char *cutfilename, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Long64_t DrawSelect (const char *varexp, const char *selection, Option_t *option, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t Fit (const char *formula, const char *varexp, const char *selection, Option_t *option, Option_t *goption, Long64_t nentries, Long64_t firstentry)=0;  ; virtual Int_t GetDimension () const =0;  ; virtual Long64_t GetEntries (const char *)=0;  ; virtual TH1 * GetHistogram () const =0;  ; virtual Int_t GetNfill () const =0;  ; virtual TTreeFormula * GetSelect () const =0;  ; virtual Long64_t GetSelectedRows () const =0;  ; virtual TSelector * GetSelector () const =0;  ; virtual TSelector * GetSelectorFromFile () const =0;  ; virtual Double_t * GetV1 () const =0;  ; virtual Double_t * GetV2 () const =0;  ; virtual Double_t * GetV3 () const =0;  ; virtual Double_t * GetV4 () const =0;  ; virtual Double_t * GetVal (Int_t) const =0;  ; virtual TTreeFormu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualTreePlayer.html:74,Guid,Guide,74,doc/master/classTVirtualTreePlayer.html,https://root.cern,https://root.cern/doc/master/classTVirtualTreePlayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualViewer3D Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TVirtualViewer3D Class ReferenceabstractCore ROOT classes » Base ROOT classes. ; Abstract 3D shapes viewer. ; The concrete implementations are:. TViewerX3D : X3d viewer; TGLViewer : OpenGL viewer. 3D Viewer Infrastructure Overview; The 3D Viewer infrastructure consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to test preferences, add objects, control the viewer via scripting (to be added) etc. -TBuffer3D class hierarchy: Used to describe 3D objects (""shapes""); filled /added by negotiation with viewer via TVirtualViewer3D. Together these allow clients to publish objects to any one of the 3D viewers (currently OpenGL/x3d,TPad), free of viewer specific drawing code. They allow our simple x3d viewer, and considerably more sophisticated OpenGL one to both work with both geometry libraries (g3d and geom) efficiently.; Publishing to a viewer consists of the following steps:. Create / obtain viewer handle; Begin scene on viewer; Fill mandatory parts of TBuffer3D describing object; Add to viewer; Fill optional parts of TBuffer3D if requested by viewer, and add again ... repeat 3/4/5 as required; End scene on viewer. Creating / Obtaining Viewer; Create/obtain the viewer handle via local/global pad - the viewer is always bound to a TPad object at present [This may be removed as a restriction in the future] . You should perform the publishing to the viewer described below in the Paint() method of the object you attach to the pad (via Draw()) TVirtualViewer3D * v = gPad->GetViewer3D(""xxxx"");; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; v@ vDefinition rootcling_impl.cxx:3699; "" xxxx"" is viewer type: OpenGL ""ogl"", X3D ""x3d"" or Pad ""pad"" (d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:72,Guid,Guide,72,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['Guid'],['Guide']
Usability,". ROOT: TVirtualX Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TVirtualX Class ReferenceGraphics » Graphics' Backends | Core ROOT classes » Base ROOT classes. ; Semi-Abstract base class defining a generic interface to the underlying, low level, native graphics backend (X11, Win32, MacOS, OpenGL...). ; An instance of TVirtualX itself defines a batch interface to the graphics system. ; Definition at line 46 of file TVirtualX.h. Public Types; enum  EBoxMode { kHollow; , kFilled; };  ; enum  EDrawMode { kCopy = 1; , kXor; , kInvert; };  ; enum  ETextMode { kClear; , kOpaque; };  ; enum  ETextSetMode { kCheck; , kLoad; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TVirtualX ();  ;  TVirtualX (const char *name, const char *title);  Ctor of ABC. ;  ; virtual ~TVirtualX ();  ; virtual Int_t AddPixmap (ULongptr_t pixid, UInt_t w, UInt_t h);  Registers a pixmap created by TGLManager as a ROOT pixmap. ;  ; virtual Int_t AddWindow (ULongptr_t qwid, UInt_t w, UInt_t h);  Registers a window created by Qt as a ROOT window. ;  ; virtual Bool_t AllocColor (Colormap_t cmap, ColorStruct_t &color);  Allocates a read-only colormap entry corresponding to the closest RGB value suppo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:65,Guid,Guide,65,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebCanvas Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Friends |; List of all members ; TWebCanvas Class ReferenceWeb Display » ROOT 6 Web Display | Web Widgets. ; Basic TCanvasImp ABI implementation for Web-based Graphics Provides painting of main ROOT classes in web browsers using JSROOT ; Following settings parameters can be useful for TWebCanvas: WebGui.FullCanvas: 1 read-only mode (0), full-functional canvas (1) (default - 1); WebGui.StyleDelivery: 1 provide gStyle object to JSROOT client (default - 1); WebGui.PaletteDelivery: 1 provide color palette to JSROOT client (default - 1); WebGui.TF1UseSave: 1 used saved values for function drawing: 0 - off, 1 - if client fail to evaluate function, 2 - always (default - 1); TWebCanvas is used by default in interactive ROOT session. To use web-based canvas in batch mode for image generation, one should explicitly specify --web option when starting ROOT: [shell] root -b --web tutorials/hsimple.root -e 'hpxpy->Draw(""colz""); c1->SaveAs(""image.png"");'; If for any reasons TWebCanvas does not provide required functionality, one always can disable it. Either by specifying root --web=off when starting ROOT or by setting Canvas.Name: TRootCanvas in rootrc file. ; Definition at line 35 of file TWebCanvas.h. Classes; struct  PadStatus;  ; struct  WebConn;  . Public Types; using ObjectSelectSignal_t = std::function< void(TPad *, TObject *)>;  Function type for signals, invoked when object is selected. ;  ; using PadClickedSignal_t = std::function< void(TPad *, int, int)>;  Function type for pad-click signals. ;  ; using PadSignal_t = std::function< void(TPad *)>;  Function type for pad-related signals - like activate pad sig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:66,Guid,Guide,66,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,1,['Guid'],['Guide']
Usability,. ROOT: TWebCanvas tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; TWebCanvas tutorialsTutorials. ; Examples showing the special features of web-based canvas. . Files; file  fonts_ttf.cxx;   Usage of TTF fonts in web canvas. ;  ; file  haxis.cxx;   Swap X/Y axes drawing and use to draw TH1 as bar and as markers. ;  ; file  inframe.cxx;   Drawing primitives inside and outside of the frame. ;  ; file  latex_url.cxx;   Use of interactive URL links inside TLatex. ;  ; file  logN.cxx;   Logarithmic scales support in web canvas. ;  ; file  triangle.cxx;  User class with custom JavaScript painter in the web canvas. ;  ; file  twoscales.cxx;   Two fully interactive scales in web canvas. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__webcanv.html:60,Guid,Guide,60,doc/master/group__tutorial__webcanv.html,https://root.cern,https://root.cern/doc/master/group__tutorial__webcanv.html,2,['Guid'],['Guide']
Usability,". ROOT: TWebCanvasTimer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TWebCanvasTimer Class Reference. . Definition at line 67 of file TWebCanvas.cxx. Public Member Functions;  TWebCanvasTimer (TWebCanvas &canv);  ; Bool_t IsSlow () const;  ; void SetSlow (Bool_t slow=kTRUE);  ; void Timeout () override;  used to send control messages to clients ;  ;  Public Member Functions inherited from TTimer;  TTimer (const char *command, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (Long_t milliSec=0, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ;  TTimer (TObject *obj, Long_t milliSec, Bool_t mode=kTRUE);  Create timer that times out in ms milliseconds. ;  ; virtual ~TTimer ();  ; void Add () override;  ; Bool_t CheckTimer (const TTime &now);  Check if timer timed out. ;  ; TTime GetAbsTime () const;  ; const char * GetCommand () const;  ; TObject * GetObject ();  ; TTime GetTime () const;  ; UInt_t GetTimerID ();  ; Bool_t HasTimedOut () const;  ; TClass * IsA () const override;  ; Bool_t IsAsync () const;  ; Bool_t IsInterruptingSyscalls () const;  ; Bool_t IsRunning ();  This function checks if the timer is running within gSystem (Has been started and did not finish yet). ;  ; Bool_t IsSync () const;  ; Bool_t Notify () override;  Notify when timer times out. ;  ; void Remove () override;  ; void Reset ();  Reset the timer. ;  ; void SetCommand (const char *command);  Set the interpreter command to be executed at time out. ;  ; void SetInterruptSyscalls (Bool_t set=kTRUE);  When the argument is true the a-synchronous timer (SIGALRM) signal handler is set so that interrupted syscalls will not be restarted by the kernel. ;  ; void SetObject (TObject *object);  Set the object to be notified at time out. ;  ; void SetTime (Long_t milliSec);  ; void SetTim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvasTimer.html:71,Guid,Guide,71,doc/master/classTWebCanvasTimer.html,https://root.cern,https://root.cern/doc/master/classTWebCanvasTimer.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TWebFile Class Reference. . Definition at line 33 of file TWebFile.h. Public Member Functions;  TWebFile (const char *url, Option_t *opt="""");  Create a Web file object. ;  ;  TWebFile (TUrl url, Option_t *opt="""");  Create a Web file object. ;  ; virtual ~TWebFile ();  Cleanup. ;  ; void Close (Option_t *option="""") override;  Close a Web file. ;  ; Long64_t GetSize () const override;  Return maximum file size. ;  ; TClass * IsA () const override;  ; Bool_t IsOpen () const override;  A TWebFile that has been correctly constructed is always considered open. ;  ; Bool_t ReadBuffer (char *buf, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read specified byte range from remote file via HTTP daemon. ;  ; Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf) override;  Read specified byte ranges from remote file via HTTP daemon. ;  ; Int_t ReOpen (Option_t *mode) override;  Reopen a file with a different access mode, like from READ to UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. ;  ; void Seek (Long64_t offset, ERelativeTo pos=kBeg) override;  Set position from where to start reading. ;  ; void Streamer (TBuffer &) override;  Stream a TFile object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Opens or creates a local ROOT file. ;  ;  ~TFile () overri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebFile.html:64,Guid,Guide,64,doc/master/classTWebFile.html,https://root.cern,https://root.cern/doc/master/classTWebFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebPS Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; List of all members ; TWebPS Class ReferenceWeb Display » ROOT 6 Web Display. . Definition at line 21 of file TWebPS.h. Public Member Functions;  TWebPS ();  ; void CellArrayBegin (Int_t, Int_t, Double_t, Double_t, Double_t, Double_t) override;  not yet implemented ;  ; void CellArrayEnd () override;  ; void CellArrayFill (Int_t, Int_t, Int_t) override;  ; void Close (Option_t *="""") override;  ; void CreatePainting ();  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  ; void DrawFrame (Double_t, Double_t, Double_t, Double_t, Int_t, Int_t, Int_t, Int_t) override;  ; void DrawPolyMarker (Int_t n, Double_t *x, Double_t *y) override;  ; void DrawPolyMarker (Int_t n, Float_t *x, Float_t *y) override;  ; void DrawPS (Int_t n, Double_t *xw, Double_t *yw) override;  ; void DrawPS (Int_t n, Float_t *xw, Float_t *yw) override;  ; TWebPainting * GetPainting ();  ; TClass * IsA () const override;  ; Bool_t IsEmptyPainting () const;  ; void NewPage () override;  ; void Open (const char *, Int_t=-111) override;  ; void SetColor (Float_t, Float_t, Float_t) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TWebPainting * TakePainting ();  ; void Text (Double_t x, Double_t y, const char *str) override;  ; void Text (Double_t x, Double_t y, const wchar_t *str) override;  ;  Public Member Functions inherited from TVirtualPS;  TVirtualPS ();  VirtualPS default constructor. ;  ;  TVirtualPS (const char *filename, Int_t type=-111);  VirtualPS constructor. ;  ; virtual ~TVirtualPS ();  VirtualPS destructor. ;  ; virtual void * GetStream () const;  ; virtual Int_t GetType () const;  ; virtual void P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPS.html:62,Guid,Guide,62,doc/master/classTWebPS.html,https://root.cern,https://root.cern/doc/master/classTWebPS.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebPadPainter Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Friends |; List of all members ; TWebPadPainter Class ReferenceWeb Display » ROOT 6 Web Display. ; Implement TVirtualPadPainter which abstracts painting operations. ; TWebPadPainter tries to support old Paint methods of the ROOT classes. Main classes (like histograms or graphs) should be painted on JavaScript side ; Definition at line 26 of file TWebPadPainter.h. Public Member Functions;  TWebPadPainter ();  ; void ClearDrawable () override;  ; void CopyDrawable (Int_t, Int_t, Int_t) override;  ; Int_t CreateDrawable (UInt_t, UInt_t) override;  ; void DestroyDrawable (Int_t) override;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode) override;  Paint a simple box. ;  ; void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y) override;  Paint filled area. ;  ; void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y) override;  Paint filled area. ;  ; void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint a simple line. ;  ; void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint a simple line in normalized coordinates. ;  ; void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending) override;  Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ;  ; void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y) override;  Paint Polyline. ;  ; void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polyline. ;  ; void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v) override;  Paint polyline in normalized coordinates. ;  ; void DrawPolyMarker (I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:70,Guid,Guide,70,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,3,"['Clear', 'Guid', 'simpl']","['ClearDrawable', 'Guide', 'simple']"
Usability,". ROOT: TWebPainting Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TWebPainting Class ReferenceWeb Display » ROOT 6 Web Display. ; Object used to store paint operations and deliver them to JSROOT. ; Definition at line 25 of file TWebPainting.h. Public Member Functions;  TWebPainting ();  Constructor. ;  ;  ~TWebPainting () override=default;  ; void AddColor (Int_t indx, TColor *col);  Add custom color to operations. ;  ; void AddFillAttr (const TAttFill &attr);  Store fill attributes If attributes were not changed - ignore operation. ;  ; void AddLineAttr (const TAttLine &attr);  Store line attributes If attributes were not changed - ignore operation. ;  ; void AddMarkerAttr (const TAttMarker &attr);  Store marker attributes If attributes were not changed - ignore operation. ;  ; void AddOper (const std::string &oper);  Add next custom operator to painting Operations are separated by semicolons Following operations are supported: t - text h - text coded into simple hex r - rectangle b - rectangular fill region l - polyline f - poly fill region m - poly marker z - line attributes y - fill attributes x - marker attributes o - text attributes After operation code optional arguments can be append like length of operation or coded text Each operation may use data from binary float buffer. ;  ; void AddTextAttr (const TAttText &attr);  Store text attributes If attributes were not changed - ignore operation. ;  ; void FixSize ();  ; TClass * IsA () const override;  ; Bool_t IsEmpty () const;  ; Float_t * Reserve (Int_t sz);  Reserve place in the float buffer Returns pointer on first element in reserved area. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPainting.html:68,Guid,Guide,68,doc/master/classTWebPainting.html,https://root.cern,https://root.cern/doc/master/classTWebPainting.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebSnapshot Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TWebSnapshot Class ReferenceWeb Display » ROOT 6 Web Display. ; Paint state of object to transfer to JavaScript side. ; Definition at line 20 of file TWebSnapshot.h. Public Types; enum  { ;   kNone = 0; , kObject = 1; , kSVG = 2; , kSubPad = 3; , ;   kColors = 4; , kStyle = 5; , kFont = 6. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  ~TWebSnapshot () override;  destructor ;  ; Int_t GetKind () const;  ; const char * GetObjectID () const;  ; TObject * GetSnapshot () const;  ; TClass * IsA () const override;  ; void SetObjectID (const std::string &id);  ; void SetObjectIDAsPtr (void *ptr, const std::string &suffix="""");  Use pointer to assign object id - TString::Hash. ;  ; void SetOption (const std::string &opt);  ; void SetSnapshot (Int_t kind, TObject *snapshot, Bool_t owner=kFALSE);  SetUse pointer to assign object id - TString::Hash. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSnapshot.html:68,Guid,Guide,68,doc/master/classTWebSnapshot.html,https://root.cern,https://root.cern/doc/master/classTWebSnapshot.html,1,['Guid'],['Guide']
Usability,". ROOT: TWebSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TWebSystem Class Reference. . Definition at line 99 of file TWebFile.h. Public Member Functions;  TWebSystem ();  Create helper class that allows directory access via httpd. ;  ; virtual ~TWebSystem ();  ; Bool_t AccessPathName (const char *path, EAccessMode mode) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void FreeDirectory (void *dirp) override;  Free directory via httpd. ;  ; const char * GetDirEntry (void *dirp) override;  Get directory entry via httpd. Returns 0 in case no more entries. ;  ; Int_t GetPathInfo (const char *path, FileStat_t &buf) override;  Get info about a file. ;  ; TClass * IsA () const override;  ; Int_t MakeDirectory (const char *name) override;  Make a directory via httpd. Not supported. ;  ; void * OpenDirectory (const char *name) override;  Open a directory via httpd. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Unlink (const char *path) override;  Unlink, i.e. ;  ;  Public Member Functions inherited from TSystem;  TSystem (const char *name=""Generic"", const char *title=""Generic System"");  Create a new OS interface. ;  ; virtual ~TSystem ();  Delete the OS interface. ;  ; virtual void Abort (int code=0);  Abort the application. ;  ; virtual int AcceptConnection (int sock);  Accept a connection. ;  ; virtual void AddDynamicPath (const char *pathname);  Add a new directory to the dynamic path. ;  ; virtual void AddFileHandler (TFileHandler *fh);  Add a file handler to the list of system file handlers. ;  ; virtual void AddIncludePath (const char *includePath);  Add a directory to the already set include path. ;  ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebSystem.html:66,Guid,Guide,66,doc/master/classTWebSystem.html,https://root.cern,https://root.cern/doc/master/classTWebSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TWin32Condition Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TWin32Condition Class Reference. . Definition at line 55 of file TWin32Condition.h. Public Member Functions;  TWin32Condition (TMutexImp *m);  Create Condition variable. ;  ; virtual ~TWin32Condition ();  TCondition dtor. ;  ; Int_t Broadcast () override;  Broadcast is like signal but wakes all threads which have called Wait(). ;  ; TClass * IsA () const override;  ; Int_t Signal () override;  If one or more threads have called Wait(), Signal() wakes up at least one of them, possibly more. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TimedWait (ULong_t secs, ULong_t nanoSecs=0) override;  TimedWait() is given an absolute time to wait until. ;  ; Int_t Wait () override;  Wait for the condition variable to be signalled. ;  ;  Public Member Functions inherited from TConditionImp;  TConditionImp ();  ; virtual ~TConditionImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Condition.html:71,Guid,Guide,71,doc/master/classTWin32Condition.html,https://root.cern,https://root.cern/doc/master/classTWin32Condition.html,1,['Guid'],['Guide']
Usability,". ROOT: TWin32Mutex Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; Friends |; List of all members ; TWin32Mutex Class Reference. . Definition at line 28 of file TWin32Mutex.h. Public Member Functions;  TWin32Mutex (Bool_t recursive=kFALSE);  Create a Win32 mutex lock. ;  ; virtual ~TWin32Mutex ();  TMutex dtor. ;  ; TClass * IsA () const override;  ; Int_t Lock () override;  Lock the mutex. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t TryLock () override;  Try locking the mutex. Returns 0 if mutex can be locked. ;  ; Int_t UnLock () override;  Unlock the mutex. ;  ;  Public Member Functions inherited from TMutexImp;  TMutexImp ();  ; virtual ~TMutexImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Mutex.html:67,Guid,Guide,67,doc/master/classTWin32Mutex.html,https://root.cern,https://root.cern/doc/master/classTWin32Mutex.html,1,['Guid'],['Guide']
Usability,". ROOT: TWin32Thread Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TWin32Thread Class Reference. . Definition at line 30 of file TWin32Thread.h. Public Member Functions;  TWin32Thread ();  ;  ~TWin32Thread ();  ; Int_t CancelPoint () override;  ; Int_t CleanUp (void **main) override;  ; Int_t CleanUpPop (void **main, Int_t exe) override;  ; Int_t CleanUpPush (void **main, void *free, void *arg) override;  ; Int_t Exit (void *ret) override;  Exit the thread. ;  ; TClass * IsA () const override;  ; Int_t Join (TThread *th, void **ret) override;  Wait for specified thread execution (if any) to complete (like pthread_join). ;  ; Int_t Kill (TThread *th) override;  This is a somewhat dangerous function; it's not suggested to Stop() threads a lot. ;  ; Int_t Run (TThread *th, const int affinity=-1) override;  Win32 threads – spawn new thread (like pthread_create). ;  ; Long_t SelfId () override;  Return the current thread's ID. ;  ; Int_t SetCancelAsynchronous () override;  ; Int_t SetCancelDeferred () override;  ; Int_t SetCancelOff () override;  ; Int_t SetCancelOn () override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadImp;  TThreadImp ();  ; virtual ~TThreadImp ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32Thread.html:68,Guid,Guide,68,doc/master/classTWin32Thread.html,https://root.cern,https://root.cern/doc/master/classTWin32Thread.html,1,['Guid'],['Guide']
Usability,". ROOT: TWin32ThreadFactory Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TWin32ThreadFactory Class Reference. . Definition at line 31 of file TWin32ThreadFactory.h. Public Member Functions;  TWin32ThreadFactory (const char *name=""Win32"", const char *title=""Win32 Thread Factory"");  Create Win32 thread factory. Also sets global gThreadFactory to this. ;  ; virtual ~TWin32ThreadFactory ();  ; TConditionImp * CreateConditionImp (TMutexImp *m) override;  Return a Win32 condition variable. ;  ; TMutexImp * CreateMutexImp (Bool_t recursive) override;  Return a Win32 Mutex. ;  ; TThreadImp * CreateThreadImp () override;  Return a Win32 thread. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TThreadFactory;  TThreadFactory (const char *name=""Unknown"", const char *title=""Unknown Thread Factory"");  TThreadFactory ctor only called by derived classes. ;  ; virtual ~TThreadFactory ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32ThreadFactory.html:75,Guid,Guide,75,doc/master/classTWin32ThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html,1,['Guid'],['Guide']
Usability,". ROOT: TWinNTSystem Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Protected Member Functions |; Private Member Functions |; Static Private Member Functions |; Private Attributes |; List of all members ; TWinNTSystem Class Reference. . Definition at line 58 of file TWinNTSystem.h. Public Types; typedef Bool_t(* ThreadMsgFunc_t) (MSG *);  ;  Public Types inherited from TSystem; enum  EAclicMode { kDefault; , kDebug; , kOpt; };  ; enum  EAclicProperties { kFlatBuildDir = (1ULL << ( 0 )); };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TWinNTSystem ();  ctor ;  ; virtual ~TWinNTSystem ();  dtor ;  ; void Abort (int code=0) override;  Abort the application. ;  ; int AcceptConnection (int sock) override;  Accept a connection. ;  ; Bool_t AccessPathName (const char *path, EAccessMode mode=kFileExists) override;  Returns FALSE if one can access a file using the specified access mode. ;  ; void AddDynamicPath (const char *dir) override;  Add a new directory to the dynamic path. ;  ; void AddFileHandler (TFileHandler *fh) override;  Add a file handler to the list of system file handlers. ;  ; void AddSignalHandler (TSignalHandler *sh) override;  Add a signal handler to list of system signal handlers. ;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWinNTSystem.html:68,Guid,Guide,68,doc/master/classTWinNTSystem.html,https://root.cern,https://root.cern/doc/master/classTWinNTSystem.html,1,['Guid'],['Guide']
Usability,". ROOT: TX11GLManager Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TX11GLManager Class ReferenceGraphics » 3D Graphics » OpenGL rendering. ; The TX11GLManager is X11 implementation of TGLManager. ; Definition at line 34 of file TX11GL.h. Classes; struct  TGLContext_t;  ; class  TX11GLImpl;  . Public Member Functions;  TX11GLManager ();  Constructor. ;  ;  ~TX11GLManager () override;  Destructor. ;  ; Bool_t AttachOffScreenDevice (Int_t ctxInd, Int_t x, Int_t y, UInt_t w, UInt_t h) override;  Attach off screen device. ;  ; Int_t CreateGLContext (Int_t winInd) override;  Context creation requires Display * and XVisualInfo (was saved for such winInd). ;  ; void DeleteGLContext (Int_t devInd) override;  Deletes GLX context and frees pixmap and image (if any). ;  ; void ExtractViewport (Int_t devInd, Int_t *vp) override;  Returns the current dimensions of a GL pixmap. ;  ; void Flush (Int_t ctxInd) override;  Swaps buffers or copy pixmap. ;  ; char * GetPlotInfo (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  Analog of TObject::GetObjectInfo. ;  ; Int_t GetVirtualXInd (Int_t devInd) override;  Returns an index suitable for gVirtualX. ;  ; Bool_t HighColorFormat (Int_t) override;  ; Int_t InitGLWindow (Window_t winID) override;  Try to find correct visual. ;  ; TClass * IsA () const override;  ; Bool_t MakeCurrent (Int_t devInd) override;  Make GL context current. ;  ; void MarkForDirectCopy (Int_t devInd, Bool_t) override;  Selection-rotation support for TPad/TCanvas. ;  ; void PaintSingleObject (TVirtualGLPainter *) override;  Paint a single object. ;  ; void PanObject (TVirtualGLPainter *o, Int_t x, Int_t y) override;  Pan objects. ;  ; Bool_t PlotSelected (TVirtualGLPainter *plot, Int_t px, Int_t py) override;  Analog of TObject::DistancetoPrim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTX11GLManager.html:69,Guid,Guide,69,doc/master/classTX11GLManager.html,https://root.cern,https://root.cern/doc/master/classTX11GLManager.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLAttr Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLAttr Class ReferenceInput/Output Library. ; TXMLAttribute is the attribute of an Element. ; It contains the name and the value of the attribute. ; Definition at line 18 of file TXMLAttr.h. Public Member Functions;  TXMLAttr (const char *key, const char *value);  ;  ~TXMLAttr () override;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetValue () const;  ; TClass * IsA () const override;  ; const char * Key () const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLAttr.html:64,Guid,Guide,64,doc/master/classTXMLAttr.html,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLDocument Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLDocument Class ReferenceInput/Output Library. ; TXMLDocument contains a pointer to an xmlDoc structure, after the parser returns a tree built during the document analysis. ; Definition at line 21 of file TXMLDocument.h. Public Member Functions;  TXMLDocument (_xmlDoc *doc);  TXMLDocument constructor. ;  ;  ~TXMLDocument () override;  TXMLDocument destructor. ;  ; const char * Encoding () const;  Returns external initial encoding, if any or 0 in case there is no document set. ;  ; TXMLNode * GetRootNode () const;  Returns the root element node. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const char * URL () const;  Returns the URI for the document or 0 in case there is no document set. ;  ; const char * Version () const;  Returns the XML version string or 0 in case there is no document set. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to whi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLDocument.html:68,Guid,Guide,68,doc/master/classTXMLDocument.html,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLEngine Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TXMLEngine Class Reference. . Definition at line 26 of file TXMLEngine.h. Public Member Functions;  TXMLEngine ();  if true, do not create comments nodes in document during parsing ;  ;  ~TXMLEngine () override;  destructor for TXMLEngine object ;  ; void AddChild (XMLNodePointer_t parent, XMLNodePointer_t child);  add child element to xmlnode ;  ; void AddChildAfter (XMLNodePointer_t parent, XMLNodePointer_t child, XMLNodePointer_t afternode);  Insert new child node after already existing node. ;  ; void AddChildFirst (XMLNodePointer_t parent, XMLNodePointer_t child);  add node as first child ;  ; Bool_t AddComment (XMLNodePointer_t parent, const char *comment);  Adds comment line to the node. ;  ; Bool_t AddDocComment (XMLDocPointer_t xmldoc, const char *comment);  add comment line to the top of the document ;  ; Bool_t AddDocRawLine (XMLDocPointer_t xmldoc, const char *line);  Add just line on the top of xml document Line should has correct xml syntax that later it can be decoded by xml parser. ;  ; Bool_t AddDocStyleSheet (XMLDocPointer_t xmldoc, const char *href, const char *type=""text/css"", const char *title=nullptr, int alternate=-1, const char *media=nullptr, const char *charset=nullptr);  Add style sheet definition on the top of document. ;  ; void AddNodeContent (XMLNodePointer_t xmlnode, const char *content, Int_t len=0);  add new content of the xmlnode old content will be preserved, one could mix content with child nodes ;  ; Bool_t AddRawLine (XMLNodePointer_t parent, const char *line);  Add just line into xml file Line should has correct xml syntax that later it can be decoded by xml parser For instance, it can be comment or processing instructions. ;  ; Bool_t AddStyleSheet (XMLNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEngine.html:66,Guid,Guide,66,doc/master/classTXMLEngine.html,https://root.cern,https://root.cern/doc/master/classTXMLEngine.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLEntity Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Attributes |; List of all members ; TXMLEntity Class Reference. . Definition at line 162 of file TXMLEngine.cxx. Public Member Functions;  TXMLEntity ();  is system (file) ;  ;  TXMLEntity (const TString &name, const TString &value, Bool_t sys);  ; Bool_t IsSystem () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLEntity.html:66,Guid,Guide,66,doc/master/classTXMLEntity.html,https://root.cern,https://root.cern/doc/master/classTXMLEntity.html,2,"['Clear', 'Guid']","['Clear', 'Guide']"
Usability,". ROOT: TXMLFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXMLFile Class Referencefinal. . Definition at line 25 of file TXMLFile.h. Public Member Functions;  TXMLFile ();  ;  TXMLFile (const char *filename, Option_t *option=""read"", const char *title=""title"", Int_t compression=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Open or creates local XML file with name filename. ;  ;  ~TXMLFile () override;  destructor of TXMLFile object ;  ; Bool_t AddXmlComment (const char *comment);  Add comment line on the top of the xml document This line can only be seen in xml editor and cannot be accessed later with TXMLFile methods. ;  ; Bool_t AddXmlLine (const char *line);  Add just one line on the top of xml document For instance, line can contain special xml processing instructions Line should has correct xml syntax that later it can be decoded by xml parser To be parsed later by TXMLFile again, this line should contain either xml comments or xml processing instruction. ;  ; Bool_t AddXmlStyleSheet (const char *href, const char *type=""text/css"", const char *title=nullptr, int alternate=-1, const char *media=nullptr, const char *charset=nullptr);  Adds style sheet definition on the top of xml document Creates <?xml-stylesheet alternate=""yes"" title=""compact"" href=""small-base.css"" type=""text/css""?> Attributes href and type must be supplied, other attributes: title, alternate, media, charset are optional if alternate==0, attribute alternate=""no"" will be created, if alternate>0, attribute alternate=""yes"" if alternate<0, attribute will not be created This style sheet definition cannot be later access with TXMLFile methods. ;  ; void Close (Option_t *option="""") final;  Close a XML file For mor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:64,Guid,Guide,64,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TXMLNode Class ReferenceInput/Output Library. ; TXMLNode contains a pointer to xmlNode, which is a node under the DOM tree. ; A node can be an Element, an Attribute, a Text Node or a Comment Node. One can navigate the DOM tree by accessing the siblings and parent or child nodes. Also retriving the Attribute or the Text in an Element node. ; Definition at line 20 of file TXMLNode.h. Public Types; enum  EXMLElementType { kXMLElementNode = 1; , kXMLAttributeNode = 2; , kXMLTextNode = 3; , kXMLCommentNode = 8; };  This enum is based on libxml tree Enum xmlElementType. More...;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TXMLNode (_xmlNode *node, TXMLNode *parent=nullptr, TXMLNode *previous=nullptr);  TXMLNode constructor. ;  ;  ~TXMLNode () override;  Destructor. ;  ; TList * GetAttributes ();  Returns a list of node's attribute if any, returns 0 if no attribute. ;  ; TXMLNode * GetChildren ();  Returns the node's child if any, returns 0 if no child. ;  ; const char * GetContent () const;  Returns the content if any, or 0. ;  ; const char * GetNamespaceHref () const;  Returns th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLNode.html:64,Guid,Guide,64,doc/master/classTXMLNode.html,https://root.cern,https://root.cern/doc/master/classTXMLNode.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLParser Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXMLParser Class ReferenceabstractInput/Output Library. ; TXMLParser is an abstract class which interfaces with Libxml2. ; Libxml2 is the XML C parser and toolkit developed for the Gnome project. The libxml library provides two interfaces to the parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:66,Guid,Guide,66,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['Guid'],['Guide']
Usability,". ROOT: TXMLPlayer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TXMLPlayer Class Reference. . Definition at line 25 of file TXMLPlayer.h. Public Member Functions;  TXMLPlayer ();  default constructor ;  ;  ~TXMLPlayer () override;  destructor of TXMLPlayer object ;  ; TClass * IsA () const override;  ; Bool_t ProduceCode (TList *cllist, const char *filename);  Produce streamers for provide class list TList should include list of classes, for which code should be generated. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLPlayer.html:66,Guid,Guide,66,doc/master/classTXMLPlayer.html,https://root.cern,https://root.cern/doc/master/classTXMLPlayer.html,1,['Guid'],['Guide']
Usability,". ROOT: TXTRU Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; List of all members ; TXTRU Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; A poly-extrusion. . XTRU is a poly-extrusion with fixed outline shape in x-y, a sequence of z extents (segments) and two end faces perpendicular to the z axis. The x-y outline is defined by an ordered list of points; the overall scale of the outline scales linearly between z points and the center can have an x-y offset specified at each segment end.; A TXTRU has the following parameters:. name: name of the shape; title: shape's title; material: (see TMaterial); nxy: number of x-y vertex points constituting the outline – this number should be at least 3; nz: number of planes perpendicular to the z axis where the scaling dimension of the section is given – this number should be at least 2; Xvtx: array [nxy] of X coordinates of vertices; Yvtx: array [nxy] of Y coordinates of vertices; z: array [nz] of z plane positions; scale: array [nz] of scale factors; x0: array [nz] of x offsets; y0: array [nz] of y offsets. All XTRU shapes are correctly rendered in wire mode but can encounter difficulty when rendered as a solid with hidden surfaces. These exceptions occur if the outline shape is not a convex polygon. Both the X3D and OpenGL renderers expect polygons to be convex. The OpenGL spec specifies that points defining a polygon using the GL_POLYGON primitive may be rendered as the convex hull of that set.; Solid rendering under X3D can also give unexpected artifacts if the combination of x-y-z offsets and scales for the segments are chosen in such a manner that they represent a concave shape when sliced along a plane parallel to the z axis.; Choosing sets of point that represent a malformed poly",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXTRU.html:61,Guid,Guide,61,doc/master/classTXTRU.html,https://root.cern,https://root.cern/doc/master/classTXTRU.html,1,['Guid'],['Guide']
Usability,". ROOT: TZIPFile Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Types |; Protected Member Functions |; Protected Attributes |; List of all members ; TZIPFile Class ReferenceInput/Output Library. ; Describes a ZIP archive file containing multiple sub-files. ; Typically the sub-files are ROOT files. Notice that the ROOT files should not be compressed when being added to the ZIP file, since ROOT files are normally already compressed. Such a ZIP file should be created like: zip -n root multi file1.root file2.root which creates a ZIP file multi.zip. A ZIP archive consists of files compressed with the popular ZLIB compression algorithm. The archive format is used among others by PKZip and Info-ZIP. The compression algorithm is also used by GZIP and the PNG graphics standard. The format of the archives is explained briefly below. This class provides an interface to read such archives. A ZIP archive contains a prefix, series of archive members (sub-files), and a central directory. In theory the archive could span multiple disks (or files) with the central directory of the whole archive on the last disk, but this class does not support such multi-part archives. The prefix is only used in self-extracting executable archive files. The members are stored in the archive sequentially, each with a local header followed by the (optionally) compressed data; the local header describes the member, including its file name and compressed and real sizes. The central directory includes the member details again, plus allows an extra member comment to be added. The last member in the central directory is an end marker that can contain a comment for the whole archive. Both the local header and the central directory can also carry extra member-specific data; the data in the local and global parts can be different. The fact that the archive has a globa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPFile.html:64,Guid,Guide,64,doc/master/classTZIPFile.html,https://root.cern,https://root.cern/doc/master/classTZIPFile.html,1,['Guid'],['Guide']
Usability,". ROOT: TZIPMember Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; Friends |; List of all members ; TZIPMember Class ReferenceInput/Output Library. ; A ZIP archive consists of files compressed with the popular ZLIB compression algorithm; this class records the information about a single archive member. ; Definition at line 156 of file TZIPFile.h. Public Member Functions;  TZIPMember ();  Default ctor. ;  ;  TZIPMember (const char *name);  Create ZIP member file. ;  ;  TZIPMember (const TZIPMember &member);  Copy ctor. ;  ;  ~TZIPMember () override;  Cleanup. ;  ; UInt_t GetAttrExt () const;  ; UInt_t GetAttrInt () const;  ; UInt_t GetCRC32 () const;  ; void * GetGlobal () const;  ; UInt_t GetGlobalLen () const;  ; UInt_t GetLevel () const;  ; void * GetLocal () const;  ; UInt_t GetLocalLen () const;  ; UInt_t GetMethod () const;  ; TClass * IsA () const override;  ; TZIPMember & operator= (const TZIPMember &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Pretty print basic ZIP member info. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TArchiveMember;  TArchiveMember ();  Default ctor. ;  ;  TArchiveMember (const char *name);  Create an archive member file. ;  ;  TArchiveMember (const TArchiveMember &member);  Copy ctor. ;  ;  ~TArchiveMember () override;  ; const char * GetComment () const;  ; Long64_t GetCompressedSize () const;  ; Long64_t GetDecompressedSize () const;  ; Long64_t GetFilePosition () const;  ; TDatime GetModTime () const;  ; const char * GetName () const override;  Returns name of object. ;  ; Long64_t GetPosition () const;  ; Bool_t IsDirectory () const;  ; TArchiveMember & operator= (const TArchiveMember &rhs);  Assignmen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTZIPMember.html:66,Guid,Guide,66,doc/master/classTZIPMember.html,https://root.cern,https://root.cern/doc/master/classTZIPMember.html,1,['Guid'],['Guide']
Usability,". ROOT: The Geometry Package. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules ; The Geometry Package. ; The ROOT geometry package is a tool for building, browsing, navigating and visualizing detector geometries. The code works standalone with respect to any tracking Monte-Carlo engine; therefore, it does not contain any constraints related to physics. However, the navigation features provided by the package are designed to optimize particle transport through complex geometries, working in correlation with simulation packages such as GEANT3, GEANT4 and FLUKA. Quick Start: Creating the world; Example 1: Creating the World; Example 2: A Geometrical Hierarchy Look and Feel. Selecting the System of Units in ROOT; Geometry Creation; The Volume Hierarchy; Creating and Positioning Volumes; Making Volumes; Example of Volume Creation; Positioned Volumes (Nodes); Virtual Containers and Assemblies of Volumes; Examples of Volume Positioning; Overlapping Volumes; Replicating Volumes; Volume Families; Dividing Volumes; Volume Assemblies. Geometrical Transformations; Matrix Creation Example; Rule for Creation of Transformations; Available Geometrical Transformations. Ownership of Geometry Objects. Navigation and Tracking; TGeoNavigator Class; Initializing the Starting Point; Initializing the Direction; Initializing the State; Checking the Current State; Saving and Restoring the Current State; Navigation Queries; Finding If Current State Is Changed For a New Point; Finding the Distance to the Next Boundary; Computing the Safe Radius; Making a Step; The Normal Vector to the Next Crossed Surface at Crossing Point. Creating and Visualizing Tracks. Checking the Geometry; The Overlap Checker; Graphical Checking Methods. The Drawing Package; Drawing Volumes and Hierarchies of Volumes; Visualization Settings and Attributes; Colors and Line Styles; Visibility Settings. Ray Tracing; Clipping Ray-traced Images. Representing Misalignments of the Ideal Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:60,Guid,Guide,60,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Guid'],['Guide']
Usability,". ROOT: Timer Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Public Attributes |; List of all members ; Timer Struct Reference. . Definition at line 54 of file histspeedtest.cxx. Public Types; using TimePoint_t = decltype(std::chrono::high_resolution_clock::now());  . Public Member Functions;  Timer (const char *title, size_t count);  ;  ~Timer ();  . Public Attributes; size_t fCount;  ; TimePoint_t fStart;  ; const char * fTitle;  . Member Typedef Documentation. ◆ TimePoint_t. using Timer::TimePoint_t = decltype(std::chrono::high_resolution_clock::now()). Definition at line 55 of file histspeedtest.cxx. Constructor & Destructor Documentation. ◆ Timer(). Timer::Timer ; (; const char * ; title, . size_t ; count . ). inline . Definition at line 61 of file histspeedtest.cxx. ◆ ~Timer(). Timer::~Timer ; (; ). inline . Definition at line 65 of file histspeedtest.cxx. Member Data Documentation. ◆ fCount. size_t Timer::fCount. Definition at line 58 of file histspeedtest.cxx. ◆ fStart. TimePoint_t Timer::fStart. Definition at line 59 of file histspeedtest.cxx. ◆ fTitle. const char* Timer::fTitle. Definition at line 57 of file histspeedtest.cxx. Collaboration diagram for Timer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; hist/histv7/speed/histspeedtest.cxx. Timer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTimer.html:62,Guid,Guide,62,doc/master/structTimer.html,https://root.cern,https://root.cern/doc/master/structTimer.html,2,['Guid'],['Guide']
Usability,". ROOT: Track Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; Track Class Reference. . Definition at line 30 of file JetEvent.h. Public Member Functions;  Track ();  ;  ~Track () override;  ; TRefArray & GetHits ();  ; Int_t GetNhit () const;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTrack.html:61,Guid,Guide,61,doc/master/classTrack.html,https://root.cern,https://root.cern/doc/master/classTrack.html,1,['Guid'],['Guide']
Usability,". ROOT: Tree Library. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files |; Namespaces |; Classes ; Tree Library. ; In order to store columnar datasets, ROOT provides the TTree, TChain, TNtuple and TNtupleD classes. ; The TTree class represents a columnar dataset. Any C++ type can be stored in the columns. The TTree has allowed to store about 1 EB of data coming from the LHC alone: it is demonstrated to scale and it's battle tested. It has been optimized during the years to reduce dataset sizes on disk and to deliver excellent runtime performance. It allows to access only part of the columns of the datasets, too. The TNtuple and TNtupleD classes are specialisations of the TTree class which can only hold single precision and double precision floating-point numbers respectively; The TChain is a collection of TTrees, which can be located also in different files. . Files; file  InternalTreeUtils.hxx;  ; file  RFriendInfo.hxx;  . Namespaces; namespace  ROOT::Internal::TreeUtils;  Namespace hosting functions and classes to retrieve tree information for internal use. ;  . Classes; struct  ROOT::TreeUtils::RFriendInfo;  Information about friend trees of a certain TTree or TChain object. More...;  ; class  TBasket;  Manages buffers for branches of a Tree. More...;  ; class  TBasketSQL;  Implement TBasket for a SQL backend. More...;  ; class  TBranch;  A TTree is a list of TBranches. More...;  ; class  TBranchClones;  A Branch for the case of an array of clone objects. More...;  ; class  TBranchElement;  A Branch for the case of an object. More...;  ; class  TBranchObject;  A Branch for the case of an object. More...;  ; class  TBranchRef;  A branch containing and managing a TRefTable for TRef autoloading. More...;  ; class  TBranchSTL;  A Branch handling STL collection of pointers (vectors, lists, queues, sets and multisets) while storing them in split mode. More...;  ; class  TBufferSQL;  Implement TBuffer for a SQL backend. More...;  ; cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tree.html:52,Guid,Guide,52,doc/master/group__tree.html,https://root.cern,https://root.cern/doc/master/group__tree.html,1,['Guid'],['Guide']
Usability,". ROOT: Tree tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tree tutorialsTutorials. ; Example code which illustrates how to use ROOT trees and ntuples. . Files; file  basic.C;   Read data from an ascii file and create a root file with an histogram and an ntuple. ;  ; file  basic2.C;   Create can ntuple reading data from an ascii file. ;  ; file  bill.C;   Benchmark comparing row-wise and column-wise storage performance ;  ; file  cernbuild.C;   Read data (CERN staff) from an ascii file and create a root file with a Tree. ;  ; file  cernstaff.C;   Playing with a Tree containing variables of type character ;  ; file  circular.C;   Example of a circular Tree ;  ; file  clonesA_Event.C;  Example to write & read a Tree built with a complex class inheritance tree. ;  ; file  copytree.C;   Copy a subset of a Tree to a new Tree ;  ; file  copytree2.C;   Copy a subset of a Tree to a new Tree, one branch in a separate file. ;  ; file  copytree3.C;   Example of Root macro to copy a subset of a Tree to a new Tree, selecting entries. ;  ; file  drawsparse.C;   Convert a THnSparse to a TTree using efficient iteration through the THnSparse and draw a THnSparse using TParallelCoord. ;  ; file  h1analysis.C;   Example of analysis class for the H1 data. ;  ; file  h1analysisProxy.C;  Example of analysis class for the H1 data using code generated by MakeProxy. ;  ; file  h1analysisTreeReader.C;  H1 analysis example expressed in terms of TTreeReader (see h1analysis.C). ;  ; file  h1chain.C;   Creates a TChain to be used by the h1analysis.C class the symbol H1 must point to a directory where the H1 data sets have been installed. ;  ; file  hsimpleProxy.C;   Used by hsimpleProxyDriver.C. ;  ; file  hsimpleProxyDriver.C;   This is the driver of the hsimpleProxy example. ;  ; file  hsimpleReader.C;   TTreeReader simplest example. ;  ; file  htest.C;   Save histograms in Tree branches ;  ; file  hvector.C;   Write and read STL vectors in ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tree.html:54,Guid,Guide,54,doc/master/group__tutorial__tree.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tree.html,1,['Guid'],['Guide']
Usability,". ROOT: TreeReadBuffer Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TreeReadBuffer Struct Referenceabstract. . Definition at line 18 of file TreeReadBuffer.h. Public Member Functions; virtual ~TreeReadBuffer ()=default;  ; virtual operator double ()=0;  ; virtual operator int ()=0;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/roofit/roofitcore/src/TreeReadBuffer.h>. Inheritance diagram for TreeReadBuffer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TreeReadBuffer(). virtual TreeReadBuffer::~TreeReadBuffer ; (; ). virtualdefault . Member Function Documentation. ◆ operator double(). virtual TreeReadBuffer::operator double ; (; ). pure virtual . Implemented in TypedTreeReadBuffer< T >. ◆ operator int(). virtual TreeReadBuffer::operator int ; (; ). pure virtual . Implemented in TypedTreeReadBuffer< T >. The documentation for this struct was generated from the following file:; roofit/roofitcore/src/TreeReadBuffer.h. TreeReadBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTreeReadBuffer.html:71,Guid,Guide,71,doc/master/structTreeReadBuffer.html,https://root.cern,https://root.cern/doc/master/structTreeReadBuffer.html,2,['Guid'],['Guide']
Usability,". ROOT: Tutorials specific to Mac/Cocoa. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Tutorials specific to Mac/CocoaTutorials. ; Various examples showing graphics done with the Mac graphics system Cocoa. ; These examples run only on Mac/Os . Files; file  flower.C;  A demo to show transparency with TMultiGraph (and a really interesting curve/equation). ;  ; file  grad.C;  This macro shows how to create and use linear gradients to fill a histogram or a pad. ;  ; file  grad2.C;  Gradient fill with transparency and ""SAME"" option. ;  ; file  gradients.C;  This macro requires OS X and ROOT compiled with –enable-cocoa to run. ;  ; file  parallelcoordtrans.C;  Script illustrating the use of transparency with ||-Coord. ;  ; file  radialgradients.C;  This tutorial demonstrates how to use radial gradients, custom colors, transparency. ;  ; file  transp.C;  This demo shows how to use transparency. ;  ; file  transp_text.C;  This macro is based on labels1.C by Rene Brun. ;  ; file  transparentpad.C;  This macro demonstrates semi-transparent pads. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__cocoa.html:71,Guid,Guide,71,doc/master/group__tutorial__cocoa.html,https://root.cern,https://root.cern/doc/master/group__tutorial__cocoa.html,2,['Guid'],['Guide']
Usability,". ROOT: Tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Modules |; Files ; Tutorials. ; A collection of C++ macros, Python scripts and notebooks helping to learn ROOT by example. ; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access.; Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; You can start by executing the standard ROOT demos with a session like:; root > .x demos.C; or; root > .x $ROOTSYS/tutorials/demos.C; You can execute the standard ROOT graphics benchmark with; root > .x benchmarks.C; or; root > .x $ROOTSYS/tutorials/benchmarks.C; The $ROOTSYS/tutorials directory includes several sub-directories: . Modules;  Histograms tutorials;  Examples showing the ""histograms' classes"" usage. ;  ;  Tree tutorials;  Example code which illustrates how to use ROOT trees and ntuples. ;  ;  Dataframe tutorials;  These examples show various features of RDataFrame: ROOT's declarative analysis interface. ;  ;  ROOT 7 tutorials;  Various examples showing the ROOT 7 interface. ;  ;  FOAM tutorials;  Examples showing how to use FOAM. ;  ;  Containers tutorials;  Examples showing the ""containers' classes"" usage. ;  ;  Event display tutorials;  Examples showing the ""Event display classes"" usage. ;  ;  Event display ROOT7 tutorials;  Examples showing the ""Event display classes"" usage with ROOT7. ;  ;  Geometry tutorials;  Various ROOT geometry package examples. ;  ;  Fast Fourier Transforms tutorials;  Example showing the Fast Fourier Transforms interface in ROOT. ;  ;  Fit Tutorials;  These tutorials illustrate the main fitting features. Their names are related to the aspect which is treated in the code. ;  ;  RooFit Tutorials;  These tutorials illustrate the main feat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Tutorials.html:49,Guid,Guide,49,doc/master/group__Tutorials.html,https://root.cern,https://root.cern/doc/master/group__Tutorials.html,2,"['Guid', 'learn']","['Guide', 'learn']"
Usability,. ROOT: Unuran tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Unuran tutorialsTutorials. ; Examples showing unuran capabilities. . Files; file  unuranDemo.C;  Example macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  ; file  unuranFoamTest.C;  This program must be compiled and executed with Aclic as follows. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__unuran.html:56,Guid,Guide,56,doc/master/group__tutorial__unuran.html,https://root.cern,https://root.cern/doc/master/group__tutorial__unuran.html,2,['Guid'],['Guide']
Usability,". ROOT: User Fitting classes. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Classes ; User Fitting classesMath » MathCore » Fitting and Parameter Estimation. ; Main Classes used for fitting a given data set. . Namespaces; namespace  ROOT::Fit::FitUtil;  namespace defining utility free functions using in Fit for evaluating the various fit method functions (chi2, likelihood, etc..) given the data and the model function ;  . Classes; class  ROOT::Fit::FitConfig;  Class describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class. More...;  ; class  ROOT::Fit::FitResult;  class containing the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values. More...;  ; class  ROOT::Fit::Fitter;  Fitter class, entry point for performing all type of fits. More...;  ; class  ROOT::Fit::ParameterSettings;  Class, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__FitMain.html:60,Guid,Guide,60,doc/master/group__FitMain.html,https://root.cern,https://root.cern/doc/master/group__FitMain.html,2,['Guid'],['Guide']
Usability,". ROOT: User's Classes. ; ROOT   6.08/07 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ►MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ►Fitting and Parameter EstimationClasses used for fitting (regression analysis) and estimation of parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/modules.html:51,Guid,Guide,51,doc/v608/modules.html,https://root.cern,https://root.cern/doc/v608/modules.html,1,['Guid'],['Guide']
Usability,". ROOT: User's Classes. ; ROOT   6.10/09 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  TUnfold classes;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ►MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ►Fitting and Parameter EstimationClasses used for fitting (regression analysis) and es",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/modules.html:51,Guid,Guide,51,doc/v610/modules.html,https://root.cern,https://root.cern/doc/v610/modules.html,1,['Guid'],['Guide']
Usability,". ROOT: User's Classes. ; ROOT   6.12/07 Reference Guide ; . User's Classes . Here is a list of all modules:; [detail level 12345];  ▼Core ROOT classesThe Core classes of ROOT ;  Base ROOT classesThe Base classes of ROOT ;  ContainersThe containers and generators the ROOT framework offers ;  ▼GeometryThe Geometry related packages ;  GDML toolsGDML tools for geometry classes ;  CAD convertersClasses to convert geometries to CAD systems ;  Geometry classesThe Geometry related classes ;  Geometry builderThe Geometry builder related classes ;  Geometry painterThe Geometry painter, checker, overlap and track related classes ;  ▼GraphicsThe graphics related classes ;  ►Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ►2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  Graphics attributesThe graphics attributes related classes ;  ►3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  TPad coordinate systemsThese define typesafe coordinates used by TPad to identify which coordinate system a coordinate is referring to ;  ▼Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Histograms and graphs painting classes.;  Advanced spectra processing classes.;  TSpectrum painting class.;  TUnfold classes;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/modules.html:51,Guid,Guide,51,doc/v612/modules.html,https://root.cern,https://root.cern/doc/v612/modules.html,1,['Guid'],['Guide']
Usability,". ROOT: User's Classes. ROOT;  6.06/09. Reference Guide. ROOT Home Page; Main Page; Related Pages; User's Classes; Namespaces; All Classes; Files; Release Notes. User's Classes . Here is a list of all modules:; [detail level 12345];  R Interface for Statistical Computing;  ▼GraphicsThe graphics related classes ;  ▼Graphics' BackendsGraphics' Backends interface classes ;  Cocoa backendInterface to MacOS native graphics system ;  Win32 backendInterface to Windows graphics ;  X11 backendInterface to X11 graphics ;  ▼2D GraphicsThe 2D graphics related classes ;  libAfterImage interfaceClasses interfacing to libAfterImage ;  FITS fileInterface to FITS file ;  Graphics padThe TPad related classes ;  Basic graphicsThe low level graphics classes ;  graphviz interfaceInterface to the graphing package graphviz ;  Graphics file outputInterfaces to various file output formats ;  ▼3D GraphicsThe 3D graphics related classes ;  Event DisplayThe Event Display classes ;  Basic 3D graphics.The basic 3D classes ;  OpenGL renderingOpenGL rendering and utility classes ;  Histogram LibraryA general description of the Histogram library is documented in the class TH1 ;  Input/Output LibraryThe library collecting the ROOT classes dedicated to data input and output ;  ▼MathThe ROOT Mathematical Libraries ;  GenVectorGeneric 2D, 3D and 4D vectors classes and their transformations (rotations) ;  ▼MathCoreThe Core Mathematical Library of ROOT. See the MathCore description page ;  ▼Fitting and Parameter EstimationClasses used for fitting (regression analysis) and estimation of parameter values given a data sample ;  Fit Method ClassesClasses describing Fit Method functions ;  Fit Data ClassesClasses for describing the input data for fitting ;  User Fitting classesMain Classes used for fitting a given data set ;  ▼Random ClassesPseudo-random numbers generator classes and for generation of random number distributions ;  QuasiRandom number generators and distributionsClasses for generating QuasiRand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/modules.html:50,Guid,Guide,50,root/html606/modules.html,https://root.cern,https://root.cern/root/html606/modules.html,1,['Guid'],['Guide']
Usability,". ROOT: UserGroup_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Public Attributes |; List of all members ; UserGroup_t Struct Reference. . Definition at line 136 of file TSystem.h. Public Member Functions;  UserGroup_t ();  . Public Attributes; Int_t fGid;  ; TString fGroup;  ; TString fPasswd;  ; TString fRealName;  ; TString fShell;  ; Int_t fUid;  ; TString fUser;  . #include <TSystem.h>; Constructor & Destructor Documentation. ◆ UserGroup_t(). UserGroup_t::UserGroup_t ; (; ). inline . Definition at line 144 of file TSystem.h. Member Data Documentation. ◆ fGid. Int_t UserGroup_t::fGid. Definition at line 138 of file TSystem.h. ◆ fGroup. TString UserGroup_t::fGroup. Definition at line 140 of file TSystem.h. ◆ fPasswd. TString UserGroup_t::fPasswd. Definition at line 141 of file TSystem.h. ◆ fRealName. TString UserGroup_t::fRealName. Definition at line 142 of file TSystem.h. ◆ fShell. TString UserGroup_t::fShell. Definition at line 143 of file TSystem.h. ◆ fUid. Int_t UserGroup_t::fUid. Definition at line 137 of file TSystem.h. ◆ fUser. TString UserGroup_t::fUser. Definition at line 139 of file TSystem.h. Collaboration diagram for UserGroup_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/base/inc/TSystem.h. UserGroup_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structUserGroup__t.html:68,Guid,Guide,68,doc/master/structUserGroup__t.html,https://root.cern,https://root.cern/doc/master/structUserGroup__t.html,2,['Guid'],['Guide']
Usability,". ROOT: Value Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; Value Struct Reference. . Definition at line 15 of file functioncalls.h. Public Attributes; int m_int;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/bindings/pyroot/cppyy/cppyy/bench/functioncalls.h>; Member Data Documentation. ◆ m_int. int Value::m_int. Definition at line 15 of file functioncalls.h. Collaboration diagram for Value:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; bindings/pyroot/cppyy/cppyy/bench/functioncalls.h. Value. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structValue.html:62,Guid,Guide,62,doc/master/structValue.html,https://root.cern,https://root.cern/doc/master/structValue.html,2,['Guid'],['Guide']
Usability,". ROOT: VecOps tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; VecOps tutorialsTutorials. ; These examples show the functionalities of the VecOps utilities. ; Please note that you can find the exhaustive documentation here in the reference guide. . Files; file  vo001_AdoptOrOwnMemory.C;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo001_AdoptOrOwnMemory.py;   In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some. ;  ; file  vo002_VectorCalculations.C;   In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars. ;  ; file  vo003_LogicalOperations.C;   In this tutorial we learn how the RVec class can be used to express logical operations. ;  ; file  vo004_SortAndSelect.C;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo004_SortAndSelect.py;   In this tutorial we learn how elements of an RVec can be easily sorted and selected. ;  ; file  vo005_Combinations.C;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo005_Combinations.py;   In this tutorial we learn how combinations of RVecs can be built. ;  ; file  vo006_IndexManipulation.C;   In this tutorial we demonstrate RVec helpers for index manipulation. ;  ; file  vo007_PhysicsHelpers.C;   In this tutorial we demonstrate RVec helpers for physics computations such as angle differences \(\Delta \phi\), the distance in the \(\eta\)- \(\phi\) plane \(\Delta R\) and the invariant mass. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__vecops.html:56,Guid,Guide,56,doc/master/group__tutorial__vecops.html,https://root.cern,https://root.cern/doc/master/group__tutorial__vecops.html,11,"['Guid', 'guid', 'learn']","['Guide', 'guide', 'learn']"
Usability,". ROOT: VecOps. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions ; VecOps. ; A ""std::vector""-like collection of values implementing handy operation to analyse them. . Classes; class  ROOT::VecOps::RVec< T >;  A ""std::vector""-like collection of values implementing handy operation to analyse them. More...;  ; class  ROOT::VecOps::RVecN< T, N >;  . Functions; template<typename T > ; auto ROOT::VecOps::All (const RVec< T > &v) -> decltype(v[0]==false);  Return true if all of the elements equate to true, return false otherwise. ;  ; template<typename T0 , typename T1 = T0, typename T2 = T0, typename T3 = T0, typename T4 = T0, typename T5 = T0, typename Common_t = std::common_type_t<T0, T1>> ; Common_t ROOT::VecOps::Angle (T0 x1, T1 y1, T2 z1, T3 x2, T4 y2, T5 z2);  Return the angle between two three-vectors given the quantities x coordinate (x), y coordinate (y), z coordinate (y). ;  ; template<typename T > ; auto ROOT::VecOps::Any (const RVec< T > &v) -> decltype(v[0]==true);  Return true if any of the elements equates to true, return false otherwise. ;  ; template<typename T > ; std::size_t ROOT::VecOps::ArgMax (const RVec< T > &v);  Get the index of the greatest element of an RVec In case of multiple occurrences of the maximum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; std::size_t ROOT::VecOps::ArgMin (const RVec< T > &v);  Get the index of the smallest element of an RVec In case of multiple occurrences of the minimum values, the index corresponding to the first occurrence is returned. ;  ; template<typename T > ; RVec< typename RVec< T >::size_type > ROOT::VecOps::Argsort (const RVec< T > &v);  Return an RVec of indices that sort the input RVec. ;  ; template<typename T , typename Compare > ; RVec< typename RVec< T >::size_type > ROOT::VecOps::Argsort (const RVec< T > &v, Compare &&c);  Return an RVec of indices that sort the input RVec based on a comparison fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__vecops.html:46,Guid,Guide,46,doc/master/group__vecops.html,https://root.cern,https://root.cern/doc/master/group__vecops.html,1,['Guid'],['Guide']
Usability,". ROOT: Vector Template Functions. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Vector Template FunctionsMath » SMatrix Package. ; These functions apply to SVector types (and also to Vector expressions) and can return a vector expression or a scalar, like in the Dot product, or a matrix, like in the Tensor product. . Functions; template<class T > ; SVector< T, 3 > ROOT::Math::Cross (const SVector< T, 3 > &lhs, const SVector< T, 3 > &rhs);  Vector Cross Product (only for 3-dim vectors) \( \vec{c} = \vec{a}\times\vec{b} \). ;  ; template<class T , unsigned int D> ; T ROOT::Math::Dot (const SVector< T, D > &lhs, const SVector< T, D > &rhs);  Vector dot product. ;  ; template<class T , unsigned int D> ; VecExpr< UnaryOp< Fabs< T >, SVector< T, D >, T >, T, D > ROOT::Math::fabs (const SVector< T, D > &rhs);  abs of a vector : v2(i) = | v1(i) | returning a vector expression ;  ; template<class T > ; T ROOT::Math::Lmag (const SVector< T, 4 > &rhs);  Lmag: Minkowski Lorentz-Vector norm (only for 4-dim vectors) Length of a vector Lorentz-Vector: \( |\vec{v}| = \sqrt{v_0^2 - v_1^2 - v_2^2 -v_3^2} \). ;  ; template<class T > ; T ROOT::Math::Lmag2 (const SVector< T, 4 > &rhs);  Lmag2: Square of Minkowski Lorentz-Vector norm (only for 4D Vectors) Template to compute \( |\vec{v}|^2 = v_0^2 - v_1^2 - v_2^2 -v_3^2 \). ;  ; template<class T , unsigned int D> ; T ROOT::Math::Mag (const SVector< T, D > &rhs);  Vector magnitude (Euclidean norm) Compute : \( |\vec{v}| = \sqrt{\sum_iv_i^2} \). ;  ; template<class T , unsigned int D> ; T ROOT::Math::Mag2 (const SVector< T, D > &rhs);  Vector magnitude square Template to compute \(|\vec{v}|^2 = \sum_iv_i^2 \). ;  ; template<class T , unsigned int D> ; VecExpr< BinaryOp< MulOp< T >, SVector< T, D >, SVector< T, D >, T >, T, D > ROOT::Math::operator* (const SVector< T, D > &lhs, const SVector< T, D > &rhs);  Element by element vector product v3(i) = v1(i)*v2(i) returning a vector expression. ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__VectFunction.html:65,Guid,Guide,65,doc/master/group__VectFunction.html,https://root.cern,https://root.cern/doc/master/group__VectFunction.html,1,['Guid'],['Guide']
Usability,". ROOT: Webgui tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; Webgui tutorialsTutorials. ; Webgui examples. . Files; file  geom_threejs.cxx;  The tutorial demonstrates how three.js model for geometry can be created and displayed. ;  ; file  ping.cxx;  Test suite for RWebWindow communication performance. ;  ; file  web_cms.cxx;  Web-based geometry viewer for CMS geometry. ;  ; file  webpanel.cxx;  This macro demonstrates simple openui5 panel, shown with RWebWindow. ;  ; file  webwindow.cxx;  Minimal server/client code for working with RWebWindow class. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__webgui.html:56,Guid,Guide,56,doc/master/group__tutorial__webgui.html,https://root.cern,https://root.cern/doc/master/group__tutorial__webgui.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: WindowAttributes_t Struct Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Attributes |; List of all members ; WindowAttributes_t Struct Reference. ; Window attributes that can be inquired. ; Definition at line 114 of file GuiTypes.h. Public Attributes; Long_t fAllEventMasks;  set of events all people have interest in ;  ; ULong_t fBackingPixel;  value to be used when restoring planes ;  ; ULong_t fBackingPlanes;  planes to be preserved if possible ;  ; Int_t fBackingStore;  kNotUseful, kWhenMapped, kAlways ;  ; Int_t fBitGravity;  one of bit gravity values ;  ; Int_t fBorderWidth;  border width of window ;  ; Int_t fClass;  kInputOutput, kInputOnly ;  ; Colormap_t fColormap;  color map to be associated with window ;  ; Int_t fDepth;  depth of window ;  ; Long_t fDoNotPropagateMask;  set of events that should not propagate ;  ; Int_t fHeight;  width and height of window ;  ; Bool_t fMapInstalled;  boolean, is color map currently installed ;  ; Int_t fMapState;  kIsUnmapped, kIsUnviewable, kIsViewable ;  ; Bool_t fOverrideRedirect;  boolean value for override-redirect ;  ; Window_t fRoot;  root of screen containing window ;  ; Bool_t fSaveUnder;  boolean, should bits under be saved? ;  ; void * fScreen;  back pointer to correct screen ;  ; void * fVisual;  the associated visual structure ;  ; Int_t fWidth;  ; Int_t fWinGravity;  one of the window gravity values ;  ; Int_t fX;  ; Int_t fY;  location of window ;  ; Long_t fYourEventMask;  my event mask ;  . #include <GuiTypes.h>; Member Data Documentation. ◆ fAllEventMasks. Long_t WindowAttributes_t::fAllEventMasks. set of events all people have interest in ; Definition at line 131 of file GuiTypes.h. ◆ fBackingPixel. ULong_t WindowAttributes_t::fBackingPixel. value to be used when restoring planes ; Definition at line 126 of file GuiTypes.h. ◆ fBackingPlanes. ULong_t WindowAttributes_t::fBackingPlanes. planes to be preserved if possible ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structWindowAttributes__t.html:75,Guid,Guide,75,doc/master/structWindowAttributes__t.html,https://root.cern,https://root.cern/doc/master/structWindowAttributes__t.html,1,['Guid'],['Guide']
Usability,". ROOT: XML tutorials. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Files ; XML tutorialsTutorials. ; XML examples. . Files; file  DOMParsePerson.C;  ROOT implementation of a XML DOM Parser. ;  ; file  DOMRecursive.C;  ROOT implementation of a XML DOM Parser. ;  ; file  SAXHandler.C;  ROOT implementation of a simple SAX Handler. ;  ; file  xmlmodifyfile.C;  Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  ; file  xmlnewfile.C;  Example to create a new xml file with the TXMLEngine class. ;  ; file  xmlreadfile.C;  Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__xml.html:53,Guid,Guide,53,doc/master/group__tutorial__xml.html,https://root.cern,https://root.cern/doc/master/group__tutorial__xml.html,3,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,. ROOT: arrow Namespace Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. arrow Namespace Reference. arrow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacearrow.html:65,Guid,Guide,65,doc/master/namespacearrow.html,https://root.cern,https://root.cern/doc/master/namespacearrow.html,2,['Guid'],['Guide']
Usability,". ROOT: bindings/pyroot/cppyy/CPyCppyy/src/API.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. API.cxx. Go to the documentation of this file. 1// Bindings; 2#include ""CPyCppyy.h""; 3#define CPYCPPYY_INTERNAL 1; 4#include ""CPyCppyy/API.h""; 5#undef CPYCPPYY_INTERNAL; 6 ; 7#include ""CPPInstance.h""; 8#include ""CPPOverload.h""; 9#include ""CPPScope.h""; 10#include ""ProxyWrappers.h""; 11#include ""PyStrings.h""; 12 ; 13// Standard; 14#include <stdio.h>; 15#include <iostream>; 16#include <string>; 17 ; 18//______________________________________________________________________________; 19// CPyCppyy API: Interpreter and Proxy Access; 20// ==========================================; 21//; 22// Access to cppyy Python objects from Cling and C++: allows conversion for; 23// instances and type checking for scopes, instances, etc.; 24// Adds a few convenience functions to call Python from Cling and expose Python; 25// classes to Cling for use in inheritance etc.; 26 ; 27 ; 28//- data ---------------------------------------------------------------------; 29static PyObject* gMainDict = nullptr;; 30 ; 31namespace CPyCppyy {; 32 extern PyObject* gThisModule;; 33}; 34 ; 35 ; 36//- private helpers ----------------------------------------------------------; 37namespace {; 38 ; 39static bool Initialize(); 40{; 41// Private initialization method: setup the python interpreter and load the; 42// cppyy module.; 43 static bool isInitialized = false;; 44 if (isInitialized); 45 return true;; 46 ; 47 if (!Py_IsInitialized()) {; 48 // this happens if Cling comes in first; 49#if PY_VERSION_HEX < 0x03020000; 50 PyEval_InitThreads();; 51#endif; 52#if PY_VERSION_HEX < 0x03080000; 53 Py_Initialize();; 54#else; 55 PyConfig config;; 56 PyConfig_InitPythonConfig(&config);; 57 PyConfig_SetString(&config, &config.program_name, L""cppyy"");; 58 Py_InitializeFromConfig(&config);; 59#endif; 60#if PY_VERSION_HEX >= 0x03020000; 61#if PY_VERSION_HEX < 0x03090000; 62 PyEval",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:94,Guid,Guide,94,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: bindings/r/inc/TRFunctionImport__oprtr.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; TRFunctionImport__oprtr.h File Reference. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; template<typename T1 > ; TRObject operator() (const T1 &t1) const;  ; template<typename T1 , typename T2 > ; TRObject operator() (const T1 &t1, const T2 &t2) const;  ; template<typename T1 , typename T2 , typename T3 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7, const T8 &t8) const;  ; template<typename T1 , typename T2 , typename T3 , typename T4 , typename T5 , typename T6 , typename T7 , typename T8 , typename T9 > ; TRObject operator() (const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7, const T8 &t8, const T9 &t9) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRFunctionImport____oprtr_8h.html:95,Guid,Guide,95,doc/master/TRFunctionImport____oprtr_8h.html,https://root.cern,https://root.cern/doc/master/TRFunctionImport____oprtr_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: bindings/r/inc/TRFunctionImport__oprtr.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRFunctionImport__oprtr.h. Go to the documentation of this file. 1// -*- mode: C++; c-indent-level: 4; c-basic-offset: 4; tab-width: 8 -*-; 2//; 3// TRFunctionImport__oprt.h: based in Rcpp R/C++ interface class library -- generated helper code for Function.h; 4//; 5// Copyright (C) 2010 - 2013 Dirk Eddelbuettel and Romain Francois; 6// Modified by Omar Zapata for ROOTR; 7//; 8// This file is based in Rcpp.; 9 ; 10#ifndef ROOT_R_TRFunctionImport_oprtr; 11#define ROOT_R_TRFunctionImport_oprtr; 12 ; 13template <typename T1>; 14TRObject operator()(const T1 &t1) const; 15{; 16 return (*f)(t1) ;; 17}; 18 ; 19template <typename T1, typename T2>; 20TRObject operator()(const T1 &t1, const T2 &t2) const; 21{; 22 return (*f)(t1, t2) ;; 23}; 24 ; 25template <typename T1, typename T2, typename T3>; 26TRObject operator()(const T1 &t1, const T2 &t2, const T3 &t3) const; 27{; 28 return (*f)(t1, t2, t3) ;; 29}; 30 ; 31template <typename T1, typename T2, typename T3, typename T4>; 32TRObject operator()(const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4) const; 33{; 34 return (*f)(t1, t2, t3, t4) ;; 35}; 36 ; 37template <typename T1, typename T2, typename T3, typename T4, typename T5>; 38TRObject operator()(const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5) const; 39{; 40 return (*f)(t1, t2, t3, t4, t5) ;; 41}; 42 ; 43template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>; 44TRObject operator()(const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6) const; 45{; 46 return (*f)(t1, t2, t3, t4, t5, t6) ;; 47}; 48 ; 49template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>; 50TRObject operator()(const T1 &t1, const T2 &t2, const T3 &t3, const T4 &t4, const T5 &t5, const T6 &t6, const T7 &t7) const; 51{; 52 return (*f)(t1, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRFunctionImport____oprtr_8h_source.html:92,Guid,Guide,92,doc/master/TRFunctionImport____oprtr_8h_source.html,https://root.cern,https://root.cern/doc/master/TRFunctionImport____oprtr_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: bindings/r/tests/Functor.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Functions ; Functor.C File Reference. #include <TRInterface.h>; #include <TMath.h>. Include dependency graph for Functor.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  MyFunctor;  . Typedefs; typedef Double_t(* Function) (Double_t);  . Functions; void Functor ();  ;  RCPP_MODULE (MyFunctorModule);  . Typedef Documentation. ◆ Function. typedef Double_t(* Function) (Double_t). Definition at line 4 of file Functor.C. Function Documentation. ◆ Functor(). void Functor ; (; ). Definition at line 26 of file Functor.C. ◆ RCPP_MODULE(). RCPP_MODULE ; (; MyFunctorModule ; ). Definition at line 18 of file Functor.C. bindingsrtestsFunctor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html:81,Guid,Guide,81,doc/master/bindings_2r_2tests_2Functor_8C.html,https://root.cern,https://root.cern/doc/master/bindings_2r_2tests_2Functor_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: bindings/r/tests/Object.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; Object.C File Reference. #include <TRInterface.h>. Include dependency graph for Object.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void Object ();  . Variables; ROOT::R::TRInterface & r = ROOT::R::TRInterface::Instance();  . Function Documentation. ◆ Object(). void Object ; (; ). Definition at line 6 of file Object.C. Variable Documentation. ◆ r. ROOT::R::TRInterface& r = ROOT::R::TRInterface::Instance(). Definition at line 4 of file Object.C. bindingsrtestsObject.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Object_8C.html:80,Guid,Guide,80,doc/master/Object_8C.html,https://root.cern,https://root.cern/doc/master/Object_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: bindings/r/tests/ROOTR.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; ROOTR.C File Reference. #include <TRInterface.h>. Include dependency graph for ROOTR.C:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; Double_t myFunc (Double_t x);  ; void ROOTR ();  . Function Documentation. ◆ myFunc(). Double_t myFunc ; (; Double_t ; x). Definition at line 4 of file ROOTR.C. ◆ ROOTR(). void ROOTR ; (; ). Definition at line 9 of file ROOTR.C. bindingsrtestsROOTR.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C.html:79,Guid,Guide,79,doc/master/ROOTR_8C.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: bindings/r/tests/ROOTR.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ROOTR.C. Go to the documentation of this file. 1//script to test Modules; 2#include<TRInterface.h>; 3 ; 4Double_t myFunc(Double_t x); 5{; 6 return cos(x);; 7}; 8 ; 9void ROOTR(); 10{; 11 ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; 12 r.SetVerbose(kFALSE);; 13 r.LoadModule(""Gpad"");; 14 r.LoadModule(""Hist"");; 15 r.LoadModule(""Rint"");; 16 ; 17 r<<""x<-seq(0,2*pi,by=.1)"";; 18 r<<""c1<-new(TCanvas,'c1','dlnorm')"";; 19 r<<""u <-new(TGraph,length(x),x,dlnorm(x))"" ;//TGraph(int,double*,double*); 20 r<<""u$Draw()"";; 21 ; 22 r<<""c2<-new(TCanvas,'c2','DiLog from TMath')"";; 23 r<<""o<- new(TF1,'dilog','TMath::DiLog(x)',0,2*pi)"";; 24 r<<""o$Draw()"";; 25// ; 26 r<<""c3<-new(TCanvas,'c3','Custom')"";; 27 r<<""i <- new(TF1,'f2','[0]*myFunc([1]*x)',0,2*pi)""; ; 28 r<<""i$SetRange(0,2*pi)"";; 29 r<<""i$SetParameter(0,4)"";; 30 r<<""i$SetParameter(1,pi/2)"";; 31 r<<""print(i$Eval(0))"";; 32 r<<""print(i$Eval(c(0,pi)))"";; 33 r<<""i$Draw('')"";; 34 ; 35// r<<""gApp<-new(TRint,'ROOTR')"";; 36// r<<""gApp$ProcessLine('cout<<\""Calling cout from TRint\""<<endl;')"";; 37 ; 38}; ROOTRvoid ROOTR()Definition ROOTR.C:9; myFuncDouble_t myFunc(Double_t x)Definition ROOTR.C:4; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TRInterface.h; ROOT::R::TRInterfaceROOT R was implemented using the R Project library and the modules Rcpp and RInsideDefinition TRInterface.h:136; ROOT::R::TRInterface::Instancestatic TRInterface & Instance()static method to get an TRInterface instance referenceDefinition TRInterface.cxx:187; xDouble_t x[n]Definition legend1.C:17. bindingsrtestsROOTR.C. ROOT ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ROOTR_8C_source.html:76,Guid,Guide,76,doc/master/ROOTR_8C_source.html,https://root.cern,https://root.cern/doc/master/ROOTR_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: bindings/tpython/inc/TPython.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TPython.h. Go to the documentation of this file. 1// Author: Enric Tejedor CERN 08/2019; 2// Original PyROOT code by Wim Lavrijsen, LBL; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TPython; 13#define ROOT_TPython; 14 ; 15//////////////////////////////////////////////////////////////////////////////; 16// //; 17// TPython //; 18// //; 19// Access to the python interpreter and API onto PyROOT. //; 20// //; 21//////////////////////////////////////////////////////////////////////////////; 22 ; 23// Bindings; 24#include ""TPyReturn.h""; 25 ; 26// ROOT; 27#include ""TObject.h""; 28 ; 29#include ""ROOT/RConfig.hxx"" // R__DEPRECATED; 30 ; 31#include <any>; 32#include <cstdint>; 33 ; 34namespace ROOT {; 35namespace Internal {; 36 ; 37// Internal helper for PyROOT to swap with an object is at a specific address.; 38template<class T>; 39inline void SwapWithObjAtAddr(T &a, std::intptr_t b) { std::swap(a, *reinterpret_cast<T*>(b)); }; 40 ; 41}; 42}; 43 ; 44class TPython {; 45 ; 46private:; 47 static Bool_t Initialize();; 48 ; 49public:; 50 // import a python module, making its classes available; 51 static Bool_t Import(const char *name);; 52 ; 53 // load a python script as if it were a macro; 54 static void LoadMacro(const char *name);; 55 ; 56 // execute a python stand-alone script, with argv CLI arguments; 57 static void ExecScript(const char *name, int argc = 0, const char **argv = nullptr);; 58 ; 59 // execute a python statement (e.g. ""import ROOT"" ); 60 static Bool_t Exec(const char *cmd, std::any *resul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8h_source.html:82,Guid,Guide,82,doc/master/TPython_8h_source.html,https://root.cern,https://root.cern/doc/master/TPython_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: bindings/tpython/src/TPython.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TPython.cxx. Go to the documentation of this file. 1// Author: Enric Tejedor CERN 08/2019; 2// Original PyROOT code by Wim Lavrijsen, LBL; 3//; 4// /*************************************************************************; 5// * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 6// * All rights reserved. *; 7// * *; 8// * For the licensing terms see $ROOTSYS/LICENSE. *; 9// * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10// *************************************************************************/; 11 ; 12// Bindings; 13// CPyCppyy.h must be go first, since it includes Python.h, which must be; 14// included before any standard header; 15#include ""CPyCppyy/API.h""; 16#include ""TPython.h""; 17#include ""TPyClassGenerator.h""; 18 ; 19// ROOT; 20#include ""TROOT.h""; 21#include ""TClassRef.h""; 22#include ""TObject.h""; 23 ; 24#include <Riostream.h>; 25 ; 26// Standard; 27#include <mutex>; 28#include <sstream>; 29#include <stdio.h>; 30#include <string>; 31 ; 32/// \class TPython; 33/// Accessing the Python interpreter from C++.; 34///; 35/// The TPython class allows for access to python objects from Cling. The current; 36/// functionality is only basic: ROOT objects and builtin types can freely cross; 37/// the boundary between the two interpreters, python objects can be instantiated; 38/// and their methods can be called. All other cross-coding is based on strings; 39/// that are run on the python interpreter.; 40///; 41/// Examples:; 42///; 43/// ~~~{.cpp}; 44/// $ root -l; 45/// // Execute a string of python code.; 46/// root [0] TPython::Exec( ""print('Hello World!')"" );; 47/// Hello World!; 48///; 49/// // Create a TNamed on the python side, and transfer it back and forth.; 50/// root [1] std::any res1;; 51/// root [2] TPython::Exec(""_anyresult = ROOT.std.make_any['TNamed']('hello', '')"", &res1);; 52/// root [3] TPyth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPython_8cxx_source.html:84,Guid,Guide,84,doc/master/TPython_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPython_8cxx_source.html,1,['Guid'],['Guide']
Usability,. ROOT: bool Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. bool Class Reference. The documentation for this class was generated from the following files:. bool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classbool.html:60,Guid,Guide,60,doc/master/classbool.html,https://root.cern,https://root.cern/doc/master/classbool.html,2,['Guid'],['Guide']
Usability,. ROOT: bool Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. bool Class Reference. The documentation for this class was generated from the following files:. bool. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classbool.html:59,Guid,Guide,59,doc/v632/classbool.html,https://root.cern,https://root.cern/doc/v632/classbool.html,2,['Guid'],['Guide']
Usability,". ROOT: core Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. core Directory Reference. Directory dependency graph for core:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  base;  ;  clingutils;  ;  cont;  ;  dictgen;  ;  foundation;  ;  gui;  ;  imt;  ;  macosx;  ;  meta;  ;  metacling;  ;  multiproc;  ;  rint;  ;  testsupport;  ;  thread;  ;  unix;  ;  winnt;  ;  zip;  . core. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html:64,Guid,Guide,64,doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,https://root.cern,https://root.cern/doc/master/dir_ed1accc5bc42b26d499c0c84b15b16d5.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. base Directory Reference. Directory dependency graph for base:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  doc;  ;  inc;  ;  src;  ;  v7;  . corebase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_1c665cc5526164787b3a14a24f921a4b.html:69,Guid,Guide,69,doc/master/dir_1c665cc5526164787b3a14a24f921a4b.html,https://root.cern,https://root.cern/doc/master/dir_1c665cc5526164787b3a14a24f921a4b.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/fillpatterns.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; fillpatterns.C File Reference. Functions; void box (Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2);  ; TCanvas * fillpatterns (int w=500, int h=700);  . Function Documentation. ◆ box(). void box ; (; Int_t ; pat, . Double_t ; x1, . Double_t ; y1, . Double_t ; x2, . Double_t ; y2 . ). Definition at line 1 of file fillpatterns.C. ◆ fillpatterns(). TCanvas * fillpatterns ; (; int ; w = 500, . int ; h = 700 . ). Definition at line 23 of file fillpatterns.C. corebasedocmacrosfillpatterns.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillpatterns_8C.html:90,Guid,Guide,90,doc/master/fillpatterns_8C.html,https://root.cern,https://root.cern/doc/master/fillpatterns_8C.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/fillpatterns.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. fillpatterns.C. Go to the documentation of this file. 1void box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2); 2{; 3 // Draw an box using the fill pattern ""pat"" with the ""pat"" value; 4 // written on top.; 5 ; 6 TBox b;; 7 b.SetFillColor(1);; 8 b.SetFillStyle(pat); b.DrawBox(x1,y1,x2,y2);; 9 b.SetFillStyle(0) ; b.DrawBox(x1,y1,x2,y2);; 10 b.SetFillColor(0) ; b.SetFillStyle(1000) ;; 11 Double_t dx = (x2-x1)/3;; 12 Double_t dy = (y2-y1)/3;; 13 Double_t h = (y2-y1)/2.5;; 14 b.DrawBox(x1+dx, y1+dy, x2-dx, y2-dy);; 15 b.SetFillStyle(0);; 16 b.DrawBox(x1+dx, y1+dy, x2-dx, y2-dy);; 17 ; 18 TLatex l;; 19 l.SetTextAlign(22); l.SetTextSize(h);; 20 l.DrawLatex((x1+x2)/2, (y1+y2)/2, Form(""%d"",pat));; 21}; 22 ; 23TCanvas * fillpatterns(int w=500, int h=700); 24{; 25 // Fill patterns example. This macro shows the available fill patterns.; 26 // The first table displays the 25 fixed patterns. They cannot be; 27 // customized unlike the hatches displayed in the second table which be; 28 // cutomized using:; 29 // - gStyle->SetHatchesSpacing() to define the spacing between hatches.; 30 // - gStyle->SetHatchesLineWidth() to define the hatches line width.; 31 //; 32 // Author: Olivier Couet.; 33 ; 34 TCanvas *Pat = new TCanvas(""Fill Patterns"", """",0,0,w,h);; 35 Pat->Range(0,0,1,1);; 36 Pat->SetBorderSize(2);; 37 Pat->SetFrameFillColor(0);; 38 Double_t bh = 0.059;; 39 Double_t db = 0.01;; 40 Double_t y = 0.995;; 41 Int_t i,j=3001;; 42 ; 43 // Fixed patterns.; 44 for (i=1; i<=5; i++) {; 45 box(j++, 0.01, y-bh, 0.19, y);; 46 box(j++, 0.21, y-bh, 0.39, y);; 47 box(j++, 0.41, y-bh, 0.59, y);; 48 box(j++, 0.61, y-bh, 0.79, y);; 49 box(j++, 0.81, y-bh, 0.99, y);; 50 y = y-bh-db;; 51 }; 52 ; 53 // Hatches; 54 y = y-3*db;; 55 gStyle->SetHatchesSpacing(2.0);; 56 gStyle->SetHatchesLineWidth(1);; 57 Int_t j1 = 3144;; 58 Int_t j2 = 3305;; 59 Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fillpatterns_8C_source.html:87,Guid,Guide,87,doc/master/fillpatterns_8C_source.html,https://root.cern,https://root.cern/doc/master/fillpatterns_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/textalign.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; textalign.C File Reference. Functions; th1 Draw ();  ; lv DrawLine (0.33, 0.0, 0.33, 1.0);  ; lv DrawLine (0.6, 0.165, 1., 0.165);  ; Ta Range (0, 0, 1, 1);  ; lv SetLineColor (kBlue);  ; lv SetLineStyle (3);  ; th1 SetTextAlign (11);  ; tv2 SetTextAlign (12);  ; tv3 SetTextAlign (13);  ; th2 SetTextAlign (21);  ; th3 SetTextAlign (31);  ; th1 SetTextSize (0.12);  . Variables; TLine lv;  ; auto * th1 = new TText(0.33,0.165,""Left adjusted"");  ; auto * th2 = new TText(0.33,0.493,""Center adjusted"");  ; auto * th3 = new TText(0.33,0.823,""Right adjusted"");  ; auto * tv1 = new TText(0.66,0.165,""Bottom adjusted"");  ; auto * tv2 = new TText(0.66,0.493,""Center adjusted"");  ; auto * tv3 = new TText(0.66,0.823,""Top adjusted"");  . Function Documentation. ◆ Draw(). line Draw ; (; ). ◆ DrawLine() [1/2]. lv DrawLine ; (; 0. ; 33, . 0. ; 0, . 0. ; 33, . 1. ; 0 . ). ◆ DrawLine() [2/2]. lv DrawLine ; (; 0. ; 6, . 0. ; 165, . 1. ; , . 0. ; 165 . ). ◆ Range(). Ta Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetLineColor(). lv SetLineColor ; (; kBlue ; ). ◆ SetLineStyle(). lv SetLineStyle ; (; 3 ; ). ◆ SetTextAlign() [1/5]. tv1 SetTextAlign ; (; 11 ; ). ◆ SetTextAlign() [2/5]. tv2 SetTextAlign ; (; 12 ; ). ◆ SetTextAlign() [3/5]. tv3 SetTextAlign ; (; 13 ; ). ◆ SetTextAlign() [4/5]. th2 SetTextAlign ; (; 21 ; ). ◆ SetTextAlign() [5/5]. th3 SetTextAlign ; (; 31 ; ). ◆ SetTextSize(). th1 SetTextSize ; (; 0. ; 12). Variable Documentation. ◆ lv. TLine lv. Definition at line 5 of file textalign.C. ◆ th1. auto* th1 = new TText(0.33,0.165,""Left adjusted""). Definition at line 14 of file textalign.C. ◆ th2. auto* th2 = new TText(0.33,0.493,""Center adjusted""). Definition at line 18 of file textalign.C. ◆ th3. auto* th3 = new TText(0.33,0.823,""Right adjusted""). Definition at line 22 of file textalign.C. ◆ tv1. auto* tv1 = new TText(0.66",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textalign_8C.html:87,Guid,Guide,87,doc/master/textalign_8C.html,https://root.cern,https://root.cern/doc/master/textalign_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/textalign.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. textalign.C. Go to the documentation of this file. 1{; 2 auto *Ta = new TCanvas(""Ta"",""Ta"",0,0,500,200);; 3 Ta->Range(0,0,1,1);; 4 ; 5 TLine lv;; 6 lv.SetLineStyle(3);; 7 lv.SetLineColor(kBlue);; 8 lv.DrawLine(0.33,0.0,0.33,1.0);; 9 lv.DrawLine(0.6,0.165,1.,0.165);; 10 lv.DrawLine(0.6,0.493,1.,0.493);; 11 lv.DrawLine(0.6,0.823,1.,0.823);; 12 ; 13 // Horizontal alignment.; 14 auto *th1 = new TText(0.33,0.165,""Left adjusted"");; 15 th1->SetTextAlign(11); th1->SetTextSize(0.12);; 16 th1->Draw();; 17 ; 18 auto *th2 = new TText(0.33,0.493,""Center adjusted"");; 19 th2->SetTextAlign(21); th2->SetTextSize(0.12);; 20 th2->Draw();; 21 ; 22 auto *th3 = new TText(0.33,0.823,""Right adjusted"");; 23 th3->SetTextAlign(31); th3->SetTextSize(0.12);; 24 th3->Draw();; 25 ; 26 // Vertical alignment.; 27 auto *tv1 = new TText(0.66,0.165,""Bottom adjusted"");; 28 tv1->SetTextAlign(11); tv1->SetTextSize(0.12);; 29 tv1->Draw();; 30 ; 31 auto *tv2 = new TText(0.66,0.493,""Center adjusted"");; 32 tv2->SetTextAlign(12); tv2->SetTextSize(0.12);; 33 tv2->Draw();; 34 ; 35 auto *tv3 = new TText(0.66,0.823,""Top adjusted"");; 36 tv3->SetTextAlign(13); tv3->SetTextSize(0.12);; 37 tv3->Draw();; 38}; kBlue@ kBlueDefinition Rtypes.h:66; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TTextBase class for several text objects.Definition TText.h:22; th3auto * th3Definition textalign.C:22; lvTLine lvDefinition textalign.C:5; tv3auto * tv3Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textalign_8C_source.html:84,Guid,Guide,84,doc/master/textalign_8C_source.html,https://root.cern,https://root.cern/doc/master/textalign_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/textangle.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; textangle.C File Reference. Functions; tt Draw ();  ; a DrawArc (0.1, 0.1, 0.2, 0., 45.,""only"");  ; l DrawLine (0.1, 0.1, 0.9, 0.1);  ; m DrawMarker (0.1, 0.1);  ; Ta Range (0, 0, 1, 1);  ; a SetFillStyle (0);  ; a SetLineColor (kBlue);  ; l SetLineColor (kRed);  ; a SetLineStyle (3);  ; m SetMarkerColor (kBlue);  ; m SetMarkerStyle (20);  ; tt SetTextAlign (11);  ; tt SetTextAngle (45);  ; tt SetTextSize (0.1);  . Variables; TArc a;  ; TLine l;  ; TMarker m;  ; auto * t1 = new TLatex(0.3,0.18,""45^{o}"");  ; auto * tt = new TText(0.1,0.1,""Text angle is 45 degrees"");  . Function Documentation. ◆ Draw(). tt Draw ; (; ). ◆ DrawArc(). a DrawArc ; (; 0. ; 1, . 0. ; 1, . 0. ; 2, . 0. ; , . 45. ; , . ""only"" ;  . ). ◆ DrawLine(). l DrawLine ; (; 0. ; 1, . 0. ; 1, . 0. ; 9, . 0. ; 1 . ). ◆ DrawMarker(). m DrawMarker ; (; 0. ; 1, . 0. ; 1 . ). ◆ Range(). Ta Range ; (; 0 ; , . 0 ; , . 1 ; , . 1 ;  . ). ◆ SetFillStyle(). a SetFillStyle ; (; 0 ; ). ◆ SetLineColor() [1/2]. a SetLineColor ; (; kBlue ; ). ◆ SetLineColor() [2/2]. l SetLineColor ; (; kRed ; ). ◆ SetLineStyle(). a SetLineStyle ; (; 3 ; ). ◆ SetMarkerColor(). m SetMarkerColor ; (; kBlue ; ). ◆ SetMarkerStyle(). m SetMarkerStyle ; (; 20 ; ). ◆ SetTextAlign(). tt SetTextAlign ; (; 11 ; ). ◆ SetTextAngle(). tt SetTextAngle ; (; 45 ; ). ◆ SetTextSize(). tt SetTextSize ; (; 0. ; 1). Variable Documentation. ◆ a. TArc a. Definition at line 12 of file textangle.C. ◆ l. TLine l. Definition at line 4 of file textangle.C. ◆ m. TMarker m. Definition at line 8 of file textangle.C. ◆ t1. auto* t1 = new TLatex(0.3,0.18,""45^{o}""). Definition at line 20 of file textangle.C. ◆ tt. auto* tt = new TText(0.1,0.1,""Text angle is 45 degrees""). Definition at line 16 of file textangle.C. corebasedocmacrostextangle.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textangle_8C.html:87,Guid,Guide,87,doc/master/textangle_8C.html,https://root.cern,https://root.cern/doc/master/textangle_8C.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/doc/macros/textangle.C Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. textangle.C. Go to the documentation of this file. 1{; 2 auto *Ta = new TCanvas(""Ta"",""Text angle"",0,0,300,326);; 3 Ta->Range(0,0,1,1);; 4 TLine l;; 5 l.SetLineColor(kRed);; 6 l.DrawLine(0.1,0.1,0.9,0.1);; 7 l.DrawLine(0.1,0.1,0.9,0.9);; 8 TMarker m;; 9 m.SetMarkerStyle(20);; 10 m.SetMarkerColor(kBlue);; 11 m.DrawMarker(0.1,0.1);; 12 TArc a;; 13 a.SetFillStyle(0);; 14 a.SetLineColor(kBlue); a.SetLineStyle(3);; 15 a.DrawArc(0.1, 0.1, 0.2, 0.,45.,""only"");; 16 auto *tt = new TText(0.1,0.1,""Text angle is 45 degrees"");; 17 tt->SetTextAlign(11); tt->SetTextSize(0.1);; 18 tt->SetTextAngle(45);; 19 tt->Draw();; 20 auto *t1 = new TLatex(0.3,0.18,""45^{o}"");; 21 t1->Draw();; 22}; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TArcCreate an Arc.Definition TArc.h:26; TArc::DrawArcvirtual TArc * DrawArc(Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360, Option_t *option="""")Draw this arc with new coordinates.Definition TArc.cxx:79; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textangle_8C_source.html:84,Guid,Guide,84,doc/master/textangle_8C_source.html,https://root.cern,https://root.cern/doc/master/textangle_8C_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  Bswapcpy.h;  ;  Buttons.h;  ;  Bytes.h;  ;  Byteswap.h;  ;  GLConstants.h;  ;  Gtypes.h;  ;  Htypes.h;  ;  KeySymbols.h;  ;  Match.h;  ;  MessageTypes.h;  ;  RConfig.h;  ;  Riostream.h;  ;  Rpair.h;  ;  RQ_OBJECT.h;  ;  RStipples.h;  ;  Rtypes.h;  ;  RtypesImp.h;  ;  Strlen.h;  ;  TApplication.h;  ;  TAtt3D.h;  ;  TAttAxis.h;  ;  TAttBBox.h;  ;  TAttBBox2D.h;  ;  TAttFill.h;  ;  TAttLine.h;  ;  TAttMarker.h;  ;  TAttPad.h;  ;  TAttText.h;  ;  TBase64.h;  ;  TBenchmark.h;  ;  TBuffer.h;  ;  TBuffer3D.h;  ;  TBuffer3DTypes.h;  ;  TColor.h;  ;  TColorGradient.h;  ;  TDatime.h;  ;  TDirectory.h;  ;  TEnv.h;  ;  TException.h;  ;  TExec.h;  ;  TFileCollection.h;  ;  TFileInfo.h;  ;  TFolder.h;  ;  TInetAddress.h;  ;  TMacro.h;  ;  TMathBase.h;  ;  TMD5.h;  ;  TMemberInspector.h;  ;  TMessageHandler.h;  ;  TNamed.h;  ;  TNotifyLink.h;  ;  TObject.h;  ;  TObjString.h;  ;  TParameter.h;  ;  TPluginManager.h;  ;  TPoint.h;  ;  TPRegexp.h;  ;  TProcessID.h;  ;  TProcessUUID.h;  ;  TQClass.h;  ;  TQCommand.h;  ;  TQConnection.h;  ;  TQObject.h;  ;  TRedirectOutputGuard.h;  ;  TRef.h;  ;  TRefCnt.h;  ;  TRegexp.h;  ;  TRemoteObject.h;  ;  TROOT.h;  ;  TRootIOCtor.h;  ;  TStopwatch.h;  ;  TStorage.h;  ;  TString.h;  ;  TStringLong.h;  ;  TStyle.h;  ;  TSysEvtHandler.h;  ;  TSystem.h;  ;  TSystemDirectory.h;  ;  TSystemFile.h;  ;  TTask.h;  ;  TThreadSlots.h;  ;  TTime.h;  ;  TTimer.h;  ;  TTimeStamp.h;  ;  TUri.h;  ;  TUrl.h;  ;  TUUID.h;  ;  TVersionCheck.h;  ;  TVirtualAuth.h;  ;  TVirtualFFT.h;  ;  TVirtualGL.h;  ;  TVirtualMapFile.h;  ;  TVirtualMonitoring.h;  ;  TVirtualMutex.h;  ;  TVirtualPad.h;  ;  TVirtualPadEditor.h;  ;  TVirtualPadPainter.h;  ;  TVirtualPerfStats.h;  ;  TVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_581b2f84e81921659261a687f8475ad3.html:73,Guid,Guide,73,doc/master/dir_581b2f84e81921659261a687f8475ad3.html,https://root.cern,https://root.cern/doc/master/dir_581b2f84e81921659261a687f8475ad3.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Buttons.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Enumerations ; Buttons.h File Reference. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Enumerations; enum  EEditMode { ;   kPolyLine = 1; , kSPolyLine = 2; , kPolyGone = 3; , kSPolyGone = 4; , ;   kBox = 5; , kDelete = 6; , kPad = 7; , kText = 8; , ;   kEditor = 9; , kExit = 10; , kPave = 11; , kPaveLabel = 12; , ;   kPaveText = 13; , kPavesText = 14; , kEllipse = 15; , kArc = 16; , ;   kLine = 17; , kArrow = 18; , kGraph = 19; , kMarker = 20; , ;   kPolyMarker = 21; , kPolyLine3D = 22; , kWbox = 23; , kGaxis = 24; , ;   kF1 = 25; , kF2 = 26; , kF3 = 27; , kDiamond = 28; , ;   kPolyMarker3D = 29; , kButton = 101; , kCutG =100; , kCurlyLine =200; , ;   kCurlyArc = 201. };  ; enum  EEventType { ;   kNoEvent = 0; , kButton1Down = 1; , kButton2Down = 2; , kButton3Down = 3; , ;   kKeyDown = 4; , kWheelUp = 5; , kWheelDown = 6; , kButton1Shift = 7; , ;   kButton1ShiftMotion = 8; , kButton1Up = 11; , kButton2Up = 12; , kButton3Up = 13; , ;   kKeyUp = 14; , kButton1Motion = 21; , kButton2Motion = 22; , kButton3Motion = 23; , ;   kKeyPress = 24; , kArrowKeyPress = 25; , kArrowKeyRelease = 26; , kButton1Locate = 41; , ;   kButton2Locate = 42; , kButton3Locate = 43; , kESC = 27; , kMouseMotion = 51; , ;   kMouseEnter = 52; , kMouseLeave = 53; , kButton1Double = 61; , kButton2Double = 62; , ;   kButton3Double = 63. };  . Enumeration Type Documentation. ◆ EEditMode. enum EEditMode. EnumeratorkPolyLine ; kSPolyLine ; kPolyGone ; kSPolyGone ; kBox ; kDelete ; kPad ; kText ; kEditor ; kExit ; kPave ; kPaveLabel ; kPaveText ; kPavesText ; kEllipse ; kArc ; kLine ; kArrow ; kGraph ; kMarker ; kPolyMarker ; kPolyLine3D ; kWbox ; kGaxis ; kF1 ; kF2 ; kF3 ; kDiamond ; kPolyMarker3D ; kButton ; kCutG ; kCurlyLine ; kCurlyArc . Definition at line 27 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Buttons_8h.html:78,Guid,Guide,78,doc/master/Buttons_8h.html,https://root.cern,https://root.cern/doc/master/Buttons_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Bytes.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions ; Bytes.h File Reference. #include ""RtypesCore.h""; #include <cstring>. Include dependency graph for Bytes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; void frombuf (char *&buf, Bool_t *x);  ; void frombuf (char *&buf, Char_t *x);  ; void frombuf (char *&buf, Double_t *x);  ; void frombuf (char *&buf, Float_t *x);  ; void frombuf (char *&buf, Int_t *x);  ; void frombuf (char *&buf, Long64_t *x);  ; void frombuf (char *&buf, Long_t *x);  ; void frombuf (char *&buf, Short_t *x);  ; void frombuf (char *&buf, UChar_t *x);  ; void frombuf (char *&buf, UInt_t *x);  ; void frombuf (char *&buf, ULong64_t *x);  ; void frombuf (char *&buf, ULong_t *x);  ; void frombuf (char *&buf, UShort_t *x);  ; Double_t host2net (Double_t x);  ; Float_t host2net (Float_t x);  ; Int_t host2net (Int_t x);  ; Long64_t host2net (Long64_t x);  ; Long_t host2net (Long_t x);  ; Short_t host2net (Short_t x);  ; UInt_t host2net (UInt_t x);  ; ULong_t host2net (ULong64_t x);  ; ULong_t host2net (ULong_t x);  ; UShort_t host2net (UShort_t x);  ; Double_t net2host (Double_t x);  ; Float_t net2host (Float_t x);  ; Int_t net2host (Int_t x);  ; Long64_t net2host (Long64_t x);  ; Long_t net2host (Long_t x);  ; Short_t net2host (Short_t x);  ; UInt_t net2host (UInt_t x);  ; ULong64_t net2host (ULong64_t x);  ; ULong_t net2host (ULong_t x);  ; UShort_t net2host (UShort_t x);  ; void tobuf (char *&buf, Bool_t x);  ; void tobuf (char *&buf, Char_t x);  ; void tobuf (char *&buf, Double_t x);  ; void tobuf (char *&buf, Float_t x);  ; void tobuf (char *&buf, Int_t x);  ; void tobuf (char *&buf, Long64_t x);  ; void tobuf (char *&buf, Long_t x);  ; void tobuf (char *&buf, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Bytes_8h.html:76,Guid,Guide,76,doc/master/Bytes_8h.html,https://root.cern,https://root.cern/doc/master/Bytes_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Bytes.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Bytes.h. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_Bytes; 12#define ROOT_Bytes; 13 ; 14 ; 15//////////////////////////////////////////////////////////////////////////; 16// //; 17// Bytes //; 18// //; 19// A set of inline byte handling routines. //; 20// //; 21// The set of tobuf() and frombuf() routines take care of packing a //; 22// basic type value into a buffer in network byte order (i.e. they //; 23// perform byte swapping when needed). The buffer does not have to //; 24// start on a machine (long) word boundary. //; 25// //; 26// For __GNUC__ on linux on i486 processors and up //; 27// use the `bswap' opcode provided by the GNU C Library. //; 28// //; 29// The set of host2net() and net2host() routines convert a basic type //; 30// value from host to network byte order and vice versa. On BIG ENDIAN //; 31// machines this is a no op. //; 32// //; 33//////////////////////////////////////////////////////////////////////////; 34 ; 35#include ""RtypesCore.h""; 36 ; 37#include <cstring>; 38 ; 39#if (defined(__linux) || defined(__APPLE__)) && \; 40 (defined(__i386__) || defined(__x86_64__)) && \; 41 defined(__GNUC__); 42#define R__USEASMSWAP; 43#endif; 44 ; 45//Big bug in inline byte swapping code with Intel's icc; 46#if defined(__INTEL_COMPILER) && __INTEL_COMPILER < 1000; 47#undef R__USEASMSWAP; 48#endif; 49 ; 50#if defined(R__USEASMSWAP); 51#include ""Byteswap.h""; 52#endif; 53 ; 54//______________________________________________________",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Bytes_8h_source.html:73,Guid,Guide,73,doc/master/Bytes_8h_source.html,https://root.cern,https://root.cern/doc/master/Bytes_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/ROOT/EExecutionPolicy.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. EExecutionPolicy.hxx. Go to the documentation of this file. 1#ifndef ROOT_Internal_ExecutionPolicy; 2#define ROOT_Internal_ExecutionPolicy; 3 ; 4namespace ROOT {; 5enum class EExecutionPolicy { kSequential, kMultiThread, kMultiProcess };; 6}; 7 ; 8#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::EExecutionPolicy::kMultiThread@ kMultiThread. corebaseincROOTEExecutionPolicy.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/EExecutionPolicy_8hxx_source.html:91,Guid,Guide,91,doc/master/EExecutionPolicy_8hxx_source.html,https://root.cern,https://root.cern/doc/master/EExecutionPolicy_8hxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/ROOT/EExecutionPolicy.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. EExecutionPolicy.hxx. Go to the documentation of this file. 1#ifndef ROOT_Internal_ExecutionPolicy; 2#define ROOT_Internal_ExecutionPolicy; 3 ; 4namespace ROOT {; 5enum class EExecutionPolicy { kSequential, kMultiThread, kMultiProcess };; 6}; 7 ; 8#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kMultiProcess@ kMultiProcess; ROOT::EExecutionPolicy::kSequential@ kSequential; ROOT::EExecutionPolicy::kMultiThread@ kMultiThread. corebaseincROOTEExecutionPolicy.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/EExecutionPolicy_8hxx_source.html:90,Guid,Guide,90,doc/v632/EExecutionPolicy_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/EExecutionPolicy_8hxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/ROOT/StringConv.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. StringConv.hxx. Go to the documentation of this file. 1// @(#)root/base; 2// Author: Philippe Canal 12/2015; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_StringConv; 13#define ROOT_StringConv; 14 ; 15 ; 16#include <string_view>; 17#include ""Rtypes.h""; 18#include ""RConfigure.h""; 19#include <cmath>; 20 ; 21namespace ROOT {; 22 ; 23 // Adapted from http://stackoverflow.com/questions/3758606/; 24 // how-to-convert-byte-size-into-human-readable-format-in-java; 25 // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; 26 // However those sources use the 'conventional' 'legacy' nomenclature,; 27 // rather than the official Standard Units. See; 28 // http://physics.nist.gov/cuu/Units/binary.html; 29 // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; 30 ; 31///////////////////////////////////////////////////////////////////////////////; 32/// Return the size expressed in 'human readable' format.; 33/// \param bytes the size in bytes to be converted; 34/// \param si whether to use the SI units or not.; 35/// \param coeff return the size expressed in the new unit.; 36/// \param units return a pointer to the string representation of the new unit; 37template <typename value_type>; 38void ToHumanReadableSize(value_type bytes,; 39 Bool_t si,; 40 Double_t *coeff,; 41 const char **units); 42{; 43 // Static lookup table of byte-based SI units; 44 static const char *const suffix[][2] =; 45 { { ""B"", ""B"" },; 46 { ""KB"", ""KiB"" },; 47 { ""MB"", ""MiB"" },; 48 { ""GB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/StringConv_8hxx_source.html:85,Guid,Guide,85,doc/master/StringConv_8hxx_source.html,https://root.cern,https://root.cern/doc/master/StringConv_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/ROOT/StringConv.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. StringConv.hxx. Go to the documentation of this file. 1// @(#)root/base; 2// Author: Philippe Canal 12/2015; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2015, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_StringConv; 13#define ROOT_StringConv; 14 ; 15 ; 16#include <string_view>; 17#include ""Rtypes.h""; 18#include ""RConfigure.h""; 19#include <cmath>; 20 ; 21namespace ROOT {; 22 ; 23 // Adapted from http://stackoverflow.com/questions/3758606/; 24 // how-to-convert-byte-size-into-human-readable-format-in-java; 25 // and http://agentzlerich.blogspot.com/2011/01/converting-to-and-from-human-readable.html; 26 // However those sources use the 'conventional' 'legacy' nomenclature,; 27 // rather than the official Standard Units. See; 28 // http://physics.nist.gov/cuu/Units/binary.html; 29 // and http://www.dr-lex.be/info-stuff/bytecalc.html for example.; 30 ; 31///////////////////////////////////////////////////////////////////////////////; 32/// Return the size expressed in 'human readable' format.; 33/// \param bytes the size in bytes to be converted; 34/// \param si whether to use the SI units or not.; 35/// \param coeff return the size expressed in the new unit.; 36/// \param units return a pointer to the string representation of the new unit; 37template <typename value_type>; 38void ToHumanReadableSize(value_type bytes,; 39 Bool_t si,; 40 Double_t *coeff,; 41 const char **units); 42{; 43 // Static lookup table of byte-based SI units; 44 static const char *const suffix[][2] =; 45 { { ""B"", ""B"" },; 46 { ""KB"", ""KiB"" },; 47 { ""MB"", ""MiB"" },; 48 { ""GB""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/StringConv_8hxx_source.html:84,Guid,Guide,84,doc/v632/StringConv_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/StringConv_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/RQ_OBJECT.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; RQ_OBJECT.h File Reference. #include <TQObject.h>; #include <Varargs.h>. Include dependency graph for RQ_OBJECT.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define RQ_OBJECT(sender_class);  ; #define RQ_OBJECT1(sender_class);  ; #define RQ_OBJECT2(sender_class);  . Macro Definition Documentation. ◆ RQ_OBJECT. #define RQ_OBJECT; (;  ; sender_class). Value: RQ_OBJECT1(sender_class)\; RQ_OBJECT2(sender_class); RQ_OBJECT1#define RQ_OBJECT1(sender_class)Definition RQ_OBJECT.h:66. Definition at line 87 of file RQ_OBJECT.h. ◆ RQ_OBJECT1. #define RQ_OBJECT1; (;  ; sender_class). Value:private:\; TQObjSender fQObject;\; public:\; TList *GetListOfSignals() const {return fQObject.GetListOfSignals();}\; Bool_t Connect(const char *sig,const char *cl,void *rcvr,const char *slt)\; {fQObject.SetSender(this);fQObject.SetSenderClassName(sender_class);return fQObject.Connect(sig,cl,rcvr,slt);}\; Bool_t Disconnect(const char *sig=nullptr,void *rcvr=nullptr,const char *slt=nullptr){return fQObject.Disconnect(sig,rcvr,slt);}\; void HighPriority(const char *signal_name,const char *slot_name=nullptr){fQObject.HighPriority(signal_name,slot_name);}\; void LowPriority(const char *signal_name,const char *slot_name=nullptr){fQObject.LowPriority(signal_name,slot_name);}\; template <typename... T> void EmitVA(const char *signal_name, Int_t nargs, const T&... params) \; { fQObject.EmitVA(signal_name,nargs,params...); } \; void Emit(const char *signal){EmitVA(signal, /*nargs*/0);} \; template <typename T> void Emit(const char *signal, const T& arg) { EmitVA(signal, /*nargs*/ 1, arg); } \; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RQ__OBJECT_8h.html:80,Guid,Guide,80,doc/master/RQ__OBJECT_8h.html,https://root.cern,https://root.cern/doc/master/RQ__OBJECT_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/RQ_OBJECT.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RQ_OBJECT.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_RQ_OBJECT; 13#define ROOT_RQ_OBJECT; 14 ; 15#include <TQObject.h>; 16#include <Varargs.h>; 17 ; 18 ; 19//---- RQ_OBJECT macro -----------------------------------------------; 20//; 21// Macro is used to delegate TQObject methods to other classes; 22// Example:; 23//; 24// #include ""RQ_OBJECT.h""; 25//; 26// class A {; 27// RQ_OBJECT(""A""); 28// private:; 29// Int_t fValue;; 30// public:; 31// A() : fValue(0) { }; 32// ~A() { }; 33//; 34// void SetValue(Int_t value); 35// void PrintValue() const { printf(""value=%d\n"", fValue); }; 36// Int_t GetValue() const { return fValue; }; 37// };; 38//; 39// void A::SetValue(Int_t value); 40// {; 41// // Sets new value; 42//; 43// // to prevent infinite looping in the case; 44// // of cyclic connections; 45// if (value != fValue) {; 46// fValue = value;; 47// Emit(""SetValue(Int_t)"", fValue);; 48// }; 49// }; 50//; 51// Load this class into root session and try the following:; 52//; 53// a = new A();; 54// b = new A();; 55//; 56// Here is one way to connect two of these objects together:; 57//; 58// a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; 59//; 60// Calling a->SetValue(79) will make a emit a signal, which b; 61// will receive, i.e. b->SetValue(79) is invoked. b will in; 62// turn emit the same signal, which nobody receives, since no; 63// slot has been connected to it, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RQ__OBJECT_8h_source.html:77,Guid,Guide,77,doc/master/RQ__OBJECT_8h_source.html,https://root.cern,https://root.cern/doc/master/RQ__OBJECT_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Rtypes.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Enumerations |; Functions ; Rtypes.h File Reference. #include ""RtypesCore.h""; #include <cstdio>; #include ""strtok.h""; #include ""strlcpy.h""; #include ""snprintf.h""; #include <type_traits>; #include <typeinfo>; #include <atomic>; #include ""TGenericClassInfo.h""; #include ""TIsAProxy.h""; #include <string>. Include dependency graph for Rtypes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector< T >;  ; class  ROOT::Internal::TCDGIILIBase;  ; class  ROOT::Internal::TDefaultInitBehavior;  ; struct  ROOT::Internal::THashConsistencyHolder< T >;  ; class  ROOT::Internal::TInitBehavior;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define _ClassDefBase_(name, id, virtual_keyword, overrd);  Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ;  ; #define _ClassDefInline_(name, id, virtual_keyword, overrd);  ; #define _ClassDefOutline_(name, id, virtual_keyword, overrd);  ; #define BIT(n)   (1ULL << (n));  ; #define ClassDef(name, id);  ; #define ClassDef2T2(name, Tmpl1, Tmpl2);  ; #define ClassDef3T2(name, Tmpl1, Tmpl2, Tmpl3);  ; #define ClassDefInline(name, id);  ; #define ClassDefInlineNV(name, id);  ; #define ClassDefInlineOverride(name, id);  ; #define ClassDefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h.html:77,Guid,Guide,77,doc/master/Rtypes_8h.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Rtypes.h File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Enumerations |; Functions ; Rtypes.h File Reference. #include ""RtypesCore.h""; #include <cstdio>; #include ""strtok.h""; #include ""strlcpy.h""; #include ""snprintf.h""; #include <type_traits>; #include <typeinfo>; #include <atomic>; #include ""TGenericClassInfo.h""; #include ""TIsAProxy.h""; #include <string>. Include dependency graph for Rtypes.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::ClassDefGenerateInitInstanceLocalInjector< T >;  ; class  ROOT::Internal::TCDGIILIBase;  ; class  ROOT::Internal::TDefaultInitBehavior;  ; struct  ROOT::Internal::THashConsistencyHolder< T >;  ; class  ROOT::Internal::TInitBehavior;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define _ClassDefBase_(name, id, virtual_keyword, overrd);  Common part being called both by _ClassDefOutline_ and _ClassDefInline_. ;  ; #define _ClassDefInline_(name, id, virtual_keyword, overrd);  ; #define _ClassDefOutline_(name, id, virtual_keyword, overrd);  ; #define BIT(n)   (1ULL << (n));  ; #define ClassDef(name, id);  ; #define ClassDef2T2(name, Tmpl1, Tmpl2);  ; #define ClassDef3T2(name, Tmpl1, Tmpl2, Tmpl3);  ; #define ClassDefInline(name, id);  ; #define ClassDefInlineNV(name, id);  ; #define ClassDefInlineOverride(name, id);  ; #define ClassDefNV(name, id);  ; #define ClassDefOverride(name, id);  ; #define ClassDefT(name, id);  This ClassDefT is strictly redundant and is kept only for backward compatibility. ;  ; #define ClassDefT2(name, Tmpl);  ; #define ClassDefTNV(name, id);  ; #define ClassImp(name)   ClassImpUnique(name,default);  ; #define ClassImp2T(name, Tmpl1, Tmpl2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h.html:76,Guid,Guide,76,doc/v632/Rtypes_8h.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Rtypes.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Rtypes.h. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_Rtypes; 12#define ROOT_Rtypes; 13 ; 14//////////////////////////////////////////////////////////////////////////; 15// //; 16// Rtypes //; 17// //; 18// Basic types used by ROOT; ClassDef macros. //; 19// //; 20//////////////////////////////////////////////////////////////////////////; 21 ; 22 ; 23#include ""RtypesCore.h""; 24// #include ""DllImport.h"" // included via RtypesCore.h, not used here; 25 ; 26#ifndef R__LESS_INCLUDES; 27#include <cstdio>; 28#include ""strtok.h"" // provides R__STRTOK_R with <cstring> include; 29#include ""strlcpy.h"" // part of string.h on systems that have it; 30#include ""snprintf.h"" // part of stdio.h on systems that have it; 31#include <type_traits>; 32#endif; 33 ; 34#include <typeinfo>; 35#include <atomic>; 36 ; 37#ifndef __CLING__; 38// __attribute__ is not supported on Windows, but it is internally needed by Cling; 39// for autoloading and Clad rely on __attribute__((annotate(""D""))); 40#if defined(R__WIN32); 41#define __attribute__(unused); 42#endif; 43#endif; 44 ; 45//---- forward declared class types --------------------------------------------; 46 ; 47class TClass;; 48class TBuffer;; 49class TDirectory;; 50class TMemberInspector;; 51class TObject;; 52class TNamed;; 53class TCollection;; 54class TFileMergeInfo;; 55class TString;; 56 ; 57//Moved from TSystem.; 58enum ESysConstants {; 59 kMAXSIGNALS = 16,; 60 kMAXPATHLEN = 8192,; 61 kBUFFERSIZE = 8192,; 62 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Rtypes_8h_source.html:74,Guid,Guide,74,doc/master/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/master/Rtypes_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Rtypes.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Rtypes.h. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_Rtypes; 12#define ROOT_Rtypes; 13 ; 14//////////////////////////////////////////////////////////////////////////; 15// //; 16// Rtypes //; 17// //; 18// Basic types used by ROOT; ClassDef macros. //; 19// //; 20//////////////////////////////////////////////////////////////////////////; 21 ; 22 ; 23#include ""RtypesCore.h""; 24// #include ""DllImport.h"" // included via RtypesCore.h, not used here; 25 ; 26#ifndef R__LESS_INCLUDES; 27#include <cstdio>; 28#include ""strtok.h"" // provides R__STRTOK_R with <cstring> include; 29#include ""strlcpy.h"" // part of string.h on systems that have it; 30#include ""snprintf.h"" // part of stdio.h on systems that have it; 31#include <type_traits>; 32#endif; 33 ; 34#include <typeinfo>; 35#include <atomic>; 36 ; 37#ifndef __CLING__; 38// __attribute__ is not supported on Windows, but it is internally needed by Cling; 39// for autoloading and Clad rely on __attribute__((annotate(""D""))); 40#if defined(R__WIN32); 41#define __attribute__(unused); 42#endif; 43#endif; 44 ; 45//---- forward declared class types --------------------------------------------; 46 ; 47class TClass;; 48class TBuffer;; 49class TDirectory;; 50class TMemberInspector;; 51class TObject;; 52class TNamed;; 53class TCollection;; 54class TFileMergeInfo;; 55class TString;; 56 ; 57//Moved from TSystem.; 58enum ESysConstants {; 59 kMAXSIGNALS = 16,; 60 kMAXPATHLEN = 8192,; 61 kBUFFERSIZE = 8192,; 62 k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/Rtypes_8h_source.html:73,Guid,Guide,73,doc/v632/Rtypes_8h_source.html,https://root.cern,https://root.cern/doc/v632/Rtypes_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TApplication.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TApplication.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 22/12/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TApplication; 13#define ROOT_TApplication; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TApplication //; 19// //; 20// This class creates the ROOT Application Environment that interfaces //; 21// to the windowing system eventloop and eventhandlers. //; 22// This class must be instantiated exactly once in any given //; 23// application. Normally the specific application class inherits from //; 24// TApplication (see TRint). //; 25// //; 26//////////////////////////////////////////////////////////////////////////; 27 ; 28#include ""TObject.h""; 29 ; 30#include ""TQObject.h""; 31 ; 32#include ""TApplicationImp.h""; 33 ; 34class TObjArray;; 35class TTimer;; 36class TSignalHandler;; 37 ; 38 ; 39class TApplication : public TObject, public TQObject {; 40 ; 41public:; 42 // TApplication specific bits; 43 enum EStatusBits {; 44 kProcessRemotely = BIT(15), // TRUE if this line has to be processed remotely; 45 kDefaultApplication = BIT(16) // TRUE if created via CreateApplication(); 46 };; 47 // TApplication specific bits for fFiles; 48 enum EFileBits {; 49 kExpression = BIT(14) // If the arguments is an expression rather than a file.; 50 };; 51 enum EExitOnException {; 52 kDontExit,; 53 kExit,; 54 kAbort; 55 };; 56 ; 57private:; 58 Int_t fArgc; //Number of com mand line arguments; 59 char **fArgv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:80,Guid,Guide,80,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttAxis.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttAxis.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TAttAxis; 13#define ROOT_TAttAxis; 14 ; 15#include ""Rtypes.h""; 16 ; 17 ; 18class TAttAxis {; 19protected:; 20 Int_t fNdivisions; ///< Number of divisions(10000*n3 + 100*n2 + n1); 21 Color_t fAxisColor; ///< Color of the line axis; 22 Color_t fLabelColor; ///< Color of labels; 23 Style_t fLabelFont; ///< Font for labels; 24 Float_t fLabelOffset; ///< Offset of labels; 25 Float_t fLabelSize; ///< Size of labels; 26 Float_t fTickLength; ///< Length of tick marks; 27 Float_t fTitleOffset; ///< Offset of axis title; 28 Float_t fTitleSize; ///< Size of axis title; 29 Color_t fTitleColor; ///< Color of axis title; 30 Style_t fTitleFont; ///< Font for axis title; 31 ; 32public:; 33 TAttAxis();; 34 virtual ~TAttAxis();; 35 void Copy(TAttAxis &attaxis) const;; 36 virtual Int_t GetNdivisions() const {return fNdivisions;}; 37 virtual Color_t GetAxisColor() const {return fAxisColor;}; 38 virtual Color_t GetLabelColor() const {return fLabelColor;}; 39 virtual Style_t GetLabelFont() const {return fLabelFont;}; 40 virtual Float_t GetLabelOffset() const {return fLabelOffset;}; 41 virtual Float_t GetLabelSize() const {return fLabelSize;}; 42 virtual Int_t GetMaxDigits() const {return (Int_t)(fNdivisions/1000000);}; 43 virtual Float_t GetTitleOffset() const {return fTitleOffset;}; 44 virtual Float_t GetTitleSize() const {return fTitleSize;}; 45 virtual Float_t GetTickL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttAxis_8h_source.html:76,Guid,Guide,76,doc/master/TAttAxis_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttAxis_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttFill.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttFill.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TAttFill; 13#define ROOT_TAttFill; 14 ; 15 ; 16#include ""Rtypes.h""; 17 ; 18 ; 19class TAttFill {; 20 ; 21protected:; 22 Color_t fFillColor; ///< Fill area color; 23 Style_t fFillStyle; ///< Fill area style; 24 ; 25public:; 26 TAttFill();; 27 TAttFill(Color_t fcolor,Style_t fstyle);; 28 virtual ~TAttFill();; 29 void Copy(TAttFill &attfill) const;; 30 virtual Color_t GetFillColor() const { return fFillColor; } ///< Return the fill area color; 31 virtual Style_t GetFillStyle() const { return fFillStyle; } ///< Return the fill area style; 32 virtual Bool_t IsTransparent() const;; 33 virtual void Modify();; 34 virtual void ResetAttFill(Option_t *option="""");; 35 virtual void SaveFillAttributes(std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);; 36 virtual void SetFillAttributes(); // *MENU*; 37 virtual void SetFillColor(Color_t fcolor) { fFillColor = fcolor; } ///< Set the fill area color; 38 virtual void SetFillColorAlpha(Color_t fcolor, Float_t falpha);; 39 virtual void SetFillStyle(Style_t fstyle) { fFillStyle = fstyle; } ///< Set the fill area style; 40 ; 41 ClassDef(TAttFill,2) //Fill area attributes; 42};; 43 ; 44inline Bool_t TAttFill::IsTransparent() const; 45{ return fFillStyle >= 4000 && fFillStyle <= 4100 ? kTRUE : kFALSE; }; 46 ; 47 enum EFillStyle {kFDotted1 = 3001, kFDotted2 = 3002, kFDotted3 = 3003,; 48 kFHatched1 = 300",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttFill_8h_source.html:76,Guid,Guide,76,doc/master/TAttFill_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttFill_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttLine.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; TAttLine.h File Reference. #include ""Rtypes.h"". Include dependency graph for TAttLine.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TAttLine;  Line Attributes class. More...;  . Enumerations; enum  ELineStyle { kSolid = 1; , kDashed; , kDotted; , kDashDotted; };  . Enumeration Type Documentation. ◆ ELineStyle. enum ELineStyle. EnumeratorkSolid ; kDashed ; kDotted ; kDashDotted . Definition at line 48 of file TAttLine.h. corebaseincTAttLine.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttLine_8h.html:79,Guid,Guide,79,doc/master/TAttLine_8h.html,https://root.cern,https://root.cern/doc/master/TAttLine_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttLine.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttLine.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TAttLine; 13#define ROOT_TAttLine; 14 ; 15 ; 16#include ""Rtypes.h""; 17 ; 18class TAttLine {; 19 ; 20protected:; 21 Color_t fLineColor; ///< Line color; 22 Style_t fLineStyle; ///< Line style; 23 Width_t fLineWidth; ///< Line width; 24 ; 25public:; 26 ; 27 TAttLine();; 28 TAttLine(Color_t lcolor,Style_t lstyle, Width_t lwidth);; 29 virtual ~TAttLine();; 30 ; 31 void Copy(TAttLine &attline) const;; 32 Int_t DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2 );; 33 virtual Color_t GetLineColor() const {return fLineColor;} ///< Return the line color; 34 virtual Style_t GetLineStyle() const {return fLineStyle;} ///< Return the line style; 35 virtual Width_t GetLineWidth() const {return fLineWidth;} ///< Return the line width; 36 virtual void Modify();; 37 virtual void ResetAttLine(Option_t *option="""");; 38 virtual void SaveLineAttributes(std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1);; 39 virtual void SetLineAttributes(); // *MENU*; 40 virtual void SetLineColor(Color_t lcolor) { fLineColor = lcolor;} ///< Set the line color; 41 virtual void SetLineColorAlpha(Color_t lcolor, Float_t lalpha);; 42 virtual void SetLineStyle(Style_t lstyle) { fLineStyle = lstyle;} ///< Set the line style; 43 virtual void SetLineWidth(Width_t lwidth) { fLineWidth = lwidth;} ///< Set the line width; 44 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttLine_8h_source.html:76,Guid,Guide,76,doc/master/TAttLine_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttLine_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttMarker.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; TAttMarker.h File Reference. #include ""Rtypes.h"". Include dependency graph for TAttMarker.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TAttMarker;  Marker Attributes class. More...;  . Enumerations; enum  EMarkerStyle { ;   kDot =1; , kPlus; , kStar; , kCircle =4; , ;   kMultiply =5; , kFullDotSmall =6; , kFullDotMedium =7; , kFullDotLarge =8; , ;   kFullCircle =20; , kFullSquare =21; , kFullTriangleUp =22; , kFullTriangleDown =23; , ;   kOpenCircle =24; , kOpenSquare =25; , kOpenTriangleUp =26; , kOpenDiamond =27; , ;   kOpenCross =28; , kFullStar =29; , kOpenStar =30; , kOpenTriangleDown =32; , ;   kFullDiamond =33; , kFullCross =34; , kOpenDiamondCross =35; , kOpenSquareDiagonal =36; , ;   kOpenThreeTriangles =37; , kOctagonCross =38; , kFullThreeTriangles =39; , kOpenFourTrianglesX =40; , ;   kFullFourTrianglesX =41; , kOpenDoubleDiamond =42; , kFullDoubleDiamond =43; , kOpenFourTrianglesPlus =44; , ;   kFullFourTrianglesPlus =45; , kOpenCrossX =46; , kFullCrossX =47; , kFourSquaresX =48; , ;   kFourSquaresPlus =49. };  . Enumeration Type Documentation. ◆ EMarkerStyle. enum EMarkerStyle. EnumeratorkDot ; kPlus ; kStar ; kCircle ; kMultiply ; kFullDotSmall ; kFullDotMedium ; kFullDotLarge ; kFullCircle ; kFullSquare ; kFullTriangleUp ; kFullTriangleDown ; kOpenCircle ; kOpenSquare ; kOpenTriangleUp ; kOpenDiamond ; kOpenCross ; kFullStar ; kOpenStar ; kOpenTriangleDown ; kFullDiamond ; kFullCross ; kOpenDiamondCross ; kOpenSquareDiagonal ; kOpenThreeTriangles ; kOctagonCross ; kFullThreeTriangles ; kOpenFourTrianglesX ; kFullFourTrianglesX ; kOpenDoubleDiamond ; kFullDoubleDiamond ; kOpenFourTria",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8h.html:81,Guid,Guide,81,doc/master/TAttMarker_8h.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttMarker.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttMarker.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/05/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TAttMarker; 13#define ROOT_TAttMarker; 14 ; 15 ; 16#include ""Rtypes.h""; 17 ; 18 ; 19class TAttMarker {; 20 ; 21protected:; 22 Color_t fMarkerColor; ///< Marker color; 23 Style_t fMarkerStyle; ///< Marker style; 24 Size_t fMarkerSize; ///< Marker size; 25 ; 26public:; 27 TAttMarker();; 28 TAttMarker(Color_t color, Style_t style, Size_t msize);; 29 virtual ~TAttMarker();; 30 void Copy(TAttMarker &attmarker) const;; 31 virtual Color_t GetMarkerColor() const {return fMarkerColor;} ///< Return the marker color; 32 virtual Style_t GetMarkerStyle() const {return fMarkerStyle;} ///< Return the marker style; 33 virtual Size_t GetMarkerSize() const {return fMarkerSize;} ///< Return the marker size; 34 virtual void Modify();; 35 virtual void ResetAttMarker(Option_t *toption="""");; 36 virtual void SaveMarkerAttributes(std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t sizdef=1);; 37 virtual void SetMarkerAttributes(); // *MENU*; 38 virtual void SetMarkerColor(Color_t mcolor=1) { fMarkerColor = mcolor;} ///< Set the marker color; 39 virtual void SetMarkerColorAlpha(Color_t mcolor, Float_t malpha);; 40 virtual void SetMarkerStyle(Style_t mstyle=1) { fMarkerStyle = mstyle;} ///< Set the marker style; 41 /// Set the marker size.; 42 /// Note that the marker styles number 1 6 and 7 (the dots), cannot be scaled.; 43 /// They are meant to be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8h_source.html:78,Guid,Guide,78,doc/master/TAttMarker_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttText.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; TAttText.h File Reference. #include ""Rtypes.h"". Include dependency graph for TAttText.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TAttText;  Text Attributes class. More...;  . Enumerations; enum  ETextAlign { ;   kHAlignLeft =10; , kHAlignCenter =20; , kHAlignRight =30; , kVAlignBottom =1; , ;   kVAlignCenter =2; , kVAlignTop =3. };  . Enumeration Type Documentation. ◆ ETextAlign. enum ETextAlign. EnumeratorkHAlignLeft ; kHAlignCenter ; kHAlignRight ; kVAlignBottom ; kVAlignCenter ; kVAlignTop . Definition at line 53 of file TAttText.h. corebaseincTAttText.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8h.html:79,Guid,Guide,79,doc/master/TAttText_8h.html,https://root.cern,https://root.cern/doc/master/TAttText_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TAttText.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttText.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TAttText; 13#define ROOT_TAttText; 14 ; 15 ; 16#include ""Rtypes.h""; 17 ; 18class TAttText {; 19 ; 20protected:; 21 Float_t fTextAngle; ///< Text angle; 22 Float_t fTextSize; ///< Text size; 23 Short_t fTextAlign; ///< Text alignment; 24 Color_t fTextColor; ///< Text color; 25 Font_t fTextFont; ///< Text font; 26 ; 27public:; 28 TAttText();; 29 TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);; 30 virtual ~TAttText();; 31 void Copy(TAttText &atttext) const;; 32 virtual Short_t GetTextAlign() const {return fTextAlign;} ///< Return the text alignment; 33 virtual Float_t GetTextAngle() const {return fTextAngle;} ///< Return the text angle; 34 virtual Color_t GetTextColor() const {return fTextColor;} ///< Return the text color; 35 virtual Font_t GetTextFont() const {return fTextFont;} ///< Return the text font; 36 virtual Float_t GetTextSize() const {return fTextSize;} ///< Return the text size; 37 virtual Float_t GetTextSizePercent(Float_t size); ///< Return the text in percent of the pad size; 38 virtual void Modify();; 39 virtual void ResetAttText(Option_t *toption="""");; 40 virtual void SaveTextAttributes(std::ostream &out, const char *name, Int_t alidef=12, Float_t angdef=0, Int_t coldef=1, Int_t fondef=61, Float_t sizdef=1);; 41 virtual void SetTextAttributes(); // *MENU*; 42 virtual void SetTextAlign(Short_t align=11)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8h_source.html:76,Guid,Guide,76,doc/master/TAttText_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TBuffer.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TBuffer.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun, Philippe Canal, Fons Rademakers 04/05/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TBuffer; 13#define ROOT_TBuffer; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TBuffer //; 19// //; 20// Buffer base class used for serializing objects. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TDataType.h""; 25#include ""TObject.h""; 26#include ""TClass.h""; 27#include ""Bytes.h""; 28 ; 29#include <vector>; 30#include <string>; 31 ; 32class TVirtualStreamerInfo;; 33class TStreamerElement;; 34class TString;; 35class TProcessID;; 36class TClonesArray;; 37class TRefTable;; 38class TVirtualArray;; 39namespace TStreamerInfoActions {; 40 class TActionSequence;; 41}; 42 ; 43class TBuffer : public TObject {; 44 ; 45protected:; 46 typedef std::vector<TVirtualArray*> CacheList_t;; 47 ; 48 Bool_t fMode; //Read or write mode; 49 Int_t fVersion; //Buffer format version; 50 Int_t fBufSize; //Size of buffer; 51 char *fBuffer; //Buffer used to store objects; 52 char *fBufCur; //Current position in buffer; 53 char *fBufMax; //End of buffer; 54 TObject *fParent; //Pointer to parent object owning this buffer; 55 ReAllocCharFun_t fReAllocFunc; //! Realloc function to be used when extending the buffer.; 56 CacheList_t fCacheStack; //Stack of pointers to the cache where to temporarily store the value of 'missing' data members;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8h_source.html:75,Guid,Guide,75,doc/master/TBuffer_8h_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TColor.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; TColor.h File Reference. #include ""TNamed.h""; #include <vector>. Include dependency graph for TColor.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TColor;  The color creation and management class. More...;  . Enumerations; enum  EColorPalette { ;   kDeepSea =51; , kGreyScale =52; , kDarkBodyRadiator =53; , kBlueYellow = 54; , ;   kRainBow =55; , kInvertedDarkBodyRadiator =56; , kBird =57; , kCubehelix =58; , ;   kGreenRedViolet =59; , kBlueRedYellow =60; , kOcean =61; , kColorPrintableOnGrey =62; , ;   kAlpine =63; , kAquamarine =64; , kArmy =65; , kAtlantic =66; , ;   kAurora =67; , kAvocado =68; , kBeach =69; , kBlackBody =70; , ;   kBlueGreenYellow =71; , kBrownCyan =72; , kCMYK =73; , kCandy =74; , ;   kCherry =75; , kCoffee =76; , kDarkRainBow =77; , kDarkTerrain =78; , ;   kFall =79; , kFruitPunch =80; , kFuchsia =81; , kGreyYellow =82; , ;   kGreenBrownTerrain =83; , kGreenPink =84; , kIsland =85; , kLake =86; , ;   kLightTemperature =87; , kLightTerrain =88; , kMint =89; , kNeon =90; , ;   kPastel =91; , kPearl =92; , kPigeon =93; , kPlum =94; , ;   kRedBlue =95; , kRose =96; , kRust =97; , kSandyTerrain =98; , ;   kSienna =99; , kSolar =100; , kSouthWest =101; , kStarryNight =102; , ;   kSunset =103; , kTemperatureMap =104; , kThermometer =105; , kValentine =106; , ;   kVisibleSpectrum =107; , kWaterMelon =108; , kCool =109; , kCopper =110; , ;   kGistEarth =111; , kViridis =112; , kCividis =113; , kRainbow =kRainBow; , ;   kDarkRainbow =kDarkRainBow. };  . Enumeration Type Documentation. ◆ EColorPalette. enum EColorPalette. EnumeratorkDeepSea ; kGreyScale ; kDarkBodyRadiator ; kBlueYellow ; kRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8h.html:77,Guid,Guide,77,doc/master/TColor_8h.html,https://root.cern,https://root.cern/doc/master/TColor_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TColor.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TColor.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TColor; 13#define ROOT_TColor; 14 ; 15#include ""TNamed.h""; 16 ; 17#include <vector>; 18 ; 19class TArrayI;; 20 ; 21class TColor : public TNamed {; 22protected:; 23 Int_t fNumber; ///< Color number identifier; 24private:; 25 Float_t fRed; ///< Fraction of Red; 26 Float_t fGreen; ///< Fraction of Green; 27 Float_t fBlue; ///< Fraction of Blue; 28 Float_t fHue; ///< Hue; 29 Float_t fLight; ///< Light; 30 Float_t fSaturation; ///< Saturation; 31 Float_t fAlpha; ///< Alpha (transparency); 32 ; 33 void Allocate();; 34 static Float_t HLStoRGB1(Float_t rn1, Float_t rn2, Float_t huei);; 35 ; 36public:; 37 TColor();; 38 TColor(Int_t color, Float_t r, Float_t g, Float_t b, const char *name="""", Float_t a = 1);; 39 TColor(Float_t r, Float_t g, Float_t b, Float_t a = 1);; 40 TColor(const TColor &color);; 41 TColor &operator=(const TColor &color);; 42 virtual ~TColor();; 43 const char *AsHexString() const;; 44 void Copy(TObject &color) const override;; 45 static void CreateColorWheel();; 46 static void CreateColorsGray();; 47 static void CreateColorsCircle(Int_t offset, const char *name, UChar_t *rgb);; 48 static void CreateColorsRectangle(Int_t offset, const char *name, UChar_t *rgb);; 49 static Int_t CreateColorTableFromFile(TString fileName, Float_t alpha=1.);; 50 static Int_t CreateGradientColorTable(UInt_t Number, Double_t* Stops,; 51 Double_t* Red, Double_t* Gree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8h_source.html:74,Guid,Guide,74,doc/master/TColor_8h_source.html,https://root.cern,https://root.cern/doc/master/TColor_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TDatime.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TDatime.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 05/01/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TDatime; 13#define ROOT_TDatime; 14 ; 15#include <string>; 16 ; 17//////////////////////////////////////////////////////////////////////////; 18// //; 19// TDatime //; 20// //; 21// This class stores the date and time with a precision of one second //; 22// in an unsigned 32 bit word (e.g. 950130 124559). The date is stored //; 23// with the origin being the 1st january 1995. //; 24// //; 25// This class has no support for time zones. The time is assumed //; 26// to be in the local time of the machine where the object was created. //; 27// As a result, TDatime objects are not portable between machines //; 28// operating in different time zones and unsuitable for storing the //; 29// date/time of data taking events and the like. If absolute time is //; 30// required, use TTimeStamp. //; 31// //; 32//////////////////////////////////////////////////////////////////////////; 33 ; 34#include ""Rtypes.h""; 35 ; 36 ; 37class TDatime {; 38 ; 39private:; 40 ; 41protected:; 42 UInt_t fDatime; //Date (relative to 1995) + time; 43 ; 44public:; 45 TDatime();; 46 TDatime(const TDatime &d): fDatime(d.fDatime) { }; 47 TDatime(UInt_t tloc, Bool_t dosDate = kFALSE): fDatime(0); 48 { Set(tloc, dosDate); }; 49 TDatime(Int_t date, Int_t time);; 50 TDatime(Int_t year, Int_t month, Int_t day,; 51 Int_t hour, Int_t min, Int_t sec);; 52 TDatime(const char *sqlDateTime);; 53 virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDatime_8h_source.html:75,Guid,Guide,75,doc/master/TDatime_8h_source.html,https://root.cern,https://root.cern/doc/master/TDatime_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TDirectory.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros ; TDirectory.h File Reference. #include ""TNamed.h""; #include ""TClass.h""; #include ""TUUID.h""; #include <atomic>; #include ""TList.h""; #include ""TBuffer.h"". Include dependency graph for TDirectory.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TDirectory::TContext;  TDirectory::TContext keeps track and restore the current directory. More...;  ; class  TDirectory;  Describe directory structure in memory. More...;  ; struct  ROOT::Internal::TDirectoryAtomicAdapter;  Internal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter should only be used inside the thread that created them. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gDirectory   (::ROOT::Internal::TDirectoryAtomicAdapter{});  . Macro Definition Documentation. ◆ gDirectory. #define gDirectory   (::ROOT::Internal::TDirectoryAtomicAdapter{}). Definition at line 384 of file TDirectory.h. corebaseincTDirectory.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h.html:81,Guid,Guide,81,doc/master/TDirectory_8h.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TDirectory.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TDirectory.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TDirectory; 13#define ROOT_TDirectory; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TDirectory //; 19// //; 20// Describe directory structure in memory. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TNamed.h""; 25#include ""TClass.h""; 26#include ""TUUID.h""; 27#include <atomic>; 28 ; 29#ifdef R__LESS_INCLUDES; 30class TList;; 31#else; 32#include ""TList.h""; 33#include ""TBuffer.h""; 34// #include ""TDatime.h""; 35#endif; 36 ; 37class TBrowser;; 38class TKey;; 39class TFile;; 40namespace ROOT {; 41namespace Internal {; 42 struct TDirectoryAtomicAdapter;; 43}}; 44 ; 45class TDirectory : public TNamed {; 46public:; 47 ; 48/** \class TContext; 49\ingroup Base; 50 ; 51TDirectory::TContext keeps track and restore the current directory.; 52With this tool C++ exceptions will be guaranteed to properly restore the; 53current directory pointer.; 54 ; 55For example code like:; 56 ; 57~~~ {.cpp}; 58 TDirectory *sav = gDirectory;; 59 mydirectory->cd();; 60 if (...) {; 61 ....; 62 sav->cd();; 63 return;; 64 } else if (...) {; 65 ....; 66 sav->cd();; 67 return;; 68 }; 69 sav->cd;; 70 return;; 71~~~; 72 ; 73can be replaced with the simpler and exception safe:; 74 ; 75~~~ {.cpp}; 76 TDirectory::TContext context(gDirectory, mydirectory);; 77 if (...) {; 78 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:78,Guid,Guide,78,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TEnv.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations |; Variables ; TEnv.h File Reference. #include ""TObject.h""; #include ""TString.h"". Include dependency graph for TEnv.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TEnv;  The TEnv class reads config files, by default named .rootrc. More...;  ; class  TEnvRec;  . Enumerations; enum  EEnvLevel { ;   kEnvGlobal; , kEnvUser; , kEnvLocal; , kEnvChange; , ;   kEnvAll. };  . Variables; R__EXTERN TEnv * gEnv;  . Enumeration Type Documentation. ◆ EEnvLevel. enum EEnvLevel. EnumeratorkEnvGlobal ; kEnvUser ; kEnvLocal ; kEnvChange ; kEnvAll . Definition at line 69 of file TEnv.h. Variable Documentation. ◆ gEnv. R__EXTERN TEnv* gEnv. Definition at line 170 of file TEnv.h. corebaseincTEnv.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8h.html:75,Guid,Guide,75,doc/master/TEnv_8h.html,https://root.cern,https://root.cern/doc/master/TEnv_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TEnv.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TEnv.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 22/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TEnv; 13#define ROOT_TEnv; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TEnv //; 19// //; 20// The TEnv class reads config files, by default named .rootrc. Three //; 21// types of config files are read: global, user and local files. The //; 22// global file is $ROOTSYS/etc/system<name> (or ROOTETCDIR/system<name>)//; 23// the user file is $HOME/<name> and the local file is ./<name>. //; 24// By setting the shell variable ROOTENV_NO_HOME=1 the reading of //; 25// the $HOME/<name> resource file will be skipped. This might be useful //; 26// in case the home directory resides on an automounted remote file //; 27// system and one wants to avoid this file system from being mounted. //; 28// //; 29// The format of the .rootrc file is similar to the .Xdefaults format: //; 30// //; 31// [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value> //; 32// //; 33// Where <SystemName> is either Unix, WinNT, MacOS or Vms, //; 34// <RootName> the name as given in the TApplication ctor (or ""RootApp"" //; 35// in case no explicit TApplication derived object was created), //; 36// <ProgName> the current program name and <name> the resource name, //; 37// with optionally a type specification. <value> can be either a //; 38// string, an integer, a float/double or a boolean with the values //; 39// TRUE, FALSE, ON, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8h_source.html:72,Guid,Guide,72,doc/master/TEnv_8h_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TExec.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TExec.h File Reference. #include ""TNamed.h"". Include dependency graph for TExec.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TExec;  TExec is a utility class that can be used to execute a C++ command when some event happens in a pad. More...;  . corebaseincTExec.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TExec_8h.html:76,Guid,Guide,76,doc/master/TExec_8h.html,https://root.cern,https://root.cern/doc/master/TExec_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TExec.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TExec.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 29/12/99; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2022, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TExec; 13#define ROOT_TExec; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TExec //; 19// //; 20// A TExec object can execute a CLING command. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TNamed.h""; 25 ; 26class TExec : public TNamed {; 27 ; 28public:; 29 ; 30 TExec();; 31 TExec(const char *name, const char *command);; 32 TExec(const TExec &text);; 33 virtual ~TExec();; 34 virtual void Exec(const char *command = """");; 35 void Paint(Option_t *option="""") override;; 36 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 37 virtual void SetAction(const char *action) { SetTitle(action); }; 38 ; 39 ClassDefOverride(TExec,1); //To execute a CLING command; 40};; 41 ; 42#endif; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; namechar name[80]Definition TGX11.cxx:110; TNamed.h; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; TExec::~TExecvirtual ~TExec()Exec default destructor.Definition TExec.cxx:120; TExec::Sav",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TExec_8h_source.html:73,Guid,Guide,73,doc/master/TExec_8h_source.html,https://root.cern,https://root.cern/doc/master/TExec_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TMathBase.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMathBase.h. Go to the documentation of this file. 1// @(#)root/base:; 2// Authors: Rene Brun, Fons Rademakers 29/07/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TMathBase; 13#define ROOT_TMathBase; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TMath Base functions //; 19// //; 20// Define the functions Min, Max, Abs, Sign, Range for all types. //; 21// NB: These functions are unfortunately not available in a portable //; 22// way in std::. //; 23// //; 24// More functions are defined in TMath.h. TMathBase.h is designed to be //; 25// a stable file and used in place of TMath.h in the ROOT miniCore. //; 26// //; 27//////////////////////////////////////////////////////////////////////////; 28 ; 29#include ""RtypesCore.h""; 30 ; 31#include <cstdlib>; 32#include <cmath>; 33#include <algorithm>; 34 ; 35namespace TMath {; 36 ; 37 // Abs; 38 inline Short_t Abs(Short_t d);; 39 inline Int_t Abs(Int_t d);; 40 inline Long_t Abs(Long_t d);; 41 inline Long64_t Abs(Long64_t d);; 42 inline Float_t Abs(Float_t d);; 43 inline Double_t Abs(Double_t d);; 44 inline LongDouble_t Abs(LongDouble_t d);; 45 ; 46 // Even/Odd; 47 inline Bool_t Even(Long_t a);; 48 inline Bool_t Odd(Long_t a);; 49 ; 50 // SignBit; 51 template<typename Integer>; 52 inline Bool_t SignBit(Integer a);; 53 inline Bool_t SignBit(Float_t a);; 54 inline Bool_t SignBit(Double_t a);; 55 inline Bool_t SignBit(LongDouble_t a);; 56 ; 57 // Sign; 58 template<typename T1, typename T2>; 59 inline T1 S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMathBase_8h_source.html:77,Guid,Guide,77,doc/master/TMathBase_8h_source.html,https://root.cern,https://root.cern/doc/master/TMathBase_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TNamed.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TNamed.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 26/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TNamed; 13#define ROOT_TNamed; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TNamed //; 19// //; 20// The basis for a named object (name, title). //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24 ; 25#include ""TObject.h""; 26#include ""TString.h""; 27 ; 28 ; 29class TNamed : public TObject {; 30 ; 31protected:; 32 TString fName; //object identifier; 33 TString fTitle; //object title; 34 ; 35public:; 36 TNamed(): fName(), fTitle() { }; 37 TNamed(const char *name, const char *title) : fName(name), fTitle(title) { }; 38 TNamed(const TString &name, const TString &title) : fName(name), fTitle(title) { }; 39 TNamed(const TNamed &named);; 40 TNamed& operator=(const TNamed& rhs);; 41 virtual ~TNamed();; 42 void Clear(Option_t *option ="""") override;; 43 TObject *Clone(const char *newname="""") const override;; 44 Int_t Compare(const TObject *obj) const override;; 45 void Copy(TObject &named) const override;; 46 virtual void FillBuffer(char *&buffer);; 47 const char *GetName() const override { return fName; }; 48 const char *GetTitle() const override { return fTitle; }; 49 ULong_t Hash() const override { return fName.Hash(); }; 50 Bool_t IsSortable() const override { return kTRUE; }; 51 virtual void SetName(const char *name); // *MENU*; 52 virtual void SetNameTitle(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8h_source.html:74,Guid,Guide,74,doc/master/TNamed_8h_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TObjString.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TObjString.h File Reference. #include ""TObject.h""; #include ""TString.h"". Include dependency graph for TObjString.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TObjString;  Collectable string class. More...;  . corebaseincTObjString.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjString_8h.html:81,Guid,Guide,81,doc/master/TObjString_8h.html,https://root.cern,https://root.cern/doc/master/TObjString_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TObjString.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObjString.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 12/11/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TObjString; 13#define ROOT_TObjString; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TObjString //; 19// //; 20// Collectable string class. This is a TObject containing a TString. //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TObject.h""; 25#include ""TString.h""; 26 ; 27 ; 28class TObjString : public TObject {; 29 ; 30private:; 31 TString fString; // wrapped TString; 32 ; 33public:; 34 TObjString(const char *s = """") : fString(s) { }; 35 ~TObjString();; 36 Int_t Compare(const TObject *obj) const override;; 37 TString CopyString() const { return fString; }; 38 const char *GetName() const override { return fString; }; 39 ULong_t Hash() const override { return fString.Hash(); }; 40 void FillBuffer(char *&buffer) { fString.FillBuffer(buffer); }; 41 void Print(Option_t *) const override { Printf(""TObjString = %s"", (const char*)fString); }; 42 Bool_t IsSortable() const override { return kTRUE; }; 43 Bool_t IsEqual(const TObject *obj) const override;; 44 void ReadBuffer(char *&buffer) { fString.ReadBuffer(buffer); }; 45 void SetString(const char *s) { fString = s; }; 46 const TString &GetString() const { return fString; }; 47 Int_t Sizeof() const { return fString.Sizeof(); }; 48 TString &String() { return fString; }; 49 ; 50 ClassDefO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjString_8h_source.html:78,Guid,Guide,78,doc/master/TObjString_8h_source.html,https://root.cern,https://root.cern/doc/master/TObjString_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TObject.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObject.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 26/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TObject; 13#define ROOT_TObject; 14 ; 15 ; 16// #include ""RConfigure.h"" // included via Rtypes.h; 17#include ""Rtypes.h""; 18#include ""TStorage.h""; 19#include ""TVersionCheck.h""; 20 ; 21#include <stdarg.h>; 22#include <string>; 23#include <iosfwd>; 24 ; 25#ifdef WIN32; 26#undef RemoveDirectory; 27#endif; 28 ; 29class TList;; 30class TBrowser;; 31class TBuffer;; 32class TObjArray;; 33class TMethod;; 34class TTimer;; 35 ; 36namespace ROOT {; 37namespace Internal {; 38 bool DeleteChangesMemoryImpl();; 39}}; 40 ; 41class TObject {; 42 ; 43private:; 44 UInt_t fUniqueID; ///< object unique identifier; 45 UInt_t fBits; ///< bit field status word; 46 ; 47 static Longptr_t fgDtorOnly; ///< object for which to call dtor only (i.e. no delete); 48 static Bool_t fgObjectStat; ///< if true keep track of objects in TObjectTable; 49 ; 50 static void AddToTObjectTable(TObject *);; 51 ; 52protected:; 53 void MakeZombie() { fBits |= kZombie; }; 54 virtual void DoError(int level, const char *location, const char *fmt, va_list va) const;; 55 ; 56public:; 57 //----- Global bits (can be set for any object and should not be reused).; 58 //----- Bits 0 - 13 are reserved as global bits. Bits 14 - 23 can be used; 59 //----- in different class hierarchies (make sure there is no overlap in; 60 //----- any given hierarchy).; 61 enum EStatusBits {; 62 kCanDelete = BIT(0), ///< if objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:75,Guid,Guide,75,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TQObject.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TQObject.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2022, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TQObject; 13#define ROOT_TQObject; 14 ; 15//////////////////////////////////////////////////////////////////////////; 16// //; 17// This is the ROOT implementation of the Qt object communication //; 18// mechanism (see also https://doc.qt.io/qt-5/metaobjects.html) //; 19// //; 20// Signals and slots are used for communication between objects. //; 21// When an object has changed in some way that might be interesting //; 22// for the outside world, it emits a signal to tell whoever is //; 23// listening. All slots that are connected to this signal will be //; 24// activated (called). It is even possible to connect a signal //; 25// directly to another signal (this will emit the second signal //; 26// immediately whenever the first is emitted.) There is no limitation //; 27// on the number of slots that can be connected to a signal. //; 28// The slots will be activated in the order they were connected //; 29// to the signal. This mechanism allows objects to be easily reused, //; 30// because the object that emits a signal does not need to know //; 31// to what the signals are connected to. //; 32// Together, signals and slots make up a powerful component //; 33// programming mechanism. //; 34// //; 35// This implementation is provided by //; 36// Valeriy Onuchin (onuchin@sirius.ihep.su). //; 37// //; 38/////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8h_source.html:76,Guid,Guide,76,doc/master/TQObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TROOT.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Functions |; Variables ; TROOT.h File Reference. #include ""TDirectory.h""; #include <atomic>; #include <string>; #include <vector>; #include <utility>. Include dependency graph for TROOT.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Internal::TParBranchProcessingRAII;  ; class  TROOT;  ROOT top level object description. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define gROOT   (ROOT::GetROOT());  . Functions; void ROOT::CallRecursiveRemoveIfNeeded (TObject &obj);  call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ;  ; void ROOT::DisableImplicitMT ();  Disables the implicit multi-threading in ROOT (see EnableImplicitMT). ;  ; void ROOT::Internal::DisableParBranchProcessing ();  Globally disables the IMT use case of parallel branch processing, deactivating the corresponding locks. ;  ; void ROOT::EnableImplicitMT (UInt_t numthreads=0);  Enable ROOT's implicit multi-threading for all objects and methods that provide an internal parallelisation mechanism. ;  ; void ROOT::Internal::EnableParBranchProcessing ();  Globally enables the parallel branch processing, which is a case of implicit multi-threading (IMT) in ROOT, activating the required locks. ;  ; void ROOT::EnableThreadSafety ();  Enable support for multi-threading within the ROOT code in particular, enables the global mutex to make ROOT thread safe/aware. ;  ; TROOT * ROOT::GetROOT ();  ; TROOT * ROOT::Internal::GetROOT2 ();  ; UInt_t ROOT::GetThreadPoolSize ();  Returns the size of ROOT's thread pool. ;  ; Bool_t ROOT::IsImplicitMTEnabled ();  Returns true if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h.html:76,Guid,Guide,76,doc/master/TROOT_8h.html,https://root.cern,https://root.cern/doc/master/TROOT_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TROOT.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TROOT.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 08/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TROOT; 13#define ROOT_TROOT; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TROOT //; 19// //; 20// The TROOT object is the entry point to the system. //; 21// The single instance of TROOT is accessible via the global gROOT. //; 22// Using the gROOT pointer one has access to basically every object //; 23// created in a ROOT based program. The TROOT object is essentially a //; 24// container of several lists pointing to the main ROOT objects. //; 25// //; 26//////////////////////////////////////////////////////////////////////////; 27 ; 28#include ""TDirectory.h""; 29// #include ""TList.h"" // included in TDirectory.h; 30// #include ""RConfigure.h"" // included via Rtypes.h; 31 ; 32#include <atomic>; 33#include <string>; 34#include <vector>; 35#include <utility>; 36 ; 37class TClass;; 38class TCanvas;; 39class TColor;; 40class TDataType;; 41class TFile;; 42class TStyle;; 43class TVirtualPad;; 44class TApplication;; 45class TInterpreter;; 46class TBrowser;; 47class TGlobal;; 48class TFunction;; 49class TFolder;; 50class TPluginManager;; 51class TProcessUUID;; 52class TClassGenerator;; 53class TVirtualMutex;; 54class TROOT;; 55class TListOfDataMembers;; 56class TListOfEnums;; 57class TListOfFunctions;; 58class TListOfFunctionTemplates;; 59class TSeqCollection;; 60class TFunctionTemplate;; 61class TGlobalMappedF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8h_source.html:73,Guid,Guide,73,doc/master/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TROOT.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TROOT.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 08/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TROOT; 13#define ROOT_TROOT; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TROOT //; 19// //; 20// The TROOT object is the entry point to the system. //; 21// The single instance of TROOT is accessible via the global gROOT. //; 22// Using the gROOT pointer one has access to basically every object //; 23// created in a ROOT based program. The TROOT object is essentially a //; 24// container of several lists pointing to the main ROOT objects. //; 25// //; 26//////////////////////////////////////////////////////////////////////////; 27 ; 28#include ""TDirectory.h""; 29// #include ""TList.h"" // included in TDirectory.h; 30// #include ""RConfigure.h"" // included via Rtypes.h; 31 ; 32#include <atomic>; 33#include <string>; 34#include <vector>; 35#include <utility>; 36 ; 37class TClass;; 38class TCanvas;; 39class TColor;; 40class TDataType;; 41class TFile;; 42class TStyle;; 43class TVirtualPad;; 44class TApplication;; 45class TInterpreter;; 46class TBrowser;; 47class TGlobal;; 48class TFunction;; 49class TFolder;; 50class TPluginManager;; 51class TProcessUUID;; 52class TClassGenerator;; 53class TVirtualMutex;; 54class TROOT;; 55class TListOfDataMembers;; 56class TListOfEnums;; 57class TListOfFunctions;; 58class TListOfFunctionTemplates;; 59class TSeqCollection;; 60class TFunctionTemplate;; 61class TGlobalMappedFu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8h_source.html:72,Guid,Guide,72,doc/v632/TROOT_8h_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TRootIOCtor.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TRootIOCtor.h. Go to the documentation of this file. 1// @(#)root/meta:$Id$; 2// Author: Philippe Canal 15/03/2005; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TRootIOCtor; 13#define ROOT_TRootIOCtor; 14 ; 15//////////////////////////////////////////////////////////////////////////; 16// //; 17// TRootIOCtor //; 18// //; 19// Helper class used to mark a constructor to be used by ROOT instead //; 20// of the default constructor. //; 21// If rootcint sees in a class declaration of the class MyClass: //; 22// MyClass(TRootIOCtor*); //; 23// This constructor will be used instead of the default constructor. //; 24// //; 25// Also the pragma: //; 26// #pragma link C++ ioctortype MyMarker; //; 27// can be used to tell rootcint that a constuctor taking a MyMarker* //; 28// should be used whenever available. //; 29// //; 30//////////////////////////////////////////////////////////////////////////; 31 ; 32class TRootIOCtor; 33{; 34 // For now intentionally empty.; 35};; 36 ; 37#endif; TRootIOCtorDefinition TRootIOCtor.h:33. corebaseincTRootIOCtor.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRootIOCtor_8h_source.html:79,Guid,Guide,79,doc/master/TRootIOCtor_8h_source.html,https://root.cern,https://root.cern/doc/master/TRootIOCtor_8h_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TStopwatch.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes ; TStopwatch.h File Reference. #include ""TObject.h"". Include dependency graph for TStopwatch.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TStopwatch;  Stopwatch class. More...;  . corebaseincTStopwatch.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8h.html:81,Guid,Guide,81,doc/master/TStopwatch_8h.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TStopwatch.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStopwatch.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 11/10/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TStopwatch; 13#define ROOT_TStopwatch; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TStopwatch //; 19// //; 20// Stopwatch class. This class returns the real and cpu time between //; 21// the start and stop events. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TObject.h""; 26 ; 27 ; 28class TStopwatch : public TObject {; 29 ; 30private:; 31 enum EState { kUndefined, kStopped, kRunning };; 32 ; 33 Double_t fStartRealTime; //wall clock start time; 34 Double_t fStopRealTime; //wall clock stop time; 35 Double_t fStartCpuTime; //cpu start time; 36 Double_t fStopCpuTime; //cpu stop time; 37 Double_t fTotalCpuTime; //total cpu time; 38 Double_t fTotalRealTime; //total real time; 39 EState fState; //stopwatch state; 40 Int_t fCounter; //number of times the stopwatch was started; 41 ; 42 static Double_t GetRealTime();; 43 static Double_t GetCPUTime();; 44 ; 45public:; 46 TStopwatch();; 47 void Start(Bool_t reset = kTRUE);; 48 void Stop();; 49 void Continue();; 50 Int_t Counter() const { return fCounter; }; 51 Double_t RealTime();; 52 void Reset() { ResetCpuTime(); ResetRealTime(); }; 53 void ResetCpuTime(Double_t time = 0) { Stop(); fTotalCpuTime = time; }; 54 void ResetRealTime(Double_t time = 0) { Stop(); fTotalRealTime = time; }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8h_source.html:78,Guid,Guide,78,doc/master/TStopwatch_8h_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TStorage.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Variables ; TStorage.h File Reference. #include ""Rtypes.h"". Include dependency graph for TStorage.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TStorage;  Storage manager. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Typedefs; typedef void(* FreeHookFun_t) (void *, void *addr, size_t);  ; using ROOT::Internal::FreeIfTMapFile_t = bool(void *);  ; using ROOT::Internal::GetMapFileMapllocDesc_t = void *(void *);  ; typedef void *(* ReAllocCFun_t) (void *, size_t, size_t);  ; typedef char *(* ReAllocCharFun_t) (char *, size_t, size_t);  ; typedef void *(* ReAllocFun_t) (void *, size_t);  . Variables; R__EXTERN FreeIfTMapFile_t * ROOT::Internal::gFreeIfTMapFile = nullptr;  ; R__EXTERN GetMapFileMapllocDesc_t * ROOT::Internal::gGetMapFileMallocDesc = nullptr;  ; R__EXTERN void * ROOT::Internal::gMmallocDesc = nullptr;  . Typedef Documentation. ◆ FreeHookFun_t. typedef void(* FreeHookFun_t) (void *, void *addr, size_t). Definition at line 27 of file TStorage.h. ◆ ReAllocCFun_t. typedef void *(* ReAllocCFun_t) (void *, size_t, size_t). Definition at line 29 of file TStorage.h. ◆ ReAllocCharFun_t. typedef char *(* ReAllocCharFun_t) (char *, size_t, size_t). Definition at line 30 of file TStorage.h. ◆ ReAllocFun_t. typedef void *(* ReAllocFun_t) (void *, size_t). Definition at line 28 of file TStorage.h. corebaseincTStorage.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStorage_8h.html:79,Guid,Guide,79,doc/master/TStorage_8h.html,https://root.cern,https://root.cern/doc/master/TStorage_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TString.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Functions ; TString.h File Reference. #include ""Rtypes.h""; #include ""TMathBase.h""; #include <string_view>; #include ""ROOT/TypeTraits.hxx""; #include ""snprintf.h""; #include <iosfwd>; #include <cstdarg>; #include <cstdio>; #include <cstring>; #include <string>. Include dependency graph for TString.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  TString::LongStr_t;  ; struct  TString::RawStr_t;  ; struct  TString::Rep_t;  ; struct  TString::ShortStr_t;  ; class  TString;  Basic string class. More...;  ; class  TSubString;  A zero length substring is legal. More...;  ; union  TString::UStr_t;  . Namespaces; namespace  llvm;  . Functions; char * Compress (const char *str);  Remove all blanks from the string str. ;  ; int EscChar (const char *src, char *dst, int dstlen, char *specchars, char escchar);  Escape specchars in src with escchar and copy to dst. ;  ; char * Form (const char *fmt,...);  Formats a string in a circular formatting buffer. ;  ; UInt_t Hash (const char *s);  Return a case-sensitive hash value (endian independent). ;  ; UInt_t Hash (const TString &s);  ; UInt_t Hash (const TString *s);  ; Bool_t operator!= (const char *s1, const TString &s2);  ; Bool_t operator!= (const char *s1, const TSubString &s2);  ; Bool_t operator!= (const TString &s1, const char *s2);  ; Bool_t operator!= (const TString &s1, const TString &s2);  ; Bool_t operator!= (const TString &s1, const TSubString &s2);  ; Bool_t operator!= (const TSubString &s1, const char *s2);  ; Bool_t operator!= (const TSubString &s1, const TString &s2);  ; Bool_t operator!= (const TSubString &s1, const TSubString &s2);  ; TString operator+ (char c, const TString &s);  Add string to char. ;  ; TString operator+ (const char *cs, const TString &s);  Use the special concatenation constructor. ;  ; T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h.html:78,Guid,Guide,78,doc/master/TString_8h.html,https://root.cern,https://root.cern/doc/master/TString_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TString.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TString.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 04/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TString; 13#define ROOT_TString; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TString //; 19// //; 20// Basic string class. //; 21// //; 22// Cannot be stored in a TCollection... use TObjString instead. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26#include ""Rtypes.h""; 27 ; 28#include ""TMathBase.h""; 29#include <string_view>; 30#include ""ROOT/TypeTraits.hxx""; 31#include ""snprintf.h""; 32 ; 33#include <iosfwd>; 34#include <cstdarg>; 35#include <cstdio>; 36#include <cstring>; 37#include <string>; 38#if (__cplusplus >= 202002L); 39# include <compare>; 40#endif; 41 ; 42class TRegexp;; 43class TPRegexp;; 44class TString;; 45class TSubString;; 46class TObjArray;; 47class TVirtualMutex;; 48class TBuffer;; 49class TClass;; 50class TBufferFile;; 51 ; 52TString operator+(const TString &s1, const TString &s2);; 53TString operator+(const TString &s, const char *cs);; 54TString operator+(const char *cs, const TString &s);; 55TString operator+(const TString &s, char c);; 56TString operator+(char c, const TString &s);; 57Bool_t operator==(const TString &s1, const TString &s2);; 58Bool_t operator==(const TString &s1, const char *s2);; 59Bool_t operator==(const TSubString &s1, const TSubString &s2);; 60Bool_t operator==(const TSubString &s1, const TString &s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8h_source.html:75,Guid,Guide,75,doc/master/TString_8h_source.html,https://root.cern,https://root.cern/doc/master/TString_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TStyle.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Variables ; TStyle.h File Reference. #include ""TNamed.h""; #include ""TAttLine.h""; #include ""TAttFill.h""; #include ""TAttMarker.h""; #include ""TAttText.h""; #include ""TAttAxis.h""; #include ""TColor.h""; #include ""TArrayI.h"". Include dependency graph for TStyle.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TStyle;  TStyle objects may be created to define special styles. More...;  . Variables; R__EXTERN TStyle * gStyle;  . Variable Documentation. ◆ gStyle. R__EXTERN TStyle* gStyle. Definition at line 436 of file TStyle.h. corebaseincTStyle.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h.html:77,Guid,Guide,77,doc/master/TStyle_8h.html,https://root.cern,https://root.cern/doc/master/TStyle_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TStyle.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStyle.h. Go to the documentation of this file. 1// @(#)root/base:$Id: 5214d7dc2746ceb518366bc6c4f4068b652d5241 $; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TStyle; 13#define ROOT_TStyle; 14 ; 15#include ""TNamed.h""; 16#include ""TAttLine.h""; 17#include ""TAttFill.h""; 18#include ""TAttMarker.h""; 19#include ""TAttText.h""; 20#include ""TAttAxis.h""; 21#include ""TColor.h""; 22 ; 23#ifndef R__LESS_INCLUDES; 24#include ""TArrayI.h""; 25#endif; 26 ; 27class TBrowser;; 28 ; 29class TStyle : public TNamed, public TAttLine, public TAttFill, public TAttMarker, public TAttText {; 30 ; 31private:; 32 TAttAxis fXaxis; ///< X axis attributes; 33 TAttAxis fYaxis; ///< Y axis attributes; 34 TAttAxis fZaxis; ///< Z axis attributes; 35 Float_t fBarWidth; ///< Width of bar for graphs; 36 Float_t fBarOffset; ///< Offset of bar for graphs; 37 Int_t fColorModelPS; ///< PostScript color model: 0 = RGB, 1 = CMYK; 38 Int_t fDrawBorder; ///< Flag to draw border(=1) or not (0); 39 Int_t fOptLogx; ///< True if log scale in X; 40 Int_t fOptLogy; ///< True if log scale in y; 41 Int_t fOptLogz; ///< True if log scale in z; 42 Int_t fOptDate; ///< True if date option is selected; 43 Int_t fOptStat; ///< True if option Stat is selected; 44 Int_t fOptTitle; ///< True if option Title is selected; 45 Int_t fOptFile; ///< True if option File is selected; 46 Int_t fOptFit; ///< True if option Fit is selected; 47 Int_t fShowEventStatus; ///< Show event status panel; 48 Int_t fShowEditor; ///< Show pad editor; 49 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:74,Guid,Guide,74,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TSysEvtHandler.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Enumerations ; TSysEvtHandler.h File Reference. #include ""TObject.h""; #include ""TQObject.h"". Include dependency graph for TSysEvtHandler.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TFileHandler;  ; class  TSignalHandler;  ; class  TStdExceptionHandler;  ; class  TSysEvtHandler;  Abstract base class for handling system events. More...;  . Enumerations; enum  ESignals { ;   kSigBus; , kSigSegmentationViolation; , kSigSystem; , kSigPipe; , ;   kSigIllegalInstruction; , kSigAbort; , kSigQuit; , kSigInterrupt; , ;   kSigWindowChanged; , kSigAlarm; , kSigChild; , kSigUrgent; , ;   kSigFloatingException; , kSigTermination; , kSigUser1; , kSigUser2. };  . Enumeration Type Documentation. ◆ ESignals. enum ESignals. EnumeratorkSigBus ; kSigSegmentationViolation ; kSigSystem ; kSigPipe ; kSigIllegalInstruction ; kSigAbort ; kSigQuit ; kSigInterrupt ; kSigWindowChanged ; kSigAlarm ; kSigChild ; kSigUrgent ; kSigFloatingException ; kSigTermination ; kSigUser1 ; kSigUser2 . Definition at line 107 of file TSysEvtHandler.h. corebaseincTSysEvtHandler.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSysEvtHandler_8h.html:85,Guid,Guide,85,doc/master/TSysEvtHandler_8h.html,https://root.cern,https://root.cern/doc/master/TSysEvtHandler_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TSystem.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Typedefs |; Enumerations |; Functions |; Variables ; TSystem.h File Reference. #include <cstdio>; #include <cctype>; #include <fcntl.h>; #include <unistd.h>; #include ""TNamed.h""; #include ""TInetAddress.h""; #include ""TTimer.h""; #include <string>. Include dependency graph for TSystem.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  CpuInfo_t;  ; struct  FileStat_t;  ; struct  MemInfo_t;  ; struct  ProcInfo_t;  ; struct  RedirectHandle_t;  ; struct  SysInfo_t;  ; class  TProcessEventTimer;  ; class  TSystem;  Abstract base class defining a generic interface to the underlying Operating System. More...;  ; struct  UserGroup_t;  . Typedefs; typedef void(* Func_t) ();  . Enumerations; enum  EAccessMode { kFileExists = 0; , kExecutePermission = 1; , kWritePermission = 2; , kReadPermission = 4; };  ; enum  EFileModeMask { ;   kS_IFMT = 0170000; , kS_IFSOCK = 0140000; , kS_IFLNK = 0120000; , kS_IFOFF = 0110000; , ;   kS_IFREG = 0100000; , kS_IFBLK = 0060000; , kS_IFDIR = 0040000; , kS_IFCHR = 0020000; , ;   kS_IFIFO = 0010000; , kS_ISUID = 0004000; , kS_ISGID = 0002000; , kS_ISVTX = 0001000; , ;   kS_IRWXU = 00700; , kS_IRUSR = 00400; , kS_IWUSR = 00200; , kS_IXUSR = 00100; , ;   kS_IRWXG = 00070; , kS_IRGRP = 00040; , kS_IWGRP = 00020; , kS_IXGRP = 00010; , ;   kS_IRWXO = 00007; , kS_IROTH = 00004; , kS_IWOTH = 00002; , kS_IXOTH = 00001. };  ; enum  EFpeMask { ;   kNoneMask = 0x00; , kInvalid = 0x01; , kDivByZero = 0x02; , kOverflow = 0x04; , ;   kUnderflow = 0x08; , kInexact = 0x10; , kDefaultMask = 0x07; , kAllMask = 0x1F. };  ; enum  ELogFacility { ;   kLogLocal0; , kLogLocal1; , kLogLocal2; , kLogLocal3; , ;   kLogLocal4; , kLogLocal5; , kLogLocal6; , kLogLocal7. };  ; enum  ELogLevel { ;   kLogEmerg = 0; , kLogAlert = 1; , kLogCrit = 2; , kLogErr = 3; , ;   kLogWarning = 4; , k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h.html:78,Guid,Guide,78,doc/master/TSystem_8h.html,https://root.cern,https://root.cern/doc/master/TSystem_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TSystem.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSystem.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 15/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TSystem; 13#define ROOT_TSystem; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TSystem //; 19// //; 20// Abstract base class defining a generic interface to the underlying //; 21// Operating System. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include <cstdio>; 26#include <cctype>; 27#include <fcntl.h>; 28#ifndef _WIN32; 29#include <unistd.h>; 30#endif; 31 ; 32#include ""TNamed.h""; 33#include ""TInetAddress.h""; 34#include ""TTimer.h""; 35#include <string>; 36 ; 37class TSeqCollection;; 38class TFdSet;; 39class TVirtualMutex;; 40 ; 41enum EAccessMode {; 42 kFileExists = 0,; 43 kExecutePermission = 1,; 44 kWritePermission = 2,; 45 kReadPermission = 4; 46};; 47 ; 48enum ELogOption {; 49 kLogPid = 0x01,; 50 kLogCons = 0x02; 51};; 52 ; 53enum ELogLevel {; 54 kLogEmerg = 0,; 55 kLogAlert = 1,; 56 kLogCrit = 2,; 57 kLogErr = 3,; 58 kLogWarning = 4,; 59 kLogNotice = 5,; 60 kLogInfo = 6,; 61 kLogDebug = 7; 62};; 63 ; 64enum ELogFacility {; 65 kLogLocal0,; 66 kLogLocal1,; 67 kLogLocal2,; 68 kLogLocal3,; 69 kLogLocal4,; 70 kLogLocal5,; 71 kLogLocal6,; 72 kLogLocal7; 73};; 74 ; 75enum EFpeMask {; 76 kNoneMask = 0x00,; 77 kInvalid = 0x01, // Invalid argument; 78 kDivByZero = 0x02, // Division by zero; 79 kOverflow = 0x04, // Overflow; 80 kUnderflow = 0x08",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:75,Guid,Guide,75,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TThreadSlots.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TThreadSlots.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal 09/30/2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TThreadSlots; 13#define ROOT_TThreadSlots; 14 ; 15#include ""RtypesCore.h""; 16 ; 17namespace ROOT {; 18 ; 19 enum EThreadSlotReservation {; 20 // Describe the system wide slot pre-allocation in the TThread; 21 // 'special data' storage array ; meant to be used as thread local; 22 // storage. (See TThread::Tsd); 23 //; 24 // Slot 0 through 19 can be used for user application; 25 // Slot 20 and above are reserved for the global system; 26 kMaxUserThreadSlot = 20,; 27 ; 28 // Slot reserved by ROOT's packages.; 29 kPadThreadSlot = 20,; 30 kClassThreadSlot = 21,; 31 /* This no longer used.; 32 kDirectoryThreadSlot = 22,; 33 */; 34 kFileThreadSlot = 23,; 35 kPerfStatsThreadSlot = 24,; 36 ; 37 kMaxThreadSlot = 25 // Size of the array of thread local slots in TThread; 38 };; 39}; 40 ; 41R__EXTERN void **(*gThreadTsd)(void*,Int_t);; 42 ; 43#endif // ROOT_TThreadSlots; R__EXTERN#define R__EXTERNDefinition DllImport.h:26; RtypesCore.h; Int_tint Int_tDefinition RtypesCore.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EThreadSlotReservationEThreadSlotReservationDefinition TThreadSlots.h:19; ROOT::kPerfStatsThreadSlot@ kPerfStatsThreadSlotDefinition TThreadSlots.h:35; ROOT::kPadThreadSlot@ kPadThreadSlotDefinition TThreadSlots.h:29; ROOT::kFil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TThreadSlots_8h_source.html:80,Guid,Guide,80,doc/master/TThreadSlots_8h_source.html,https://root.cern,https://root.cern/doc/master/TThreadSlots_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TThreadSlots.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TThreadSlots.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal 09/30/2011; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TThreadSlots; 13#define ROOT_TThreadSlots; 14 ; 15#include ""RtypesCore.h""; 16 ; 17namespace ROOT {; 18 ; 19 enum EThreadSlotReservation {; 20 // Describe the system wide slot pre-allocation in the TThread; 21 // 'special data' storage array ; meant to be used as thread local; 22 // storage. (See TThread::Tsd); 23 //; 24 // Slot 0 through 19 can be used for user application; 25 // Slot 20 and above are reserved for the global system; 26 kMaxUserThreadSlot = 20,; 27 ; 28 // Slot reserved by ROOT's packages.; 29 kPadThreadSlot = 20,; 30 kClassThreadSlot = 21,; 31 /* This no longer used.; 32 kDirectoryThreadSlot = 22,; 33 */; 34 kFileThreadSlot = 23,; 35 kPerfStatsThreadSlot = 24,; 36 ; 37 kMaxThreadSlot = 25 // Size of the array of thread local slots in TThread; 38 };; 39}; 40 ; 41R__EXTERN void **(*gThreadTsd)(void*,Int_t);; 42 ; 43#endif // ROOT_TThreadSlots; R__EXTERN#define R__EXTERNDefinition DllImport.h:26; RtypesCore.h; Int_tint Int_tDefinition RtypesCore.h:45; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EThreadSlotReservationEThreadSlotReservationDefinition TThreadSlots.h:19; ROOT::kPerfStatsThreadSlot@ kPerfStatsThreadSlotDefinition TThreadSlots.h:35; ROOT::kPadThreadSlot@ kPadThreadSlotDefinition TThreadSlots.h:29; ROOT::kFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TThreadSlots_8h_source.html:79,Guid,Guide,79,doc/v632/TThreadSlots_8h_source.html,https://root.cern,https://root.cern/doc/v632/TThreadSlots_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TTimer.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTimer.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 28/11/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TTimer; 13#define ROOT_TTimer; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TTimer //; 19// //; 20// Handles synchronous and a-synchronous timer events. You can use //; 21// this class in one of the following ways: //; 22// - Sub-class TTimer and override the Notify() method. //; 23// - Re-implement the TObject::HandleTimer() method in your class //; 24// and pass a pointer to this object to timer, see the SetObject() //; 25// method. //; 26// - Pass an interpreter command to timer, see SetCommand() method. //; 27// - Create a TTimer, connect its Timeout() signal to the //; 28// appropriate methods. Then when the time is up it will emit a //; 29// Timeout() signal and call connected slots. //; 30// //; 31// Minimum timeout interval is defined in TSystem::ESysConstants as //; 32// kItimerResolution (currently 10 ms). //; 33// //; 34// Signal/slots example: //; 35// TTimer *timer = new TTimer(); //; 36// timer->Connect(""Timeout()"", ""myObjectClassName"", //; 37// myObject, ""TimerDone()""); //; 38// timer->Start(2000, kTRUE); // 2 seconds single-shot //; 39// //; 40// // Timeout signal is emitted repeadetly with minimum timeout //; 41// // timer->Start(0, kFALSE); //; 42// //; 43//////////////////////////////////////////////////////////////////////////; 44 ; 45#include ""TSysEvtHandler.h""; 46#includ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTimer_8h_source.html:74,Guid,Guide,74,doc/master/TTimer_8h_source.html,https://root.cern,https://root.cern/doc/master/TTimer_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TVirtualFFT.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualFFT.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Anna Kreshuk 10/04/2006; 3 ; 4#ifndef ROOT_TVirtualFFT; 5#define ROOT_TVirtualFFT; 6 ; 7//////////////////////////////////////////////////////////////////////////; 8//; 9// TVirtualFFT; 10//; 11// TVirtualFFT is an interface class for Fast Fourier Transforms.; 12//; 13//; 14//; 15// The default FFT library is FFTW. To use it, FFTW3 library should already; 16// be installed, and ROOT should be have fftw3 module enabled, with the directories; 17// of fftw3 include file and library specified (see installation instructions).; 18// Function SetDefaultFFT() allows to change the default library.; 19//; 20// Available transform types:; 21// FFT:; 22// - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); 23// in one or more dimensions, -1 in the exponent; 24// - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); 25// in one or more dimensions, +1 in the exponent; 26// - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); 27// in one or more dimensions,; 28// - ""C2R"" - inverse transforms to ""R2C"", taking complex input; 29// (storing the non-redundant half of a logically Hermitian array); 30// to real output; 31// - ""R2HC"" - a real-input DFT with output in ""halfcomplex"" format,; 32// i.e. real and imaginary parts for a transform of size n stored as; 33// r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; 34// - ""HC2R"" - computes the reverse of FFTW_R2HC, above; 35// - ""DHT"" - computes a discrete Hartley transform; 36//; 37// Sine/cosine transforms:; 38// Different types of transforms are specified by parameter kind of the SineCosine() static; 39// function. 4 different kinds of sine and cosine transforms are available; 40// DCT-I (REDFT00 in FFTW3 notation)- kind=0; 41// DCT-II (REDFT10 in FFTW3 notation)- ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFFT_8h_source.html:79,Guid,Guide,79,doc/master/TVirtualFFT_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFFT_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TVirtualPad.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Macros |; Variables ; TVirtualPad.h File Reference. #include ""TObject.h""; #include ""TAttLine.h""; #include ""TAttFill.h""; #include ""TAttPad.h""; #include ""TQObject.h""; #include ""GuiTypes.h""; #include ""TString.h""; #include ""Buttons.h"". Include dependency graph for TVirtualPad.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TVirtualPad::TContext;  small helper class to store/restore gPad context in TPad methods More...;  ; class  TPickerStackGuard;  ; class  TVirtualPad;  TVirtualPad is an abstract base class for the Pad and Canvas classes. More...;  . Macros; #define gPad   (TVirtualPad::Pad());  . Variables; R__EXTERN Int_t(* gThreadXAR )(const char *xact, Int_t nb, void **ar, Int_t *iret);  . Macro Definition Documentation. ◆ gPad. #define gPad   (TVirtualPad::Pad()). Definition at line 308 of file TVirtualPad.h. Variable Documentation. ◆ gThreadXAR. R__EXTERN Int_t(* gThreadXAR) (const char *xact, Int_t nb, void **ar, Int_t *iret) ; (; const char * ; xact, . Int_t ; nb, . void ** ; ar, . Int_t * ; iret . ). Definition at line 309 of file TVirtualPad.h. corebaseincTVirtualPad.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualPad_8h.html:82,Guid,Guide,82,doc/master/TVirtualPad_8h.html,https://root.cern,https://root.cern/doc/master/TVirtualPad_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TVirtualPad.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualPad.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 05/12/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TVirtualPad; 13#define ROOT_TVirtualPad; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TVirtualPad //; 19// //; 20// Abstract base class for Pads and Canvases //; 21// //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25 ; 26#include ""TObject.h""; 27#include ""TAttLine.h""; 28#include ""TAttFill.h""; 29#include ""TAttPad.h""; 30#include ""TQObject.h""; 31 ; 32#include ""GuiTypes.h""; 33#include ""TString.h""; 34#include ""Buttons.h""; 35 ; 36// forward declarations; 37class TAxis;; 38class TObject;; 39class TObjLink;; 40class TView;; 41class TCanvas;; 42class TCanvasImp;; 43class TH1F;; 44class TFrame;; 45class TLegend;; 46class TBox;; 47class TVirtualViewer3D;; 48class TVirtualPadPainter;; 49 ; 50class TVirtualPad : public TObject, public TAttLine, public TAttFill,; 51 public TAttPad, public TQObject {; 52 ; 53protected:; 54 Bool_t fResizing; //!true when resizing the pad; 55 ; 56 void *GetSender() override { return this; } //used to set gTQSender; 57 ; 58public:; 59 ; 60 /** small helper class to store/restore gPad context in TPad methods */; 61 class TContext {; 62 Bool_t fInteractive{kFALSE};; 63 TVirtualPad *fSaved{nullptr};; 64 public:; 65 TContext(Bool_t _interactive = kFALSE);; 66 TContext(TVirtualPad *gpad, Bool_t interactive = kFALSE, Bool_t not_nul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualPad_8h_source.html:79,Guid,Guide,79,doc/master/TVirtualPad_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualPad_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TVirtualRWMutex.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualRWMutex.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal, 2017; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2017, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TVirtualRWMutex; 13#define ROOT_TVirtualRWMutex; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TVirtualRWMutex //; 19// //; 20// This class implements a read-write mutex interface. The actual work //; 21// is done via TRWSpinLock which is available as soon as the thread //; 22// library is loaded. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26#include ""TVirtualMutex.h""; 27 ; 28#include <memory>; 29 ; 30namespace ROOT {; 31 ; 32class TVirtualRWMutex;; 33 ; 34// Global mutex set in TThread::Init; 35// Use either R__READ_LOCKGUARD(ROOT::gCoreMutex);; 36// or R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 37R__EXTERN TVirtualRWMutex *gCoreMutex;; 38 ; 39class TVirtualRWMutex : public TVirtualMutex {; 40 ; 41public:; 42 // The following are opaque type and are never really declared; 43 // The specific implementation of TInterpreter will cast the; 44 // value of pointer to this types to the correct type (possibly; 45 // distinct from these); 46 class Hint_t;; 47 ; 48 /// \class State; 49 /// Earlier lock state as returned by `GetState()` that can be passed to; 50 /// `Restore()`; 51 struct State {; 52 virtual ~State(); // implemented in TVirtualMutex.cxx; 53 };; 54 ; 55 struct StateAndRecurseCount {; 56 /// State of gCoreMutex when the first ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualRWMutex_8h_source.html:83,Guid,Guide,83,doc/master/TVirtualRWMutex_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualRWMutex_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/TVirtualRWMutex.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualRWMutex.h. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal, 2017; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2017, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TVirtualRWMutex; 13#define ROOT_TVirtualRWMutex; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TVirtualRWMutex //; 19// //; 20// This class implements a read-write mutex interface. The actual work //; 21// is done via TRWSpinLock which is available as soon as the thread //; 22// library is loaded. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26#include ""TVirtualMutex.h""; 27 ; 28#include <memory>; 29 ; 30namespace ROOT {; 31 ; 32class TVirtualRWMutex;; 33 ; 34// Global mutex set in TThread::Init; 35// Use either R__READ_LOCKGUARD(ROOT::gCoreMutex);; 36// or R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 37R__EXTERN TVirtualRWMutex *gCoreMutex;; 38 ; 39class TVirtualRWMutex : public TVirtualMutex {; 40 ; 41public:; 42 // The following are opaque type and are never really declared; 43 // The specific implementation of TInterpreter will cast the; 44 // value of pointer to this types to the correct type (possibly; 45 // distinct from these); 46 class Hint_t;; 47 ; 48 /// \class State; 49 /// Earlier lock state as returned by `GetState()` that can be passed to; 50 /// `Restore()`; 51 struct State {; 52 virtual ~State(); // implemented in TVirtualMutex.cxx; 53 };; 54 ; 55 struct StateAndRecurseCount {; 56 /// State of gCoreMutex when the first i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TVirtualRWMutex_8h_source.html:82,Guid,Guide,82,doc/v632/TVirtualRWMutex_8h_source.html,https://root.cern,https://root.cern/doc/v632/TVirtualRWMutex_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/inc/Varargs.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Varargs.h. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_Varargs; 12#define ROOT_Varargs; 13 ; 14#if defined(sparc) && defined(__CC_ATT301__); 15 ; 16 extern ""C"" __builtin_va_arg_incr(...);; 17 typedef char *va_list;; 18# define va_end(ap); 19# define va_start(ap, parmN) ap= (char*)(&parmN+1); 20# define va_arg(ap, mode) ((mode*) __builtin_va_arg_incr((mode*)ap))[0]; 21# define va_(arg) __builtin_va_alist; 22 ; 23# include <stdio.h>; 24 ; 25 extern ""C"" {; 26 int vfprintf(FILE*, const char *fmt, va_list ap);; 27 char *vsprintf(char*, const char *fmt, va_list ap);; 28 };; 29 ; 30#else; 31# include <stdarg.h>; 32# if defined(sparc) && !defined(__GNUG__) && !defined(__CC_SUN21__) && !defined(__SVR4); 33# define va_(arg) __builtin_va_alist; 34# else; 35# define va_(arg) arg; 36# endif; 37 ; 38#endif; 39 ; 40#if !defined(R__VA_COPY); 41# if defined(va_copy); 42# define R__VA_COPY(to, from) va_copy((to), (from)); 43# elif defined(__va_copy); 44# define R__VA_COPY(to, from) __va_copy((to), (from)); 45# elif defined(_WIN32) && _MSC_VER < 1310; 46# define R__VA_COPY(to, from) (*(to) = *(from)); 47# else; 48# define R__VA_COPY(to, from) ((to) = (from)); 49# endif; 50#endif; 51 ; 52#endif. corebaseincVarargs.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Varargs_8h_source.html:75,Guid,Guide,75,doc/master/Varargs_8h_source.html,https://root.cern,https://root.cern/doc/master/Varargs_8h_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/src/String.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. String.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal 03/09/2003; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun, Fons Rademakers and al. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12//////////////////////////////////////////////////////////////////////////; 13// //; 14// std::string helper utilities //; 15// //; 16//////////////////////////////////////////////////////////////////////////; 17 ; 18#include <ROOT/RConfig.hxx>; 19#include ""TBuffer.h""; 20 ; 21#include <string>; 22 ; 23using std::string;; 24 ; 25void std_string_streamer(TBuffer &b, void *objadd); 26{; 27 // Streamer function for std::string object.; 28 if (b.IsReading()) {; 29 b.ReadStdString((std::string*)objadd);; 30 } else {; 31 b.WriteStdString((std::string*)objadd);; 32 }; 33}; 34 ; 35// Declare the streamer to the string TClass object; 36RootStreamer(string,std_string_streamer);; 37 ; 38// Set a version number of the string TClass object; 39RootClassVersion(string,2);; 40 ; 41 ; RConfig.hxx; b#define b(i)Definition RSha256.hxx:100; RootStreamer#define RootStreamer(name, STREAMER)Definition Rtypes.h:461; RootClassVersion#define RootClassVersion(name, VersionNumber)Definition Rtypes.h:451; std_string_streamervoid std_string_streamer(TBuffer &b, void *objadd)Definition String.cxx:25; TBuffer.h; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43. corebasesrcString.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/String_8cxx_source.html:76,Guid,Guide,76,doc/master/String_8cxx_source.html,https://root.cern,https://root.cern/doc/master/String_8cxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/src/String.cxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. String.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Philippe Canal 03/09/2003; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun, Fons Rademakers and al. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12//////////////////////////////////////////////////////////////////////////; 13// //; 14// std::string helper utilities //; 15// //; 16//////////////////////////////////////////////////////////////////////////; 17 ; 18#include <ROOT/RConfig.hxx>; 19#include ""TBuffer.h""; 20 ; 21#include <string>; 22 ; 23using std::string;; 24 ; 25void std_string_streamer(TBuffer &b, void *objadd); 26{; 27 // Streamer function for std::string object.; 28 if (b.IsReading()) {; 29 b.ReadStdString((std::string*)objadd);; 30 } else {; 31 b.WriteStdString((std::string*)objadd);; 32 }; 33}; 34 ; 35// Declare the streamer to the string TClass object; 36RootStreamer(string,std_string_streamer);; 37 ; 38// Set a version number of the string TClass object; 39RootClassVersion(string,2);; 40 ; 41 ; RConfig.hxx; b#define b(i)Definition RSha256.hxx:100; RootStreamer#define RootStreamer(name, STREAMER)Definition Rtypes.h:456; RootClassVersion#define RootClassVersion(name, VersionNumber)Definition Rtypes.h:446; std_string_streamervoid std_string_streamer(TBuffer &b, void *objadd)Definition String.cxx:25; TBuffer.h; TBufferBuffer base class used for serializing objects.Definition TBuffer.h:43. corebasesrcString.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/String_8cxx_source.html:75,Guid,Guide,75,doc/v632/String_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/String_8cxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TApplication.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TApplication.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 22/12/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TApplication; 13\ingroup Base; 14 ; 15This class creates the ROOT Application Environment that interfaces; 16to the windowing system eventloop and eventhandlers.; 17This class must be instantiated exactly once in any given; 18application. Normally the specific application class inherits from; 19TApplication (see TRint).; 20*/; 21 ; 22#include ""RConfigure.h""; 23#include ""TApplication.h""; 24#include ""TException.h""; 25#include ""TGuiFactory.h""; 26#include ""TVirtualX.h""; 27#include ""TROOT.h""; 28#include ""TSystem.h""; 29#include ""TString.h""; 30#include ""TError.h""; 31#include ""TObjArray.h""; 32#include ""TObjString.h""; 33#include ""TTimer.h""; 34#include ""TInterpreter.h""; 35#include ""TStyle.h""; 36#include ""TVirtualPad.h""; 37#include ""TEnv.h""; 38#include ""TColor.h""; 39#include ""TPluginManager.h""; 40#include ""TClassTable.h""; 41#include ""TBrowser.h""; 42#include ""TUrl.h""; 43#include ""TVirtualMutex.h""; 44#include ""TClassEdit.h""; 45#include ""TMethod.h""; 46#include ""TDataMember.h""; 47#include ""TApplicationCommandLineOptionsHelp.h""; 48#include ""TPRegexp.h""; 49#include <cstdlib>; 50#include <iostream>; 51#include <fstream>; 52 ; 53TApplication *gApplication = nullptr;; 54Bool_t TApplication::fgGraphNeeded = kFALSE;; 55Bool_t TApplication::fgGraphInit = kFALSE;; 56TList *TApplication::fgApplications = nullptr; // List of available applications; 57 ; 58////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:82,Guid,Guide,82,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TAttAxis.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttAxis.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TAttAxis.h""; 13#include ""TBuffer.h""; 14#include ""TStyle.h""; 15#include ""TVirtualPad.h""; 16#include ""TColor.h""; 17#include ""TMathBase.h""; 18#include <cstdlib>; 19#include <iostream>; 20 ; 21ClassImp(TAttAxis);; 22 ; 23/** \class TAttAxis; 24\ingroup Base; 25\ingroup GraphicsAtt; 26 ; 27Manages histogram axis attributes.; 28 ; 29They are:; 30 ; 31 - The number of divisions: TAttAxis::SetNdivisions.; 32 - The line axis' color: TAttAxis::SetAxisColor.; 33 - The axis labels' color: TAttAxis::SetLabelColor.; 34 - The axis labels' font: TAttAxis::SetLabelFont.; 35 - The axis labels' offset: TAttAxis::SetLabelOffset.; 36 - The axis labels' size: TAttAxis::SetLabelSize.; 37 - The tick marks's length: TAttAxis::SetTickLength or TAttAxis::SetTickSize .; 38 - The axis title's offset: TAttAxis::SetTitleOffset.; 39 - The axis title's size: TAttAxis::SetTitleSize.; 40 - The axis title's color: TAttAxis::SetTitleColor.; 41 - The axis title's font: TAttAxis::SetTitleFont.; 42 ; 43*/; 44 ; 45TAttAxis::TAttAxis(); 46{; 47 // Constructor.; 48 ResetAttAxis();; 49}; 50 ; 51////////////////////////////////////////////////////////////////////////////////; 52/// Destructor.; 53 ; 54TAttAxis::~TAttAxis(); 55{; 56}; 57 ; 58////////////////////////////////////////////////////////////////////////////////; 59/// Copy of the object.; 60 ; 61void TAttAxis::Copy(TAttAxis &attaxis) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttAxis_8cxx_source.html:78,Guid,Guide,78,doc/master/TAttAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttAxis_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TAttFill.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttFill.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <iostream>; 13#include ""TAttFill.h""; 14#include ""TVirtualPad.h""; 15#include ""TStyle.h""; 16#include ""TVirtualX.h""; 17#include ""TVirtualPadEditor.h""; 18#include ""TColor.h""; 19 ; 20ClassImp(TAttFill);; 21 ; 22/** \class TAttFill; 23\ingroup Base; 24\ingroup GraphicsAtt; 25 ; 26Fill Area Attributes class.; 27 ; 28This class is used (in general by secondary inheritance); 29by many other classes (graphics, histograms). It holds all the fill area; 30attributes.; 31 ; 32## Fill Area attributes; 33Fill Area attributes are:; 34 ; 35 - [Fill Area color](\ref ATTFILL1); 36 - [Fill Area style](\ref ATTFILL2); 37 ; 38\anchor ATTFILL1; 39## Fill Area color; 40The fill area color is a color index (integer) pointing in the ROOT; 41color table.; 42The fill area color of any class inheriting from `TAttFill` can; 43be changed using the method `SetFillColor` and retrieved using the; 44method `GetFillColor`.; 45The following table shows the first 50 default colors.; 46 ; 47Begin_Macro; 48{; 49 TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; 50 c->DrawColorTable();; 51 return c;; 52}; 53End_Macro; 54 ; 55### Color transparency; 56`SetFillColorAlpha()`, allows to set a transparent color.; 57In the following example the fill color of the histogram `histo`; 58is set to blue with an opacity of 35% (i.e. a transparency of 65%).; 59(The color `kBlue` itself is int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttFill_8cxx_source.html:78,Guid,Guide,78,doc/master/TAttFill_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttFill_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TAttLine.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttLine.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TAttLine.h""; 13#include ""TVirtualPad.h""; 14#include ""TStyle.h""; 15#include ""TVirtualX.h""; 16#include ""TVirtualPadEditor.h""; 17#include ""TColor.h""; 18#include <cmath>; 19#include <iostream>; 20 ; 21ClassImp(TAttLine);; 22using std::sqrt;; 23 ; 24/** \class TAttLine; 25\ingroup Base; 26\ingroup GraphicsAtt; 27 ; 28Line Attributes class.; 29 ; 30This class is used (in general by secondary inheritance); 31by many other classes (graphics, histograms). It holds all the line attributes.; 32 ; 33## Line attributes; 34Line attributes are:; 35 ; 36 - [Line Color](\ref ATTLINE1); 37 - [Line Width](\ref ATTLINE2); 38 - [Line Style](\ref ATTLINE3); 39 ; 40\anchor ATTLINE1; 41## Line Color; 42The line color is a color index (integer) pointing in the ROOT; 43color table.; 44The line color of any class inheriting from `TAttLine` can; 45be changed using the method `SetLineColor` and retrieved using the; 46method `GetLineColor`.; 47The following table shows the first 50 default colors.; 48 ; 49Begin_Macro; 50{; 51 TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; 52 c->DrawColorTable();; 53 return c;; 54}; 55End_Macro; 56 ; 57### Color transparency; 58`SetLineColorAlpha()`, allows to set a transparent color.; 59In the following example the line color of the histogram `histo`; 60is set to blue with an opacity of 35% (i.e. a transparency of 65%).; 61(The c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttLine_8cxx_source.html:78,Guid,Guide,78,doc/master/TAttLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttLine_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TAttMarker.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttMarker.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/05/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <iostream>; 13#include ""Strlen.h""; 14#include ""TAttMarker.h""; 15#include ""TVirtualPad.h""; 16#include ""TStyle.h""; 17#include ""TVirtualX.h""; 18#include ""TVirtualPadEditor.h""; 19#include ""TColor.h""; 20 ; 21ClassImp(TAttMarker);; 22 ; 23/** \class TAttMarker; 24\ingroup Base; 25\ingroup GraphicsAtt; 26 ; 27Marker Attributes class.; 28 ; 29This class is used (in general by secondary inheritance); 30by many other classes (graphics, histograms). It holds all the markers; 31attributes.; 32 ; 33## Marker attributes; 34The marker attributes are:; 35 ; 36 - [Marker color](\ref ATTMARKER1); 37 - [Marker style](\ref ATTMARKER2); 38 - [Marker line width](\ref ATTMARKER21); 39 - [Marker size](\ref M3); 40 ; 41\anchor ATTMARKER1; 42## Marker color; 43The marker color is a color index (integer) pointing in the ROOT color; 44table.; 45The marker color of any class inheriting from `TAttMarker` can; 46be changed using the method `SetMarkerColor` and retrieved using the; 47method `GetMarkerColor`.; 48The following table shows the first 50 default colors.; 49 ; 50Begin_Macro; 51{; 52 TCanvas *c = new TCanvas(""c"",""Fill Area colors"",0,0,500,200);; 53 c->DrawColorTable();; 54 return c;; 55}; 56End_Macro; 57 ; 58### Color transparency; 59 ; 60`SetMarkerColorAlpha()`, allows to set a transparent color.; 61In the following example the marker color of the histogram `histo`; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttMarker_8cxx_source.html:80,Guid,Guide,80,doc/master/TAttMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttMarker_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TAttText.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TAttText.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <iostream>; 13#include ""Strlen.h""; 14#include ""TROOT.h""; 15#include ""TAttText.h""; 16#include ""TVirtualPad.h""; 17#include ""TStyle.h""; 18#include ""TVirtualX.h""; 19#include ""TError.h""; 20#include ""TVirtualPadEditor.h""; 21#include ""TColor.h""; 22 ; 23ClassImp(TAttText);; 24 ; 25/** \class TAttText; 26\ingroup Base; 27\ingroup GraphicsAtt; 28 ; 29Text Attributes class.; 30 ; 31This class is used (in general by secondary inheritance); 32by many other classes (graphics, histograms). It holds all the text attributes.; 33 ; 34## Text attributes; 35Text attributes are:; 36 ; 37 - [Text Alignment](\ref ATTTEXT1); 38 - [Text Angle](\ref ATTTEXT2); 39 - [Text Color](\ref ATTTEXT3); 40 - [Text Size](\ref ATTTEXT4); 41 - [Text Font and Precision](\ref ATTTEXT5); 42 - [Font quality and speed](\ref ATTTEXT51); 43 - [How to use True Type Fonts](\ref ATTTEXT52); 44 - [List of the currently supported fonts](\ref ATTTEXT53); 45 ; 46\anchor ATTTEXT1; 47## Text Alignment; 48 ; 49The text alignment is an integer number (`align`) allowing to control; 50the horizontal and vertical position of the text string with respect; 51to the text position.; 52The text alignment of any class inheriting from `TAttText` can; 53be changed using the method `SetTextAlign` and retrieved using the; 54method `GetTextAlign`.; 55 ; 56~~~ {.cpp}; 57 align = 10*HorizontalAlign + VerticalAlign; 58~~~;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:78,Guid,Guide,78,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TBuffer.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TBuffer.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 6da0b5b613bbcfaa3a5cd4074e7b2be2448dfb31 $; 2// Author: Fons Rademakers 04/05/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TBuffer; 13\ingroup Base; 14 ; 15Buffer base class used for serializing objects.; 16*/; 17 ; 18#include ""TBuffer.h""; 19#include ""TClass.h""; 20#include ""TProcessID.h""; 21 ; 22constexpr Int_t kExtraSpace = 8; // extra space at end of buffer (used for free block count); 23constexpr Int_t kMaxBufferSize = 0x7FFFFFFE; // largest possible size.; 24 ; 25 ; 26ClassImp(TBuffer);; 27 ; 28/// Default streamer implementation used by ClassDefInline to avoid; 29/// requirement to include TBuffer.h; 30void ROOT::Internal::DefaultStreamer(TBuffer &R__b, const TClass *cl, void *objpointer); 31{; 32 if (R__b.IsReading()); 33 R__b.ReadClassBuffer(cl, objpointer);; 34 else; 35 R__b.WriteClassBuffer(cl, objpointer);; 36}; 37 ; 38////////////////////////////////////////////////////////////////////////////////; 39/// The user has provided memory than we don't own, thus we can not extent it; 40/// either.; 41 ; 42static char *R__NoReAllocChar(char *, size_t, size_t); 43{; 44 return nullptr;; 45}; 46 ; 47////////////////////////////////////////////////////////////////////////////////; 48/// Create an I/O buffer object. Mode should be either TBuffer::kRead or; 49/// TBuffer::kWrite. By default the I/O buffer has a size of; 50/// TBuffer::kInitialSize (1024) bytes.; 51 ; 52TBuffer::TBuffer(EMode mode); 53{; 54 fBufSize = kInitia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBuffer_8cxx_source.html:77,Guid,Guide,77,doc/master/TBuffer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBuffer_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TColor.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TColor.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TROOT.h""; 13#include ""TColor.h""; 14#include ""TObjArray.h""; 15#include ""TArrayI.h""; 16#include ""TArrayD.h""; 17#include ""TVirtualX.h""; 18#include ""TError.h""; 19#include ""TMathBase.h""; 20#include ""TApplication.h""; 21#include ""TColorGradient.h""; 22#include ""snprintf.h""; 23#include <algorithm>; 24#include <cmath>; 25#include <iostream>; 26#include <fstream>; 27 ; 28ClassImp(TColor);; 29 ; 30namespace {; 31 static Bool_t& TColor__GrayScaleMode() {; 32 static Bool_t grayScaleMode;; 33 return grayScaleMode;; 34 }; 35 static TArrayI& TColor__Palette() {; 36 static TArrayI globalPalette(0);; 37 return globalPalette;; 38 }; 39 static TArrayD& TColor__PalettesList() {; 40 static TArrayD globalPalettesList(0);; 41 return globalPalettesList;; 42 }; 43}; 44 ; 45static Int_t gHighestColorIndex = 0; ///< Highest color index defined; 46static Float_t gColorThreshold = -1.; ///< Color threshold used by GetColor; 47static Int_t gDefinedColors = 0; ///< Number of defined colors.; 48static Int_t gLastDefinedColors = 649; ///< Previous number of defined colors; 49 ; 50#define fgGrayscaleMode TColor__GrayScaleMode(); 51#define fgPalette TColor__Palette(); 52#define fgPalettesList TColor__PalettesList(); 53 ; 54using std::floor;; 55 ; 56/** \class TColor; 57\ingroup Base; 58\ingroup GraphicsAtt; 59 ; 60The color creation and management class.; 61 ; 62 - [Introduction](\ref C00)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:76,Guid,Guide,76,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TDatime.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TDatime.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 05/01/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TDatime; 13\ingroup Base; 14 ; 15This class stores the date and time with a precision of one second; 16in an unsigned 32 bit word (950130 124559).; 17The date is stored with the origin being the 1st January 1995.; 18 ; 19This class has no support for time zones. The time is assumed; 20to be in the local time of the machine where the object was created.; 21As a result, TDatime objects are not portable between machines; 22operating in different time zones and unsuitable for storing the; 23date/time of data taking events and the like. If absolute time is; 24required, use TTimeStamp.; 25*/; 26 ; 27#include <ROOT/RConfig.hxx>; 28 ; 29#include <ctime>; 30 ; 31#ifdef WIN32; 32#include ""Windows4Root.h""; 33#include <string.h>; 34#endif; 35 ; 36#include ""TBuffer.h""; 37#include ""Strlen.h""; 38#include ""snprintf.h""; 39#include ""TDatime.h""; 40#include ""TError.h""; 41#include ""Bytes.h""; 42#include ""TString.h""; 43 ; 44 ; 45ClassImp(TDatime);; 46 ; 47////////////////////////////////////////////////////////////////////////////////; 48/// Create a TDatime and set it to the current time.; 49 ; 50TDatime::TDatime(); 51{; 52 Set();; 53}; 54 ; 55////////////////////////////////////////////////////////////////////////////////; 56/// Create a TDatime and set it to the specified date and time.; 57/// See Set(Int_t, Int_t) about the date, time format.; 58 ; 59TDatime::TDatime(I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDatime_8cxx_source.html:77,Guid,Guide,77,doc/master/TDatime_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDatime_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TDirectory.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TDirectory.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 65b4f3646f4e5b2fa77218ba786b7fe4e16e27be $; 2// Author: Rene Brun 28/11/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11#include <cstdlib>; 12 ; 13#include ""Strlen.h""; 14#include ""strlcpy.h""; 15#include ""TDirectory.h""; 16#include ""TBuffer.h""; 17#include ""TClassTable.h""; 18#include ""TInterpreter.h""; 19#include ""THashList.h""; 20#include ""TBrowser.h""; 21#include ""TROOT.h""; 22#include ""TError.h""; 23#include ""TClass.h""; 24#include ""TRegexp.h""; 25#include ""TSystem.h""; 26#include ""TVirtualMutex.h""; 27#include ""TThreadSlots.h""; 28#include ""TMethod.h""; 29 ; 30#include ""TSpinLockGuard.h""; 31 ; 32Bool_t TDirectory::fgAddDirectory = kTRUE;; 33 ; 34const Int_t kMaxLen = 2048;; 35 ; 36static std::atomic_flag *GetCurrentDirectoryLock(); 37{; 38 thread_local std::atomic_flag gDirectory_lock = ATOMIC_FLAG_INIT;; 39 return &gDirectory_lock;; 40}; 41 ; 42/** \class TDirectory; 43\ingroup Base; 44 ; 45Describe directory structure in memory.; 46*/; 47 ; 48ClassImp(TDirectory);; 49 ; 50////////////////////////////////////////////////////////////////////////////////; 51/// Directory default constructor.; 52 ; 53TDirectory::TDirectory() : TNamed(); 54{; 55 // MSVC doesn't support fSpinLock=ATOMIC_FLAG_INIT; in the class definition; 56 std::atomic_flag_clear( &fSpinLock );; 57}; 58 ; 59////////////////////////////////////////////////////////////////////////////////; 60/// Create a new Directory.; 61///; 62/// A new directory with name,title is created in the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8cxx_source.html:80,Guid,Guide,80,doc/master/TDirectory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TEnv.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TEnv.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 0daf41ec24086ee7af29fdc2f9f2f848b150dcc8 $; 2// Author: Fons Rademakers 22/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TEnv; 13\ingroup Base; 14 ; 15The TEnv class reads config files, by default named `.rootrc`.; 16Three types of config files are read: global, user and local files. The; 17global file is `$ROOTSYS/etc/system<name>` (or `ROOTETCDIR/system<name>`); 18the user file is `$HOME/<name>` and the local file is `./<name>`.; 19By setting the shell variable `ROOTENV_NO_HOME=1` the reading of; 20the `$HOME/<name>` resource file will be skipped. This might be useful; 21in case the home directory resides on an auto-mounted remote file; 22system and one wants to avoid this file system from being mounted.; 23 ; 24The format of the `.rootrc` file is similar to the `.Xdefaults` format:; 25~~~ {.cpp}; 26 [+]<SystemName>.<RootName|ProgName>.<name>[(type)]: <value>; 27~~~; 28Where `<SystemName>` is either Unix, WinNT, MacOS or Vms,; 29`<RootName>` the name as given in the TApplication ctor (or ""RootApp""; 30in case no explicit TApplication derived object was created),; 31`<ProgName>` the current program name and `<name>` the resource name,; 32with optionally a type specification. `<value>` can be either a; 33string, an integer, a float/double or a boolean with the values; 34TRUE, FALSE, ON, OFF, YES, NO, OK, NOT. Booleans will be returned as; 35an integer 0 or 1. The options [+] allows the concatenation of; 36values to the same res",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:74,Guid,Guide,74,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TNamed.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TNamed.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 26/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TNamed; 13\ingroup Base; 14 ; 15The TNamed class is the base class for all named ROOT classes.; 16 ; 17A TNamed contains the essential elements (name, title); 18to identify a derived object in containers, directories and files.; 19Most member functions defined in this base class are in general; 20overridden by the derived classes.; 21*/; 22 ; 23#include <iostream>; 24#include ""Strlen.h""; 25#include ""TNamed.h""; 26#include ""TROOT.h""; 27#include ""TVirtualPad.h""; 28#include ""TClass.h""; 29 ; 30ClassImp(TNamed);; 31 ; 32////////////////////////////////////////////////////////////////////////////////; 33/// TNamed copy ctor.; 34 ; 35TNamed::TNamed(const TNamed &named) : TObject(named),fName(named.fName),fTitle(named.fTitle); 36{; 37}; 38 ; 39////////////////////////////////////////////////////////////////////////////////; 40/// TNamed destructor.; 41 ; 42TNamed::~TNamed(); 43{; 44 // Required since we overload TObject::Hash.; 45 ROOT::CallRecursiveRemoveIfNeeded(*this);; 46}; 47 ; 48////////////////////////////////////////////////////////////////////////////////; 49/// TNamed assignment operator.; 50 ; 51TNamed& TNamed::operator=(const TNamed& rhs); 52{; 53 if (this != &rhs) {; 54 TObject::operator=(rhs);; 55 fName = rhs.fName;; 56 fTitle = rhs.fTitle;; 57 }; 58 return *this;; 59}; 60 ; 61///////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8cxx_source.html:76,Guid,Guide,76,doc/master/TNamed_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TObject.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObject.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 26/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TObject; 13\ingroup Base; 14 ; 15Mother of all ROOT objects.; 16 ; 17The TObject class provides default behaviour and protocol for all; 18objects in the ROOT system. It provides protocol for object I/O,; 19error handling, sorting, inspection, printing, drawing, etc.; 20Every object which inherits from TObject can be stored in the; 21ROOT collection classes.; 22 ; 23TObject's bits can be used as flags, bits 0 - 13 and 24-31 are; 24reserved as global bits while bits 14 - 23 can be used in different; 25class hierarchies (watch out for overlaps).; 26*/; 27 ; 28#include <cstring>; 29#if !defined(WIN32) && !defined(__MWERKS__) && !defined(R__SOLARIS); 30#include <strings.h>; 31#endif; 32#include <cstdlib>; 33#include <cstdio>; 34#include <sstream>; 35#include <fstream>; 36#include <iostream>; 37 ; 38#include ""Varargs.h""; 39#include ""snprintf.h""; 40#include ""TObject.h""; 41#include ""TBuffer.h""; 42#include ""TClass.h""; 43#include ""TGuiFactory.h""; 44#include ""TMethod.h""; 45#include ""TROOT.h""; 46#include ""TError.h""; 47#include ""TObjectTable.h""; 48#include ""TVirtualPad.h""; 49#include ""TInterpreter.h""; 50#include ""TMemberInspector.h""; 51#include ""TRefTable.h""; 52#include ""TProcessID.h""; 53 ; 54Longptr_t TObject::fgDtorOnly = 0;; 55Bool_t TObject::fgObjectStat = kTRUE;; 56 ; 57ClassImp(TObject);; 58 ; 59#if defined(__clang__) || defined (__GNUC__); 60# define ATTRI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8cxx_source.html:77,Guid,Guide,77,doc/master/TObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObject_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TParameter.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TParameter.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Maarten Ballintijn 21/06/2004; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TParameter; 13\ingroup Base; 14 ; 15Named parameter, streamable and storable.; 16*/; 17 ; 18#include ""TParameter.h""; 19 ; 20templateClassImp(TParameter);; templateClassImp#define templateClassImp(name)Definition Rtypes.h:427; TParameter.h; TParameterNamed parameter, streamable and storable.Definition TParameter.h:35. corebasesrcTParameter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TParameter_8cxx_source.html:80,Guid,Guide,80,doc/master/TParameter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TParameter_8cxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TParameter.cxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TParameter.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Maarten Ballintijn 21/06/2004; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TParameter; 13\ingroup Base; 14 ; 15Named parameter, streamable and storable.; 16*/; 17 ; 18#include ""TParameter.h""; 19 ; 20templateClassImp(TParameter);; templateClassImp#define templateClassImp(name)Definition Rtypes.h:422; TParameter.h; TParameterNamed parameter, streamable and storable.Definition TParameter.h:35. corebasesrcTParameter.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:06:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TParameter_8cxx_source.html:79,Guid,Guide,79,doc/v632/TParameter_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TParameter_8cxx_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TQObject.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TQObject.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 5d6810ad46b864564f576f88aa9b154789d91d48 $; 2// Author: Valeriy Onuchin & Fons Rademakers 15/10/2000; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TQObject; 13\ingroup Base; 14 ; 15This is the ROOT implementation of the Qt object communication; 16mechanism (see also http://www.troll.no/qt/metaobjects.html); 17 ; 18Signals and slots are used for communication between objects.; 19When an object has changed in some way that might be interesting; 20for the outside world, it emits a signal to tell whoever is; 21listening. All slots that are connected to this signal will be; 22activated (called). It is even possible to connect a signal; 23directly to another signal (this will emit the second signal; 24immediately whenever the first is emitted.) There is no limitation; 25on the number of slots that can be connected to a signal.; 26The slots will be activated in the order they were connected; 27to the signal. This mechanism allows objects to be easily reused,; 28because the object that emits a signal does not need to know; 29to which objects the signals are connected.; 30Together, signals and slots make up a powerfull component; 31programming mechanism.; 32 ; 33### Signals; 34 ; 35~~~ {.cpp}; 36 Destroyed(); 37~~~; 38Signal emitted when object is destroyed.; 39This signal could be connected to some garbage-collector object.; 40 ; 41~~~ {.cpp}; 42 ChangedBy(const char *method_name); 43~~~; 44This signal is emitted when some important",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TQObject_8cxx_source.html:78,Guid,Guide,78,doc/master/TQObject_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TQObject_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TROOT.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TROOT.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 08/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TROOT; 13\ingroup Base; 14 ; 15ROOT top level object description.; 16 ; 17The TROOT object is the entry point to the ROOT system.; 18The single instance of TROOT is accessible via the global gROOT.; 19Using the gROOT pointer one has access to basically every object; 20created in a ROOT based program. The TROOT object is essentially a; 21container of several lists pointing to the main ROOT objects.; 22 ; 23The following lists are accessible from gROOT object:; 24 ; 25~~~ {.cpp}; 26 gROOT->GetListOfClasses; 27 gROOT->GetListOfColors; 28 gROOT->GetListOfTypes; 29 gROOT->GetListOfGlobals; 30 gROOT->GetListOfGlobalFunctions; 31 gROOT->GetListOfFiles; 32 gROOT->GetListOfMappedFiles; 33 gROOT->GetListOfSockets; 34 gROOT->GetListOfSecContexts; 35 gROOT->GetListOfCanvases; 36 gROOT->GetListOfStyles; 37 gROOT->GetListOfFunctions; 38 gROOT->GetListOfSpecials (for example graphical cuts); 39 gROOT->GetListOfGeometries; 40 gROOT->GetListOfBrowsers; 41 gROOT->GetListOfCleanups; 42 gROOT->GetListOfMessageHandlers; 43~~~; 44 ; 45The TROOT class provides also many useful services:; 46 - Get pointer to an object in any of the lists above; 47 - Time utilities TROOT::Time; 48 ; 49The ROOT object must be created as a static object. An example; 50of a main program creating an interactive version is shown below:; 51 ; 52### Example of a main program; 53 ; 54~~~ {.cpp}; 55 #inc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:75,Guid,Guide,75,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TROOT.cxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TROOT.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 08/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TROOT; 13\ingroup Base; 14 ; 15ROOT top level object description.; 16 ; 17The TROOT object is the entry point to the ROOT system.; 18The single instance of TROOT is accessible via the global gROOT.; 19Using the gROOT pointer one has access to basically every object; 20created in a ROOT based program. The TROOT object is essentially a; 21container of several lists pointing to the main ROOT objects.; 22 ; 23The following lists are accessible from gROOT object:; 24 ; 25~~~ {.cpp}; 26 gROOT->GetListOfClasses; 27 gROOT->GetListOfColors; 28 gROOT->GetListOfTypes; 29 gROOT->GetListOfGlobals; 30 gROOT->GetListOfGlobalFunctions; 31 gROOT->GetListOfFiles; 32 gROOT->GetListOfMappedFiles; 33 gROOT->GetListOfSockets; 34 gROOT->GetListOfSecContexts; 35 gROOT->GetListOfCanvases; 36 gROOT->GetListOfStyles; 37 gROOT->GetListOfFunctions; 38 gROOT->GetListOfSpecials (for example graphical cuts); 39 gROOT->GetListOfGeometries; 40 gROOT->GetListOfBrowsers; 41 gROOT->GetListOfCleanups; 42 gROOT->GetListOfMessageHandlers; 43~~~; 44 ; 45The TROOT class provides also many useful services:; 46 - Get pointer to an object in any of the lists above; 47 - Time utilities TROOT::Time; 48 ; 49The ROOT object must be created as a static object. An example; 50of a main program creating an interactive version is shown below:; 51 ; 52### Example of a main program; 53 ; 54~~~ {.cpp}; 55 #incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TROOT_8cxx_source.html:74,Guid,Guide,74,doc/v632/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TROOT_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TStopwatch.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStopwatch.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 11/10/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TStopwatch; 13\ingroup Base; 14 ; 15Stopwatch class. This class returns the real and cpu time between; 16the start and stop events.; 17*/; 18 ; 19#include ""TStopwatch.h""; 20#include ""TTimeStamp.h""; 21#include ""TString.h""; 22 ; 23#if defined(R__UNIX); 24# include <sys/times.h>; 25# include <unistd.h>; 26static Double_t gTicks = 0;; 27#elif defined(WIN32); 28# include ""TError.h""; 29const Double_t gTicks = 1.0e-7;; 30# include ""Windows4Root.h""; 31#endif; 32 ; 33 ; 34ClassImp(TStopwatch);; 35 ; 36////////////////////////////////////////////////////////////////////////////////; 37/// Create a stopwatch and start it.; 38 ; 39TStopwatch::TStopwatch(); 40{; 41#ifdef R__UNIX; 42 if (gTicks <= 0.0); 43 gTicks = (Double_t)sysconf(_SC_CLK_TCK);; 44#endif; 45 ; 46 fStopRealTime = 0;; 47 fStopCpuTime = 0;; 48 ; 49 Start();; 50}; 51 ; 52////////////////////////////////////////////////////////////////////////////////; 53/// Start the stopwatch. If reset is kTRUE reset the stopwatch before; 54/// starting it (including the stopwatch counter).; 55/// Use kFALSE to continue timing after a Stop() without; 56/// resetting the stopwatch.; 57 ; 58void TStopwatch::Start(Bool_t reset); 59{; 60 if (reset) {; 61 fState = kUndefined;; 62 fTotalCpuTime = 0;; 63 fTotalRealTime = 0;; 64 fCounter = 0;; 65 }; 66 if (fState != kRunning) {; 67 fStartRealTime = GetRealTime(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStopwatch_8cxx_source.html:80,Guid,Guide,80,doc/master/TStopwatch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStopwatch_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TString.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Macros |; Functions |; Variables ; TString.cxx File Reference. #include <ROOT/RConfig.hxx>; #include <stdlib.h>; #include <ctype.h>; #include <list>; #include <algorithm>; #include ""Varargs.h""; #include ""strlcpy.h""; #include ""TString.h""; #include ""TBuffer.h""; #include ""TError.h""; #include ""Bytes.h""; #include ""TClass.h""; #include ""TMD5.h""; #include ""TObjArray.h""; #include ""TObjString.h""; #include ""TVirtualMutex.h""; #include ""ThreadLocalStorage.h""; #include <stdint.h>. Include dependency graph for TString.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Macros; #define BIG_CONSTANT(x)   (x##LLU);  ; #define ROTL64(x, y)   rotl64(x,y);  . Functions; char * Compress (const char *str);  Remove all blanks from the string str. ;  ; int EscChar (const char *src, char *dst, int dstlen, char *specchars, char escchar);  Escape specchars in src with escchar and copy to dst. ;  ; char * Form (const char *fmt,...);  Formats a string in a circular formatting buffer. ;  ; static char * Format (const char *format, va_list ap);  Format a string in a circular formatting buffer (using a printf style format descriptor). ;  ; UInt_t Hash (const char *str);  Return a case-sensitive hash value (endian independent). ;  ; static void Mash (UInt_t &hash, UInt_t chars);  Utility used by Hash(). ;  ; static int MemIsEqual (const char *p, const char *q, Ssiz_t n);  Returns false if strings are not equal. ;  ; TString operator+ (char c, const TString &s);  Add string to char. ;  ; TString operator+ (const char *cs, const TString &s);  Use the special concatenation constructor. ;  ; TString operator+ (const TString &s, char c)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx.html:80,Guid,Guide,80,doc/master/TString_8cxx.html,https://root.cern,https://root.cern/doc/master/TString_8cxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TString.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TString.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 04/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TString; 13\ingroup Base; 14 ; 15Basic string class.; 16 ; 17Cannot be stored in a TCollection... use TObjString instead.; 18 ; 19The underlying string is stored as a char* that can be accessed via; 20TString::Data().; 21TString provides Short String Optimization (SSO) so that short; 22strings (<15 on 64-bit and <11 on 32-bit) are contained in the; 23TString internal data structure without the need for mallocing the; 24required space.; 25 ; 26Substring operations are provided by the TSubString class, which; 27holds a reference to the original string and its data, along with; 28the offset and length of the substring. To retrieve the substring; 29as a TString, construct a TString from it, eg:; 30~~~ {.cpp}; 31 root [0] TString s(""hello world""); 32 root [1] TString s2( s(0,5) ); 33 root [2] s2; 34 (class TString)""hello""; 35~~~; 36*/; 37 ; 38#include <ROOT/RConfig.hxx>; 39#include <stdlib.h>; 40#include <ctype.h>; 41#include <list>; 42#include <algorithm>; 43 ; 44#include ""Varargs.h""; 45#include ""strlcpy.h""; 46#include ""TString.h""; 47#include ""TBuffer.h""; 48#include ""TError.h""; 49#include ""Bytes.h""; 50#include ""TClass.h""; 51#include ""TMD5.h""; 52#include ""TObjArray.h""; 53#include ""TObjString.h""; 54#include ""TVirtualMutex.h""; 55#include ""ThreadLocalStorage.h""; 56 ; 57#if defined(R__WIN32); 58#define strtoull _strtoui64; 59#endif; 60 ; 61#ifdef R__GLO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:77,Guid,Guide,77,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TStyle.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TStyle.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Rene Brun 12/12/94; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include <cstring>; 13#include <cstdio>; 14#include <cctype>; 15#include <cmath>; 16#include <iostream>; 17#include <fstream>; 18 ; 19#include ""strlcpy.h""; 20#include ""TApplication.h""; 21#include ""TColor.h""; 22#include ""TDatime.h""; 23#include ""TROOT.h""; 24#include ""TStyle.h""; 25#include ""TSystem.h""; 26#include ""TVirtualPad.h""; 27#include ""TVirtualMutex.h""; 28#include ""TEnv.h""; 29 ; 30TStyle *gStyle;; 31const UInt_t kTakeStyle = BIT(17);; 32 ; 33ClassImp(TStyle);; 34 ; 35/** \class TStyle; 36\ingroup Base; 37 \ingroup GraphicsAtt; 38 ; 39TStyle objects may be created to define special styles.; 40By default ROOT creates a default style that can be accessed via; 41the gStyle pointer.; 42 ; 43This class includes functions to set some of the following object attributes.; 44 - Canvas; 45 - Pad; 46 - Histogram axis; 47 - Lines; 48 - Fill areas; 49 - Text; 50 - Markers; 51 - Functions; 52 - Histogram Statistics and Titles; 53 ; 54All objects that can be drawn in a pad inherit from one or more attribute classes; 55like TAttLine, TAttFill, TAttText, TAttMarker. When the objects are created, their; 56default attributes are taken from the current style. The current style is an object; 57of the class[TStyle](https://root.cern/doc/master/classTStyle.html) and can be; 58referenced via the global variable `gStyle` (in TStyle.h).; 59 ; 60ROOT provides two styles called ""Default"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8cxx_source.html:76,Guid,Guide,76,doc/master/TStyle_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TSystem.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSystem.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id: 8944840ba34631ec28efc779647618db43c0eee5 $; 2// Author: Fons Rademakers 15/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TSystem; 13\ingroup Base; 14 ; 15Abstract base class defining a generic interface to the underlying; 16Operating System.; 17This is not an ABC in the strict sense of the (C++) word. For; 18every member function there is an implementation (often not more; 19than a call to AbstractMethod() which prints a warning saying; 20that the method should be overridden in a derived class), which; 21allows a simple partial implementation for new OS'es.; 22*/; 23 ; 24#include <ROOT/FoundationUtils.hxx>; 25#include ""strlcpy.h""; 26#include ""TSystem.h""; 27#include ""TApplication.h""; 28#include ""TException.h""; 29#include ""TROOT.h""; 30#include ""TClass.h""; 31#include ""TClassTable.h""; 32#include ""TEnv.h""; 33#include ""TOrdCollection.h""; 34#include ""TObject.h""; 35#include ""TInterpreter.h""; 36#include ""TRegexp.h""; 37#include ""TObjString.h""; 38#include ""TObjArray.h""; 39#include ""TError.h""; 40#include ""TPluginManager.h""; 41#include ""TUrl.h""; 42#include ""TVirtualMutex.h""; 43#include ""TVersionCheck.h""; 44#include ""compiledata.h""; 45#include ""RConfigure.h""; 46#include ""THashList.h""; 47#include ""ThreadLocalStorage.h""; 48 ; 49#include <functional>; 50#include <iostream>; 51#include <fstream>; 52#include <memory>; 53#include <sstream>; 54#include <string>; 55#include <sys/stat.h>; 56#include <set>; 57 ; 58#ifdef WIN32; 59#include <io.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:77,Guid,Guide,77,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,". ROOT: core/base/src/TTimer.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TTimer.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Fons Rademakers 28/11/96; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TTimer; 13\ingroup Base; 14 ; 15Handles synchronous and a-synchronous timer events.; 161. synchronous timer is registered into TSystem and is processed; 17 within the standard ROOT event-loop.; 182. asynchronous timer is passed to the operating system which sends; 19 an external signal to ROOT and thus interrupts its event-loop.; 20 ; 21You can use this class in one of the following ways:; 22 - Sub-class TTimer and override the Notify() method.; 23 - Re-implement the TObject::HandleTimer() method in your class; 24 and pass a pointer to this object to timer, see the SetObject(); 25 method.; 26 - Pass an interpreter command to timer, see SetCommand() method.; 27 - Create a TTimer, connect its Timeout() signal to the; 28 appropriate methods. Then when the time is up it will emit a; 29 Timeout() signal and call connected slots.; 30 ; 31Minimum timeout interval is defined in TSystem::ESysConstants as; 32`kItimerResolution` (currently 10 ms).; 33 ; 34Signal/slots example:; 35~~~{.cpp}; 36 TTimer *timer = new TTimer();; 37 timer->Connect(""Timeout()"", ""myObjectClassName"",; 38 myObject, ""TimerDone()"");; 39 timer->Start(2000, kTRUE); // 2 seconds single-shot; 40~~~; 41To emit the Timeout signal repeatedly with minimum timeout:; 42~~~ {.cpp}; 43 timer->Start(0, kFALSE);; 44~~~; 45*/; 46 ; 47#include ""TTimer.h""; 48#include ""TSystem.h""; 49#include ""TROOT.h""; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTimer_8cxx_source.html:76,Guid,Guide,76,doc/master/TTimer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTimer_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/base/src/TVirtualFFT.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualFFT.cxx. Go to the documentation of this file. 1// @(#)root/base:$Id$; 2// Author: Anna Kreshuk 10/04/2006; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TVirtualFFT; 13\ingroup Base; 14 ; 15TVirtualFFT is an interface class for Fast Fourier Transforms.; 16 ; 17The default FFT library is FFTW. To use it, FFTW3 library should already; 18be installed, and ROOT should be have fftw3 module enabled, with the directories; 19of fftw3 include file and library specified (see installation instructions).; 20Function SetDefaultFFT() allows to change the default library.; 21 ; 22## Available transform types:; 23FFT:; 24 - ""C2CFORWARD"" - a complex input/output discrete Fourier transform (DFT); 25 in one or more dimensions, -1 in the exponent; 26 - ""C2CBACKWARD""- a complex input/output discrete Fourier transform (DFT); 27 in one or more dimensions, +1 in the exponent; 28 - ""R2C"" - a real-input/complex-output discrete Fourier transform (DFT); 29 in one or more dimensions,; 30 - ""C2R"" - inverse transforms to ""R2C"", taking complex input; 31 (storing the non-redundant half of a logically Hermitian array); 32 to real output; 33 - ""R2HC"" - a real-input DFT with output in ¡Èhalfcomplex¡É format,; 34 i.e. real and imaginary parts for a transform of size n stored as; 35 r0, r1, r2, ..., rn/2, i(n+1)/2-1, ..., i2, i1; 36 - ""HC2R"" - computes the reverse of FFTW_R2HC, above; 37 - ""DHT"" - computes a discrete Hartley transform; 38 ; 39## Sine/cosine transforms:; 40Different types of transforms are specified by parame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualFFT_8cxx_source.html:81,Guid,Guide,81,doc/master/TVirtualFFT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TVirtualFFT_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/clingutils/src/stlLoader.cc File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; stlLoader.cc File Reference. #include ""G__ci.h""; #include ""Api.h""; #include ""FastAllocString.h"". Include dependency graph for stlLoader.cc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; static int stlLoader ();  . Variables; static int sltLoad = stlLoader();  ; static const char * what = WHAT;  . Function Documentation. ◆ stlLoader(). static int stlLoader ; (; ). static . Definition at line 7 of file stlLoader.cc. Variable Documentation. ◆ sltLoad. int sltLoad = stlLoader(). static . Definition at line 29 of file stlLoader.cc. ◆ what. const char* what = WHAT. static . Definition at line 5 of file stlLoader.cc. coreclingutilssrcstlLoader.cc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/stlLoader_8cc.html:87,Guid,Guide,87,doc/master/stlLoader_8cc.html,https://root.cern,https://root.cern/doc/master/stlLoader_8cc.html,2,['Guid'],['Guide']
Usability,". ROOT: core/clingutils/src/stlLoader.cc Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. stlLoader.cc. Go to the documentation of this file. 1#include ""G__ci.h""; 2#include ""Api.h""; 3#include ""FastAllocString.h""; 4 ; 5static const char *what = WHAT;; 6 ; 7static int stlLoader(); 8{; 9 G__ClassInfo cl(""TSystem"");; 10 if (cl.IsValid() && strlen(WHAT)<1000) {; 11 G__FastAllocString buf;; 12 buf.Format(""\""lib%sDict\"""",what);; 13 ; 14 G__CallFunc func;; 15 long offset;; 16 func.SetFuncProto(&cl,""Load"",""const char*"",&offset);; 17 ; 18 if (func.InterfaceMethod()) {; 19 long tmp = G__int(G__calc(""gSystem""));; 20 void * gsystem = (void*)tmp;; 21 ; 22 func.SetArgs(buf);; 23 func.Exec(gsystem);; 24 }; 25 }; 26 return 0;; 27}; 28 ; 29static int sltLoad = stlLoader();; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; whatstatic const char * whatDefinition stlLoader.cc:5; stlLoaderstatic int stlLoader()Definition stlLoader.cc:7; sltLoadstatic int sltLoadDefinition stlLoader.cc:29. coreclingutilssrcstlLoader.cc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/stlLoader_8cc_source.html:84,Guid,Guide,84,doc/master/stlLoader_8cc_source.html,https://root.cern,https://root.cern/doc/master/stlLoader_8cc_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/cont Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. cont Directory Reference. Directory dependency graph for cont:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  doc;  ;  inc;  ;  src;  . corecont. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_dab74c5cdd3a71e5814fe91e0c8171fa.html:69,Guid,Guide,69,doc/master/dir_dab74c5cdd3a71e5814fe91e0c8171fa.html,https://root.cern,https://root.cern/doc/master/dir_dab74c5cdd3a71e5814fe91e0c8171fa.html,2,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  TArray.h;  ;  TArrayC.h;  ;  TArrayD.h;  ;  TArrayF.h;  ;  TArrayI.h;  ;  TArrayL.h;  ;  TArrayL64.h;  ;  TArrayS.h;  ;  TBits.h;  ;  TBtree.h;  ;  TClassTable.h;  ;  TClonesArray.h;  ;  TCollection.h;  ;  TCollectionProxyInfo.h;  ;  TExMap.h;  ;  THashList.h;  ;  THashTable.h;  ;  TIterator.h;  ;  TList.h;  ;  TMap.h;  ;  TObjArray.h;  ;  TObjectTable.h;  ;  TOrdCollection.h;  ;  TRefArray.h;  ;  TRefTable.h;  ;  TSeqCollection.h;  ;  TSortedList.h;  ;  TVirtualCollectionProxy.h;  . corecontinc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a1b91ffd476e3b26d4c2a148c14f4d99.html:73,Guid,Guide,73,doc/master/dir_a1b91ffd476e3b26d4c2a148c14f4d99.html,https://root.cern,https://root.cern/doc/master/dir_a1b91ffd476e3b26d4c2a148c14f4d99.html,2,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/ROOT/TSeq.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Typedefs |; Functions ; TSeq.hxx File Reference. #include ""TError.h""; #include <iterator>; #include <type_traits>; #include <sstream>. Include dependency graph for TSeq.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::TSeq< T >::iterator;  ; class  ROOT::TSeq< T >;  A pseudo container class which is a generator of indices. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Typedefs; using ROOT::TSeqI = TSeq< int >;  ; using ROOT::TSeqL = TSeq< long >;  ; using ROOT::TSeqU = TSeq< unsigned int >;  ; using ROOT::TSeqUL = TSeq< unsigned long >;  . Functions; template<class T > ; TSeq< T > ROOT::MakeSeq (T begin, T end, T step=1);  ; template<class T > ; TSeq< T > ROOT::MakeSeq (T end);  . corecontincROOTTSeq.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeq_8hxx.html:82,Guid,Guide,82,doc/master/TSeq_8hxx.html,https://root.cern,https://root.cern/doc/master/TSeq_8hxx.html,2,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/ROOT/TSeq.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSeq.hxx. Go to the documentation of this file. 1/* @(#)root/core/cont:$Id$ */; 2// Author: Danilo Piparo November 2015; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TSeq; 13#define ROOT_TSeq; 14 ; 15#include ""TError.h""; 16#include <iterator>; 17#include <type_traits>; 18 ; 19/**; 20\class ROOT::TSeq; 21\brief A pseudo container class which is a generator of indices.; 22 ; 23\tparam T Type of the numerical sequence.; 24\ingroup Containers; 25A pseudo container class which is a generator of indices. The model is the `xrange`; 26built-in function of Python.; 27Possible usages:; 28Loop on a sequence of integers; 29~~~{.cpp}; 30 for (auto i : TSeqI(10)) {; 31 cout << ""Element "" << i << endl;; 32 }; 33~~~; 34Loop on a sequence of integers in steps; 35~~~{.cpp}; 36 for (auto i : TSeqI(-5, 29, 6)) {; 37 cout << ""Element "" << i << endl;; 38 }; 39~~~; 40Loop backwards on a sequence of integers; 41~~~{.cpp}; 42 for (auto i : TSeqI(50, 30, -3)) {; 43 cout << ""Element "" << i << endl;; 44 }; 45~~~; 46Use an stl algorithm, for_each; 47~~~{.cpp}; 48 TSeqUL ulSeq(2,30,3);; 49 std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; 50~~~; 51Random access:; 52~~~{.cpp}; 53 cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; 54~~~; 55A function to create sequences inferring the type:; 56~~~{.cpp}; 57 for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; 58 cout << ""Element "" << i << endl;; 59 }; 60~~~; 61 ; 62**/; 63 ; 64namespace ROOT {; 65 ; 66 templat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeq_8hxx_source.html:79,Guid,Guide,79,doc/master/TSeq_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TSeq_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/ROOT/TSeq.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TSeq.hxx. Go to the documentation of this file. 1/* @(#)root/core/cont:$Id$ */; 2// Author: Danilo Piparo November 2015; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2016, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TSeq; 13#define ROOT_TSeq; 14 ; 15#include ""TError.h""; 16#include <iterator>; 17#include <type_traits>; 18 ; 19/**; 20\class ROOT::TSeq; 21\brief A pseudo container class which is a generator of indices.; 22 ; 23\tparam T Type of the numerical sequence.; 24\ingroup Containers; 25A pseudo container class which is a generator of indices. The model is the `xrange`; 26built-in function of Python.; 27Possible usages:; 28Loop on a sequence of integers; 29~~~{.cpp}; 30 for (auto i : TSeqI(10)) {; 31 cout << ""Element "" << i << endl;; 32 }; 33~~~; 34Loop on a sequence of integers in steps; 35~~~{.cpp}; 36 for (auto i : TSeqI(-5, 29, 6)) {; 37 cout << ""Element "" << i << endl;; 38 }; 39~~~; 40Loop backwards on a sequence of integers; 41~~~{.cpp}; 42 for (auto i : TSeqI(50, 30, -3)) {; 43 cout << ""Element "" << i << endl;; 44 }; 45~~~; 46Use an stl algorithm, for_each; 47~~~{.cpp}; 48 TSeqUL ulSeq(2,30,3);; 49 std::for_each(std::begin(ulSeq),std::end(ulSeq),[](ULong_t i){cout << ""For each: "" << i <<endl;});; 50~~~; 51Random access:; 52~~~{.cpp}; 53 cout << ""Random access: 3rd element is "" << ulSeq[2] << endl;; 54~~~; 55A function to create sequences inferring the type:; 56~~~{.cpp}; 57 for (auto i : MakeSeq(1000000000000UL, 1000000000003UL)) {; 58 cout << ""Element "" << i << endl;; 59 }; 60~~~; 61 ; 62**/; 63 ; 64namespace ROOT {; 65 ; 66 template",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TSeq_8hxx_source.html:78,Guid,Guide,78,doc/v632/TSeq_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/TSeq_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TArrayD.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TArrayD.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Rene Brun 06/03/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TArrayD; 13#define ROOT_TArrayD; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TArrayD //; 19// //; 20// Array of doubles (64 bits per element). //; 21// //; 22//////////////////////////////////////////////////////////////////////////; 23 ; 24#include ""TArray.h""; 25 ; 26 ; 27class TArrayD : public TArray {; 28 ; 29public:; 30 Double_t *fArray; //[fN] Array of fN doubles; 31 ; 32 TArrayD();; 33 TArrayD(Int_t n);; 34 TArrayD(Int_t n, const Double_t *array);; 35 TArrayD(const TArrayD &array);; 36 TArrayD &operator=(const TArrayD &rhs);; 37 virtual ~TArrayD();; 38 ; 39 void Adopt(Int_t n, Double_t *array);; 40 void AddAt(Double_t c, Int_t i);; 41 Double_t At(Int_t i) const ;; 42 void Copy(TArrayD &array) const {array.Set(fN,fArray);}; 43 const Double_t *GetArray() const { return fArray; }; 44 Double_t *GetArray() { return fArray; }; 45 Double_t GetAt(Int_t i) const override { return At(i); }; 46 Stat_t GetSum() const {Stat_t sum=0; for (Int_t i=0;i<fN;i++) sum+=fArray[i]; return sum;}; 47 void Reset() {memset(fArray, 0, fN*sizeof(Double_t));}; 48 void Reset(Double_t val) {for (Int_t i=0;i<fN;i++) fArray[i] = val;}; 49 void Set(Int_t n) override;; 50 void Set(Int_t n, const Double_t *array);; 51 void SetAt(Double_t v, Int_t i) override { AddAt(v, i); }; 52 Double_t &operator[](Int_t i);; 53 Double_t op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArrayD_8h_source.html:75,Guid,Guide,75,doc/master/TArrayD_8h_source.html,https://root.cern,https://root.cern/doc/master/TArrayD_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TCollection.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Functions |; Variables ; TCollection.h File Reference. #include ""TObject.h""; #include ""TIterator.h""; #include ""TString.h""; #include ""TVirtualRWMutex.h""; #include ""ROOT/RRangeCast.hxx""; #include <cassert>. Include dependency graph for TCollection.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TCollection;  Collection abstract base class. More...;  ; class  TIter;  ; class  TIterCategory< T >;  ; class  ROOT::Detail::TRangeCast< T, isDynamic >;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Detail;  Special implementation of ROOT::RRangeCast for TCollection, including a check that the cast target type inherits from TObject and a new constructor that takes the TCollection by pointer. ;  ; namespace  ROOT::Internal;  . Macros; #define R__COLL_COND_MUTEX(mutex)   this->IsUsingRWLock() ? mutex : nullptr;  ; #define R__COLLECTION_ITER_GUARD(collection);  ; #define R__COLLECTION_READ_GUARD();  ; #define R__COLLECTION_READ_LOCKGUARD(mutex)   ::ROOT::TReadLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_READ_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TReadLockGuard _NAME2_(R__readguard,name)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_GUARD();  ; #define R__COLLECTION_WRITE_LOCKGUARD(mutex)   ::ROOT::TWriteLockGuard _R__UNIQUE_(R__readguard)(R__COLL_COND_MUTEX(mutex));  ; #define R__COLLECTION_WRITE_LOCKGUARD_NAMED(name, mutex)   ::ROOT::TWriteLockGuard _NAME2_(R__readguard,nam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h.html:82,Guid,Guide,82,doc/master/TCollection_8h.html,https://root.cern,https://root.cern/doc/master/TCollection_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TCollection.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCollection.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 13/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TCollection; 13#define ROOT_TCollection; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TCollection //; 19// //; 20// Collection abstract base class. This class inherits from TObject //; 21// because we want to be able to have collections of collections. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TObject.h""; 26 ; 27#include ""TIterator.h""; 28 ; 29#include ""TString.h""; 30 ; 31#include ""TVirtualRWMutex.h""; 32 ; 33#include ""ROOT/RRangeCast.hxx""; 34 ; 35#include <cassert>; 36 ; 37class TClass;; 38class TObjectTable;; 39class TVirtualMutex;; 40class TIter;; 41 ; 42const Bool_t kIterForward = kTRUE;; 43const Bool_t kIterBackward = !kIterForward;; 44 ; 45R__EXTERN TVirtualMutex *gCollectionMutex;; 46 ; 47// #define R__CHECK_COLLECTION_MULTI_ACCESS; 48 ; 49// When R__CHECK_COLLECTION_MULTI_ACCESS is turned on (defined),; 50// the normal (not locked) ROOT TCollections are instrumented with a; 51// pseudo read-write lock which does not halt the execution but detects; 52// and report concurrent access to the same collections.; 53// Multiple readers are allowed.; 54// Multiple concurrent writer is reported as a Conflict; 55// Readers access while a write is running is reported as Conflict; 56// Re-entrant writing call by the same Wri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:79,Guid,Guide,79,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TCollectionProxyInfo.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCollectionProxyInfo.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Markus Frank 28/10/04. Philippe Canal 02/01/2007; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TCollectionProxyInfo; 13#define ROOT_TCollectionProxyInfo; 14 ; 15//////////////////////////////////////////////////////////////////////////; 16// //; 17// Small helper to gather the information neede to generate a //; 18// Collection Proxy //; 19//; 20//////////////////////////////////////////////////////////////////////////; 21 ; 22#include ""RtypesCore.h""; 23#include ""TError.h""; 24#include <vector>; 25#include <forward_list>; 26#include <utility>; 27 ; 28#if defined(_WIN32); 29 #if _MSC_VER<1300; 30 #define TYPENAME; 31 #define R__VCXX6; 32 #else; 33 #define TYPENAME typename; 34 #endif; 35#else; 36 #define TYPENAME typename; 37#endif; 38 ; 39class TVirtualCollectionProxy;; 40 ; 41namespace ROOT {; 42namespace VecOps {; 43template <typename T>; 44class RVec;; 45}; 46 ; 47namespace Internal {; 48template <typename T> class TStdBitsetHelper {; 49 // This class is intentionally empty, this is scaffolding to allow the equivalent; 50 // of 'template <int N> struct TCollectionProxyInfo::Type<std::bitset<N> >' which; 51 // is not effective in C++ (as of gcc 4.3.3).; 52};; 53}; 54 ; 55namespace Detail {; 56 ; 57 class TCollectionProxyInfo {; 58 // This class is a place holder for the information needed; 59 // to create the proper Collection Proxy.; 60 // This is similar to Reflex's CollFuncTable.; 61 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:88,Guid,Guide,88,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TIterator.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TIterator.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 13/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TIterator; 13#define ROOT_TIterator; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TIterator //; 19// //; 20// Iterator abstract base class. This base class provides the interface //; 21// for collection iterators. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""Rtypes.h""; 26 ; 27class TCollection;; 28class TObject;; 29 ; 30class TIterator {; 31 ; 32protected:; 33 TIterator() { }; 34 TIterator(const TIterator &) { }; 35 ; 36public:; 37 virtual TIterator &operator=(const TIterator &) = 0;; 38 virtual ~TIterator() { }; 39 virtual const TCollection *GetCollection() const = 0;; 40 virtual Option_t *GetOption() const { return """"; }; 41 virtual TObject *Next() = 0;; 42 virtual void Reset() = 0;; 43 TObject *operator()() { return Next(); }; 44 virtual Bool_t operator!=(const TIterator &) const;; 45 Bool_t operator==(const TIterator & other) const { return !(*this != other); }; 46 virtual TObject *operator*() const;; 47 ; 48 ClassDef(TIterator,0) //Iterator abstract base class; 49};; 50 ; 51#endif; Bool_tbool Bool_tDefinition RtypesCore.h:63; Option_tconst char Option_tDefinition RtypesCore.h:66; Rtypes.h; ClassDef#define ClassDef(name, id)Definition Rtypes.h:342; TCollectionCollection abstract base class.Definition TCollection.h:65; TI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIterator_8h_source.html:77,Guid,Guide,77,doc/master/TIterator_8h_source.html,https://root.cern,https://root.cern/doc/master/TIterator_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TList.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Functions |; Variables ; TList.h File Reference. #include ""TSeqCollection.h""; #include ""TString.h""; #include <iterator>; #include <memory>. Include dependency graph for TList.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TList;  A doubly linked list. More...;  ; class  TListIter;  Iterator of linked list. More...;  ; class  TObjLink;  Wrapper around a TObject so it can be stored in a TList. More...;  ; class  TObjOptLink;  . Functions; bool operator== (const std::shared_ptr< TObjLink > &l, TObjOptLink *r);  ; bool operator== (TObjOptLink *l, const std::shared_ptr< TObjLink > &r);  . Variables; const Bool_t kSortAscending = kTRUE;  ; const Bool_t kSortDescending = !kSortAscending;  . Function Documentation. ◆ operator==() [1/2]. bool operator== ; (; const std::shared_ptr< TObjLink > & ; l, . TObjOptLink * ; r . ). inline . Definition at line 237 of file TList.h. ◆ operator==() [2/2]. bool operator== ; (; TObjOptLink * ; l, . const std::shared_ptr< TObjLink > & ; r . ). inline . Definition at line 233 of file TList.h. Variable Documentation. ◆ kSortAscending. const Bool_t kSortAscending = kTRUE. Definition at line 31 of file TList.h. ◆ kSortDescending. const Bool_t kSortDescending = !kSortAscending. Definition at line 32 of file TList.h. corecontincTList.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8h.html:76,Guid,Guide,76,doc/master/TList_8h.html,https://root.cern,https://root.cern/doc/master/TList_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TList.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TList.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 10/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TList; 13#define ROOT_TList; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TList //; 19// //; 20// A doubly linked list. All classes inheriting from TObject can be //; 21// inserted in a TList. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TSeqCollection.h""; 26#include ""TString.h""; 27 ; 28#include <iterator>; 29#include <memory>; 30 ; 31const Bool_t kSortAscending = kTRUE;; 32const Bool_t kSortDescending = !kSortAscending;; 33 ; 34class TObjLink;; 35class TListIter;; 36 ; 37 ; 38class TList : public TSeqCollection {; 39 ; 40friend class TListIter;; 41 ; 42protected:; 43 using TObjLinkPtr_t = std::shared_ptr<TObjLink>;; 44 using TObjLinkWeakPtr_t = std::weak_ptr<TObjLink>;; 45 ; 46 TObjLinkPtr_t fFirst; //! pointer to first entry in linked list; 47 TObjLinkPtr_t fLast; //! pointer to last entry in linked list; 48 TObjLinkWeakPtr_t fCache; //! cache to speedup sequential calling of Before() and After() functions; 49 Bool_t fAscending; //! sorting order (when calling Sort() or for TSortedList); 50 ; 51 TObjLink *LinkAt(Int_t idx) const;; 52 TObjLink *FindLink(const TObject *obj, Int_t &idx) const;; 53 ; 54 TObjLinkPtr_t *DoSort(TObjLinkPtr_t *head, Int_t n);; 55 ; 56 Bool_t LnkCompare(const TObjLinkPtr_t &l1, const TObjLinkPtr_t &l2);; 5",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8h_source.html:73,Guid,Guide,73,doc/master/TList_8h_source.html,https://root.cern,https://root.cern/doc/master/TList_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TObjArray.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObjArray.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 11/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TObjArray; 13#define ROOT_TObjArray; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TObjArray //; 19// //; 20// An array of TObjects. The array expands automatically when adding //; 21// elements (shrinking can be done by hand). //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TSeqCollection.h""; 26 ; 27#include <iterator>; 28 ; 29class TObjArrayIter;; 30 ; 31class TObjArray : public TSeqCollection {; 32 ; 33friend class TObjArrayIter;; 34friend class TClonesArray;; 35 ; 36protected:; 37 TObject **fCont; //!Array contents; 38 Int_t fLowerBound; //Lower bound of the array; 39 Int_t fLast; //Last element in array containing an object; 40 ; 41 Bool_t BoundsOk(const char *where, Int_t at) const;; 42 void Init(Int_t s, Int_t lowerBound);; 43 Bool_t OutOfBoundsError(const char *where, Int_t i) const;; 44 Int_t GetAbsLast() const;; 45 ; 46public:; 47 typedef TObjArrayIter Iterator_t;; 48 ; 49 TObjArray(Int_t s = TCollection::kInitCapacity, Int_t lowerBound = 0);; 50 TObjArray(const TObjArray &a);; 51 virtual ~TObjArray();; 52 TObjArray& operator=(const TObjArray&);; 53 void Clear(Option_t *option="""") override;; 54 virtual void Compress();; 55 void Delete(Option_t *option="""") override;; 56 virtual void Expand(Int_t newSize); // expand or s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8h_source.html:77,Guid,Guide,77,doc/master/TObjArray_8h_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TSeqCollection.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSeqCollection.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 04/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TSeqCollection; 13#define ROOT_TSeqCollection; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// TSeqCollection //; 19// //; 20// Sequenceable collection abstract base class. TSeqCollection's have //; 21// an ordering relation, i.e. there is a first and last element. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TCollection.h""; 26 ; 27 ; 28class TSeqCollection : public TCollection {; 29 ; 30protected:; 31 Bool_t fSorted; // true if collection has been sorted; 32 ; 33 TSeqCollection() : fSorted(kFALSE) { }; 34 virtual void Changed() { fSorted = kFALSE; }; 35 ; 36public:; 37 virtual ~TSeqCollection() { }; 38 void Add(TObject *obj) override { AddLast(obj); }; 39 virtual void AddFirst(TObject *obj) = 0;; 40 virtual void AddLast(TObject *obj) = 0;; 41 virtual void AddAt(TObject *obj, Int_t idx) = 0;; 42 virtual void AddAfter(const TObject *after, TObject *obj) = 0;; 43 virtual void AddBefore(const TObject *before, TObject *obj) = 0;; 44 virtual void RemoveFirst() { Remove(First()); }; 45 virtual void RemoveLast() { Remove(Last()); }; 46 virtual TObject *RemoveAt(Int_t idx) { return Remove(At(idx)); }; 47 virtual void RemoveAfter(TObject *after) { Remove(After(after)); }; 48 virtual void RemoveBefore(TObject *before) { Remove(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8h_source.html:82,Guid,Guide,82,doc/master/TSeqCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/inc/TVirtualCollectionProxy.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TVirtualCollectionProxy.h. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Philippe Canal 20/08/2003; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2003, Rene Brun, Fons Rademakers and al. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TVirtualCollectionProxy; 13#define ROOT_TVirtualCollectionProxy; 14 ; 15//////////////////////////////////////////////////////////////////////////; 16// //; 17// TVirtualCollectionProxy //; 18// //; 19// Virtual interface of a proxy object for a collection class //; 20// In particular this is used to implement splitting, emulation, //; 21// and TTreeFormula access to STL containers. //; 22// //; 23//////////////////////////////////////////////////////////////////////////; 24 ; 25#include ""TClassRef.h""; 26#include ""TDataType.h""; 27 ; 28// Macro indicating the version of the Collection Proxy interface followed; 29// by this ROOT build (See also Reflex/Builder/CollectionProxy.h).; 30#define ROOT_COLLECTIONPROXY_VERSION 3; 31 ; 32class TClass;; 33namespace TStreamerInfoActions {; 34 class TActionSequence;; 35}; 36 ; 37// clang-format off; 38/**; 39\class TVirtualCollectionProxy; 40\brief Defines a common interface to inspect/change the contents of an object that represents a collection; 41 ; 42Specifically, an object of a class that derives from TVirtualCollectionProxy relays accesses to any object that; 43matches the proxied collection type.; 44The interface provides two families of functions: (i) for direct manipulation, e.g. `Insert()` or `At()`; and; 45(ii) iterator-based, e.g. `GetFunctionCreateIterators()` o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html:91,Guid,Guide,91,doc/master/TVirtualCollectionProxy_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualCollectionProxy_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TClassTable.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Functions |; Variables ; TClassTable.cxx File Reference. #include ""TClassTable.h""; #include ""TClass.h""; #include ""TClassEdit.h""; #include ""TProtoClass.h""; #include ""TList.h""; #include ""TROOT.h""; #include ""TString.h""; #include ""TError.h""; #include ""TRegexp.h""; #include ""TObjString.h""; #include ""TMap.h""; #include ""TInterpreter.h""; #include <map>; #include <memory>; #include <typeinfo>; #include <cstdlib>; #include <string>; #include <mutex>. Include dependency graph for TClassTable.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  TClassTable::NormalizeThenLock;  ; class  ROOT::TClassAlt;  ; class  ROOT::TClassRec;  ; class  ROOT::TForNamespace;  ; class  ROOT::TMapTypeToClassRec;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  . Macros; #define R__USE_STD_MAP;  . Functions; static int ClassComp (const void *a, const void *b);  ; static UInt_t ROOT::ClassTableHash (const char *name, UInt_t size);  ; static std::mutex & GetClassTableMutex ();  ; std::vector< std::unique_ptr< TClassRec > > & ROOT::GetDelayedAddClass ();  ; std::vector< std::pair< const char *, const char * > > & ROOT::GetDelayedAddClassAlternate ();  . Variables; TClassTable * gClassTable;  . Macro Definition Documentation. ◆ R__USE_STD_MAP. #define R__USE_STD_MAP. Definition at line 143 of file TClassTable.cxx. Function Documentation. ◆ ClassComp(). static int ClassComp ; (; const void * ; a, . const void * ; b . ). static . Definition at line 794 of file TClassTable.cxx. ◆ GetClassTableMutex(). static std::mutex & GetClassTableMutex ; (; ). static . Definition at line 60 of file TClassTable.cxx. Variable Documentation. ◆ gClassTable. TCl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx.html:84,Guid,Guide,84,doc/master/TClassTable_8cxx.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TClassTable.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TClassTable.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 11/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TClassTable; 13\ingroup Containers; 14This class registers for all classes their name, id and dictionary; 15function in a hash table. Classes are automatically added by the; 16ctor of a special init class when a global of this init class is; 17initialized when the program starts (see the ClassImp macro).; 18 ; 19All functions in TClassTable are thread-safe.; 20*/; 21 ; 22#include ""TClassTable.h""; 23 ; 24#include ""TClass.h""; 25#include ""TClassEdit.h""; 26#include ""TProtoClass.h""; 27#include ""TList.h""; 28#include ""TROOT.h""; 29#include ""TString.h""; 30#include ""TError.h""; 31#include ""TRegexp.h""; 32 ; 33#include ""TObjString.h""; 34#include ""TMap.h""; 35 ; 36#include ""TInterpreter.h""; 37 ; 38#include <map>; 39#include <memory>; 40#include <typeinfo>; 41#include <cstdlib>; 42#include <string>; 43#include <mutex>; 44 ; 45using namespace ROOT;; 46 ; 47TClassTable *gClassTable;; 48 ; 49TClassAlt **TClassTable::fgAlternate;; 50TClassRec **TClassTable::fgTable;; 51TClassRec **TClassTable::fgSortedTable;; 52UInt_t TClassTable::fgSize;; 53std::atomic<UInt_t> TClassTable::fgTally;; 54Bool_t TClassTable::fgSorted;; 55UInt_t TClassTable::fgCursor;; 56TClassTable::IdMap_t *TClassTable::fgIdMap;; 57 ; 58ClassImp(TClassTable);; 59 ; 60static std::mutex &GetClassTableMutex(); 61{; 62 static std::mutex sMutex;; 63 return sMutex;; 64}; 65 ; 66// RAII to first no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClassTable_8cxx_source.html:81,Guid,Guide,81,doc/master/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClassTable_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TClassTable.cxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. TClassTable.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 11/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TClassTable; 13\ingroup Containers; 14This class registers for all classes their name, id and dictionary; 15function in a hash table. Classes are automatically added by the; 16ctor of a special init class when a global of this init class is; 17initialized when the program starts (see the ClassImp macro).; 18 ; 19All functions in TClassTable are thread-safe.; 20*/; 21 ; 22#include ""TClassTable.h""; 23 ; 24#include ""TClass.h""; 25#include ""TClassEdit.h""; 26#include ""TProtoClass.h""; 27#include ""TList.h""; 28#include ""TROOT.h""; 29#include ""TString.h""; 30#include ""TError.h""; 31#include ""TRegexp.h""; 32 ; 33#include ""TObjString.h""; 34#include ""TMap.h""; 35 ; 36#include ""TInterpreter.h""; 37 ; 38#include <map>; 39#include <memory>; 40#include <typeinfo>; 41#include <cstdlib>; 42#include <string>; 43#include <mutex>; 44 ; 45using namespace ROOT;; 46 ; 47TClassTable *gClassTable;; 48 ; 49TClassAlt **TClassTable::fgAlternate;; 50TClassRec **TClassTable::fgTable;; 51TClassRec **TClassTable::fgSortedTable;; 52UInt_t TClassTable::fgSize;; 53std::atomic<UInt_t> TClassTable::fgTally;; 54Bool_t TClassTable::fgSorted;; 55UInt_t TClassTable::fgCursor;; 56TClassTable::IdMap_t *TClassTable::fgIdMap;; 57 ; 58ClassImp(TClassTable);; 59 ; 60static std::mutex &GetClassTableMutex(); 61{; 62 static std::mutex sMutex;; 63 return sMutex;; 64}; 65 ; 66// RAII to first nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClassTable_8cxx_source.html:80,Guid,Guide,80,doc/v632/TClassTable_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClassTable_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TCollection.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TCollection.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 13/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TCollection; 13\ingroup Containers; 14Collection abstract base class. This class describes the base; 15protocol all collection classes have to implement. The ROOT; 16collection classes always store pointers to objects that inherit; 17from TObject. They never adopt the objects. Therefore, it is the; 18user's responsibility to take care of deleting the actual objects; 19once they are not needed anymore. In exceptional cases, when the; 20user is 100% sure nothing else is referencing the objects in the; 21collection, one can delete all objects and the collection at the; 22same time using the Delete() function.; 23 ; 24Collections can be iterated using an iterator object (see; 25TIterator). Depending on the concrete collection class there may be; 26some additional methods of iterating. See the respective classes.; 27 ; 28TCollection inherits from TObject since we want to be able to have; 29collections of collections.; 30 ; 31In a later release the collections may become templatized.; 32*/; 33 ; 34#include ""TCollection.h""; 35#include ""Varargs.h""; 36#include ""TBuffer.h""; 37#include ""TClass.h""; 38#include ""TROOT.h""; 39#include ""TBrowser.h""; 40#include ""TObjectTable.h""; 41#include ""TRegexp.h""; 42#include ""TPRegexp.h""; 43#include ""TVirtualMutex.h""; 44#include ""TError.h""; 45#include ""TSystem.h""; 46#include ""TObjArray.h""; 47#include <iostream>; 48#",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8cxx_source.html:81,Guid,Guide,81,doc/master/TCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TList.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TList.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 10/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TList; 13\ingroup Containers; 14A doubly linked list.; 15 ; 16All classes inheriting from TObject can be; 17inserted in a TList. Before being inserted into the list the object; 18pointer is wrapped in a TObjLink object which contains, besides; 19the object pointer also a previous and next pointer.; 20 ; 21There are several ways to iterate over a TList; in order of preference, if; 22not forced by other constraints:; 23 ; 24 1. (Preferred way) Using the C++ range-based `for` or `begin()` / `end()`:; 25~~~ {.cpp}; 26 for(TObject *obj: *GetListOfPrimitives()); 27 obj->Write();; 28~~~; 29 2. Using the R__FOR_EACH macro:; 30~~~ {.cpp}; 31 GetListOfPrimitives()->R__FOR_EACH(TObject,Paint)(option);; 32~~~; 33 3. Using the TList iterator TListIter (via the wrapper class TIter):; 34~~~ {.cpp}; 35 TIter next(GetListOfPrimitives());; 36 while (TObject *obj = next()); 37 obj->Draw(next.GetOption());; 38~~~; 39 4. Using the TList iterator TListIter and std::for_each algorithm:; 40~~~ {.cpp}; 41 // A function object, which will be applied to each element; 42 // of the given range.; 43 struct STestFunctor {; 44 bool operator()(TObject *aObj) {; 45 ...; 46 return true;; 47 }; 48 }; 49 ...; 50 ...; 51 TIter iter(mylist);; 52 for_each( iter.Begin(), TIter::End(), STestFunctor() );; 53~~~; 54 5. Using the TObjLink list entries (that wrap the TObject*):; 55~~~ {.cpp}; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:75,Guid,Guide,75,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TObjArray.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TObjArray.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 11/09/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TObjArray; 13\ingroup Containers; 14An array of TObjects. The array expands automatically when; 15objects are added (shrinking can be done by hand using Expand(),; 16how nice to have meaningful names -:)).; 17Use operator[] to have ""real"" array behaviour.; 18 ; 19Note on ownership and copy:; 20By default the TObjArray does not own the objects it points to and; 21will not delete them unless explicitly asked (via a call to the; 22Delete member function). To assign ownership of the content to; 23the array, call:; 24~~~ {.cpp}; 25 myarr->SetOwner(kTRUE);; 26~~~; 27When the array owns its content a call to Clear or the deletion of; 28the array itself will lead to the deletion of its contents.; 29 ; 30You can either make a shallow copy of the array:; 31~~~ {.cpp}; 32 otherarr = new TObjArray(*myarr);; 33 *otherarr = *myarr;; 34~~~; 35in which case ownership (if any) is not transfered but the other; 36array points to the same object as the original array. Note that; 37if the content of either array is deleted the other array is not; 38notified in any way (i.e. still points to the now deleted objects).; 39 ; 40You can also make a deep copy of the array:; 41~~~ {.cpp}; 42 otherarr = (TObjArray*)myarr->Clone();; 43~~~; 44in which case the array and the content are both duplicated (i.e.; 45otherarr and myarr do not point to the same objects). If myarr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:79,Guid,Guide,79,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/cont/src/TSeqCollection.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TSeqCollection.cxx. Go to the documentation of this file. 1// @(#)root/cont:$Id$; 2// Author: Fons Rademakers 04/08/95; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TSeqCollection; 13\ingroup Containers; 14Sequenceable collection abstract base class. TSeqCollection's have; 15an ordering relation, i.e. there is a first and last element.; 16*/; 17 ; 18#include ""TSeqCollection.h""; 19#include ""TCollection.h""; 20#include ""TVirtualMutex.h""; 21#include ""TClass.h""; 22#include ""TMethodCall.h""; 23 ; 24ClassImp(TSeqCollection);; 25 ; 26////////////////////////////////////////////////////////////////////////////////; 27/// Return index of object in collection. Returns -1 when object not found.; 28/// Uses member IsEqual() to find object.; 29 ; 30Int_t TSeqCollection::IndexOf(const TObject *obj) const; 31{; 32 Int_t idx = 0;; 33 TIter next(this);; 34 TObject *ob;; 35 ; 36 while ((ob = next())) {; 37 if (ob->IsEqual(obj)) return idx;; 38 idx++;; 39 }; 40 return -1;; 41}; 42 ; 43////////////////////////////////////////////////////////////////////////////////; 44/// Returns index of last object in collection. Returns -1 when no; 45/// objects in collection.; 46 ; 47Int_t TSeqCollection::GetLast() const; 48{; 49 TObject *tmp = Last();; 50 return tmp ? IndexOf(tmp) : -1;; 51}; 52 ; 53////////////////////////////////////////////////////////////////////////////////; 54/// Compare to objects in the collection. Use member Compare() of object a.; 55 ; 56Int_t TSeqCollection::ObjCompare(TObject *a, TObject *b); 57{;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeqCollection_8cxx_source.html:84,Guid,Guide,84,doc/master/TSeqCollection_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSeqCollection_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/dictgen/src/Scanner.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Functions |; Variables ; Scanner.cxx File Reference. #include ""Scanner.h""; #include ""clang/AST/ASTConsumer.h""; #include ""clang/Basic/SourceLocation.h""; #include ""clang/Basic/SourceManager.h""; #include ""llvm/ADT/SmallSet.h""; #include ""clang/Sema/Sema.h""; #include ""clang/Frontend/CompilerInstance.h""; #include ""cling/Interpreter/Interpreter.h""; #include ""llvm/Support/Path.h""; #include ""TClassEdit.h""; #include <iostream>; #include <sstream>; #include ""llvm/ADT/StringExtras.h""; #include ""SelectionRules.h"". Include dependency graph for Scanner.cxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Functions; std::string AddSpace (const std::string &txt);  ; long APIntToLong (const llvm::APInt &num);  ; size_t APIntToSize (const llvm::APInt &num);  ; std::string APIntToStr (const llvm::APInt &num);  ; std::string IntToStd (int num);  ; std::string IntToStr (int num);  ; std::string Message (const std::string &msg, const std::string &location);  ; void * ToDeclProp (clang::Decl *item);  . Variables; cling::Interpreter * gInterp;  . Function Documentation. ◆ AddSpace(). std::string AddSpace ; (; const std::string & ; txt). inline . Definition at line 266 of file Scanner.cxx. ◆ APIntToLong(). long APIntToLong ; (; const llvm::APInt & ; num). inline . Definition at line 147 of file Scanner.cxx. ◆ APIntToSize(). size_t APIntToSize ; (; const llvm::APInt & ; num). inline . Definition at line 140 of file Scanner.cxx. ◆ APIntToStr(). std::string APIntToStr ; (; const llvm::APInt & ; num). inline . Definition at line 154 of file Scanner.cxx. ◆ IntToStd(). std::string IntToStd ; (; int ; num). inline . Definition at line 170 of file Scanner.cxx. ◆ IntToStr(). std::string IntToStr ; (; int ; num). inline . Definition at line 161 of file Scanner.cxx. ◆ Message(). std::string Message ; (; const std::string & ; msg, . co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx.html:83,Guid,Guide,83,doc/master/Scanner_8cxx.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/dictgen/src/Scanner.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Scanner.cxx. Go to the documentation of this file. 1// @(#)root/utils/src:$Id$; 2// Author: Philippe Canal November 2011 ; originated from Zdenek Culik 16/04/2010 and Velislava Spasova.; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2011, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/rootcint. *; 10 *************************************************************************/; 11 ; 12#include ""Scanner.h""; 13#include ""clang/AST/ASTConsumer.h""; 14#include ""clang/Basic/SourceLocation.h""; 15#include ""clang/Basic/SourceManager.h""; 16#include ""llvm/ADT/SmallSet.h""; 17#include ""clang/Sema/Sema.h""; 18#include ""clang/Frontend/CompilerInstance.h""; 19 ; 20#include ""cling/Interpreter/Interpreter.h""; 21#include ""llvm/Support/Path.h""; 22 ; 23#include ""TClassEdit.h""; 24 ; 25#include <iostream>; 26#include <sstream> // class ostringstream; 27#include ""llvm/ADT/StringExtras.h""; 28 ; 29#include ""SelectionRules.h""; 30 ; 31namespace {; 32 ; 33 class RPredicateIsSameNamespace; 34 {; 35 private:; 36 clang::NamespaceDecl *fTarget;; 37 public:; 38 RPredicateIsSameNamespace(clang::NamespaceDecl *target) : fTarget(target) {}; 39 ; 40 bool operator()(const RScanner::AnnotatedNamespaceDecl& element); 41 {; 42 return (fTarget == element);; 43 }; 44 };; 45 ; 46template<class T>; 47inline static bool IsElementPresent(const std::vector<T> &v, const T &el){; 48 return std::find(v.begin(),v.end(),el) != v.end();; 49}; 50 ; 51template<class T>; 52inline static bool IsElementPresent(const std::vector<const T*> &v, T *el){; 53 return std::find(v.begin(),v.end(),el) != v.end();; 54}; 55 ; 56}; 57 ; 58using namespace ROOT;; 59using namespace clang;; 60 ; 61extern cling::Interpreter *gInterp;; 62 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:80,Guid,Guide,80,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/dictgen/src/rootcling_impl.cxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Typedefs |; Enumerations |; Functions |; Variables ; rootcling_impl.cxx File Reference. #include ""rootcling_impl.h""; #include ""rootclingCommandLineOptionsHelp.h""; #include ""RConfigure.h""; #include <ROOT/RConfig.hxx>; #include <ROOT/FoundationUtils.hxx>; #include ""snprintf.h""; #include <iostream>; #include <iomanip>; #include <memory>; #include <vector>; #include <algorithm>; #include <cstdio>; #include <errno.h>; #include <string>; #include <list>; #include <sstream>; #include <map>; #include <fstream>; #include <sys/stat.h>; #include <unordered_map>; #include <unordered_set>; #include <numeric>; #include <limits.h>; #include <unistd.h>; #include ""cling/Interpreter/Interpreter.h""; #include ""cling/Interpreter/InterpreterCallbacks.h""; #include ""cling/Interpreter/LookupHelper.h""; #include ""cling/Interpreter/Value.h""; #include ""clang/AST/CXXInheritance.h""; #include ""clang/Basic/Diagnostic.h""; #include ""clang/Frontend/CompilerInstance.h""; #include ""clang/Frontend/FrontendActions.h""; #include ""clang/Frontend/FrontendDiagnostic.h""; #include ""clang/Lex/HeaderSearch.h""; #include ""clang/Lex/Preprocessor.h""; #include ""clang/Lex/ModuleMap.h""; #include ""clang/Lex/Pragma.h""; #include ""clang/Sema/Sema.h""; #include ""clang/Serialization/ASTWriter.h""; #include ""cling/Utils/AST.h""; #include ""llvm/ADT/StringRef.h""; #include ""llvm/Support/CommandLine.h""; #include ""llvm/Support/Path.h""; #include ""llvm/Support/PrettyStackTrace.h""; #include ""llvm/Support/Signals.h""; #include ""RtypesCore.h""; #include ""TModuleGenerator.h""; #include ""TClassEdit.h""; #include ""TClingUtils.h""; #include ""RStl.h""; #include ""XMLReader.h""; #include ""LinkdefReader.h""; #include ""DictSelectionReader.h""; #include ""SelectionRules.h""; #include ""Scanner.h""; #include ""strlcpy.h""; #include ""OptionParser.h""; #include ""clang/Basic/LangOptions.def"". Includ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:90,Guid,Guide,90,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/dictgen/src/rootcling_impl.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rootcling_impl.cxx. Go to the documentation of this file. 1// Authors: Axel Naumann, Philippe Canal, Danilo Piparo; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#include ""rootcling_impl.h""; 12#include ""rootclingCommandLineOptionsHelp.h""; 13 ; 14#include ""RConfigure.h""; 15#include <ROOT/RConfig.hxx>; 16#include <ROOT/FoundationUtils.hxx>; 17#include ""snprintf.h""; 18 ; 19#include <iostream>; 20#include <iomanip>; 21#include <memory>; 22#include <vector>; 23#include <algorithm>; 24#include <cstdio>; 25 ; 26#include <errno.h>; 27#include <string>; 28#include <list>; 29#include <sstream>; 30#include <map>; 31#include <fstream>; 32#include <sys/stat.h>; 33#include <unordered_map>; 34#include <unordered_set>; 35#include <numeric>; 36 ; 37 ; 38#ifdef _WIN32; 39#ifdef system; 40#undef system; 41#endif; 42#undef UNICODE; 43#include <windows.h>; 44#include <Tlhelp32.h> // for MAX_MODULE_NAME32; 45#include <process.h>; 46#define PATH_MAX _MAX_PATH; 47#ifdef interface; 48// prevent error coming from clang/AST/Attrs.inc; 49#undef interface; 50#endif; 51#endif; 52 ; 53#ifdef __APPLE__; 54#include <mach-o/dyld.h>; 55#endif; 56 ; 57#ifdef R__FBSD; 58#include <sys/param.h>; 59#include <sys/user.h>; 60#include <sys/types.h>; 61#include <libutil.h>; 62#include <libprocstat.h>; 63#endif // R__FBSD; 64 ; 65#if !defined(R__WIN32); 66#include <limits.h>; 67#include <unistd.h>; 68#endif; 69 ; 70 ; 71#include ""cling/Interpreter/Interpreter.h""; 72#include ""cling/Interpreter/InterpreterCallbacks.h""; 73#include ""cling/Interpreter",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:87,Guid,Guide,87,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. foundation Directory Reference. Directory dependency graph for foundation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  inc;  ;  res;  ;  src;  ;  v7;  . corefoundation. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_ac6de6fe74d4e903f2b7ff14e6aeb864.html:75,Guid,Guide,75,doc/master/dir_ac6de6fe74d4e903f2b7ff14e6aeb864.html,https://root.cern,https://root.cern/doc/master/dir_ac6de6fe74d4e903f2b7ff14e6aeb864.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc Directory Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. inc Directory Reference. Directory dependency graph for inc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Directories;  ROOT;  . Files;  DllImport.h;  ;  ESTLType.h;  ;  RStringView.h;  ;  Rstrstream.h;  ;  RtypesCore.h;  ;  RVersion.h;  ;  TClassEdit.h;  ;  TError.h;  ;  ThreadLocalStorage.h;  . corefoundationinc. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_eb0888ddaad283ef2de2c9df75228bfd.html:79,Guid,Guide,79,doc/master/dir_eb0888ddaad283ef2de2c9df75228bfd.html,https://root.cern,https://root.cern/doc/master/dir_eb0888ddaad283ef2de2c9df75228bfd.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/DllImport.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; DllImport.h File Reference. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define R__DLLEXPORT   __attribute__ ((visibility (""default"")));  ; #define R__DllImport;  ; #define R__EXTERN   R__DllImport extern;  . Macro Definition Documentation. ◆ R__DLLEXPORT. #define R__DLLEXPORT   __attribute__ ((visibility (""default""))). Definition at line 32 of file DllImport.h. ◆ R__DllImport. #define R__DllImport. Definition at line 24 of file DllImport.h. ◆ R__EXTERN. #define R__EXTERN   R__DllImport extern. Definition at line 26 of file DllImport.h. corefoundationincDllImport.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DllImport_8h.html:86,Guid,Guide,86,doc/master/DllImport_8h.html,https://root.cern,https://root.cern/doc/master/DllImport_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/DllImport.h File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; DllImport.h File Reference. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define R__DLLEXPORT   __attribute__ ((visibility (""default"")));  ; #define R__DllImport;  ; #define R__EXTERN   R__DllImport extern;  . Macro Definition Documentation. ◆ R__DLLEXPORT. #define R__DLLEXPORT   __attribute__ ((visibility (""default""))). Definition at line 32 of file DllImport.h. ◆ R__DllImport. #define R__DllImport. Definition at line 24 of file DllImport.h. ◆ R__EXTERN. #define R__EXTERN   R__DllImport extern. Definition at line 26 of file DllImport.h. corefoundationincDllImport.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/DllImport_8h.html:85,Guid,Guide,85,doc/v632/DllImport_8h.html,https://root.cern,https://root.cern/doc/v632/DllImport_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/DllImport.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. DllImport.h. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11/*; 12 This include file defines the DllImport macro; 13 to build DLLs under Windows OS.; 14 ; 15 They are defined as dummy for UNIX's; 16*/; 17 ; 18#ifndef ROOT_DllImport; 19#define ROOT_DllImport; 20 ; 21#if defined(WIN32); 22# define R__DllImport __declspec( dllimport ); 23#else; 24# define R__DllImport; 25#endif; 26# define R__EXTERN R__DllImport extern; 27 ; 28#ifndef R__DLLEXPORT; 29# ifdef _MSC_VER; 30# define R__DLLEXPORT __declspec(dllexport); 31# else; 32# define R__DLLEXPORT __attribute__ ((visibility (""default""))); 33# endif; 34#endif; 35 ; 36#endif. corefoundationincDllImport.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DllImport_8h_source.html:83,Guid,Guide,83,doc/master/DllImport_8h_source.html,https://root.cern,https://root.cern/doc/master/DllImport_8h_source.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ESTLType.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. ESTLType.h. Go to the documentation of this file. 1// @(#)root/metautils:; 2// Author: Philippe Canal November 2013; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_ESTLType; 13#define ROOT_ESTLType; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// ROOT::ESTLType //; 19// //; 20// Enum describing STL collections and some std classes //; 21// This is used in TClassEdit, TStreamerInfo, TClassEdit //; 22// and TStreamerElement. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26namespace ROOT {; 27 ; 28 enum ESTLType {; 29 kNotSTL = 0,; 30 kSTLvector = 1,; 31 kSTLlist = 2,; 32 kSTLdeque = 3,; 33 kSTLmap = 4,; 34 kSTLmultimap = 5,; 35 kSTLset = 6,; 36 kSTLmultiset = 7,; 37 kSTLbitset = 8,; 38 // Here the c++11 containers start. Order counts. For example,; 39 // tstreamerelements in written rootfiles carry a value and we cannot; 40 // introduce shifts.; 41 kSTLforwardlist = 9,; 42 kSTLunorderedset = 10,; 43 kSTLunorderedmultiset = 11,; 44 kSTLunorderedmap = 12,; 45 kSTLunorderedmultimap = 13,; 46 kROOTRVec = 14, /* ROOT type with STL container interface */; 47 kSTLend = 15,; 48 kSTLany = 300 /* TVirtualStreamerInfo::kSTL */,; 49 kSTLstring = 365 /* TVirtualStreamerInfo::kSTLstring */,; 50 };; 51 ; 52}; 53 ; 54#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ESTLType_8h_source.html:82,Guid,Guide,82,doc/master/ESTLType_8h_source.html,https://root.cern,https://root.cern/doc/master/ESTLType_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ESTLType.h Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. ESTLType.h. Go to the documentation of this file. 1// @(#)root/metautils:; 2// Author: Philippe Canal November 2013; 3 ; 4/*************************************************************************; 5 * Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_ESTLType; 13#define ROOT_ESTLType; 14 ; 15 ; 16//////////////////////////////////////////////////////////////////////////; 17// //; 18// ROOT::ESTLType //; 19// //; 20// Enum describing STL collections and some std classes //; 21// This is used in TClassEdit, TStreamerInfo, TClassEdit //; 22// and TStreamerElement. //; 23// //; 24//////////////////////////////////////////////////////////////////////////; 25 ; 26namespace ROOT {; 27 ; 28 enum ESTLType {; 29 kNotSTL = 0,; 30 kSTLvector = 1,; 31 kSTLlist = 2,; 32 kSTLdeque = 3,; 33 kSTLmap = 4,; 34 kSTLmultimap = 5,; 35 kSTLset = 6,; 36 kSTLmultiset = 7,; 37 kSTLbitset = 8,; 38 // Here the c++11 containers start. Order counts. For example,; 39 // tstreamerelements in written rootfiles carry a value and we cannot; 40 // introduce shifts.; 41 kSTLforwardlist = 9,; 42 kSTLunorderedset = 10,; 43 kSTLunorderedmultiset = 11,; 44 kSTLunorderedmap = 12,; 45 kSTLunorderedmultimap = 13,; 46 kROOTRVec = 14, /* ROOT type with STL container interface */; 47 kSTLend = 15,; 48 kSTLany = 300 /* TVirtualStreamerInfo::kSTL */,; 49 kSTLstring = 365 /* TVirtualStreamerInfo::kSTLstring */,; 50 };; 51 ; 52}; 53 ; 54#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/ESTLType_8h_source.html:81,Guid,Guide,81,doc/v632/ESTLType_8h_source.html,https://root.cern,https://root.cern/doc/v632/ESTLType_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RConfig.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; RConfig.hxx File Reference. #include ""../RVersion.h""; #include ""RConfigure.h"". Include dependency graph for RConfig.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define _NAME1_(name)   name;  ; #define _NAME2_(name1, name2)   _NAME1_(name1)name2;  ; #define _NAME3_(name1, name2, name3)   _NAME2_(name1,name2)name3;  ; #define _QUOTE_(name)   ""name"";  ; #define _R__DEPRECATED_634(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_636(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_700(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_LATER(REASON);  ; #define _R__JOIN3_(F, X, Y)   _NAME3_(F,X,Y);  ; #define _R__JOIN_(X, Y)   _NAME2_(X,Y);  ; #define _R__UNIQUE_(X)   _R__JOIN_(X,__LINE__);  ; #define _R__UNIQUE_DICT_(X)   _R__JOIN3_(R__DICTIONARY_FILENAME,X,__LINE__);  ; #define _R_DEPRECATED_REMOVE_NOW(REASON)   __attribute__((REMOVE_THIS_NOW));  ; #define R__ALWAYS_INLINE   inline;  ; #define R__ALWAYS_SUGGEST_ALTERNATIVE(ALTERNATIVE)    _R__DEPRECATED_LATER(""There is a superior alternative: "" ALTERNATIVE);  ; #define R__ANSISTREAM   /* ANSI C++ Standard Library conformant */;  ; #define R__DEPRECATED(MAJOR, MINOR, REASON)    _R__JOIN3_(_R__DEPRECATED_,MAJOR,MINOR)(""will be removed in ROOT v"" #MAJOR ""."" #MINOR "": "" REASON);  ; #define R__HIDDEN;  ; #define R__INTENTIONALLY_UNINIT_BEGIN;  ; #define R__INTENTIONALLY_UNINIT_END;  ; #define R__likely(expr)   expr;  ; #define R__NEVER_INLINE   inline;  ; #define R__SIZEDDELETE;  ; #define R__SSTREAM   /* use sstream or strstream header */;  ; #define R__SUGGEST_ALTERNATIVE(ALTERNATIVE);  ; #define R__unlikely(expr)   ex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConfig_8hxx.html:91,Guid,Guide,91,doc/master/RConfig_8hxx.html,https://root.cern,https://root.cern/doc/master/RConfig_8hxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RConfig.hxx File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; RConfig.hxx File Reference. #include ""../RVersion.h""; #include ""RConfigure.h"". Include dependency graph for RConfig.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define _NAME1_(name)   name;  ; #define _NAME2_(name1, name2)   _NAME1_(name1)name2;  ; #define _NAME3_(name1, name2, name3)   _NAME2_(name1,name2)name3;  ; #define _QUOTE_(name)   ""name"";  ; #define _R__DEPRECATED_634(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_636(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_700(REASON)   _R__DEPRECATED_LATER(REASON);  ; #define _R__DEPRECATED_LATER(REASON);  ; #define _R__JOIN3_(F, X, Y)   _NAME3_(F,X,Y);  ; #define _R__JOIN_(X, Y)   _NAME2_(X,Y);  ; #define _R__UNIQUE_(X)   _R__JOIN_(X,__LINE__);  ; #define _R__UNIQUE_DICT_(X)   _R__JOIN3_(R__DICTIONARY_FILENAME,X,__LINE__);  ; #define _R_DEPRECATED_REMOVE_NOW(REASON)   __attribute__((REMOVE_THIS_NOW));  ; #define R__ALWAYS_INLINE   inline;  ; #define R__ALWAYS_SUGGEST_ALTERNATIVE(ALTERNATIVE)    _R__DEPRECATED_LATER(""There is a superior alternative: "" ALTERNATIVE);  ; #define R__ANSISTREAM   /* ANSI C++ Standard Library conformant */;  ; #define R__DEPRECATED(MAJOR, MINOR, REASON)    _R__JOIN3_(_R__DEPRECATED_,MAJOR,MINOR)(""will be removed in ROOT v"" #MAJOR ""."" #MINOR "": "" REASON);  ; #define R__HIDDEN;  ; #define R__INTENTIONALLY_UNINIT_BEGIN;  ; #define R__INTENTIONALLY_UNINIT_END;  ; #define R__likely(expr)   expr;  ; #define R__NEVER_INLINE   inline;  ; #define R__SIZEDDELETE;  ; #define R__SSTREAM   /* use sstream or strstream header */;  ; #define R__SUGGEST_ALTERNATIVE(ALTERNATIVE);  ; #define R__unlikely(expr)   exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RConfig_8hxx.html:90,Guid,Guide,90,doc/v632/RConfig_8hxx.html,https://root.cern,https://root.cern/doc/v632/RConfig_8hxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RConfig.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RConfig.hxx. Go to the documentation of this file. 1/* @(#)root/base:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_RConfig; 12#define ROOT_RConfig; 13 ; 14/*************************************************************************; 15 * *; 16 * RConfig *; 17 * *; 18 * Defines used by ROOT. *; 19 * *; 20 *************************************************************************/; 21 ; 22#include ""../RVersion.h""; 23#include ""RConfigure.h""; 24 ; 25 ; 26/*---- new C++ features ------------------------------------------------------*/; 27 ; 28#if defined __has_feature; 29# if __has_feature(modules); 30# define R__CXXMODULES; 31# endif; 32#endif; 33 ; 34#define R__USE_SHADOW_CLASS; 35 ; 36/* Now required, thus defined by default for backward compatibility */; 37#define R__ANSISTREAM /* ANSI C++ Standard Library conformant */; 38#define R__SSTREAM /* use sstream or strstream header */; 39 ; 40#if defined(_MSC_VER); 41# if (_MSC_VER < 1910); 42# error ""ROOT requires Visual Studio 2017 or higher.""; 43# else; 44# define R__NULLPTR; 45# endif; 46#else; 47#if defined(__cplusplus) && (__cplusplus < 201703L); 48#error ""ROOT requires support for C++17 or higher.""; 49# if defined(__GNUC__) || defined(__clang__); 50#error ""Pass `-std=c++17` as compiler argument.""; 51# endif; 52# endif; 53#endif; 54 ; 55/*---- machines --------------------------------------------------------------*/; 56 ; 57#ifdef __hpux; 58 /* R__HPUX10 or R__HPUX11 is determined in the Makefile */; 59# define R__HPUX; 60# define R_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RConfig_8hxx_source.html:88,Guid,Guide,88,doc/master/RConfig_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RConfig_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RLogger.hxx File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Classes |; Namespaces |; Macros |; Enumerations |; Functions ; RLogger.hxx File ReferenceCore ROOT classes » Base ROOT classes | ROOT7 classes. #include <atomic>; #include <list>; #include <memory>; #include <mutex>; #include <sstream>; #include <string>; #include <utility>. Include dependency graph for RLogger.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; class  ROOT::Experimental::Detail::RLogBuilder;  Builds a diagnostic entry, emitted by the static RLogManager upon destruction of this builder, where - by definition - the RLogEntry has been completely built. More...;  ; class  ROOT::Experimental::RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  ROOT::Experimental::RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  ROOT::Experimental::RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  ROOT::Experimental::RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  ROOT::Experimental::RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  ROOT::Experimental::RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  ROOT::Experimental::RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  ROOT::Experimental::RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:91,Guid,Guide,91,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RLogger.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RLogger.hxx. Go to the documentation of this file. 1/// \file ROOT/RLogger.hxx; 2/// \ingroup Base ROOT7; 3/// \author Axel Naumann <axel@cern.ch>; 4/// \date 2015-03-29; 5/// \warning This is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback; 6/// is welcome!; 7 ; 8/*************************************************************************; 9 * Copyright (C) 1995-2020, Rene Brun and Fons Rademakers. *; 10 * All rights reserved. *; 11 * *; 12 * For the licensing terms see $ROOTSYS/LICENSE. *; 13 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 14 *************************************************************************/; 15 ; 16#ifndef ROOT7_RLogger; 17#define ROOT7_RLogger; 18 ; 19#include <atomic>; 20#include <list>; 21#include <memory>; 22#include <mutex>; 23#include <sstream>; 24#include <string>; 25#include <utility>; 26 ; 27namespace ROOT {; 28namespace Experimental {; 29 ; 30class RLogEntry;; 31class RLogManager;; 32 ; 33/**; 34 Kinds of diagnostics.; 35 */; 36enum class ELogLevel : unsigned char {; 37 kUnset,; 38 kFatal, ///< An error which causes further processing to be unreliable; 39 kError, ///< An error; 40 kWarning, ///< Warnings about likely unexpected behavior; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:88,Guid,Guide,88,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,2,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,". ROOT: core/foundation/inc/ROOT/RRangeCast.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RRangeCast.hxx. Go to the documentation of this file. 1/// \file ROOT/RRangeCast.hxx; 2/// \ingroup Base StdExt; 3/// \author Jonas Rembser <jonas.rembser@cern.ch>; 4/// \date 2021-08-04; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#ifndef ROOT_RRangeCast; 15#define ROOT_RRangeCast; 16 ; 17#include ""ROOT/RSpan.hxx""; 18 ; 19#include <cassert>; 20#include <iterator>; 21#include <type_traits>; 22#include <utility>; 23 ; 24namespace ROOT {; 25namespace Internal {; 26 ; 27template <typename T>; 28struct RBaseType {; 29 using type = typename std::remove_pointer<typename std::decay<T>::type>::type;; 30};; 31 ; 32#if (__cplusplus < 201700L); 33 ; 34template <typename T, bool isDynamic = true, bool isPolymorphic = std::is_polymorphic<RBaseType<T>>::value>; 35struct RCast {; 36 template <typename U>; 37 static T cast(U &&u); 38 {; 39 return dynamic_cast<T>(u);; 40 }; 41};; 42 ; 43template <typename T>; 44struct RCast<T, false, false> {; 45 template <typename U>; 46 static T cast(U &&u); 47 {; 48 return static_cast<T>(u);; 49 }; 50};; 51 ; 52template <typename T>; 53struct RCast<T, false, true> {; 54 template <typename U>; 55 static T cast(U &&u); 56 {; 57 assert(dynamic_cast<T>(u));; 58 return static_cast<T>(u);; 59 }; 60};; 61 ; 62#endif; 63 ; 64// For SFINAE-based checks for the existence of the `begin` and `end` methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RRangeCast_8hxx_source.html:91,Guid,Guide,91,doc/master/RRangeCast_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RRangeCast_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/RRangeCast.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. RRangeCast.hxx. Go to the documentation of this file. 1/// \file ROOT/RRangeCast.hxx; 2/// \ingroup Base StdExt; 3/// \author Jonas Rembser <jonas.rembser@cern.ch>; 4/// \date 2021-08-04; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#ifndef ROOT_RRangeCast; 15#define ROOT_RRangeCast; 16 ; 17#include ""ROOT/RSpan.hxx""; 18 ; 19#include <cassert>; 20#include <iterator>; 21#include <type_traits>; 22#include <utility>; 23 ; 24namespace ROOT {; 25namespace Internal {; 26 ; 27template <typename T>; 28struct RBaseType {; 29 using type = typename std::remove_pointer<typename std::decay<T>::type>::type;; 30};; 31 ; 32#if (__cplusplus < 201700L); 33 ; 34template <typename T, bool isDynamic = true, bool isPolymorphic = std::is_polymorphic<RBaseType<T>>::value>; 35struct RCast {; 36 template <typename U>; 37 static T cast(U &&u); 38 {; 39 return dynamic_cast<T>(u);; 40 }; 41};; 42 ; 43template <typename T>; 44struct RCast<T, false, false> {; 45 template <typename U>; 46 static T cast(U &&u); 47 {; 48 return static_cast<T>(u);; 49 }; 50};; 51 ; 52template <typename T>; 53struct RCast<T, false, true> {; 54 template <typename U>; 55 static T cast(U &&u); 56 {; 57 assert(dynamic_cast<T>(u));; 58 return static_cast<T>(u);; 59 }; 60};; 61 ; 62#endif; 63 ; 64// For SFINAE-based checks for the existence of the `begin` and `end` methods.; 65template <typename T>; 66constexpr auto hasBeginEnd(int) -> decltype(std::begin(std::declval<T>()), std::end(std::declval<T>()), true); 67{; 68 return true;; 69}; 70 ; 71template <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RRangeCast_8hxx_source.html:90,Guid,Guide,90,doc/v632/RRangeCast_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RRangeCast_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/StringUtils.hxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. StringUtils.hxx. Go to the documentation of this file. 1/// \file ROOT/StringUtils.hxx; 2/// \ingroup Base StdExt; 3/// \author Jonas Rembser <jonas.rembser@cern.ch>; 4/// \date 2021-08-09; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#ifndef ROOT_StringUtils; 15#define ROOT_StringUtils; 16 ; 17#include <string_view>; 18 ; 19#include <string>; 20#include <vector>; 21#include <numeric>; 22 ; 23namespace ROOT {; 24 ; 25std::vector<std::string> Split(std::string_view str, std::string_view delims, bool skipEmpty = false);; 26 ; 27/**; 28 * \brief Concatenate a list of strings with a separator; 29 * \tparam StringCollection_t Any container of strings (vector, initializer_list, ...); 30 * \param[in] sep Separator inbetween the strings.; 31 * \param[in] strings container of strings; 32 * \return the sep-delimited concatenation of strings; 33 */; 34template <class StringCollection_t>; 35std::string Join(const std::string &sep, StringCollection_t &&strings); 36{; 37 if (strings.empty()); 38 return """";; 39 return std::accumulate(std::next(std::begin(strings)), std::end(strings), strings[0],; 40 [&sep](auto const &a, auto const &b) { return a + sep + b; });; 41}; 42 ; 43} // namespace ROOT; 44 ; 45#endif; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Joinstd::string Join(const std::string &sep, StringCollection_t &&strings)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/StringUtils_8hxx_source.html:92,Guid,Guide,92,doc/master/StringUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/master/StringUtils_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/ROOT/StringUtils.hxx Source File. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. StringUtils.hxx. Go to the documentation of this file. 1/// \file ROOT/StringUtils.hxx; 2/// \ingroup Base StdExt; 3/// \author Jonas Rembser <jonas.rembser@cern.ch>; 4/// \date 2021-08-09; 5 ; 6/*************************************************************************; 7 * Copyright (C) 1995-2019, Rene Brun and Fons Rademakers. *; 8 * All rights reserved. *; 9 * *; 10 * For the licensing terms see $ROOTSYS/LICENSE. *; 11 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 12 *************************************************************************/; 13 ; 14#ifndef ROOT_StringUtils; 15#define ROOT_StringUtils; 16 ; 17#include <string_view>; 18 ; 19#include <string>; 20#include <vector>; 21#include <numeric>; 22 ; 23namespace ROOT {; 24 ; 25std::vector<std::string> Split(std::string_view str, std::string_view delims, bool skipEmpty = false);; 26 ; 27/**; 28 * \brief Concatenate a list of strings with a separator; 29 * \tparam StringCollection_t Any container of strings (vector, initializer_list, ...); 30 * \param[in] sep Separator inbetween the strings.; 31 * \param[in] strings container of strings; 32 * \return the sep-delimited concatenation of strings; 33 */; 34template <class StringCollection_t>; 35std::string Join(const std::string &sep, StringCollection_t &&strings); 36{; 37 if (strings.empty()); 38 return """";; 39 return std::accumulate(std::next(std::begin(strings)), std::end(strings), strings[0],; 40 [&sep](auto const &a, auto const &b) { return a + sep + b; });; 41}; 42 ; 43} // namespace ROOT; 44 ; 45#endif; b#define b(i)Definition RSha256.hxx:100; a#define a(i)Definition RSha256.hxx:99; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Joinstd::string Join(const std::string &sep, StringCollection_t &&strings)C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/StringUtils_8hxx_source.html:91,Guid,Guide,91,doc/v632/StringUtils_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/StringUtils_8hxx_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/RVersion.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Macros ; RVersion.h File Reference. #include ""ROOT/RVersion.hxx"". Include dependency graph for RVersion.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Macros; #define ROOT_RELEASE_TIME   ""00:00:00"" /* not updated anymore */;  . Macro Definition Documentation. ◆ ROOT_RELEASE_TIME. #define ROOT_RELEASE_TIME   ""00:00:00"" /* not updated anymore */. Definition at line 6 of file RVersion.h. corefoundationincRVersion.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVersion_8h.html:85,Guid,Guide,85,doc/master/RVersion_8h.html,https://root.cern,https://root.cern/doc/master/RVersion_8h.html,2,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/RtypesCore.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Variables ; RtypesCore.h File Reference. #include <ROOT/RConfig.hxx>; #include ""DllImport.h""; #include <cstddef>. Include dependency graph for RtypesCore.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Typedefs; typedef float Angle_t;  ; typedef double Axis_t;  ; typedef bool Bool_t;  ; typedef unsigned char Byte_t;  ; typedef char Char_t;  ; typedef short Color_t;  ; typedef double Coord_t;  ; typedef double Double32_t;  ; typedef double Double_t;  ; typedef float Float16_t;  ; typedef float Float_t;  ; typedef short Font_t;  ; typedef int Int_t;  ; typedef long long Long64_t;  ; typedef long Long_t;  ; typedef long double LongDouble_t;  ; typedef long Longptr_t;  ; typedef short Marker_t;  ; typedef const char Option_t;  ; typedef float Real_t;  ; typedef short SCoord_t;  ; typedef int Seek_t;  ; typedef short Short_t;  ; typedef float Size_t;  ; typedef int Ssiz_t;  ; typedef double Stat_t;  ; typedef short Style_t;  ; typedef char Text_t;  ; typedef unsigned char UChar_t;  ; typedef unsigned int UInt_t;  ; typedef unsigned long long ULong64_t;  ; typedef unsigned long ULong_t;  ; typedef unsigned long ULongptr_t;  ; typedef unsigned short UShort_t;  ; typedef short Version_t;  ; typedef short Width_t;  . Variables; Int_t gDebug;  ; constexpr ULong_t kBitsPerByte = 8;  ; constexpr Bool_t kFALSE = false;  ; constexpr Int_t kMaxChar = kMaxUChar >> 1;  ; constexpr Int_t kMaxInt = Int_t(kMaxUInt >> 1);  ; constexpr Long_t kMaxLong = Long_t(kMaxULong >> 1);  ; constexpr Long64_t kMaxLong64 = Long64_t(kMaxULong64 >> 1);  ; constexpr Int_t kMaxShort = kMaxUShort >> 1;  ; constexpr Int_t kMaxUChar = 256;  ; constexpr UInt_t kMaxUI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RtypesCore_8h.html:87,Guid,Guide,87,doc/master/RtypesCore_8h.html,https://root.cern,https://root.cern/doc/master/RtypesCore_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/RtypesCore.h File Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. Typedefs |; Variables ; RtypesCore.h File Reference. #include <ROOT/RConfig.hxx>; #include ""DllImport.h""; #include <cstddef>. Include dependency graph for RtypesCore.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Typedefs; typedef float Angle_t;  ; typedef double Axis_t;  ; typedef bool Bool_t;  ; typedef unsigned char Byte_t;  ; typedef char Char_t;  ; typedef short Color_t;  ; typedef double Coord_t;  ; typedef double Double32_t;  ; typedef double Double_t;  ; typedef float Float16_t;  ; typedef float Float_t;  ; typedef short Font_t;  ; typedef int Int_t;  ; typedef long long Long64_t;  ; typedef long Long_t;  ; typedef long double LongDouble_t;  ; typedef long Longptr_t;  ; typedef short Marker_t;  ; typedef const char Option_t;  ; typedef float Real_t;  ; typedef short SCoord_t;  ; typedef int Seek_t;  ; typedef short Short_t;  ; typedef float Size_t;  ; typedef int Ssiz_t;  ; typedef double Stat_t;  ; typedef short Style_t;  ; typedef char Text_t;  ; typedef unsigned char UChar_t;  ; typedef unsigned int UInt_t;  ; typedef unsigned long long ULong64_t;  ; typedef unsigned long ULong_t;  ; typedef unsigned long ULongptr_t;  ; typedef unsigned short UShort_t;  ; typedef short Version_t;  ; typedef short Width_t;  . Variables; Int_t gDebug;  ; constexpr ULong_t kBitsPerByte = 8;  ; constexpr Bool_t kFALSE = false;  ; constexpr Int_t kMaxChar = kMaxUChar >> 1;  ; constexpr Int_t kMaxInt = Int_t(kMaxUInt >> 1);  ; constexpr Long_t kMaxLong = Long_t(kMaxULong >> 1);  ; constexpr Long64_t kMaxLong64 = Long64_t(kMaxULong64 >> 1);  ; constexpr Int_t kMaxShort = kMaxUShort >> 1;  ; constexpr Int_t kMaxUChar = 256;  ; constexpr UInt_t kMaxUIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RtypesCore_8h.html:86,Guid,Guide,86,doc/v632/RtypesCore_8h.html,https://root.cern,https://root.cern/doc/v632/RtypesCore_8h.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/RtypesCore.h Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. RtypesCore.h. Go to the documentation of this file. 1/* @(#)root/foundation:$Id$ */; 2 ; 3/*************************************************************************; 4 * Copyright (C) 1995-2014, Rene Brun and Fons Rademakers. *; 5 * All rights reserved. *; 6 * *; 7 * For the licensing terms see $ROOTSYS/LICENSE. *; 8 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 9 *************************************************************************/; 10 ; 11#ifndef ROOT_RtypesCore; 12#define ROOT_RtypesCore; 13 ; 14//////////////////////////////////////////////////////////////////////////; 15// //; 16// RtypesCore //; 17// //; 18// Basic types used by ROOT and required by TInterpreter. //; 19// //; 20//////////////////////////////////////////////////////////////////////////; 21 ; 22 ; 23#include <ROOT/RConfig.hxx>; 24 ; 25#include ""DllImport.h""; 26 ; 27#ifndef R__LESS_INCLUDES; 28#include <cstddef> // size_t, NULL; 29#endif; 30 ; 31//---- Tag used by rootcling to determine constructor used for I/O.; 32 ; 33class TRootIOCtor;; 34 ; 35//---- types -------------------------------------------------------------------; 36 ; 37typedef char Char_t; //Signed Character 1 byte (char); 38typedef unsigned char UChar_t; //Unsigned Character 1 byte (unsigned char); 39typedef short Short_t; //Signed Short integer 2 bytes (short); 40typedef unsigned short UShort_t; //Unsigned Short integer 2 bytes (unsigned short); 41#ifdef R__INT16; 42typedef long Int_t; //Signed integer 4 bytes; 43typedef unsigned long UInt_t; //Unsigned integer 4 bytes; 44#else; 45typedef int Int_t; //Signed integer 4 bytes (int); 46typedef unsigned int UInt_t; //Unsigned integer 4 bytes (unsigned int); 47#endif; 48#ifdef R__B64 // Note: Long_t and ULong_t are currently not portable types; 49typedef int Seek_t; //File pointer (int); 50typedef long Long_t; //Signed long integer",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RtypesCore_8h_source.html:84,Guid,Guide,84,doc/master/RtypesCore_8h_source.html,https://root.cern,https://root.cern/doc/master/RtypesCore_8h_source.html,1,['Guid'],['Guide']
Usability,". ROOT: core/foundation/inc/TError.h File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces |; Macros |; Typedefs |; Functions |; Variables ; TError.h File Reference. #include <DllImport.h>; #include ""RtypesCore.h""; #include <ROOT/RConfig.hxx>; #include <cstdarg>; #include <functional>. Include dependency graph for TError.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Internal;  . Macros; #define R__ASSERT(e);  Checks condition e and reports a fatal error if it's false. ;  ; #define R__CHECK(e);  Checks condition e and reports a warning message if it's false. ;  . Typedefs; typedef void(* ErrorHandlerFunc_t) (int level, Bool_t abort, const char *location, const char *msg);  ; using ROOT::Internal::ErrorSystemMsgHandlerFunc_t = std::function< const char *()>;  Retrieves the error string associated with the last system error. ;  . Functions; void AbstractMethod (const char *method);  This function can be used in abstract base classes in case one does not want to make the class a ""real"" (in C++ sense) ABC. ;  ; void Break (const char *location, const char *msgfmt,...);  Use this function in case an error occurred. ;  ; void DefaultErrorHandler (int level, Bool_t abort, const char *location, const char *msg);  The default error handler function. ;  ; void Error (const char *location, const char *msgfmt,...);  Use this function in case an error occurred. ;  ; void ErrorHandler (int level, const char *location, const char *fmt, std::va_list va);  General error handler function. It calls the user set error handler. ;  ; void Fatal (const char *location, const char *msgfmt,...);  Use this function in case of a fatal error. It will abort the program. ;  ; ErrorHandlerFunc_t Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8h.html:83,Guid,Guide,83,doc/master/TError_8h.html,https://root.cern,https://root.cern/doc/master/TError_8h.html,1,['Guid'],['Guide']
