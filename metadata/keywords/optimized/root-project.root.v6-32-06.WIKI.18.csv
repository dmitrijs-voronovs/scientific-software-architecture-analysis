quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability,"operator ++) a linear minimization is used.; only the status of the fit is returned;; the fit is performed in Multithread whenever is enabled in ROOT;; only the last fitted function is saved in the histogram;; the histogram is drawn after fitting overalyed with the resulting fitting function. Minimizer Configuration; The Fit is perfomed using the default Minimizer, defined in the ROOT::Math::MinimizerOptions class. It is possible to change the default minimizer and its configuration parameters by calling these static functions before fitting (before calling TH1::Fit):; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(minimizerName, minimizerAgorithm) for changing the minmizer and/or the corresponding algorithm. For example ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""GSLMultiMin"",""BFGS""); will set the usage of the BFGS algorithm of the GSL multi-dimensional minimization The current defaults are (""Minuit"",""Migrad""). See the documentation of the ROOT::Math::MinimizerOptions for the available minimizers in ROOT and their corresponding algorithms.; ROOT::Math::MinimizerOptions::SetDefaultTolerance for setting a different tolerance value for the minimization.; ROOT::Math::MinimizerOptions::SetDefaultMaxFunctionCalls for setting the maximum number of function calls.; ROOT::Math::MinimizerOptions::SetDefaultPrintLevel for changing the minimizer print level from level=0 (minimal printing) to level=3 maximum printing. Other options are possible depending on the Minimizer used, see the corresponding documentation. The default minimizer can be also set in the resource file in etc/system.rootrc. For example; Root.Fitter: Minuit2. Chi-square Fits; By default a chi-square (least-square) fit is performed on the histogram. The so-called modified least-square method is used where the residual for each bin is computed using as error the observed value (the bin error) returned by TH1::GetBinError. \[; Chi2 = \sum_{i}{ \left(\frac{y(i) - f(x(i) | p )}{e(i)} \right)^2 }; \]. where",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:130513,avail,available,130513,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['avail'],['available']
Availability,"operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFileHandler&operator=(const TFileHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Bool_tReadNotify(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidResetReadyMask(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFd(int fd); virtual voidSetInterest(Int_t mask); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetReadReady(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetWriteReady(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFileHandler(const TFileHandler&); TFileHandler(int fd, int mask); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tWriteNotify().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileHandler.html:7305,mask,mask,7305,root/html602/TFileHandler.html,https://root.cern,https://root.cern/root/html602/TFileHandler.html,4,['mask'],['mask']
Availability,"operly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" fiel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSocket.html:13504,error,error,13504,root/html534/TSocket.html,https://root.cern,https://root.cern/root/html534/TSocket.html,3,['error'],['error']
Availability,"operty(MethodInfo_t*) const; virtual const char*MethodInfo_Title(MethodInfo_t*) const; virtual TypeInfo_t*MethodInfo_Type(MethodInfo_t*) const; virtual const char*MethodInfo_TypeName(MethodInfo_t*) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TInterpreter&operator=(const TInterpreter&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPrintIntro(); virtual Long_tProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); virtual Long_tProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReloadAllSharedLibraryMaps(); virtual Int_tRescanLibraryMap(); virtual voidReset(); virtual voidResetAll(); voidTObject::ResetBit(UInt_t f); virtual voidResetGlobals(); virtual voidRewindDictionary(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveContext(); virtual voidSaveGlobalsContext(); virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAlloclockfunc(void (*)()) const; virtual voidSetAllocunlockfunc(void (*)()) const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual intSetClassAutoloading(int) const; virtual voidSetClassInfo(TClass* cl, Bool_t reload = kFALSE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetErrmsgcallback(void*) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:12833,error,error,12833,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,1,['error'],['error']
Availability,"opic, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed through RooMsgService (such as Minuit printouts). { return _silentMode ; }. void setSilentMode(Bool_t flag); { _silentMode = flag ; }. Int_t errorCount() const; { return _errorCount ; }. void clearErrorCount(); { _errorCount = 0 ; }. RooMsgService(); Priva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:11274,error,error,11274,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,1,['error'],['error']
Availability,"opic?title=topic%20title&body=topic%20body&category=category/subcategory&tags=email,planned\"""");; 1017 TString report_template =; 1018R""(___; 1019_Please read [tips for efficient and successful posting](https://root-forum.cern.ch/t/tips-for-efficient-and-successful-posting/28292) and [posting code](https://root-forum.cern.ch/t/posting-code-read-this-first/28293)_; 1020 ; 1021### Describe the bug; 1022<!--; 1023A clear and concise description of what the wrong behavior is.; 1024-->; 1025### Expected behavior; 1026<!--; 1027A clear and concise description of what you expected to happen.; 1028-->; 1029 ; 1030### To Reproduce; 1031<!--; 1032Steps to reproduce the behavior:; 10331. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 10342. Don't forget to attach the required input files!; 10353. How to run your code and / or build it, e.g. `root myMacro.C`, ...; 1036-->; 1037 ; 1038### Setup; 1039)""+GetSetup()+; 1040R""(; 1041<!--; 1042Please specify also how you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; 1043-->; 1044 ; 1045### Additional context; 1046<!--; 1047Add any other context about the problem here.; 1048-->)"";; 1049 report_template = FormatHttpUrl(report_template);; 1050 ; 1051 OpenInBrowser(""\""https://root-forum.cern.ch/new-topic?category=ROOT&tags=bug&body=""+report_template+""&\"""");; 1052 } else {; 1053 Warning(""OpenForumTopic"", ""cannot find \""%s\"" as type for a Forum topic\n""; 1054 ""Available types are 'bug'."", type.Data());; 1055 }; 1056}; 1057 ; 1058////////////////////////////////////////////////////////////////////////////////; 1059/// It opens a GitHub issue in a web browser with prefilled ROOT version; 1060///; 1061/// \param[in] type the issue type (bug, feature or improvement); 1062 ; 1063void TApplication::OpenGitHubIssue(const TString &type); 1064{; 1065 // https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-url-query; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:39752,down,download,39752,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['down'],['download']
Availability,"opied in ctor); Bool_tRooAbsReal::_boolValue! Transient cache for bool values from tree branches ; UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! do not persist; RooListProxy_coefList; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; Int_t_lowestOrder; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPolynomial.html:40174,error,errors,40174,root/html534/RooPolynomial.html,https://root.cern,https://root.cern/root/html534/RooPolynomial.html,1,['error'],['errors']
Availability,"opt = kExit);; 127 ; 128 virtual const char *ApplicationName() const { return fAppImp->ApplicationName(); }; 129 virtual void Show() { fAppImp->Show(); }; 130 virtual void Hide() { fAppImp->Hide(); }; 131 virtual void Iconify() { fAppImp->Iconify(); }; 132 virtual void Open() { fAppImp->Open(); }; 133 virtual void Raise() { fAppImp->Raise(); }; 134 virtual void Lower() { fAppImp->Lower(); }; 135 virtual Bool_t IsCmdThread() { return fAppImp ? fAppImp->IsCmdThread() : kTRUE; }; 136 virtual TApplicationImp *GetApplicationImp() { return fAppImp;}; 137 ; 138 void ls(Option_t *option="""") const override;; 139 ; 140 Int_t Argc() const { return fArgc; }; 141 char **Argv() const { return fArgv; }; 142 char *Argv(Int_t index) const;; 143 Bool_t NoLogOpt() const { return fNoLog; }; 144 Bool_t NoLogoOpt() const { return fNoLogo; }; 145 Bool_t QuitOpt() const { return fQuit; }; 146 TObjArray *InputFiles() const { return fFiles; }; 147 const char *WorkingDirectory() const { return fWorkDir; }; 148 void ClearInputFiles();; 149 ; 150 TApplication *GetAppRemote() const { return fAppRemote; }; 151 ; 152 Bool_t IsRunning() const { return fIsRunning; }; 153 Bool_t ReturnFromRun() const { return fReturnFromRun; }; 154 void SetReturnFromRun(Bool_t ret) { fReturnFromRun = ret; }; 155 ; 156 virtual void LineProcessed(const char *line); //*SIGNAL*; 157 virtual void Terminate(Int_t status = 0); //*SIGNAL*; 158 virtual void KeyPressed(Int_t key); //*SIGNAL*; 159 virtual void ReturnPressed(char *text ); //*SIGNAL*; 160 virtual Int_t TabCompletionHook(char *buf, int *pLoc, std::ostream& out);; 161 ; 162 static Longptr_t ExecuteFile(const char *file, Int_t *error = nullptr, Bool_t keep = kFALSE);; 163 static TList *GetApplications();; 164 static void CreateApplication();; 165 static void NeedGraphicsLibs();; 166 ; 167 ClassDefOverride(TApplication,0) //GUI application singleton; 168};; 169 ; 170R__EXTERN TApplication *gApplication;; 171 ; 172#endif; R__EXTERN#define R__EXTERNDefinition DllImport.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:6906,error,error,6906,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['error'],['error']
Availability,"opt< bool > gOptSplit (""split"", llvm::cl::desc(""Split the dictionary into two parts: one containing the IO (ClassDef)\; information and another the interactivity support.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::list< std::string > gOptSysIncludePaths (""isystem"", llvm::cl::ZeroOrMore, llvm::cl::desc(""Specify a system include path.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptSystemModuleByproducts (""mSystemByproducts"", llvm::cl::Hidden, llvm::cl::desc(""Allow implicit build of system modules.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptUmbrellaInput (""umbrellaHeader"", llvm::cl::desc(""A single header including all headers instead of specifying them on the command line.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< VerboseLevel > gOptVerboseLevel (llvm::cl::desc(""Choose verbosity level:""), llvm::cl::values(clEnumVal(v, ""Show errors.""), clEnumVal(v0, ""Show only fatal errors.""), clEnumVal(v1, ""Show errors (the same as -v).""), clEnumVal(v2, ""Show warnings (default).""), clEnumVal(v3, ""Show notes.""), clEnumVal(v4, ""Show information."")), llvm::cl::init(v2), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::list< std::string > gOptWDiags (""W"", llvm::cl::Prefix, llvm::cl::ZeroOrMore, llvm::cl::desc(""Specify compiler diagnostics options.""), llvm::cl::cat(gRootclingOptions));  ; static llvm::cl::opt< bool > gOptWriteEmptyRootPCM (""writeEmptyRootPCM"", llvm::cl::Hidden, llvm::cl::desc(""Does not include the header files as it assumes they exist in the pch.""), llvm::cl::cat(gRootclingOptions));  ; const std::string gPathSeparator (ROOT::TMetaUtils::GetPathSeparator());  ; llvm::StringRef GrabIndex (const cling::Interpreter &interp, const clang::FieldDecl &member, int printError);  GrabIndex returns a static string (so use it or copy it immediately, do not call GrabIndex twice in the same expression) containing the size of the array data member. ;  ; static llvm::cl::OptionCategory gRoot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx.html:19380,error,errors,19380,doc/master/rootcling__impl_8cxx.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx.html,1,['error'],['errors']
Availability,"optimize TNetFile opening when; instatiated via a call to TXNetFile.; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket** pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPSocket.html:14268,error,error,14268,root/html528/TPSocket.html,https://root.cern,https://root.cern/root/html528/TPSocket.html,3,['error'],['error']
Availability,"optimize TNetFile opening when; instatiated via a call to TXNetFile.; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TPSocket(TSocket*[] pSockets, Int_t size); Create a parallel socket. This ctor is called by TPServerSocket. ~TPSocket(); Cleanup the parallel socket. void Close(Option_t* opt = """"); Close a parallel socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). void Init(Int_t tcpwindowsize, TSocket* sock = 0); Create a parallel socket to the specified host. TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetDescriptor() const; Return socket descriptor. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt); Send a raw buffer of specified length. Returns the number of bytes; send and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket would; block (i.e. there is nothing to be read). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPSocket.html:15218,error,error,15218,root/html602/TPSocket.html,https://root.cern,https://root.cern/root/html602/TPSocket.html,2,['error'],['error']
Availability,"option ""U"" and; call the following functions:; TVirtualFitter::Fitter(mygraph)->SetFCN(MyFittingFunction); where MyFittingFunction is of type:; extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f,; Double_t *u, Int_t flag);. TGraphErrors fit:. In case of a TGraphErrors object, when x errors are present, the error along x,; is projected along the y-direction by calculating the function at the points x-exlow and; x+exhigh. The chisquare is then computed as the sum of the quantity below at each point:. where x and y are the point coordinates, and f'(x) is the derivative of the; function f(x). In case the function lies below (above) the data point, ey is ey_low (ey_high). thanks to Andy Haas (haas@yahoo.com) for adding the case with TGraphAsymmErrors; University of Washington. The approach used to approximate the uncertainty in y because of the; errors in x is to make it equal the error in x times the slope of the line.; The improvement, compared to the first method (f(x+ exhigh) - f(x-exlow))/2; is of (error of x)**2 order. This approach is called ""effective variance method"".; This improvement has been made in version 4.00/08 by Anna Kreshuk.; The implementation is provided in the function FitUtil::EvaluateChi2Effective. NOTE:; 1) By using the ""effective variance"" method a simple linear regression; becomes a non-linear case, which takes several iterations; instead of 0 as in the linear case. 2) The effective variance technique assumes that there is no correlation; between the x and y coordinate. 3) The standard chi2 (least square) method without error in the coordinates (x) can; be forced by using option ""EX0"". 4) The linear fitter doesn't take into account the errors in x. When fitting a; TGraphErrors with a linear functions the errors in x willnot be considere.; If errors in x are important, go through minuit (use option ""F"" for polynomial fitting). 5) When fitting a TGraph (i.e. no errors associated with each point),; a correction is applied to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:26101,error,error,26101,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,6,['error'],['error']
Availability,"option = """") const; THnBase*THnBase::RebinBase(Int_t group) const; THnBase*THnBase::RebinBase(const Int_t* group) const; virtual voidTHnBase::Reserve(Long64_t); voidTHnBase::ResetBase(Option_t* option = """"); virtual voidTHnBase::SetFilledBins(Long64_t); voidTHnBase::UpdateXStat(const Double_t* x, Double_t w = 1.). Data Members; public:. enum THnBase::[unnamed] { kNoInt; kValidInt; kInvalidInt; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TNDArrayT<double>fArraybin content; TObjArrayTHnBase::fAxesaxes of the histogram; TObjArrayTHnBase::fBrowsables! browser-helpers for each axis; Int_t*THn::fCoordBuf! Temporary buffer; Double_tTHnBase::fEntriesnumber of entries, spread over chunks; Double_t*THnBase::fIntegral! array with bin weight sums; enum THnBase::THnBase::fIntegralStatus! status of integral; TStringTNamed::fNameobject identifier; Int_tTHnBase::fNdimensionsnumber of dimensions; TNDArrayT<Double_t>THn::fSumw2bin error, lazy allocation happens in TNDArrayT; TStringTNamed::fTitleobject title; Double_tTHnBase::fTsumwtotal sum of weights; Double_tTHnBase::fTsumw2total sum of weights squared; -1 if no errors are calculated; TArrayDTHnBase::fTsumwxtotal sum of weight*X for each dimension; TArrayDTHnBase::fTsumwx2total sum of weight*X*X for each dimension. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GetArray(); Increment the bin content of ""bin"" by ""w"",; return the bin index. return GetArray(). » Author: Axel Naumann, Nov 2011 » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_double_.html:12271,error,error,12271,root/html534/THnT_double_.html,https://root.cern,https://root.cern/root/html534/THnT_double_.html,2,['error'],"['error', 'errors']"
Availability,"option = """"). overridevirtual . Paint all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1698 of file TFile.cxx. ◆ Print(). void TFile::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print all objects in the file. ; Reimplemented from TDirectory.; Reimplemented in TSQLFile, TXMLFile, TNetFile, TXNetFile, and TMemFile.; Definition at line 1706 of file TFile.cxx. ◆ ReadBuffer() [1/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Int_t ; len . ). virtual . Read a buffer from the file. ; This is the basic low level read operation. Returns kTRUE in case of failure. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1770 of file TFile.cxx. ◆ ReadBuffer() [2/2]. Bool_t TFile::ReadBuffer ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TXNetFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile, and TXNetFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TXNetFile, TDCacheFile, TNetFile, TS3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:86378,failure,failure,86378,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,1,['failure'],['failure']
Availability,"option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TEventIter*TEventIter::Create(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetCacheSize(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual Long64_tGetNextEvent(); virtual Int_tGetNextPacket(Long64_t& first, Long64_t& num, TEntryList** enl = 0, TEventList** evl = 0); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TList*TEventIter::GetPackets(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEventIterObj.html:1701,error,error,1701,root/html534/TEventIterObj.html,https://root.cern,https://root.cern/root/html534/TEventIterObj.html,9,['error'],['error']
Availability,"option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TEventIter*TEventIter::Create(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tGetCacheSize(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual Long64_tGetNextEvent(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEventIterObj.html:1701,error,error,1701,root/html528/TEventIterObj.html,https://root.cern,https://root.cern/root/html528/TEventIterObj.html,9,['error'],['error']
Availability,"option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id: TSynapse.h 21922 2008-01-30 13:08:54Z brun $ » Last generated: 2010-09-23 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSynapse.html:6111,error,error,6111,root/html528/TSynapse.html,https://root.cern,https://root.cern/root/html528/TSynapse.html,2,['error'],['error']
Availability,"option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id: TSynapse.h 21922 2008-01-30 13:08:54Z brun $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSynapse.html:6180,error,error,6180,root/html530/TSynapse.html,https://root.cern,https://root.cern/root/html530/TSynapse.html,2,['error'],['error']
Availability,"option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fweight; }. Double_t GetDEDw() const; { return fDEDw; }. » Author: Christophe.Delaere@cern.ch 20/07/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/mlp:$Id: TSynapse.h 21922 2008-01-30 13:08:54Z brun $ » Last generated: 2011-11-03 20:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSynapse.html:6180,error,error,6180,root/html532/TSynapse.html,https://root.cern,https://root.cern/root/html532/TSynapse.html,2,['error'],['error']
Availability,"option given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(). PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. » Last changed: Mon Jul 4 15:36:39 2011 » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPySelector.html:9144,avail,available,9144,root/html530/TPySelector.html,https://root.cern,https://root.cern/root/html530/TPySelector.html,2,"['avail', 'error']","['available', 'error']"
Availability,"option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys = new double[5] {0.6, 0.7, 0.6, 0.4, 0.8};; ; TGraphMultiErrors* gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", 5, ax, ay, aexl, aexh, aeylstat, aeyhstat);; gme->AddYError(5, aeylsys, aeyhsys);; gme->SetMarkerStyle(20);; gme->SetLineColor(kRed);; gme->GetAttLine(0)->SetLineColor(kRed);; gme->GetAttLine(1)->SetLineColor(kBlue);; gme->GetAttFill(1)->SetFillS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:16995,error,error,16995,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"option, Int_t nbins)=0; TVirtualPad::TContextsmall helper class to store/restore gPad context in TPad methodsDefinition TVirtualPad.h:61; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::PermuteBool_t Permute(Int_t n, Int_t *a)Simple recursive algorithm to find the permutations of n natural numbers, not necessarily all distinc...Definition TMath.cxx:2557; TMath::QuietNaNDouble_t QuietNaN()Returns a quiet NaN as defined by IEEE 754.Definition TMath.h:902; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MeanDouble_t Mean(Long64_t n, const T *a, const Double_t *w=nullptr)Returns the weighted mean of an array a with length n.Definition TMath.h:1089; TMath::KolmogorovProbDouble_t KolmogorovProb(Double_t z)Calculates the Kolmogorov distribution function,.Definition TMath.cxx:679; TMath::BinarySearchLong64_t BinarySearch(Long64_t n, const T *array, T value)Binary search in an array of n values to locate value.Definition TMathBase.h:347; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699. histhistsrcTH3.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:217540,down,downward,217540,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['down'],['downward']
Availability,"option.; If the denominator becomes 0 or pass > total, the corresponding bin is skipped. 2) calculating ratios of two Poisson means (option 'pois'):; The two histograms are interpreted as independent Poisson processes and the ratio ; \[; \tau = \frac{n_{1}}{n_{2}} = \frac{\varepsilon}{1 - \varepsilon}; \]. with \(\varepsilon = \frac{n_{1}}{n_{1} + n_{2}}\). The histogram 'pass' is interpreted as \(n_{1}\) and the total histogram is used for \(n_{2}\).; The (asymmetric) uncertainties of the Poisson ratio are linked to the uncertainties of efficiency by a parameter transformation: ; \[; \Delta \tau_{low/up} = \frac{1}{(1 - \varepsilon)^{2}} \Delta \varepsilon_{low/up}; \]. The x errors span each histogram bin (lowedge ... lowedge+width) The y errors depend on the chosen statistic methode which can be determined by the options given below. For a detailed description of the used statistic calculations please have a look at the corresponding functions!; Options:; v : verbose mode: prints information about the number of used bins and calculated efficiencies with their errors; cl=x : determine the used confidence level (0<x<1) (default is 0.683); cp : Clopper-Pearson interval (see TEfficiency::ClopperPearson); w : Wilson interval (see TEfficiency::Wilson); n : normal approximation propagation (see TEfficiency::Normal); ac : Agresti-Coull interval (see TEfficiency::AgrestiCoull); fc : Feldman-Cousins interval (see TEfficiency::FeldmanCousinsInterval); midp : Lancaster mid-P interval (see TEfficiency::MidPInterval); b(a,b): bayesian interval using a prior probability ~Beta(a,b); a,b > 0 (see TEfficiency::Bayesian); mode : use mode of posterior for Bayesian interval (default is mean); shortest: use shortest interval (done by default if mode is set); central: use central interval (done by default if mode is NOT set); pois: interpret histograms as poisson ratio instead of efficiency; e0 : plot efficiency and interval for bins where total=0 (default is to skip them). Note: Unfor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:45538,error,errors,45538,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,1,['error'],['errors']
Availability,"option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphMultiErrors.cxx:1729; TGraphMultiErrors::fSumErrorsModeInt_t fSumErrorsModeHow y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition.Definition TGraphMultiErrors.h:33; TGraphMultiErrors::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::ESummationModesESummationModesDefinition TGraphMultiErrors.h:57; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition TGraphMultiErrors.h:59; TGraphMultiErrors::kOnlyFirst@ kOnlyFirstOnly take errors from first dimension.Definition TGraphMultiErrors.h:58; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineStylevirtual void SetLineStyle(Int_t e, Style_t lstyle)Set Line Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2095; TGraphMultiErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphMultiErrors.cxx:777; TGraphMultiErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exH)Set exH value for point i.Definition TGraphMultiErrors.cxx:1869; TGraphMultiErrors::fExLDouble_t * fExL[fNpoints] array of X low errorsDefinition TGraphMultiErrors.h:35; TGraphMultiErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphMultiErrors.cxx:802; TGraphMultiErrors::fEyHstd::vector< TArrayD > fEyHTwo dimensional a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:19909,error,error,19909,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['error']
Availability,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:9827,error,error,9827,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,2,['error'],['error']
Availability,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:12993,error,error,12993,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,12,['error'],['error']
Availability,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html:4103,error,error,4103,doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1THnBaseBrowsable.html,37,['error'],['error']
Availability,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:54089,error,error,54089,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['error'],['error']
Availability,"option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void GetPlaneNormal (Double_t *p1, Double_t *p2, Double_t *p3, Double_t *norm);  ; static Bool_t InsidePolygon (Double_t x, Double_t y, Double_t *pts);  ; static Bool_t IsSamePoint (const Double_t *p1, const Double_t *p2);  ;  Static Public Member Functions inherited from TGeoBBox; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox *box2, const TGeoMatrix *mat2) R__DEPRECATED(6;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Contains (const Double_t *point, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin);  ; static const char * DeclFileName ();  ; static Double_t DistFromInside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ; static Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ;  Static Public Member Functions inherited from TGeoShape; static Double_t Big ();  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Double_t ComputeEpsMch ();  Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ;  ; static const char * DeclFileName ();  ; static Double_t DistToPhiMin (const Double_t *point, const Double_t *dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:18465,error,error,18465,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,1,['error'],['error']
Availability,"options (their key words). ; That can be set in the option string.; know options:. nTrees number of trees in the forest to be created; BoostType the boosting type for the trees in the forest (AdaBoost e.t.c..). Known:; AdaBoost; AdaBoostR2 (Adaboost for regression); Bagging; GradBoost. AdaBoostBeta the boosting parameter, beta, for AdaBoost; UseRandomisedTrees choose at each node splitting a random set of variables; UseNvars use UseNvars variables in randomised trees; UsePoisson Nvars use UseNvars not as fixed number but as mean of a poisson distribution; SeparationType the separation criterion applied in the node splitting. Known:; GiniIndex; MisClassificationError; CrossEntropy; SDivSqrtSPlusB. MinNodeSize: minimum percentage of training events in a leaf node (leaf criteria, stop splitting); nCuts: the number of steps in the optimisation of the cut for a node (if < 0, then step size is determined by the events); UseFisherCuts: use multivariate splits using the Fisher criterion; UseYesNoLeaf decide if the classification is done simply by the node type, or the S/B (from the training) in the leaf node; NodePurityLimit the minimum purity to classify a node as a signal node (used in pruning and boosting to determine misclassification error rate); PruneMethod The Pruning method. Known:; NoPruning // switch off pruning completely; ExpectedError; CostComplexity. PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment; IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in training sample and ""annihilate"" them. MaxDepth maximum depth of the decision tree allowed before further splitting is stopped; SkipNormali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:47306,error,error,47306,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['error'],['error']
Availability,"options. Double_t GetMaximum(Option_t* option = """"); returns the maximum of all added histograms; returns the maximum of all histograms if option ""nostack"". Double_t GetMinimum(Option_t* option = """"); returns the minimum of all added histograms; returns the minimum of all histograms if option ""nostack"". TObjArray * GetStack(); Return pointer to Stack. Build it if not yet done. TAxis * GetXaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. TAxis * GetYaxis() const; Get x axis of the histogram used to draw the stack. IMPORTANT NOTE; You must call Draw before calling this function. The returned histogram; depends on the selected Draw options. void ls(Option_t* option = """") const; List histograms in the stack. Long64_t Merge(TCollection* li, TFileMergeInfo* info); Merge the THStack in the TList into this stack.; Returns the total number of histograms in the result or -1 in case of an error. void Modified(); invalidate sum of histograms. void Paint(Option_t* chopt = """"); paint the list of histograms; By default, histograms are shown stacked.; -the first histogram is paint; -then the sum of the first and second, etc. If option ""nostack"" is specified, histograms are all paint in the same pad; as if the option ""same"" had been specified. if option ""pads"" is specified, the current pad/canvas is subdivided into; a number of pads equal to the number of histograms and each histogram; is paint into a separate pad. See THistPainter::Paint for a list of valid options. void Print(Option_t* chopt = """") const; Print the list of histograms. void RecursiveRemove(TObject* obj); Recursively remove object from the list of histograms. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetMaximum(Double_t maximum = -1111); Set maximum. void SetMinimum(Double_t minimum = -1111); Set mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THStack.html:11020,error,error,11020,root/html530/THStack.html,https://root.cern,https://root.cern/root/html530/THStack.html,2,['error'],['error']
Availability,"options; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). private:. vector<double>fCovar; unsigned intfDim; vector<double>fErrors; TLinearFitter*fFitter; doublefMinVal; unsigned intfNFree; const ROOT::Math::IMultiGradFunction*fObjFunc; vector<double>fParams; boolfRobust. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLinearMinimizer(int type = 0); Default constructor implementation.; type is not used - needed for consistency with other minimizer plug-ins. TLinearMinimizer(const char* type); constructor passing a type of algorithm, (supported now robust via LTS regression). ~TLinearMinimizer(); Destructor implementation. TLinearMinimizer(const TLinearMinimizer& ); Implementation of copy constructor. void SetFunction(const ROOT::Math::IMultiGenFunction & ); Set function to be minimized. Flag an error since only support Gradient objective functions. void SetFunction(const ROOT::Math::IMultiGradFunction & objfunc); Set the function to be minimized. The function must be a Chi2 gradient function; When performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:6582,error,error,6582,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,2,['error'],['error']
Availability,"opy (Int_t size, Int_t iend);  if size > fMaxSize allocate new arrays of 2*size points and copy iend first points. ;  ; TString SaveArray (std::ostream &out, const char *suffix, Int_t frameNumber, Double_t *arr);  Save array as C++ code Returns name of created array. ;  ; void SaveHistogramAndFunctions (std::ostream &out, const char *varname, Int_t &frameNumber, Option_t *option);  Save histogram and list of functions of TGraph as C++ statement Used in all TGraph-derived classes. ;  ; Double_t ** ShrinkAndCopy (Int_t size, Int_t iend);  if size*2 <= fMaxSize allocate new arrays of size points, copy points [0,oend). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Double_t * fEX {nullptr};  [fNpoints] array of X errors ;  ; Double_t * fEY {nullptr};  [fNpoints] array of Y errors ;  ;  Protected Attributes inherited from TGraph; TList * fFunctions;  Pointer to list of functions (fits and user) ;  ; TH1F * fHistogram;  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum;  Maximum value for plotting along y. ;  ; Int_t fMaxSize;  !Current dimension of arrays fX and fY ;  ; Double_t fMinimum;  Minimum value for plotting along y. ;  ; Int_t fNpoints;  Number of points <= fMaxSize. ;  ; TString fOption;  Options used for drawing the graph. ;  ; Double_t * fX;  [fNpoints] array of X points ;  ; Double_t * fY;  [fNpoints] array of Y points ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:31468,error,errors,31468,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,2,['error'],['errors']
Availability,"opy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2010-09-23 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:18395,error,errors,18395,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,1,['error'],['errors']
Availability,"opy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphErrors.html:18557,error,errors,18557,root/html530/TGraphErrors.html,https://root.cern,https://root.cern/root/html530/TGraphErrors.html,1,['error'],['errors']
Availability,"opy errors from fEX and fEY to arrays[0] and arrays[1]; or to fX and fY. Copy points. Bool_t CtorAllocate(); Constructor allocate. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraphErrors.h 24702 2008-07-08 12:01:46Z brun $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphErrors.html:18974,error,errors,18974,root/html532/TGraphErrors.html,https://root.cern,https://root.cern/root/html532/TGraphErrors.html,1,['error'],['errors']
Availability,"opy(TObject &obj) const overrideTLegendEntryvirtual; TAttText::Copy(TAttText &atttext) constTAttText; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; DeclFileName()TLegendEntryinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLabelTLegendEntryprotected; fLineColorTAttLineprotected; fLineStyleTAttLineprotected; fLineWidthTAttLineprotected; fMarkerColorTAttMarkerprotected; fMarkerSizeTAttMarkerprotected; fMarkerStyleTAttMarkerprotected; fObjectTLegendEntryprotected; fOptionTLegendEntryprotected; fTextAlignTAttTextprotected; fTextAngleTAttTextprotected; fTextColorTAttTextprotected; fTextFontTAttTextprotected; fTextSizeTAttTextprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLegendEntry-members.html:1645,error,error,1645,doc/master/classTLegendEntry-members.html,https://root.cern,https://root.cern/doc/master/classTLegendEntry-members.html,2,['error'],['error']
Availability,"opyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; char*TSystem::DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidTSystem::ExitLoop(); virtual Bool_tExpandPathName(TString& patbuf); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeTSystem::GetAclicMode() const; virtual Int_tTSystem::GetAclicProperties() const; voidTSystem::GetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*TSystem::GetBuildArch() const; virtual const char*TSystem::GetBuildCompiler() const; virtual const char*TSystem::GetBuildCompilerVersion() const; virtual const char*TSystem::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnixSystem.html:3533,error,error,3533,root/html602/TUnixSystem.html,https://root.cern,https://root.cern/root/html602/TUnixSystem.html,2,['error'],['error']
Availability,"opyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i]. Double_t GetErrorYlow(Int_t bin) const; Get low error on Y[i]. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld = 0, Double_t exhd = 0, Double_t eyld = 0, Double_t eyhd = 0); Set ex and ey values for point number i. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEXlow() const; {return fEXlow;}. Double_t * GetEXhigh() const; {return fEXhigh;}. Double_t * GetEYlow() const; {return fEYlow;}. Double_t * GetEYhigh() const; {return fEYhigh;}. Double_t * GetEXlowd() const; {return fEXlowd;}. Double_t * GetEXhighd() const; {return fEXhighd;}. Double_t * GetEYlowd() const; {return fEYlowd;}. Double_t * G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:18377,error,errors,18377,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,3,['error'],['errors']
Availability,"or ""%10f"" and so on. Class Charts. Inheritance Chart:. TObject. ←; TSQLServer. ←. TMySQLServer. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if successful. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if successful. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:9732,error,error,9732,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,6,['error'],"['error', 'errors']"
Availability,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLServer.html:8555,error,error,8555,root/html528/TSQLServer.html,https://root.cern,https://root.cern/root/html528/TSQLServer.html,9,['error'],"['error', 'errors']"
Availability,"or ""%e"" or ""%10f"" and so on. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSQLServer * Connect(const char* db, const char* uid, const char* pw); The db should be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if successful. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if successful. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLServer.html:8931,error,error,8931,root/html534/TSQLServer.html,https://root.cern,https://root.cern/root/html534/TSQLServer.html,3,['error'],"['error', 'errors']"
Availability,"or (; itG != itGEnd; ++itG, ++itPrevG); 319 {; 320 double currGrad = (*itG);; 321 double prevGrad = (*itPrevG);; 322 currGrad *= alpha;; 323 ; 324 //(*itPrevG) = m_beta * (prevGrad + currGrad);; 325 currGrad += prevGrad;; 326 (*itG) = currGrad;; 327 (*itPrevG) = currGrad;; 328 ; 329 if (std::fabs (currGrad) > maxGrad); 330 maxGrad = currGrad;; 331 }; 332 ; 333 if (maxGrad > 1); 334 {; 335 m_alpha /= 2;; 336 std::cout << ""\nlearning rate reduced to "" << m_alpha << std::endl;; 337 std::for_each (weights.begin (), weights.end (), [maxGrad](double& w); 338 {; 339 w /= maxGrad;; 340 });; 341 m_prevGradients.clear ();; 342 }; 343 else; 344 {; 345 auto itW = std::begin (weights);; 346 std::for_each (std::begin (m_localGradients), std::end (m_localGradients), [&itW](double& g); 347 {; 348 *itW += g;; 349 ++itW;; 350 });; 351 }; 352 ; 353 ++currentRepetition;; 354 }; 355 return E;; 356 }; 357 ; 358 ; 359 ; 360 ; 361 ; 362 ; 363 ; 364 ; 365 ; 366 ; 367 ; 368 ; 369 ; 370 ; 371 ; 372 ; 373 ; 374 ; 375 ; 376 ; 377/*! \brief sum of squares error function; 378 *; 379 *; 380 */; 381 template <typename ItOutput, typename ItTruth, typename ItDelta, typename InvFnc>; 382 double sumOfSquares (ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth /*itTruthEnd*/, ItDelta itDelta, ItDelta itDeltaEnd, InvFnc invFnc, double patternWeight); 383 {; 384 double errorSum = 0.0;; 385 ; 386 // output - truth; 387 ItTruth itTruth = itTruthBegin;; 388 bool hasDeltas = (itDelta != itDeltaEnd);; 389 for (ItOutput itOutput = itOutputBegin; itOutput != itOutputEnd; ++itOutput, ++itTruth); 390 {; 391// assert (itTruth != itTruthEnd);; 392 double output = (*itOutput);; 393 double error = output - (*itTruth);; 394 if (hasDeltas); 395 {; 396 (*itDelta) = (*invFnc.get ()) (output) * error * patternWeight;; 397 ++itDelta;; 398 }; 399 errorSum += error*error * patternWeight;; 400 }; 401 ; 402 return 0.5*errorSum;; 403 }; 404 ; 405 ; 406 ; 407/*! \brief cross entropy error function; 408 *;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:10858,error,error,10858,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,2,['error'],"['error', 'errorSum']"
Availability,"or -1 if socket() failed, -2 if bind() failed or -3 if listen() failed. ; Definition at line 4297 of file TUnixSystem.cxx. ◆ UnixUdpConnect(). int TUnixSystem::UnixUdpConnect ; (; const char * ; hostname, . int ; port . ). staticprotected . Creates a UDP socket connection Is called via the TSocket constructor. ; Returns -1 in case of error. ; Definition at line 4197 of file TUnixSystem.cxx. ◆ UnixUdpService(). int TUnixSystem::UnixUdpService ; (; int ; port, . int ; backlog . ). staticprotected . Open a socket, bind to it and start listening for UDP connections on the port. ; If reuse is true reuse the address, backlog specifies how many sockets can be waiting to be accepted. If port is 0 a port scan will be done to find a free port. This option is mutual exlusive with the reuse option. ; Definition at line 4373 of file TUnixSystem.cxx. ◆ UnixUnixConnect() [1/2]. int TUnixSystem::UnixUnixConnect ; (; const char * ; path). staticprotected . Connect to a Unix domain socket. Returns -1 in case of error. ; Definition at line 4249 of file TUnixSystem.cxx. ◆ UnixUnixConnect() [2/2]. int TUnixSystem::UnixUnixConnect ; (; int ; port). staticprotected . Connect to a Unix domain socket. ; Definition at line 4241 of file TUnixSystem.cxx. ◆ UnixUnixService() [1/2]. int TUnixSystem::UnixUnixService ; (; const char * ; sockpath, . int ; backlog . ). staticprotected . Open a socket on path 'sockpath', bind to it and start listening for Unix domain connections to it. ; Returns socket fd or -1. ; Definition at line 4458 of file TUnixSystem.cxx. ◆ UnixUnixService() [2/2]. int TUnixSystem::UnixUnixService ; (; int ; port, . int ; backlog . ). staticprotected . Open a socket, bind to it and start listening for Unix domain connections to it. ; Returns socket fd or -1. ; Definition at line 4432 of file TUnixSystem.cxx. ◆ UnixWaitchild(). int TUnixSystem::UnixWaitchild ; (; ). staticprotected . Wait till child is finished. ; Definition at line 4130 of file TUnixSystem.cxx. ◆ Unlink(). int ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:78995,error,error,78995,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,1,['error'],['error']
Availability,"or 1-D, 2-D and 3-D histograms.; During filling, some statistics parameters are incremented to compute; the mean value and Root Mean Square with the maximum precision.; In case of histograms of type TH1C, TH1S, TH2C, TH2S, TH3C, TH3S; a check is made that the bin contents do not exceed the maximum positive; capacity (127 or 32767). Histograms of all types may have positive; or/and negative bin contents.; Rebinning; At any time, an histogram can be rebinned via TH1::Rebin. This function; returns a new histogram with the rebinned contents.; If bin errors were stored, they are recomputed during the rebinning.; Associated errors; By default, for each bin, the sum of weights is computed at fill time.; One can also call TH1::Sumw2 to force the storage and computation; of the sum of the square of weights per bin.; If Sumw2 has been called, the error per bin is computed as the; sqrt(sum of squares of weights), otherwise the error is set equal; to the sqrt(bin content).; To return the error for a given bin number, do:. Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list; of functions (fFunctions) associated to each histogram.; When TH1::Fit is invoked, the fitted function is added to this list.; Given an histogram h, one can retrieve an associated function; with:. TF1 *myfunc = h->GetFunction(""myfunc"");. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of an histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current; histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply; an histogram by a function. If an histogram has associated error bars (TH1::Sumw2 has been called),; the resulting error bars are also computed assuming independent histograms.; In case of divisions, Binomial errors ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:10084,error,error,10084,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['error'],['error']
Availability,"or <= 0. ); 1588 minValError = valError;; 1589 ; 1590 if (!computeLossInTraining) {; 1591 trainingError = 0.0;; 1592 // Compute training error.; 1593 for (auto batch : trainingData) {; 1594 auto inputTensor = batch.GetInput();; 1595 auto outputMatrix = batch.GetOutput();; 1596 auto weights = batch.GetWeights();; 1597 trainingError += deepNet.Loss(inputTensor, outputMatrix, weights, false, false);; 1598 }; 1599 }; 1600 // normalize loss to number of batches and add regularization term; 1601 trainingError /= (Double_t)(nTrainingSamples / settings.batchSize);; 1602 trainingError += regTerm;; 1603 ; 1604 //Log the loss value; 1605 fTrainHistory.AddValue(""trainingError"",nTrainEpochs,trainingError);; 1606 ; 1607 // stop measuring; 1608 tend = std::chrono::system_clock::now();; 1609 ; 1610 // Compute numerical throughput.; 1611 std::chrono::duration<double> elapsed_seconds = tend - tstart;; 1612 std::chrono::duration<double> elapsed1 = t1-tstart;; 1613 // std::chrono::duration<double> elapsed2 = t2-tstart;; 1614 // time to compute training and test errors; 1615 std::chrono::duration<double> elapsed_testing = tend-t1;; 1616 ; 1617 double seconds = elapsed_seconds.count();; 1618 // double nGFlops = (double)(settings.testInterval * batchesInEpoch * settings.batchSize)*1.E-9;; 1619 // nGFlops *= deepnet.GetNFlops() * 1e-9;; 1620 double eventTime = elapsed1.count()/( batchesInEpoch * settings.testInterval * settings.batchSize);; 1621 ; 1622 converged =; 1623 convergenceCount > settings.convergenceSteps || nTrainEpochs >= settings.maxEpochs;; 1624 ; 1625 ; 1626 Log() << std::setw(10) << nTrainEpochs << "" | ""; 1627 << std::setw(12) << trainingError; 1628 << std::setw(12) << valError; 1629 << std::setw(12) << seconds / settings.testInterval; 1630 << std::setw(12) << elapsed_testing.count(); 1631 << std::setw(12) << 1. / eventTime; 1632 << std::setw(12) << convergenceCount; 1633 << Endl;; 1634 ; 1635 if (converged) {; 1636 Log() << Endl;; 1637 }; 1638 tstart = std::chrono::system_c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:64172,error,errors,64172,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['error'],['errors']
Availability,"or == 11) option1 = 1;; 6346 if (Hoption.Error == 12) option2 = 1;; 6347 if (Hoption.Error == 13) option3 = 1;; 6348 if (Hoption.Error == 14) {option4 = 1; option3 = 1;}; 6349 if (Hoption.Error == 15) {optionI0 = 1; option3 = 1;}; 6350 if (Hoption.Error == 16) {optionI0 = 1; option4 = 1; option3 = 1;}; 6351 if (option2+option3 == 0) optionE = 1;; 6352 if (Hoption.Error == 0) optionE = 0;; 6353 if (fXaxis->GetXbins()->fN) fixbin = 0;; 6354 else fixbin = 1;; 6355 ; 6356 offset = fH->GetBarOffset();; 6357 width = fH->GetBarWidth();; 6358 ; 6359 errormarker = TAttMarker::GetMarkerStyleBase(fH->GetMarkerStyle());; 6360 if (optionEX0) {; 6361 xerror = 0;; 6362 } else {; 6363 xerror = gStyle->GetErrorX();; 6364 }; 6365 symbolsize = fH->GetMarkerSize();; 6366 if (errormarker == 1) symbolsize = 0.01;; 6367 sbasex = sbasey = symbolsize*kBASEMARKER;; 6368 if (errormarker >= 20 && errormarker <= 49) {; 6369 sbasex *= cxx[errormarker-20];; 6370 sbasey *= cyy[errormarker-20];; 6371 }; 6372 // set the graphics attributes; 6373 ; 6374 fH->TAttLine::Modify();; 6375 fH->TAttFill::Modify();; 6376 fH->TAttMarker::Modify();; 6377 ; 6378 // set the first and last bin; 6379 ; 6380 Double_t factor = Hparam.factor;; 6381 first = Hparam.xfirst;; 6382 last = Hparam.xlast;; 6383 npoints = last - first +1;; 6384 xmin = gPad->GetUxmin();; 6385 xmax = gPad->GetUxmax();; 6386 ymin = gPad->GetUymin();; 6387 ymax = gPad->GetUymax();; 6388 ; 6389 ; 6390 if (option3) {; 6391 xline.resize(2*npoints);; 6392 yline.resize(2*npoints);; 6393 if ((npoints > 0) && (xline.empty() || yline.empty())) {; 6394 Error(""PaintErrors"", ""too many points, out of memory"");; 6395 return;; 6396 }; 6397 if1 = 1;; 6398 if2 = 2*npoints;; 6399 }; 6400 ; 6401 // compute the offset of the error bars due to the symbol size; 6402 s2x = gPad->PixeltoX(Int_t(0.5*sbasex)) - gPad->PixeltoX(0);; 6403 s2y =-gPad->PixeltoY(Int_t(0.5*sbasey)) + gPad->PixeltoY(0);; 6404 ; 6405 // compute size of the lines at the end of the error bars; 6406 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:234410,error,errormarker,234410,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,4,['error'],"['errormarker', 'errormarker-']"
Availability,"or Sub-editor for TGLClipSet.; TGLColor Color in preferred GL format - RGBA.; TGLColorSet Collection of colors used for GL rendering.; TGLContext Control internal gl-context resources.; TGLContextIdentity Identity of a shared GL context.; TGLCylinder a cylinderical logical shape; TGLEmbeddedViewer Embedded GL viewer.; TGLEventHandler Base-class and default implementation of event-handler for TGLViewer.; TGLFaceSet a faceset logical shape; TGLFaderHelper ; TGLFont A wrapper class for FTFont.; TGLFontManager A FreeType GL font manager.; TGLFormat Describes GL buffer format.; TGLHistPainter Proxy class for GL hist painters.; TGLIsoPainter Iso option for TH3.; TGLLegoPainter Lego painter; TGLLightSet A set of OpenGL lights.; TGLLightSetEditor Editor for TGLLightSet.; TGLLightSetSubEditor Sub-editor for TGLLightSet.; TGLLine3 GL line wrapper class; TGLLockable Lock for viewers and scenes.; TGLLogicalShape a logical (non-placed, local frame) drawable object; TGLManager Interface for OpenGL manager; TGLManip abstract base GL manipulator widget; TGLManipSet A collection of available manipulators.; TGLMatrix GL matrix helper/wrapper class; TGLObject Base-class for direct OpenGL renderers; TGLOrthoCamera Camera for orthographic view.; TGLOutput Wrapper class for GL capture & output routines; TGLOverlayButton GL-overlay button.; TGLOverlayElement Base class for GL overlay elements.; TGLOverlayList Collection of overlay elements to draw/select together.; TGLOvlSelectRecord Standard GL overlay-selection record.; TGLPShapeObj This object wraps TGLPhysicalShape (not a TObject); TGLPShapeObjEditor GUI for editing attributes of a physical-shape.; TGLPShapeRef Reference to a TGLPhysicalShape object.; TGLPadPainter ; TGLPaintDevice Base class for GL widgets and GL off-screen rendering; TGLParametricEquation Equation of parametric surface.; TGLParametricEquationGL GL renderer for TGLParametricEquation; TGLParametricPlot Parametric plot's painter.; TGLPerspectiveCamera Camera for perspec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:72391,avail,available,72391,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['avail'],['available']
Availability,"or TSpline3 knot ;  CTSplinePoly5Class for TSpline5 knot ;  CTSPlot;  CTSQLClassColumnInfo;  CTSQLClassInfoContains information about tables specific to one class and version ;  CTSQLColumnData;  CTSQLColumnInfo;  CTSQLFileAccess an SQL db via the TFile interface ;  CTSQLiteResult;  CTSQLiteRow;  CTSQLiteServer;  CTSQLiteStatement;  CTSQLMonitoringWriter;  CTSQLObjectDataTSQLObjectData is used in TBufferSQL2 class in reading procedure ;  CTSQLObjectDataPoolXML object keeper class ;  CTSQLObjectInfoInfo (classname, version) about object in database ;  CTSQLResult;  CTSQLRow;  CTSQLServer;  CTSQLStatement;  CTSQLStructureThis is hierarchical structure, which is created when data is written by TBufferSQL2 ;  CTSQLTableData;  CTSQLTableInfo;  CTSSLSocket;  CTStatisticStatistical variable, defined by its mean and variance (RMS) ;  CTStatsFeedbackUtility class to display PROOF stats feedback histos during queries ;  CTStatusThis class holds the status of an ongoing operation and collects error messages ;  CTStdExceptionHandler;  CTStopwatchStopwatch class ;  CTStorageStorage manager ;  CTStreamerArtificial;  CTStreamerBase;  CTStreamerBasicPointer;  CTStreamerBasicType;  CTStreamerElement;  ►CTStreamerInfoDescribe Streamer information for one class version ;  CTCompInfo;  CTPointerCollectionAdapter;  CTStreamerLoop;  CTStreamerObject;  CTStreamerObjectAny;  CTStreamerObjectAnyPointer;  CTStreamerObjectPointer;  CTStreamerSTL;  CTStreamerSTLstring;  CTStreamerString;  ►CTStringBasic string class ;  CLongStr_t;  CRawStr_t;  CRep_t;  CShortStr_t;  CUStr_t;  CTStringLongATTENTION: this class is obsolete ;  CTStringTokenProvides iteration through tokens of a given string ;  CTStructNode;  CTStructNodeEditor;  CTStructNodeProperty;  CTStructViewer;  CTStructViewerGUI;  CTStyleTStyle objects may be created to define special styles ;  CTStyleDialog;  CTStyleManager;  CTStylePreview;  CTSubStringA zero length substring is legal ;  CTSVDUnfoldSVD Approach to Data Unfolding ;  CTSVG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/annotated.html:206451,error,error,206451,doc/v612/annotated.html,https://root.cern,https://root.cern/doc/v612/annotated.html,3,['error'],['error']
Availability,"or a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t SysSeek(Int_t fd, Long64_t offset, Int_t whence); Interface to system seek. All arguments like in POSIX lseek. Int_t SysSync(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:23777,failure,failure,23777,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,1,['failure'],['failure']
Availability,"or access; histograms are identical in both cases.; Each histogram always contains 3 objects TAxis: fXaxis, fYaxis and fZaxis; To access the axis parameters, do:. TAxis *xaxis = h->GetXaxis(); etc.; Double_t binCenter = xaxis->GetBinCenter(bin), etc. See class TAxis for a description of all the access functions.; The axis range is always stored internally in double precision.; Convention for numbering bins; For all histogram types: nbins, xlow, xup. bin = 0; underflow bin; bin = 1; first bin with low-edge xlow INCLUDED; bin = nbins; last bin with upper-edge xup EXCLUDED; bin = nbins+1; overflow bin. In case of 2-D or 3-D histograms, a ""global bin"" number is defined.; For example, assuming a 3-D histogram with (binx, biny, binz), the function. Int_t gbin = h->GetBin(binx, biny, binz);. returns a global/linearized gbin number. This global gbin is useful; to access the bin content/error information independently of the dimension.; Note that to access the information other than bin content and errors; one should use the TAxis object directly with e.g.:. Double_t xcenter = h3->GetZaxis()->GetBinCenter(27);. returns the center along z of bin number 27 (not the global bin); in the 3-D histogram h3.; Alphanumeric Bin Labels; By default, an histogram axis is drawn with its numeric bin labels.; One can specify alphanumeric labels instead with:. call TAxis::SetBinLabel(bin, label);; This can always be done before or after filling.; When the histogram is drawn, bin labels will be automatically drawn.; See example in $ROOTSYS/tutorials/graphs/labels1.C, labels2.C; call to a Fill function with one of the arguments being a string, e.g. hist1->Fill(somename, weigth);; hist2->Fill(x, somename, weight);; hist2->Fill(somename, y, weight);; hist2->Fill(somenamex, somenamey, weight);. See example in $ROOTSYS/tutorials/hist/hlabels1.C, hlabels2.C; via TTree::Draw.; see for example $ROOTSYS/tutorials/tree/cernstaff.C. tree.Draw(""Nation::Division"");. where ""Nation"" and ""Division"" are two br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:4968,error,errors,4968,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['error'],['errors']
Availability,"or algorithms using derivatives. ;  ; virtual bool Solve (int maxIter=100, double absTol=1E-8, double relTol=1E-10)=0;  Stimates the root for the function. ;  ; virtual int Status () const =0;  Returns the status of the previous estimate. ;  . #include <Math/IRootFinderMethod.h>. Inheritance diagram for ROOT::Math::IRootFinderMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~IRootFinderMethod(). virtual ROOT::Math::IRootFinderMethod::~IRootFinderMethod ; (; ). inlinevirtual . Default Destructor. ; Definition at line 37 of file IRootFinderMethod.h. ◆ IRootFinderMethod(). ROOT::Math::IRootFinderMethod::IRootFinderMethod ; (; ). inline . Default Constructor. ; Definition at line 40 of file IRootFinderMethod.h. Member Function Documentation. ◆ Iterate(). virtual int ROOT::Math::IRootFinderMethod::Iterate ; (; ). inlinevirtual . This method is implemented only by the GSLRootFinder and GSLRootFinderDeriv classes and will return an error if it's not one of them. ; Reimplemented in ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 79 of file IRootFinderMethod.h. ◆ Iterations(). virtual int ROOT::Math::IRootFinderMethod::Iterations ; (; ); const. inlinevirtual . Return number of iterations used to find the root Must be implemented by derived classes. ; Reimplemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv.; Definition at line 87 of file IRootFinderMethod.h. ◆ Name(). virtual const char * ROOT::Math::IRootFinderMethod::Name ; (; ); const. pure virtual . Return name of root finder algorithm. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFinder, and ROOT::Math::GSLRootFinderDeriv. ◆ Root(). virtual double ROOT::Math::IRootFinderMethod::Root ; (; ); const. pure virtual . Returns the previously calculated root. ; Implemented in ROOT::Math::BrentRootFinder, ROOT::Math::GSLRootFind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html:2319,error,error,2319,doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IRootFinderMethod.html,1,['error'],['error']
Availability,"or all constructors. ; Definition at line 327 of file RooHist.cxx. ◆ IsA(). TClass * RooHist::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 105 of file RooHist.h. ◆ isIdentical(). bool RooHist::isIdentical ; (; const RooHist & ; other, . double ; tol = 1e-6, . bool ; verbose = true . ); const. Return true if contents of this RooHist is identical within given relative tolerance to that of 'other'. ; Definition at line 633 of file RooHist.cxx. ◆ makePullHist(). RooHist * RooHist::makePullHist ; (; const RooCurve & ; curve, . bool ; useAverage = false . ); const. inline . Definition at line 79 of file RooHist.h. ◆ makeResidHist(). RooHist * RooHist::makeResidHist ; (; const RooCurve & ; curve, . bool ; normalize = false, . bool ; useAverage = false . ); const. Create and return RooHist containing residuals w.r.t to given curve. ; If normalize is true, the residuals are normalized by the histogram errors creating a RooHist with pull values ; Definition at line 784 of file RooHist.cxx. ◆ Print(). void RooHist::Print ; (; Option_t * ; option = nullptr); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 64 of file RooHist.h. ◆ printClassName(). void RooHist::printClassName ; (; std::ostream & ; os); const. overridevirtual . Print class name of RooHist. ; Reimplemented from RooPrintable.; Definition at line 709 of file RooHist.cxx. ◆ printMultiline(). void RooHist::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Print info about this histogram to the specified output stream. ; Standard: number of entries Shape: error CL and maximum value Verbose: print our bin contents and errors ; Reimplemented from RooPrintable.; Definition at line 665 of file RooHist.cxx. ◆ printName(). void RooHist::printName ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:53745,error,errors,53745,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['errors']
Availability,"or any interval [a,b] we define g8(a,b) and g16(a,b) to be the 8-point; and 16-point Gaussian quadrature approximations to. and define. Then,. where, starting with x0 = A and finishing with xk = B,; the subdivision points xi(i=1,2,...) are given by. is equal to the first member of the; sequence 1,1/2,1/4,... for which r(xi-1, xi) < EPS.; If, at any stage in the process of subdivision, the ratio. is so small that 1+0.005q is indistinguishable from 1 to; machine accuracy, an error exit occurs with the function value; set equal to zero. Accuracy:; Unless there is severe cancellation of positive and negative values of; f(x) over the interval [A,B], the argument EPS may be considered as; specifying a bound on the <I>relative</I> error of I in the case; |I|&gt;1, and a bound on the absolute error in the case |I|&lt;1. More; precisely, if k is the number of sub-intervals contributing to the; approximation (see Method), and if. then the relation. will nearly always be true, provided the routine terminates without; printing an error message. For functions f having no singularities in; the closed interval [A,B] the accuracy will usually be much higher than; this. Error handling:; The requested accuracy cannot be obtained (see Method).; The function value is set equal to zero. Note 1:; Values of the function f(x) at the interval end-points A and B are not; required. The subprogram may therefore be used when these values are; undefined. Note 2:; Instead of TF1::Integral, you may want to use the combination of; TF1::CalcGaussLegendreSamplingPoints and TF1::IntegralFast.; See an example with the following script:. void gint() {; TF1 *g = new TF1(""g"",""gaus"",-5,5);; g->SetParameters(1,0,1);; //default gaus integration method uses 6 points; //not suitable to integrate on a large domain; double r1 = g->Integral(0,5);; double r2 = g->Integral(0,1000);. //try with user directives computing more points; Int_t np = 1000;; double *x=new double[np];; double *w=new double[np];; g->CalcGauss",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:50852,error,error,50852,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,4,['error'],['error']
Availability,"or bars.Definition TGraphBentErrors.h:25. TGraphMultiErrors; A TGraphMultiErrors works basically the same way like a TGraphAsymmErrors. It has the possibility to define more than one type / dimension of y-Errors. This is useful if you want to plot statistic and systematic errors at once.; To be able to define different drawing options for the multiple error dimensions the option string can consist of multiple blocks separated by semicolons. The painting method assigns these blocks to the error dimensions. The first block is always used for the general draw options and options concerning the x-Errors. In case there are less than NErrorDimensions + 1 blocks in the option string the first block is also used for the first error dimension which is reserved for statistical errors. The remaining blocks are assigned to the remaining dimensions.; In addition to the draw options of options of TGraphAsymmErrors the following are possible:. Option Block Description . ""X0"" First one only Do not draw errors for points with x = 0 . ""Y0"" First one only Do not draw errors for points with y = 0 . ""s=%f"" Any Scales the x-Errors with f similar to gStyle->SetErrorX(dx) but does not affect them directly (Useful when used in addition with box errors to make the box only half as wide as the x-Errors e.g. s=0.5) . ""S"" First one only Use individual TAttFill and TAttLine attributes for the different error dimensions instead of the global ones. . Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option ""S"" to the first block.; {; auto c47 = new TCanvas(""c47"",""c47"",200,10,600,400);; double ax[] = {0, 1, 2, 3, 4};; double ay[] = {0, 2, 4, 1, 3};; double aexl[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double aexh[] = {0.3, 0.3, 0.3, 0.3, 0.3};; double* aeylstat = new double[5] {1, 0.5, 1, 0.5, 1};; double* aeyhstat = new double[5] {0.5, 1, 0.5, 1, 0.5};; double* aeylsys = new double[5] {0.5, 0.4, 0.8, 0.3, 1.2};; double* aeyhsys =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:16601,error,errors,16601,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['errors']
Availability,"or byte values from tree branches; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgrThe cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue; RooArgSet*_curNormSet!; Double_t_cutOffCutoff parameter for running product; RooArgSet_defNormSetDefault normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Int_t_extendedIndexIndex of extended PDF (if any); Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAICRegistry_genCode! Registry of composite direct generator codes; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches; Bool_tRooAbsArg::_isConstant! Cached isConstant status; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:45192,error,errors,45192,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['error'],['errors']
Availability,"or delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopDummy(Int_t ipop = 9999); Bool_tPopPath(); Bool_tPopPath(Int_t index); Bool_tPopPoint(); Bool_tPopPoint(Int_t index); virtual voidTObject::Print(Option_t* option = """") const; Int_tPushPath(Int_t startlevel = 0); Int_tPushPoint(Int_t startlevel = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidResetAll(); voidTObject::ResetBit(UInt_t f); voidResetState(); Double_tSafety(Bool_t inside = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetCurrentDirection(const Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); voidSetCurrentPoint(const Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLastPoint(Double_t x, Double_t y, Double_t z); voidSetLastSafetyForPoint(Double_t safe, const Double_t* point); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutside(Bool_t flag = kTRUE); voidSetStartSafe(Bool_t flag = kTRUE); voidSetStep(Double_t step); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); TGeoNode*Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoNavigator.html:7577,down,downwards,7577,root/html530/TGeoNavigator.html,https://root.cern,https://root.cern/root/html530/TGeoNavigator.html,2,['down'],['downwards']
Availability,"or delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopDummy(Int_t ipop = 9999); Bool_tPopPath(); Bool_tPopPath(Int_t index); Bool_tPopPoint(); Bool_tPopPoint(Int_t index); virtual voidTObject::Print(Option_t* option = """") const; Int_tPushPath(Int_t startlevel = 0); Int_tPushPoint(Int_t startlevel = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidResetAll(); voidTObject::ResetBit(UInt_t f); voidResetState(); Double_tSafety(Bool_t inside = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); TGeoNode*SearchNode(Bool_t downwards = kFALSE, const TGeoNode* skipnode = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCheckingOverlaps(Bool_t flag = kTRUE); voidSetCldirChecked(Double_t* dir); voidSetCurrentDirection(const Double_t* dir); voidSetCurrentDirection(Double_t nx, Double_t ny, Double_t nz); voidSetCurrentPoint(const Double_t* point); voidSetCurrentPoint(Double_t x, Double_t y, Double_t z); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLastPoint(Double_t x, Double_t y, Double_t z); voidSetLastSafetyForPoint(Double_t safe, const Double_t* point); voidSetLastSafetyForPoint(Double_t safe, Double_t x, Double_t y, Double_t z); static voidTObject::SetObjectStat(Bool_t stat); voidSetOutside(Bool_t flag = kTRUE); voidSetStartSafe(Bool_t flag = kTRUE); voidSetStep(Double_t step); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); TGeoNode*Step(Bool_t is_geom = kTRUE, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNavigator.html:7660,down,downwards,7660,root/html534/TGeoNavigator.html,https://root.cern,https://root.cern/root/html534/TGeoNavigator.html,1,['down'],['downwards']
Availability,"or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8611,error,errors,8611,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,3,['error'],['errors']
Availability,"or details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:45545,error,error,45545,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"or details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:45146,error,error,45146,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"or dimension. ; Definition at line 1632 of file TGraphMultiErrors.cxx. ◆ GetErrorX(). Double_t TGraphMultiErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . Get error on x coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1439 of file TGraphMultiErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphMultiErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1492 of file TGraphMultiErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:62712,error,errors,62712,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"or distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 5. Fitting. Distributions; Some analyses want to check theory predictions that exist as a function definition. Others want to use a distribution from a histogram in another step of the analysis. But histograms have bin steps by nature instead of being smooth, and they have bumps / fluctuations due to limited statistics (i.e. ""not enough data"").; So what's needed is a function whose line is ""as close as possible"" to the histogram counts. I.e. we need a function (that predicts the shape of the histogram) and that we can vary a bit (""free parameters""). Then we search for the best set of parameters, such that the function resembles the histogram.; That's fitting.; Fitting in Practice; As often with ROOT, you can use a GUI element (the fit panel, available through the menu in ""Tools"", ""Fit Panel"", or on the prompt (TH1::Fit()). Let's use the fit panel!; First, we draw the distribution of the vertex position along X for all muons. Do that into a histogram that has 20 bins and runs from -10 to +10. Now open the fit panel and click the histogram. We want to fit a Gaussian distribution - and hat's already selected by default. Se just press ""Fit"". Looks good, right?; Fit Parameters; As mentioned before, fitting means finding the optimal set of parameters. In the menu, select ""Options"", ""Fit Parameters"" (and resize the statistics box to make its content readable). You will see the values that the minimizer has found optimal, for instance it chose 1.2 as the mean of the Gaussian and 1.041 as the width.; These values are the crucial ones for physicists: they reduce the large amount of data into just a few parameters, describing the distribution even better than the original histogram. Fitting (or ""parametrization"") is thus a cornersto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/5-fitting.html:2624,avail,available,2624,d/5-fitting.html,https://root.cern,https://root.cern/d/5-fitting.html,1,['avail'],['available']
Availability,"or example, the following will hide the declaration and initialization of the array gArray from both Cling and rootcling.; #if !defined(__CLING__); int gArray[] = { 2, 3, 4};; #endif; Because ACLiC calls rootcling to build a dictionary, the declaration of gArray will not be included in the dictionary, and consequently, gArray will not be available at the command line even if ACLiC is used. Cling and rootcling will ignore all statements between the ""#if !defined (__CLING__)"" and ""#endif"". If you want to use gArray in the same script as its declaration, you can do so. However, if you want use the script in the interpreter you have to bracket the usage of gArray between #if's, since the definition is not visible. If you add the following preprocessor statements:; #if !defined(__CLING__); int gArray[] = { 2, 3, 4};; #elif defined(__ROOTCLING__); int gArray[];; #endif; gArray will be visible to rootcling but still not visible to Cling. If you use ACLiC, gArray will be available at the command line and be initialized properly by the compiled code.; We recommend you always write scripts with the needed include statements. In most cases, the script will still run with the interpreter. However, a few header files are not handled very well by Cling.; These types of headers can be included in interpreted and compiled mode:. The subset of standard C/C++ headers defined in $ROOTSYS/Cling/include.; Headers of classes defined in a previously loaded library (including ROOT own). The defined class must have a name known to ROOT (i.e. a class with a ClassDef). Hiding header files from rootcling that are necessary for the compiler but optional for the interpreter can lead to a subtle but fatal error. For example:; #ifndef __CLING__; #include ""TTree.h""; #else; class TTree;; #endif. class subTree : public TTree {; };; In this case, rootcling does not have enough information about the TTree class to produce the correct dictionary file. If you try this, rootcling and compiling will be erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:277872,avail,available,277872,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"or extended scene context ;  CTGLScenePadImplements VirtualViewer3D interface and fills the base-class visualization structures from pad contents ;  CTGLSelectBufferEncapsulates OpenGL select buffer ;  CTGLSelectionBuffer;  CTGLSelectRecordStandard selection record including information about containing scene and details ob out selected object (TGLPhysicalShape*, TObject* or simply a void* for foreign scenes) ;  CTGLSelectRecordBase;  CTGLSphereImplements a native ROOT-GL sphere that can be rendered at different levels of detail ;  CTGLStopwatchStopwatch object for timing GL work ;  ►CTGLSurfacePainterImplements painting of TH2 with ""SURF"" option ;  CProjection_t;  CTGLTextGL Text ;  CTGLTF3PainterPlot-painter for TF3 functions ;  CTGLTH3Composition;  CTGLTH3CompositionPainter;  CTGLTH3SliceA slice of a TH3 ;  CTGLTransManipTranslation manipulator - attaches to physical shape and draws local axes widgets with arrow heads ;  ►CTGLUtilWrapper class for various misc static functions - error checking, draw helpers etc ;  CTColorLocker;  CTDrawQualityModifier;  CTDrawQualityScaler;  CTGLVContainer;  CTGLVector33 component (x/y/z) vector class ;  CTGLVEntry;  CTGLVertex33 component (x/y/z) vertex class ;  CTGLViewerBase GL viewer object - used by both standalone and embedded (in pad) GL ;  CTGLViewerBaseBase class for GL viewers ;  CTGLViewerEditorGUI editor for TGLViewer ;  CTGLVoxelPainter;  CTGLWidgetGL window with context ;  ►CTGMainFrame;  CTGMapKey;  CTGMatrixLayout;  CTGMdiButtons;  CTGMdiContainer;  CTGMdiCornerWinResizer;  CTGMdiDecorFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:129420,error,error,129420,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['error'],['error']
Availability,"or from a TMultiGraph. Pass also the TF1 function which is; 826 // needed in case to exclude points rejected by the function; 827 assert(mg != nullptr);; 828 ; 829 TList * grList = mg->GetListOfGraphs();; 830 assert(grList != nullptr);; 831 ; 832#ifdef DEBUG; 833// grList->Print();; 834 TIter itr(grList, kIterBackward);; 835 TObject *obj;; 836 std::cout << ""multi-graph list of graps: "" << std::endl;; 837 while ((obj = itr())) {; 838 std::cout << obj->IsA()->GetName() << std::endl;; 839 }; 840 ; 841#endif; 842 ; 843 // get fit option; 844 DataOptions & fitOpt = dv.Opt();; 845 ; 846 // loop on the graphs to get the data type (use maximum); 847 TIter next(grList);; 848 ; 849 BinData::ErrorType type = BinData::kNoError;; 850 TGraph *gr = nullptr;; 851 while ((gr = (TGraph*) next())) {; 852 BinData::ErrorType t = GetDataType(gr,fitOpt);; 853 if (t > type ) type = t;; 854 }; 855 // adjust option according to type; 856 fitOpt.fErrors1 = (type == BinData::kNoError);; 857 // use coordinate or asym errors in case option is set and type is consistent; 858 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError);; 859 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 860 ; 861 ; 862#ifdef DEBUG; 863 std::cout << ""Fitting MultiGraph of type "" << type << std::endl;; 864#endif; 865 ; 866 // fill the data now; 867 next = grList;; 868 while ((gr = (TGraph*) next())) {; 869 DoFillData( dv, gr, type, func);; 870 }; 871 ; 872#ifdef DEBUG; 873 std::cout << ""TGraphFitInterface::FillData MultiGraph FitData size is "" << dv.Size() << std::endl;; 874#endif; 875 ; 876}; 877 ; 878void FillData ( BinData & dv, const TGraph2D * gr, TF1 * func ) {; 879 // fill the data vector from a TGraph2D. Pass also the TF1 function which is; 880 // needed in case to exclude points rejected by the function; 881 // in case of a pure TGraph; 882 assert(gr != nullptr);; 883 ; 884 // get fit option; 885 DataOptions & fitOpt = dv.Opt();; 886 BinData::ErrorType type = GetDataType(gr,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:27916,error,errors,27916,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['errors']
Availability,"or global function; TStringfOriginorigin of plugin handler definition; TStringfPluginplugin library which should contain fClass; TStringfRegexpregular expression which must be matched in URI. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. ~TPluginHandler(); Cleanup plugin handler object. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Bool_t CheckForExecPlugin(Int_t nargs); Check that we can properly run ExecPlugin. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:27; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPluginHandler.html:10705,error,error,10705,root/html604/TPluginHandler.html,https://root.cern,https://root.cern/root/html604/TPluginHandler.html,1,['error'],['error']
Availability,"or global function; TStringfOriginorigin of plugin handler definition; TStringfPluginplugin library which should contain fClass; TStringfRegexpregular expression which must be matched in URI. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. ~TPluginHandler(); Cleanup plugin handler object. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Bool_t CheckForExecPlugin(Int_t nargs); Check that we can properly run ExecPlugin. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:25; This page has been automatically generated. For c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPluginHandler.html:10705,error,error,10705,root/html602/TPluginHandler.html,https://root.cern,https://root.cern/root/html602/TPluginHandler.html,1,['error'],['error']
Availability,"or in gray scale mode. . gStyle->SetErrorX(dx) controls the size of the error along x. dx = 0 removes the error along x.; gStyle->SetEndErrorSize(np) controls the size of the lines at the end of the error bars (when option 1 is used). By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are defined along X and Y and are symmetric: The left and right errors are the same along X and the bottom and up errors are the same along Y.; {; auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""A graph with errors"");; ge->Draw(""ap"");; }; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17. The option ""0"" shows the error bars for data points outside range.; {; auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; auto tg = new TGraphErrors(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; }; gPad#define gPadDefinition TVirtualPad.h:308. The option ""3"" shows the errors as a band.; {; auto c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; auto ge = new TGraphErrors(5, x, y, ex, ey);; ge->SetTitle(""Errors as a band"");; ge->SetFillColor(4);; ge->SetFillStyle(3010);; ge->Draw(""a3"");; }. The option ""4"" is similar to the option ""3"" except that the band is smoothed. As the following picture shows, this option should be used carefully because the smoothing algorithm may show some (huge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:10756,error,error,10756,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"or in the files specified in there. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Double_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Int_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Long64_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Long_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, TString &value);  Get the value from the specified parameter from the specified collection. ;  ; static void LogViewer (const char *url=0, Int_t sessionidx=0);  Start the log viewer window usign the plugin manager. ;  ; static TProofMgr * Mgr (const char *url);  Get instance of the effective manager for 'url' Return 0 on failure. ;  ; static TProof * Open (const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0);  Start a PROOF session on a specific cluster. ;  ; static void Reset (const char *url, Bool_t hard=kFALSE);  Wrapper around TProofMgr::Reset(...). ;  ; static void ResetEnvVars ();  Clear the list of environment variables passed to proofserv on the master and slaves. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:34068,failure,failure,34068,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,4,['failure'],['failure']
Availability,or log follows.; Parameter values: a0=0.516095 a1=-0.955515 mean=5.14443 nbkg=157.502 nsig=97.2821 sig1frac=0.174928; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.510348 a1=-0.776595 mean=5.09286 nbkg=154.805 nsig=114.979 sig1frac=0.0496841; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-796.54) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.702991 a1=-0.414346 mean=5.11911 nbkg=145.466 nsig=141.134 sig1frac=0.532895; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 100; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-920.777) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726241 a1=-0.424659 mean=5.05565 nbkg=151.228 nsig=170.816 sig1frac=0.771802; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.942558 a1=-0.775768 mean=4.99866 nbkg=187.872 nsig=63.0852 sig1frac=0.868175; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-743.339) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.984478 a1=-0.59938 mean=4.99914 nbkg=173.959 nsig=90.3182 sig1frac=0.461117; RooAddPdf::model[ ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:26738,error,errors,26738,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,or log follows.; Parameter values: a0=0.653979 a1=-0.469539 mean=5.00078 nbkg=160.963 nsig=166.526 sig1frac=0.628924; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 420; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-768.847) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.749295 a1=-0.303934 mean=4.98272 nbkg=121.461 nsig=145.338 sig1frac=0.822833; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-798.509) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.791035 a1=-0.287544 mean=4.98693 nbkg=127.577 nsig=149.203 sig1frac=0.914567; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 410; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 400; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 390; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-977.775) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.565967 a1=-0.529635 mean=5.0065 nbkg=153.38 nsig=185.083 sig1frac=0.751239; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 380; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 370; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-945.036) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.824344 a1=-0.338546 mean=5.06339 nbkg=161.705 nsig=169.087 sig1frac=0.910016; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 360; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 35,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:19894,error,errors,19894,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,"or more details. Making a Profile histogram. In case of a 2-Dim expression, one can generate a TProfile histogram; instead of a TH2F histogram by specifying option=prof or option=profs.; The option=prof is automatically selected in case of y:x>>pf; where pf is an existing TProfile histogram. Making a 2D Profile histogram. In case of a 3-Dim expression, one can generate a TProfile2D histogram; instead of a TH3F histogram by specifying option=prof or option=profs.; The option=prof is automatically selected in case of z:y:x>>pf; where pf is an existing TProfile2D histogram. Making a 5-D plot with GL. When the option ""gl5d"" is specified and the dimension of the query is 5; a 5-d plot is created using GL, eg; T->Draw(""x:y:z:u:w"","""",""gl5d""). Making a parallel coordinates plot. In case of a 2-Dim or more expression with the option=para, one can generate; a parallel coordinates plot. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Making a candle sticks chart. In case of a 2-Dim or more expression with the option=candle, one can generate; a candle sticks chart. With that option, the number of dimensions is; arbitrary. Giving more than 4 variables without the option=para or; option=candle or option=goff will produce an error. Normalizing the ouput histogram to 1. When option contains ""norm"" the output histogram is normalized to 1. Saving the result of Draw to a TEventList or a TEntryList. TTree::Draw can be used to fill a TEventList object (list of entry numbers); instead of histogramming one variable.; If varexp0 has the form >>elist , a TEventList object named ""elist""; is created in the current directory. elist will contain the list; of entry numbers satisfying the current selection.; If option ""entrylist"" is used, a TEntryList object is created; Example:; tree.Draw("">>yplus"",""y>0""); will create a TEventList object named ""yplus"" in the current directory.; I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreePlayer.html:33460,error,error,33460,root/html528/TTreePlayer.html,https://root.cern,https://root.cern/root/html528/TTreePlayer.html,1,['error'],['error']
Availability,"or nTest_<class>; 1120 if(eventCounts[cls].TrainTestSplitRequested < 1.0 && eventCounts[cls].TrainTestSplitRequested > 0.0){; 1121 eventCounts[cls].nTrainingEventsRequested = Int_t(eventCounts[cls].TrainTestSplitRequested*(availableTraining+availableTesting+availableUndefined));; 1122 eventCounts[cls].nTestingEventsRequested = Int_t(0);; 1123 }; 1124 else if(eventCounts[cls].TrainTestSplitRequested != 0.0) Log() << kFATAL << Form(""The option TrainTestSplit_<class> has to be in range (0, 1] but is set to %f."",eventCounts[cls].TrainTestSplitRequested) << Endl;; 1125 Int_t requestedTraining = Int_t(eventCounts[cls].nTrainingEventsRequested * presel_scale);; 1126 Int_t requestedTesting = Int_t(eventCounts[cls].nTestingEventsRequested * presel_scale);; 1127 ; 1128 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""events in training trees : "" << availableTraining << Endl;; 1129 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""events in testing trees : "" << availableTesting << Endl;; 1130 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""events in unspecified trees : "" << availableUndefined << Endl;; 1131 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""requested for training : "" << requestedTraining << Endl;; 1132 ; 1133 if(presel_scale<1); 1134 Log() << "" ( "" << eventCounts[cls].nTrainingEventsRequested; 1135 << "" * "" << presel_scale << "" preselection efficiency)"" << Endl;; 1136 else; 1137 Log() << Endl;; 1138 Log() << kDEBUG << ""requested for testing : "" << requestedTesting;; 1139 if(presel_scale<1); 1140 Log() << "" ( "" << eventCounts[cls].nTestingEventsRequested; 1141 << "" * "" << presel_scale << "" preselection efficiency)"" << Endl;; 1142 else; 1143 Log() << Endl;; 1144 ; 1145 // nomenclature r = available training; 1146 // s = available testing; 1147 // u = available undefined; 1148 // R = requested training; 1149 // S = requested testing; 1150 // nR = to be used to select training events; 1151 // nS = to be used to select test eve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:49703,avail,availableTesting,49703,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['avail'],['availableTesting']
Availability,"or of TH1 editor. void ConnectSignals2Slots(); Connect signals to slots. Bool_t AcceptModel(TObject* model); Check if object is able to configure with this editor. void SetModel(TObject* obj); Pick up current values of histogram attributes. void DoTitle(const char* text); Slot connected to the histogram title setting. void DoAddMarker(Bool_t on); Slot connected to the show markers check box. void DoAddB(Bool_t ); Slot connected to the bar Add check box. void DoAddBar(Bool_t ); Slot connected to the bar Add check box. void DoAddSimple(Bool_t on); Slot connected to fAddSimple check box for drawing a simple histogram; without errors (== HIST draw option) in combination with some other; draw options. It draws an additional line on the top of the bins. void DoHistView(); Slot connected to the 'Plot' button group. void DoHistSimple(); Slot connected to the 2D radio button. void DoHistComplex(); Slot connected to the 3D radio button. void DoHistChanges(); Slot connected to the histogram type, the coordinate type, the error type; and the Add combo box. void DoBarWidth(); Slot connected to the Bar Width of the Bar Charts. void DoBarOffset(); Slot connected to the Bar Offset of the Bar Charts. void DoPercent(); Slot connected to the bar percentage settings. void DoHBar(Bool_t on); Slot connected to the Horizontal Bar check button. void DoSliderMoved(); Slot connected to the x-Slider for redrawing of the histogram; according to the new Slider range. void DoSliderPressed(); Slot connected to the x-axis Range slider for initialising the; values of the slider movement. void DoSliderReleased(); Slot connected to the x-axis Range slider for finalizing the; values of the slider movement. void DoAxisRange(); Slot connected to the number entry fields containing the Max/Min; value of the x-axis. void DoBinReleased(); Slot connected to the rebin slider in case of a not ntuple histogram; Updates some other widgets which are related to the rebin slider. void DoBinMoved(Int_t number); Slot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1Editor.html:29123,error,error,29123,root/html528/TH1Editor.html,https://root.cern,https://root.cern/root/html528/TH1Editor.html,6,['error'],['error']
Availability,"or parameter ipar.Definition TF1.cxx:3507; TF1::RejectedPointstatic Bool_t RejectedPoint()See TF1::RejectPoint above.Definition TF1.cxx:3692; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetParametervirtual void SetParameter(Int_t param, Double_t value)Definition TF1.h:667; TF1::IsInsidevirtual Bool_t IsInside(const Double_t *x) constreturn kTRUE if the point is inside the function rangeDefinition TF1.h:626; TF1::GetNdimvirtual Int_t GetNdim() constDefinition TF1.h:513; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:671; TGraphErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::IsATClass * IsA() const overrideDefinition TGraphErrors.h:78; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:39682,error,error,39682,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['error'],['error']
Availability,"or point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073; TGraphMultiErrors::SetPointEXlowvirtual void SetPointEXlow(Int_t i, Double_t exL)Set exL value for point i.Definition TGraphMultiErrors.cxx:1853; TGraphMultiErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Int_t ne, const Double_t *eyH)Set eyH values for point i.Definition TGraphMultiErrors.cxx:1907; TGraphMultiErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute Range.Definition TGraphMultiErrors.cxx:1379; TGraphMultiErrors::fNYErrorsInt_t fNYErrorsThe amount of different y-errors.Definition TGraphMultiErrors.h:32; TGraphMultiErrors::fEyLstd::vector< TArrayD > fEyLTwo dimensional array of Y low errors.Definition TGraphMultiErrors.h:37; TGraphMultiErrors::GetErrorYDouble_t GetErrorY(Int_t i) const overrideGet error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1454; TGraphMultiErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphMultiErrors.cxx:933; TGraphMultiErrors::DoMergeBool_t DoMerge(const TGraph *tg) overrideProtected function to perform the merge operation of a graph with multiple asymmetric errors.Definition TGraphMultiErrors.cxx:838; TGraphMultiErrors::Classstatic TClass * Class(); TGraphMultiErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t i) const overrideGet high error on y coordinate for point i.Definition TGraphMultiErrors.cxx:1530; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::fNpointsInt_t fNpointsNumber of points <= fMaxSize.Definition TGraph.h:46; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::fMaxSizeInt_t fMa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:87347,error,error,87347,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"or scanf. If columns of numbers should be skipped,; a ""%*lg"" for each column can be added, e.g. ""%lg %*lg %lg"" would read x-values from; the first and y-values from the third column. ~TGraph(); Graph default destructor. Double_t** AllocateArrays(Int_t Narrays, Int_t arraySize); Allocate arrays. void Apply(TF1* f); Apply function f to all the data points; f may be a 1-D function TF1 or 2-d function TF2; The Y values of the graph are replaced by the new values computed; using the function. void Browse(TBrowser* b); Browse. Double_t Chisquare(const TF1* f1) const; Return the chisquare of this graph with respect to f1.; The chisquare is computed as the sum of the quantity below at each point:. where x and y are the graph point coordinates and f1'(x) is the derivative of function f1(x).; This method to approximate the uncertainty in y because of the errors in x, is called; ""effective variance"" method.; In case of a pure TGraph, the denominator is 1.; In case of a TGraphErrors or TGraphAsymmErrors the errors are taken; into account. Bool_t CompareArg(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s argument (angle with respect to positive; x-axis) is bigger than that of point number ""right"". Can be used by Sort. Bool_t CompareX(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fX[left] > fX[right]. Can be used by Sort. Bool_t CompareY(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if fY[left] > fY[right]. Can be used by Sort. Bool_t CompareRadius(const TGraph* gr, Int_t left, Int_t right); Return kTRUE if point number ""left""'s distance to origin is bigger than; that of point number ""right"". Can be used by Sort. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute the x/y range of the points in this graph. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy points from fX and fY to arrays[0] and arrays[1]; or to fX and fY if arrays == 0 and i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:16186,error,errors,16186,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,2,['error'],['errors']
Availability,"or soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general ar NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (0); GetEmatrix() (0)+(d)+(e); GetEmatrixTotal() (0)+(a)+(b)+(c)+(d)+(e). Example:. TH2D *histA,*histAsys1,*histAsys2,*histBgr1,*histBgr2;; TH1D *data;; assume the above histograms are filled:; histA: migration matrix from generator (x-axis) to detector (y-axis); the errors",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:1769,error,error,1769,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['error'],['error']
Availability,"or suppression of signals; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Cursor_tfgDefaultCursorDefault Cursor; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDragWindow(const TGWindow* p, Pixmap_t pic, Pixmap_t mask, UInt_t options = kChildFrame, Pixel_t back = GetWhitePixel()); TGDragWindow constructor. ~TGDragWindow(); TGDragWindow destructor. void MapWindow(); Map TGDragWindow. void UnmapWindow(); Unmap TGDragWindow. void RaiseWindow(); Raise TGDragWindow. void LowerWindow(); Lower TGDragWindow. void MapRaised(); Map and Raise TGDragWindow. void Layout(); Layout TGDragWindow. void DoRedraw(); Redraw TGDragWindow. TGDimension GetDefaultSize() const; { return TGDimension(fPw, fPh); }. Window_t GetInputId() const; { return fInput; }. Bool_t HasWindow(Window_t w) const; { return (w == fId || w == fInput); }. » Author: Bertrand Bellenot 19/04/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGDragWindow.html:17083,mask,mask,17083,root/html534/TGDragWindow.html,https://root.cern,https://root.cern/root/html534/TGDragWindow.html,1,['mask'],['mask']
Availability,"or the Minimum covariance Determinant Estimator"" Technometrics, August 1999, Vol.41, NO.3; What are robust estimators? ""An important property of an estimator is its robustness. An estimator; is called robust if it is insensitive to measurements that deviate; from the expected behaviour. There are 2 ways to treat such deviating; measurements: one may either try to recognise them and then remove; them from the data sample; or one may leave them in the sample, taking; care that they do not influence the estimate unduly. In both cases robust; estimators are needed...Robust procedures compensate for systematic errors; as much as possible, and indicate any situation in which a danger of not being; able to operate reliably is detected."" R.Fruhwirth, M.Regler, R.K.Bock, H.Grote, D.Notz ""Data Analysis Techniques for High-Energy Physics"", 2nd edition; What does this algorithm do? It computes a highly robust estimator of multivariate location and scatter. Then, it takes those estimates to compute robust distances of all the data vectors. Those with large robust distances are considered outliers. Robust distances can then be plotted for better visualization of the data.; How does this algorithm do it? The MCD objective is to find h observations(out of n) whose classical covariance matrix has the lowest determinant. The MCD estimator of location is then the average of those h points and the MCD estimate of scatter is their covariance matrix. The minimum(and default) h = (n+nvariables+1)/2 so the algorithm is effective when less than (n+nvar+1)/2 variables are outliers. The algorithm also allows for exact fit situations - that is, when h or more observations lie on a hyperplane. Then the algorithm still yields the MCD location T and scatter matrix S, the latter being singular as it should be. From (T,S) the program then computes the equation of the hyperplane.; How can this algorithm be used? In any case, when contamination of data is suspected, that might influence the classical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:1586,robust,robust,1586,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['robust'],['robust']
Availability,"or the bin enclosing the coordinates; contained in 'bin' is returned. For higher values,; the result is interpolated in the real dimensions; of the dataset. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t weight = 1.); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar = 0, Double_t weight = 1.); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:31356,error,errors,31356,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,2,['error'],['errors']
Availability,"or the bin enclosing the coordinates; contained in 'bin' is returned. For higher values,; the result is interpolated in the real dimensions; of the dataset. void weightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar = 0, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataHist.html:28603,error,errors,28603,root/html528/RooDataHist.html,https://root.cern,https://root.cern/root/html528/RooDataHist.html,4,['error'],['errors']
Availability,"or the overflow bins (; 863 // fSumw2.fArray[kNOverflow:fNcells] : sum of weight squares for the standard bins; 864 // fNcells = kNOverflow (9) + Number of bins; 865 if (fSumw2.fN) {; 866 Int_t binIndex = (bin > 0) ? bin+kNOverflow-1 : -(bin+1);; 867 Double_t err2 = fSumw2.fArray[binIndex];; 868 return TMath::Sqrt(err2);; 869 }; 870 Double_t error2 = TMath::Abs(GetBinContent(bin));; 871 return TMath::Sqrt(error2);; 872}; 873 ; 874////////////////////////////////////////////////////////////////////////////////; 875/// Return the number of bins :; 876/// it should be the size of the bin list; 877Int_t TH2Poly::GetNumberOfBins() const {; 878 Int_t nbins = fNcells-kNOverflow;; 879 if (nbins != (fBins ? fBins->GetSize() : 0)); 880 Fatal(""GetNumberOfBins"",""Object has an invalid number of bins"");; 881 return nbins;; 882}; 883 ; 884////////////////////////////////////////////////////////////////////////////////; 885/// Set the bin Error.; 886/// Re-implementation for TH2Poly given the different bin indexing in the; 887/// stored squared error array.; 888/// See also notes in TH1::SetBinError; 889///; 890/// Bins are in range [1:nbins] and for bin < 0 in the range [-9:-1] the errors is set for the overflow bins; 891 ; 892 ; 893void TH2Poly::SetBinError(Int_t bin, Double_t error); 894{; 895 if (bin == 0 || bin > GetNumberOfBins() || bin < - kNOverflow) return;; 896 if (!fSumw2.fN) Sumw2();; 897 SetBinErrorOption(kNormal);; 898 // see comment in GetBinError for special convention of bin index in fSumw2 array; 899 Int_t binIndex = (bin > 0) ? bin+kNOverflow-1 : -(bin+1);; 900 fSumw2.fArray[binIndex] = error * error;; 901}; 902 ; 903 ; 904 ; 905////////////////////////////////////////////////////////////////////////////////; 906/// Returns the bin name.; 907 ; 908const char *TH2Poly::GetBinName(Int_t bin) const; 909{; 910 if (bin > GetNumberOfBins()) return """";; 911 if (bin <= 0) return """";; 912 return ((TH2PolyBin*) fBins->At(bin-1))->GetPolygon()->GetName();; 913}; 914 ; 915//",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:31767,error,error,31767,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['error']
Availability,"or this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IntervalCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::IntervalCalculator&operator=(const RooStats::IntervalCalculator&); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData&); virtual voidSetModel(const RooStats::ModelConfig&); virtual voidSetTestSize(Double_t size); virtual voidShowMembers(TMemberInspector&); virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~IntervalCalculator(); {}. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. Double_t Size() const; Get the size of the test (eg. rate of Type I error). Double_t ConfidenceLevel() const; Get the Confidence level for the test. void SetData(RooAbsData& ); Set the DataSet ( add to the the workspace if not already there ?). void SetModel(const RooStats::ModelConfig& ); Set the Model. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( e.g. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (e.g. 0.95 for a 95% Confidence Interval). » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__IntervalCalculator.html:2441,error,error,2441,root/html534/RooStats__IntervalCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__IntervalCalculator.html,2,['error'],['error']
Availability,"or time, date and timestamps.; Therefore, one should use correct methods to access such data.; For instance, in MySQL SQL type 'DATE' is only date (one should use GetDate() to; access such data), while in Oracle it is date and time. Therefore,; to get complete data from 'DATE' column in Oracle, one should use GetDatime() method. The only difference of timestamp from date/time, that it has fractional; seconds part. Be aware, that fractional part can has different meaning; (actual value) in different SQL plugins. 5. Binary data. Most of modern data bases support just binary data, which is; typically has SQL type name 'BLOB'. To access data in such; columns, GetBinary()/SetBinary() methods should be used.; Current implementation supposed, that complete content of the; column must be retrieved at once. Therefore very big data of; gigabytes size may cause a problem. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSQLStatement(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableErrorOutput(Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLStatement.html:8805,avail,available,8805,root/html528/TSQLStatement.html,https://root.cern,https://root.cern/root/html528/TSQLStatement.html,3,['avail'],['available']
Availability,"or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1615 of file RDataFrame.cxx. ◆ RDataFrame() [3/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treename, . std::initializer_list< std::string > ; filenames, . const ColumnNames_t & ; defaultColumns = {} . ). inline . Definition at line 47 of file RDataFrame.hxx. ◆ RDataFrame() [4/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treeName, . ::TDirectory * ; dirPtr, . const ColumnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1630 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1643 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:108697,avail,available,108697,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['avail'],['available']
Availability,"or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1792 of file RDataFrame.cxx. ◆ RDataFrame() [3/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treename, . std::initializer_list< std::string > ; filenames, . const ColumnNames_t & ; defaultColumns = {} . ). inline . Definition at line 47 of file RDataFrame.hxx. ◆ RDataFrame() [4/10]. ROOT::RDataFrame::RDataFrame ; (; std::string_view ; treeName, . ::TDirectory * ; dirPtr, . const ColumnNames_t & ; defaultColumns = {} . ). ◆ RDataFrame() [5/10]. ROOT::RDataFrame::RDataFrame ; (; TTree & ; tree, . const ColumnNames_t & ; defaultColumns = {} . ). Build the dataframe. ; Parameters. [in]treeThe tree or chain to be studied. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. The default columns are looked at in case no column is specified in the booking of actions or transformations. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1807 of file RDataFrame.cxx. ◆ RDataFrame() [6/10]. ROOT::RDataFrame::RDataFrame ; (; ULong64_t ; numEntries). Build a dataframe that generates numEntries entries. ; Parameters. [in]numEntriesThe number of entries to generate. An empty-source dataframe constructed with a number of entries will generate those entries on the fly when some action is triggered, and it will do so for all the previously-defined columns. See alsoROOT::RDF::RInterface for the documentation of the methods available. ; Definition at line 1820 of file RDataFrame.cxx. ◆ RDataFrame() [7/10]. ROOT::RDataFrame::RDataFrame ; (; std::unique_ptr< ROOT::RDF::RDataSource > ; ds, . const ColumnNames_t & ; defaultColumns = {} . ). Build dataframe associated to data source. ; Parameters. [in]dsThe data source object. ; [in]defaultColumnsCollection of default column names to fall back to when none is specified. A dataframe associated to a data source will query it t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:116064,avail,available,116064,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['avail'],['available']
Availability,"or transparency instead. pattern_number can have any value from 1 to 25 (see table), or any; value from 100 to 999. For the latest the numbering convention is the following:. pattern_number = ijk (FillStyle = 3ijk); i (1-9) : specify the space between each hatch; 1 = 1/2mm 9 = 6mm; j (0-9) : specify angle between 0 and 90 degrees; 0 = 0; 1 = 10; 2 = 20; 3 = 30; 4 = 45; 5 = Not drawn; 6 = 60; 7 = 70; 8 = 80; 9 = 90; k (0-9) : specify angle between 90 and 180 degrees; 0 = 180; 1 = 170; 2 = 160; 3 = 150; 4 = 135; 5 = Not drawn; 6 = 120; 7 = 110; 8 = 100; 9 = 90. The following table shows the list of pattern styles.; The first table displays the 25 fixed patterns. They cannot be; customized unlike the hatches displayed in the second table which be; customized using:. gStyle->SetHatchesSpacing() to define the spacing between hatches.; gStyle->SetHatchesLineWidth() to define the hatches line width. Picture; Source. TCanvas * fillpatterns(); {; // Fill patterns example. This macro shows the available fill patterns.; // The first table displays the 25 fixed patterns. They cannot be; // customized unlike the hatches displayed in the second table which be ; // cutomized using:; // - gStyle->SetHatchesSpacing() to define the spacing between hatches.; SetHatchesLineWidth() to define the hatches line width.; ; ; ; TCanvas *Pat = new TCanvas(""Fill Patterns"", """",0,0,500,700);; Pat->Range(0,0,1,1);; Pat->SetBorderSize(2);; Pat->SetFrameFillColor(0);; Double_t bh = 0.059;; Double_t db = 0.01; ; Double_t y = 0.995;; Int_t i,j=3001;. ; for (i=1; i<=5; i++) {; box(j++, 0.01, y-bh, 0.19, y);; box(j++, 0.21, y-bh, 0.39, y);; box(j++, 0.41, y-bh, 0.59, y);; box(j++, 0.61, y-bh, 0.79, y);; box(j++, 0.81, y-bh, 0.99, y);; y = y-bh-db;; }. ; y = y-3*db;; gStyle->SetHatchesSpacing(2.0);; gStyle->SetHatchesLineWidth(1);; Int_t j1 = 3144;; Int_t j2 = 3305;; Int_t j3 = 3350;; Int_t j4 = 3490;; Int_t j5 = 3609;; for (i=1; i<=9; i++) {; if (i==6) {j2 += 10; j3 += 1; j4 += 1; j5 += 10;}; if (i==5) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TAttFill.html:4509,avail,available,4509,root/html534/TAttFill.html,https://root.cern,https://root.cern/root/html534/TAttFill.html,1,['avail'],['available']
Availability,"or use; // in subsequent fitting and plotting operations (interpolation is applied); ; // w->pdf(""model"")->setNormValueCaching(3) ;; w->pdf(""model"")->setStringAttribute(""CACHEPARMINT"", ""x:y:z"");; ; // Evaluate pdf once to trigger filling of cache; RooArgSet normSet(*w->var(""x""), *w->var(""y""), *w->var(""z""));; w->pdf(""model"")->getVal(&normSet);; w->writeToFile(""rf903_numintcache.root"");; }; ; if (mode == 2) {; // Load preexisting workspace from file in mode==2; TFile *f = new TFile(""rf903_numintcache.root"");; w = (RooWorkspace *)f->Get(""w"");; }; ; // Return created or loaded workspace; return w;; }; d#define d(i)Definition RSha256.hxx:102; f#define f(i)Definition RSha256.hxx:104; RooDataHist.h; RooDataSet.h; RooExpensiveObjectCache.h; RooGaussian.h; RooPlot.h; RooRealVar.h; RooWorkspace.h; Int_tint Int_tDefinition RtypesCore.h:45; TAxis.h; TCanvas.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TFile.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; modeOption_t Option_t TPoint TPoint const char modeDefinition TGWin32VirtualXProxy.cxx:68; TH1.h; RooAbsData::createHistogramTH1 * createHistogram(const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) constCalls createHistogram(const char *name, const RooAbsRealLValue& xvar, const RooLinkedList& argList) c...Definition RooAbsData.cxx:561; RooAbsPdf::plotOnRooPlot * plotOn(RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const overrideHelper calling plotOn(Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8C.html:4668,error,error,4668,doc/master/rf903__numintcache_8C.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8C.html,1,['error'],['error']
Availability,"or value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, Double_t amp, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to peak position.; Function parameters:; -i-channel; -amp-amplitude of peak; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Derderi0(Double_t i, Double_t amp, Double_t i0, Double_t sigma). AUXILIARY FUNCTION. This function calculates second derivative of peak shape function; (see",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumFit.html:14805,error,error,14805,root/html602/TSpectrumFit.html,https://root.cern,https://root.cern/root/html602/TSpectrumFit.html,2,['error'],['error']
Availability,"or which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsReal& func, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with function and X-Y values dataset. An X-Y dataset is a weighted dataset with one or more observables X where given yvar is interpreted; as the Y value. The Y variable must have a non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:38248,error,errors,38248,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,12,['error'],"['error', 'errors']"
Availability,"or with name \(\mbox{name}\).; 5.14.11 error(…); error(unsigned int n) or error(const char* name) return the current uncertainty (error) of parameter \(\mbox{n}\) or with name \(\mbox{ name}\).; 5.14.12 index(…); index(const char* name) returns the index (current position) of the parameter with name \(\mbox{ name}\) in the list of defined parameters. The index is the same as for the calculation of the function value in the user’s FCN (FCNBase::operator()).; 5.14.13 name(…); name(unsigned int n) returns the name of the parameter with index \(n\).; 5.15 MnUserParameterState; [api:state] The class MnUserParameterState contains the MnUserParameters and the MnUserCovariance. It can be created on input by the user, or by M itself as user representable format of the result of the minimization.; 5.15.1 MnUserParameterState(const std::vector\(<\)double\(>\)&,. const std::vector\(<\)double\(>\)&) ###; Construct a state from starting values specified via std::vector\(<\)double\(>\). No covariance is available.; 5.15.2 MnUserParameterState(const MnUserParameters&); Construct a state from starting values specified via MnUserParameters. No covariance is available.; 5.15.3 MnUserParameterState(const MnUserParameters&,. const MnUserCovariance&) ###; Construct a state from starting values specified via MnUserParameters and MnUserCovariance.; 5.15.4 parameters(); The method parameters() returns a const reference to the MnUserParameters data member.; 5.15.5 covariance(); The method covariance() returns a const reference to the MnUserCovariance data member.; 5.15.6 globalCC(); The method globalCC() returns a const reference to the MnGlobalCorrelationCoeff data member.; 5.15.7 MnUserParameterState::isValid() and. MnUserParameterState::hasCovariance() ###; isValid() returns true if the state is valid, false if not. hasCovariance returns true if the state has a valid covariance, false otherwise.; 5.15.8 MnUserParameterState::fval(), MnUserParameterState::edm(),. MnUserParameterState::nfcn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:58333,avail,available,58333,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['avail'],['available']
Availability,"or with np points and ne y-errors. ;  ;  ~TGraphMultiErrors () override;  TGraphMultiErrors default destructor. ;  ; virtual void AddYError (Int_t np, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr);  Add a new y error to the graph and fill it with the values from eyL and eyH ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; virtual void BayesDivide (const TH1 *pass, const TH1 *total, Option_t *opt="""");  This function is only kept for backward compatibility. ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute Range. ;  ; virtual void DeleteYError (Int_t e);  Deletes the y error with the index e. ;  ; void Divide (const TH1 *pass, const TH1 *total, Option_t *opt=""cp"");  This function was adapted from the TGraphAsymmErrors class. ;  ; virtual TAttFill * GetAttFill (Int_t e);  Get AttFill pointer for specified error dimension. ;  ; virtual TAttLine * GetAttLine (Int_t e);  Get AttLine pointer for specified error dimension. ;  ; Double_t GetErrorX (Int_t i) const override;  Get error on x coordinate for point i. ;  ; Double_t GetErrorXhigh (Int_t i) const override;  Get high error on x coordinate for point i. ;  ; Double_t GetErrorXlow (Int_t i) const override;  Get low error on x coordinate for point i. ;  ; Double_t GetErrorY (Int_t i) const override;  Get error on y coordinate for point i. ;  ; virtual Double_t GetErrorY (Int_t i, Int_t e) const;  Get error e on y coordinate for point i. ;  ; Double_t GetErrorYhigh (Int_t i) const override;  Get high error on y coordinate for point i. ;  ; virtual Double_t GetErrorYhigh (Int_t i, Int_t e) const;  Get high error e on y coordinate for point i. ;  ; Double_t GetErrorYlow (Int_t i) const override;  Get low error on y coordinate for point i. ;  ; virtual Double_t GetErrorYlow (Int_t i, Int_t e) const;  Get low error e on y coordinate for point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:10418,error,error,10418,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"or"");; 18000 return -1;; 18001 }; 18002 ; 18003 /* Reset the previous responses */; 18004 conn->data_len = 0;; 18005 ; 18006 /* Implementation of API function for HTTP clients */; 18007 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18008 ; 18009 if (timeout >= 0) {; 18010 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18011 new_timeout = txt;; 18012 } else {; 18013 new_timeout = NULL;; 18014 }; 18015 ; 18016 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18017 ret = get_response(conn, ebuf, ebuf_len, &err);; 18018 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18019 ; 18020 /* TODO: here, the URI is the http response code */; 18021 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18022 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18023 ; 18024 /* TODO (mid): Define proper return values - maybe return length?; 18025 * For the first test use <0 for error and >0 for OK */; 18026 return (ret == 0) ? -1 : +1;; 18027}; 18028 ; 18029 ; 18030struct mg_connection *; 18031mg_download(const char *host,; 18032 int port,; 18033 int use_ssl,; 18034 char *ebuf,; 18035 size_t ebuf_len,; 18036 const char *fmt,; 18037 ...); 18038{; 18039 struct mg_connection *conn;; 18040 va_list ap;; 18041 int i;; 18042 int reqerr;; 18043 ; 18044 if (ebuf_len > 0) {; 18045 ebuf[0] = '\0';; 18046 }; 18047 ; 18048 va_start(ap, fmt);; 18049 ; 18050 /* open a connection */; 18051 conn = mg_connect_client(host, port, use_ssl, ebuf, ebuf_len);; 18052 ; 18053 if (conn != NULL) {; 18054 i = mg_vprintf(conn, fmt, ap);; 18055 if (i <= 0) {; 18056 mg_snprintf(conn,; 18057 NULL, /* No truncation check for ebuf */; 18058 ebuf,; 18059 ebuf_len,; 18060 ""%s"",; 18061 ""Error sending request"");; 18062 } else {; 18063 /* make sure the buffer is clear */; 18064 conn->data_len = 0;; 18065 get_response(conn, ebuf, ebuf_len, &reqerr);; 18066 ; 18067 /* TODO: here, the URI is the http response code */; 18068 conn->request_info.local_uri = conn->re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:535264,error,error,535264,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"or"");; 18001 return -1;; 18002 }; 18003 ; 18004 /* Reset the previous responses */; 18005 conn->data_len = 0;; 18006 ; 18007 /* Implementation of API function for HTTP clients */; 18008 save_timeout = conn->dom_ctx->config[REQUEST_TIMEOUT];; 18009 ; 18010 if (timeout >= 0) {; 18011 mg_snprintf(conn, NULL, txt, sizeof(txt), ""%i"", timeout);; 18012 new_timeout = txt;; 18013 } else {; 18014 new_timeout = NULL;; 18015 }; 18016 ; 18017 conn->dom_ctx->config[REQUEST_TIMEOUT] = new_timeout;; 18018 ret = get_response(conn, ebuf, ebuf_len, &err);; 18019 conn->dom_ctx->config[REQUEST_TIMEOUT] = save_timeout;; 18020 ; 18021 /* TODO: here, the URI is the http response code */; 18022 conn->request_info.local_uri_raw = conn->request_info.request_uri;; 18023 conn->request_info.local_uri = conn->request_info.local_uri_raw;; 18024 ; 18025 /* TODO (mid): Define proper return values - maybe return length?; 18026 * For the first test use <0 for error and >0 for OK */; 18027 return (ret == 0) ? -1 : +1;; 18028}; 18029 ; 18030 ; 18031struct mg_connection *; 18032mg_download(const char *host,; 18033 int port,; 18034 int use_ssl,; 18035 char *ebuf,; 18036 size_t ebuf_len,; 18037 const char *fmt,; 18038 ...); 18039{; 18040 struct mg_connection *conn;; 18041 va_list ap;; 18042 int i;; 18043 int reqerr;; 18044 ; 18045 if (ebuf_len > 0) {; 18046 ebuf[0] = '\0';; 18047 }; 18048 ; 18049 va_start(ap, fmt);; 18050 ; 18051 /* open a connection */; 18052 conn = mg_connect_client(host, port, use_ssl, ebuf, ebuf_len);; 18053 ; 18054 if (conn != NULL) {; 18055 i = mg_vprintf(conn, fmt, ap);; 18056 if (i <= 0) {; 18057 mg_snprintf(conn,; 18058 NULL, /* No truncation check for ebuf */; 18059 ebuf,; 18060 ebuf_len,; 18061 ""%s"",; 18062 ""Error sending request"");; 18063 } else {; 18064 /* make sure the buffer is clear */; 18065 conn->data_len = 0;; 18066 get_response(conn, ebuf, ebuf_len, &reqerr);; 18067 ; 18068 /* TODO: here, the URI is the http response code */; 18069 conn->request_info.local_uri = conn->re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:535297,error,error,535297,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"or&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleResult() const; virtual voidSetAbsTolerance(double eps); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidSetRelTolerance(double eps); virtual intStatus() const; virtual ROOT::Math::IntegrationOneDim::TypeROOT::Math::VirtualIntegratorOneDim::Type() const; ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(); ROOT::Math::VirtualIntegratorROOT::Math::VirtualIntegrator::VirtualIntegrator(const ROOT::Math::VirtualIntegrator&); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(); ROOT::Math::VirtualIntegratorOneDimROOT::Math::VirtualIntegratorOneDim::VirtualIntegratorOneDim(const ROOT::Math::VirtualIntegratorOneDim&). private:. virtual doubleDoIntegral(double a, double b, const ROOT::Math::IGenFunction* func). Data Members; protected:. doublefEpsAbsAbsolute error.; doublefEpsRelRelative error.; const ROOT::Math::IGenFunction*fFunctionPointer to function used.; doublefLastErrorError from the last stimation.; doublefLastResultResult from the last stimation.; boolfUsedOnceBool value to check if the function was at least called once.; static boolfgAbsValueAbsValue used for the calculation of the integral. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~GaussIntegrator(); Destructor . GaussIntegrator(double absTol = 0, double relTol = 0); Default Constructor. . void AbsValue(bool flag); Static function: set the fgAbsValue flag.; By default TF1::Integral uses the original function value to compute the integral; However, TF1::Moment, CentralMoment require to compute the integral; using the absolute value of the function. void SetRelTolerance(double eps); Implementing VirtualIntegrator Interface; Set the desired relative Error. . { fEpsRel = eps; }. void SetAbsTolerance(double eps); This",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html:2213,error,error,2213,root/html602/ROOT__Math__GaussIntegrator.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GaussIntegrator.html,2,['error'],['error']
Availability,"or(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the Markov chain; By default all the parameters are stored. { fChainParams.removeAll(); fChainParams.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooStats::ProposalFunction& proposalFunction); set the proposal function for suggesting new points for the MCMC. { fPropFunc = &proposalFunction; }. void SetNumIters(Int_t numIters); set the number of iterations to run the metropolis algorithm. { fNumIters = numIters; }. void SetNumBurnInSteps(Int_t numBurnInSteps); set the number of steps in the chain to discard as burn-in,; starting from the first. { fNumBurnInSteps = numBurnInSteps; }. void SetNumBins(Int_t numBins); set the number of bins to create for each axis when constructing the interval. { fNumBins = numBins; }. void SetAxes(RooArgList& axes); set which variables to put on each axis. { fAxes = &axes; }. void SetUseKeys(Bool_t useKeys); set whether to use kernel estima",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MCMCCalculator.html:10115,error,error,10115,root/html532/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__MCMCCalculator.html,1,['error'],['error']
Availability,"or(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; In addition to the drawing options previously described, the graphs with error; bars can be drawn with the following extra options:. ""Z""; By default horizonthal and vertical small lines are drawn at; the end of the error bars. If option ""z"" or ""Z"" is specified,; these lines are not drawn. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; By default the error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""0""; By default, when a data point is outside the visible range along the Y axis the error; bars are not drawn. Combined with other options, this option forces error bars'; drawing for the data points outside the visible range along the Y axis. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphPainter.html:5462,error,errors,5462,root/html530/TGraphPainter.html,https://root.cern,https://root.cern/root/html530/TGraphPainter.html,1,['error'],['errors']
Availability,"or(9);. TGraph *gr3 = new TGraph(n,x3,y3);; gr3->SetLineColor(5);; gr3->SetLineWidth(-802);; gr3->SetFillStyle(3002);; gr3->SetFillColor(2);. mg->Add(gr1);; mg->Add(gr2);; mg->Add(gr3);; mg->Draw(""AC"");. return c1;; }; Graphs with error bars; Three classes are available to handle graphs with error bars:; TGraphErrors, TGraphAsymmErrors and TGraphBentErrors.; In addition to the drawing options previously described, the graphs with error; bars can be drawn with the following extra options:. ""Z""; By default horizonthal and vertical small lines are drawn at; the end of the error bars. If option ""z"" or ""Z"" is specified,; these lines are not drawn. "">""; An arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""|>""; A filled arrow is drawn at the end of the error bars.; The size of the arrow is set to 2/3 of the marker size. ""X""; By default the error bars are drawn. If option ""X"" is specified,; the errors are not drawn. The graph with errors in drawn like a normal graph. ""||""; Only the end vertical/horizonthal lines; of the error bars are drawn. This option is interesting to superimpose; systematic errors on top of a graph with statistical errors. ""[]""; Does the same as option ""||"" except that it draws additionnal tick marks at the; end of the vertical/horizonthal lines. This makes less ambiguous plots; in case several graphs are drawn on the same picture. ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPainter.html:5462,error,errors,5462,root/html528/TGraphPainter.html,https://root.cern,https://root.cern/root/html528/TGraphPainter.html,1,['error'],['errors']
Availability,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TKSocket(TSocket* s = 0). Data Members; public:. enum EEncoding { kNone; kSafe; kPriv; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. void*fAuthContextper connection kerberos authentication context; void*fServerserver principal; TSocket*fSocketunderlying socket; static void*fgCCDefshared default credential cache; static void*fgClientclient principal; static void*fgContextshared kerberos context. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TKSocket(TSocket* s = 0); Constructor. ~TKSocket(); Destructor. TKSocket * Connect(const char* server, Int_t port); Connect to 'server' on 'port'. Int_t BlockRead(char*& buf, TKSocket::EEncoding& type); Read block on information from server. The result is stored in buf.; The number of read bytes is returned; -1 is returned in case of error. Int_t BlockWrite(const char* buf, Int_t len, TKSocket::EEncoding type); Block-send 'length' bytes to server from 'buf'. TKSocket(TSocket* s = 0). » Last changed: root/krb5auth:$Id$ » Last generated: 2015-03-14 16:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TKSocket.html:6008,error,error,6008,root/html534/TKSocket.html,https://root.cern,https://root.cern/root/html534/TKSocket.html,1,['error'],['error']
Availability,"or(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t (*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(Double_t (*)(Double_t) rootVal, Double_t rootMin, Double_t rootMax, Int_t maxIterations = 100, Double_t absTolerance = 0.0); constructor. ~RootFinder( void ); destructor. Double_t Root(Double_t refValue); Root finding using Brents algorithm; taken from CERNLIB function RZERO. RootFinder(Double_t (*)(Double_t) rootVal, Double_t rootMin, Double_t rootMax, Int_t maxIterations = 100, Double_t absTolerance = 0.0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: RootFinder.h 39395 2011-05-26 10:05:54Z moneta $ » Last generated: 2011-07-04 15:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__RootFinder.html:5341,toler,tolerance,5341,root/html530/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html530/TMVA__RootFinder.html,1,['toler'],['tolerance']
Availability,"or). ; Reimplemented from TTree.; Definition at line 1028 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1039 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1052 of file TChain.cxx. ◆ GetLeaf() [2/2]. TLeaf * TChain::GetLeaf ; (; const char * ; name). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1073 of file TChain.cxx. ◆ GetListOfBranches(). TObjArray * TChain::GetListOfBranches ; (; ). overridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1099 of file TChain.cxx. ◆ GetListOfFiles(). TObjArray * TChain::GetListOfFiles ; (; ); const. inline . Definition at line 111 of file TChain.h. ◆ GetListOfLeaves(). TObjArray * TChain::GetListOfLeaves ; (; ). overridevirtual . Return a pointer to the list of leaves of the current tree. ; Warning: May set the current tree! ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1122 of file TChain.cxx. ◆ GetMaximum(). Double_t TChain::GetMaximum ; (; const char * ; columname). overridevirtual . Return maximum of column with name columname. ; Reimplemented from TTree.; Definition at line 1143 of file TChain.cxx. ◆ GetMinimum(). Double_t TChain::GetMinimum ; (; const char * ; columname). overridevirtual . Return minimum of column with name columname. ; Reimplemented from TTree.; Definition at line 1160 of file TChain.cxx. ◆ GetNbranches(). Int_t TChain::GetNbranches ; (; ). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:76818,failure,failure,76818,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,1,['failure'],['failure']
Availability,"or). ; Reimplemented from TTree.; Definition at line 1054 of file TChain.cxx. ◆ GetFile(). TFile * TChain::GetFile ; (; ); const. Return a pointer to the current file. ; If no file is connected, the first file is automatically loaded. ; Definition at line 1065 of file TChain.cxx. ◆ GetLeaf() [1/2]. TLeaf * TChain::GetLeaf ; (; const char * ; branchname, . const char * ; leafname . ). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1078 of file TChain.cxx. ◆ GetLeaf() [2/2]. TLeaf * TChain::GetLeaf ; (; const char * ; name). overridevirtual . Return a pointer to the leaf name in the current tree. ; Reimplemented from TTree.; Definition at line 1099 of file TChain.cxx. ◆ GetListOfBranches(). TObjArray * TChain::GetListOfBranches ; (; ). overridevirtual . Return a pointer to the list of branches of the current tree. ; Warning: If there is no current TTree yet, this routine will open the first in the chain.; Returns 0 on failure. ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1125 of file TChain.cxx. ◆ GetListOfFiles(). TObjArray * TChain::GetListOfFiles ; (; ); const. inline . Definition at line 111 of file TChain.h. ◆ GetListOfLeaves(). TObjArray * TChain::GetListOfLeaves ; (; ). overridevirtual . Return a pointer to the list of leaves of the current tree. ; Warning: May set the current tree! ; Reimplemented from TTree.; Reimplemented in TProofChain.; Definition at line 1148 of file TChain.cxx. ◆ GetMaximum(). Double_t TChain::GetMaximum ; (; const char * ; columname). overridevirtual . Return maximum of column with name columname. ; Reimplemented from TTree.; Definition at line 1169 of file TChain.cxx. ◆ GetMinimum(). Double_t TChain::GetMinimum ; (; const char * ; columname). overridevirtual . Return minimum of column with name columname. ; Reimplemented from TTree.; Definition at line 1186 of file TChain.cxx. ◆ GetNbranches(). Int_t TChain::GetNbranches ; (; ). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTChain.html:77229,failure,failure,77229,doc/master/classTChain.html,https://root.cern,https://root.cern/doc/master/classTChain.html,1,['failure'],['failure']
Availability,"or); virtual voidSetBinError(Int_t binx, Int_t biny, Double_t error); virtual voidSetBinError(Int_t binx, Int_t biny, Int_t binz, Double_t error); virtual voidSetBinErrorOption(TH1::EBinErrorOpt type); virtual voidSetBins(Int_t nx, const Double_t* xBins); virtual voidSetBins(Int_t nx, Double_t xmin, Double_t xmax); virtual voidSetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins); virtual voidSetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax); virtual voidSetBins(Int_t nx, const Double_t* xBins, Int_t ny, const Double_t* yBins, Int_t nz, const Double_t* zBins); virtual voidSetBins(Int_t nx, Double_t xmin, Double_t xmax, Int_t ny, Double_t ymin, Double_t ymax, Int_t nz, Double_t zmin, Double_t zmax); virtual voidSetBinsLength(Int_t = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(Int_t buffersize, Option_t* option = """"); virtual voidSetCellContent(Int_t binx, Int_t biny, Double_t content); virtual voidSetCellError(Int_t binx, Int_t biny, Double_t content); virtual voidSetContent(const Double_t* content); virtual voidSetContour(Int_t nlevels, const Double_t* levels = 0); virtual voidSetContourLevel(Int_t level, Double_t value); static voidSetDefaultBufferSize(Int_t buffersize = 1000); static voidSetDefaultSumw2(Bool_t sumw2 = kTRUE); virtual voidSetDirectory(TDirectory* dir); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEntries(Double_t n); virtual voidSetError(const Double_t* error); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetLabelColor(Color_t color = 1, Option_t* axis = ""X""); virtual voidSetLabelFont(Style_t font = 62, Option_t* axis = ""X""); virtual voidSetLabelOffset(Float_t offset = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:31436,error,error,31436,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['error']
Availability,"or, the SetParameter() method can be; 693 // overridden.; 694 if (fFormula) fFormula->SetParameters(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);; 695 else fParams->SetParameters(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);; 696 Update();; 697 } // *MENU*; 698 virtual void SetParName(Int_t ipar, const char *name);; 699 virtual void SetParNames(const char *name0 = """", const char *name1 = """", const char *name2 = """",; 700 const char *name3 = """", const char *name4 = """", const char *name5 = """",; 701 const char *name6 = """", const char *name7 = """", const char *name8 = """",; 702 const char *name9 = """", const char *name10 = """"); // *MENU*; 703 virtual void SetParError(Int_t ipar, Double_t error);; 704 virtual void SetParErrors(const Double_t *errors);; 705 virtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax);; 706 virtual void SetParent(TObject *p = nullptr); 707 {; 708 fParent = p;; 709 }; 710 virtual void SetRange(Double_t xmin, Double_t xmax); // *MENU*; 711 virtual void SetRange(Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax);; 712 virtual void SetRange(Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax);; 713 virtual void SetSavedPoint(Int_t point, Double_t value);; 714 void SetTitle(const char *title = """") override; // *MENU*; 715 virtual void SetVectorized(Bool_t vectorized); 716 {; 717 if (fType == EFType::kFormula && fFormula); 718 fFormula->SetVectorized(vectorized);; 719 else; 720 Warning(""SetVectorized"", ""Can only set vectorized flag on formula-based TF1"");; 721 }; 722 virtual void Update();; 723 ; 724 static TF1 *GetCurrent();; 725 static void AbsValue(Bool_t reject = kTRUE);; 726 static void RejectPoint(Bool_t reject = kTRUE);; 727 static Bool_t RejectedPoint();; 728 static void SetCurrent(TF1 *f1);; 729 ; 730 //Moments; 731 virtual Double_t Moment(Double_t n, Double_t a, Double_t b, const Double_t *params = nullptr, Double_t epsilon = 0.000001);; 732 virtual Double_t CentralMoment(Double_t n,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8h_source.html:30496,error,error,30496,doc/master/TF1_8h_source.html,https://root.cern,https://root.cern/doc/master/TF1_8h_source.html,2,['error'],"['error', 'errors']"
Availability,"or. TFormula& operator=(const TFormula& rhs); Operator =. ~TFormula(); Formula default destructor. Bool_t AnalyzeFunction(TString& chaine, Int_t& err, Int_t offset = 0); Check if the chain as function call. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. void Analyze(const char* schain, Int_t& err, Int_t offset = 0); Analyze a sub-expression in one formula. Expressions in one formula are recursively analyzed.; Result of analysis is stored in the object tables. Table of function codes and errors. * functions :. + 1 pow 20; - 2 sq 21; * 3 sqrt 22; / 4 strstr 23; % 5 min 24; max 25; log 30; cos 10 exp 31; sin 11 log10 32; tan 12; acos 13 abs 41; asin 14 sign 42; atan 15 int 43; atan2 16; fmod 17 rndm 50. cosh 70 acosh 73; sinh 71 asinh 74; tanh 72 atanh 75. expo 100 gaus 110 gausn (see note below); expo(0) 100 0 gaus(0) 110 0 gausn(0); expo(1) 100 1 gaus(1) 110 1 gausn(1); xexpo 100 x xgaus 110 x xgausn; yexpo 101 x ygaus 111 x ygausn; zexpo 102 x zgaus 112 x zgausn; xyexpo 105 x xygaus 115 x xygausn; yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2). landau 120 x landaun (see note below); landau(0) 120 0 landaun(0); landau(1) 120 1 landaun(1); xlandau 120 x xlandaun; ylandau 121 x ylandaun; zlandau 122 x zlandaun; xylandau 125 x xylandaun; ylandau(5) 121 5 ylandaun(5); xylandau(2) 125 2 xylandaun(2). pol0 130 x pol1 130 1xx; pol0(0) 130 0 pol1(0) 130 100; pol0(1) 130 1 pol1(1) 130 101; xpol0 130 x xpol1 130 101; ypol0 131 x yp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:15058,error,errors,15058,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,2,['error'],['errors']
Availability,"or. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2C(const TH2C& h2c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2C. TH2C& operator=(const TH2C& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 29775 2009-08-13 15:07:28Z moneta $ » Last generated: 2010-10-13 09:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2C.html:26082,error,errors,26082,root/html528/TH2C.html,https://root.cern,https://root.cern/root/html528/TH2C.html,1,['error'],['errors']
Availability,"or. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2C(const TH2C& h2c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2C. TH2C& operator=(const TH2C& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 29775 2009-08-13 15:07:28Z moneta $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2C.html:26598,error,errors,26598,root/html530/TH2C.html,https://root.cern,https://root.cern/root/html530/TH2C.html,1,['error'],['errors']
Availability,"or. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2C(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2C(const TH2C& h2c); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2C. TH2C& operator=(const TH2C& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 40378 2011-07-27 20:45:07Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH2C.html:26598,error,errors,26598,root/html532/TH2C.html,https://root.cern,https://root.cern/root/html532/TH2C.html,1,['error'],['errors']
Availability,"or. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2S(const TH2S& h2s); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2S. TH2S& operator=(const TH2S& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 29775 2009-08-13 15:07:28Z moneta $ » Last generated: 2010-10-13 09:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2S.html:26102,error,errors,26102,root/html528/TH2S.html,https://root.cern,https://root.cern/root/html528/TH2S.html,1,['error'],['errors']
Availability,"or. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2S(const TH2S& h2s); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2S. TH2S& operator=(const TH2S& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 29775 2009-08-13 15:07:28Z moneta $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2S.html:26618,error,errors,26618,root/html530/TH2S.html,https://root.cern,https://root.cern/root/html530/TH2S.html,1,['error'],['errors']
Availability,"or. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, Double_t ylow, Double_t yup); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins); Constructor. TH2S(const char* name, const char* title, Int_t nbinsx, const Float_t* xbins, Int_t nbinsy, const Float_t* ybins); Constructor. TH2S(const TH2S& h2s); Copy constructor. void AddBinContent(Int_t bin); Increment bin content by 1*-*-*-*-; *-* ==========================. void AddBinContent(Int_t bin, Double_t w); Increment bin content by w*-*-*-*-; *-* ==========================. void Copy(TObject& hnew) const; Copy. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Double_t GetBinContent(Int_t bin) const; Get bin content. void Reset(Option_t* option = """"); Reset this histogram: contents, errors, etc; *-* ===========================================. void SetBinContent(Int_t bin, Double_t content); Set bin content. void SetBinsLength(Int_t n = -1); Set total number of bins including under/overflow; Reallocate bin contents array. void Streamer(TBuffer& b); Stream an object of class TH2S. TH2S& operator=(const TH2S& h1); Operator =. Double_t GetBinContent(Int_t bin) const. Double_t GetBinContent(Int_t binx, Int_t biny) const; {return GetBinContent(GetBin(binx,biny));}. void SetBinContent(Int_t bin, Double_t content). void SetBinContent(Int_t binx, Int_t biny, Double_t content); {SetBinContent(GetBin(binx,biny),content);}. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2.h 40378 2011-07-27 20:45:07Z pcanal $ » Last generated: 2011-12-02 14:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH2S.html:26618,error,errors,26618,root/html532/TH2S.html,https://root.cern,https://root.cern/root/html532/TH2S.html,1,['error'],['errors']
Availability,"or.; ; A TLegend is a Pave with several TLegendEntry(s).; x1,y1,x2,y2 are the coordinates of the Legend in the current pad; (in normalised coordinates by default); ""header"" is the title that will be displayed at the top of the legend; it is treated like a regular entry and supports TLatex. The default; is no header (header = 0).; The options are the same as for TPave Default = ""brNDC""; ; . TLegend(const TLegend& legend). Copy constructor.; ; . TLegend& operator=(const TLegend& ). Assignment operator.; ; . ~TLegend(). Default destructor.; ; . TLegendEntry * AddEntry(const TObject* obj, const char* label = """", Option_t* option = ""lpf""). Add a new entry to this legend. ""obj"" is the object to be represented.; ""label"" is the text you wish to associate with obj in the legend.; If ""label"" is null or empty, the title of the object will be used.; ; Options are:; ; L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified; ; . TLegendEntry * AddEntry(const char* name, const char* label = """", Option_t* option = ""lpf""). Add a new entry to this legend. ""name"" is the name of an object in the pad to; be represented label is the text you wish to associate with obj in the legend; if label is null or empty, the title of the object will be used.; ; Options are:; ; L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMarker; F: draw a box with fill associated wit TAttFill if obj inherits TAttFill; E: draw vertical error bar if option ""L"" is also specified; ; . void Clear(Option_t* option = """"). Clear all entries in this legend, including the header.; ; . void Copy(TObject& obj) const. Copy this legend into ""obj"".; ; . void DeleteEntry(). Delete entry at the mouse position.; ; . void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLegend.html:18338,error,error,18338,root/html604/TLegend.html,https://root.cern,https://root.cern/root/html604/TLegend.html,1,['error'],['error']
Availability,"or.h""; 45#include ""Math/AdaptiveIntegratorMultiDim.h""; 46#include ""Math/RichardsonDerivator.h""; 47#include ""Math/Functor.h""; 48#include ""Math/Minimizer.h""; 49#include ""Math/MinimizerOptions.h""; 50#include ""Math/Factory.h""; 51#include ""Math/ChebyshevPol.h""; 52#include ""Fit/FitResult.h""; 53// for I/O backward compatibility; 54#include ""v5/TF1Data.h""; 55 ; 56#include ""AnalyticalIntegrals.h""; 57 ; 58std::atomic<Bool_t> TF1::fgAbsValue(kFALSE);; 59Bool_t TF1::fgRejectPoint = kFALSE;; 60std::atomic<Bool_t> TF1::fgAddToGlobList(kTRUE);; 61static Double_t gErrorTF1 = 0;; 62 ; 63using TF1Updater_t = void (*)(Int_t nobjects, TObject **from, TObject **to);; 64bool R__SetClonesArrayTF1Updater(TF1Updater_t func);; 65 ; 66 ; 67namespace {; 68struct TF1v5Convert : public TF1 {; 69public:; 70 void Convert(ROOT::v5::TF1Data &from); 71 {; 72 // convert old TF1 to new one; 73 fNpar = from.GetNpar();; 74 fNdim = from.GetNdim();; 75 if (from.fType == 0) {; 76 // formula functions; 77 // if ndim is not 1 set xmin max to zero to avoid error in ctor; 78 double xmin = from.fXmin;; 79 double xmax = from.fXmax;; 80 if (fNdim > 1) {; 81 xmin = 0;; 82 xmax = 0;; 83 }; 84 TF1 fnew(from.GetName(), from.GetExpFormula(), xmin, xmax);; 85 if (fNdim > 1) {; 86 fnew.SetRange(from.fXmin, from.fXmax);; 87 }; 88 fnew.Copy(*this);; 89 // need to set parameter values; 90 if (from.GetParameters()); 91 fFormula->SetParameters(from.GetParameters());; 92 } else {; 93 // case of a function pointers; 94 fParams = std::make_unique<TF1Parameters>(fNpar);; 95 fName = from.GetName();; 96 fTitle = from.GetTitle();; 97 // need to set parameter values; 98 if (from.GetParameters()); 99 fParams->SetParameters(from.GetParameters());; 100 }; 101 // copy the other data members; 102 fNpx = from.fNpx;; 103 fType = (EFType)from.fType;; 104 fNpfits = from.fNpfits;; 105 fNDF = from.fNDF;; 106 fChisquare = from.fChisquare;; 107 fMaximum = from.fMaximum;; 108 fMinimum = from.fMinimum;; 109 fXmin = from.fXmin;; 110 fXmax = from.fXm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:2576,error,error,2576,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['error'],['error']
Availability,or::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tfDimensionDimension of the current expression; TStringfInitialExp; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManager; Int_tfMultiplicityIndicator of the variability of the size of entries; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; TStringfSelection; TStatus*fStatus; Long64_tTSelector::fStatusSelector status; TTree*fTree; TTreeDrawArgsParserfTreeDrawArgsParser; TTreeFormula*fVar[4]Pointer to variable formula; Double_tfWeightGlobal weight for fill actions; static TProofDraw::(anonymous)kWarn. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofDraw(); Constructor. ~TProofDraw(); Destructor. void Init(TTree* ); Init the tree. Bool_t Notify(); Called when a new tree is loaded. void Begin(TTree* ); Executed by the client before processing. void,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDraw.html:7353,avail,available,7353,root/html602/TProofDraw.html,https://root.cern,https://root.cern/root/html602/TProofDraw.html,2,['avail'],['available']
Availability,or::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). overridevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented from ROOT::Math::VirtualIntegratorOneDim.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 204 of file GaussIntegrator.cxx. ◆ SetRelTolerance(). void ROOT::Math::GaussIntegrator::SetRelTolerance ; (; double ; eps). inlineoverridevirtual . Set the desired relative Error. ; Implements ROOT::Math::VirtualIntegrator.; Reimplemented in ROOT::Math::GaussLegendreIntegrator.; Definition at line 65 of file GaussIntegrator.h. ◆ Status(). int ROOT::Math::GaussIntegrator::Status ; (; ); const. overridevirtual . return the status of the last integration - 0 in case of success ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 179 of file GaussIntegrator.cxx. Member Data Documentation. ◆ fEpsAbs. double ROOT::Math::GaussIntegrator::fEpsAbs. protected . Absolute error. ; Definition at line 223 of file GaussIntegrator.h. ◆ fEpsRel. double ROOT::Math::GaussIntegrator::fEpsRel. protected . Relative error. ; Definition at line 222 of file GaussIntegrator.h. ◆ fFunction. const IGenFunction* ROOT::Math::GaussIntegrator::fFunction. protected . Pointer to function used. ; Definition at line 227 of file GaussIntegrator.h. ◆ fgAbsValue. bool ROOT::Math::GaussIntegrator::fgAbsValue = false. staticprotected . AbsValue used for the calculation of the integral. ; Definition at line 221 of file GaussIntegrator.h. ◆ fLastError. double ROOT::Math::GaussIntegrator::fLastError. protected . Error from the last estimation. ; Definition at line 226 of file GaussIntegrator.h. ◆ fLastResult. double ROOT::Math::GaussIntegrator::fLastResult. protected . Result from the last estimation. ; Definition at line 225 of file GaussIntegrator.h. ◆ fUsedOnce. bool ROOT::Math::GaussIntegrator::fUsedOnce. protected . Bool value to check if the function was at least called once. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html:12445,error,error,12445,doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussIntegrator.html,1,['error'],['error']
Availability,"or::SetPalette.Definition TStyle.cxx:1888; TStyle::fStatYFloat_t fStatYY position of top right corner of stat box.Definition TStyle.h:114; TStyle::Copyvoid Copy(TObject &style) const overrideCopy this style.Definition TStyle.cxx:551; TStyle::GetLegendBorderSizeWidth_t GetLegendBorderSize() constDefinition TStyle.h:202; TStyle::fFrameLineStyleStyle_t fFrameLineStylePad frame line style.Definition TStyle.h:73; TStyle::SetStatBorderSizevoid SetStatBorderSize(Width_t size=2)Definition TStyle.h:393; TStyle::GetBarWidthFloat_t GetBarWidth() constDefinition TStyle.h:183; TStyle::fCanvasBorderModeInt_t fCanvasBorderModeCanvas border mode.Definition TStyle.h:87; TStyle::GetCanvasPreferGLBool_t GetCanvasPreferGL() constDefinition TStyle.h:187; TStyle::SetGridColorvoid SetGridColor(Color_t color=0)Definition TStyle.h:370; TStyle::GetColorModelPSInt_t GetColorModelPS() constDefinition TStyle.h:196; TStyle::SetGridStylevoid SetGridStyle(Style_t style=3)Definition TStyle.h:369; TStyle::SetErrorXvoid SetErrorX(Float_t errorx=0.5)Definition TStyle.h:340; TStyle::GetCanvasDefYInt_t GetCanvasDefY() constDefinition TStyle.h:194; TStyle::SetTitleColorvoid SetTitleColor(Color_t color=1, Option_t *axis=""X"")Definition TStyle.cxx:1754; TStyle::SetNumberContoursvoid SetNumberContours(Int_t number=20)Set the default number of contour levels when drawing 2-d plots.Definition TStyle.cxx:1500; TStyle::Paintvoid Paint(Option_t *option="""") overrideCopy this style to gStyle.Definition TStyle.cxx:1252; TStyle::fTitleXFloat_t fTitleXX position of top left corner of title box.Definition TStyle.h:125; TStyle::fShowToolBarInt_t fShowToolBarShow toolbar.Definition TStyle.h:49; TStyle::SetLabelFontvoid SetLabelFont(Style_t font=62, Option_t *axis=""X"")Set font number used to draw axis labels.Definition TStyle.cxx:1413; TStyle::fCapLinePSInt_t fCapLinePSDetermines the appearance of line caps on PostScript, PDF and SVG.Definition TStyle.h:137; TStyle::fFuncWidthWidth_t fFuncWidthFunction line width.Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStyle_8h_source.html:47364,error,errorx,47364,doc/master/TStyle_8h_source.html,https://root.cern,https://root.cern/doc/master/TStyle_8h_source.html,1,['error'],['errorx']
Availability,"or::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. » Last changed: Thu Nov 3 20:22:01 2011 » Last generated: 2011-11-03 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPySelector.html:9197,avail,available,9197,root/html532/TPySelector.html,https://root.cern,https://root.cern/root/html532/TPySelector.html,2,"['avail', 'error']","['available', 'error']"
Availability,"or; 41 kInfo, ///< Informational messages; used for instance for tracing; 42 kDebug ///< Debug information; only useful for developers; can have added verbosity up to 255-kDebug.; 43};; 44 ; 45inline ELogLevel operator+(ELogLevel severity, int offset); 46{; 47 return static_cast<ELogLevel>(static_cast<int>(severity) + offset);; 48}; 49 ; 50/**; 51 Keep track of emitted errors and warnings.; 52 */; 53class RLogDiagCount {; 54protected:; 55 std::atomic<long long> fNumWarnings{0ll}; /// Number of warnings.; 56 std::atomic<long long> fNumErrors{0ll}; /// Number of errors.; 57 std::atomic<long long> fNumFatalErrors{0ll}; /// Number of fatal errors.; 58 ; 59public:; 60 /// Returns the current number of warnings.; 61 long long GetNumWarnings() const { return fNumWarnings; }; 62 ; 63 /// Returns the current number of errors.; 64 long long GetNumErrors() const { return fNumErrors; }; 65 ; 66 /// Returns the current number of fatal errors.; 67 long long GetNumFatalErrors() const { return fNumFatalErrors; }; 68 ; 69 /// Increase warning or error count.; 70 void Increment(ELogLevel severity); 71 {; 72 switch (severity) {; 73 case ELogLevel::kFatal: ++fNumFatalErrors; break;; 74 case ELogLevel::kError: ++fNumErrors; break;; 75 case ELogLevel::kWarning: ++fNumWarnings; break;; 76 default:;; 77 }; 78 }; 79};; 80 ; 81/**; 82 Abstract RLogHandler base class. ROOT logs everything from info to error; 83 to entities of this class.; 84 */; 85class RLogHandler {; 86public:; 87 virtual ~RLogHandler();; 88 /// Emit a log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:2439,error,error,2439,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['error'],['error']
Availability,"or< std::string > & ; colNames, . std::string_view ; expression, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using custom variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]variationTagsnames for each of the varied values, e.g. ""up"" and ""down"". ; [in]variationNamea generic name for this set of varied values, e.g. ""ptvariation"". This overload adds the possibility for the expression used to evaluate the varied values to be just-in-time compiled. The example below shows how Vary() is used while dealing with multiple columns. The tags are defined as {""down"", ""up""}. auto nominal_hx =; df.Vary({""x"", ""y""}, ""ROOT::RVec<ROOT::RVecD>{{x*0.9, x*1.1}, {y*0.9, y*1.1}}"", {""down"", ""up""}, ""xy""); .Histo1D(""x"", ""y"");; ; auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; hx[""nominal""].Draw();; hx[""xy:down""].Draw(""SAME"");; hx[""xy:up""].Draw(""SAME"");; See alsoThis Vary() overload for more information. ; Definition at line 1196 of file RInterface.hxx. ◆ Vary() [4/11]. template<typename Proxied , typename DataSource = void> . RInterface< Proxied, DS_t > ROOT::RDF::RInterface< Proxied, DataSource >::Vary ; (; const std::vector< std::string > & ; colNames, . std::string_view ; expression, . std::size_t ; nVariations, . std::string_view ; variationName . ). inline . Register systematic variations for multiple existing columns using auto-generated variation tags. ; Parameters. [in]colNamesset of names of the columns for which varied values are provided. ; [in]expressiona string containing valid C++ code that evaluates to an RVec or RVecs containing the varied values for the specified columns. ; [in]nVariationsnumber of variations returned by the expression. The c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:142071,down,down,142071,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['down'],['down']
Availability,"or=() [1/2]. RNTupleDescriptor & ROOT::Experimental::RNTupleDescriptor::operator= ; (; const RNTupleDescriptor & ; other). delete . ◆ operator=() [2/2]. RNTupleDescriptor & ROOT::Experimental::RNTupleDescriptor::operator= ; (; RNTupleDescriptor && ; other). default . ◆ operator==(). bool ROOT::Experimental::RNTupleDescriptor::operator== ; (; const RNTupleDescriptor & ; other); const. Definition at line 282 of file RNTupleDescriptor.cxx. ◆ PrintInfo(). void ROOT::Experimental::RNTupleDescriptor::PrintInfo ; (; std::ostream & ; output); const. Definition at line 83 of file RNTupleDescriptorFmt.cxx. Friends And Related Symbol Documentation. ◆ Internal::RNTupleDescriptorBuilder. friend class Internal::RNTupleDescriptorBuilder. friend . Definition at line 529 of file RNTupleDescriptor.hxx. Member Data Documentation. ◆ fClusterDescriptors. std::unordered_map<DescriptorId_t, RClusterDescriptor> ROOT::Experimental::RNTupleDescriptor::fClusterDescriptors. private . May contain only a subset of all the available clusters, e.g. ; the clusters of the current file from a chain of files ; Definition at line 565 of file RNTupleDescriptor.hxx. ◆ fClusterGroupDescriptors. std::unordered_map<DescriptorId_t, RClusterGroupDescriptor> ROOT::Experimental::RNTupleDescriptor::fClusterGroupDescriptors. private . Definition at line 562 of file RNTupleDescriptor.hxx. ◆ fColumnDescriptors. std::unordered_map<DescriptorId_t, RColumnDescriptor> ROOT::Experimental::RNTupleDescriptor::fColumnDescriptors. private . Definition at line 561 of file RNTupleDescriptor.hxx. ◆ fDescription. std::string ROOT::Experimental::RNTupleDescriptor::fDescription. private . Free text from the user. ; Definition at line 538 of file RNTupleDescriptor.hxx. ◆ fExtraTypeInfoDescriptors. std::vector<RExtraTypeInfoDescriptor> ROOT::Experimental::RNTupleDescriptor::fExtraTypeInfoDescriptors. private . Definition at line 566 of file RNTupleDescriptor.hxx. ◆ fFeatureFlags. std::set<unsigned int> ROOT::Experimental::RNTupleDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html:20869,avail,available,20869,doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDescriptor.html,1,['avail'],['available']
Availability,"or=(). TArchiveFile & TArchiveFile::operator= ; (; const TArchiveFile & ; ). privatedelete . Not implemented because TArchiveFile can not be copied. . ◆ ParseUrl(). Bool_t TArchiveFile::ParseUrl ; (; const char * ; url, . TString & ; archive, . TString & ; member, . TString & ; type . ). staticprotected . Try to determine if url contains an anchor specifying an archive member. ; Returns kFALSE in case of an error. ; Definition at line 149 of file TArchiveFile.cxx. ◆ SetCurrentMember(). virtual Int_t TArchiveFile::SetCurrentMember ; (; ). pure virtual . Implemented in TZIPFile. ◆ SetMember() [1/2]. Int_t TArchiveFile::SetMember ; (; const char * ; member). virtual . Explicitely make the specified member the current member. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 88 of file TArchiveFile.cxx. ◆ SetMember() [2/2]. Int_t TArchiveFile::SetMember ; (; Int_t ; idx). virtual . Explicitely make the member with the specified index the current member. ; Returns -1 in case of error, 0 otherwise. ; Definition at line 100 of file TArchiveFile.cxx. ◆ Streamer(). void TArchiveFile::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TZIPFile. ◆ StreamerNVirtual(). void TArchiveFile::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file TArchiveFile.h. Member Data Documentation. ◆ fArchiveName. TString TArchiveFile::fArchiveName. protected . Archive file name. ; Definition at line 31 of file TArchiveFile.h. ◆ fCurMember. TArchiveMember* TArchiveFile::fCurMember. protected . Current archive member. ; Definition at line 36 of file TArchiveFile.h. ◆ fFile. TFile* TArchiveFile::fFile. protected . File stream used to access the archive. ; Definition at line 34 of file TArchiveFile.h. ◆ fMemberIndex. Int_t TArchiveFile::fMemberIndex. protected . Index of sub-file in archive. ; Definition at line 33 of file TArchiveFile.h. ◆ fMemberName.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArchiveFile.html:16518,error,error,16518,doc/master/classTArchiveFile.html,https://root.cern,https://root.cern/doc/master/classTArchiveFile.html,1,['error'],['error']
Availability,"or==(const RSampleInfo &other) const { return fID == other.fID; }; 128 bool operator!=(const RSampleInfo &other) const { return !(*this == other); }; 129};; 130 ; 131/// The type of a data-block callback, registered with an RDataFrame computation graph via e.g. \ref; 132/// ROOT::RDF::RInterface< Proxied, DS_t >::DefinePerSample ""DefinePerSample()"" or by certain actions (e.g. \ref; 133/// ROOT::RDF::RInterface<Proxied,DataSource>::Snapshot ""Snapshot()"").; 134using SampleCallback_t = std::function<void(unsigned int, const ROOT::RDF::RSampleInfo &)>;; 135 ; 136} // namespace RDF; 137} // namespace ROOT; 138 ; 139#endif; RSample.hxx; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; Rtypes.h; idOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize idDefinition TGWin32VirtualXProxy.cxx:94; ROOT::RDF::Experimental::RMetaData::GetSstd::string GetS(const std::string &key) constReturn the metadata value of type string given the key, or an error if the metadata value is of a non...Definition RMetaData.cxx:96; ROOT::RDF::Experimental::RMetaData::GetDdouble GetD(const std::string &key) constReturn the metadata value of type double given the key, or an error if the metadata value is of a non...Definition RMetaData.cxx:84; ROOT::RDF::Experimental::RMetaData::GetIint GetI(const std::string &key) constReturn the metadata value of type int given the key, or an error if the metadata value is of a non-in...Definition RMetaData.cxx:73; ROOT::RDF::Experimental::RSampleClass representing a sample which is a grouping of trees and their fileglobs, and,...Definition RSample.hxx:39; ROOT::RDF::Experimental::RSample::GetSampleNameconst std::string & GetSampleName() constGet the name of the sample (RSample object).Definition RSample.cxx:75; ROOT::RDF::Experimental::RSample::GetMetaDataconst RMetaData & GetMetaData() constGet an instance of the RMetaData class.Definition RSample.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RSampleInfo_8hxx_source.html:5742,error,error,5742,doc/master/RSampleInfo_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RSampleInfo_8hxx_source.html,1,['error'],['error']
Availability,"orAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Int_t Merge(TCollection* list); Adds all graphs with errors from the collection to this graph.; Returns the total number of poins in the result or -1 in case of an error. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphErrors.html:19861,error,error,19861,root/html602/TGraphErrors.html,https://root.cern,https://root.cern/root/html602/TGraphErrors.html,2,['error'],['error']
Availability,"orAllocate(); Constructor allocate.; Note: This function should be called only from the constructor; since it does not delete previously existing arrays. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with errors. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end]. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorXlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYhigh(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorYlow(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t ex, Double_t ey); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t ex, Double_t ey); Set ex and ey values for point number i. void Streamer(TBuffer& ); Stream an object of class TGraphErrors. void SwapPoints(Int_t pos1, Int_t pos2); Swap points. Double_t ** Allocate(Int_t size). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. » Author: Rene Brun 15/09/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphErrors.html:19372,error,error,19372,root/html534/TGraphErrors.html,https://root.cern,https://root.cern/root/html534/TGraphErrors.html,1,['error'],['error']
Availability,"orAnna Kreshuk ; Definition at line 2277 of file TMath.cxx. ◆ FDistI(). Double_t TMath::FDistI ; (; Double_t ; F, . Double_t ; N, . Double_t ; M . ). Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ; This function occurs in the statistical test of whether two observed samples have the same variance. For this test a certain statistic F, the ratio of observed dispersion of the first sample to that of the second sample, is calculated. N and M stand for numbers of degrees of freedom in the samples 1-FDistI() is the significance level at which the hypothesis ""1 has smaller variance than 2"" can be rejected. A small numerical value of 1 - FDistI() implies a very significant rejection, in turn implying high confidence in the hypothesis ""1 has variance greater than 2"".; AuthorAnna Kreshuk ; Definition at line 2297 of file TMath.cxx. ◆ Finite() [1/2]. Int_t TMath::Finite ; (; Double_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 770 of file TMath.h. ◆ Finite() [2/2]. Int_t TMath::Finite ; (; Float_t ; x). inline . Check if it is finite with a mask in order to be consistent in presence of fast math. ; Inspired from the CMSSW FWCore/Utilities package ; Definition at line 800 of file TMath.h. ◆ Floor(). Double_t TMath::Floor ; (; Double_t ; x). inline . Rounds x downward, returning the largest integral value that is not greater than x. ; Definition at line 680 of file TMath.h. ◆ FloorNint(). Int_t TMath::FloorNint ; (; Double_t ; x). inline . Returns the nearest integer of TMath::Floor(x). ; Definition at line 686 of file TMath.h. ◆ Freq(). Double_t TMath::Freq ; (; Double_t ; x). Computation of the normal frequency function freq(x). ; Freq(x) = (1/sqrt(2pi)) Integral(exp(-t^2/2))dt between -infinity and x.; Translated from CERNLIB C300 by Rene Brun. ; Definition at line 270 of file TMath.cxx. ◆ G()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:41786,mask,mask,41786,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['mask'],['mask']
Availability,"orCounters() ;; 252 setTraceCounter(0) ;; 253}; 254 ; 255 ; 256 ; 257////////////////////////////////////////////////////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig) {; 268 _specGeneratorConfig = std::make_unique<RooNumGenConfig>(*other._specGeneratorConfig);; 269 }; 270}; 271 ; 272 ; 273 ; 274////////////////////////////////////////////////////////////////////////////////; 275/// Destructor; 276 ; 277RooAbsPdf::~RooAbsPdf(); 278{; 279}; 280 ; 281 ; 282double RooAbsPdf::normalizeWithNaNPacking(double rawVal, double normVal) const {; 283 ; 284 if (normVal < 0. || (normVal == 0. && rawVal != 0)) {; 285 //Unreasonable normalisations. A zero integral can be tolerated if the function vanishes, though.; 286 const std::string msg = ""p.d.f normalization integral is zero or negative: "" + std::to_string(normVal);; 287 logEvalError(msg.c_str());; 288 clearValueAndShapeDirty();; 289 return RooNaNPacker::packFloatIntoNaN(-normVal + (rawVal < 0. ? -rawVal : 0.));; 290 }; 291 ; 292 if (rawVal < 0.) {; 293 logEvalError(Form(""p.d.f value is less than zero (%f), trying to recover"", rawVal));; 294 clearValueAndShapeDirty();; 295 return RooNaNPacker::packFloatIntoNaN(-rawVal);; 296 }; 297 ; 298 if (TMath::IsNaN(rawVal)) {; 299 logEvalError(""p.d.f value is Not-a-Number"");; 300 clearValueAndShapeDirty();; 301 return rawVal;; 302 }; 303 ; 304 return (rawVal == 0. && normVal == 0.) ? 0. : rawVal / normVal;; 305}; 306 ; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Return current value, normalized by integrating over; 310/// the observables in `nset`. If `nset` is 0, the unnormalized value; 311/// is returned. All ele",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:10762,toler,tolerated,10762,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['toler'],['tolerated']
Availability,"orD xx )"", because for optim, the input in your function definition must be a single vector.; The Gradient is formed by; \( \frac{\partial f}{\partial x} = -400x(y - x^{2}) - 2(1 - x) \); \( \frac{\partial f}{\partial y} = 200(y - x^{2}); \); The ""TVectorD RosenBrockGrad(const TVectorD xx )"" function must have a single vector as the argument a it will return a single vetor.; #include<TRInterface.h>; ; //in the next function the pointer *double must be changed by TVectorD, because the pointer has no; //sense in R's environment.; Double_t RosenBrock(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; const Double_t tmp1 = y-x*x;; const Double_t tmp2 = 1-x;; return 100*tmp1*tmp1+tmp2*tmp2;; }; ; TVectorD RosenBrockGrad(const TVectorD xx ); {; const Double_t x = xx[0];; const Double_t y = xx[1];; TVectorD grad(2);; grad[0]=-400 * x * (y - x * x) - 2 * (1 - x);; grad[1]=200 * (y - x * x);; return grad;; }; ; ; void Minimization(); {; ROOT::R::TRInterface &r=ROOT::R::TRInterface::Instance();; //passing RosenBrock function to R; r[""RosenBrock""]<<ROOT::R::TRFunctionExport(RosenBrock);; ; //passing RosenBrockGrad function to R; r[""RosenBrockGrad""]<<ROOT::R::TRFunctionExport(RosenBrockGrad);; ; //the option ""method"" could be ""Nelder-Mead"", ""BFGS"", ""CG"", ""L-BFGS-B"", ""SANN"",""Brent""; //the option ""control"" lets you put some constraints like:; //""maxit"" The maximum number of iterations; //""abstol"" The absolute convergence tolerance.; //""reltol"" Relative convergence tolerance.; r<<""result <- optim( c(0.01,0.01), RosenBrock,method='BFGS',control = list(maxit = 1000000) )"";; ; //Getting results from R; TVectorD min=r.Eval(""result$par"");; ; std::cout.precision(8);; //printing results; std::cout<<""-----------------------------------------""<<std::endl;; std::cout<<""Minimum x=""<<min[0]<<"" y=""<<min[1]<<std::endl;; std::cout<<""Value at minimum =""<<RosenBrock(min)<<std::endl;; ; //using the gradient; r<<""optimHess(result$par, RosenBrock, RosenBrockGrad)"";; r<<""hre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html:2442,toler,tolerance,2442,doc/master/classROOT_1_1R_1_1TRFunctionExport.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRFunctionExport.html,1,['toler'],['tolerance']
Availability,"orFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with assymetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2D;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:130981,error,error,130981,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['error'],['error']
Availability,"orFrame;  CTGMdiFrame;  CTGMdiFrameList;  CTGMdiGeometry;  CTGMdiHorizontalWinResizer;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:157512,error,error,157512,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['error'],['error']
Availability,"orHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TGLParametric.h>. Inheritance diagram for TGLParametricEquation:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Painter_t. typedef std::unique_ptr<TGLHistPainter> TGLParametricEquation::Painter_t. private . Definition at line 51 of file TGLParametric.h. ◆ Ptr_t. typedef std::unique_ptr<TF2> TGLParametricEquation::Ptr_t. private . Definition at line 37 of file TGLParametric.h. Constructor & Destructor Documentation. ◆ TGLParametricEquation() [1/3]. TGLParametricEquation::TGLParametricEquation ; (; const TString & ; name, . const TString & ; xFun, . const TString & ; yFun, . const TString & ; zFun, . Double_t ; uMin, . Double_t ; uMax, . Double_t ; vMin, . Double_t ; vMax . ). Surface is defined by three strings. ; ROOT does not use exceptions in ctors, so, I have to use MakeZombie to let external user know about errors. ; Definition at line 123 of file TGLParametric.cxx. ◆ TGLParametricEquation() [2/3]. TGLParametricEquation::TGLParametricEquation ; (; const TString & ; name, . ParametricEquation_t ; equation, . Double_t ; uMin, . Double_t ; uMax, . Double_t ; vMin, . Double_t ; vMax . ). Surface defined by user's function (see ParametricEquation_t declaration in TGLParametricEquation.h) ; Definition at line 171 of file TGLParametric.cxx. ◆ TGLParametricEquation() [3/3]. TGLParametricEquation::TGLParametricEquation ; (; const TGLParametricEquation & ; ). private . Member Function Documentation. ◆ Class(). static TClass * TGLParametricEquation::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLParametricEquation::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLParametricEquation::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLParametricEquation.html:14357,error,errors,14357,doc/master/classTGLParametricEquation.html,https://root.cern,https://root.cern/doc/master/classTGLParametricEquation.html,1,['error'],['errors']
Availability,"orOneDimOptions::DefaultIntegratorType(), epsabs, epsrel);; 2644 if (a != - TMath::Infinity() && b != TMath::Infinity()); 2645 result = iod.Integral(a, b);; 2646 else if (a == - TMath::Infinity() && b != TMath::Infinity()); 2647 result = iod.IntegralLow(b);; 2648 else if (a != - TMath::Infinity() && b == TMath::Infinity()); 2649 result = iod.IntegralUp(a);; 2650 else if (a == - TMath::Infinity() && b == TMath::Infinity()); 2651 result = iod.Integral();; 2652 error = iod.Error();; 2653 status = iod.Status();; 2654 }; 2655 if (status != 0) {; 2656 std::string igName = ROOT::Math::IntegratorOneDim::GetName(ROOT::Math::IntegratorOneDimOptions::DefaultIntegratorType());; 2657 Warning(""IntegralOneDim"", ""Error found in integrating function %s in [%f,%f] using %s. Result = %f +/- %f - status = %d"", GetName(), a, b, igName.c_str(), result, error, status);; 2658 TString msg(""\t\tFunction Parameters = {"");; 2659 for (int ipar = 0; ipar < GetNpar(); ++ipar) {; 2660 msg += TString::Format("" %s = %f "", GetParName(ipar), GetParameter(ipar));; 2661 if (ipar < GetNpar() - 1) msg += TString("","");; 2662 else msg += TString(""}"");; 2663 }; 2664 Info(""IntegralOneDim"", ""%s"", msg.Data());; 2665 }; 2666 return result;; 2667}; 2668 ; 2669////////////////////////////////////////////////////////////////////////////////; 2670/// Return Error on Integral of a parametric function between a and b; 2671/// due to the parameter uncertainties and their covariance matrix from the fit.; 2672/// In addition to the integral limits, this method takes as input a pointer to the fitted parameter values; 2673/// and a pointer the covariance matrix from the fit. These pointers should be retrieved from the; 2674/// previously performed fit using the TFitResult class.; 2675/// Note that to get the TFitResult, te fit should be done using the fit option `S`.; 2676/// Example:; 2677/// ~~~~{.cpp}; 2678/// TFitResultPtr r = histo->Fit(func, ""S"");; 2679/// func->IntegralError(x1,x2,r->GetParams(), r->GetCovarianceMatr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:98782,error,error,98782,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['error'],['error']
Availability,"orPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_t S;  . #include <TMVA/ExpectedErrorPruneTool.h>. Inheritance diagram for TMVA::ExpectedErrorPruneTool:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ExpectedErrorPruneTool(). TMVA::Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:2040,error,error,2040,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,2,['error'],['error']
Availability,"orT<double>&Apply(const TElementActionT<double>& action); TVectorT<double>&Apply(const TElementPosActionT<double>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetLwb() const; double*GetMatrixArray(); const double*GetMatrixArray() const; virtual const char*TObject::GetName() const; Int_tGetNoElements() const; Int_tGetNrows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TVectorT<double>GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const; TVectorT<double>&GetSub(Int_t row_lwb, Int_t row_upb, TVectorT<double>& target, Option_t* option = ""S"") const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVectorT_double_.html:2950,error,error,2950,root/html528/TVectorT_double_.html,https://root.cern,https://root.cern/root/html528/TVectorT_double_.html,6,['error'],['error']
Availability,"orY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 671 of file TGraphErrors.cxx. ◆ GetEX(). Double_t * TGraphErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 69 of file TGraphErrors.h. ◆ GetEY(). Double_t * TGraphErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 70 of file TGraphErrors.h. ◆ IsA(). TClass * TGraphErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Reimplemented in TGraphPolar.; Definition at line 78 of file TGraphErrors.h. ◆ Merge(). Int_t TGraphErrors::Merge ; (; TCollection * ; li). overridevirtual . Adds all graphs with errors from the collection to this graph. ; Returns the total number of points in the result or -1 in case of an error. ; Reimplemented from TGraph.; Definition at line 682 of file TGraphErrors.cxx. ◆ operator=(). TGraphErrors & TGraphErrors::operator= ; (; const TGraphErrors & ; gr). TGraphErrors assignment operator. ; Definition at line 184 of file TGraphErrors.cxx. ◆ Print(). void TGraphErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 711 of file TGraphErrors.cxx. ◆ SavePrimitive(). void TGraphErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 722 of file TGraphErrors.cxx. ◆ Scale(). void TGraphErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphErrors by a cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:43686,error,errors,43686,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['errors']
Availability,"or[32]Information about all colors; Pixel_tTGFrame::fBackgroundframe background color; ColorStruct_t*fBgColorBackground color of the HTML document; TImage*fBgImageBackground image; Int_tTGFrame::fBorderWidthframe border width; TGViewFrame*TGView::fCanvasframe containing the text; TGClient*TGObject::fClientConnection to display server; Atom_tTGView::fClipboardclipboard property; Long_tfColorUsedbit N is 1 if color N is in use. Only; TStringTGWidget::fCommandcommand to be executed; Cursor_tfCursorCurrent cursor for window, or None.; Int_tTGFrame::fDNDStateEDNDFlags; intfDirtyBottomBottom right corner of region to redraw; intfDirtyLeftTop left corner of region to redraw. These; intfDirtyRightBottom right corner of region to redraw; intfDirtyTopTop left corner of region to redraw. These; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; intfExitingTrue if the widget is being destroyed; intfExportSelectionTrue if the selection is automatically; TGRectangleTGView::fExposedRegionexposed area; SHtmlExtensions_t*fExtsPointer to user extension data; TGFrameElement*TGFrame::fFEpointer to frame element; ColorStruct_t*fFgColorColor of normal text. apColor[0]; TGHtmlBlock*fFirstBlockList of all TGHtmlBlock tokens; TGHtmlInput*fFirstInputFirst <INPUT> element; intfFlagsVarious flags; see below for definitions.; charfFontValid[9]If bit N%8 of work N/8 of this field is 0; TGHtmlInput*fFormElemLastMost recent <input>, <textarea> or <select>; TGHtmlInput*fFormElemStartMost recent <textarea> or <select>; intfFormPaddingAmount to pad form elements by; TGHtmlForm*fFormStartMost recent <form>; intfGcNextToFree; intfHasFramesTRUE if we can do frames for this page; intfHasScriptTRUE if we can do scripts for this page; UInt_tTGFrame::fHeightframe height; ColorStruct_t*fHighlightBgColorPtrColor for drawing traversal highlight; ColorStruct_t*fHighlightColorPtrColor for drawing traversal highlight.; intfHighlightWidthWidth in pixels o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHtml.html:25613,mask,mask,25613,root/html602/TGHtml.html,https://root.cern,https://root.cern/root/html602/TGHtml.html,2,['mask'],['mask']
Availability,"or\(<\)double\(>\)&, unsigned int); Constructor for the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.6.2 MnMigrad(const FCNBase&, const MnUserParameters&, unsigned int); Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.6.3 MnMigrad(const FCNBase&, const MnUserParameterState&, const MnStrategy&); Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.6.4 operator(); [api:migradop] MnMigrad::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. The optional argument \(\mbox{maxfcn}\) specifies the (approximate) maximum number of function calls after which the calculation will be stopped even if it has not yet converged. The optional argument \(\mbox{tolerance}\) specifies the required tolerance on the function value at the minimum. The default \(\mbox{tolerance}\) value is \(0.1\), and the minimization will stop when the estimated vertical distance to the minimum (\(\mbox{EDM}\)) is less than \(0.001*\)\(\mbox{tolerance}\)\(*\)\(\mbox{up}\) (see [howto:errordef]).; 5.6.5 Parameter interaction; MnMigrad retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface.; 5.6.6 VariableMetricMinimizer(); The VariableMetricMinimizer is instantiated using default constructor.; 5.6.7 minimize(const FCNBase&, …); The VariableMetricMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.7 MnMinimize and CombinedMinimizer; [api",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:48775,toler,tolerance,48775,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,4,['toler'],['tolerance']
Availability,"orage.googleapis.com/bucket/path/to/my/file; gshttp://storage.googleapis.com/bucket/path/to/my/file; gsthttps://storage.googleapis.com/bucket/path/to/my/file; The 'as3' scheme is accepted for backwards compatibility but its usage is deprecated.; The recommended way to create an instance of this class is through TFile::Open, for instance:; ++; TFile* f1 = TFile::Open(""s3://host.example.com/bucket/path/to/my/file""); TFile* f2 = TFile::Open(""gs://storage.googleapis.com/bucket/path/to/my/file""); TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; f1TF1 * f1Definition legend1.C:11; The specified scheme (i.e. s3, s3http, s3https, ...) determines the underlying transport protocol to use for downloading the file contents, namely HTTP or HTTPS. The 's3', 's3https', 'gs' and 'gshttps' schemes imply using HTTPS as the transport protocol. The 's3http', 'as3' and 'gshttp' schemes imply using HTTP as the transport protocol.; The 'options' argument can contain 'NOPROXY' if you want to bypass the HTTP proxy when retrieving this file's contents. As for any TWebFile-derived object, the URL of the web proxy can be specified by setting an environmental variable 'http_proxy'. If this variable is set, we ask that proxy to route our requests HTTP(S) requests to the file server.; In addition, you can also use the 'options' argument to provide the access key and secret key to be used for authentication purposes for this file by using a string of the form ""AUTH=myAccessKey:mySecretkey"". This may be useful to open several files hosted by different providers in the same program/macro, where the environemntal variables solution is not convenient (see below).; To use AWS temporary security c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTS3WebFile.html:48882,down,downloading,48882,doc/master/classTS3WebFile.html,https://root.cern,https://root.cern/doc/master/classTS3WebFile.html,1,['down'],['downloading']
Availability,"ordHeader(). Int_t TTreeCacheUnzip::GetRecordHeader ; (; char * ; buf, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header from the buffer buf. ; That must be the pointer tho the header part not the object by itself and must contain data of at least maxbytes Returns nread;; In output arguments:. nbytes : number of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header. Note that the arguments objlen and keylen are returned only if maxbytes >=16 Note: This was adapted from TFile... so some things dont apply ; Definition at line 469 of file TTreeCacheUnzip.cxx. ◆ GetUnzipBuffer(). Int_t TTreeCacheUnzip::GetUnzipBuffer ; (; char ** ; buf, . Long64_t ; pos, . Int_t ; len, . bool * ; free . ). overridevirtual . We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ; pos and len are the original values as were passed to ReadBuffer but instead we will return the inflated buffer. Note!! : If *buf == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer ; Reimplemented from TFileCacheRead.; Definition at line 668 of file TTreeCacheUnzip.cxx. ◆ GetUnzipGroupSize(). Int_t TTreeCacheUnzip::GetUnzipGroupSize ; (; ). inline . Definition at line 142 of file TTreeCacheUnzip.h. ◆ Init(). void TTreeCacheUnzip::Init ; (; ). private . Initialization procedure common to all the constructors. ; Definition at line 196 of file TTreeCacheUnzip.cxx. ◆ IsA(). TClass * TTreeCacheUnzip::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TTreeCache.; Definition at line 159 of file TTreeCacheUnzip.h. ◆ IsParallelUnzip(). bool TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:30769,failure,failure,30769,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,1,['failure'],['failure']
Availability,"ordHeader(). Int_t TTreeCacheUnzip::GetRecordHeader ; (; char * ; buf, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header from the buffer buf. ; That must be the pointer tho the header part not the object by itself and must contain data of at least maxbytes Returns nread;; In output arguments:. nbytes : number of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header. Note that the arguments objlen and keylen are returned only if maxbytes >=16 Note: This was adapted from TFile... so some things dont apply ; Definition at line 470 of file TTreeCacheUnzip.cxx. ◆ GetUnzipBuffer(). Int_t TTreeCacheUnzip::GetUnzipBuffer ; (; char ** ; buf, . Long64_t ; pos, . Int_t ; len, . bool * ; free . ). overridevirtual . We try to read a buffer that has already been unzipped Returns -1 in case of read failure, 0 in case it's not in the cache and n>0 in case read from cache (number of bytes copied). ; pos and len are the original values as were passed to ReadBuffer but instead we will return the inflated buffer. Note!! : If *buf == 0 we will allocate the buffer and it will be the responsibility of the caller to free it... it is useful for example to pass it to the creator of TBuffer ; Reimplemented from TFileCacheRead.; Definition at line 669 of file TTreeCacheUnzip.cxx. ◆ GetUnzipGroupSize(). Int_t TTreeCacheUnzip::GetUnzipGroupSize ; (; ). inline . Definition at line 142 of file TTreeCacheUnzip.h. ◆ Init(). void TTreeCacheUnzip::Init ; (; ). private . Initialization procedure common to all the constructors. ; Definition at line 196 of file TTreeCacheUnzip.cxx. ◆ IsA(). TClass * TTreeCacheUnzip::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TTreeCache.; Definition at line 159 of file TTreeCacheUnzip.h. ◆ IsParallelUnzip(). bool TTree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCacheUnzip.html:30773,failure,failure,30773,doc/master/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/master/classTTreeCacheUnzip.html,1,['failure'],['failure']
Availability,"ordef]) should be \(1.0\). If the \(\mbox{FCN}\) is a negative-log-likelihood function, then the one-standard-deviation value for FCNBase::up() to return is \(0.5\). If the \(\mbox{FCN}\) is a chisquare, but the user wants two-standard-deviation errors, then FCNBase::up() should return \(= 4.0\), etc.; Note that in the usual case where M is being used to perform a fit to some experimental data, the parameter errors will be proportional to the uncertainty in the data, and therefore meaningful parameter errors cannot be obtained unless the measurement errors of the data are known. In the common case of a least-squares fit, \(\mbox{FCN}\) is usually defined as a chisquare:; \[\chi^2 (\alpha) = \sum_{i=1}^{n} (\frac{f(x_i,\alpha) - m_i)^2}{\sigma_i^2}\]; where \(\alpha\) is the vector of free parameters being fitted, and the \(\sigma_i\) are the uncertainties in the individual measurements \(m_i\). If these uncertainties are not known, and are simply left out of the calculation, then the fit may still have meaning, but not the quantitative values of the resulting parameter errors. (Only the relative errors of different parameters with respect to each other may be meaningful.); If the \(\sigma_i\) are all overestimated by a factor \(\beta\), then the resulting parameter errors from the fit will be overestimated by the same factor \(\beta\).; 2.5.2 The error matrix; The M processors \(\mbox{MIGRAD}\) (MnMigrad, see [api:migrad]) and HESSE (MnHesse, see [api:hesse]) (normally) produce an error matrix. This matrix is twice the inverse of the matrix of second derivatives of the \(\mbox{FCN}\), transformed if necessary into external coordinate space2, and multiplied by FCNBase::up(). Therefore, errors based on the M error matrix take account of all the parameter correlations, but not the non-linearities. That is, from the error matrix alone, two-standard-deviation errors are always exactly twice as big as one-standard-deviation errors.; When the error matrix has been calculat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:20516,error,errors,20516,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['errors']
Availability,"order as the tags.; 921 /// \param[in] inputColumns the names of the columns to be passed to the callable.; 922 /// \param[in] variationTags names for each of the varied values, e.g. `""up""` and `""down""`.; 923 /// \param[in] variationName a generic name for this set of varied values, e.g. `""ptvariation""`; 924 ///; 925 /// This overload of Vary takes a list of column names as first argument and; 926 /// requires that the expression returns an RVec of RVecs of values: one inner RVec for the variations of each; 927 /// affected column. The `variationTags` are defined as `{""down"", ""up""}`.; 928 ///; 929 /// Example usage:; 930 /// ~~~{.cpp}; 931 /// // produce variations ""ptAndEta:down"" and ""ptAndEta:up""; 932 /// auto nominal_hx =; 933 /// df.Vary({""pt"", ""eta""}, // the columns that will vary simultaneously; 934 /// [](double pt, double eta) { return RVec<RVecF>{{pt*0.9, pt*1.1}, {eta*0.9, eta*1.1}}; },; 935 /// {""pt"", ""eta""}, // inputs to the Vary expression, independent of what columns are varied; 936 /// {""down"", ""up""}, // variation tags; 937 /// ""ptAndEta"") // variation name; 938 /// .Histo1D(""pt"", ""eta"");; 939 ///; 940 /// auto hx = ROOT::RDF::Experimental::VariationsFor(nominal_hx);; 941 /// hx[""nominal""].Draw();; 942 /// hx[""ptAndEta:down""].Draw(""SAME"");; 943 /// hx[""ptAndEta:up""].Draw(""SAME"");; 944 /// ~~~; 945 ///; 946 /// \sa This Vary() overload for more information.; 947 ; 948 template <typename F>; 949 RInterface<Proxied, DS_t>; 950 Vary(const std::vector<std::string> &colNames, F &&expression, const ColumnNames_t &inputColumns,; 951 const std::vector<std::string> &variationTags, std::string_view variationName); 952 {; 953 return VaryImpl<false>(colNames, std::forward<F>(expression), inputColumns, variationTags, variationName);; 954 }; 955 ; 956 /// \brief Register systematic variations for multiple existing columns using custom variation tags.; 957 /// \param[in] colNames set of names of the columns for which varied values are provided.; 958 /// \param[in] exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:50845,down,down,50845,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['down'],['down']
Availability,"order. ; Reimplemented from TVirtualX.; Definition at line 961 of file TGCocoa.mm. ◆ DestroyWindow(). void TGCocoa::DestroyWindow ; (; Window_t ; id). overridevirtual . Destroys the window ""id"" as well as all of its subwindows. ; The window should never be referenced again. If the window specified by the ""id"" argument is mapped, it is unmapped automatically. ; Reimplemented from TVirtualX.; Definition at line 903 of file TGCocoa.mm. ◆ DisplayName(). const char * TGCocoa::DisplayName ; (; const char * ; ). overridevirtual . Returns hostname on which the display is opened. ; Reimplemented from TVirtualX.; Definition at line 510 of file TGCocoa.mm. ◆ DrawLine(). void TGCocoa::DrawLine ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). overridevirtual . Uses the components of the specified GC to draw a line between the specified set of points (x1, y1) and (x2, y2). ; GC components in use: function, plane-mask, line-width, line-style, cap-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, and clip-mask.; GC mode-dependent components: foreground, background, tile, stipple, tile-stipple-x-origin, tile-stipple-y-origin, dash-offset, dash-list. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Reimplemented in TGQuartz.; Definition at line 1737 of file TGCocoa.mm. ◆ DrawLineAux(). void TGCocoa::DrawLineAux ; (; Drawable_t ; wid, . const GCValues_t & ; gcVals, . Int_t ; x1, . Int_t ; y1, . Int_t ; x2, . Int_t ; y2 . ). Definition at line 1697 of file TGCocoa.mm. ◆ DrawRectangle(). void TGCocoa::DrawRectangle ; (; Drawable_t ; id, . GContext_t ; gc, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Draws rectangle outlines of [x,y] [x+w,y] [x+w,y+h] [x,y+h]. ; GC components in use: function, plane-mask, line-width, line-style, cap-style, join-style, fill-style, subwindow-mode, clip-x-origin, clip-y-origin, clip-mask. GC mode-dependent components: foreground, background,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:72846,mask,mask,72846,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['mask'],['mask']
Availability,"ordinates when available (default is true); 55 bool fAsymErrors; ///< use asymmetric errors in the value when available, selecting them according to the on sign of residual (default is true); 56 ; 57 ; 58};; 59 ; 60 } // end namespace Fit; 61 ; 62} // end namespace ROOT; 63 ; 64 ; 65#endif /* ROOT_Fit_DataOptions */; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fAsymErrorsbool fAsymErrorsuse asymmetric errors in the value when available, selecting them according to the on sign of residua...Definition DataOptions.h:55; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::DataOptionsDataOptions()Default constructor: use the default options.Definition DataOptions.h:34; ROOT::Fit::DataOptions::fBinVolumeboo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataOptions_8h_source.html:2944,error,errors,2944,doc/master/DataOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/DataOptions_8h_source.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"ore common, since otherwise you; wouldn't need limits), the very meaning of parameter errors becomes; problematic. Mathematically, since the limit is an absolute constraint on; the parameter, a parameter at its limit has no error, at least in one; direction. The error matrix, which can assign only symmetric errors, then; becomes essentially meaningless. Interpretation of Parameter Errors:. There are two kinds of problems that can arise: the reliability of; MINUIT's error estimates, and their statistical interpretation, assuming; they are accurate. Statistical interpretation:. For discussuion of basic concepts, such as the meaning of the elements of; the error matrix, or setting of exact confidence levels see:. F.James.; Determining the statistical Significance of experimental Results.; Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked CURRENT GUESS ERROR are only working values; not to be believed, and APPROXIMATE ERROR means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:7729,error,error,7729,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['error']
Availability,"ore content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; void Copy (TObject &hnew) const override;  Copy this histogram structure to newth1. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:27686,error,errors,27686,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"ore iterating; 5465/// through all of the bins.; 5466///; 5467/// \param pAxis the axis to consider; 5468/// \param nPixels the number of pixels to render axis into; 5469/// \param isLog whether the axis is log scale; 5470 ; 5471std::vector<THistRenderingRegion>; 5472THistPainter::ComputeRenderingRegions(TAxis* pAxis, Int_t nPixels, Bool_t isLog); 5473{; 5474 std::vector<THistRenderingRegion> regions;; 5475 ; 5476 enum STRATEGY { Bins, Pixels } strategy;; 5477 ; 5478 Int_t nBins = (pAxis->GetLast() - pAxis->GetFirst() + 1);; 5479 ; 5480 if (nBins >= nPixels) {; 5481 // more bins than pixels... we should loop over pixels and sample; 5482 strategy = Pixels;; 5483 } else {; 5484 // fewer bins than pixels... we should loop over bins; 5485 strategy = Bins;; 5486 }; 5487 ; 5488 if (isLog) {; 5489 ; 5490 Double_t xMin = pAxis->GetBinLowEdge(pAxis->GetFirst());; 5491 Int_t binOffset=0;; 5492 while (xMin <= 0 && ((pAxis->GetFirst()+binOffset) != pAxis->GetLast()) ) {; 5493 binOffset++;; 5494 xMin = pAxis->GetBinLowEdge(pAxis->GetFirst()+binOffset);; 5495 }; 5496 if (xMin <= 0) {; 5497 // this should cause an error if we have; 5498 return regions;; 5499 }; 5500 Double_t xMax = pAxis->GetBinUpEdge(pAxis->GetLast());; 5501 ; 5502 if (strategy == Bins) {; 5503 // logarithmic plot. we find the pixel for the bin; 5504 // pixel = eta * log10(V) - alpha; 5505 // where eta = nPixels/(log10(Vmax)-log10(Vmin)); 5506 // and alpha = nPixels*log10(Vmin)/(log10(Vmax)-log10(Vmin)); 5507 // and V is axis value; 5508 Double_t eta = (nPixels-1.0)/(TMath::Log10(xMax) - TMath::Log10(xMin));; 5509 Double_t offset = -1.0 * eta * TMath::Log10(xMin);; 5510 ; 5511 for (Int_t bin=pAxis->GetFirst()+binOffset; bin<=pAxis->GetLast(); bin++) {; 5512 ; 5513 // linear plot. we simply need to find the appropriate bin; 5514 // for the; 5515 Double_t xLowValue = pAxis->GetBinLowEdge(bin);; 5516 Double_t xUpValue = pAxis->GetBinUpEdge(bin);; 5517 Int_t xPx0 = eta*TMath::Log10(xLowValue)+ offset;; 5518 Int_t xPx1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:205540,error,error,205540,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"ore provides two algorithms for the evaluation of the complex error function (the default CERNlib C335 algorithm, and a faster, look-up-table based method). By default, RooVoigtian employs the default (CERNlib) algorithm. Select the faster algorithm either in the constructor, or with the selectFastAlgorithm() method.; NoteThe ""width"" parameter that determines the Breit-Wigner shape represents the full width at half maximum (FWHM) of the Breit-Wigner (often referred to as \(\Gamma\) or \(2\gamma\)). ; Definition at line 22 of file RooVoigtian.h. Public Member Functions;  RooVoigtian ();  ;  RooVoigtian (const char *name, const char *title, RooAbsReal &_x, RooAbsReal &_mean, RooAbsReal &_width, RooAbsReal &_sigma, bool doFast=false);  Construct a RooVoigtian PDF, which represents the convolution of a Breit-Wigner with a Gaussian. ;  ;  RooVoigtian (const RooVoigtian &other, const char *name=nullptr);  ; TObject * clone (const char *newname) const override;  ; TClass * IsA () const override;  ; void selectDefaultAlgorithm ();  Disable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void selectFastAlgorithm ();  Enable the fast evaluation of the complex error function using look-up tables (default is the ""slow"" CERNlib algorithm). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVoigtian.html:1577,error,error,1577,doc/master/classRooVoigtian.html,https://root.cern,https://root.cern/doc/master/classRooVoigtian.html,1,['error'],['error']
Availability,"ore requesting the GetPx() member functions. tree->Draw(""This->GetReadEntry()"");. You can refer to the tree (or chain) containing the data by using the string ‘This’. You can also call any TTree methods. Next example will display the name of the first ‘user info’ object:; tree->Draw(""This->GetUserInfo()->At(0)->GetName()"");. tree->Draw(""mybr.mystring"");. TString and std::string object are plotted directly. The example 45 draws the same results - i.e. an histogram whose labels are the string value of ‘mystring’:; tree->Draw(""mybr.mystring.c_str()"");; or; tree->Draw(""mybr.mytstring.Data()"");. tree->Draw(""myTimeStamp"");. You can plot plot objects of any class which has either AsDouble or AsString (AsDouble has priority). For such a class (for example TTimeStamp), the line 46 will plot the same as:; tree->Draw(""myTimeStamp.AsDouble"");; AsString can be returning either a char*, or a TString or an std::string.; 12.20.8 Multiple variables visualisation; This section presents the visualization technique available in ROOT to represent multiple variables (>4) data sets.; 12.20.8.1 Spider (Radar) Plots; Spider plots (sometimes called “web-plots” or “radar plots”) are used to compare series of data points (events). They use the human ability to spot un-symmetry. Example of spider plot. Variables are represented on individual axes displayed along a circle. For each variable the minimum value sits on the circle’s center, and the maximum on the circle’s radius. Spider plots are not suitable for an accurate graph reading since, by their nature, it can be difficult to read out very detailed values, but they give quickly a global view of an event in order to compare it with the others. In ROOT the spider plot facility is accessed from the tree viewer GUI. The variables to be visualized are selected in the tree viewer and can be scanned using the spider plot button. The tree viewer Graphical User Interface and the Spider Plot Editor. The spider plot graphics editor provides two tabs to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:608735,avail,available,608735,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,ore sum of squares of weights per bin. ; This is needed to compute the correct statistical quantities of a profile filled with weights; This function is automatically called when the histogram is created if the static function TH1::SetDefaultSumw2 has been called before. If flag is false the structure is deleted ; Reimplemented from TH1.; Definition at line 2043 of file TProfile2D.cxx. Friends And Related Symbol Documentation. ◆ TH1Merger. friend class TH1Merger. friend . Definition at line 31 of file TProfile2D.h. ◆ TProfileHelper. friend class TProfileHelper. friend . Definition at line 30 of file TProfile2D.h. Member Data Documentation. ◆ fBinEntries. TArrayD TProfile2D::fBinEntries. protected . Number of entries per bin. ; Definition at line 34 of file TProfile2D.h. ◆ fBinSumw2. TArrayD TProfile2D::fBinSumw2. protected . Array of sum of squares of weights per bin. ; Definition at line 41 of file TProfile2D.h. ◆ fErrorMode. EErrorType TProfile2D::fErrorMode. protected . Option to compute errors. ; Definition at line 35 of file TProfile2D.h. ◆ fgApproximate. Bool_t TProfile2D::fgApproximate = kFALSE. staticprotected . Bin error approximation option. ; Definition at line 42 of file TProfile2D.h. ◆ fScaling. Bool_t TProfile2D::fScaling. protected . ! True when TProfile2D::Scale is called ; Definition at line 38 of file TProfile2D.h. ◆ fTsumwz. Double_t TProfile2D::fTsumwz. protected . Total Sum of weight*Z. ; Definition at line 39 of file TProfile2D.h. ◆ fTsumwz2. Double_t TProfile2D::fTsumwz2. protected . Total Sum of weight*Z*Z. ; Definition at line 40 of file TProfile2D.h. ◆ fZmax. Double_t TProfile2D::fZmax. protected . Upper limit in Z (if set) ; Definition at line 37 of file TProfile2D.h. ◆ fZmin. Double_t TProfile2D::fZmin. protected . Lower limit in Z (if set) ; Definition at line 36 of file TProfile2D.h. Libraries for TProfile2D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TProfile2D.h; hist/hist/src/TP,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:107441,error,errors,107441,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['errors']
Availability,"ore the graphics function, does not draw the histogram with the function after fitting. . ""0"" Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions. . ""R"" Fit using a fitting range specified in the function range with TF1::SetRange. . ""B"" Use this option when you want to fix one or more parameters and the fitting function is a predefined one (e.g gaus, expo,..), otherwise in case of pre-defined functions, some default initial values and limits are set. . ""C"" In case of linear fitting, do no calculate the chisquare (saves CPU time). . ""G"" Uses the gradient implemented in TF1::GradientPar for the minimization. This allows to use Automatic Differentiation when it is supported by the provided TF1 function. . ""EX0"" When fitting a TGraphErrors or TGraphAsymErrors do not consider errors in the X coordinates . ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust (resistant) regression), using the default fraction of good points ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points . This function is used for fitting also the derived TGraph classes such as TGraphErrors or TGraphAsymmErrors. See the note below on how the errors are used when fitting a TGraphErrors or TGraphAsymmErrors.; The fitting of the TGraph, i.e simple data points without any error associated, is performed using the un-weighted least-square (chi-square) method. TGraphErrors fit:; In case of a TGraphErrors or TGraphAsymmErrors object, when x errors are present, the error along x, is projected along the y-direction by calculating the function at the points x-ex_low and x+ex_high, where ex_low and ex_high are the corresponding lower and upper error in x. The chi-square is then computed as the sum of the quantity below at each data point:. \[; \frac{(y-f(x))^{2}}{ey^{2}+(\frac{1}{2}(exl+exh)f'(x))^{2}}; \]. where x and y are the point c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph.html:49509,robust,robust,49509,doc/master/classTGraph.html,https://root.cern,https://root.cern/doc/master/classTGraph.html,1,['robust'],['robust']
Availability,"oreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char *name, const char* title, RooAbsPdf& extPdf, RooDataSet& xydata, RooRealVar& yvar, Bool_t integrate). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:38629,error,errors,38629,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['error'],"['error', 'errors']"
Availability,"orials/roofit/rf306_condpereventerrors.C File Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. rf306_condpereventerrors.C File ReferenceTutorials » RooFit Tutorials. Detailed Description; Multidimensional models: conditional pdf with per-event errors . ; #include ""RooRealVar.h""; #include ""RooDataSet.h""; #include ""RooGaussian.h""; #include ""RooGaussModel.h""; #include ""RooDecay.h""; #include ""RooLandau.h""; #include ""RooPlot.h""; #include ""TCanvas.h""; #include ""TAxis.h""; #include ""TH1.h""; using namespace RooFit;; ; void rf306_condpereventerrors(); {; // B - p h y s i c s p d f w i t h p e r - e v e n t G a u s s i a n r e s o l u t i o n; // ----------------------------------------------------------------------------------------------; ; // Observables; RooRealVar dt(""dt"", ""dt"", -10, 10);; RooRealVar dterr(""dterr"", ""per-event error on dt"", 0.01, 10);; ; // Build a gaussian resolution model scaled by the per-event error = gauss(dt,bias,sigma*dterr); RooRealVar bias(""bias"", ""bias"", 0, -10, 10);; RooRealVar sigma(""sigma"", ""per-event error scale factor"", 1, 0.1, 10);; RooGaussModel gm(""gm1"", ""gauss model scaled bt per-event error"", dt, bias, sigma, dterr);; ; // Construct decay(dt) (x) gauss1(dt|dterr); RooRealVar tau(""tau"", ""tau"", 1.548);; RooDecay decay_gm(""decay_gm"", ""decay"", dt, tau, gm, RooDecay::DoubleSided);; ; // C o n s t r u c t f a k e ' e x t e r n a l ' d a t a w i t h p e r - e v e n t e r r o r; // ------------------------------------------------------------------------------------------------------; ; // Use landau pdf to get somewhat realistic distribution with long tail; RooLandau pdfDtErr(""pdfDtErr"", ""pdfDtErr"", dterr, 1.0, 0.25);; std::unique_ptr<RooDataSet> expDataDterr{pdfDtErr.generate(dterr, 10000)};; ; // S a m p l e d a t a f r o m c o n d i t i o n a l d e c a y _ g m ( d t | d t e r r ); // ---------------------------------------------------------------------------------------------; ; // Specify external ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf306__condpereventerrors_8C.html:975,error,error,975,doc/master/rf306__condpereventerrors_8C.html,https://root.cern,https://root.cern/doc/master/rf306__condpereventerrors_8C.html,2,['error'],['error']
Availability,"original redirected""; 2792 "" file) (errno: %d)"", TSystem::GetErrno());; 2793 rc = -1;; 2794 }; 2795 if (close(xh->fStdErrDup) != 0) {; 2796 SysError(""RedirectOutput"",; 2797 ""problems closing temporary 'err' descriptor %d (errno: %d)"",; 2798 TSystem::GetErrno(), xh->fStdErrDup);; 2799 rc = -1;; 2800 }; 2801 }; 2802 // Reset the static instance, if using that; 2803 if (xh == &loch); 2804 xh->Reset();; 2805 }; 2806 return rc;; 2807}; 2808 ; 2809//---- dynamic loading and linking ---------------------------------------------; 2810 ; 2811////////////////////////////////////////////////////////////////////////////////; 2812///dynamic linking of module; 2813 ; 2814Func_t TUnixSystem::DynFindSymbol(const char * /*module*/, const char *entry); 2815{; 2816 return TSystem::DynFindSymbol(""*"", entry);; 2817}; 2818 ; 2819////////////////////////////////////////////////////////////////////////////////; 2820/// Load a shared library. Returns 0 on successful loading, 1 in; 2821/// case lib was already loaded and -1 in case lib does not exist; 2822/// or in case of error.; 2823 ; 2824int TUnixSystem::Load(const char *module, const char *entry, Bool_t system); 2825{; 2826 return TSystem::Load(module, entry, system);; 2827}; 2828 ; 2829////////////////////////////////////////////////////////////////////////////////; 2830/// Unload a shared library.; 2831 ; 2832void TUnixSystem::Unload(const char *module); 2833{; 2834 if (module) { TSystem::Unload(module); }; 2835}; 2836 ; 2837////////////////////////////////////////////////////////////////////////////////; 2838/// List symbols in a shared library.; 2839 ; 2840void TUnixSystem::ListSymbols(const char * /*module*/, const char * /*regexp*/); 2841{; 2842 Error(""ListSymbols"", ""not yet implemented"");; 2843}; 2844 ; 2845////////////////////////////////////////////////////////////////////////////////; 2846/// List all loaded shared libraries.; 2847 ; 2848void TUnixSystem::ListLibraries(const char *regexp); 2849{; 2850 TSystem::ListLibraries(reg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:89245,error,error,89245,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"original; 1431 // file, the fPidOffset is to be added to those values to correctly find the; 1432 // TProcessID. This fPidOffset needs to be increment if the key/basket is copied; 1433 // and need to be zero for new key/basket.; 1434 Long64_t pdir = (((Long64_t)fPidOffset)<<kPidOffsetShift) | (kPidOffsetMask & fSeekPdir);; 1435 b << pdir;; 1436 } else {; 1437 b << (Int_t)fSeekKey;; 1438 b << (Int_t)fSeekPdir;; 1439 }; 1440 if (TestBit(kIsDirectoryFile)) {; 1441 // We want to record ""TDirectory"" instead of TDirectoryFile so that the file can be read by ancient version of ROOT.; 1442 b.WriteTString(gTDirectoryString);; 1443 } else {; 1444 fClassName.Streamer(b);; 1445 }; 1446 fName.Streamer(b);; 1447 fTitle.Streamer(b);; 1448 }; 1449}; 1450 ; 1451////////////////////////////////////////////////////////////////////////////////; 1452/// Write the encoded object supported by this key.; 1453/// The function returns the number of bytes committed to the file.; 1454/// If a write error occurs, the number of bytes returned is -1.; 1455 ; 1456Int_t TKey::WriteFile(Int_t cycle, TFile* f); 1457{; 1458 if (!f) f = GetFile();; 1459 if (!f) return -1;; 1460 ; 1461 Int_t nsize = fNbytes;; 1462 char *buffer = fBuffer;; 1463 if (cycle) {; 1464 fCycle = cycle;; 1465 FillBuffer(buffer);; 1466 buffer = fBuffer;; 1467 }; 1468 ; 1469 if (fLeft > 0) nsize += sizeof(Int_t);; 1470 f->Seek(fSeekKey);; 1471 Bool_t result = f->WriteBuffer(buffer,nsize);; 1472 //f->Flush(); Flushing takes too much time.; 1473 // Let user flush the file when they want.; 1474 if (gDebug) {; 1475 std::cout <<"" TKey Writing ""<<nsize<< "" bytes at address ""<<fSeekKey; 1476 <<"" for ID= "" <<GetName()<<"" Title= ""<<GetTitle()<<std::endl;; 1477 }; 1478 ; 1479 DeleteBuffer();; 1480 return result==kTRUE ? -1 : nsize;; 1481}; 1482 ; 1483////////////////////////////////////////////////////////////////////////////////; 1484/// Write the encoded object supported by this key.; 1485/// The function returns the number of bytes commi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:51602,error,error,51602,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['error'],['error']
Availability,"originator];; 3440 evalErrorList.first = origName ;; 3441 evalErrorList.second.push_back(ee) ;; 3442 }; 3443 ; 3444 ; 3445 inLogEvalError = false ;; 3446}; 3447 ; 3448 ; 3449 ; 3450////////////////////////////////////////////////////////////////////////////////; 3451/// Log evaluation error message. Evaluation errors may be routed through a different; 3452/// protocol than generic RooFit warning message (which go straight through RooMsgService); 3453/// because evaluation errors can occur in very large numbers in the use of likelihood; 3454/// evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); 3455/// messages reported through this function are not printed but all stored in a list,; 3456/// along with server values at the time of reporting. Error messages logged in this; 3457/// way can be printed in a structured way, eliminating duplicates and with the ability; 3458/// to truncate the list by printEvalErrors. This is the standard mode of error logging; 3459/// during MINUIT operations. If enableEvalErrorLogging() is false, all errors; 3460/// reported through this method are passed for immediate printing through RooMsgService.; 3461/// A string with server names and values is constructed automatically for error logging; 3462/// purposes, unless a custom string with similar information is passed as argument.; 3463 ; 3464void RooAbsReal::logEvalError(const char* message, const char* serverValueString) const; 3465{; 3466 if (evalErrorData().mode == Ignore) {; 3467 return ;; 3468 }; 3469 ; 3470 if (evalErrorData().mode == CountErrors) {; 3471 evalErrorData().count++ ;; 3472 return ;; 3473 }; 3474 ; 3475 static bool inLogEvalError = false ;; 3476 ; 3477 if (inLogEvalError) {; 3478 return ;; 3479 }; 3480 inLogEvalError = true ;; 3481 ; 3482 EvalError ee ;; 3483 ee.setMessage(message) ;; 3484 ; 3485 if (serverValueString) {; 3486 ee.setServerValues(serverValueString) ;; 3487 } else {; 3488 std::string srvval ;; 3489 std::ostringstream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:148381,error,error,148381,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['error'],['error']
Availability,"oringWriter(const char* name, Double_t value); virtual~TVirtualMonitoringWriter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualMonitoringWriter.html:1475,error,error,1475,root/html528/TVirtualMonitoringWriter.html,https://root.cern,https://root.cern/root/html528/TVirtualMonitoringWriter.html,4,['error'],['error']
Availability,"orithm is lock-free (\""Hogwild!\""-style) for each cycle. \n \; 1519 \n \; 1520 Options: \n \; 1521 \""Layout\"": \n \; 1522 - example: \""TANH|(N+30)*2,TANH|(N+30),LINEAR\"" \n \; 1523 - meaning: \n \; 1524 . two hidden layers (separated by \"",\"") \n \; 1525 . the activation function is TANH (other options: RELU, SOFTSIGN, LINEAR) \n \; 1526 . the activation function for the output layer is LINEAR \n \; 1527 . the first hidden layer has (N+30)*2 nodes where N is the number of input neurons \n \; 1528 . the second hidden layer has N+30 nodes, where N is the number of input neurons \n \; 1529 . the number of nodes in the output layer is determined by the number of output nodes \n \; 1530 and can therefore not be chosen freely. \n \; 1531 \n \; 1532 \""ErrorStrategy\"": \n \; 1533 - SUMOFSQUARES \n \; 1534 The error of the neural net is determined by a sum-of-squares error function \n \; 1535 For regression, this is the only possible choice. \n \; 1536 - CROSSENTROPY \n \; 1537 The error of the neural net is determined by a cross entropy function. The \n \; 1538 output values are automatically (internally) transformed into probabilities \n \; 1539 using a sigmoid function. \n \; 1540 For signal/background classification this is the default choice. \n \; 1541 For multiclass using cross entropy more than one or no output classes \n \; 1542 can be equally true or false (e.g. Event 0: A and B are true, Event 1: \n \; 1543 A and C is true, Event 2: C is true, ...) \n \; 1544 - MUTUALEXCLUSIVE \n \; 1545 In multiclass settings, exactly one of the output classes can be true (e.g. either A or B or C) \n \; 1546 \n \; 1547 \""WeightInitialization\"" \n \; 1548 - XAVIER \n \; 1549 [recommended] \n \; 1550 \""Xavier Glorot & Yoshua Bengio\""-style of initializing the weights. The weights are chosen randomly \n \; 1551 such that the variance of the values of the nodes is preserved for each layer. \n \; 1552 - XAVIERUNIFORM \n \; 1553 The same as XAVIER, but with uniformly distributed weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:56533,error,error,56533,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['error'],['error']
Availability,orithm) ; Definition at line 239 of file FitConfig.cxx. ◆ MinimizerOptions(). ROOT::Math::MinimizerOptions & ROOT::Fit::FitConfig::MinimizerOptions ; (; ). inline . access to the minimizer control parameter (non const method) ; Definition at line 167 of file FitConfig.h. ◆ MinimizerType(). const std::string & ROOT::Fit::FitConfig::MinimizerType ; (; ); const. inline . return type of minimizer package ; Definition at line 187 of file FitConfig.h. ◆ MinosErrors(). bool ROOT::Fit::FitConfig::MinosErrors ; (; ); const. inline . do minos errors analysis on the parameters ; Definition at line 208 of file FitConfig.h. ◆ MinosParams(). const std::vector< unsigned int > & ROOT::Fit::FitConfig::MinosParams ; (; ); const. inline . return vector of parameter indices for which the Minos Error will be computed ; Definition at line 218 of file FitConfig.h. ◆ NormalizeErrors(). bool ROOT::Fit::FitConfig::NormalizeErrors ; (; ); const. inline . flag to check if resulting errors are be normalized according to chi2/ndf ; Definition at line 202 of file FitConfig.h. ◆ NPar(). unsigned int ROOT::Fit::FitConfig::NPar ; (; ); const. inline . number of parameters settings ; Definition at line 96 of file FitConfig.h. ◆ operator=(). FitConfig & ROOT::Fit::FitConfig::operator= ; (; const FitConfig & ; rhs). Definition at line 62 of file FitConfig.cxx. ◆ ParabErrors(). bool ROOT::Fit::FitConfig::ParabErrors ; (; ); const. inline . do analysis for parabolic errors ; Definition at line 205 of file FitConfig.h. ◆ ParamsSettings() [1/2]. std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ). inline . get the vector of parameter settings (non-const method) ; Definition at line 91 of file FitConfig.h. ◆ ParamsSettings() [2/2]. const std::vector< ROOT::Fit::ParameterSettings > & ROOT::Fit::FitConfig::ParamsSettings ; (; ); const. inline . get the vector of parameter settings (const method) ; Definition at line 86 of file FitConfig.h. ◆ ParamsValues(). std::vector< d,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:7122,error,errors,7122,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,1,['error'],['errors']
Availability,"orkDir ; (; ); const. inline . Definition at line 908 of file TProof.h. ◆ GoAsynchronous(). void TProof::GoAsynchronous ; (; ). Send GOASYNC message to the master. ; Definition at line 6267 of file TProof.cxx. ◆ GoMoreParallel(). Int_t TProof::GoMoreParallel ; (; Int_t ; nWorkersToAdd). private . Add nWorkersToAdd workers to current list of workers. ; This function is works on the master only, and only when an analysis is ongoing. A message is sent back to the client when we go ""more"" parallel. Returns -1 on error, number of total (not added!) workers on success. ; Definition at line 7170 of file TProof.cxx. ◆ GoParallel(). Int_t TProof::GoParallel ; (; Int_t ; nodes, . Bool_t ; attach = kFALSE, . Bool_t ; random = kFALSE . ). private . Go in parallel mode with at most ""nodes"" slaves. ; Since the fSlaves list is sorted by slave performace the active list will contain first the most performant nodes. Returns the number of active slaves. If random is TRUE, and nodes is less than the number of available workers, a random selection is done. Returns -1 in case of error. ; Definition at line 7273 of file TProof.cxx. ◆ HandleInputMessage(). Int_t TProof::HandleInputMessage ; (; TSlave * ; sl, . TMessage * ; mess, . Bool_t ; deactonfail = kFALSE . ). private . Analyze the received message. ; Returns 0 on success (1 if this the last message from this socket), -1 if any failure occurs. ; Definition at line 3105 of file TProof.cxx. ◆ HandleLibIncPath(). void TProof::HandleLibIncPath ; (; const char * ; what, . Bool_t ; add, . const char * ; dirs . ). protected . Handle lib, inc search paths modification request. ; Definition at line 8998 of file TProof.cxx. ◆ HandleOutputOptions(). Int_t TProof::HandleOutputOptions ; (; TString & ; opt, . TString & ; target, . Int_t ; action . ). protected . Extract from opt information about output handling settings. ; The understood keywords are: of=<file>, outfile=<file> output file location ds=<dsname>, dataset=<dsname> dataset name ('of' a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:108457,avail,available,108457,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['avail'],['available']
Availability,"orker thread connection array"";; 20108 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20109 ; 20110 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20111 mg_snprintf(NULL,; 20112 NULL, /* No truncation check for error buffers */; 20113 error->text,; 20114 error->text_buffer_size,; 20115 ""%s"",; 20116 err_msg);; 20117 }; 20118 free_context(ctx);; 20119 pthread_setspecific(sTlsKey, NULL);; 20120 return NULL;; 20121 }; 20122 ; 20123#if defined(ALTERNATIVE_QUEUE); 20124 ctx->client_wait_events =; 20125 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20126 sizeof(ctx->client_wait_events[0]),; 20127 ctx);; 20128 if (ctx->client_wait_events == NULL) {; 20129 const char *err_msg = ""Not enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey, NULL);; 20143 return NULL;; 20144 }; 20145 ; 20146 ctx->client_socks =; 20147 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20148 sizeof(ctx->client_socks[0]),; 20149 ctx);; 20150 if (ctx->client_socks == NULL) {; 20151 const char *err_msg = ""Not enough memory for worker socket array"";; 20152 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20153 mg_free(ctx->client_wait_events);; 20154 mg_free(ctx->worker_threadids);; 20155 ; 20156 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20157 mg_snprintf(NULL,; 20158 NULL, /* No truncation check for error buffers */; 20159 error->text,; 20160 error->text_buffer_size,; 20161 ""%s"",; 20162 err_msg);; 20163 }; 20164 free_context(ctx);; 20165 pthread_setspecific(sTlsKey, NULL);; 20166 return NULL;; 20167 }; 20168 ; 20169 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20170 ctx->client_wait_events[i] = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:601930,error,error,601930,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"orker thread connection array"";; 20109 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20110 ; 20111 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20112 mg_snprintf(NULL,; 20113 NULL, /* No truncation check for error buffers */; 20114 error->text,; 20115 error->text_buffer_size,; 20116 ""%s"",; 20117 err_msg);; 20118 }; 20119 free_context(ctx);; 20120 pthread_setspecific(sTlsKey, NULL);; 20121 return NULL;; 20122 }; 20123 ; 20124#if defined(ALTERNATIVE_QUEUE); 20125 ctx->client_wait_events =; 20126 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20127 sizeof(ctx->client_wait_events[0]),; 20128 ctx);; 20129 if (ctx->client_wait_events == NULL) {; 20130 const char *err_msg = ""Not enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey, NULL);; 20144 return NULL;; 20145 }; 20146 ; 20147 ctx->client_socks =; 20148 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20149 sizeof(ctx->client_socks[0]),; 20150 ctx);; 20151 if (ctx->client_socks == NULL) {; 20152 const char *err_msg = ""Not enough memory for worker socket array"";; 20153 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20154 mg_free(ctx->client_wait_events);; 20155 mg_free(ctx->worker_threadids);; 20156 ; 20157 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20158 mg_snprintf(NULL,; 20159 NULL, /* No truncation check for error buffers */; 20160 error->text,; 20161 error->text_buffer_size,; 20162 ""%s"",; 20163 err_msg);; 20164 }; 20165 free_context(ctx);; 20166 pthread_setspecific(sTlsKey, NULL);; 20167 return NULL;; 20168 }; 20169 ; 20170 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20171 ctx->client_wait_events[i] = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:601963,error,error,601963,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"orker); Long64_tfSizebest knowledge of the log file size; Long64_tfToend offset of the current content; static Long64_tfgMaxTransferSize. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLogElem(const char* ord, const char* url, TProofLog* logger); Constructor. ~TProofLogElem(); Destructor. Long64_t GetMaxTransferSize(); Get max transfer size. void SetMaxTransferSize(Long64_t maxsz); Set max transfer size. Int_t Retrieve(TProofLog::ERetrieveOpt opt = TProofLog::kTrailing, const char* pattern = 0); Retrieve the content of the associated file. The approximate number; of lines to be retrieved is given by 'lines', with the convention that; 0 means 'all', a positive number means the first 'lines' and a negative; number means the last '-lines'. Default is -1000.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(Int_t from = 0, Int_t to = -1); Display the current content starting from line 'from' to line 'to'; inclusive.; A negative value for 'from' indicates lines counted from the end; (tail action); 'to' is ignored in such a case.; TProofLog::Prt is called to display: the location (screen, file, box); is defined there.; Return 0 on success, -1 in case of any error. void Print(Option_t* opt = 0) const; Print a line with the relevant info. void Prt(const char* what); Special printing procedure. Int_t Grep(const char* txt, TString& res, Int_t from = 0); Search lines containing 'txt', starting from line 'from'. Return; their blanck-separated list into 'res'.; Return the number of lines found, or -1 in case of error. TProofLogElem(const char* ord, const char* url, TProofLog* logger); the name of TProofLogElem is the ordinal number of the corresp. worker; the title is the url. TMacro * GetMacro() const; { return fMacro; }. const char * GetRole(); { return fRole",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:7629,error,error,7629,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,2,['error'],['error']
Availability,"orkers is kTRUE, the macro is loaded on unique workers only, and collection is not done; if uniqueWorkers is kFALSE, collection from the previous request is done, and broadcasting + collection from the other workers is done. The wrks arg can be used on the master to limit the set of workers. Returns 0 in case of success and -1 in case of error. ; Reimplemented in TProofLite.; Definition at line 8628 of file TProof.cxx. ◆ LoadPackage(). Int_t TProof::LoadPackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; loadopts = 0, . TList * ; workers = 0 . ). private . Load specified package. ; Executes the PROOF-INF/SETUP.C script on all active nodes. If notOnClient = true, don't load package on the client. The default is to load the package also on the client. The argument 'loadopts' specify a list of objects to be passed to the SETUP. The objects in the list must be streamable; the SETUP macro will be executed like this: SETUP.C(loadopts). Returns 0 in case of success and -1 in case of error. ; Definition at line 8069 of file TProof.cxx. ◆ LogMessage(). void TProof::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Log a message into the appropriate window by emitting a signal. ; Definition at line 6414 of file TProof.cxx. ◆ LogViewer(). void TProof::LogViewer ; (; const char * ; url = 0, . Int_t ; sessionidx = 0 . ). static . Start the log viewer window usign the plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). privat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:115467,error,error,115467,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"orkers.; Returns 0 in case of success and -1 in case of error.; Provided for backward compatibility. Int_t EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify options for the loading step via 'loadopts';; the string will be passed passed as argument to SETUP.; Special option 'chkv=<o>' (or 'checkversion=<o>') can be used to control; plugin version checking during building: possible choices are:; off no check; failure may occur at loading; on check ROOT version [default]; svn check ROOT version and Git commit SHA1.; (Use ';', ' ' or '|' to separate 'chkv=<o>' from the rest.); If specified, enables packages only on the specified workers.; Returns 0 in case of success and -1 in case of error. Int_t EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Enable specified package. Executes the PROOF-INF/BUILD.sh; script if it exists followed by the PROOF-INF/SETUP.C script.; In case notOnClient = true, don't enable the package on the client.; The default is to enable packages also on the client.; It is is possible to specify a list of objects to be passed to the SETUP; functions via 'loadopts'; the objects must be streamable.; Returns 0 in case of success and -1 in case of error. Int_t DownloadPackage(const char* par, const char* dstdir = 0); Download a PROOF archive (PAR file) from the master package repository.; The PAR file is downloaded in the current directory or in the directory; specified by 'dstdir'. If a package with the same name already exists; at destination, a check on the MD5 sum is done and the user warned or; prompted for action, depending is the file is equal or different.; Returns 0 in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:77437,error,error,77437,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['error'],['error']
Availability,"orld safety calls ;  ;  TGeoNavigator (TGeoManager *geom);  Constructor. ;  ;  ~TGeoNavigator () override;  Destructor. ;  ; void BuildCache (Bool_t dummy=kFALSE, Bool_t nodeid=kFALSE);  Builds the cache for physical nodes and global matrices. ;  ; Bool_t cd (const char *path="""");  Browse the tree of nodes starting from top node according to pathname. ;  ; void CdDown (Int_t index);  Make a daughter of current node current. ;  ; void CdDown (TGeoNode *node);  Make a daughter of current node current. ;  ; void CdNext ();  Do a cd to the node found next by FindNextBoundary. ;  ; void CdNode (Int_t nodeid);  Change current path to point to the node having this id. ;  ; void CdTop ();  Make top level node the current node. ;  ; void CdUp ();  Go one level up in geometry. ;  ; Bool_t CheckPath (const char *path) const;  Check if a geometry path is valid without changing the state of the navigator. ;  ; TGeoNode * CrossBoundaryAndLocate (Bool_t downwards, TGeoNode *skipnode);  Cross next boundary and locate within current node The current point must be on the boundary of fCurrentNode. ;  ; void DoBackupState ();  Backup the current state without affecting the cache stack. ;  ; void DoRestoreState ();  Restore a backed-up state without affecting the cache stack. ;  ; TGeoNode * FindNextBoundary (Double_t stepmax=TGeoShape::Big(), const char *path="""", Bool_t frombdr=kFALSE);  Find distance to next boundary and store it in fStep. ;  ; TGeoNode * FindNextBoundaryAndStep (Double_t stepmax=TGeoShape::Big(), Bool_t compsafe=kFALSE);  Compute distance to next boundary within STEPMAX. ;  ; TGeoNode * FindNextDaughterBoundary (Double_t *point, Double_t *dir, Int_t &idaughter, Bool_t compmatrix=kFALSE);  Computes as fStep the distance to next daughter of the current volume. ;  ; TGeoNode * FindNode (Bool_t safe_start=kTRUE);  Returns deepest node containing current point. ;  ; TGeoNode * FindNode (Double_t x, Double_t y, Double_t z);  Returns deepest node containing current point. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:2524,down,downwards,2524,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['down'],['downwards']
Availability,"orm), where norm; 6601/// is the desired normalization divided by the integral of the histogram.; 6602///; 6603/// If option contains ""width"" the bin contents and errors are divided; 6604/// by the bin width.; 6605 ; 6606void TH1::Scale(Double_t c1, Option_t *option); 6607{; 6608 ; 6609 TString opt = option; opt.ToLower();; 6610 // store bin errors when scaling since cannot anymore be computed as sqrt(N); 6611 if (!opt.Contains(""nosw2"") && GetSumw2N() == 0) Sumw2();; 6612 if (opt.Contains(""width"")) Add(this, this, c1, -1);; 6613 else {; 6614 if (fBuffer) BufferEmpty(1);; 6615 for(Int_t i = 0; i < fNcells; ++i) UpdateBinContent(i, c1 * RetrieveBinContent(i));; 6616 if (fSumw2.fN) for(Int_t i = 0; i < fNcells; ++i) fSumw2.fArray[i] *= (c1 * c1); // update errors; 6617 // update global histograms statistics; 6618 Double_t s[kNstat] = {0};; 6619 GetStats(s);; 6620 for (Int_t i=0 ; i < kNstat; i++) {; 6621 if (i == 1) s[i] = c1*c1*s[i];; 6622 else s[i] = c1*s[i];; 6623 }; 6624 PutStats(s);; 6625 SetMinimum(); SetMaximum(); // minimum and maximum value will be recalculated the next time; 6626 }; 6627 ; 6628 // if contours set, must also scale contours; 6629 Int_t ncontours = GetContour();; 6630 if (ncontours == 0) return;; 6631 Double_t* levels = fContour.GetArray();; 6632 for (Int_t i = 0; i < ncontours; ++i) levels[i] *= c1;; 6633}; 6634 ; 6635////////////////////////////////////////////////////////////////////////////////; 6636/// Returns true if all axes are extendable.; 6637 ; 6638Bool_t TH1::CanExtendAllAxes() const; 6639{; 6640 Bool_t canExtend = fXaxis.CanExtend();; 6641 if (GetDimension() > 1) canExtend &= fYaxis.CanExtend();; 6642 if (GetDimension() > 2) canExtend &= fZaxis.CanExtend();; 6643 ; 6644 return canExtend;; 6645}; 6646 ; 6647////////////////////////////////////////////////////////////////////////////////; 6648/// Make the histogram axes extendable / not extendable according to the bit mask; 6649/// returns the previous bit mask specifying which axes a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:260763,error,errors,260763,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"ormMagField(Double_t Bx, Double_t By, Double_t Bz); virtual~TGeoUniformMagField(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidField(const Double_t*, Double_t* B); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const Double_t*GetFieldValue() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoUniformMagField.html:1457,error,error,1457,root/html528/TGeoUniformMagField.html,https://root.cern,https://root.cern/root/html528/TGeoUniformMagField.html,4,['error'],['error']
Availability,"ormalization integral that was last used, if any. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Print multi line detailed information of this RooAbsPdf. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Interface function to create a generator context from a p.d.f. This default; implementation returns a 'standard' context that works for any p.d.f. RooDataSet * generate(const RooArgSet& whatVars, Int_t nEvents, const RooCmdArg& arg1,				const RooCmdArg& arg2, const RooCmdArg& arg3,const RooCmdArg& arg4, const RooCmdArg& arg5); Generate a new dataset containing the specified variables with events sampled from our distribution.; Generate the specified number of events or expectedEvents() if not specified. Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. The following named arguments are supported. Name(const char* name) -- Name of the output dataset; Verbose(Bool_t flag) -- Print informational messages during event generation; Extended() -- The actual number of events generated will be sampled from a Poisson distribution; with mu=nevt. For use with extended maximum likelihood fits; ProtoData(const RooDataSet& data, -- Use specified dataset as prototype dataset. If randOrder is set to true; Bool_t randOrder) the order of the events in the dataset will be read in a random order; if the requested number of events to be generated does not match the; number of events in the prototype dataset. If ProtoData() is used, the specified existing dataset as a prototype: the new dataset will contain; the same number of events as the prototype (unless otherwise specified), and any prototype variables not in; whatVars will be copied into the new dataset for each generated event an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:55957,error,error,55957,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['error'],['error']
Availability,"ormalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_over_argus_Int[m]_argusData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28877; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 4 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:8490,error,errors,8490,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,4,['error'],"['error', 'errors']"
Availability,"ormalized () const;  ; virtual Bool_t IsLinear () const;  ; virtual Bool_t IsValid () const;  Return kTRUE if the function is valid. ;  ; bool IsVectorized ();  ; virtual Double_t Mean (Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  ; virtual Double_t Moment (Double_t n, Double_t a, Double_t b, const Double_t *params=nullptr, Double_t epsilon=0.000001);  Return nth moment of function between a and b. ;  ; template<class T > ; T operator() (const T *x, const Double_t *params=nullptr);  ; virtual Double_t operator() (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  ; TF1 & operator= (const TF1 &rhs);  Operator =. ;  ; void Print (Option_t *option="""") const override;  This method must be overridden when a class wants to print itself. ;  ; virtual void ReleaseParameter (Int_t ipar);  Release parameter number ipar during a fit operation. ;  ; virtual void SetChisquare (Double_t chi2);  ; virtual void SetFitResult (const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr);  Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (with size fNpar) of the parameter indices in the FitResult can be passed This is useful in the case of a combined fit with different functions, and the FitResult contains the global result By default it is assume that indpar = {0,1,2,....,fNpar-1}. ;  ; template<typename Func > ; void SetFunction (Func f);  ; template<class PtrObj , typename MemFn > ; void SetFunction (PtrObj &p, MemFn memFn);  ; virtual void SetMaximum (Double_t maximum=-1111);  Set the maximum value along Y for this function In case the function is already drawn, set also the maximum in the helper histogram. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set the minimum value along Y for this function In case the function is already drawn, set also the minimum in the helper histogram. ;  ; virtual void SetNDF (Int_t ndf);  Set the number of degrees of freedom ndf shoul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:22301,error,errors,22301,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,2,['error'],['errors']
Availability,"ormation about fit parameters printed in the histogram statistics; 664box can be selected via the parameter mode. The parameter mode can be; 665`= pcev` (default `= 0111`); 666 ; 667 p = 1; print Probability; 668 c = 1; print Chisquare/Number of degrees of freedom; 669 e = 1; print errors (if e=1, v must be 1); 670 v = 1; print name/values of parameters; 671 ; 672Example:; 673 ; 674 gStyle->SetOptFit(1011);; 675 ; 676print fit probability, parameter names/values and errors.; 677 ; 6781. When `v = 1` is specified, only the non-fixed parameters are shown.; 6792. When `v = 2` all parameters are shown.; 680 ; 681Note: `gStyle->SetOptFit(1)` means ""default value"", so it is equivalent; 682to `gStyle->SetOptFit(111)`; 683 ; 684 ; 685\anchor HP09; 686### The error bars options; 687 ; 688 ; 689| Option | Description |; 690|----------|-------------------------------------------------------------------|; 691| ""E"" | Default. Shows only the error bars, not a marker.|; 692| ""E1"" | Small lines are drawn at the end of the error bars.|; 693| ""E2"" | Error rectangles are drawn.|; 694| ""E3"" | A filled area is drawn through the end points of the vertical error bars.|; 695| ""E4"" | A smoothed filled area is drawn through the end points of the vertical error bars.|; 696| ""E0"" | Draw error bars. Markers are drawn for bins with 0 contents. Combined with E1 or E2 it avoids error bars clipping|; 697| ""E5"" | Like E3 but ignore the bins with 0 contents.|; 698| ""E6"" | Like E4 but ignore the bins with 0 contents.|; 699| ""X0"" | When used with one of the ""E"" option, it suppress the error bar along X as `gStyle->SetErrorX(0)` would do.|; 700 ; 701Begin_Macro(source); 702{; 703 auto c1 = new TCanvas(""c1"",""c1"",600,400);; 704 auto he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; 705 for (int i=0; i<10000; i++) he->Fill(gRandom->Gaus(0,1));; 706 gStyle->SetEndErrorSize(3);; 707 gStyle->SetErrorX(1.);; 708 he->SetMarkerStyle(20);; 709 he->Draw(""E1"");; 710}; 711End_Macro; 71",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:30456,error,error,30456,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['error'],['error']
Availability,"orms the operation: this = this/(c1*f1) . ; This function is not implemented ; Reimplemented from TH1.; Definition at line 415 of file TProfile2D.cxx. ◆ DoProfile(). TProfile * TProfile2D::DoProfile ; (; bool ; onX, . const char * ; name, . Int_t ; firstbin, . Int_t ; lastbin, . Option_t * ; option . ); const. overrideprotectedvirtual . Implementation of ProfileX or ProfileY for a TProfile2D. ; Do correctly the combination of the bin averages when doing the projection ; Reimplemented from TH2.; Definition at line 1399 of file TProfile2D.cxx. ◆ ExtendAxis(). void TProfile2D::ExtendAxis ; (; Double_t ; x, . TAxis * ; axis . ). overridevirtual . Profile histogram is resized along axis such that x is in the axis range. ; The new axis limits are recomputed by doubling iteratively the current axis range until the specified value x is within the limits. The algorithm makes a copy of the histogram, then loops on all bins of the old histogram to fill the extended histogram. Takes into account errors (Sumw2) if any. The axis must be extendable before invoking this function.; Ex: h->GetXaxis()->SetCanExtend(kTRUE) ; Reimplemented from TH1.; Definition at line 1514 of file TProfile2D.cxx. ◆ Fill() [1/17]. Int_t TH2::Fill ; (; const char * ; namex, . Double_t ; w . ). inlineoverrideprotectedvirtual . Increment bin with namex with a weight w. ; if x is less than the low-edge of the first bin, the Underflow bin is incremented if x is equal to or greater than the upper edge of last bin, the Overflow bin is incremented; If the weight is not equal to 1, the storage of the sum of squares of weights is automatically triggered and the sum of the squares of weights is incremented by \( w^2 \) in the bin corresponding to x.; The function returns the corresponding bin number which has its content incremented by w. ; Reimplemented from TH2.; Definition at line 58 of file TH2.h. ◆ Fill() [2/17]. Int_t TH2::Fill ; (; const char * ; namex, . const char * ; namey, . Double_t ; w . ). protectedv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:77182,error,errors,77182,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,1,['error'],['errors']
Availability,"ormula is not a single object; The object type can be retrieved using by call EvalClass();. const char* EvalStringInstance(Int_t i = 0); Eval the instance as a string. Double_t EvalInstance(Int_t i = 0, const char** stringStack = 0); Evaluate this treeformula*-*-*-*-; *-* =========================. TFormLeafInfo * GetLeafInfo(Int_t code) const; -*-*Return DataMember corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. TLeaf * GetLeaf(Int_t n) const; -*-*Return leaf corresponding to serial number n; *-* ============================================. TMethodCall * GetMethodCall(Int_t code) const; -*-*Return methodcall corresponding to code; *-* =======================================. function called by TLeafObject::GetValue; with the value of fLookupType computed in TTreeFormula::DefinedVariable. Int_t GetNdata(); *-*Return number of available instances in the formula; *-* ===================================================. Double_t GetValueFromMethod(Int_t i, TLeaf* leaf) const; Return result of a leafobject method. void* GetValuePointerFromMethod(Int_t i, TLeaf* leaf) const; Return result of a leafobject method. Bool_t IsInteger(Bool_t fast = kTRUE) const; return TRUE if the formula corresponds to one single Tree leaf; and this leaf is short, int or unsigned short, int; When a leaf is of type integer or string, the generated histogram is forced; to have an integer bin width. Bool_t IsLeafInteger(Int_t code) const; return TRUE if the leaf corresponding to code is short, int or unsigned; short, int When a leaf is of type integer, the generated histogram is; forced to have an integer bin width. Bool_t IsString() const; return TRUE if the formula is a string. Bool_t IsString(Int_t oper) const; (fOper[i]>=105000 && fOper[i]<110000) || fOper[i] == kStrings). Bool_t IsLeafString(Int_t code) const; return TRUE if the leaf or data member correspon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:23929,avail,available,23929,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,3,['avail'],['available']
Availability,"orph.root with object name(s) 'pTV'; [#0] PROGRESS:Caching -- creating cache from getCache function for 0x97df860; [#0] PROGRESS:Caching -- current storage has size 3; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; [#1] INFO:DataHandling -- RooDataHist::adjustBinning(morph_dh_cHq3=0.01): fit range of variable pTV expanded to nearest bin boundaries: [10,600] --> [0,600]; [#1] INFO:InputArguments -- RooAbsData::plotOn(dh_SM_NPsq0) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:InputArguments -- RooAbsData::plotOn(dh_cHq3_NPsq1) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 24931.9 will supersede previous event count of 10852.3 for normalization of PDF projections; [#1] INFO:InputArguments -- RooAbsData::plotOn(dh_cHq3_NPsq2) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 29789.2 will supersede previous event count of 24931.9 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 18947.1 will supersede previous event count of 11104.6 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 30765.5 will supersede previous event count of 18947.1 for normalization of PDF projections; [#0] PROGRESS:Caching -- creating cache from getCache function for 0xa7ee9d0; [#0] PROGRESS:Caching -- current storage has size 3; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_SM_NPsq0_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html:7200,error,errors,7200,doc/master/rf711__lagrangianmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html,2,['error'],['errors']
Availability,"orr ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr, . Bool_t ; clearEmat = kTRUE . ). Covariance contribution from uncorrelated uncertainties of the response matrix. ; Parameters. [in,out]ematrixcovariance matrix histogram ; [in]binMapmapping of histogram bins ; [in]clearEmatif true, ematrix is cleared prior to adding this covariance matrix contribution. This method propagates the uncertainties of the response matrix histogram, specified with the constructor, to the unfolding result. It is assumed that the entries of that histogram are bin-to-bin uncorrelated. In many cases this corresponds to the ""Monte Carlo statistical uncertainties"". ; The array binMap is explained with the method GetOutput(). The flag clearEmat may be used to add covariance matrices from several uncertainty sources. ; Definition at line 760 of file TUnfoldSys.cxx. ◆ GetEmatrixTotal(). void TUnfoldSys::GetEmatrixTotal ; (; TH2 * ; ematrix, . const Int_t * ; binMap = nullptr . ). Get total error matrix, summing up all contributions. ; Parameters. [out]ematrixhistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins. the array binMap is explained with the method GetOutput(). ; Definition at line 1276 of file TUnfoldSys.cxx. ◆ GetRhoItotal(). void TUnfoldSys::GetRhoItotal ; (; TH1 * ; rhoi, . const Int_t * ; binMap = nullptr, . TH2 * ; invEmat = nullptr . ). Get global correlatiocn coefficients, summing up all contributions. ; Parameters. [out]rhoihistogram which will be filled ; [in]binMap(default=nullptr) remapping of histogram bins ; [out]invEmat(default=nullptr) inverse of error matrix. return the global correlation coefficients, including all error sources. If invEmat is nonzero, the inverse of the error matrix is returned in that histogram ; the array binMap is explained with the method GetOutput(). ; Definition at line 1401 of file TUnfoldSys.cxx. ◆ GetSummedErrorMatrixXX(). TMatrixDSparse * TUnfoldSys::GetSummedErrorMatrixXX ; (; void ; ). protected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:42711,error,error,42711,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['error']
Availability,"orr() [1/3]. const RooArgList * RooFitResult::globalCorr ; (; ). Return the list of all global correlations. ; Definition at line 454 of file RooFitResult.cxx. ◆ globalCorr() [2/3]. double RooFitResult::globalCorr ; (; const char * ; parname). Return the global correlation of the named parameter. ; Definition at line 430 of file RooFitResult.cxx. ◆ globalCorr() [3/3]. double RooFitResult::globalCorr ; (; const RooAbsArg & ; par). inline . Definition at line 137 of file RooFitResult.h. ◆ IsA(). TClass * RooFitResult::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 203 of file RooFitResult.h. ◆ isIdentical(). bool RooFitResult::isIdentical ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolCorr = 1e-4, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolCorrabsolute tolerance for correlation coefficients. ; [in]verboseIf this function will log to the standard output when comparisons fail. As the relative tolerance for the parameter errors, the default value of 1e-3 will be used. ; Definition at line 863 of file RooFitResult.cxx. ◆ isIdenticalNoCov(). bool RooFitResult::isIdenticalNoCov ; (; const RooFitResult & ; other, . double ; tol = 1e-6, . double ; tolErr = 1e-3, . bool ; verbose = true . ); const. Return true if this fit result is identical to other within tolerances, ignoring the correlation matrix. ; Parameters. [in]otherFit result to test against. ; [in]tolRelative tolerance for parameters and NLL. ; [in]tolErrRelative tolerance for parameter errors. ; [in]verboseIf this function will log to the standard output when comparisons fail. . Definition at line 801 of file RooFitResult.cxx. ◆ lastMinuitFit(). RooFitResult * RooFitResult::lastMinuitFit ; (; const RooArgList & ; varList = RooArgList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:29762,toler,tolerance,29762,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['toler'],['tolerance']
Availability,"orrect errors for weighted likelihood fits. If this option is activated, the; 1004 * corrected covariance matrix is calculated as \f$ V_\mathrm{corr} = V C^{-1} V \f$, where \f$ V \f$ is the original; 1005 * covariance matrix and \f$ C \f$ is the inverse of the covariance matrix calculated using the; 1006 * squared weights. This allows to switch between two interpretations of errors:; 1007 * <table>; 1008 * <tr><th> SumW2Error <th> Interpretation; 1009 * <tr><td> true <td> The errors reflect the uncertainty of the Monte Carlo simulation.; 1010 * Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; 1011 *; 1012 * **Example**: Simulation with 1000 events, the average weight is 0.1.; 1013 * The errors are as big as if one fitted to 1000 events.; 1014 * <tr><td> false <td> The errors reflect the errors of a dataset, which is as big as the sum of weights.; 1015 * Use this if you want to know what statistical errors you would get if you had a dataset with as many; 1016 * events as the (weighted) Monte Carlo simulation represents.; 1017 *; 1018 * **Example** (Data as above):; 1019 * The errors are as big as if one fitted to 100 events.; 1020 * </table>; 1021 * \note If the `SumW2Error` correction is enabled, the covariance matrix quality stored in the RooFitResult; 1022 * object will be the minimum of the original covariance matrix quality and the quality of the covariance; 1023 * matrix calculated with the squared weights.; 1024 * <tr><td> `AsymptoticError()` <td> Use the asymptotically correct approach to estimate errors in the presence of weights.; 1025 * This is slower but more accurate than `SumW2Error`. See also https://arxiv.org/abs/1911.01303).; 1026 This option even correctly implements the case of extended likelihood fits; 1027 (see this [writeup on extended weighted fits](https://root.cern/files/extended_weighted_fits.pdf) that complements the paper linked before).; 1028 * <tr><td> `PrefitDataFraction(double fract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:48412,error,errors,48412,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['error'],['errors']
Availability,"ors TGraphErrors, TH1 . TH1 TGraphErrors, TH1 . TGraph2D TGraph2DErrors, TH2 . TGraph2DErrors TGraph2DErrors, TH2 . TH2 TGraph2DErrors, TH2 . TH3 TH3 . Reimplemented from TVirtualFitter.; Definition at line 368 of file TBackCompFitter.cxx. ◆ GetCovarianceMatrix(). Double_t * TBackCompFitter::GetCovarianceMatrix ; (; ); const. overridevirtual . Get the error matrix in a pointer to a NxN array. ; excluding the fixed parameters ; Implements TVirtualFitter.; Definition at line 467 of file TBackCompFitter.cxx. ◆ GetCovarianceMatrixElement(). Double_t TBackCompFitter::GetCovarianceMatrixElement ; (; Int_t ; i, . Int_t ; j . ); const. overridevirtual . Get error matrix element (return all zero if matrix is not available) ; Implements TVirtualFitter.; Definition at line 498 of file TBackCompFitter.cxx. ◆ GetErrors(). Int_t TBackCompFitter::GetErrors ; (; Int_t ; ipar, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; globcc . ); const. overridevirtual . Get fit errors. ; Implements TVirtualFitter.; Definition at line 511 of file TBackCompFitter.cxx. ◆ GetFitConfig(). ROOT::Fit::FitConfig & TBackCompFitter::GetFitConfig ; (; ). inline . Get reference to Fit configuration (NOTE: it will be invalid when class is deleted) ; Definition at line 91 of file TBackCompFitter.h. ◆ GetFitData(). const ROOT::Fit::FitData & TBackCompFitter::GetFitData ; (; ); const. inline . Get reference to Fit Data object (NOTE: it will be invalid when class is deleted) ; Definition at line 100 of file TBackCompFitter.h. ◆ GetFitResult(). const ROOT::Fit::FitResult & TBackCompFitter::GetFitResult ; (; ); const. inline . Get reference to Fit Result object (NOTE: it will be invalid when class is deleted) ; Definition at line 94 of file TBackCompFitter.h. ◆ GetMinimizer(). ROOT::Math::Minimizer * TBackCompFitter::GetMinimizer ; (; ); const. Return a pointer to the minimizer. ; the return pointer will be valid after fitting and as long a new fit will not be done. For keepin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBackCompFitter.html:29271,error,errors,29271,doc/master/classTBackCompFitter.html,https://root.cern,https://root.cern/doc/master/classTBackCompFitter.html,1,['error'],['errors']
Availability,"ors `tvExL`, `tvExH` and `tvEyL`, `tvEyH`.; 459/// The number of points in the graph is the minimum of number of points; 460/// in `tvX` and `tvY`.; 461 ; 462TGraphMultiErrors::TGraphMultiErrors(const TVectorD &tvX, const TVectorD &tvY, const TVectorD &tvExL,; 463 const TVectorD &tvExH, const TVectorD &tvEyL, const TVectorD &tvEyH, Int_t m); 464 : fNYErrors(1), fSumErrorsMode(m); 465{; 466 fNpoints = TMath::Min(tvX.GetNrows(), tvY.GetNrows());; 467 ; 468 if (!TGraph::CtorAllocate()); 469 return;; 470 ; 471 if (!CtorAllocate()); 472 return;; 473 ; 474 Int_t itvXL = tvX.GetLwb();; 475 Int_t itvYL = tvY.GetLwb();; 476 Int_t itvExLL = tvExL.GetLwb();; 477 Int_t itvExHL = tvExH.GetLwb();; 478 Int_t itvEyLL = tvEyL.GetLwb();; 479 Int_t itvEyHL = tvEyH.GetLwb();; 480 ; 481 for (Int_t i = 0; i < fNpoints; i++) {; 482 fX[i] = tvX(i + itvXL);; 483 fY[i] = tvY(i + itvYL);; 484 fExL[i] = tvExL(i + itvExLL);; 485 fExH[i] = tvExH(i + itvExHL);; 486 fEyL[0][i] = tvEyL(i + itvEyLL);; 487 fEyH[0][i] = tvEyH(i + itvEyHL);; 488 }; 489 ; 490 CalcYErrorsSum();; 491}; 492 ; 493////////////////////////////////////////////////////////////////////////////////; 494/// Constructor with multiple vectors of floats in input and multiple y error dimension.; 495/// A grapherrors is built with the X coordinates taken from `tvX` the Y coordinates from `tvY`; 496/// and the errors from vectors `tvExL`, `tvExH` and `tvEyL/H[yErrorDimension]`.; 497/// The number of points in the graph is the minimum of number of points; 498/// in `tvX` and `tvY`.; 499 ; 500TGraphMultiErrors::TGraphMultiErrors(Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL,; 501 const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m); 502 : fNYErrors(ne), fSumErrorsMode(m); 503{; 504 fNpoints = TMath::Min(tvX.GetNrows(), tvY.GetNrows());; 505 ; 506 if (!TGraph::CtorAllocate()); 507 return;; 508 ; 509 if (!CtorAllocate()); 510 return;; 511 ; 512 Int_t itvXL = tvX.GetLwb();; 513 Int_t itvYL ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:17998,error,error,17998,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"ors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = RooArgSet(), Bool_t force = kTRUE); Fix the interpretation of the coefficient of any RooAddPdf component in; the expression tree headed by this object to the given set of observables. If the force flag is false, the normalization choice is only fixed for those; RooAddPdf components that have the default 'automatic' interpretation of; coefficients (i.e. the interpretation is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62604,error,error,62604,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['error']
Availability,"ors. ; Reimplemented from TGraph2D.; Definition at line 274 of file TGraph2DErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 285 of file TGraph2DErrors.cxx. ◆ GetZminE(). Double_t TGraph2DErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 296 of file TGraph2DErrors.cxx. ◆ IsA(). TClass * TGraph2DErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 61 of file TGraph2DErrors.h. ◆ operator=(). TGraph2DErrors & TGraph2DErrors::operator= ; (; const TGraph2DErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 167 of file TGraph2DErrors.cxx. ◆ Print(). void TGraph2DErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 307 of file TGraph2DErrors.cxx. ◆ RemovePoint(). Int_t TGraph2DErrors::RemovePoint ; (; Int_t ; ipoint). Deletes point number ipoint. ; Definition at line 356 of file TGraph2DErrors.cxx. ◆ Scale(). void TGraph2DErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""z"" . ). overridevirtual . Multiply the values and errors of a TGraph2DErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""z"" the z values and errors are scaled If option contains ""xyz"" all three x, y and z values and errors are scaled ; Reimplemented from TGraph2D.; Definition at line 322 of file TGraph2DErrors.cxx. ◆ Set(). void TGraph2DErrors::Set ; (; Int_t ; n). overridevirtual . Set number of points in the 2D graph. ; Existing coordinates are preserved. New coordinates above fNpoints are preset to 0. ; Reimplemented from TGraph2D.; De",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:33173,error,errors,33173,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"ors.cxx Source File. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TGraphMultiErrors.cxx. Go to the documentation of this file. 1// @(#)root/hist:$Id$; 2// Author: Simon Spies 18/02/19; 3 ; 4/*************************************************************************; 5 * Copyright (C) 2018-2019, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#include ""TROOT.h""; 13#include ""TStyle.h""; 14#include ""TVirtualPad.h""; 15#include ""TEfficiency.h""; 16#include ""Riostream.h""; 17 ; 18#include ""TArrayD.h""; 19#include ""TVector.h""; 20#include ""TH1.h""; 21#include ""TF1.h""; 22#include ""TMath.h""; 23#include ""Math/QuantFuncMathCore.h""; 24 ; 25#include ""TGraphMultiErrors.h""; 26 ; 27ClassImp(TGraphMultiErrors); 28 ; 29/** \class TGraphMultiErrors; 30 \ingroup Graphs; 31TGraph with asymmetric error bars and multiple y error dimensions.; 32 ; 33The TGraphMultiErrors painting is performed thanks to the TGraphPainter; 34class. All details about the various painting options are given in this class.; 35 ; 36The picture below gives an example:; 37 ; 38Begin_Macro(source); 39{; 40 auto c1 = new TCanvas(""c1"", ""A Simple Graph with multiple y-errors"", 200, 10, 700, 500);; 41 c1->SetGrid();; 42 c1->GetFrame()->SetBorderSize(12);; 43 const Int_t np = 5;; 44 Double_t x[np] = {0, 1, 2, 3, 4};; 45 Double_t y[np] = {0, 2, 4, 1, 3};; 46 Double_t exl[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; 47 Double_t exh[np] = {0.3, 0.3, 0.3, 0.3, 0.3};; 48 Double_t eylstat[np] = {1, 0.5, 1, 0.5, 1};; 49 Double_t eyhstat[np] = {0.5, 1, 0.5, 1, 2};; 50 Double_t eylsys[np] = {0.5, 0.4, 0.8, 0.3, 1.2};; 51 Double_t eyhsys[np] = {0.6, 0.7, 0.6, 0.4, 0.8};; 52 auto gme = new TGraphMultiErrors(""gme"", ""TGraphMultiErrors Example"", np, x, y, exl, exh, eylstat, eyhstat);; 53 gme->AddY",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:1076,error,error,1076,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],['error']
Availability,"ors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetFillStylevirtual void SetFillStyle(Int_t e, Style_t fstyle)Set Fill Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2062; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fExL, fExH, fEyL and fEyH arrays with the sorted values.Definition TGraphMultiErrors.cxx:885; TGraphMultiErrors::CtorAllocateBool_t CtorAllocate()Should be called from ctors after fNpoints has been set Note: This function should be called only fro...Definition TGraphMultiErrors.cxx:718; TGraphMultiErrors::fExHDouble_t * fExH[fNpoints] array of X high errorsDefinition TGraphMultiErrors.h:36; TGraphMultiErrors::SetPointEYvirtual void SetPointEY(Int_t i, Int_t ne, const Double_t *eyL, const Double_t *eyH)Set ey values for point i.Definition TGraphMultiErrors.cxx:1885; TGraphMultiErrors::SetLineColorvirtual void SetLineColor(Int_t e, Color_t lcolor)Set Line Color of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2073; TGraphM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:85605,error,errors,85605,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ors.cxx:446; TGraph2DErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:206; TGraph2DErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.)Add a point with errorbars to the graph.Definition TGraph2DErrors.cxx:196; TGraph2DErrors::Printvoid Print(Option_t *chopt="""") const overridePrint 2D graph and errors values.Definition TGraph2DErrors.cxx:307; TGraph2DErrors::GetZminEDouble_t GetZminE() const overrideReturns the Z minimum with errors.Definition TGraph2DErrors.cxx:296; TGraph2DErrors::operator=TGraph2DErrors & operator=(const TGraph2DErrors &)Assignment operator Copy everything except list of functions.Definition TGraph2DErrors.cxx:167; TGraph2DErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:218; TGraph2DErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraph2DErrors.h:29; TGraph2DErrors::TGraph2DErrorsTGraph2DErrors()TGraph2DErrors default constructor.Definition TGraph2DErrors.cxx:80; TGraph2DErrors::GetYmaxEDouble_t GetYmaxE() const overrideReturns the Y maximum with errors.Definition TGraph2DErrors.cxx:263; TGraph2DErrors::GetXmaxEDouble_t GetXmaxE() const overrideReturns the X maximum with errors.Definition TGraph2DErrors.cxx:241; TGraph2DErrors::GetZmaxEDouble_t GetZmaxE() const overrideReturns the Z maximum with errors.Definition TGraph2DErrors.cxx:285; TGraph2DErrors::Setvoid Set(Int_t n) overrideSet number of points in the 2D graph.Definition TGraph2DErrors.cxx:345; TGraph2DErrors::Classstatic TClass * Class(); TGraph2DErrors::RemovePointInt_t RemovePoint(Int_t ipoint)Deletes point number ipoint.Definition TGraph2DErrors.cxx:356; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraph2D::fNpointsInt_t fNpointsNumber of points",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html:17099,error,errorsDefinition,17099,doc/master/TGraph2DErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"ors.cxx:446; TGraph2DErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:206; TGraph2DErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex=0., Double_t ey=0., Double_t ez=0.)Add a point with errorbars to the graph.Definition TGraph2DErrors.cxx:196; TGraph2DErrors::Printvoid Print(Option_t *chopt="""") const overridePrint 2D graph and errors values.Definition TGraph2DErrors.cxx:307; TGraph2DErrors::GetZminEDouble_t GetZminE() const overrideReturns the Z minimum with errors.Definition TGraph2DErrors.cxx:296; TGraph2DErrors::operator=TGraph2DErrors & operator=(const TGraph2DErrors &)Assignment operator Copy everything except list of functions.Definition TGraph2DErrors.cxx:167; TGraph2DErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:218; TGraph2DErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraph2DErrors.h:29; TGraph2DErrors::TGraph2DErrorsTGraph2DErrors()TGraph2DErrors default constructor.Definition TGraph2DErrors.cxx:80; TGraph2DErrors::GetYmaxEDouble_t GetYmaxE() const overrideReturns the Y maximum with errors.Definition TGraph2DErrors.cxx:263; TGraph2DErrors::GetXmaxEDouble_t GetXmaxE() const overrideReturns the X maximum with errors.Definition TGraph2DErrors.cxx:241; TGraph2DErrors::GetZmaxEDouble_t GetZmaxE() const overrideReturns the Z maximum with errors.Definition TGraph2DErrors.cxx:285; TGraph2DErrors::Setvoid Set(Int_t n) overrideSet number of points in the 2D graph.Definition TGraph2DErrors.cxx:345; TGraph2DErrors::RemovePointInt_t RemovePoint(Int_t ipoint)Deletes point number ipoint.Definition TGraph2DErrors.cxx:356; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; double; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8h_source.html:5618,error,errorsDefinition,5618,doc/master/TGraph2DErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8h_source.html,1,['error'],['errorsDefinition']
Availability,"ors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetFillStylevirtual void SetFillStyle(Int_t e, Style_t fstyle)Set Fill Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2062; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:84793,error,error,84793,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"ors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; ex = 0., . Double_t ; ey = 0., . Double_t ; ez = 0. . ). virtual . Add a point with errorbars to the graph. ; Definition at line 196 of file TGraph2DErrors.cxx. ◆ Class(). static TClass * TGraph2DErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 61 of file TGraph2DErrors.h. ◆ DeclFileName(). static const char * TGraph2DErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 61 of file TGraph2DErrors.h. ◆ GetErrorX(). Double_t TGraph2DErrors::GetErrorX ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along X at point i. ; Reimplemented from TGraph2D.; Definition at line 206 of file TGraph2DErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Y at point i. ; Reimplemented from TGraph2D.; Definition at line 218 of file TGraph2DErrors.cxx. ◆ GetErrorZ(). Double_t TGraph2DErrors::GetErrorZ ; (; Int_t ; i); const. overridevirtual . This function is called by Graph2DFitChisquare. ; It returns the error along Z at point i. ; Reimplemented from TGraph2D.; Definition at line 230 of file TGraph2DErrors.cxx. ◆ GetEX(). Double_t * TGraph2DErrors::GetEX ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 45 of file TGraph2DErrors.h. ◆ GetEY(). Double_t * TGraph2DErrors::GetEY ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph2D.; Definition at line 46 of file TGraph2DErrors.h. ◆ GetEZ(). Double_t * TGraph2DErrors::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:30338,error,error,30338,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['error']
Availability,"ors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGraphErrors.h. ◆ DoMerge(). Bool_t TGraphErrors::DoMerge ; (; const TGraph * ; g). overrideprotectedvirtual . Protected function to perform the merge operation of a graph with errors. ; Reimplemented from TGraph.; Definition at line 573 of file TGraphErrors.cxx. ◆ FillZero(). void TGraphErrors::FillZero ; (; Int_t ; begin, . Int_t ; end, . Bool_t ; from_ctor = kTRUE . ). overrideprotectedvirtual . Set zero values for point arrays in the range [begin, end]. ; Reimplemented from TGraph.; Definition at line 598 of file TGraphErrors.cxx. ◆ GetErrorX(). Double_t TGraphErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . It returns the error along X at point i. ; Reimplemented from TGraph.; Definition at line 612 of file TGraphErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraphErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 635 of file TGraphErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . It returns the error along X at point i. ; For TGraphErrors this method is the same as GetErrorX. ; Reimplemented from TGraph.; Definition at line 647 of file TGraphErrors.cxx. ◆ GetErrorY(). Double_t TGraphErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . It returns the error along Y at point i. ; Reimplemented from TGraph.; Definition at line 623 of file TGraphErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . It returns the error along Y at point i. ; For TGraphErrors this method is the same as GetErrorY. ; Reimplemented from TGraph.; Definition at line 659 of file TGraphErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphErrors::GetErrorYlow ; (; Int_t ; i); const. overr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphErrors.html:41857,error,error,41857,doc/master/classTGraphErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphErrors.html,1,['error'],['error']
Availability,"ors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:659; TGraphErrors::operator=TGraphErrors & operator=(const TGraphErrors &gr)TGraphErrors assignment operator.Definition TGraphErrors.cxx:184; TGraphErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fEX and fEY to arrays[0] and arrays[1] or to fEX and fEY if arrays == 0 and ibegin !...Definition TGraphErrors.cxx:532; TGraphErrors::MergeInt_t Merge(TCollection *list) overrideAdds all graphs with errors from the collection to this graph.Definition TGraphErrors.cxx:682; TGraphErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphErrors.cxx:510; TGraphErrors::TGraphErrorsTGraphErrors()TGraphErrors default constructor.Definition TGraphErrors.cxx:69; TGraphErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:647; TGraphErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphErrors.cxx:722; TGraphErrors::Applyvoid Apply(TF1 *f) overrideApply function to all the data points .Definition TGraphErrors.cxx:396; TGraphErrors::CtorAllocateBool_t CtorAllocate()Constructor allocate.Definition TGraphErrors.cxx:557; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::AllocateArraysDouble_t ** AllocateArrays(Int_t Narrays, Int_t arraySize)Allocate arrays.Definition TGraph.cxx:598; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TVectorTTVectorT.Definition TVectorT.h:27; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:10302,error,error,10302,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['error']
Availability,"ors; j++) {; 1399 eyLMax = TMath::Max(eyLMax, fEyL[j][i]);; 1400 eyHMax = TMath::Max(eyHMax, fEyH[j][i]);; 1401 }; 1402 ; 1403 if (fY[i] - eyLMax < ymin) {; 1404 if (gPad && gPad->GetLogy()) {; 1405 if (eyLMax < fY[i]); 1406 ymin = fY[i] - eyLMax;; 1407 else; 1408 ymin = TMath::Min(ymin, fY[i] / 3.);; 1409 } else; 1410 ymin = fY[i] - eyLMax;; 1411 }; 1412 ; 1413 if (fY[i] + eyHMax > ymax); 1414 ymax = fY[i] + eyHMax;; 1415 }; 1416}; 1417 ; 1418////////////////////////////////////////////////////////////////////////////////; 1419/// Deletes the y error with the index `e`.; 1420/// Note that you must keep at least 1 error; 1421 ; 1422void TGraphMultiErrors::DeleteYError(Int_t e); 1423{; 1424 if (fNYErrors == 1 || e >= fNYErrors); 1425 return;; 1426 ; 1427 fEyL.erase(fEyL.begin() + e);; 1428 fEyH.erase(fEyH.begin() + e);; 1429 fAttFill.erase(fAttFill.begin() + e);; 1430 fAttLine.erase(fAttLine.begin() + e);; 1431 ; 1432 fNYErrors -= 1;; 1433}; 1434 ; 1435////////////////////////////////////////////////////////////////////////////////; 1436/// Get error on x coordinate for point `i`.; 1437/// In case of asymmetric errors the mean of the square sum is returned; 1438 ; 1439Double_t TGraphMultiErrors::GetErrorX(Int_t i) const; 1440{; 1441 if (i < 0 || i >= fNpoints || (!fExL && !fExH)); 1442 return -1.;; 1443 ; 1444 Double_t exL = fExL ? fExL[i] : 0.;; 1445 Double_t exH = fExH ? fExH[i] : 0.;; 1446 return TMath::Sqrt((exL * exL + exH * exH) / 2.);; 1447}; 1448 ; 1449////////////////////////////////////////////////////////////////////////////////; 1450/// Get error on y coordinate for point `i`.; 1451/// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; 1452/// In case of asymmetric errors the mean of the square sum is returned; 1453 ; 1454Double_t TGraphMultiErrors::GetErrorY(Int_t i) const; 1455{; 1456 if (i < 0 || i >= fNpoints || (fEyL.empty() && fEyH.empty())); 1457 return -1.;; 1458 ; 1459 Double_t eyL = GetErrorYlow(i);; 1460 Double_t e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:49022,error,error,49022,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"ort DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; Statistical Methods in Experimental Physics.; North-Holland, 1971. Reliability of MINUIT error estimates. MINUIT always carries around its own current estimates of the parameter; errors, which it will print out on request, no matter how accurate they; are at any given point in the execution. For example, at initialization,; these estimates are just the starting step sizes as specified by the user.; After a HESSE step, the errors are usually quite accurate,; unless there has been a problem. MINUIT, when it prints out error values,; also gives some indication of how reliable it thinks they are. For; example, those marked CURRENT GUESS ERROR are only working values; not to be believed, and APPROXIMATE ERROR means that they have; been calculated but there is reason to believe that they may not be; accurate. If no mitigating adjective is given, then at least MINUIT believes the; errors are accurate, although there is always a small chance that MINUIT; has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters; are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This; indicates both an exceptionally difficult problem, and one which has been; badly parameterized so that individual errors are not very meaningful; because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning; message, may make both the function minimum and parameter errors; unreliable. See the discussion above ``Getting the right parameter errors; with limits''. The best way to be absolutely sure of the errors, is to use; ``independent'' calculations and compare them,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:8527,error,errors,8527,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,6,['error'],['errors']
Availability,"ort storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum iterations (one iteration can have many function calls). { if (maxiter > 0) fOptions.SetMaxIterations(maxiter); }. void SetTolerance(double tol); set the tolerance. { fOptions.SetTolerance(tol); }. void SetPrecision(double prec); set in the minimizer the objective function evaluation precision; ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. default case). { fOptions.SetPrecision(prec); }. void SetStrategy(int str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:12670,error,error,12670,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['error'],['error']
Availability,"ort"" << Endl;; 853 }; 854 }; 855 ; 856 // now we read the information; 857 for (Int_t idata = 0; idata<sizeOfArrays; idata++) {; 858 Bool_t contains_NaN_or_inf = kFALSE;; 859 ; 860 auto checkNanInf = [&](std::map<TString, int> &msgMap, Float_t value, const char *what, const char *formulaTitle) {; 861 if (TMath::IsNaN(value)) {; 862 contains_NaN_or_inf = kTRUE;; 863 ++msgMap[TString::Format(""Dataset[%s] : %s expression resolves to indeterminate value (NaN): %s"", dsi.GetName(), what, formulaTitle)];; 864 } else if (!TMath::Finite(value)) {; 865 contains_NaN_or_inf = kTRUE;; 866 ++msgMap[TString::Format(""Dataset[%s] : %s expression resolves to infinite value (+inf or -inf): %s"", dsi.GetName(), what, formulaTitle)];; 867 }; 868 };; 869 ; 870 TTreeFormula* formula = 0;; 871 ; 872 // the cut expression; 873 Double_t cutVal = 1.;; 874 formula = fCutFormulas[cl];; 875 if (formula) {; 876 Int_t ndata = formula->GetNdata();; 877 cutVal = (ndata==1 ?; 878 formula->EvalInstance(0) :; 879 formula->EvalInstance(idata));; 880 checkNanInf(nanInfErrors, cutVal, ""Cut"", formula->GetTitle());; 881 }; 882 ; 883 // if event is cut out, add to warnings, else add to errors.; 884 auto &nanMessages = cutVal < 0.5 ? nanInfWarnings : nanInfErrors;; 885 ; 886 // the input variable; 887 for (UInt_t ivar=0; ivar<nvars; ivar++) {; 888 auto formulaMap = fInputTableFormulas[ivar];; 889 formula = formulaMap.first;; 890 int inputVarIndex = formulaMap.second;; 891 // check fomula ndata size (in case of arrays variable); 892 // enough to check for ivarindex = 0 then formula is the same; 893 // this check might take some time. Maybe do only in debug mode; 894 if (inputVarIndex == 0 && dsi.IsVariableFromArray(ivar)) {; 895 Int_t ndata = formula->GetNdata();; 896 Int_t arraySize = dsi.GetVarArraySize(dsi.GetVariableInfo(ivar).GetExpression());; 897 if (ndata < arraySize) {; 898 Log() << kFATAL << ""Size of array "" << dsi.GetVariableInfo(ivar).GetExpression(); 899 << "" in the current tree "" << currentInfo.Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:37729,error,errors,37729,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['error'],['errors']
Availability,"ort"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuotaUpdate"" return is null. TMap * GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); General purpose call to go through the existing datasets.; If <user> is 0 or ""*"", act on all datasets for the given <group>.; If <group> is 0 or ""*"", act on all datasets.; If <dsName> is defined, only the information about the specified dataset; is processed.; Action depends on option; available options:. kExport Return a TMap object containing all the information about; datasets in the form:; { <group>, <map of users> }; |; { <map of datasets>, <dataset>}; (<dataset> are TFileCollection objects); kShowDefault as kExport with in addition a default selection including; the datasets from the current user, the ones from the group; and the common ones. kPrint print the dataset content; no output is returned; kList get a list of available dataset names; kForceScan Re-open files while processing kPrint (do not use the; pre-processed information); kNoHeaderPrint Labelling header is not printed; kQuotaUpdate update {group, user} quotas; no output is returned. NB1: options ""kPrint"", ""kQuoatUpdate"" and ""kExport"" are mutually exclusive; NB2: for options ""kPrint"" and ""kQuoatUpdate"" return is null. Int_t FillLsDataSet(const char* group, const char* user, const char* dsName, TList* out, UInt_t option); Check for the 'ls.txt' for 'group' and 'user' and fill the path for the; ls file in 'out'.; If 'dsname' is defined, open the file and extract the relevant line.; Return 0 on success, -1 on failure. TFileCollection * GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0). Returns the dataset <dsName> of user <user> in group <group> .; If checksum is non-zero, it will contain the pointer to a TMD5 sum object; with the checksum of the file, has to be deleted by the user.; If option has the bi kReadShort set, the shortobject is read, that does not;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:15003,avail,available,15003,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,6,['avail'],['available']
Availability,"ort() in python . Definition at line 270 of file RooWorkspace.cxx. ◆ import() [2/6]. RooWorkspace::import ; (; const RooAbsArg & ; arg, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {} . ). Import a RooAbsArg object, e.g. ; function, p.d.f or variable into the workspace. This import function clones the input argument and will own the clone. If a composite object is offered for import, e.g. a p.d.f with parameters and observables, the complete tree of objects is imported. If any of the variables of a composite object (parameters/observables) are already in the workspace the imported p.d.f. is connected to the already existing variables. If any of the function objects (p.d.f, formulas) to be imported already exists in the workspace an error message is printed and the import of the entire tree of objects is cancelled. Several optional arguments can be provided to modify the import procedure. Accepted arguments . RenameConflictNodes(const char* suffix) Add suffix to branch node name if name conflicts with existing node in workspace . RenameAllNodes(const char* suffix) Add suffix to all branch node names including top level node. . RenameAllVariables(const char* suffix) Add suffix to all variables of objects being imported. . RenameAllVariablesExcept(const char* suffix, const char* exceptionList) Add suffix to all variables names, except ones listed . RenameVariable(const char* inputName, const char* outputName) Rename a single variable as specified upon import. . RecycleConflictNodes() If any of the function objects to be imported already exist in the name space, connect the imported expression to the already existing nodes. AttentionUse with care! If function definitions do not match, this alters the definition of your functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace.html:39164,error,error,39164,doc/master/classRooWorkspace.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace.html,1,['error'],['error']
Availability,"ortAt(ULong64_t linidx) const; short&At(ULong64_t linidx); virtual Double_tAtAsDouble(ULong64_t linidx) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTNDArray::GetBin(const Int_t* idx) const; Long64_tTNDArray::GetCellSize(Int_t dim) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; Long64_tTNDArray::GetNbins() const; Int_tTNDArray::GetNdimensions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNDArrayT_short_.html:2268,error,error,2268,root/html534/TNDArrayT_short_.html,https://root.cern,https://root.cern/root/html534/TNDArrayT_short_.html,3,['error'],['error']
Availability,"ortNSeg(Int_t nseg); Sets number of segments used for CSG export. TEveGeoNode(TGeoNode* node); Constructor. const char* GetName() const; Return name, taken from geo-node. Used via TObject. const char* GetTitle() const; Return title, taken from geo-node. Used via TObject. const char* GetElementName() const; Return name, taken from geo-node. Used via TEveElement. const char* GetElementTitle() const; Return title, taken from geo-node. Used via TEveElement. void ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); Checks if child-nodes have been imported ... imports them if not.; Then calls TEveElement::ExpandIntoListTree. void ExpandIntoListTrees(); Expand children into all list-trees. void ExpandIntoListTreesRecursively(); Expand children into all list-trees recursively.; This is useful if one wants to export extracted shapes. void AddStamp(UChar_t bits); Override from TEveElement.; Process visibility changes and forward them to fNode. Bool_t CanEditMainColor() const; Can edit main-color -- not available for assemblies. void SetMainColor(Color_t color); Set color, propagate to volume's line color. Bool_t CanEditMainTransparency() const; Can edit main transparency -- not available for assemblies. Char_t GetMainTransparency() const; Get transparency -- it is taken from the geo node. void SetMainTransparency(Char_t t); Set transparency, propagate to volume's transparency. void UpdateNode(TGeoNode* node); Updates all reve-browsers having the node in their contents.; All 3D-pads updated if any change found. Should (could?) be optimized with some assumptions about; volume/node structure (search for parent, know the same node can not; reoccur on lower level once found). void UpdateVolume(TGeoVolume* volume); Updates all reve-browsers having the volume in their contents.; All 3D-pads updated if any change found. Should (could?) be optimized with some assumptions about; volume/node structure (search for parent, know the same node can not; reoccur on lower level once ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoNode.html:19495,avail,available,19495,root/html528/TEveGeoNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoNode.html,6,['avail'],['available']
Availability,ortValues(). void SamplingDistribution::SortValues ; (; ); const. protected . internal function to sort values ; first need to sort the values and then compute the running sum of the weights and of the weight square needed later for computing the integral ; Definition at line 189 of file SamplingDistribution.cxx. ◆ Streamer(). void RooStats::SamplingDistribution::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::SamplingDistribution::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file SamplingDistribution.h. Member Data Documentation. ◆ fSampleWeights. std::vector<double> RooStats::SamplingDistribution::fSampleWeights. mutableprivate . vector of weights for the samples ; Definition at line 84 of file SamplingDistribution.h. ◆ fSamplingDist. std::vector<double> RooStats::SamplingDistribution::fSamplingDist. mutableprivate . vector of points for the sampling distribution ; Definition at line 83 of file SamplingDistribution.h. ◆ fSumW. std::vector<double> RooStats::SamplingDistribution::fSumW. mutableprivate . ! Cached vector with sum of the weight used to compute integral ; Definition at line 88 of file SamplingDistribution.h. ◆ fSumW2. std::vector<double> RooStats::SamplingDistribution::fSumW2. mutableprivate . ! Cached vector with sum of the weight used to compute integral error ; Definition at line 89 of file SamplingDistribution.h. ◆ fVarName. TString RooStats::SamplingDistribution::fVarName. private . Definition at line 86 of file SamplingDistribution.h. Libraries for RooStats::SamplingDistribution:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/SamplingDistribution.h; roofit/roostats/src/SamplingDistribution.cxx. RooStatsSamplingDistribution. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:21910,error,error,21910,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['error'],['error']
Availability,"ort_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveElement::FindItem(TGListTree* ltree); virtual TEveElement::sLTI_iTEveElement::FindItem(TGListTree* ltree, T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBoxSet.html:8428,error,error,8428,root/html602/TEveBoxSet.html,https://root.cern,https://root.cern/root/html602/TEveBoxSet.html,8,['error'],['error']
Availability,"orted file types can be saved via File menu / SaveAs… This dialog gives a choice to show or suppress the confirmation message for overwriting an existing file.; If the Overwrite check box is not selected, a message dialog appears asking the user to overwrite the file (Yes/No). The user choice is saved for the next time the Save As… dialog shows up.; 2.3.7 Printing the Canvas; The Print command in the canvas File menu pops-up a print dialog where the user can specify a preferred print command and the printer name. Both print parameters can be set via the new Print.Command and Print.Printer rootrc resources as follows:; # Printer settings.; WinNT.*.Print.Command: AcroRd32.exe; Unix.*.Print.Command: xprint -P%p %f; Print.Printer: 32-rb205-hp; Print.Directory: .; If the %p and %f are specified as a part of the print command, they will be replaced by the specified printer name and the file name. All other parameters will be kept as they are written. A print button is available in the canvas toolbar (activated via View menu/Toolbar).; 2.4 The ROOT Command Line; We have briefly touched on how to use the command line. There are different types of commands. Cling commands start with “.”. root[] .? //this command will list all the Cling commands; root[] .L <filename> //load [filename]; root[] .x <filename> //load and execute [filename]. SHELL commands start with “.!” for example:. root[] .! ls. C++ commands follow C++ syntax (almost). root[] TBrowser *b = new TBrowser(); 2.4.1 Multi-line Commands; You can use the command line to execute multi-line commands. To begin a multi-line command you must type a single left curly bracket {, and to end it you must type a single right curly bracket }. For example:; root[] {; end with '}'> Int_t j = 0;; end with '}'> for (Int_t i = 0; i < 3; i++); end with '}'> {; end with '}'> j= j + i;; end with '}'> cout << ""i = "" << i << "", j = "" << j << endl;; end with '}'> }; end with '}'> }; i = 0, j = 0; i = 1, j = 1; i = 2, j = 3; It is more conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:53195,avail,available,53195,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"orts; static Int_tfgPortUpperupper bound for ports. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TApplicationRemote(const char* url, Int_t debug = 0, const char* script = 0); Main constructor: start a remote session at 'url' accepting callbacks; on local port 'port'; if port is already in use scan up to 'scan - 1'; ports starting from port + 1, i.e. port + 1, ... , port + scan - 1. ~TApplicationRemote(); Destructor. Int_t Broadcast(const TMessage& mess); Broadcast a message to the remote session.; Returns 0 on success, -1 in case of error. Int_t Broadcast(const char* mess, Int_t kind = kMESS_STRING, Int_t type = kRRT_Undef); Broadcast a character string buffer to the remote session.; Use kind to set the TMessage what field.; Returns 0 on success, -1 in case of error. Int_t BroadcastObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Broadcast an object to the remote session.; Use kind to set the TMessage what field.; Returns 0 on success, -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length); Broadcast a raw buffer of specified length to the remote session.; Returns 0 on success, -1 in case of error. Int_t Collect(Long_t timeout = -1); Collect responses from the remote server.; Returns the number of messages received.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever). Int_t CollectInput(); Collect and analyze available input from the socket.; Returns 0 on success, -1 if any failure occurs. void RecvLogFile(Int_t size); Receive the log file from the server. Int_t SendObject(const TObject* obj); Send object to server.; Return 0 on success, -1 in case of error. Bool_t CheckFile(const char* file, Long_t modtime); Check if a file needs to be send to the server. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:14305,error,error,14305,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,7,['error'],['error']
Availability,"ortunity for reuse.; Sub classing and inheritance make it possible to extend and modify objects.; Class hierarchies and containment containment hierarchies provide a flexible mechanism for modeling real-world objects and the relationships among them.; Complexity is reduced because there is little growth of the global state, the state is contained within each object, rather than scattered through the program in the form of global variables.; Objects may come and go, but the basic structure of the program remains relatively static, increases opportunity for reuse of design. 1.5 Installing ROOT. To install ROOT you have the choice to download the binaries or the source. The source is quicker to transfer since it is only ~22 MB, but you will need to compile and link it. The binaries compiled with no debug information range from ~35 MB to ~45 MB depending on the target platform.; The installation and building of ROOT is described in Appendix A: Install and Build ROOT. You can download the binaries, or the source. The GNU g++ compiler on most UNIX platforms can compile ROOT.; Before downloading a binary version make sure your machine contains the right run-time environment. In most cases it is not possible to run a version compiled with, e.g., gcc4.0 on a platform where only gcc 3.2 is installed. In such cases you’ll have to install ROOT from source.; ROOT is currently running on the following platforms: supported platforms. GNU/Linux x86-32 (IA32) and x86-64 (AMD64)(GCC,Intel/icc, Portland/PGCC,KAI/KCC); Intel Itanium (IA64) GNU/Linux (GCC, Intel/ecc, SGI/CC); FreeBSD and OpenBSD (GCC); GNU/Hurd (GCC); HP HP-UX 10.x (IA32) and 11 (IA64) (HP CC, aCC, GCC); IBM AIX 4.1 (xlC compiler, GCC); Sun Solaris for SPARC (SUN C++ compiler, GCC); Sun Solaris for x86 (SUN C++ compiler, KAI/KCC); Compaq Alpha (GCC, KAI/KCC, DEC/CXX); SGI Irix 32 and 64 bits (GCC, KAI/KCC, SGI C++ compiler); Windows >= 95 (Microsoft Visual C++ compiler, Cygwin/GCC); MacOS X PPC, x86-32, x86-64 (GCC, Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:14849,down,download,14849,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['download']
Availability,"orwardBatchvoid forwardBatch(const LayerContainer &_layers, LayerPatternContainer &layerPatternData, std::vector< double > &valuesMean, std::vector< double > &valuesStdDev, size_t trainFromLayer) constDefinition NeuralNet.icc:1240; TMVA::DNN::Net::fExitFromTrainingbool * fExitFromTrainingDefinition NeuralNet.h:1277; TMVA::DNN::Net::m_layersstd::vector< Layer > m_layerslayer-structure-dataDefinition NeuralNet.h:1272; TMVA::DNN::Net::fIPyMaxIterUInt_t * fIPyMaxIterDefinition NeuralNet.h:1278; TMVA::DNN::Net::computestd::vector< double > compute(const std::vector< double > &input, const Weights &weights) constcompute the net with the given input and the given weightsDefinition NeuralNet.icc:1037; TMVA::DNN::Net::fetchOutputvoid fetchOutput(const LayerData &lastLayerData, OutputContainer &outputContainer) constDefinition NeuralNet.icc:1291; TMVA::DNN::Net::inputSizesize_t inputSize() constinput size of the DNNDefinition NeuralNet.h:1098; TMVA::DNN::Net::m_eErrorFunctionModeErrorFunction m_eErrorFunctiondenotes the error functionDefinition NeuralNet.h:1269; TMVA::DNN::Net::traindouble train(std::vector< double > &weights, std::vector< Pattern > &trainPattern, const std::vector< Pattern > &testPattern, Minimizer &minimizer, Settings &settings)start the trainingDefinition NeuralNet.icc:712; TMVA::DNN::Net::layersconst std::vector< Layer > & layers() constreturns the layers (structure)Definition NeuralNet.h:1245; TMVA::DNN::Net::prepareLayerDatastd::vector< std::vector< LayerData > > prepareLayerData(LayerContainer &layers, Batch &batch, const DropContainer &dropContainer, ItWeight itWeightBegin, ItWeight itWeightEnd, ItGradient itGradientBegin, ItGradient itGradientEnd, size_t &totalNumWeights) constDefinition NeuralNet.icc:1111; TMVA::DNN::Net::initializeWeightsvoid initializeWeights(WeightInitializationStrategy eInitStrategy, OutIterator itWeight)initialize the weights with the given strategyDefinition NeuralNet.icc:1470; TMVA::DNN::Net::outputSizesize_t outputSize() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:63252,error,error,63252,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['error'],['error']
Availability,"ory has been deleted.Definition TObject.h:402; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::FloorDouble_t Floor(Double_t x)Rounds x downward, returning the largest integral value that is not greater than x.Definition TMath.h:680; TMath::CeilDouble_t Ceil(Double_t x)Rounds x upward, returning the smallest integral value that is not less than x.Definition TMath.h:668; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v2@ v2Definition rootcling_impl.cxx:3702",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:338049,mask,mask,338049,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['mask'],['mask']
Availability,"ory threshold is set by the cluster; admin); in case an output file is defined, the; files are merged at the end;; 1 save results to file.; <how> = 0 save at the end of the query; 1 save results after each packet (to reduce the; loss in case of crash). Setting 'ds' automatically sets 'mvf=1'; it is still possible to set 'mvf=11'; to save results after each packet. The separator from the next option is either a ' ' or a ';'. All recognized settings are removed from the input string opt.; If action == 0, set up the output file accordingly, if action == 1 clean related; output file settings.; If the final target file is local then 'target' is set to the final local path; when action == 0 and used to retrieve the file with TFile::Cp when action == 1. Output file settings are in the form. <previous_option>of=name <next_option>; <previous_option>outfile=name,...;<next_option>. The separator from the next option is either a ' ' or a ';'; Called interanally by TProof::Process. Returns 0 on success, -1 on error. void SetFeedback(TString& opt, TString& optfb, Int_t action); Extract from opt in optfb information about wanted feedback settings.; Feedback are removed from the input string opt.; If action == 0, set up feedback accordingly, if action == 1 clean related; feedback settings (using info in optfb, if available, or reparsing opt). Feedback requirements are in the form. <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>. The special name 'stats' triggers feedback about events and packets.; The separator from the next option is either a ' ' or a ';'.; Called interanally by TProof::Process. Long64_t Process(TDSet* dset, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector (.C) file or; Tselector object; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:50851,error,error,50851,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"ory(const char* dir); Set/change directory. Bool_t Add(const char* file, const char* objname = 0, const char* dir = 0, Long64_t first = 0, Long64_t num = -1, const char* msd = 0); Add file to list of files to be analyzed. Optionally with the; objname and dir arguments the default, TDSet wide, objname and; dir can be overridden. Bool_t Add(TDSet* set); Add specified data set to the this set. Bool_t Add(TCollection* fileinfo, const char* meta = 0, Bool_t availableOnly = kFALSE, TCollection* badlist = 0); Add files passed as list of TFileInfo, TUrl or TObjString objects .; If TFileInfo, the first entry and the number of entries are also filled.; The argument 'meta' can be used to specify one of the subsets in the; file as described in the metadata of TFileInfo. By default the first one; is taken.; If 'availableOnly' is true only files available ('staged' and non corrupted); are taken: those not satisfying this requirement are added to 'badlist', if; the latter is defined. By default availableOnly is false. void SetSrvMaps(TList* srvmaps = 0); Set (or unset) the list for mapping servers coordinate for files.; Reinitialize the related iterator if needed.; Used by TProof. Bool_t Add(TFileInfo* fileinfo, const char* meta = 0); Add file described by 'fi' to list of files to be analyzed.; The argument 'meta' can be used to specify a subsets in the; file as described in the metadata of TFileInfo. By default the first one; is taken. Int_t ExportFileList(const char* filepath, Option_t* opt = """"); Export TDSetElements files as list of TFileInfo objects in file; 'fpath'. If the file exists already the action fails, unless; 'opt == ""F""'.; Return 0 on success, -1 otherwise. void AddFriend(TDSet* friendset, const char* alias); Add friend dataset to this set. Only possible if the TDSet type is; a TTree or derived class. The friendset will be owned by this class; and deleted in its destructor. void Reset(); Reset or initialize access to the elements. Long64_t GetEntries(Bool_t isTree, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDSet.html:12202,avail,availableOnly,12202,root/html528/TDSet.html,https://root.cern,https://root.cern/root/html528/TDSet.html,6,['avail'],['availableOnly']
Availability,"ory::Close(Option_t* option = """"); voidCloseFiles(); virtual Int_tTNamed::Compare(const TObject* obj) const; static Int_tConvertVersionCode2Int(Int_t code); static Int_tConvertVersionInt2Code(Int_t v); virtual voidTDirectory::Copy(TObject&) const; static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); static Int_tDecreaseDirLevel(); virtual voidTDirectory::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTDirectory::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*TDirectory::FindKey(const char*) const; virtual TKey*TDirectory::FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char* name) const; const char*FindObjectClassName(const char* name) const; const char*FindObjectPathName(const TObject* obj) const; TObject*FindSpecialObject(const char* name, void*& where); TClass*FindSTLClass(const char* name, Bool_t load, Bool_t silent = kFALSE) const; voidForceStyle(Bool_t force = kTRUE); Bool_tFromPopUp() const; virtual TObject*TDirectory::Get(const char* namecycle); TApplication*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TROOT.html:3745,error,error,3745,root/html530/TROOT.html,https://root.cern,https://root.cern/root/html530/TROOT.html,1,['error'],['error']
Availability,"os is the begin from where to; load the file and length is the number of characters to read; from the file. Bool_t LoadBuffer(const char* txtbuf); Load a 0 terminated buffer. Lines will be split at '\n'. Bool_t Save(const char* fn); Save text buffer to file fn. Bool_t Append(const char* fn); Append buffer to file fn. Bool_t DelChar(TGLongPosition pos); Delete character at specified position pos. Bool_t InsChar(TGLongPosition pos, char c); Insert character c at the specified position pos. char GetChar(TGLongPosition pos); Get character a position pos. If charcater not valid return -1. Bool_t DelText(TGLongPosition start, TGLongPosition end); Delete text between start and end positions. Returns false in; case of failure (start and end not being within bounds). Bool_t InsText(TGLongPosition ins_pos, TGText* src, TGLongPosition start_src, TGLongPosition end_src); Insert src text from start_src to end_src into text at position ins_pos.; Returns false in case of failure (start_src, end_src out of range for; src, and ins_pos out of range for this). Bool_t InsText(TGLongPosition pos, const char* buf); Insert single line at specified position. Return false in case position; is out of bounds. Bool_t AddText(TGText* text); Add another text buffer to this buffer. Bool_t InsLine(ULong_t row, const char* string); Insert string before specified position.; Returns false if insertion failed. Bool_t DelLine(ULong_t pos); Delete specified row. Returns false if row does not exist. char * GetLine(TGLongPosition pos, ULong_t length); Return string at position pos. Returns 0 in case pos is not valid.; The returned string must be deleted by the user. Bool_t BreakLine(TGLongPosition pos); Break line at position pos. Returns false if pos is not valid. Long_t GetLineLength(Long_t row); Get length of specified line. Returns -1 if row does not exist. Bool_t SetCurrentRow(Long_t row); Make specified row the current row. Returns false if row does not exist.; In which case fCurrent is not changed o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGText.html:4026,failure,failure,4026,root/html528/TGText.html,https://root.cern,https://root.cern/root/html528/TGText.html,6,['failure'],['failure']
Availability,"os&); doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; calculate one side (negative or positive Error) of the Parameter; give as input (optionally) maxcalls and tolerance. double Upper(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross Loval(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross Upval(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross FindCrossValue(int dir, unsigned int , unsigned int maxcalls, double toler) const; internal method to get crossing value via MnFunctionCross. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html:2531,toler,toler,2531,root/html602/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__MnMinos.html,6,['toler'],"['toler', 'tolerance']"
Availability,"os&); doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const; calculate one side (negative or positive Error) of the Parameter; give as input (optionally) maxcalls and tolerance. double Upper(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross Loval(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross Upval(unsigned int , unsigned int maxcalls = 0, double toler = 0.10000000000000001) const. MnCross FindCrossValue(int dir, unsigned int , unsigned int maxcalls, double toler) const; internal method to get crossing value via MnFunctionCross. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__MnMinos.html:2531,toler,toler,2531,root/html604/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__MnMinos.html,6,['toler'],"['toler', 'tolerance']"
Availability,"os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t getCacheAllNumeric ();  Return minimum dimensions of numeric integration for which values are cached. ;  ; static void setCacheAllNumeric (Int_t ndim);  Global switch to cache all integral values that integrate at least ndim dimensions numerically. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealIntegral.html:46743,error,error,46743,doc/master/classRooRealIntegral.html,https://root.cern,https://root.cern/doc/master/classRooRealIntegral.html,1,['error'],['error']
Availability,"ose as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");;  ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; };  ; myHist->Draw();; }. A more complete example including error handling and a few combinations of; TTreeReaderValue and TTreeReaderArray would look like this:. #include <TFile.h>; #include <TH1.h>; #include <TTreeReader.h>; #include <TTreeReaderValue.h>; #include <TTreeReaderArray.h>;  ; #include ""TriggerInfo.h""; #include ""Muon.h""; #include ""Tau.h"";  ; #include <vector>; #include <iostream>;  ; bool CheckValue(ROOT::TTreeReaderValueBase* value) {; if (value->GetSetupStatus() < 0) {; std::cerr << ""Error "" << value->GetSetupStatus(); << ""setting up reader for "" << value->GetBranchName() << '\n';; return false;; }; return true;; };  ;  ; // Analyze the tree ""MyTree"" in the file passed into the function.; // Returns false in case of errors.; bool analyze(TFile* file) {; // Create a TTreeReader named ""MyTree"" from the given TDirectory.; // The TTreeReader gives access to the TTree to the TTreeReaderValue and; // TTreeReaderArray objects. It knows the current entry number and knows; // how to iterate through the TTree.; TTreeReader reader(""MyTree"", file);;  ; // Read a single float value in each tree entries:; TTreeReaderValue<float> weight(reader, ""event.weight"");; if (!CheckValue(weight)) return false;;  ; // Read a TriggerInfo object from the tree entries:; TTreeReaderValue<TriggerInfo> triggerInfo(reader, ""triggerInfo"");; if (!CheckValue(triggerInfo)) return false;;  ; // Read a vector of Muon objects from the tree entries:; TTreeReaderValue<std::vector<Muon>> muons(reader, ""muons"");; if (!CheckValue(muons)) return false;;  ; // Read the pT for all jets in the tree entry:; TTreeReaderArray<double> jetPt(reader, ""jets.pT"");; if (!CheckValue(jetPt)) return false;;  ; // Read the taus in the tree entry:;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeReader.html:2606,error,errors,2606,root/html602/TTreeReader.html,https://root.cern,https://root.cern/root/html602/TTreeReader.html,2,['error'],['errors']
Availability,"osed, kInverted and kAtA.; 117 ; 118template <class Element>; 119TMatrixT<Element>::TMatrixT(EMatrixCreatorsOp1 op, const TMatrixT<Element> &prototype); 120{; 121 R__ASSERT(prototype.IsValid());; 122 ; 123 switch (op) {; 124 case kZero:; 125 Allocate(prototype.GetNrows(), prototype.GetNcols(), prototype.GetRowLwb(), prototype.GetColLwb(), 1);; 126 break;; 127 ; 128 case kUnit:; 129 Allocate(prototype.GetNrows(), prototype.GetNcols(), prototype.GetRowLwb(), prototype.GetColLwb(), 1);; 130 this->UnitMatrix();; 131 break;; 132 ; 133 case kTransposed:; 134 Allocate(prototype.GetNcols(), prototype.GetNrows(), prototype.GetColLwb(), prototype.GetRowLwb());; 135 Transpose(prototype);; 136 break;; 137 ; 138 case kInverted: {; 139 Allocate(prototype.GetNrows(), prototype.GetNcols(), prototype.GetRowLwb(), prototype.GetColLwb(), 1);; 140 *this = prototype;; 141 // Since the user can not control the tolerance of this newly created matrix; 142 // we put it to the smallest possible number; 143 const Element oldTol = this->SetTol(std::numeric_limits<Element>::min());; 144 this->Invert();; 145 this->SetTol(oldTol);; 146 break;; 147 }; 148 ; 149 case kAtA:; 150 Allocate(prototype.GetNcols(), prototype.GetNcols(), prototype.GetColLwb(), prototype.GetColLwb(), 1);; 151 TMult(prototype, prototype);; 152 break;; 153 ; 154 default: Error(""TMatrixT(EMatrixCreatorOp1)"", ""operation %d not yet implemented"", op);; 155 }; 156}; 157 ; 158////////////////////////////////////////////////////////////////////////////////; 159/// Constructor of matrix applying a specific operation to two prototypes.; 160/// Example: TMatrixT<Element> a(10,12), b(12,5); ...; TMatrixT<Element> c(a, TMatrixT::kMult, b);; 161/// Supported operations are: kMult (a*b), kTransposeMult (a'*b), kInvMult (a^(-1)*b);; 162/// Whenever kInvMult is invoked and b is not squared, additional memory is allocated for a^(-1); 163 ; 164template <class Element>; 165TMatrixT<Element>::TMatrixT(const TMatrixT<Element> &a, EMatrixCreatorsOp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMatrixT_8cxx_source.html:5290,toler,tolerance,5290,doc/master/TMatrixT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMatrixT_8cxx_source.html,1,['toler'],['tolerance']
Availability,"ostLoadCheck();; 5787 return ncl;; 5788 }; 5789 return nullptr;; 5790}; 5791 ; 5792////////////////////////////////////////////////////////////////////////////////; 5793/// Helper function used by TClass::GetClass().; 5794/// This function attempts to load the dictionary for 'classname'; 5795/// from the list of generator.; 5796/// If silent is 'true', do not warn about missing dictionary for the class.; 5797/// (typically used for class that are used only for transient members); 5798///; 5799/// The 'requestedname' is expected to be already normalized.; 5800 ; 5801TClass *TClass::LoadClassCustom(const char *requestedname, Bool_t silent); 5802{; 5803 // This function does not (and should not) attempt to check in the; 5804 // list of loaded classes or in the typedef.; 5805 ; 5806 TIter next(gROOT->GetListOfClassGenerators());; 5807 TClassGenerator *gen;; 5808 while ((gen = (TClassGenerator*) next())) {; 5809 TClass *cl = gen->GetClass(requestedname, kTRUE, silent);; 5810 if (cl) {; 5811 cl->PostLoadCheck();; 5812 return cl;; 5813 }; 5814 }; 5815 return nullptr;; 5816}; 5817 ; 5818////////////////////////////////////////////////////////////////////////////////; 5819/// Try to load the ClassInfo if available. This function may require parsing; 5820/// the header file and/or loading data from the clang pcm. If further calls to; 5821/// this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set; 5822/// to false.; 5823 ; 5824void TClass::LoadClassInfo() const; 5825{; 5826 R__LOCKGUARD(gInterpreterMutex);; 5827 ; 5828 // Return if another thread already loaded the info; 5829 // while we were waiting for the lock; 5830 if (!fCanLoadClassInfo || TestBit(kLoading)); 5831 return;; 5832 ; 5833 bool autoParse = !gInterpreter->IsAutoParsingSuspended();; 5834 ; 5835 if (autoParse); 5836 gInterpreter->AutoParse(GetName());; 5837 ; 5838 if (!fClassInfo); 5839 gInterpreter->SetClassInfo(const_cast<TClass *>(this));; 5840 ; 5841 if (autoParse && !fClassInfo) {; 5842",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:222898,avail,available,222898,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"ostLoadCheck();; 5854 return ncl;; 5855 }; 5856 return nullptr;; 5857}; 5858 ; 5859////////////////////////////////////////////////////////////////////////////////; 5860/// Helper function used by TClass::GetClass().; 5861/// This function attempts to load the dictionary for 'classname'; 5862/// from the list of generator.; 5863/// If silent is 'true', do not warn about missing dictionary for the class.; 5864/// (typically used for class that are used only for transient members); 5865///; 5866/// The 'requestedname' is expected to be already normalized.; 5867 ; 5868TClass *TClass::LoadClassCustom(const char *requestedname, Bool_t silent); 5869{; 5870 // This function does not (and should not) attempt to check in the; 5871 // list of loaded classes or in the typedef.; 5872 ; 5873 TIter next(gROOT->GetListOfClassGenerators());; 5874 TClassGenerator *gen;; 5875 while ((gen = (TClassGenerator*) next())) {; 5876 TClass *cl = gen->GetClass(requestedname, kTRUE, silent);; 5877 if (cl) {; 5878 cl->PostLoadCheck();; 5879 return cl;; 5880 }; 5881 }; 5882 return nullptr;; 5883}; 5884 ; 5885////////////////////////////////////////////////////////////////////////////////; 5886/// Try to load the ClassInfo if available. This function may require parsing; 5887/// the header file and/or loading data from the clang pcm. If further calls to; 5888/// this function cannot affect the value of fClassInfo, fCanLoadClassInfo is set; 5889/// to false.; 5890 ; 5891void TClass::LoadClassInfo() const; 5892{; 5893 R__LOCKGUARD(gInterpreterMutex);; 5894 ; 5895 // Return if another thread already loaded the info; 5896 // while we were waiting for the lock; 5897 if (!fCanLoadClassInfo || TestBit(kLoading)); 5898 return;; 5899 ; 5900 bool autoParse = !gInterpreter->IsAutoParsingSuspended();; 5901 ; 5902 if (autoParse); 5903 gInterpreter->AutoParse(GetName());; 5904 ; 5905 if (!fClassInfo); 5906 gInterpreter->SetClassInfo(const_cast<TClass *>(this));; 5907 ; 5908 if (autoParse && !fClassInfo) {; 5909",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:225649,avail,available,225649,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"ostic ignored ""-Wunreachable-code""; 1627 /* For every compiler, either ""sizeof(pthread_t) > sizeof(unsigned long)""; 1628 * or not, so one of the two conditions will be unreachable by construction.; 1629 * Unfortunately the C standard does not define a way to check this at; 1630 * compile time, since the #if preprocessor conditions can not use the; 1631 * sizeof operator as an argument. */; 1632#endif; 1633 ; 1634 if (sizeof(pthread_t) > sizeof(unsigned long)) {; 1635 /* This is the problematic case for CRYPTO_set_id_callback:; 1636 * The OS pthread_t can not be cast to unsigned long. */; 1637 struct mg_workerTLS *tls =; 1638 (struct mg_workerTLS *)pthread_getspecific(sTlsKey);; 1639 if (tls == NULL) {; 1640 /* SSL called from an unknown thread: Create some thread index.; 1641 */; 1642 tls = (struct mg_workerTLS *)mg_malloc(sizeof(struct mg_workerTLS));; 1643 tls->is_master = -2; /* -2 means ""3rd party thread"" */; 1644 tls->thread_idx = (unsigned)mg_atomic_inc(&thread_idx_max);; 1645 pthread_setspecific(sTlsKey, tls);; 1646 }; 1647 return tls->thread_idx;; 1648 } else {; 1649 /* pthread_t may be any data type, so a simple cast to unsigned long; 1650 * can rise a warning/error, depending on the platform.; 1651 * Here memcpy is used as an anything-to-anything cast. */; 1652 unsigned long ret = 0;; 1653 pthread_t t = pthread_self();; 1654 memcpy(&ret, &t, sizeof(pthread_t));; 1655 return ret;; 1656 }; 1657 ; 1658#if defined(__clang__); 1659#pragma clang diagnostic pop; 1660#endif; 1661 ; 1662#endif; 1663}; 1664 ; 1665 ; 1666FUNCTION_MAY_BE_UNUSED; 1667static uint64_t; 1668mg_get_current_time_ns(void); 1669{; 1670 struct timespec tsnow;; 1671 clock_gettime(CLOCK_REALTIME, &tsnow);; 1672 return (((uint64_t)tsnow.tv_sec) * 1000000000) + (uint64_t)tsnow.tv_nsec;; 1673}; 1674 ; 1675 ; 1676#if defined(GCC_DIAGNOSTIC); 1677/* Show no warning in case system functions are not used. */; 1678#pragma GCC diagnostic pop; 1679#endif /* defined(GCC_DIAGNOSTIC) */; 1680#if defined(__cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:50807,error,error,50807,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"ot copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManager_cacheMgr! The cache manager; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooArgSet*_curNormSet! Current normalization set; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; TVectorD*_mref; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_norm! Normali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMomentMorph.html:36971,error,errors,36971,root/html526/RooMomentMorph.html,https://root.cern,https://root.cern/root/html526/RooMomentMorph.html,4,['error'],['errors']
Availability,"ot create directory\nput_dir(%s): %s"",; 11745 path,; 11746 strerror(ERRNO));; 11747 return;; 11748 }; 11749 ; 11750 /* A file should be created or overwritten. */; 11751 /* Currently CivetWeb does not nead read+write access. */; 11752 if (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file); 11753 || file.access.fp == NULL) {; 11754 (void)mg_fclose(&file.access);; 11755 mg_send_http_error(conn,; 11756 500,; 11757 ""Error: Can not create file\nfopen(%s): %s"",; 11758 path,; 11759 strerror(ERRNO));; 11760 return;; 11761 }; 11762 ; 11763 fclose_on_exec(&file.access, conn);; 11764 range = mg_get_header(conn, ""Content-Range"");; 11765 r1 = r2 = 0;; 11766 if ((range != NULL) && parse_range_header(range, &r1, &r2) > 0) {; 11767 conn->status_code = 206; /* Partial content */; 11768 fseeko(file.access.fp, r1, SEEK_SET);; 11769 }; 11770 ; 11771 if (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {; 11772 /* forward_body_data failed.; 11773 * The error code has already been sent to the client,; 11774 * and conn->status_code is already set. */; 11775 (void)mg_fclose(&file.access);; 11776 return;; 11777 }; 11778 ; 11779 if (mg_fclose(&file.access) != 0) {; 11780 /* fclose failed. This might have different reasons, but a likely; 11781 * one is ""no space on disk"", http 507. */; 11782 conn->status_code = 507;; 11783 }; 11784 ; 11785 /* Create response (status_code has been set before) */; 11786 mg_response_header_start(conn, conn->status_code);; 11787 send_no_cache_header(conn);; 11788 send_additional_header(conn);; 11789 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11790 ; 11791 /* Send all headers - there is no body */; 11792 mg_response_header_send(conn);; 11793}; 11794 ; 11795 ; 11796static void; 11797delete_file(struct mg_connection *conn, const char *path); 11798{; 11799 struct de de;; 11800 memset(&de.file, 0, sizeof(de.file));; 11801 if (!mg_stat(conn, path, &de.file)) {; 11802 /* mg_stat returns 0 if the file does not exist */; 11803 mg_send_http_err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:340657,error,error,340657,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ot create directory\nput_dir(%s): %s"",; 11746 path,; 11747 strerror(ERRNO));; 11748 return;; 11749 }; 11750 ; 11751 /* A file should be created or overwritten. */; 11752 /* Currently CivetWeb does not nead read+write access. */; 11753 if (!mg_fopen(conn, path, MG_FOPEN_MODE_WRITE, &file); 11754 || file.access.fp == NULL) {; 11755 (void)mg_fclose(&file.access);; 11756 mg_send_http_error(conn,; 11757 500,; 11758 ""Error: Can not create file\nfopen(%s): %s"",; 11759 path,; 11760 strerror(ERRNO));; 11761 return;; 11762 }; 11763 ; 11764 fclose_on_exec(&file.access, conn);; 11765 range = mg_get_header(conn, ""Content-Range"");; 11766 r1 = r2 = 0;; 11767 if ((range != NULL) && parse_range_header(range, &r1, &r2) > 0) {; 11768 conn->status_code = 206; /* Partial content */; 11769 fseeko(file.access.fp, r1, SEEK_SET);; 11770 }; 11771 ; 11772 if (!forward_body_data(conn, file.access.fp, INVALID_SOCKET, NULL)) {; 11773 /* forward_body_data failed.; 11774 * The error code has already been sent to the client,; 11775 * and conn->status_code is already set. */; 11776 (void)mg_fclose(&file.access);; 11777 return;; 11778 }; 11779 ; 11780 if (mg_fclose(&file.access) != 0) {; 11781 /* fclose failed. This might have different reasons, but a likely; 11782 * one is ""no space on disk"", http 507. */; 11783 conn->status_code = 507;; 11784 }; 11785 ; 11786 /* Create response (status_code has been set before) */; 11787 mg_response_header_start(conn, conn->status_code);; 11788 send_no_cache_header(conn);; 11789 send_additional_header(conn);; 11790 mg_response_header_add(conn, ""Content-Length"", ""0"", -1);; 11791 ; 11792 /* Send all headers - there is no body */; 11793 mg_response_header_send(conn);; 11794}; 11795 ; 11796 ; 11797static void; 11798delete_file(struct mg_connection *conn, const char *path); 11799{; 11800 struct de de;; 11801 memset(&de.file, 0, sizeof(de.file));; 11802 if (!mg_stat(conn, path, &de.file)) {; 11803 /* mg_stat returns 0 if the file does not exist */; 11804 mg_send_http_err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:340690,error,error,340690,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ot created and/or marked as unavailable (in case where; 6231 // AutoLoad is called from TClass::GetClass).; 6232 DeepAutoLoadImpl(subtypename, visited, true /*normalized*/);; 6233 }; 6234 }; 6235 return 1;; 6236 }; 6237 ; 6238 // We found no TProtoClass for cls.; 6239 auto classinfo = gInterpreter->ClassInfo_Factory(cls);; 6240 if (classinfo && gInterpreter->ClassInfo_IsValid(classinfo); 6241 && !(gInterpreter->ClassInfo_Property(classinfo) & kIsEnum)); 6242 {; 6243 DataMemberInfo_t *memberinfo = gInterpreter->DataMemberInfo_Factory(classinfo, TDictionary::EMemberSelection::kNoUsingDecls);; 6244 while (gInterpreter->DataMemberInfo_Next(memberinfo)) {; 6245 if (gInterpreter->DataMemberInfo_TypeProperty(memberinfo) & ::kIsFundamental); 6246 continue;; 6247 auto membertypename = TClassEdit::GetLong64_Name(gInterpreter->TypeName(gInterpreter->DataMemberInfo_TypeTrueName(memberinfo)));; 6248 if (!TClassTable::GetDictNorm(membertypename.c_str())) {; 6249 // Failure to load a dictionary is not (quite) a failure load; 6250 // the top-level library. See detailed comment in the TProtoClass; 6251 // branch (above).; 6252 (void)DeepAutoLoadImpl(membertypename.c_str(), visited, true /*normalized*/);; 6253 }; 6254 }; 6255 gInterpreter->DataMemberInfo_Delete(memberinfo);; 6256 }; 6257 gInterpreter->ClassInfo_Delete(classinfo);; 6258 return 1;; 6259}; 6260 ; 6261////////////////////////////////////////////////////////////////////////////////; 6262/// Load library containing the specified class. Returns 0 in case of error; 6263/// and 1 in case if success.; 6264 ; 6265Int_t TCling::AutoLoad(const char *cls, Bool_t knowDictNotLoaded /* = kFALSE */); 6266{; 6267 // Prevent update to IsClassAutoloading between our check and our actions.; 6268 R__READ_LOCKGUARD(ROOT::gCoreMutex);; 6269 ; 6270 // TClass::GetClass explicitly calls gInterpreter->AutoLoad. When called from; 6271 // rootcling (in *_rdict.pcm file generation) it is a no op.; 6272 // FIXME: We should avoid calling autoload when",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:242556,failure,failure,242556,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['failure'],['failure']
Availability,"ot done before; 785 if (!fMinimizer) {; 786 if (!DoInitMinimizer()); 787 return false;; 788 }; 789 ; 790 // set new minimizer options (but not functions and parameters); 791 fMinimizer->SetOptions(fConfig.MinimizerOptions());; 792 return true;; 793}; 794 ; 795bool Fitter::DoMinimization(const ROOT::Math::IMultiGenFunction * chi2func) {; 796 // perform the minimization (assume we have already initialized the minimizer); 797 ; 798 assert(fMinimizer );; 799 ; 800 bool isValid = fMinimizer->Minimize();; 801 ; 802 if (!fResult) fResult = std::make_unique<FitResult>();; 803 ; 804 fResult->FillResult(fMinimizer,fConfig, fFunc, isValid, fDataSize, fFitType, chi2func );; 805 ; 806 // if requested run Minos after minimization; 807 if (isValid && fConfig.MinosErrors()) {; 808 // minos error calculation will update also FitResult; 809 CalculateMinosErrors();; 810 }; 811 ; 812 // when possible get number of calls from FCN and set in fit result; 813 if (fResult->fNCalls == 0 && fFitType != ROOT::Math::FitMethodFunction::kUndefined) {; 814 fResult->fNCalls = GetNCallsFromFCN();; 815 }; 816 ; 817 // fill information in fit result; 818 // if using an external obj function clone it for storing in FitResult; 819 if (fExtObjFunction) fObjFunction.reset(fExtObjFunction->Clone());; 820 fResult->fObjFunc = fObjFunction;; 821 fResult->fFitData = fData;; 822 ; 823#ifdef DEBUG; 824 std::cout << ""ROOT::Fit::Fitter::DoMinimization : ncalls = "" << fResult->fNCalls << "" type of objfunc "" << fFitFitResType << "" typeid: "" << typeid(*fObjFunction).name() << "" use gradient "" << fUseGradient << std::endl;; 825#endif; 826 ; 827 if (fConfig.NormalizeErrors() && fFitType == ROOT::Math::FitMethodFunction::kLeastSquare ); 828 fResult->NormalizeErrors();; 829 ; 830 // set also new parameter values and errors in FitConfig; 831 if (fConfig.UpdateAfterFit() && isValid) DoUpdateFitConfig();; 832 ; 833 return isValid;; 834}; 835template<class ObjFunc_t>; 836bool Fitter::DoMinimization(std::unique_ptr<ObjFunc_t> ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:31071,error,error,31071,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['error'],['error']
Availability,"ot enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey, NULL);; 20143 return NULL;; 20144 }; 20145 ; 20146 ctx->client_socks =; 20147 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20148 sizeof(ctx->client_socks[0]),; 20149 ctx);; 20150 if (ctx->client_socks == NULL) {; 20151 const char *err_msg = ""Not enough memory for worker socket array"";; 20152 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20153 mg_free(ctx->client_wait_events);; 20154 mg_free(ctx->worker_threadids);; 20155 ; 20156 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20157 mg_snprintf(NULL,; 20158 NULL, /* No truncation check for error buffers */; 20159 error->text,; 20160 error->text_buffer_size,; 20161 ""%s"",; 20162 err_msg);; 20163 }; 20164 free_context(ctx);; 20165 pthread_setspecific(sTlsKey, NULL);; 20166 return NULL;; 20167 }; 20168 ; 20169 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20170 ctx->client_wait_events[i] = event_create();; 20171 if (ctx->client_wait_events[i] == 0) {; 20172 const char *err_msg = ""Error creating worker event %i"";; 20173 mg_cry_ctx_internal(ctx, err_msg, i);; 20174 while (i > 0) {; 20175 i--;; 20176 event_destroy(ctx->client_wait_events[i]);; 20177 }; 20178 mg_free(ctx->client_socks);; 20179 mg_free(ctx->client_wait_events);; 20180 mg_free(ctx->worker_threadids);; 20181 ; 20182 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20183 mg_snprintf(NULL,; 20184 NULL, /* No truncation check for error buffers */; 20185 error->text,; 20186 error->text_buffer_size,; 20187 err_msg,; 20188 i);; 20189 }; 20190 free_context(ctx);; 20191 pthread_setspecific(sTlsKey, NULL);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:602618,error,error,602618,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ot enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey, NULL);; 20144 return NULL;; 20145 }; 20146 ; 20147 ctx->client_socks =; 20148 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20149 sizeof(ctx->client_socks[0]),; 20150 ctx);; 20151 if (ctx->client_socks == NULL) {; 20152 const char *err_msg = ""Not enough memory for worker socket array"";; 20153 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20154 mg_free(ctx->client_wait_events);; 20155 mg_free(ctx->worker_threadids);; 20156 ; 20157 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20158 mg_snprintf(NULL,; 20159 NULL, /* No truncation check for error buffers */; 20160 error->text,; 20161 error->text_buffer_size,; 20162 ""%s"",; 20163 err_msg);; 20164 }; 20165 free_context(ctx);; 20166 pthread_setspecific(sTlsKey, NULL);; 20167 return NULL;; 20168 }; 20169 ; 20170 for (i = 0; (unsigned)i < ctx->cfg_worker_threads; i++) {; 20171 ctx->client_wait_events[i] = event_create();; 20172 if (ctx->client_wait_events[i] == 0) {; 20173 const char *err_msg = ""Error creating worker event %i"";; 20174 mg_cry_ctx_internal(ctx, err_msg, i);; 20175 while (i > 0) {; 20176 i--;; 20177 event_destroy(ctx->client_wait_events[i]);; 20178 }; 20179 mg_free(ctx->client_socks);; 20180 mg_free(ctx->client_wait_events);; 20181 mg_free(ctx->worker_threadids);; 20182 ; 20183 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20184 mg_snprintf(NULL,; 20185 NULL, /* No truncation check for error buffers */; 20186 error->text,; 20187 error->text_buffer_size,; 20188 err_msg,; 20189 i);; 20190 }; 20191 free_context(ctx);; 20192 pthread_setspecific(sTlsKey, NULL);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:602651,error,error,602651,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ot fix aspect ratio, height of canvas is 0"");; 2027 return;; 2028 }; 2029 fFixedAspectRatio = kTRUE;; 2030 }; 2031 } else {; 2032 fFixedAspectRatio = kFALSE;; 2033 fAspectRatio = 0;; 2034 }; 2035}; 2036 ; 2037////////////////////////////////////////////////////////////////////////////////; 2038/// If isfolder=kTRUE, the canvas can be browsed like a folder; 2039/// by default a canvas is not browsable.; 2040 ; 2041void TCanvas::SetFolder(Bool_t isfolder); 2042{; 2043 fgIsFolder = isfolder;; 2044}; 2045 ; 2046////////////////////////////////////////////////////////////////////////////////; 2047/// Set canvas name. In case `name` is an empty string, a default name is set.; 2048/// Canvas automatically marked as modified when SetName method called; 2049 ; 2050void TCanvas::SetName(const char *name); 2051{; 2052 fName = GetNewCanvasName(name);; 2053 ; 2054 Modified();; 2055}; 2056 ; 2057 ; 2058////////////////////////////////////////////////////////////////////////////////; 2059/// Function to resize a canvas so that the plot inside is shown in real aspect; 2060/// ratio; 2061///; 2062/// \param[in] axis 1 for resizing horizontally (x-axis) in order to get real; 2063/// aspect ratio, 2 for the resizing vertically (y-axis); 2064/// \return false if error is encountered, true otherwise; 2065///; 2066/// ~~~ {.cpp}; 2067/// hpxpy->Draw();; 2068/// c1->SetRealAspectRatio();; 2069/// ~~~; 2070///; 2071/// - For defining the concept of real aspect ratio, it is assumed that x and y; 2072/// axes are in same units, e.g. both in MeV or both in ns.; 2073/// - You can resize either the width of the canvas or the height, but not both; 2074/// at the same time; 2075/// - Call this function AFTER drawing AND zooming (SetUserRange) your TGraph or; 2076/// Histogram, otherwise it cannot infer your actual axes lengths; 2077/// - This function ensures that the TFrame has a real aspect ratio, this does not; 2078/// mean that the full pad (i.e. the canvas or png output) including margins has",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:65593,error,error,65593,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['error'],['error']
Availability,"ot implemented"");; 105 MATH_UNUSED(ivar);; 106 return false;; 107}; 108/// get variable settings in a variable object (like ROOT::Fit::ParamsSettings); 109bool Minimizer::GetVariableSettings(unsigned int ivar, ROOT::Fit::ParameterSettings &pars) const; 110{; 111 MATH_ERROR_MSG(""Minimizer::GetVariableSettings"", ""Querying an existing variable not implemented"");; 112 MATH_UNUSED(ivar);; 113 MATH_UNUSED(pars);; 114 return false;; 115}; 116/** return covariance matrices element for variables ivar,jvar; 117 if the variable is fixed the return value is zero; 118 The ordering of the variables is the same as in the parameter and errors vectors; 119*/; 120double Minimizer::CovMatrix(unsigned int ivar, unsigned int jvar) const; 121{; 122 MATH_UNUSED(ivar);; 123 MATH_UNUSED(jvar);; 124 return 0;; 125}; 126 ; 127/**; 128 Fill the passed array with the covariance matrix elements; 129 if the variable is fixed or const the value is zero.; 130 The array will be filled as cov[i *ndim + j]; 131 The ordering of the variables is the same as in errors and parameter value.; 132 This is different from the direct interface of Minuit2 or TMinuit where the; 133 values were obtained only to variable parameters; 134*/; 135bool Minimizer::GetCovMatrix(double *covMat) const; 136{; 137 MATH_UNUSED(covMat);; 138 return false;; 139}; 140 ; 141/**; 142 Fill the passed array with the Hessian matrix elements; 143 The Hessian matrix is the matrix of the second derivatives; 144 and is the inverse of the covariance matrix; 145 If the variable is fixed or const the values for that variables are zero.; 146 The array will be filled as h[i *ndim + j]; 147*/; 148bool Minimizer::GetHessianMatrix(double *hMat) const; 149{; 150 MATH_UNUSED(hMat);; 151 return false;; 152}; 153 ; 154/**; 155 return global correlation coefficient for variable i; 156 This is a number between zero and one which gives; 157 the correlation between the i-th parameter and that linear combination of all; 158 other parameters which is most s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Minimizer_8cxx_source.html:4808,error,errors,4808,doc/master/Minimizer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Minimizer_8cxx_source.html,1,['error'],['errors']
Availability,"ot independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:16225,error,error,16225,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"ot using colors to show the cell contents When the option ""0"" is; used with any LEGO option, the empty bins are not drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""X+""; The X-axis is drawn on the top side of the plot. ""Y+""; The Y-axis is drawn on the right side of the plot. Options supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Curve without axis. ""][""; When this option is selected the first and last vertical lines of the histogram; are not drawn. ""B""; Bar chart option. ""BAR""; Like option ""B"", but bars can be drawn with a 3D effect. ""HBAR""; Like option ""BAR"", but bars are drawn horizontally. ""C""; Draw a smooth Curve through the histogram bins. ""E""; Draw error bars. ""E0""; Draw error bars. Markers are drawn for bins with 0 contents. ""E1""; Draw error bars with perpendicular lines at the edges. ""E2""; Draw error bars with rectangles. ""E3""; Draw a fill area through the end points of the vertical error bars. ""E4""; Draw a smoothed filled area through the end points of the error bars. ""E5""; Like E3 but ignore the bins with 0 contents. ""E6""; Like E4 but ignore the bins with 0 contents. ""X0""; When used with one of the ""E"" option, it suppress the error bar along; X as gStyle->SetErrorX(0) would do. ""L""; Draw a line through the bin contents. ""P""; Draw current marker at each bin except empty bins. ""P0""; Draw current marker at each bin including empty bins. ""PIE""; Draw histogram as a Pie Chart. ""*H""; Draw histogram with a * at each bin. ""LF2""; Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws; also a fill area if the hist fill color is set but the fill area corresponds to; the histogram contour. ""9""; Force histogram to be drawn in high resolution mode. By default, the histogram; is drawn in low resolution in case the number of b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:6429,error,error,6429,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"otEmbeddedContainer * fCanvasContainer;  container in canvas widget ;  ; Int_t fCWinId;  window id used by embedded TCanvas ;  ; Atom_t * fDNDTypeList;  handles DND types ;  ;  Protected Attributes inherited from TGCanvas; TGHScrollBar * fHScrollbar;  horizontal scrollbar ;  ; Int_t fScrolling;  flag which scrolling modes are allowed ;  ; TGViewPort * fVport;  viewport through which we look at contents ;  ; TGVScrollBar * fVScrollbar;  vertical scrollbar ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TRootEmbeddedCanvas (const TRootEmbeddedCanvas &)=delete;  ; TRootEmbeddedCanvas & operator= (const TRootEmbeddedCanvas &)=delete;  . Friends; class TRootEmbeddedContainer;  . Additional Inherited Members;  Public Types inherited from TGCanva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootEmbeddedCanvas.html:26102,mask,mask,26102,doc/master/classTRootEmbeddedCanvas.html,https://root.cern,https://root.cern/doc/master/classTRootEmbeddedCanvas.html,1,['mask'],['mask']
Availability,"otFinderMethod*fSolvertype of algorithm to be used . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; bool Solve(Function &f, Derivative &d, double start, int maxIter, double absTol, double relTol). RootFinder(RootFinder::EType type = RootFinder::kBRENT). Construct a Root-Finder algorithm. virtual ~RootFinder(). RootFinder(const RootFinder & ); usually copying is non trivial, so we make this unaccessible. {}. bool SetMethod(ROOT::Math::RootFinder::EType type = RootFinder::kBRENT). bool SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). Provide to the solver the function and the initial search interval [xlow, xup]; for algorithms not using derivatives (bracketing algorithms); The templated function f must be of a type implementing the \a operator() method,; <em> double operator() ( double x ) </em>; Returns non zero if interval is not valid (i.e. does not contains a root). return fSolver-> SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Iterations() const. Return the number of iteration performed to find the Root. int Iterate(). Perform a single iteration and return the Status. double Root() const. Return the current and latest estimate of the Root. int Status() const. Return the status of the last estimate of the Root; = 0 OK, not zero failure. const char * Name() const. Return the current and latest estimate of the lower value of the Root-finding interval (for bracketing algorithms). double XLower() const {; return fSolver->XLower();; }. Return the current and latest estimate of the upper value of the Root-finding interval (for bracketing algorithms). double XUpper() const {; return fSolver->XUpper();; }. Get Name of the Root-finding solver algorithm. » Last changed: root/mathmore:$Id$ » Last generated: 2015-09-08 17:00; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__RootFinder.html:3169,failure,failure,3169,root/html534/ROOT__Math__RootFinder.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__RootFinder.html,1,['failure'],['failure']
Availability,"otFinderMethod::Iterations() const; virtual const char*Name() const; ROOT::Math::IRootFinderMethod&ROOT::Math::IRootFinderMethod::operator=(const ROOT::Math::IRootFinderMethod&); virtual doubleRoot() const; virtual intSetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); virtual intSolve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6). Data Members; protected:. const ROOT::Math::IGenFunction*fFunctionPointer to the function.; doublefRootCurrent stimation of the function root.; doublefXMaxUpper bound of the search interval; doublefXMinLower bound of the search interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~BrentRootFinder(); Default Destructor. . BrentRootFinder(); Default Constructor. . int SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup). int Solve(int maxIter = 100, double absTol = 1E-3, double relTol = 1E-6); Returns the X value corresponding to the function value fy for (xmin<x<xmax).; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval. \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position.; \@param absTol desired relative error in the minimum position. double Root() const; Returns root value. Need to call first Solve(). . const char* Name() const; Return name of root finder algorithm (""BrentRootFinder""). . » Last changed: root/mathcore:$Id: BrentRootFinder.h 24477 2008-06-23 12:58:47Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__BrentRootFinder.html:2269,error,error,2269,root/html526/ROOT__Math__BrentRootFinder.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__BrentRootFinder.html,2,['error'],['error']
Availability,"otPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FUNC list; RooListProxy_funcListList of component FUNCs; static Bool_tRooAbsReal::_globalSelectCompGlobal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealSumPdf.html:39012,error,errors,39012,root/html532/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html532/RooRealSumPdf.html,1,['error'],['errors']
Availability,"otPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };; enum RooPrintable::ContentsOption { kName; kClassName; kValue; kArgs; kExtras; kAddress; kTitle; kCollectionHeader; };; enum RooPrintable::StyleOption { kInline; kSingleLine; kStandard; kVerbose; kTreeStructure; };. protected:. set<std::string>RooAbsArg::_boolAttribBoolean attributes; set<std::string>RooAbsArg::_boolAttribTransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; TIterator*_coefIter! Iterator over coefficient list; RooListProxy_coefListList of coefficients; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_t_extendedAllow use as extended p.d.f.; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; TIterator*_funcIter! Iterator over FUNC list; RooListProxy_funcListList of component FUNCs; static Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealSumPdf.html:37012,error,errors,37012,root/html526/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html526/RooRealSumPdf.html,3,['error'],['errors']
Availability,"otably gMinuit, although that variable now exists at startup from release 5.08 onward) do not exist yet at program startup, as they exist in modules that are loaded later (e.g. through the auto-loading mechanism). An example session should make this clear:; >>> from ROOT import *; >>> gROOT # directly available; <ROOT.TROOT object at 0x399c30>; >>> gMinuit # library not yet loaded: not available; Traceback (most recent call last):; File ""<stdin>"", line 1, in ?; NameError: name 'gMinuit' is not defined; >>> TMinuit # use of TMinuit class forces auto-loading; <class '__main__.TMinuit'>; >>> gMinuit # now gMinuit is available; <__main__.TMinuit object at 0x1458c70>; >>> not not gMinuit # but it is the null pointer, until set; False; >>> g = TMinuit(); >>> not not gMinuit; True; It is also possible to create globals interactively, either by executing a Cling macro, or by a call to gROOT.ProcessLine(). These globals are made available in the same way: either use them directly after creation in ‘from ROOT import *’ more, or get them from the ROOT namespace after an ‘import ROOT’.; As of 5.08, the behaviour of ROOT globals is the same as python globals, which is sometimes counterintuitive: since they are references, they can be changed only if done so directly through their containing module. The following session shows that in detail:; >>> from ROOT import *; >>> print(gDebug); 0; >>> gROOT.ProcessLine( 'gDebug = 7;' ); >>> print(gDebug); 0 # local gDebug is unchanged; >>> gDebug = 5 # changes _local_ reference only; >>> print(gDebug); 5 # locally correct, but ...; >>> gROOT.ProcessLine( 'cout << gDebug << endl;' ); 7 # ... ROOT global unchanged; >>> import ROOT; >>> print(ROOT.gDebug); 7 # still the old value (not '5'); >>> ROOT.gDebug = 3 # changes ROOT module reference; >>> gROOT.ProcessLine( 'cout << gDebug << endl;' ); 3 # ROOT global properly changed; >>>; The above is another good reason to prefer ‘import ROOT’ over ‘from ROOT import *’.; 19.1.5.4 Access to Python;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1054651,avail,available,1054651,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"otate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Rotate the camera - 'swivel round the view volume center'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - ignored for ortho camera. Assumed to be same; as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsOrthographic() const; { return kTRUE; }. void SetEnableRotate(Bool_t x); { fEnableRotate = x; }. Bool_t GetEnableRotate() const; { return fEnableRotate; }. Double_t GetZoomMin() const; { return fZoomMin; }. Double_t GetZoomMax() const; { return fZoomMax; }. void SetZoomMinMax(Double_t min, Double_t max); { SetZoomMin(min); SetZoomMax(max); }. void SetDollyToZoom(Bool_t x); { fDollyToZoom = x; }. Bool_t GetDollyToZoom() const; { return fDollyToZoom; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLOrthoCamera.h 28212 2009-04-15 11:05:29Z matevz $ » Last generated: 2010-09-23 20:06; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLOrthoCamera.html:10340,down,down,10340,root/html528/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html528/TGLOrthoCamera.html,1,['down'],['down']
Availability,"otate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Rotate the camera - 'swivel round the view volume center'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - ignored for ortho camera. Assumed to be same; as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsOrthographic() const; { return kTRUE; }. void SetEnableRotate(Bool_t x); { fEnableRotate = x; }. Bool_t GetEnableRotate() const; { return fEnableRotate; }. Double_t GetZoomMin() const; { return fZoomMin; }. Double_t GetZoomMax() const; { return fZoomMax; }. void SetZoomMinMax(Double_t min, Double_t max); { SetZoomMin(min); SetZoomMax(max); }. void SetDollyToZoom(Bool_t x); { fDollyToZoom = x; }. Bool_t GetDollyToZoom() const; { return fDollyToZoom; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLOrthoCamera.h 28212 2009-04-15 11:05:29Z matevz $ » Last generated: 2011-07-04 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLOrthoCamera.html:10340,down,down,10340,root/html530/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html530/TGLOrthoCamera.html,1,['down'],['down']
Availability,"otate(Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2); Rotate the camera - 'swivel round the view volume center'.; Returns kTRUE is redraw required (camera change), kFALSE otherwise. void Apply(const TGLBoundingBox& sceneBox, const TGLRect* pickRect = 0) const; Apply the camera to the current GL context, setting the viewport, projection; and modelview matricies. After this verticies etc can be directly entered; in the world frame. This also updates the cached frustum values, enabling; all the projection, overlap tests etc defined in TGLCamera to be used. Arguments are:; 'box' - view volume box - ignored for ortho camera. Assumed to be same; as one passed to Setup().; 'pickRect' - optional picking rect. If non-null, restrict drawing to this; viewport rect. void Configure(Double_t zoom, Double_t dolly, Double_t* center, Double_t hRotate, Double_t vRotate); Configure the camera state.; zoom - set directly (default = 0.78);; dolly - additional move along the camera forward direction;; center - new camera center (can be 0 for no change);; hRotate - additional ""up/down"" rotation in radians;; vRotate - additional ""left/right"" rotation in radians. Bool_t IsOrthographic() const; { return kTRUE; }. void SetEnableRotate(Bool_t x); { fEnableRotate = x; }. Bool_t GetEnableRotate() const; { return fEnableRotate; }. Double_t GetZoomMin() const; { return fZoomMin; }. Double_t GetZoomMax() const; { return fZoomMax; }. void SetZoomMinMax(Double_t min, Double_t max); { SetZoomMin(min); SetZoomMax(max); }. void SetDollyToZoom(Bool_t x); { fDollyToZoom = x; }. Bool_t GetDollyToZoom() const; { return fDollyToZoom; }. » Author: Richard Maunder 25/05/2005 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id: TGLOrthoCamera.h 28212 2009-04-15 11:05:29Z matevz $ » Last generated: 2011-11-03 20:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLOrthoCamera.html:10340,down,down,10340,root/html532/TGLOrthoCamera.html,https://root.cern,https://root.cern/root/html532/TGLOrthoCamera.html,1,['down'],['down']
Availability,"otd reports that the file is locked, and you are sure this is not; the case (e.g. due to a crash), you can force unlock it by prepending; the remoteName with a '-'. Long64_t GetFile(const char* file, const char* localName = 0); Transfer file from remote host. Returns number of bytes; received or < 0 in case of error. Error -1 connection is still; open, error -2 connection has been closed. In case of failure; fRestartAt is set to the number of bytes correclty transfered.; Calling GetFile() immediately afterwards will restart at fRestartAt.; If this is not desired call SetRestartAt(0) before calling GetFile().; If rootd reports that the file is locked, and you are sure this is not; the case (e.g. due to a crash), you can force unlock it by prepending; the file name with a '-'. Int_t ChangeDirectory(const char* dir) const; Change the remote directory. If the remote directory contains a .message; file and it is < 1024 characters then the contents is echoed back.; Returns 0 in case of success and -1 in case of failure. Int_t MakeDirectory(const char* dir, Bool_t print = kFALSE) const; Make a remote directory. Anonymous users may not create directories.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteDirectory(const char* dir) const; Delete a remote directory. Anonymous users may not delete directories.; Returns 0 in case of success and -1 in case of failure. Int_t ListDirectory(Option_t* cmd = """") const; List remote directory. With cmd you specify the options and directory; to be listed to ls. Returns 0 in case of success and -1 in case of; failure. Int_t PrintDirectory() const; Print path of remote working directory. Returns 0 in case of succes and; -1 in cse of failure. Int_t RenameFile(const char* file1, const char* file2) const; Rename a remote file. Anonymous users may not rename files.; Returns 0 in case of success and -1 in case of failure. Int_t DeleteFile(const char* file) const; Delete a remote file. Anonymous users may not delete files.; Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFTP.html:10368,failure,failure,10368,root/html528/TFTP.html,https://root.cern,https://root.cern/root/html528/TFTP.html,6,['failure'],['failure']
Availability,"ote that in case the data type is an object, this branch can contain only this object.; Note that this function is invoked by TTree::Branch ; Definition at line 199 of file TBranch.cxx. ◆ TBranch() [4/4]. TBranch::TBranch ; (; TBranch * ; parent, . const char * ; name, . void * ; address, . const char * ; leaflist, . Int_t ; basketsize = 32000, . Int_t ; compress = ROOT::RCompressionSetting::EAlgorithm::kInherit . ). Create a Branch as a child of another Branch. ; See documentation for TBranch::TBranch(TTree *, const char *, void *, const char *, Int_t, Int_t) ; Definition at line 252 of file TBranch.cxx. ◆ ~TBranch(). TBranch::~TBranch ; (; ). override . Destructor. ; Definition at line 450 of file TBranch.cxx. Member Function Documentation. ◆ AddBasket(). void TBranch::AddBasket ; (; TBasket & ; b, . bool ; ondisk, . Long64_t ; startEntry . ). virtual . Add the basket to this branch. ; Warning: if the basket are not 'flushed/copied' in the same order as they were created, this will induce a slow down in the insert (since we'll need to move all the record that are entere 'too early'). Warning we also assume that the current write basket is not present (aka has been removed) or is empty (no entries). ; Definition at line 545 of file TBranch.cxx. ◆ AddLastBasket(). void TBranch::AddLastBasket ; (; Long64_t ; startEntry). virtual . Add the start entry of the write basket (not yet created) ; Definition at line 618 of file TBranch.cxx. ◆ BackFill(). Int_t TBranch::BackFill ; (; ). Loop on all leaves of this branch to back fill Basket buffer. ; Use this routine instead of TBranch::Fill when filling a branch individually to catch up with the number of entries already in the TTree.; First it calls TBranch::Fill and then if the number of entries of the branch reach one of TTree cluster's boundary, the basket is flushed.; The function returns the number of bytes committed to the memory basket. If a write error occurs, the number of bytes returned is -1. If no data are writte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranch.html:33791,down,down,33791,doc/master/classTBranch.html,https://root.cern,https://root.cern/doc/master/classTBranch.html,1,['down'],['down']
Availability,"otected Attributes inherited from RooAbsReal; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooPullVar.h>. Inheritance diagram for RooPullVar:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooPullVar() [1/3]. RooPullVar::RooPullVar ; (; ). default . ◆ RooPullVar() [2/3]. RooPullVar::RooPullVar ; (; const char * ; name, . const char * ; title, . RooRealVar & ; meas, . RooAbsReal & ; truth . ). Construct the pull of the RooRealVar 'meas'. ; Parameters. [in]nameName of the pull variable. ; [in]titleThe title (for plotting). ; [in]measThe measurement. This variable needs to have an error, and therefore is a RooRealVar. ; [in]truthThe true value. . Definition at line 46 of file RooPullVar.cxx. ◆ RooPullVar() [3/3]. RooPullVar::RooPullVar ; (; const RooPullVar & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 60 of file RooPullVar.cxx. Member Function Documentation. ◆ Class(). static TClass * RooPullVar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooPullVar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooPullVar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file RooPullVar.h. ◆ clone(). TObject * RooPullVar::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 31 of file RooPullVar.h. ◆ DeclFileName(). static const char * RooPullVar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPullVar.html:60504,error,error,60504,doc/master/classRooPullVar.html,https://root.cern,https://root.cern/doc/master/classRooPullVar.html,1,['error'],['error']
Availability,"otected Member Functions; static RooRealVarSharedProperties & _nullProp ();  Null property. ;  ; static SharedPropertiesMap * sharedPropList ();  List of properties shared among clones of a variable. ;  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; std::unordered_map< std::string, std::unique_ptr< RooAbsBinning > > _altNonSharedBinning;  ! Non-shareable alternative binnings ;  ; double _asymErrHi;  High side of asymmetric error associated with current value. ;  ; double _asymErrLo;  Low side of asymmetric error associated with current value. ;  ; std::unique_ptr< RooAbsBinning > _binning;  ; double _error;  Symmetric error associated with current value. ;  ; std::shared_ptr< RooRealVarSharedProperties > _sharedProp;  ! Shared binnings associated with this instance ;  ; std::size_t _valueResetCounter = 0;  ! How many times the value of this variable was reset ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; TreeReadBuffer * _treeReadBuffer = nullptr;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:68126,error,error,68126,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['error']
Availability,"otected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <THnSparse_Internal.h>. Inheritance diagram for THnSparseArrayChunk:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ THnSparseArrayChunk() [1/3]. THnSparseArrayChunk::THnSparseArrayChunk ; (; const THnSparseArrayChunk & ; ). privatedelete . ◆ THnSparseArrayChunk() [2/3]. THnSparseArrayChunk::THnSparseArrayChunk ; (; ). inline . Definition at line 37 of file THnSparse_Internal.h. ◆ THnSparseArrayChunk() [3/3]. THnSparseArrayChunk::THnSparseArrayChunk ; (; Int_t ; coordsize, . bool ; errors, . TArray * ; cont . ). (Default) initialize a chunk. ; Takes ownership of cont (~THnSparseArrayChunk deletes it), and create an ArrayF for errors if ""errors"" is true. ; Definition at line 427 of file THnSparse.cxx. ◆ ~THnSparseArrayChunk(). THnSparseArrayChunk::~THnSparseArrayChunk ; (; ). override . Destructor. ; Definition at line 440 of file THnSparse.cxx. Member Function Documentation. ◆ AddBin(). void THnSparseArrayChunk::AddBin ; (; Int_t ; idx, . const Char_t * ; idxbuf . ). Create a new bin in this chunk. ; Definition at line 450 of file THnSparse.cxx. ◆ AddBinContent(). void THnSparseArrayChunk::AddBinContent ; (; Int_t ; idx, . Double_t ; v = 1. . ). inline . Definition at line 52 of file THnSparse_Internal.h. ◆ Class(). static TClass * THnSparseArrayChunk::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * THnSparseArrayChunk::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t THnSparseArrayChunk::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseArrayChunk.html:12011,error,errors,12011,doc/master/classTHnSparseArrayChunk.html,https://root.cern,https://root.cern/doc/master/classTHnSparseArrayChunk.html,2,['error'],['errors']
Availability,"otected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidSetBins(const RooAbsCollection& coll, Int_t numBins) const; voidSetupBasicUsage(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. RooArgList*fAxeswhich variables to put on each axis; RooAbsData*fDatapointer to the data (owned by the workspace); Double_tfDeltaacceptable error for Keys cutoffs being equal; Double_tfEpsilonacceptable error for Keys interval determination; RooStats::MCMCInterval::IntervalTypefIntervalTypetype of interval to find; Double_tfLeftSideTFleft side tail-fraction for interval; TStringTNamed::fNameobject identifier; RooArgSetfNuisParamsnuisance parameters for interval (not really used); Int_tfNumBinsset the number of bins to create for each; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfPOIparameters of interest for interval; RooAbsPdf*fPdfpointer to common PDF (owned by the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. void SetupBasicUsage(). void SetLeftSideTailFract",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCCalculator.html:7343,error,error,7343,root/html528/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCCalculator.html,4,['error'],['error']
Availability,"oth cases the error matrix will be unreliable and the minimum; 263suspicious.; 264 ; 265##### An ill-posed problem:; 266 ; 267For questions of parameter dependence, see the discussion above on; 268positive-definiteness.; 269 ; 270Possible other mathematical problems are the following:; 271 ; 272##### Excessive numerical roundoff:; 273 ; 274Be especially careful of exponential and factorial functions which get big; 275very quickly and lose accuracy.; 276 ; 277##### Starting too far from the solution:; 278 ; 279The function may have unphysical local minima, especially at infinity in; 280some variables.; 281 ; 282##### Minuit parameter errors in the presence of limits; 283This concerns the way Minuit reports the symmetric (or parabolic) errors; 284on parameters. It does not apply to the errors reported from Minos, which; 285are in general asymmetric.; 286 ; 287The symmetric errors reported by Minuit are always calculated from; 288the covariance matrix, assuming that this matrix has been calculated,; 289usually as the result of a Migrad minimization or a direct; 290calculation by Hesse which inverts the second derivative matrix.; 291 ; 292When there are no limits on the parameter in question, the error reported; 293by Minuit should therefore be exactly equal to the square root of the; 294corresponding diagonal element of the error matrix reported by Minuit.; 295 ; 296However, when there are limits on the parameter, there is a transformation; 297between the internal parameter values seen by Minuit (which are unbounded); 298and the external parameter values seen by the user in FCN (which remain; 299inside the desired limits). Therefore the internal error matrix kept by; 300Minuit must be transformed to an external error matrix for the user.; 301This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; 302where DEXDIN is the derivative of the external value with respect to the; 303internal value at the minimum. This is a linearisation of the; 304transformatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:13739,error,errors,13739,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['errors']
Availability,"oth values.; Errors (if any) are not modified.; the smoothing procedure is repeated ntimes (default=1). void StatOverflows(Bool_t flag = kTRUE); if flag=kTRUE, underflows and overflows are used by the Fill functions; in the computation of statistics (mean value, RMS).; By default, underflows or overflows are not used. void Streamer(TBuffer& ); -*-*-*-*-*-*-*Stream a class object*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Print(Option_t* option = """") const; -*-*-*-*-*Print some global quantities for this histogram*-*-*-*-*-*-*-*. If option ""base"" is given, number of bins and ranges are also printed; If option ""range"" is given, bin contents and errors are also printed; for all bins in the current range (default 1-->nbins); If option ""all"" is given, bin contents and errors are also printed; for all bins including under and overflows. void Rebuild(Option_t* option = """"); Using the current bin info, recompute the arrays for contents and errors. void Reset(Option_t* option = """"); -*-*-*-*-*-*Reset this histogram: contents, errors, etc*-*-*-*-*-*-*-*. if option ""ICE"" is specified, resets only Integral, Contents and Errors.; if option ""ICES"" is specified, resets only Integral, Contents , Errors and Statistics; This option is used; if option ""M"" is specified, resets also Minimum and Maximum. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SavePrimitiveHelp(ostream& out, const char* hname, Option_t* option = """"); helper function for the SavePrimitive functions from TH1; or classes derived from TH1, eg TProfile, TProfile2D. void UseCurrentStyle(); Copy current attributes from/to current style. Double_t GetMean(Int_t axis = 1) const; For axis = 1,2 or 3 returns the mean value of the histogram along; X,Y or Z axis.; For axis = 11, 12, 13 returns the standard error of the mean value; of the histogram along X, Y or Z axis. Note that the mean value/RMS is computed using the bins in the currently; defined range (see T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:106638,error,errors,106638,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"other); RooThreshEntry(Double_t thresh, const RooCatType& cat); virtual~RooThreshEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); const RooCatType&cat() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*Clone(const char*) const; virtual Int_tCompare(const TObject*) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooThreshEntry.html:1468,error,error,1468,root/html526/RooThreshEntry.html,https://root.cern,https://root.cern/root/html526/RooThreshEntry.html,5,['error'],['error']
Availability,"other, const void* obj, const TClass* cl, const char* name, Int_t bufsize); static TDirectory*&TDirectory::CurrentDirectory(); static TFile*&TFile::CurrentFile(); static voidTDirectory::DecodeNameCycle(const char* namecycle, char* name, Short_t& cycle, const size_t namesize = 0); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTFile::Delete(const char* namecycle = """"); virtual voidTDirectory::DeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTFile::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawMap(const char* = ""*"", Option_t* = """"); virtual voidTObject::Dump() constMENU ; static voidTDirectory::EncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TKey*TDirectoryFile::FindKey(const char* keyname) const; virtual TKey*TDirectoryFile::FindKeyAny(const char* keyname) const; virtual TObject*TDirectory::FindObject(const char* name) const; virtual TObject*TDirectory::FindObject(const TObject* obj) const; virtual TObject*TDirectoryFile::FindObjectAny(const char* name) const; virtual TObject*TDirectoryFile::FindObjectAnyFile(const char* name) const; virtual voidFlush(); virtual TObject*TDirectoryFile::Get(const char* namecycle); TArchiveFile*TFile::GetArchive() const; Long64_tTFile::GetArchiveOffset() const; static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(const char* name); static TFile::EAsyncOpenStatusTFile::GetAsyncOpenStatus(TFileOpenHandle* handle); Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXMLFile.html:5408,error,error,5408,root/html534/TXMLFile.html,https://root.cern,https://root.cern/root/html534/TXMLFile.html,3,['error'],['error']
Availability,"otherwise the error is set equal to the sqrt(bin content). To return the error for a given bin number, do: Double_t error = h->GetBinError(bin);. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each histogram. When TH1::Fit is invoked, the fitted function is added to this list. Given a histogram h, one can retrieve an associated function with: TF1 *myfunc = h->GetFunction(""myfunc"");; TF11-Dim function classDefinition TF1.h:233. Operations on histograms; Many types of operations are supported on histograms or between histograms. Addition of a histogram to the current histogram.; Additions of two histograms with coefficients and storage into the current histogram.; Multiplications and Divisions are supported in the same way as additions.; The Add, Divide and Multiply functions also exist to add, divide or multiply a histogram by a function. If a histogram has associated error bars (TH1::Sumw2 has been called), the resulting error bars are also computed assuming independent histograms. In case of divisions, Binomial errors are also supported. One can mark a histogram to be an ""average"" histogram by setting its bit kIsAverage via myhist.SetBit(TH1::kIsAverage); When adding (see TH1::Add) average histograms, the histograms are averaged and not summed. Projections of histograms; One can:. make a 1-D projection of a 2-D histogram or Profile see functions TH2::ProjectionX,Y, TH2::ProfileX,Y, TProfile::ProjectionX; make a 1-D, 2-D or profile out of a 3-D histogram see functions TH3::ProjectionZ, TH3::Project3D. One can fit these projections via: TH2::FitSlicesX,Y, TH3::FitSlicesZ.; TH2::FitSlicesXvirtual void FitSlicesX(TF1 *f1=nullptr, Int_t firstybin=0, Int_t lastybin=-1, Int_t cut=0, Option_t *option=""QNR"", TObjArray *arr=nullptr)Project slices along X in case of a 2-D histogram, then fit each slice with function f1 and make a hi...Definition TH2.cxx:1016; TH3::FitSlicesZvirtual void FitSlicesZ(TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:14312,error,error,14312,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['error']
Availability,"otifyLink.h. ◆ IsLinked(). Bool_t TNotifyLinkBase::IsLinked ; (; ). inline . Definition at line 116 of file TNotifyLink.h. ◆ PrependLink(). template<class Chain > . void TNotifyLinkBase::PrependLink ; (; Chain & ; chain). inline . Set this link as the head of the chain's list of notify subscribers. ; Templated only to remove an include dependency from TChain: it expects a TChain as input (in practice anything that implements SetNotify and GetNotify will work, but in ROOT that is only TTree and its sub-classes). ; Definition at line 82 of file TNotifyLink.h. ◆ RemoveLink(). template<class Chain > . void TNotifyLinkBase::RemoveLink ; (; Chain & ; chain). inline . Remove this link from a chain's list of notify subscribers. ; Templated only to remove an include dependency from TChain: it expects a TChain as input (in practice anything that implements SetNotify and GetNotify will work, but in ROOT that is only TTree and its sub-classes). NoteNo error is emitted if the TNotifyLink is not part of the linked list for the chain passed as argument. The TNotifyLink will still remove itself from the doubly linked list. ; Definition at line 100 of file TNotifyLink.h. ◆ Streamer(). void TNotifyLinkBase::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TNotifyLinkBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 123 of file TNotifyLink.h. Member Data Documentation. ◆ fNext. TObject* TNotifyLinkBase::fNext = nullptr. protected . Next node in a TChain's list of subscribers. ; For generality, it might be a generic TObject rather than another TNotifyLink: this makes it possible to call TChain::SetNotify() with a generic notifier exactly once before more TNotifyLinks are added. Null if this is the tail of the list. ; Definition at line 57 of file TNotifyLink.h. ◆ fPrevious. TNotifyLinkBase* TNotifyLinkBase::fPrevious = nullptr. protected . Previo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNotifyLinkBase.html:12742,error,error,12742,doc/master/classTNotifyLinkBase.html,https://root.cern,https://root.cern/doc/master/classTNotifyLinkBase.html,1,['error'],['error']
Availability,"ototype event to load according to LUT; TString_normRangeNormalization range of pdf; Int_t*_protoOrderLUT with traversal order of prototype data; RooArgSet_protoVarsPrototype observables; const RooDataSet*_prototypePointer to prototype dataset; RooArgSet*_theEventPointer to observable event being generated; Bool_t_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsGenContext(); Destructor. void attach(const RooArgSet& params); Interface to attach given parameters to object in this context. RooDataSet * generate(Int_t nEvents = 0); Generate the specified number of events with nEvents>0 and; and return a dataset containing the generated events. With nEvents<=0,; generate the number of events in the prototype dataset, if available,; or else the expected number of events, if non-zero. The returned; dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsGenContext.html:8573,error,error,8573,root/html528/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html528/RooAbsGenContext.html,1,['error'],['error']
Availability,"otype dataset with only variables in whatVars randomized. Variables in whatVars that; are not in the prototype will be added as new columns to the generated dataset. RooDataSet * generate(RooAbsPdf::GenSpec& ) const; Generate data according to a pre-configured specification created by; RooAbsPdf::prepareMultiGen(). If many identical generation requests; are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); combination than calling the standard generate() multiple times as; initialization overhead is only incurred once. RooDataSet * generate(const RooArgSet& whatVars, Int_t nEvents = 0, Bool_t verbose = kFALSE) const; Generate a new dataset containing the specified variables with; events sampled from our distribution. Generate the specified; number of events or else try to use expectedEvents() if nEvents <= 0.; Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooDataSet * generate(RooAbsGenContext& context, const RooArgSet &whatVars, const RooDataSet *prototype,				Int_t nEvents, Bool_t /*verbose*/, Bool_t randProtoOrder, Bool_t resampleProto); Internal method. RooDataSet * generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; Generate a new dataset with values of the whatVars variables; sampled from our distribution. Use the specified existing dataset; as a prototype: the new dataset will contain the same number of; events as the prototype (by default), and any prototype variables not in; whatVars will be copied into the new dataset for each generated; event and also used to set our PDF parameters. The user can specify a; number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:60194,error,error,60194,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['error'],['error']
Availability,"otype dataset with only variables in whatVars randomized. Variables in whatVars that; are not in the prototype will be added as new columns to the generated dataset. RooDataSet * generate(RooAbsPdf::GenSpec& ) const; Generate data according to a pre-configured specification created by; RooAbsPdf::prepareMultiGen(). If many identical generation requests; are needed, e.g. in toy MC studies, it is more efficient to use the prepareMultiGen()/generate(); combination than calling the standard generate() multiple times as; initialization overhead is only incurred once. RooDataSet * generate(const RooArgSet& whatVars, Int_t nEvents = 0, Bool_t verbose = kFALSE) const; Generate a new dataset containing the specified variables with; events sampled from our distribution. Generate the specified; number of events or else try to use expectedEvents() if nEvents <= 0.; Any variables of this PDF that are not in whatVars will use their; current values and be treated as fixed parameters. Returns zero; in case of an error. The caller takes ownership of the returned; dataset. RooDataSet * generate(RooAbsGenContext& context, const RooArgSet& whatVars, const RooDataSet* prototype, Int_t nEvents, Bool_t verbose, Bool_t randProtoOrder, Bool_t resampleProto) const; Internal method. RooDataSet * generate(const RooArgSet& whatVars, const RooDataSet& prototype, Int_t nEvents = 0, Bool_t verbose = kFALSE, Bool_t randProtoOrder = kFALSE, Bool_t resampleProto = kFALSE) const; Generate a new dataset with values of the whatVars variables; sampled from our distribution. Use the specified existing dataset; as a prototype: the new dataset will contain the same number of; events as the prototype (by default), and any prototype variables not in; whatVars will be copied into the new dataset for each generated; event and also used to set our PDF parameters. The user can specify a; number of events to generate that will override the default. The result is a; copy of the prototype dataset with only variables ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:61182,error,error,61182,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['error'],['error']
Availability,"ou can generate it from a Gaussian pdf and use the resulting; RooDataSet with this constructor. The result is the projected distribution onto varName; marginalizing the other variables. If varName is not given, the first variable will be used.; This is useful mostly for RooDataSets with only one observable. SamplingDistribution(); SamplingDistribution default constructor. ~SamplingDistribution(); SamplingDistribution destructor. void Add(const RooStats::SamplingDistribution* other); Merge SamplingDistributions (does nothing if NULL is given).; If variable name was not set before, it is copied from the added; SamplingDistribution. Double_t Integral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off. Double_t IntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Returns the integral in the open/closed/mixed interval. Default is [low,high) interval.; Normalization can be turned off.; compute also the error on the integral. Double_t CDF(Double_t x) const; returns the closed integral [-inf,x]. Double_t InverseCDF(Double_t pvalue); returns the inverse of the cumulative distribution function. Double_t InverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); returns the inverse of the cumulative distribution function, with variations depending on number of samples. Double_t InverseCDFInterpolate(Double_t pvalue); returns the inverse of the cumulative distribution function. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const char* varName = 0); Constructor for SamplingDistribution. Int_t GetSize() const; size of samples. {return fSamplingDist.size();}. const std::vector<Double_t> & GetSamplingDistribution() const; Get test statistic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:9065,error,error,9065,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,1,['error'],['error']
Availability,"ou can retrieve the information for currently selected item via GetSelected or GetSelectedEntry methods. The first one returns the entry ID, the second - the current entry pointer (TGLBEntry *).; 25.8.8 Sliders; A slider is a scale with an indicator (slider) that you can drag to choose a value from a predefined range. It may be oriented horizontally or vertically. In both cases it provides an excellent indication of where a value exists within a range of values. The class TGHSlider represents the horizontal slider; TGVSlider - the vertical one. Both inherit from the base class TGSlider that creates the main slider parameters: the range of values within a value can be selected; the indicator type; the tick mark scale. Using its methods SetRange, SetPosition and SetScale you can set these parameters. To retrieve the set slider value you can call GetPosition method.; Next sample code creates a horizontal slider hslider with a tick mark of type kSlider1. Its width is 150 pixels, and its scale is placed down (kScaleDownRight). The last parameter in the TGHSlider constructor is the slider ID. It will be used for event processing. The methods SetRange and SetPosition set the range and the current tick mark position of the slider.; hslider = new TGHSlider(parent,150,kSlider1|kScaleDownRight,sID);; hslider->SetRange(0,50);; hslider->SetPosition(39);; Slider values can be set by using the mouse to drag the slider across the scale until the desired value is reached. Another way is to click in the slider trough instead of dragging.; 25.8.8.1 Double Slider; Double slider widgets allow easy selection of a min and a max value out of a range. They can be either horizontal or vertical oriented. There is a choice of different types of tick marks: kDoubleScaleNo, kScaleDownRight, kDoubleScaleBoth.; To change the min value you should press the left mouse button near to the left (TGDoubleHSlider) or bottom (TGDoubleHSlider) edge of the slider. Alternatively, to change the max value you n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1205150,down,down,1205150,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['down']
Availability,"ouble * GetPoint(unsigned int ipoint, double& value) const. retrieve at the same time a pointer to the coordinate data and the fit value; More efficient than calling Coords(i) and Value(i). const double * GetPoint(unsigned int ipoint, double& value, double& invError) const. retrieve in a single call a pointer to the coordinate data, value and inverse error for; the given fit point.; To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; for the error. const double * GetPointError(unsigned int ipoint, double& errvalue) const. Retrieve the errors on the point (coordinate and value) for the given fit point; It must be called only when the coordinate errors are stored otherwise it will produce an; assert. const double * GetPointError(unsigned int ipoint, double& errlow, double& errhigh) const. Get errors on the point (coordinate errors and asymmetric value errors) for the; given fit point.; It must be called only when the coordinate errors and asymmetric errors are stored; otherwise it will produce an assert. void Resize(unsigned int npoints). resize the vector to the new given npoints; if vector does not exists is created using existing point size. unsigned int NPoints() const. return number of fit points. { return fNPoints; }. unsigned int Size() const. return number of fit points. { return fNPoints; }. unsigned int NDim() const. return coordinate data dimension. { return fDim; }. BinData & LogTransform(). apply a Log transformation of the data values; can be used for example when fitting an exponential or gaussian; Transform the data in place need to copy if want to preserve original data; The data sets must not contain negative values. IN case it does,; an empty data set is returned. const double * BinUpEdge(unsigned int icoord) const. return an array containing the upper edge of the bin for coordinate i; In case of empty bin they could be merged in a single larger bin; Return a NULL pointer if the bin width is not stored. bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__BinData.html:11000,error,errors,11000,root/html526/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__BinData.html,14,['error'],['errors']
Availability,"ouble /*xlo*/, double /*xhi*/) const {; 3561 return nullptr;; 3562}; 3563 ; 3564 ; 3565////////////////////////////////////////////////////////////////////////////////; 3566/// Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable `obs`.; 3567/// \param[in] obs Observable to retrieve sampling hint for.; 3568/// \param[in] xlo Beginning of range.; 3569/// \param[in] xhi End of range.; 3570/// \return The caller owns the returned std::list.; 3571std::list<double>* RooAbsReal::plotSamplingHint(RooAbsRealLValue& /*obs*/, double /*xlo*/, double /*xhi*/) const {; 3572 return nullptr;; 3573}; 3574 ; 3575////////////////////////////////////////////////////////////////////////////////; 3576/// Print all outstanding logged evaluation error on the given ostream. If maxPerNode; 3577/// is zero, only the number of errors for each source (object with unique name) is listed.; 3578/// If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; 3579/// per source of errors. A truncation message is shown if there were more errors logged; 3580/// than shown.; 3581 ; 3582void RooAbsReal::printEvalErrors(std::ostream &os, Int_t maxPerNode); 3583{; 3584 if (evalErrorData().mode == CountErrors) {; 3585 os << evalErrorData().count << "" errors counted"" << std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:153146,error,error,153146,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"ouble GetExpectedLimit(double nsig, bool lower, const char* opt = """") const; get expected limit (lower/upper) depending on the flag; for asymptotic is a special case (the distribution is generated an step in sigma values); distringuish asymptotic looking at the hypotest results; if option = ""P"" get expected limit using directly quantiles of p value distribution; else (default) find expected limit by obtaining first a full limit distributions; The last one is in general more correct. explicit HypoTestInverterResult(const char* name = 0); default constructor. double GetLastYValue() const; { return GetYValue( fXValues.size()-1); }. double GetLastXValue() const; { return GetXValue( fXValues.size()-1); }. double GetLastYError() const; { return GetYError( fXValues.size()-1); }. HypoTestResult * GetLastResult() const; { return GetResult( fXValues.size()-1); }. int ArraySize() const; number of entries in the results array. { return fXValues.size(); }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) (eg. 0.05 for a 95% Confidence Interval). { fConfidenceLevel = 1.-size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fConfidenceLevel = cl; }. void SetCLsCleanupThreshold(Double_t th); set CLs threshold for exclusion cleanup function. { fCLsCleanupThreshold = th; }. void UseCLs(bool on = true); flag to switch between using CLsb (default) or CLs as confidence level. { fUseCLs = on; }. bool IsOneSided() const; query if one sided result. { return !fIsTwoSided; }. bool IsTwoSided() const; query if two sided result. { return fIsTwoSided; }. SamplingDistribution * GetNullTestStatDist(int index) const; same in terms of alt and null. SamplingDistribution * GetAltTestStatDist(int index) const. SamplingDistribution* GetLowerLimitDistribution() const; get expected lower limit distributions; implemented using interpolation; The size for the sampling distribution is given (by def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html:17947,error,error,17947,root/html602/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HypoTestInverterResult.html,2,['error'],['error']
Availability,ouble Precision() const { return fPrecision; }; 190 ; 191 /// error definition; 192 double ErrorDef() const { return fErrorDef; }; 193 ; 194 /// return extra options (NULL pointer if they are not present); 195 const IOptions * ExtraOptions() const { return fExtraOptions; }; 196 ; 197 /// type of minimizer; 198 const std::string & MinimizerType() const { return fMinimType; }; 199 ; 200 /// type of algorithm; 201 const std::string & MinimizerAlgorithm() const { return fAlgoType; }; 202 ; 203 /// print all the options; 204 void Print(std::ostream & os = std::cout) const;; 205 ; 206 /** non-static methods for setting options */; 207 void ResetToDefaultOptions();; 208 ; 209 /// set print level; 210 void SetPrintLevel(int level) { fLevel = level; }; 211 ; 212 ///set maximum of function calls; 213 void SetMaxFunctionCalls(unsigned int maxfcn) { fMaxCalls = maxfcn; }; 214 ; 215 /// set maximum iterations (one iteration can have many function calls); 216 void SetMaxIterations(unsigned int maxiter) { fMaxIter = maxiter; }; 217 ; 218 /// set the tolerance; 219 void SetTolerance(double tol) { fTolerance = tol; }; 220 ; 221 /// set the precision; 222 void SetPrecision(double prec) { fPrecision = prec; }; 223 ; 224 /// set the strategy; 225 void SetStrategy(int stra) { fStrategy = stra; }; 226 ; 227 /// set error def; 228 void SetErrorDef(double err) { fErrorDef = err; }; 229 ; 230 /// set minimizer type; 231 void SetMinimizerType(const char * type) { fMinimType = type; }; 232 ; 233 /// set minimizer algorithm; 234 void SetMinimizerAlgorithm(const char *type) { fAlgoType = type; }; 235 ; 236 /// set extra options (in this case pointer is cloned); 237 void SetExtraOptions(const IOptions & opt);; 238 ; 239 ; 240private:; 241 ; 242 int fLevel; ///< debug print level; 243 int fMaxCalls; ///< maximum number of function calls; 244 int fMaxIter; ///< maximum number of iterations; 245 int fStrategy; ///< minimizer strategy (used by Minuit); 246 double fErrorDef; ///< error definition (=1.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8h_source.html:9280,toler,tolerance,9280,doc/master/MinimizerOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"ouble RooDataSet::weight ; (; ); const. overridevirtual . Return event weight of current event. ; Implements RooAbsData.; Definition at line 759 of file RooDataSet.cxx. ◆ weightError() [1/2]. void RooDataSet::weightError ; (; double & ; lo, . double & ; hi, . ErrorType ; etype = SumW2 . ); const. overridevirtual . Return the asymmetric errors on the current weight. ; See also weightError(ErrorType) const for symmetric error. Parameters. [out]loLow error. ; [out]hiHigh error. ; etypeerror type . Reimplemented from RooAbsData.; Definition at line 817 of file RooDataSet.cxx. ◆ weightError() [2/2]. double RooDataSet::weightError ; (; ErrorType ; etype = SumW2); const. overridevirtual . Parameters. etypeerror type . Reimplemented from RooAbsData.; Definition at line 826 of file RooDataSet.cxx. ◆ weightSquared(). double RooDataSet::weightSquared ; (; ); const. overridevirtual . Return squared event weight of the current event. ; If this RooDataSet has no weight errors set, this will be the same as weight() * weight(), like expected for an unbinned dataset. When weight errors are set, it is assumed that the RooDataSet represents a weighted binned dataset and weightSquared() is the corresponding sum of weight squares for the bin. ; Implements RooAbsData.; Definition at line 773 of file RooDataSet.cxx. ◆ weightVar(). RooRealVar * RooDataSet::weightVar ; (; ); const. inline . Returns a pointer to the weight variable (if set). ; Definition at line 84 of file RooDataSet.h. ◆ write() [1/2]. bool RooDataSet::write ; (; const char * ; filename); const. Write the contents of this dataset to an ASCII file with the specified name. ; Each event will be written as a single line containing the written values of each observable in the order they were declared in the dataset and separated by whitespaces ; Definition at line 1557 of file RooDataSet.cxx. ◆ write() [2/2]. bool RooDataSet::write ; (; std::ostream & ; ofs); const. Write the contents of this dataset to the stream. ; Each event ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooDataSet.html:58884,error,errors,58884,doc/master/classRooDataSet.html,https://root.cern,https://root.cern/doc/master/classRooDataSet.html,1,['error'],['errors']
Availability,"ouble confLevel = 0.683);; 70 ; 71 using TObject::Error;; 72 ; 73 // need to re-implement to solve conflict with TObject::Error; 74 double Error(unsigned int i) const {; 75 return ParError(i);; 76 }; 77 ; 78private:; 79 ClassDefOverride(TFitResult, 0); // Class holding the result of the fit; 80};; 81 ; 82namespace cling {; 83 std::string printValue(const TFitResult* val);; 84}; 85#endif; FitResult.h; f#define f(i)Definition RSha256.hxx:104; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; namechar name[80]Definition TGX11.cxx:110; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TMatrixDSym.h; TNamed.h; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::FitResult::ParErrordouble ParError(unsigned int i) constparameter error by indexDefinition FitResult.h:183; ROOT::Fit::FitResult::Scanbool Scan(unsigned int ipar, unsigned int &npoints, double *pntsx, double *pntsy, double xmin=0, double xmax=0)scan likelihood value of parameter and fill the given graph.Definition FitResult.cxx:639; ROOT::Fit::FitResult::FitResultFitResult()Default constructor for an empty (non valid) fit result.Definition FitResult.cxx:45; ROOT::Fit::FitResult::Contourbool Contour(unsigned int ipar, unsigned int jpar, unsigned int &npoints, double *pntsx, double *pntsy, double confLevel=0.683)create contour of two parameters around the minimum pass as option confidence level: default is a val...Definition FitResult.cxx:660; ROOT::Fit::FitResult::fStatusint fStatusminimizer status codeDefinition FitResult.h:348; TFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34; TFitResult::~TFitResult~TFitResult() overrideDefinition TFitResult",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8h_source.html:3285,error,error,3285,doc/master/TFitResult_8h_source.html,https://root.cern,https://root.cern/doc/master/TFitResult_8h_source.html,1,['error'],['error']
Availability,"ouble eyl, double eyh);  add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ;  ; void Add (double x, double y, double ey);  add one dim data with no error in the coordinate (x) in this case store the inverse of the error in the value (y) ;  ; void AddBinUpEdge (const double *xup);  add the bin width data, a pointer to an array with the bin upper edge information. ;  ; void Append (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Equivalent to Initialize() ;  ; const double * BinUpEdge (unsigned int ipoint) const;  return an array containing the upper edge of the bin for coordinate i In case of empty bin they could be merged in a single larger bin Return a NULL pointer if the bin width is not stored ;  ; const double * CoordErrors (unsigned int ipoint) const;  Return a pointer to the errors in the coordinates for the given fit point. ;  ; double Error (unsigned int ipoint) const;  Return the error on the given point. ;  ; const double * ErrorPtr (unsigned int ipoint) const;  Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. ;  ; void GetAsymError (unsigned int ipoint, double &lowError, double &highError) const;  ; double GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:4842,error,error,4842,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['error']
Availability,"ouble m_betainternal parameter (momentum)Definition NeuralNet.h:372; TMVA::DNN::Steepest::m_localGradientsstd::vector< double > m_localGradientslocal gradients for reuse in thread.Definition NeuralNet.h:376; TMVA::DNN::Steepest::m_prevGradientsstd::vector< double > m_prevGradientsvector remembers the gradients of the previous stepDefinition NeuralNet.h:373; TMVA::DNN::Steepest::m_alphadouble m_alphainternal parameter (learningRate)Definition NeuralNet.h:371; TMVA::DNN::Steepest::m_localWeightsstd::vector< double > m_localWeightslocal weights for reuse in thread.Definition NeuralNet.h:375; TMVA::DNN::Steepest::operator()double operator()(Function &fitnessFunction, Weights &weights, PassThrough &passThrough)operator to call the steepest gradient descent algorithmDefinition NeuralNet.icc:271; TMVA::DNN::Steepest::SteepestSteepest(double learningRate=1e-4, double momentum=0.5, size_t repetitions=10)c'torDefinition NeuralNet.h:348; TMVA::IPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jup...Definition MethodBase.h:94; TMVA::TimerTiming information for training and evaluation of MVA methods.Definition Timer.h:58; TMVA::Timer::DrawProgressBarvoid DrawProgressBar(Int_t, const TString &comment="""")draws progress bar in color or B&W caution:Definition Timer.cxx:202; TStringBasic string class.Definition TString.h:139; double; unsigned int; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA::DNN::sumOfSquaresdouble sumOfSquares(ItOutput itOutputBegin, ItOutput itOutputEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight); TMVA::DNN::uniformDoubledouble uniformDouble(double minValue, double maxValue)Definition NeuralNet.cxx:43; TMVA::DNN::forwardvoid forward(const LAYERDATA &prevLayerData, LAYERDATA &currLayerData)apply the weights (and functions) in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:79434,error,errors,79434,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['error'],['errors']
Availability,"ouble step, double upper); voidSetValidError(bool on); virtual boolSetVariable(unsigned int ivar, const string& name, double val, double step); virtual boolSetVariableInitialRange(unsigned int, double, double); virtual boolSetVariableLimits(unsigned int ivar, double lower, double upper); virtual boolSetVariableLowerLimit(unsigned int ivar, double lower); virtual boolSetVariableStepSize(unsigned int ivar, double value); virtual boolSetVariableUpperLimit(unsigned int ivar, double upper); virtual boolSetVariableValue(unsigned int ivar, double value); virtual boolSetVariableValues(const double* x); intStatus() const; intStrategy() const; doubleTolerance() const; virtual intVariableIndex(const string& name) const; virtual stringVariableName(unsigned int ivar) const; virtual const double*X() const. private:. ROOT::Math::Minimizer&operator=(const ROOT::Math::Minimizer& rhs). Data Members; protected:. ROOT::Math::MinimizerOptionsfOptionsminimizer options; intfStatusstatus of minimizer ; boolfValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~Minimizer(). Destructor (no operations). {}. void Clear(); reset for consecutive minimizations - implement if needed. {}. void SetFunction(const ROOT::Math::IMultiGenFunction& func); set the function to minimize. void SetFunction(const ROOT::Math::IMultiGradFunction& func); set a function to minimize using gradient. bool SetVariable(unsigned int ivar, const string& name, double val, double step); set a new free variable. bool SetLowerLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower); set a new lower limit variable (override if minimizer supports them ). return SetLimitedVariable(unsigned int ivar, const string& name, double val, double step, double lower, double upper). bool SetUpperLimitedVariable(unsigned int ivar, const string& name, double val, do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:4978,error,errors,4978,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,1,['error'],['errors']
Availability,"ouble); const ROOT::Minuit2::MnUserParameterState&ROOT::Minuit2::MnApplication::State() const; const ROOT::Minuit2::MnStrategy&ROOT::Minuit2::MnApplication::Strategy() const; doubleROOT::Minuit2::MnApplication::Value(unsigned int) const; doubleROOT::Minuit2::MnApplication::Value(const char*) const; unsigned intROOT::Minuit2::MnApplication::VariableParameters() const. private:. ROOT::Minuit2::MnMinimize&operator=(const ROOT::Minuit2::MnMinimize&). Data Members; protected:. const ROOT::Minuit2::FCNBase&ROOT::Minuit2::MnApplication::fFCN; unsigned intROOT::Minuit2::MnApplication::fNumCall; ROOT::Minuit2::MnUserParameterStateROOT::Minuit2::MnApplication::fState; ROOT::Minuit2::MnStrategyROOT::Minuit2::MnApplication::fStrategy; boolROOT::Minuit2::MnApplication::fUseGrad. private:. ROOT::Minuit2::CombinedMinimizerfMinimizer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinimize(const FCNBase& fcn, const std::vector<double>& par, const std::vector<double>& err, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and errors. {}. MnMinimize(const FCNBase& fcn, const std::vector<double>& par, unsigned int nrow, const std::vector<double>& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and covariance. {}. MnMinimize(const FCNBase& fcn, const std::vector<double>& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + std::vector for parameters and MnUserCovariance. {}. MnMinimize(const FCNBase& fcn, const MnUserParameters& par, unsigned int stra = 1); construct from FCNBase + MnUserParameters. {}. MnMinimize(const FCNBase& fcn, const MnUserParameters& par, const MnUserCovariance& cov, unsigned int stra = 1); construct from FCNBase + MnUserParameters + MnUserCovariance. {}. MnMinimize(const FCNBase& fcn, const MnUserParameterState& par, const MnStrategy& str); construct from FCNBase + MnUserParameterState + MnStrategy. {}. MnMinimize(const FCNGradie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnMinimize.html:6062,error,errors,6062,root/html526/ROOT__Minuit2__MnMinimize.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnMinimize.html,7,['error'],['errors']
Availability,"ouble>&); virtual~RooCFunction1Ref<double,double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*argName(Int_t iarg); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static RooCFunction1Map<double,double>&fmap(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCFunction1Ref_double_double_.html:2121,error,error,2121,root/html526/RooCFunction1Ref_double_double_.html,https://root.cern,https://root.cern/root/html526/RooCFunction1Ref_double_double_.html,5,['error'],['error']
Availability,"ouble>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const double&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParameter_double_.html:1708,error,error,1708,root/html532/TParameter_double_.html,https://root.cern,https://root.cern/root/html532/TParameter_double_.html,4,['error'],['error']
Availability,"ouble>Params() const; const ROOT::Minuit2::MnMachinePrecision&Precision() const; voidRelease(unsigned int); voidRelease(const char*); voidRemoveLimits(unsigned int); voidRemoveLimits(const char*); voidSetError(unsigned int, double); voidSetError(const char*, double); voidSetLimits(unsigned int, double, double); voidSetLimits(const char*, double, double); voidSetPrecision(double); voidSetValue(unsigned int, double); voidSetValue(const char*, double); const ROOT::Minuit2::MnUserParameterState&State() const; const ROOT::Minuit2::MnStrategy&Strategy() const; doubleValue(unsigned int) const; doubleValue(const char*) const; unsigned intVariableParameters() const. Data Members; protected:. const ROOT::Minuit2::FCNBase&fFCN; unsigned intfNumCall; ROOT::Minuit2::MnUserParameterStatefState; ROOT::Minuit2::MnStrategyfStrategy; boolfUseGrad. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~MnApplication(); { }. FunctionMinimum operator()(unsigned int maxfcn = 0, double tolerance = 0.1). Minimize the function; @param maxfcn : max number of function calls (if = 0) default is used which is set to; 200 + 100 * npar + 5 * npar**2; @param tolerance : value used for terminating iteration procedure.; For example, MIGRAD will stop iterating when edm (expected distance from minimum) will be:; edm < tolerance * 10**-3; Default value of tolerance used is 0.1. const FCNBase& Fcnbase() const; {return fFCN;}. unsigned int NumOfCalls() const; {return fNumCall;}. const std::vector<ROOT::Minuit2::MinuitParameter>& MinuitParameters() const; facade: forward interface of MnUserParameters and MnUserTransformation; via MnUserParameterState; access to parameters (row-wise). std::vector<double> Params() const; access to parameters and errors in column-wise representation. std::vector<double> Errors() const. void Add(const char* Name, double val, double err); add free Parameter. void Add(const char* Name, double val, double err, double , double ); add l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html:2767,toler,tolerance,2767,root/html526/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html,5,['toler'],['tolerance']
Availability,"ouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphBentErrors.cxx:646; TGraphBentErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE***to arrays[***] or to f*** Copy points.Definition TGraphBentErrors.cxx:312; TGraphBentErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideGet low error on Y[i].Definition TGraphBentErrors.cxx:463; TGraphBentErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphBentErrors.cxx:402; TGraphBentErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideGet high error on Y[i].Definition TGraphBentErrors.cxx:452; TGraphBentErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphBentErrors.cxx:210; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::AllocateArraysDouble_t ** AllocateArrays(Int_t Narrays, Int_t arraySize)Allocate arrays.Definition TGraph.cxx:598; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25. histhistincTGraphBentErrors.h. ROOT master - Reference Guide G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:10915,error,error,10915,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,1,['error'],['error']
Availability,"ouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphBentErrors.h:30; TGraphBentErrors::fEYhighdDouble_t * fEYhighd[fNpoints] array of Y high displacementsDefinition TGraphBentErrors.h:36; TGraphBentErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphBentErrors.cxx:278; TGraphBentErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphBentErrors.cxx:646; TGraphBentErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE***to arrays[***] or to f*** Copy points.Definition TGraphBentErrors.cxx:312; TGraphBentErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t bin) const overrideGet low error on Y[i].Definition TGraphBentErrors.cxx:463; TGraphBentErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphBentErrors.cxx:402; TGraphBentErrors::GetErrorYhighDouble_t GetErrorYhigh(Int_t bin) const overrideGet high error on Y[i].Definition TGraphBentErrors.cxx:452; TGraphBentErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphBentErrors.cxx:210; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Classstatic TClass * Class(); TGraph::AddPointvirtual void AddPoint(Double_t x, Double_t y)Append a new point to the graph.Definition TGraph.h:98; TGraph::fNpointsInt_t fNpointsNumber of points <= fMaxSize.Definition TGraph.h:46; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::fMaxSizeInt_t fMaxS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:30792,error,error,30792,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['error']
Availability,"ouble_t * ey = g->GetEY();; 699 for (Int_t i = 0 ; i < g->GetN(); i++) {; 700 SetPoint(n0+i, x[i], y[i]);; 701 if (ex) fEX[n0+i] = ex[i];; 702 if (ey) fEY[n0+i] = ey[i];; 703 }; 704 }; 705 return GetN();; 706}; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Print graph and errors values.; 710 ; 711void TGraphErrors::Print(Option_t *) const; 712{; 713 for (Int_t i = 0; i < fNpoints; i++) {; 714 printf(""x[%d]=%g, y[%d]=%g, ex[%d]=%g, ey[%d]=%g\n"", i, fX[i], i, fY[i], i, fEX[i], i, fEY[i]);; 715 }; 716}; 717 ; 718 ; 719////////////////////////////////////////////////////////////////////////////////; 720/// Save primitive as a C++ statement(s) on output stream out; 721 ; 722void TGraphErrors::SavePrimitive(std::ostream &out, Option_t *option /*= """"*/); 723{; 724 out << "" "" << std::endl;; 725 static Int_t frameNumber = 1000;; 726 frameNumber++;; 727 ; 728 auto fXName = SaveArray(out, ""fx"", frameNumber, fX);; 729 auto fYName = SaveArray(out, ""fy"", frameNumber, fY);; 730 auto fEXName = SaveArray(out, ""fex"", frameNumber, fEX);; 731 auto fEYName = SaveArray(out, ""fey"", frameNumber, fEY);; 732 ; 733 if (gROOT->ClassSaved(TGraphErrors::Class())); 734 out << "" "";; 735 else; 736 out << "" TGraphErrors *"";; 737 out << ""gre = new TGraphErrors("" << fNpoints << "",""; 738 << fXName << "","" << fYName << "",""; 739 << fEXName << "","" << fEYName << "");""; 740 << std::endl;; 741 ; 742 SaveHistogramAndFunctions(out, ""gre"", frameNumber, option);; 743}; 744 ; 745////////////////////////////////////////////////////////////////////////////////; 746/// Multiply the values and errors of a TGraphErrors by a constant c1.; 747///; 748/// If option contains ""x"" the x values and errors are scaled; 749/// If option contains ""y"" the y values and errors are scaled; 750/// If option contains ""xy"" both x and y values and errors are scaled; 751 ; 752void TGraphErrors::Scale(Double_t c1, Option_t *option); 753{; 754 TGraph::Scale(c1, option);; 755 TString opt = o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:23950,error,errors,23950,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with errors.Definition TGraphErrors.cxx:573; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for newsize points.Definition TGraphErrors.h:81; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:8121,error,errors,8121,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['errors']
Availability,"ouble_t *fAmpInit;������������������ //[fNPeaks] array of initial values of; peaks amplitudes, input parameters; ��; Double_t *fAmpCalc;������������������ //[fNPeaks] array of calculated values of; fitted amplitudes, output parameters; ��; Double_t *fAmpErr;������������������� //[fNPeaks] array of amplitude errors; ��; Double_t *fArea;����� ����������������//[fNPeaks] array of calculated areas of; peaks; ��; Double_t *fAreaErr;������������������ //[fNPeaks] array of errors of peak areas; ��; Double_t� fSigmaInit;���������������� //initial value of sigma parameter; ��; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:23557,error,error,23557,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,6,['error'],['error']
Availability,"ouble_t *params = nullptr;; 2867 f1->InitArgs(xx,params);; 2868 for (binz = 0; binz < nz; ++binz) {; 2869 xx[2] = fZaxis.GetBinCenter(binz);; 2870 for (biny = 0; biny < ny; ++biny) {; 2871 xx[1] = fYaxis.GetBinCenter(biny);; 2872 for (binx = 0; binx < nx; ++binx) {; 2873 xx[0] = fXaxis.GetBinCenter(binx);; 2874 if (!f1->IsInside(xx)) continue;; 2875 TF1::RejectPoint(kFALSE);; 2876 bin = binx + nx * (biny + ny * binz);; 2877 cu = c1 * f1->EvalPar(xx);; 2878 if (TF1::RejectedPoint()) continue;; 2879 if (cu) w = RetrieveBinContent(bin) / cu;; 2880 else w = 0;; 2881 UpdateBinContent(bin, w);; 2882 if (fSumw2.fN) {; 2883 if (cu != 0) fSumw2.fArray[bin] = GetBinErrorSqUnchecked(bin) / (cu * cu);; 2884 else fSumw2.fArray[bin] = 0;; 2885 }; 2886 }; 2887 }; 2888 }; 2889 ResetStats();; 2890 return kTRUE;; 2891}; 2892 ; 2893////////////////////////////////////////////////////////////////////////////////; 2894/// Divide this histogram by h1.; 2895///; 2896/// `this = this/h1`; 2897/// if errors are defined (see TH1::Sumw2), errors are also recalculated.; 2898/// Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; 2899/// if not already set.; 2900/// The resulting errors are calculated assuming uncorrelated histograms.; 2901/// See the other TH1::Divide that gives the possibility to optionally; 2902/// compute binomial errors.; 2903///; 2904/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 2905/// you should call Sumw2 before making this operation.; 2906/// This is particularly important if you fit the histogram after TH1::Scale; 2907///; 2908/// The function return kFALSE if the divide operation failed; 2909 ; 2910Bool_t TH1::Divide(const TH1 *h1); 2911{; 2912 if (!h1) {; 2913 Error(""Divide"", ""Input histogram passed does not exist (NULL)."");; 2914 return kFALSE;; 2915 }; 2916 ; 2917 // delete buffer if it is there since it will become invalid; 2918 if (fBuffer) BufferEmpty(1);; 2919 ; 2920 if (LoggedInconsistency(""Divide"", this, h1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:114643,error,errors,114643,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"ouble_t *u, Int_t flag);; Note on treatment of empty bins; Empty bins, which have the content equal to zero AND error equal to zero, are excluded by default from the chi-square fit, but they are considered in the likelihood fit. since they affect the likelihood if the function value in these bins is not negligible. Note that if the histogram is having bins with zero content and non zero-errors they are considered as any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit. In general, one should not fit a histogram with non-empty bins and zero errors.; If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1. Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors are corrected by the obtained chi2 value using this scaling expression: errorp *= sqrt(chisquare/(ndf-1)) as it is done when fitting a TGraph with no point errors.; Excluding points; You can use TF1::RejectPoint inside your fitting function to exclude some points within a certain range from the fit. See the tutorial fit/fitExclude.C.; Warning when using the option ""0""; When selecting the option ""0"", the fitted function is added to the list of functions of the histogram, but it is not drawn when the histogram is drawn. You can undo this behaviour resetting its corresponding bit in the TF1 object as following:; h.Fit(""myFunction"", ""0""); // fit, store function but do not draw; h.Draw(); // function is not drawn; h.GetFunction(""myFunction"")->ResetBit(TF1::kNotDraw);; h.Draw(); // function is visible again; TF1::kNotDraw@ kNotDrawDefinition TF1.h:346. Definition at line 4262 of file TH1.cxx. ◆ FitOptionsMake(). Int_t TH1::FitOptionsMake ; (; Option_t * ; option, . Foption_t & ; Foption . ). static . Decode string choptin and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:143181,error,errors,143181,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,3,['error'],"['errorp', 'errors']"
Availability,"ouble_t * ; eyl = nullptr, . Double_t * ; eyh = nullptr, . Double_t * ; ezl = nullptr, . Double_t * ; ezh = nullptr, . Option_t * ; option = """" . ). TGraph2DAsymmErrors constructor with doubles vectors as input. ; Definition at line 123 of file TGraph2DAsymmErrors.cxx. ◆ TGraph2DAsymmErrors() [4/4]. TGraph2DAsymmErrors::TGraph2DAsymmErrors ; (; const TGraph2DAsymmErrors & ; g). Copy constructor. ; Copy everything except list of functions ; Definition at line 172 of file TGraph2DAsymmErrors.cxx. ◆ ~TGraph2DAsymmErrors(). TGraph2DAsymmErrors::~TGraph2DAsymmErrors ; (; ). override . TGraph2DAsymmErrors destructor. ; Definition at line 158 of file TGraph2DAsymmErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraph2DAsymmErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; z, . Double_t ; exl = 0., . Double_t ; exh = 0., . Double_t ; eyl = 0., . Double_t ; eyh = 0., . Double_t ; ezl = 0., . Double_t ; ezh = 0. . ). virtual . Add a 3D point with asymmetric errorbars to an existing graph. ; Definition at line 235 of file TGraph2DAsymmErrors.cxx. ◆ Class(). static TClass * TGraph2DAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmError",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:31210,error,errorbars,31210,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['errorbars']
Availability,"ouble_t GetRMSError(Int_t axis=1) constDefinition TH1.h:320; TH1::GetNbinsXvirtual Int_t GetNbinsX() constDefinition TH1.h:297; TH1::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Definition TH1.h:404; TH1::FFTvirtual TH1 * FFT(TH1 *h_output, Option_t *option)This function allows to do discrete Fourier transforms of TH1 and TH2.Definition TH1.cxx:3284; TH1::LabelsInflatevirtual void LabelsInflate(Option_t *axis=""X"")Double the number of bins for axis.Definition TH1.cxx:5315; TH1::ShowBackgroundvirtual TH1 * ShowBackground(Int_t niter=20, Option_t *option=""same"")This function calculates the background spectrum in this histogram.Definition TH1.cxx:9287; TH1::FillNvirtual void FillN(Int_t, const Double_t *, const Double_t *, const Double_t *, Int_t)Definition TH1.h:224; TH1::SameLimitsAndNBinsstatic Bool_t SameLimitsAndNBins(const TAxis &axis1, const TAxis &axis2)Same limits and bins.Definition TH1.cxx:5898; TH1::Addvirtual Bool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""")Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2),...Definition TH1.cxx:826; TH1::fMaximumDouble_t fMaximumMaximum value for plotting.Definition TH1.h:100; TH1::fBufferSizeInt_t fBufferSizefBuffer sizeDefinition TH1.h:107; TH1::RetrieveBinContentvirtual Double_t RetrieveBinContent(Int_t bin) constRaw retrieval of bin content on internal data structure see convention for numbering bins in TH1::Get...Definition TH1.cxx:9439; TH1::IntegralAndErrorvirtual Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t &err, Option_t *option="""") constReturn integral of bin contents in range [binx1,binx2] and its error.Definition TH1.cxx:7968; TH1::fDimensionInt_t fDimension! Histogram dimension (1, 2 or 3 dim)Definition TH1.h:110; TH1::SetBinErrorvirtual void SetBinError(Int_t bin, Double_t error)Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empt...Definition TH1.cxx:9206; TH1::fBinStatErrOptEBinErrorOpt fBinStat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:66106,error,errors,66106,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['error'],['errors']
Availability,ouble_t TGraphAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. overridevirtual . Get high error on X. ; Reimplemented from TGraph.; Definition at line 1151 of file TGraphAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraphAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on X. ; Reimplemented from TGraph.; Definition at line 1162 of file TGraphAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraphAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph.; Definition at line 1137 of file TGraphAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraphAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on Y. ; Reimplemented from TGraph.; Definition at line 1173 of file TGraphAsymmErrors.cxx. ◆ GetErrorYlow(). Double_t TGraphAsymmErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on Y. ; Reimplemented from TGraph.; Definition at line 1184 of file TGraphAsymmErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphAsymmErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 75 of file TGraphAsymmErrors.h. ◆ GetEXlow(). Double_t * TGraphAsymmErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 74 of file TGraphAsymmErrors.h. ◆ GetEYhigh(). Double_t * TGraphAsymmErrors::GetEYhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 77 of file TGraphAsymmErrors.h. ◆ GetEYlow(). Double_t * TGraphAsymmErrors::GetEYlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 76 of file TGraphAsymmErrors.h. ◆ IsA(). TClass * TGraphAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph.; Definition at line 89 of file TGraphAsymmErrors.h. ◆ Merge(). Int_,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:48927,error,error,48927,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,1,['error'],['error']
Availability,"ouble_t TSpectrumFit::fA2Err. protected . error value of background a2 parameter ; Definition at line 58 of file TSpectrumFit.h. ◆ fA2Init. Double_t TSpectrumFit::fA2Init. protected . initial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x) ; Definition at line 56 of file TSpectrumFit.h. ◆ fAlpha. Double_t TSpectrumFit::fAlpha. protected . convergence coefficient, input parameter, it should be positive number and <=1, for details see references ; Definition at line 28 of file TSpectrumFit.h. ◆ fAlphaOptim. Int_t TSpectrumFit::fAlphaOptim. protected . optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal ; Definition at line 25 of file TSpectrumFit.h. ◆ fAmpCalc. Double_t* TSpectrumFit::fAmpCalc. protected . [fNPeaks] array of calculated values of fitted amplitudes, output parameters ; Definition at line 34 of file TSpectrumFit.h. ◆ fAmpErr. Double_t* TSpectrumFit::fAmpErr. protected . [fNPeaks] array of amplitude errors ; Definition at line 35 of file TSpectrumFit.h. ◆ fAmpInit. Double_t* TSpectrumFit::fAmpInit. protected . [fNPeaks] array of initial values of peaks amplitudes, input parameters ; Definition at line 33 of file TSpectrumFit.h. ◆ fArea. Double_t* TSpectrumFit::fArea. protected . [fNPeaks] array of calculated areas of peaks ; Definition at line 36 of file TSpectrumFit.h. ◆ fAreaErr. Double_t* TSpectrumFit::fAreaErr. protected . [fNPeaks] array of errors of peak areas ; Definition at line 37 of file TSpectrumFit.h. ◆ fBCalc. Double_t TSpectrumFit::fBCalc. protected . calculated value of b parameter ; Definition at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:51580,error,errors,51580,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['error'],['errors']
Availability,ouble_t eyL = fEyL.empty() ? 0. : fEyL[e][i];; 1474 Double_t eyH = fEyH.empty() ? 0. : fEyH[e][i];; 1475 return TMath::Sqrt((eyL * eyL + eyH * eyH) / 2.);; 1476}; 1477 ; 1478////////////////////////////////////////////////////////////////////////////////; 1479/// Get low error on x coordinate for point `i`.; 1480 ; 1481Double_t TGraphMultiErrors::GetErrorXlow(Int_t i) const; 1482{; 1483 if (i < 0 || i >= fNpoints || !fExL); 1484 return -1.;; 1485 else; 1486 return fExL[i];; 1487}; 1488 ; 1489////////////////////////////////////////////////////////////////////////////////; 1490/// Get high error on x coordinate for point `i`.; 1491 ; 1492Double_t TGraphMultiErrors::GetErrorXhigh(Int_t i) const; 1493{; 1494 if (i < 0 || i >= fNpoints || !fExH); 1495 return -1.;; 1496 else; 1497 return fExH[i];; 1498}; 1499 ; 1500////////////////////////////////////////////////////////////////////////////////; 1501/// Get low error on y coordinate for point `i`.; 1502/// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; 1503 ; 1504Double_t TGraphMultiErrors::GetErrorYlow(Int_t i) const; 1505{; 1506 if (i < 0 || i >= fNpoints || fEyL.empty()); 1507 return -1.;; 1508 ; 1509 if (fSumErrorsMode == TGraphMultiErrors::kOnlyFirst); 1510 return fEyL[0][i];; 1511 else if (fSumErrorsMode == TGraphMultiErrors::kSquareSum) {; 1512 Double_t sum = 0.;; 1513 for (Int_t j = 0; j < fNYErrors; j++); 1514 sum += fEyL[j][i] * fEyL[j][i];; 1515 return TMath::Sqrt(sum);; 1516 } else if (fSumErrorsMode == TGraphMultiErrors::kAbsSum) {; 1517 Double_t sum = 0.;; 1518 for (Int_t j = 0; j < fNYErrors; j++); 1519 sum += fEyL[j][i];; 1520 return sum;; 1521 }; 1522 ; 1523 return -1.;; 1524}; 1525 ; 1526////////////////////////////////////////////////////////////////////////////////; 1527/// Get high error on y coordinate for point `i`.; 1528/// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; 1529 ; 1530Double_t TGraphMultiErrors::GetErrorYhigh(Int_t i) ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:51448,error,errors,51448,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ouble_t f6 = 1.42151175831644588870e-7;; 2507 Double_t f7 = 2.04426310338993978564e-15;; 2508 ; 2509 Double_t split1 = 0.425;; 2510 Double_t split2=5.;; 2511 Double_t konst1=0.180625;; 2512 Double_t konst2=1.6;; 2513 ; 2514 Double_t q, r, quantile;; 2515 q=p-0.5;; 2516 if (TMath::Abs(q)<split1) {; 2517 r=konst1-q*q;; 2518 quantile = q* (((((((a7 * r + a6) * r + a5) * r + a4) * r + a3); 2519 * r + a2) * r + a1) * r + a0) /; 2520 (((((((b7 * r + b6) * r + b5) * r + b4) * r + b3); 2521 * r + b2) * r + b1) * r + 1.);; 2522 } else {; 2523 if(q<0) r=p;; 2524 else r=1-p;; 2525 //error case; 2526 if (r<=0); 2527 quantile=0;; 2528 else {; 2529 r=TMath::Sqrt(-TMath::Log(r));; 2530 if (r<=split2) {; 2531 r=r-konst2;; 2532 quantile=(((((((c7 * r + c6) * r + c5) * r + c4) * r + c3); 2533 * r + c2) * r + c1) * r + c0) /; 2534 (((((((d7 * r + d6) * r + d5) * r + d4) * r + d3); 2535 * r + d2) * r + d1) * r + 1);; 2536 } else{; 2537 r=r-split2;; 2538 quantile=(((((((e7 * r + e6) * r + e5) * r + e4) * r + e3); 2539 * r + e2) * r + e1) * r + e0) /; 2540 (((((((f7 * r + f6) * r + f5) * r + f4) * r + f3); 2541 * r + f2) * r + f1) * r + 1);; 2542 }; 2543 if (q<0) quantile=-quantile;; 2544 }; 2545 }; 2546 return quantile;; 2547}; 2548 ; 2549////////////////////////////////////////////////////////////////////////////////; 2550/// Simple recursive algorithm to find the permutations of; 2551/// n natural numbers, not necessarily all distinct; 2552/// adapted from CERNLIB routine PERMU.; 2553/// The input array has to be initialised with a non descending; 2554/// sequence. The method returns kFALSE when; 2555/// all combinations are exhausted.; 2556 ; 2557Bool_t TMath::Permute(Int_t n, Int_t *a); 2558{; 2559 Int_t i,itmp;; 2560 Int_t i1=-1;; 2561 ; 2562 // find rightmost upward transition; 2563 for(i=n-2; i>-1; i--) {; 2564 if(a[i]<a[i+1]) {; 2565 i1=i;; 2566 break;; 2567 }; 2568 }; 2569 // no more upward transitions, end of the story; 2570 if(i1==-1) return kFALSE;; 2571 else {; 2572 // find",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:86677,error,error,86677,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['error'],['error']
Availability,"ouble_t level, Bool_t bUpper)Returns the confidence limits for the efficiency supposing that the efficiency follows a normal distr...Definition TEfficiency.cxx:2952; TEfficiency::Wilsonstatic Double_t Wilson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)Calculates the boundaries for the frequentist Wilson interval.Definition TEfficiency.cxx:3873; TEfficiency::CheckConsistencystatic Bool_t CheckConsistency(const TH1 &pass, const TH1 &total, Option_t *opt="""")Checks the consistence of the given histograms.Definition TEfficiency.cxx:1576; TEfficiency::ClopperPearsonstatic Double_t ClopperPearson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)Calculates the boundaries for the frequentist Clopper-Pearson interval.Definition TEfficiency.cxx:2016; TF11-Dim function classDefinition TF1.h:233; TGraphMultiErrorsTGraph with asymmetric error bars and multiple y error dimensions.Definition TGraphMultiErrors.h:29; TGraphMultiErrors::fEyLSumDouble_t * fEyLSum! Array of summed Y low errors for fittingDefinition TGraphMultiErrors.h:39; TGraphMultiErrors::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TGraphMultiErrors::GetEYhighDouble_t * GetEYhigh() const overrideGet all high errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1588; TGraphMultiErrors::GetErrorXDouble_t GetErrorX(Int_t i) const overrideGet error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1439; TGraphMultiErrors::GetFillStylevirtual Style_t GetFillStyle() constReturn the fill area style.Definition TAttFill.h:31; TGraphMultiErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t i) const overrideGet high error on x coordinate for point i.Definition TGraphMultiErrors.cxx:1492; TGraphMultiErrors::SetPointErrorvirtual void SetPointError(Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.)Set ex and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:76739,error,errors,76739,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"ouble_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; char*TClass::EscapeChars(const char* text) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const char* onfile_classname, UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindConversionStreamerInfo(const TClass* onfile_cl, UInt_t checksum) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TVirtualStreamerInfo*TClass::FindStreamerInfo(UInt_t checksum) const; TVirtualStreamerInfo*TClass::FindStreamerInfoAbstractEmulated(UInt_t checksum) const; TClass*TClass::GetActualClass(const void* object) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; TClass*TClass::GetBaseClass(const char* classname); TClass*TClass::GetBaseClass(const TClass* base); Int_tTCla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQClass.html:6011,error,error,6011,root/html602/TQClass.html,https://root.cern,https://root.cern/root/html602/TQClass.html,2,['error'],['error']
Availability,"ouble_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); Double_tTGeoArb8::DistToPlane(const Double_t* point, const Double_t* dir, Int_t ipl, Bool_t in) const; virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAlpha1() const; Double_tGetAlpha2() const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoArb8::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; Double_tGetBl1() const; Double_tGetBl2() const; virtual voidTGeoArb8::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoArb8::GetByteCount() const; Double_tTGeoArb8::GetClosestEdge(const Double_t* point, Double_t* vert, Int_t& isegment) const; virtual Option_t*TObject::GetDrawOption() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrap.html:4639,error,error,4639,root/html534/TGeoTrap.html,https://root.cern,https://root.cern/root/html534/TGeoTrap.html,3,['error'],['error']
Availability,"ouble_t zmin, Double_t zmax); 8878{; 8879 if (GetDimension() != 3) {; 8880 Error(""SetBins"",""Operation only valid for 3-D histograms"");; 8881 return;; 8882 }; 8883 fXaxis.SetRange(0,0);; 8884 fYaxis.SetRange(0,0);; 8885 fZaxis.SetRange(0,0);; 8886 fXaxis.Set(nx,xmin,xmax);; 8887 fYaxis.Set(ny,ymin,ymax);; 8888 fZaxis.Set(nz,zmin,zmax);; 8889 fNcells = (nx+2)*(ny+2)*(nz+2);; 8890 SetBinsLength(fNcells);; 8891 if (fSumw2.fN) {; 8892 fSumw2.Set(fNcells);; 8893 }; 8894}; 8895 ; 8896////////////////////////////////////////////////////////////////////////////////; 8897/// Redefine x, y and z axis parameters with variable bin sizes.; 8898///; 8899/// The X, Y and Z axis parameters are modified.; 8900/// The bins content array is resized; 8901/// if errors (Sumw2) the errors array is resized; 8902/// The previous bin contents are lost; 8903/// To change only the axis limits, see TAxis::SetRange; 8904/// xBins is supposed to be of length nx+1, yBins is supposed to be of length ny+1,; 8905/// zBins is supposed to be of length nz+1; 8906 ; 8907void TH1::SetBins(Int_t nx, const Double_t *xBins, Int_t ny, const Double_t *yBins, Int_t nz, const Double_t *zBins); 8908{; 8909 if (GetDimension() != 3) {; 8910 Error(""SetBins"",""Operation only valid for 3-D histograms"");; 8911 return;; 8912 }; 8913 fXaxis.SetRange(0,0);; 8914 fYaxis.SetRange(0,0);; 8915 fZaxis.SetRange(0,0);; 8916 fXaxis.Set(nx,xBins);; 8917 fYaxis.Set(ny,yBins);; 8918 fZaxis.Set(nz,zBins);; 8919 fNcells = (nx+2)*(ny+2)*(nz+2);; 8920 SetBinsLength(fNcells);; 8921 if (fSumw2.fN) {; 8922 fSumw2.Set(fNcells);; 8923 }; 8924}; 8925 ; 8926////////////////////////////////////////////////////////////////////////////////; 8927/// By default, when a histogram is created, it is added to the list; 8928/// of histogram objects in the current directory in memory.; 8929/// Remove reference to this histogram from current directory and add; 8930/// reference to new directory dir. dir can be 0 in which case the; 8931/// histogram does not",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:347544,error,errors,347544,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,2,['error'],['errors']
Availability,"ouble_t& errdef, Int_t& nvpar, Int_t& nparx) const; return global fit parameters; amin : chisquare; edm : estimated distance to minimum; errdef; nvpar : number of variable parameters; nparx : total number of parameters. Double_t GetSumLog(Int_t i); return Sum(log(i) i=0,n; used by log likelihood fits. Bool_t IsFixed(Int_t ipar) const; return kTRUE if parameter ipar is fixed, kFALSE othersise). void PrintResults(Int_t level, Double_t amin) const; Print fit results. void ReleaseParameter(Int_t ipar); Release parameter ipar. void SetFCN(void* fcn); Specify the address of the fitting algorithm (from the interpreter). void SetFCN(void (*)(Int_t&, Double_t*, Double_t&f, Double_t*, Int_t) fcn); Specify the address of the fitting algorithm. void SetFitMethod(const char* name); ret fit method (chisquare or loglikelihood). Int_t SetParameter(Int_t ipar, const char* parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh); set initial values for a parameter; ipar : parameter number; parname : parameter name; value : initial parameter value; verr : initial error for this parameter; vlow : lower value for the parameter; vhigh : upper value for the parameter. void FitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; Default method (function evaluated at center of bin); for each point the cache contains the following info; -1D : bc,e, xc (bin content, error, x of center of bin); -2D : bc,e, xc,yc; -3D : bc,e, xc,yc,zc. void FitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H1s using a Chisquare method; The ""I""ntegral method is used; for each point the cache contains the following info; -1D : bc,e, xc,xw (bin content, error, x of center of bin, x bin width of bin); -2D : bc,e, xc,xw,yc,yw; -3D : bc,e, xc,xw,yc,yw,zc,zw. void FitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); Minimization function for H",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:15071,error,error,15071,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,4,['error'],['error']
Availability,"ouble_t* ci, Double_t cl = 0.94999999999999996); Computes point-by-point confidence intervals for the fitted function; Parameters:; n - number of points; ndim - dimensions of points; x - points, at which to compute the intervals, for ndim > 1; should be in order: (x0,y0, x1, y1, ... xn, yn); ci - computed intervals are returned in this array; cl - confidence level, default=0.95. NOTE, that this method can only be used when the fitting function inherits from a TF1,; so it's not possible when the fitting function was set as a string or as a pure TFormula. void GetConfidenceIntervals(TObject* obj, Double_t cl = 0.94999999999999996); Computes confidence intervals at level cl. Default is 0.95; The TObject parameter can be a TGraphErrors, a TGraph2DErrors or a TH123.; For Graphs, confidence intervals are computed for each point,; the value of the graph at that point is set to the function value at that; point, and the graph y-errors (or z-errors) are set to the value of; the confidence interval at that point; For Histograms, confidence intervals are computed for each bin center; The bin content of this bin is then set to the function value at the bin; center, and the bin error is set to the confidence interval value.; Allowed combinations:; Fitted object Passed object; TGraph TGraphErrors, TH1; TGraphErrors, AsymmErrors TGraphErrors, TH1; TH1 TGraphErrors, TH1; TGraph2D TGraph2DErrors, TH2; TGraph2DErrors TGraph2DErrors, TH2; TH2 TGraph2DErrors, TH2; TH3 TH3. Double_t* GetCovarianceMatrix() const; Returns covariance matrix. void GetCovarianceMatrix(TMatrixD& matr); Returns covariance matrix. void GetDesignMatrix(TMatrixD& matr); Returns the internal design matrix. void GetErrors(TVectorD& vpar); Returns parameter errors. void GetParameters(TVectorD& vpar); Returns parameter values. Int_t GetParameter(Int_t ipar, char* name, Double_t& value, Double_t& , Double_t& , Double_t& ) const; Returns the value and the name of the parameter #ipar; NB: In the calling function the argu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearFitter.html:24852,error,errors,24852,root/html602/TLinearFitter.html,https://root.cern,https://root.cern/root/html602/TLinearFitter.html,6,['error'],"['error', 'errors']"
Availability,"ouble_t* safe = 0) const; static Double_tTGeoBBox::DistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*TGeoBBox::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoBBox::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) const; virtual Int_tTGeoBBox::GetFittingBox(const TGeoBBox* parambox,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoPolyShape.html:3147,error,error,3147,root/html528/TEveGeoPolyShape.html,https://root.cern,https://root.cern/root/html528/TEveGeoPolyShape.html,3,['error'],['error']
Availability,"ouble_t**TGraph::ShrinkAndCopy(Int_t size, Int_t iend); virtual voidSwapPoints(Int_t pos1, Int_t pos2); static voidTGraph::SwapValues(Double_t* arr, Int_t pos1, Int_t pos2). Data Members; public:. enum TGraph::[unnamed] { kClipFrame; kNotEditable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph::fFunctionsPointer to list of functions (fits and user); TH1F*TGraph::fHistogramPointer to histogram used for drawing axis; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph::fMaxSize!Current dimension of arrays fX and fY; Double_tTGraph::fMaximumMaximum value for plotting along y; Double_tTGraph::fMinimumMinimum value for plotting along y; TStringTNamed::fNameobject identifier; Int_tTGraph::fNpointsNumber of points <= fMaxSize; TStringTNamed::fTitleobject title; Double_t*TGraph::fX[fNpoints] array of X points; Double_t*TGraph::fY[fNpoints] array of Y points. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraphErrors(); TGraphErrors default constructor. TGraphErrors(Int_t n); TGraphErrors normal constructor. the arrays are preset to zero. TGraphErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* ex = 0, const Float_t* ey = 0); TGraphErrors normal constructor. if ex or ey are null, the corresponding arrays are preset to zero. TGraphErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* ex = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphErrors.html:13493,error,errors,13493,root/html528/TGraphErrors.html,https://root.cern,https://root.cern/root/html528/TGraphErrors.html,8,['error'],['errors']
Availability,"ouble_tRMS(Long64_t n, const double* a, const Double_t* w = 0); Double_tRMS(Long64_t n, const long* a, const Double_t* w = 0); Double_tRMS(Long64_t n, const long long* a, const Double_t* w = 0); Bool_tRootsCubic(const Double_t* coef, Double_t& a, Double_t& b, Double_t& c); Double_tRUncertainty(); Double_tSigma(); Double_tSigmaUncertainty(); Short_tSign(Short_t a, Short_t b); Int_tSign(Int_t a, Int_t b); Long_tSign(Long_t a, Long_t b); Long64_tSign(Long64_t a, Long64_t b); Float_tSign(Float_t a, Float_t b); Double_tSign(Double_t a, Double_t b); Double_tSignalingNaN(); Double_tSin(Double_t x); Double_tSinH(Double_t x); voidSort(long long n, const short* a, long long* index, Bool_t down = kTRUE); voidSort(long long n, const int* a, long long* index, Bool_t down = kTRUE); voidSort(long long n, const float* a, long long* index, Bool_t down = kTRUE); voidSort(long long n, const double* a, long long* index, Bool_t down = kTRUE); voidSort(long long n, const long* a, long long* index, Bool_t down = kTRUE); voidSort(long long n, const long long* a, long long* index, Bool_t down = kTRUE); voidSort(int n, const short* a, int* index, Bool_t down = kTRUE); voidSort(int n, const int* a, int* index, Bool_t down = kTRUE); voidSort(int n, const float* a, int* index, Bool_t down = kTRUE); voidSort(int n, const double* a, int* index, Bool_t down = kTRUE); voidSort(int n, const long* a, int* index, Bool_t down = kTRUE); voidSort(int n, const long long* a, int* index, Bool_t down = kTRUE); Double_tSqrt(Double_t x); Double_tSqrt2(); Double_tStruveH0(Double_t x); Double_tStruveH1(Double_t x); Double_tStruveL0(Double_t x); Double_tStruveL1(Double_t x); Double_tStudent(Double_t T, Double_t ndf); Double_tStudentI(Double_t T, Double_t ndf); Double_tStudentQuantile(Double_t p, Double_t ndf, Bool_t lower_tail = kTRUE); Double_tTan(Double_t x); Double_tTanH(Double_t x); Double_tTwoPi(); Double_tVavilov(Double_t x, Double_t kappa, Double_t beta2); Double_tVavilovI(Double_t x, Double_t kappa, Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMath.html:11080,down,down,11080,root/html534/TMath.html,https://root.cern,https://root.cern/root/html534/TMath.html,1,['down'],['down']
Availability,"ouble_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*THnSparse::CreateIter(Bool_t respectAxisRange) const; static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*THnSparse::CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); virtual TArray*GenerateArray() const; TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx) const; virtual Long64_tTHnSparse::GetBin(const Double_t* x) const; virtual Long64_tTHnSparse::GetBin(const char** name) const; virtual Long64_tTHnSparse::GetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Lon",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparseT_TArrayC_.html:3676,error,error,3676,root/html534/THnSparseT_TArrayC_.html,https://root.cern,https://root.cern/root/html534/THnSparseT_TArrayC_.html,12,['error'],['error']
Availability,"ouble_tcorrelation(const char* parname1, const char* parname2) const; TH2*correlationHist(const char* name = ""correlation_matrix"") const; const TMatrixDSym&correlationMatrix() const; const TMatrixDSym&covarianceMatrix() const; Int_tcovQual() const; RooAbsPdf*createHessePdf(const RooArgSet& params) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptiondefaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tedm() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgList&floatParsFinal() const; const RooArgList&floatParsInit() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const RooArgList*globalCorr(); Double_tglobalCorr(const RooAbsArg& par); Double_tglobalCorr(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooFitResult.html:2532,error,error,2532,root/html526/RooFitResult.html,https://root.cern,https://root.cern/root/html526/RooFitResult.html,7,['error'],['error']
Availability,"ouble_t ; eyl = 0., . Double_t ; eyh = 0., . Double_t ; ezl = 0., . Double_t ; ezh = 0. . ). virtual . Add a 3D point with asymmetric errorbars to an existing graph. ; Definition at line 235 of file TGraph2DAsymmErrors.cxx. ◆ Class(). static TClass * TGraph2DAsymmErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraph2DAsymmErrors::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGraph2DAsymmErrors::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ DeclFileName(). static const char * TGraph2DAsymmErrors::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ GetErrorX(). Double_t TGraph2DAsymmErrors::GetErrorX ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along X at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 246 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXhigh(). Double_t TGraph2DAsymmErrors::GetErrorXhigh ; (; Int_t ; i); const. Returns the high error along X at point i. ; Definition at line 269 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorXlow(). Double_t TGraph2DAsymmErrors::GetErrorXlow ; (; Int_t ; i); const. Returns the low error along X at point i. ; Definition at line 259 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorY(). Double_t TGraph2DAsymmErrors::GetErrorY ; (; Int_t ; bin); const. overridevirtual . Returns the combined error along Y at point i by computing the average of the lower and upper variance. ; Reimplemented from TGraph2D.; Definition at line 280 of file TGraph2DAsymmErrors.cxx. ◆ GetErrorYhigh(). Double_t TGraph2DAsymmErrors::GetErrorYhigh ; (; Int_t ; i); const. Returns the high error along Y at point i. ; Definition at line 304 of file TGraph2DAsymmErrors.cxx. ◆ GetEr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:32046,error,error,32046,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,"ouble_t ; oneOverZeroError = 0.0, . const TH2 * ; hist_vyy = nullptr, . const TH2 * ; hist_vyy_inv = nullptr . ). overridevirtual . Define input data for subsequent calls to DoUnfold(tau) ; Parameters. [in]inputinput distribution with uncertainties ; [in]scaleBias(default=nullptr) scale factor applied to the bias ; [in]oneOverZeroError(default=nullptr) for bins with zero error, this number defines 1/error. ; [in]hist_vyy(default=nullptr) if non-zero, this defines the data covariance matrix ; [in]hist_vyy_inv(default=nullptr) if non-zero and hist_vyy is set, defines the inverse of the data covariance matrix. This feature can be useful for repeated unfoldings in cases where the inversion of the input covariance matrix is lengthy. Return value: nError1+10000*nError2 . nError1: number of bins where the uncertainty is zero. these bins either are not used for the unfolding (if oneOverZeroError==nullptr) or 1/uncertainty is set to oneOverZeroError. . nError2: return values>10000 are fatal errors, because the unfolding can not be done. The number nError2 corresponds to the number of truth bins which are not constrained by data points. . Reimplemented from TUnfold.; Definition at line 466 of file TUnfoldSys.cxx. ◆ SetTauError(). void TUnfoldSys::SetTauError ; (; Double_t ; delta_tau). Specify an uncertainty on tau. ; Parameters. [in]delta_taunew uncertainty on tau. The default is to have no uncertyainty on tau. ; Definition at line 1007 of file TUnfoldSys.cxx. ◆ Streamer(). void TUnfoldSys::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TUnfold. ◆ StreamerNVirtual(). void TUnfoldSys::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 146 of file TUnfoldSys.h. ◆ SubtractBackground(). void TUnfoldSys::SubtractBackground ; (; const TH1 * ; bgr, . const char * ; name, . Double_t ; scale = 1.0, . Double_t ; scale_error = 0.0 . ). Specify a source of background. ; Parameters. [in]b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldSys.html:47018,error,errors,47018,doc/master/classTUnfoldSys.html,https://root.cern,https://root.cern/doc/master/classTUnfoldSys.html,1,['error'],['errors']
Availability,"ouble_t TMath::ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t TMath::Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t TMath::CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * TMath::Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t TMath::CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t TMath::DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t TMath::DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t TMath::E ();  Base of natural log: \( e \). ;  ; Double_t TMath::Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t TMath::Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t TMath::ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t TMath::ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t TMath::EulerGamma ();  Euler-Mascheroni Constant. ;  ; Double_t TMath::Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t TMath::Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t TMath::FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t TMath::FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;  ; Int_t TMath::Finite (Double_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;  ; Int_t TMath::Finite (Float_t x);  Check if it is finite with a mask in order to be consistent in presence of fast math. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:5675,error,error,5675,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['error'],['error']
Availability,"ouble ; resolution, . WingMode ; wmode, . Int_t ; numee = 0, . bool ; doEEVal = false, . double ; eeVal = 0.0, . std::list< double > * ; samplingHint = nullptr . ). protected . Add points calculated with the specified function, over the range (xlo,xhi). ; Add at least minPoints equally spaced points, and add sufficient points so that the maximum deviation from the final straight-line segments is prec*(ymax-ymin), down to a minimum horizontal spacing of resolution*(xhi-xlo). ; Definition at line 284 of file RooCurve.cxx. ◆ addRange(). void RooCurve::addRange ; (; const RooAbsFunc & ; func, . double ; x1, . double ; x2, . double ; y1, . double ; y2, . double ; minDy, . double ; minDx, . int ; numee, . bool ; doEEVal, . double ; eeVal, . double ; epsilon . ). protected . Fill the range (x1,x2) with points calculated using func(&x). ; No point will be added at x1, and a point will always be added at x2. The density of points will be calculated so that the maximum deviation from a straight line approximation is prec*(ymax-ymin) down to the specified minimum horizontal spacing. ; Definition at line 402 of file RooCurve.cxx. ◆ average(). double RooCurve::average ; (; double ; lo, . double ; hi . ); const. Return average curve value in [xFirst,xLast] by integrating curve between points and dividing by xLast-xFirst. ; Definition at line 580 of file RooCurve.cxx. ◆ calcBandInterval() [1/2]. void RooCurve::calcBandInterval ; (; const std::vector< RooCurve * > & ; plusVar, . const std::vector< RooCurve * > & ; minusVar, . Int_t ; i, . const TMatrixD & ; V, . double ; Z, . double & ; lo, . double & ; hi . ); const. protected . Retrieve variation points from curves. ; Definition at line 780 of file RooCurve.cxx. ◆ calcBandInterval() [2/2]. void RooCurve::calcBandInterval ; (; const std::vector< RooCurve * > & ; variations, . Int_t ; i, . double ; Z, . double & ; lo, . double & ; hi, . bool ; approxGauss . ); const. protected . Definition at line 812 of file RooCurve.cxx. ◆ chiSqu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:43963,down,down,43963,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,1,['down'],['down']
Availability,"ouble GetBinUpEdgeComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; void GetBinUpEdgeCoordinates (unsigned int ipoint, double *x) const;  Thread save version of function retrieving the bin up-edge in case of multidimensions. ;  ; double GetCoordErrorComponent (unsigned int ipoint, unsigned int icoord) const;  returns a single coordinate error component of a point. ;  ; ErrorType GetErrorType () const;  retrieve the errortype ;  ; const double * GetPoint (unsigned int ipoint, double &value) const;  retrieve at the same time a pointer to the coordinate data and the fit value More efficient than calling Coords(i) and Value(i) ;  ; const double * GetPoint (unsigned int ipoint, double &value, double &invError) const;  retrieve in a single call a pointer to the coordinate data, value and inverse error for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errlow, double &errhigh) const;  Get errors on the point (coordinate errors and asymmetric value errors) for the given fit point. ;  ; const double * GetPointError (unsigned int ipoint, double &errvalue) const;  Retrieve the errors on the point (coordinate and value) for the given fit point It must be called only when the coordinate errors are stored otherwise it will produce an assert. ;  ; bool HasBinEdges () const;  query if the data store the bin edges instead of the center ;  ; bool HaveAsymErrors () const;  flag to control if data provides asymmetric errors on the value ;  ; bool HaveCoordErrors () const;  flag to control if data provides error on the coordinates ;  ; void Initialize (unsigned int newPoints, unsigned int dim=1, ErrorType err=kValueError);  Preallocate a data set with given size, dimension and error type. ;  ; double InvError (unsigned int ipoint) const;  Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used dir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:6140,error,errors,6140,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,3,['error'],['errors']
Availability,"ouble Result () const override;  Returns the result of the last Integral calculation. ;  ; void SetFunction (const IGenFunction &) override;  Set integration function (flag control if function must be copied inside). ;  ; int Status () const override;  return the status of the last integration - 0 in case of success ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegratorOneDim;  ~VirtualIntegratorOneDim () override;  destructor: no operation ;  ; virtual ROOT::Math::IntegrationOneDim::Type Type () const;  return type of integrator ;  ;  Public Member Functions inherited from ROOT::Math::VirtualIntegrator; virtual ~VirtualIntegrator ();  destructor: no operation ;  . Protected Attributes; int fNum;  Number of points used in the estimation of the integral. ;  ; double * fW;  Weights of the points used. ;  ; double * fX;  Abscisa of the points used. ;  ;  Protected Attributes inherited from ROOT::Math::GaussIntegrator; double fEpsAbs;  Absolute error. ;  ; double fEpsRel;  Relative error. ;  ; const IGenFunction * fFunction;  Pointer to function used. ;  ; double fLastError;  Error from the last estimation. ;  ; double fLastResult;  Result from the last estimation. ;  ; bool fUsedOnce;  Bool value to check if the function was at least called once. ;  . Private Member Functions; void CalcGaussLegendreSamplingPoints ();  Type: unsafe but fast interface filling the arrays x and w (static method) ;  ; double DoIntegral (double a, double b, const IGenFunction *func) override;  Integration surrogate method. ;  . Additional Inherited Members;  Static Protected Attributes inherited from ROOT::Math::GaussIntegrator; static bool fgAbsValue = false;  AbsValue used for the calculation of the integral. ;  . #include <Math/GaussLegendreIntegrator.h>. Inheritance diagram for ROOT::Math::GaussLegendreIntegrator:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GaussLegendreInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html:3748,error,error,3748,doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GaussLegendreIntegrator.html,1,['error'],['error']
Availability,"ould be either .o, .obj, etc.Definition TSystem.cxx:4244; TSystem::SetLinkdefSuffixvirtual void SetLinkdefSuffix(const char *suffix)The 'suffix' will be appended to the name of a script loaded by ACLiC and used to locate any eventual...Definition TSystem.cxx:4227; TSystem::fHelpersTSeqCollection * fHelpersDefinition TSystem.h:321; TSystem::ExpandPathNamevirtual Bool_t ExpandPathName(TString &path)Expand a pathname getting rid of special shell characters like ~.Definition TSystem.cxx:1274; TSystem::GetListOfStdExceptionHandlersvirtual TSeqCollection * GetListOfStdExceptionHandlers() constDefinition TSystem.h:385; TSystem::pwdconst char * pwd()Definition TSystem.h:424; TSystem::GetBuildDirvirtual const char * GetBuildDir() constReturn the path of the build directory.Definition TSystem.cxx:3915; TSystem::Openlogvirtual void Openlog(const char *name, Int_t options, ELogFacility facility)Open connection to system log daemon.Definition TSystem.cxx:1677; TSystem::GetErrnostatic Int_t GetErrno()Static function returning system error number.Definition TSystem.cxx:276; TSystem::AddIncludePathvirtual void AddIncludePath(const char *includePath)Add a directory to the already set include path.Definition TSystem.cxx:4159; TSystem::Chmodvirtual int Chmod(const char *file, UInt_t mode)Set the file permission bits. Returns -1 in case or error, 0 otherwise.Definition TSystem.cxx:1508; TSystem::GetEffectiveGidvirtual Int_t GetEffectiveGid()Returns the effective group id.Definition TSystem.cxx:1591; TSystem::EAclicModeEAclicModeDefinition TSystem.h:269; TSystem::kDefault@ kDefaultDefinition TSystem.h:269; TSystem::kDebug@ kDebugDefinition TSystem.h:269; TSystem::kOpt@ kOptDefinition TSystem.h:269; TSystem::~TSystemvirtual ~TSystem()Delete the OS interface.Definition TSystem.cxx:139; TSystem::SetDisplayvirtual void SetDisplay()Set DISPLAY environment variable based on utmp entry. Only for UNIX.Definition TSystem.cxx:235; TSystem::fReadmaskTFdSet * fReadmaskDefinition TSystem.h:275; TSys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8h_source.html:41116,error,error,41116,doc/master/TSystem_8h_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8h_source.html,1,['error'],['error']
Availability,"ould be impossible!); 2052 fLimset = kFALSE;; 2053 if (aopt > aulim) {; 2054 aopt = aulim;; 2055 fLimset = kTRUE;; 2056 }; 2057// Evaluate function at new point AOPT; 2058 mneval(aopt, fnext, ierev);; 2059// debug printout:; 2060 if (ldebug) {; 2061 Printf("" MNCROS: calls=%8d AIM=%10.5f F,A=%10.5f%10.5f"",fNfcn,aim,fnext,aopt);; 2062 }; 2063 if (ierev > 0) goto L900;; 2064 if (fLimset && fnext <= aim) goto L930;; 2065 ++ipt;; 2066 fXpt[ipt-1] = aopt;; 2067 fYpt[ipt-1] = fnext;; 2068 fChpt[ipt-1] = charal[ipt-1];; 2069// Replace odd point by new one; 2070 alsb[iout-1] = aopt;; 2071 flsb[iout-1] = fnext;; 2072// the new point may not be the best, but it is the only one; 2073// which could be good enough to pass convergence criteria; 2074 ibest = iout;; 2075 goto L500;; 2076 ; 2077// Contour has been located, return point to MNCONT OR MINOS; 2078L800:; 2079 iercr = 0;; 2080 goto L1000;; 2081// error in the minimization; 2082L900:; 2083 if (ierev == 1) goto L940;; 2084 goto L950;; 2085// parameter up against limit; 2086L930:; 2087 iercr = 1;; 2088 goto L1000;; 2089// too many calls to FCN; 2090L940:; 2091 iercr = 2;; 2092 goto L1000;; 2093// cannot find next point; 2094L950:; 2095 iercr = 3;; 2096// in any case; 2097L1000:; 2098 if (ldebug) {; 2099 itoohi = 0;; 2100 for (i = 1; i <= ipt; ++i) {; 2101 if (fYpt[i-1] > aim + fUp) {; 2102 fYpt[i-1] = aim + fUp;; 2103 fChpt[i-1] = '+';; 2104 itoohi = 1;; 2105 }; 2106 }; 2107 fChpt[ipt] = 0;; 2108 chsign = ""POSI"";; 2109 if (fXdircr < 0) chsign = ""NEGA"";; 2110 if (fKe2cr == 0) {; 2111 Printf("" %sTIVE MINOS ERROR, PARAMETER %3d"",chsign,fKe1cr);; 2112 }; 2113 if (itoohi == 1) {; 2114 Printf(""POINTS LABELLED '+' WERE TOO HIGH TO PLOT."");; 2115 }; 2116 if (iercr == 1) {; 2117 Printf(""RIGHTMOST POINT IS UP AGAINST LIMIT."");; 2118 }; 2119 mnplot(fXpt, fYpt, fChpt, ipt, fNpagwd, fNpagln);; 2120 }; 2121}; 2122 ; 2123////////////////////////////////////////////////////////////////////////////////; 2124/// Makes sure that the current poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:69931,error,error,69931,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if succesfull. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if succesfull. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if succesfull. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLServer.html:8814,error,error,8814,root/html528/TSQLServer.html,https://root.cern,https://root.cern/root/html528/TSQLServer.html,6,['error'],['error']
Availability,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if successful. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if successful. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); cout << ""Table: "" << obj->GetName() << endl;; delete lst;. Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSQLServer.html:9190,error,error,9190,root/html534/TSQLServer.html,https://root.cern,https://root.cern/root/html534/TSQLServer.html,2,['error'],['error']
Availability,"ould be of the form: <dbms>://<host>[:<port>][/<database>],; e.g.: mysql://pcroot.cern.ch:3456/test, oracle://srv1.cern.ch/main,; pgsql://... or sapdb://...; The uid is the username and pw the password that should be used for; the connection. Depending on the <dbms> the shared library (plugin); for the selected system will be loaded. When the connection could not; be opened 0 is returned. Bool_t Exec(const char* sql); Execute sql query.; Usefull for commands like DROP TABLE or INSERT, where result set; is not interested. Return kTRUE if no error. Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLServer provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLServer provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method is specified, displays error message. Bool_t StartTransaction(); submit ""START TRANSACTION"" query to database; return kTRUE, if successful. Bool_t Commit(); submit ""COMMIT"" query to database; return kTRUE, if successful. Bool_t Rollback(); submit ""ROLLBACK"" query to database; return kTRUE, if successful. TList* GetTablesList(const char* wild = 0); Return list of user tables; Parameter wild specifies wildcard for table names.; It either contains exact table name to verify that table is exists or; wildcard with ""%"" (any number of symbols) and ""_"" (exactly one symbol).; Example of vaild wildcards: ""%"", ""%name"",""___user__"".; If wild=="""", list of all available tables will be produced.; List contain just tables names in the TObjString.; List must be deleted by the user.; Example code of method usage:. TList* lst = serv->GetTablesList();; TIter next(lst);; TObject* obj;; while (obj = next()); std::cout << ""Table: "" << obj->GetName() << std::endl;; delete l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLServer.html:9991,error,error,9991,root/html602/TSQLServer.html,https://root.cern,https://root.cern/root/html602/TSQLServer.html,4,['error'],['error']
Availability,"ould be silently written if data-member of object has same name as another branch; [ROOT-10703] - TCling fails to catch compiled exception on Mac OS; [ROOT-10752] - segmentation violation in TFractionFitter destructor; [ROOT-10753] - [TTreeReader] Wrong entries are loaded in case of TChain+TEntryList; [ROOT-10762] - [MT] Concurrent construction (or destruction?) of two different TThreadedExecutors is racy; [ROOT-10776] - Fail compilation; [ROOT-10779] - HistFactory models that are written to a file, then retrieved with updated histograms find only old histograms; [ROOT-10782] - With gcc10 STL headers don’t include implicitly stdexcept; [ROOT-10784] - Mistake in what is reported in documentation; [ROOT-10790] - [DF] Single-thread Snapshot into a directory also creates a spurious TTree outside of it; [ROOT-10792] - [DF] Snapshot of TClonesArrays read via TTreeReaderArray is broken; [ROOT-10800] - TClass::GetListOfAllPublicMethods() lists deleted copy constructor of std::unique_ptr; [ROOT-10804] - assertion in clang::Sema::LookupSpecialMember; [ROOT-10810] - Segmentation fault in pickling of weighted RooFit datasets; [ROOT-10815] - Error in parsing TFormula expression using pre-defined functions in function names; [ROOT-10822] - [DF] RVecs of non-split branches can read from invalid addresses; [ROOT-10824] - [TTreeReader] Reading entries from a friend with a TTreeIndex results in wrong entries silently read, or an infinite event loop; [ROOT-10835] - zero/zero computed in test case stressRooStats; [ROOT-10837] - hadd crashes when slow merging file with multiple array with same index; [ROOT-10839] - Missing lock guard in THashTable; [ROOT-10845] - RooArgSet IsOnHeap result incorrect; [ROOT-10846] - TPython documentation is gone; [ROOT-10849] - Recursive ASTReader assertion Fedora32 C++17; [ROOT-10880] - df007*py broken; [ROOT-10882] - Drawing crashes when histogram title contain special characters; [ROOT-10884] - Error importing JupyROOT with conda ROOT; [ROOT-10886] - 6.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:34843,fault,fault,34843,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['fault'],['fault']
Availability,"ould be the number of points used in a fit - the number of free parameters. void SetNpx(Int_t npx = 100); Set the number of points used to draw the function. The default number of points along x is 100 for 1-d functions and 30 for 2-d/3-d functions; You can increase this value to get a better resolution when drawing; pictures with sharp peaks or to get a better result when using TF1::GetRandom; the minimum number of points is 4, the maximum is 10000000 for 1-d and 10000 for 2-d/3-d functions. void SetParName(Int_t ipar, const char* name); Set name of parameter number ipar. void SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10""); Set up to 10 parameter names*-*-*-*-*-; *-* ============================. void SetParError(Int_t ipar, Double_t error); Set error for parameter number ipar. void SetParErrors(const Double_t* errors); Set errors for all active parameters; when calling this function, the array errors must have at least fNpar values. void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax); Set limits for parameter ipar. The specified limits will be used in a fit operation; when the option ""B"" is specified (Bounds).; To fix a parameter, use TF1::FixParameter. void SetRange(Double_t xmin, Double_t xmax); Initialize the upper and lower bounds to draw the function. The function range is also used in an histogram fit operation; when the option ""R"" is specified. void SetSavedPoint(Int_t point, Double_t value); Restore value of function saved at point. void SetTitle(const char* title = """"); Set function title; if title has the form ""fffffff;xxxx;yyyy"", it is assumed that; the function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; titles for the X and Y axis respectively. void Streamer(TBuffer& ); Stream a class o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TF1.html:57166,error,error,57166,root/html604/TF1.html,https://root.cern,https://root.cern/root/html604/TF1.html,2,['error'],['error']
Availability,"ould not be opened 0 is returned. ; Definition at line 61 of file TSQLServer.cxx. ◆ CreateDataBase(). virtual Int_t TSQLServer::CreateDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ DeclFileName(). static const char * TSQLServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 117 of file TSQLServer.h. ◆ DropDataBase(). virtual Int_t TSQLServer::DropDataBase ; (; const char * ; dbname). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ EnableErrorOutput(). virtual void TSQLServer::EnableErrorOutput ; (; Bool_t ; on = kTRUE). inlinevirtual . Definition at line 102 of file TSQLServer.h. ◆ Exec(). Bool_t TSQLServer::Exec ; (; const char * ; sql). virtual . Execute sql query. ; Useful for commands like DROP TABLE or INSERT, where result set is not interested. Return kTRUE if no error ; Reimplemented in TMySQLServer, TODBCServer, and TSQLiteServer.; Definition at line 85 of file TSQLServer.cxx. ◆ GetColumns(). virtual TSQLResult * TSQLServer::GetColumns ; (; const char * ; dbname, . const char * ; table, . const char * ; wild = nullptr . ). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ GetDataBases(). virtual TSQLResult * TSQLServer::GetDataBases ; (; const char * ; wild = nullptr). pure virtual . Implemented in TMySQLServer, TODBCServer, TPgSQLServer, and TSQLiteServer. ◆ GetDB(). const char * TSQLServer::GetDB ; (; ); const. inline . Definition at line 95 of file TSQLServer.h. ◆ GetDBMS(). const char * TSQLServer::GetDBMS ; (; ); const. inline . Definition at line 94 of file TSQLServer.h. ◆ GetErrorCode(). Int_t TSQLServer::GetErrorCode ; (; ); const. virtual . returns error code of last operation if res==0, no error Each specific implementation of TSQLServer provides its own error coding ; Definition at line 101 of file TSQLServer.cxx. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLServer.html:16835,error,error,16835,doc/master/classTSQLServer.html,https://root.cern,https://root.cern/doc/master/classTSQLServer.html,1,['error'],['error']
Availability,"ould_keep_alive() call; 18649 * is using parsed request, which will be invalid after; 18650 * memmove's below.; 18651 * Therefore, memorize should_keep_alive() result now for later; 18652 * use in loop exit condition. */; 18653 /* Enable it only if this request is completely discardable. */; 18654 keep_alive = STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 18655 && should_keep_alive(conn) && (conn->content_len >= 0); 18656 && (conn->request_len > 0); 18657 && ((conn->is_chunked == 4); 18658 || (!conn->is_chunked; 18659 && ((conn->consumed_content == conn->content_len); 18660 || ((conn->request_len + conn->content_len); 18661 <= conn->data_len)))); 18662 && (conn->protocol_type == PROTOCOL_TYPE_HTTP1);; 18663 ; 18664 if (keep_alive) {; 18665 /* Discard all buffered data for this request */; 18666 discard_len =; 18667 ((conn->request_len + conn->content_len) < conn->data_len); 18668 ? (int)(conn->request_len + conn->content_len); 18669 : conn->data_len;; 18670 conn->data_len -= discard_len;; 18671 ; 18672 if (conn->data_len > 0) {; 18673 DEBUG_TRACE(""discard_len = %d"", discard_len);; 18674 memmove(conn->buf,; 18675 conn->buf + discard_len,; 18676 (size_t)conn->data_len);; 18677 }; 18678 }; 18679 ; 18680 DEBUG_ASSERT(conn->data_len >= 0);; 18681 DEBUG_ASSERT(conn->data_len <= conn->buf_size);; 18682 ; 18683 if ((conn->data_len < 0) || (conn->data_len > conn->buf_size)) {; 18684 DEBUG_TRACE(""internal error: data_len = %li, buf_size = %li"",; 18685 (long int)conn->data_len,; 18686 (long int)conn->buf_size);; 18687 break;; 18688 }; 18689 conn->handled_requests++;; 18690 } while (keep_alive);; 18691 ; 18692 DEBUG_TRACE(""Done processing connection from %s (%f sec)"",; 18693 conn->request_info.remote_addr,; 18694 difftime(time(NULL), conn->conn_birth_time));; 18695 ; 18696 close_connection(conn);; 18697 ; 18698#if defined(USE_SERVER_STATS); 18699 mg_atomic_add(&(conn->phys_ctx->total_requests), conn->handled_requests);; 18700 mg_atomic_dec(&(conn->phys_ctx->active_connections)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:554898,error,error,554898,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"ould_keep_alive() call; 18650 * is using parsed request, which will be invalid after; 18651 * memmove's below.; 18652 * Therefore, memorize should_keep_alive() result now for later; 18653 * use in loop exit condition. */; 18654 /* Enable it only if this request is completely discardable. */; 18655 keep_alive = STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag); 18656 && should_keep_alive(conn) && (conn->content_len >= 0); 18657 && (conn->request_len > 0); 18658 && ((conn->is_chunked == 4); 18659 || (!conn->is_chunked; 18660 && ((conn->consumed_content == conn->content_len); 18661 || ((conn->request_len + conn->content_len); 18662 <= conn->data_len)))); 18663 && (conn->protocol_type == PROTOCOL_TYPE_HTTP1);; 18664 ; 18665 if (keep_alive) {; 18666 /* Discard all buffered data for this request */; 18667 discard_len =; 18668 ((conn->request_len + conn->content_len) < conn->data_len); 18669 ? (int)(conn->request_len + conn->content_len); 18670 : conn->data_len;; 18671 conn->data_len -= discard_len;; 18672 ; 18673 if (conn->data_len > 0) {; 18674 DEBUG_TRACE(""discard_len = %d"", discard_len);; 18675 memmove(conn->buf,; 18676 conn->buf + discard_len,; 18677 (size_t)conn->data_len);; 18678 }; 18679 }; 18680 ; 18681 DEBUG_ASSERT(conn->data_len >= 0);; 18682 DEBUG_ASSERT(conn->data_len <= conn->buf_size);; 18683 ; 18684 if ((conn->data_len < 0) || (conn->data_len > conn->buf_size)) {; 18685 DEBUG_TRACE(""internal error: data_len = %li, buf_size = %li"",; 18686 (long int)conn->data_len,; 18687 (long int)conn->buf_size);; 18688 break;; 18689 }; 18690 conn->handled_requests++;; 18691 } while (keep_alive);; 18692 ; 18693 DEBUG_TRACE(""Done processing connection from %s (%f sec)"",; 18694 conn->request_info.remote_addr,; 18695 difftime(time(NULL), conn->conn_birth_time));; 18696 ; 18697 close_connection(conn);; 18698 ; 18699#if defined(USE_SERVER_STATS); 18700 mg_atomic_add(&(conn->phys_ctx->total_requests), conn->handled_requests);; 18701 mg_atomic_dec(&(conn->phys_ctx->active_connections)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:554931,error,error,554931,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"ound - save the configuration ; : 7 | 0.692231 0.691692 0.197632 0.0164904 14132.6 0; : 8 | 0.683383 0.694963 0.194299 0.0156318 14328.3 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.682898 0.684979 0.192122 0.0157399 14513.9 0; : 10 | 0.670592 0.688549 0.192796 0.0152906 14422.1 1; : 11 Minimum Test error found - save the configuration ; : 11 | 0.670202 0.684295 0.191832 0.0154715 14515.7 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.675447 0.682107 0.194058 0.0158608 14366.1 0; : 13 | 0.678105 0.691356 0.193716 0.0152633 14345.5 1; : 14 | 0.684972 0.687408 0.191852 0.0154194 14509.8 2; : 15 | 0.676423 0.689156 0.193176 0.0153404 14395.3 3; : 16 | 0.683185 0.689966 0.191807 0.0149908 14478.3 4; : 17 | 0.672717 0.689982 0.192316 0.0149466 14433.2 5; : 18 | 0.670449 0.68412 0.190877 0.0151753 14570.1 6; : 19 Minimum Test error found - save the configuration ; : 19 | 0.661329 0.670317 0.192098 0.0154074 14488.6 0; : 20 Minimum Test error found - save the configuration ; : 20 | 0.658253 0.661402 0.192014 0.0155677 14508.7 0; : ; : Elapsed time for training with 3200 events: 3.87 sec ; : Evaluate deep neural network on CPU using batches with size = 256; : ; TMVA_DNN : [dataset] : Evaluation of TMVA_DNN on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.102 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_DNN.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras_LSTM for Classification; : ; : Split TMVA training data in 2560 training events and 640 validation events; : Training Model Summary; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; reshape (Reshape) (None, 10, 30) 0 ; ; lstm (LSTM) (None, 10, 10) 164",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:20531,error,error,20531,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['error'],['error']
Availability,ound - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test erro,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20433,error,error,20433,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ound - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20989,error,error,20989,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ound - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Te,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21768,error,error,21768,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"ound ax parameter ; Definition at line 91 of file TSpectrum2Fit.h. ◆ fAxInit. Double_t TSpectrum2Fit::fAxInit. protected . initial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 89 of file TSpectrum2Fit.h. ◆ fAyCalc. Double_t TSpectrum2Fit::fAyCalc. protected . calculated value of background ay parameter ; Definition at line 93 of file TSpectrum2Fit.h. ◆ fAyErr. Double_t TSpectrum2Fit::fAyErr. protected . error value of background ay parameter ; Definition at line 94 of file TSpectrum2Fit.h. ◆ fAyInit. Double_t TSpectrum2Fit::fAyInit. protected . initial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y) ; Definition at line 92 of file TSpectrum2Fit.h. ◆ fBxCalc. Double_t TSpectrum2Fit::fBxCalc. protected . calculated value of b parameter for 1D ridges in x direction ; Definition at line 81 of file TSpectrum2Fit.h. ◆ fBxErr. Double_t TSpectrum2Fit::fBxErr. protected . error value of b parameter for 1D ridges in x direction ; Definition at line 82 of file TSpectrum2Fit.h. ◆ fBxInit. Double_t TSpectrum2Fit::fBxInit. protected . initial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references ; Definition at line 80 of file TSpectrum2Fit.h. ◆ fByCalc. Double_t TSpectrum2Fit::fByCalc. protected . calculated value of b parameter for 1D ridges in y direction ; Definition at line 84 of file TSpectrum2Fit.h. ◆ fByErr. Double_t TSpectrum2Fit::fByErr. protected . error value of b parameter for 1D ridges in y direction ; Definition at line 85 of file TSpectrum2Fit.h. ◆ fByInit. Double_t TSpectrum2Fit::fByInit. protected . initial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references ; Definition at line 83 of file TSpectrum2Fit.h. ◆ fChi. Double_t TSpectrum2Fit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrum2Fit.h. ◆ fFitTaylor. Int_t TSpectrum2Fit::fF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:81540,error,error,81540,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['error']
Availability,"ound estimation functions; Three-dimensional smoothing functions; Three-dimensional deconvolution functions; Three-dimensional peak search functions. The algorithms in this class have been published in the following references:; [1] M.Morhac et al.: Background elimination methods for multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Physics Research A 401 (1997) 113-132.; [2] M.Morhac et al.: Efficient one- and two-dimensional Gold deconvolution and its application to gamma-ray spectra decomposition. Nuclear Instruments and Methods in Physics Research A 401 (1997) 385-408.; [3] M. Morhac et al.: Efficient algorithm of multidimensional deconvolution and its application to nuclear data processing. Digital Signal Processing, Vol. 13, No. 1, (2003), 144-171.; [4] M.Morhac et al.: Identification of peaks in multidimensional coincidence gamma-ray spectra. Nuclear Instruments and Methods in Research Physics A 443(2000), 108-125.; These NIM papers are also available as Postscript files from:. SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. See also the online documentation and tutorials. ; Definition at line 18 of file TSpectrum3.h. Public Types; enum  { kBackIncreasingWindow =0; , kBackDecreasingWindow =1; , kBackSuccessiveFiltering =0; , kBackOneStepFiltering =1; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TSpectrum3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:1898,avail,available,1898,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,1,['avail'],['available']
Availability,"ount dy. ; p - First element to move pLast1 - Last element. Do move this one dy - Amount by which to move ; Definition at line 1542 of file TGHtmlTable.cxx. ◆ NameToPmap(). SHtmlTokenMap_t * TGHtml::NameToPmap ; (; char * ; zType). protected . Returns token map matching zType name. ; Definition at line 1282 of file TGHtmlParse.cxx. ◆ NameToType(). int TGHtml::NameToType ; (; char * ; zType). protected . Convert a markup name into a type integer. ; Definition at line 1302 of file TGHtmlParse.cxx. ◆ NextMarkupType(). int TGHtml::NextMarkupType ; (; TGHtmlElement * ; p). protected . Return the next markup type [TGHtmlElement::NextMarkupType]. ; Definition at line 812 of file TGHtmlLayout.cxx. ◆ ParseText(). int TGHtml::ParseText ; (; char * ; text, . const char * ; index = nullptr . ). Appends (or insert at the specified position) the given HTML text to the end of any HTML text that may have been inserted by prior calls to this command. ; Then it runs the tokenizer, parser and layout engine as far as possible with the text that is available. The display is updated appropriately. ; Definition at line 325 of file TGHtml.cxx. ◆ PopStyleStack(). SHtmlStyle_t TGHtml::PopStyleStack ; (; int ; tag). protected . Pop a rendering style off of the stack. ; The top-most style on the stack should have a tag equal to ""tag"". If not, then we have an HTML coding error. Perhaps something like this: ""Some text <em>Enphasized</i> more text"". It is an interesting problem to figure out how to respond sanely to this kind of error. Our solution is to keep popping the stack until we find the correct tag, or until the stack is empty. ; Definition at line 87 of file TGHtmlSizer.cxx. ◆ PrintList(). void TGHtml::PrintList ; (; TGHtmlElement * ; first, . TGHtmlElement * ; last . ). Print a list of tokens. ; Definition at line 1509 of file TGHtmlParse.cxx. ◆ ProcessApplet(). virtual TGFrame * TGHtml::ProcessApplet ; (; TGHtmlInput * ; ). inlinevirtual . Definition at line 942 of file TGHtml.h. ◆ Proc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:80125,avail,available,80125,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['avail'],['available']
Availability,"ount, so here the under- and overflow; bins are ignored by default. TH1D * DoProjection(bool onX, const char* name, Int_t firstbin, Int_t lastbin, Option_t* option) const; internal (protected) method for performing projection on the X or Y axis; called by ProjectionX or ProjectionY. TH1D * ProjectionX(const char* name = ""_px"", Int_t firstybin = 0, Int_t lastybin = -1, Option_t* option = """") const; Project a 2-D histogram into a 1-D histogram along X*-*-; *-* ====================================================. The projection is always of the type TH1D.; The projection is made from the channels along the Y axis; ranging from firstybin to lastybin included.; By default, all bins including under- and overflow are included.; The number of entries in the projection is estimated from the; number of effective entries for all the cells included in the projection. To exclude the underflow bins in Y, use firstybin=1.; To exclude the overflow bins in Y, use lastybin=nx. if option ""e"" is specified, the errors are computed.; if option ""d"" is specified, the projection is drawn in the current pad.; if option ""o"" original axis range of the taget axes will be; kept, but only bins inside the selected range will be filled. Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProjectionX("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProjectionX("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts:; myhist->ProjectionX("" "",firstybin,lastybin,""[cutg1,cutg2]"");. NOTE that if a TH1D named ""name"" exists in the current directory or pad; the histogram is reset and filled again with the projected contents of the TH2. NOTE that the X axis attributes of the TH2 are copied to the X axis of the projection. TH1D * Project",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH2.html:50424,error,errors,50424,root/html534/TH2.html,https://root.cern,https://root.cern/root/html534/TH2.html,1,['error'],['errors']
Availability,"ountNodes(Int_t nlevels = 1000, Int_t option = 0); static voidTGeoVolume::CreateDummyMedium(); virtual voidTGeoVolume::CreateThreadData(Int_t nthreads); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGeoVolume::DistancetoPrimitive(Int_t px, Int_t py); virtual TGeoVolume*Divide(const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step, Int_t numed = 0, Option_t* option = """"); virtual voidTGeoVolume::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGeoVolume::DrawOnly(Option_t* option = """")MENU ; static TGeoMedium*TGeoVolume::DummyMedium(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoVolume::ExecuteEvent(Int_t event, Int_t px, Int_t py); Int_tTGeoVolume::Export(const char* filename, const char* name = """", Option_t* option = """"); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tTGeoVolume::FindMatrixOfDaughterVolume(TGeoVolume* vol) const; TGeoNode*TGeoVolume::FindNode(const char* name) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidTGeoVolume::FindOverlaps() const; Int_tGetAxis() const; virtual Int_tTGeoVolume::GetByteCount() const; virtual Int_tTGeoVolume::GetCurrentNodeIndex() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TObject*TGeoVolume::GetField() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolumeMulti.html:20077,error,error,20077,root/html534/TGeoVolumeMulti.html,https://root.cern,https://root.cern/root/html534/TGeoVolumeMulti.html,3,['error'],['error']
Availability,"oup=2, const char *newname="""", const Double_t *xbins=nullptr) override;  Rebin this profile grouping ngroup bins together. ;  ; void Reset (Option_t *option="""") override;  Reset contents of a Profile histogram. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1, Option_t *option="""") override;  Multiply this profile by a constant c1. ;  ; virtual void SetBinEntries (Int_t bin, Double_t w);  Set the number of entries in bin. ;  ; void SetBins (Int_t nbins, Double_t xmin, Double_t xmax) override;  Redefine x axis parameters. ;  ; void SetBins (Int_t nx, const Double_t *xbins) override;  Redefine x axis parameters. ;  ; void SetBinsLength (Int_t n=-1) override;  Set total number of bins including under/overflow. ;  ; void SetBuffer (Int_t buffersize, Option_t *option="""") override;  Set the buffer size in units of 8 bytes (double). ;  ; virtual void SetErrorOption (Option_t *option="""");  Set option to compute profile errors. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TProfile. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Sumw2 (Bool_t flag=kTRUE) override;  Create/delete structure to store sum of squares of weights per bin. ;  ;  Public Member Functions inherited from TH1D;  TH1D ();  Constructor. ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Double_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, const Float_t *xbins);  Create a 1-Dim histogram with variable bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup);  Create a 1-Dim histogram with fix bins of type double (see TH1::TH1 for explanation of parameters) ;  ;  TH1D (const TH1D &h1d);  Constructor.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:9593,error,errors,9593,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"our using the weights of each tree in the chain (see TChain::SetWeight). ; Reimplemented in TChain.; Definition at line 9364 of file TTree.cxx. ◆ Show(). void TTree::Show ; (; Long64_t ; entry = -1, . Int_t ; lenmax = 20 . ). virtual . Print values of all active leaves for entry. . if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. . Definition at line 9375 of file TTree.cxx. ◆ SortBranchesByTime(). void TTree::SortBranchesByTime ; (; ). private . Sorts top-level branches by the last average task time recorded per branch. ; Definition at line 5834 of file TTree.cxx. ◆ StartViewer(). void TTree::StartViewer ; (; ). virtual . Start the TTreeViewer on this tree. . ww is the width of the canvas in pixels; wh is the height of the canvas in pixels . Definition at line 9449 of file TTree.cxx. ◆ StopCacheLearningPhase(). Int_t TTree::StopCacheLearningPhase ; (; ). virtual . Stop the cache learning phase. ; Returns:; 0 learning phase stopped or not active; -1 on error . Definition at line 9464 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9535 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 659 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter option. option = ""Q"" Quiet mode (minimum printing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:218916,error,error,218916,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['error'],['error']
Availability,"our using the weights of each tree in the chain (see TChain::SetWeight). ; Reimplemented in TChain.; Definition at line 9374 of file TTree.cxx. ◆ Show(). void TTree::Show ; (; Long64_t ; entry = -1, . Int_t ; lenmax = 20 . ). virtual . Print values of all active leaves for entry. . if entry==-1, print current entry (default); if a leaf is an array, a maximum of lenmax elements is printed. . Definition at line 9385 of file TTree.cxx. ◆ SortBranchesByTime(). void TTree::SortBranchesByTime ; (; ). private . Sorts top-level branches by the last average task time recorded per branch. ; Definition at line 5834 of file TTree.cxx. ◆ StartViewer(). void TTree::StartViewer ; (; ). virtual . Start the TTreeViewer on this tree. . ww is the width of the canvas in pixels; wh is the height of the canvas in pixels . Definition at line 9459 of file TTree.cxx. ◆ StopCacheLearningPhase(). Int_t TTree::StopCacheLearningPhase ; (; ). virtual . Stop the cache learning phase. ; Returns:; 0 learning phase stopped or not active; -1 on error . Definition at line 9474 of file TTree.cxx. ◆ Streamer(). void TTree::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Reimplemented in TTreeSQL.; Definition at line 9545 of file TTree.cxx. ◆ StreamerNVirtual(). void TTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 705 of file TTree.h. ◆ UnbinnedFit(). Int_t TTree::UnbinnedFit ; (; const char * ; funcname, . const char * ; varexp, . const char * ; selection = """", . Option_t * ; option = """", . Long64_t ; nentries = kMaxEntries, . Long64_t ; firstentry = 0 . ). virtual . Unbinned fit of one or more variable(s) from a tree. ; funcname is a TF1 function.; See alsoTTree::Draw for explanations of the other parameters.; Fit the variable varexp using the function funcname using the selection cuts given by selection.; The list of fit options is given in parameter option. option = ""Q"" Quiet mode (minimum printing",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:221879,error,error,221879,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['error'],['error']
Availability,"ource and a pcm files. An exhaustive documentation of the CLI switches of genreflex can be inspected with the genreflex --help command.; The entity corresponding to the LinkDef file for genreflex is the selection XML file, also called selection XML or simply selection file. A selection XML file allows to describe a list of classes for which the dictionaries are to be created. In addition, it allows to specify properties of classes or data members, without the need to add comments in the source code. This is of primary importance when dictionaries must be created for classes residing in code which cannot be modified. For a complete description of the structure of the selection XML files and the way in which attributes can be set, refer to the genreflex --help command.; It is important to observe that selection XML files can be used in presence of rootcling invocations instead of LinkDef files.; 15.6.1 The ROOT::Meta::Selection namespace; Not only LinkDef and selection files allow to select the classes for which the dictionaries must be created: a third method is available. This is represented by the ROOT::Meta::Selection namespace. The idea behind this technique is that all the classes which are located in this special namespace are automatically selected for dictionary generation. All the properties and annotations allowed by LinkDef and selection XML files are possible. For a detailed documentation of the features of the ROOT::Meta::Selection namespace, refer to its online documentation.; 15.7 Adding a Class with ACLiC; Step 1: Define your class; #include ""TObject.h"". // define the ABC class and make it inherit from TObject so that; // we can write ABC to a ROOT file; class ABC : public TObject {. public:; Float_t a, b, c, p;; ABC() : a(0), b(0), c(0), p(0){};. // Define the class for the dictionary; ClassDef (ABC,1); };. // Call the ClassImp macro to give the ABC class RTTI and; // full I/O capabilities. #if !defined(__CLING__); ClassImp(ABC);; #endif; Step 2: Loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:837772,avail,available,837772,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"ource file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsRealLValue. class RooAbsRealLValue: public RooAbsReal, public RooAbsLValue. RooAbsRealLValue is the common abstract base class for objects that represent a; real value that may appear on the left hand side of an equation ('lvalue'); Each implementation must provide a setVal() member to allow direct modification ; of the value. RooAbsRealLValue may be derived, but its functional relation; to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue,; but doesn't hold its values because these limits may be derived; from limits of client object. The range serve as integration; range when interpreted as a observable and a boundaries when; interpreted as a parameter.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsRealLValue(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsRealLValue.html:1118,avail,available,1118,root/html528/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html528/RooAbsRealLValue.html,6,['avail'],['available']
Availability,"ource file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooAbsRealLValue. class RooAbsRealLValue: public RooAbsReal, public RooAbsLValue. RooAbsRealLValue is the common abstract base class for objects that represent a; real value that may appear on the left hand side of an equation ('lvalue'); Each implementation must provide a setVal() member to allow direct modification ; of the value. RooAbsRealLValue may be derived, but its functional relation; to other RooAbsArg must be invertible; This class has methods that export the defined range of the lvalue,; but doesn't hold its values because these limits may be derived; from limits of client object. The range serve as integration; range when interpreted as a observable and a boundaries when; interpreted as a parameter.; . Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsRealLValue(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tRooAbsReal::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsRealLValue.html:1118,avail,available,1118,root/html526/RooAbsRealLValue.html,https://root.cern,https://root.cern/root/html526/RooAbsRealLValue.html,1,['avail'],['available']
Availability,"ource variable. ;  ; Double_t GetEfficiency () const;  Give the total efficiency of the primary cache... defined as the ratio of blocks found in the cache vs. ;  ; Double_t GetEfficiencyRel () const;  This will indicate a sort of relative efficiency... a ratio of the reads found in the cache to the number of reads so far. ;  ; virtual Int_t GetEntryMax () const;  ; virtual Int_t GetEntryMin () const;  ; virtual EPrefillType GetLearnPrefill () const;  ; Double_t GetMissEfficiency () const;  The total efficiency of the 'miss cache' - defined as the ratio of blocks found in the cache versus the number of blocks prefetched. ;  ; Double_t GetMissEfficiencyRel () const;  Relative efficiency of the 'miss cache' - ratio of the reads found in cache to the number of reads so far. ;  ; bool GetOptimizeMisses () const;  ; TTree * GetTree () const;  ; bool IsAutoCreated () const;  ; virtual bool IsEnabled () const;  ; bool IsLearning () const override;  ; Int_t LearnBranch (TBranch *b, bool subgbranches=false) override;  Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ;  ; virtual void LearnPrefill ();  Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ;  ; Int_t ReadBuffer (char *buf, Long64_t pos, Int_t len) override;  Read buffer at position pos if the request is in the list of prefetched blocks read from fBuffer. ;  ; virtual Int_t ReadBufferNormal (char *buf, Long64_t pos, Int_t len);  Old method ReadBuffer before the addition of the prefetch mechanism. ;  ; virtual Int_t ReadBufferPrefetch (char *buf, Long64_t pos, Int_t len);  Used to read a chunk from a block previously fetched. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCacheUnzip.html:6378,error,error,6378,doc/v632/classTTreeCacheUnzip.html,https://root.cern,https://root.cern/doc/v632/classTTreeCacheUnzip.html,2,['error'],['error']
Availability,"ource:; header file; ; viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Fit::SparseData. class ROOT::Fit::SparseData: public ROOT::Fit::FitData. Function Members (Methods); public:. virtual~SparseData(); voidAdd(vector<double>& min, vector<double>& max, const double content, const double error = 1.); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataRange& range); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::FitData&); ROOT::Fit::FitDataROOT::Fit::FitData::FitData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range); voidGetBinData(ROOT::Fit::BinData&) const; voidGetBinDataIntegral(ROOT::Fit::BinData&) const; voidGetBinDataNoZeros(ROOT::Fit::BinData&) const; voidGetPoint(const unsigned int i, vector<double>& min, vector<double>& max, double& content, double& error); static unsigned intROOT::Fit::FitData::MaxSize(); unsigned intNDim() const; unsigned intNPoints() const; ROOT::Fit::SparseData&operator=(const ROOT::Fit::SparseData&); const ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt() const; ROOT::Fit::DataOptions&ROOT::Fit::FitData::Opt(); voidPrintList() const; const ROOT::Fit::DataRange&ROOT::Fit::FitData::Range() const; ROOT::Fit::SparseDataSparseData(const ROOT::Fit::SparseData&); ROOT::Fit::SparseDataSparseData(vector<double>& min, vector<double>& max); ROOT::Fit::SparseDataSparseData(const unsigned int dim, double[] min, double[] max). Data Members; private:. ROOT::Fit::ProxyListBox*fList. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SparseData(vector<double>& min, vector<double>& max); Constructor with a vector. SparseData(const unsigned int dim, double[] min, double[] max); Constructor with a dimension and two arrays. ~SparseData(); Destructor. unsigned int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Fit__SparseData.html:1122,error,error,1122,root/html602/ROOT__Fit__SparseData.html,https://root.cern,https://root.cern/root/html602/ROOT__Fit__SparseData.html,2,['error'],['error']
Availability,"ources used by ROOT (files, network sockets,; 865/// shared memory segments, etc.).; 866 ; 867TROOT::~TROOT(); 868{; 869 using namespace ROOT::Internal;; 870 ; 871 if (gROOTLocal == this) {; 872 ; 873 // TMapFile must be closed before they are deleted, so run CloseFiles; 874 // (possibly a second time if the application has an explicit TApplication; 875 // object, but in that this is a no-op). TMapFile needs the slow close; 876 // so that the custome operator delete can properly find out whether the; 877 // memory being 'freed' is part of a memory mapped file or not.; 878 CloseFiles();; 879 ; 880 // If the interpreter has not yet been initialized, don't bother; 881 gGetROOT = &GetROOT1;; 882 ; 883 // Mark the object as invalid, so that we can veto some actions; 884 // (like autoloading) while we are in the destructor.; 885 SetBit(TObject::kInvalidObject);; 886 ; 887 // Turn-off the global mutex to avoid recreating mutexes that have; 888 // already been deleted during the destruction phase; 889 if (gGlobalMutex) {; 890 TVirtualMutex *m = gGlobalMutex;; 891 gGlobalMutex = nullptr;; 892 delete m;; 893 }; 894 ; 895 // Return when error occurred in TCling, i.e. when setup file(s) are; 896 // out of date; 897 if (!fVersionInt) return;; 898 ; 899 // ATTENTION!!! Order is important!; 900 ; 901 SafeDelete(fBrowsables);; 902 ; 903 // FIXME: Causes rootcling to deadlock, debug and uncomment; 904 // SafeDelete(fRootFolder);; 905 ; 906#ifdef R__COMPLETE_MEM_TERMINATION; 907 fSpecials->Delete(); SafeDelete(fSpecials); // delete special objects : PostScript, Minuit, Html; 908#endif; 909 ; 910 fClosedObjects->Delete(""slow""); // and closed files; 911 fFiles->Delete(""slow""); // and files; 912 SafeDelete(fFiles);; 913 fSecContexts->Delete(""slow""); SafeDelete(fSecContexts); // and security contexts; 914 fSockets->Delete(); SafeDelete(fSockets); // and sockets; 915 fMappedFiles->Delete(""slow""); // and mapped files; 916 TSeqCollection *tl = fMappedFiles; fMappedFiles = nullptr; delete tl;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:35600,error,error,35600,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['error'],['error']
Availability,"ours display mode. void GetLightHeightWeight(Double_t& weight); Gets weight between shading according to fictive light source and according to channels counts:; -weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group. void GetChanMarks(Int_t& enable, Int_t& color, Int_t& width, Int_t& height, Int_t& style); Gets drawing attributes for channel marks:; -enable - decides whether the channel marks are shown or not; -color - color of channel marks; -width - width of channel marks in pixels; -height - height of channel marks in pixels; -style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle). void GetChanGrid(Int_t& enable, Int_t& color); This function gets attributes for drawing channel:; -enable - decides whether the channel grid is shown or not; -color - color of channel grid. void PaintSpectrum(TH2* h2, Option_t* option = """", Int_t bs = 1600); This function allows to set all the possible options available in; TSpectrum2Painter and paint ""h2"". TSpectrum2Painter offers a large set of options/attributes. In the; ""option"" parameter each of them can be set to specific values via; ""operators"" in the option itself. for instance on can do:. h2->Draw(""SPEC a(30,30,0)"");. to draw h2 with TSpectrum2Painter using all the default attributes except; the viewing angles. The operators' names are case unsensitive (one can use; ""a"" or ""A""). Operators parameters are seperated by "","". The operators can; be put is any order in the option. Operators must be serparated by "" "".; No "" "" characters should be put in an operator. This help page describes; all the available operators. * * *. The way ""h2"" will be painted is controled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"". ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carrie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:35173,avail,available,35173,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['avail'],['available']
Availability,"ous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; TGComboBox*fAxesMode; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGVerticalFrame*fCenterFrameParent frame for Center tab.; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; TGCheckButton*fDrawCenterdraw center widget; TGCheckButton*fDrawOrigindraw origin widget; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; TGComboBox*fLabMode; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveProjectionAxes*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveProjectionAxesEditor.html:18483,mask,mask,18483,root/html602/TEveProjectionAxesEditor.html,https://root.cern,https://root.cern/root/html602/TEveProjectionAxesEditor.html,2,['mask'],['mask']
Availability,"out deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages for your fit.; ""Minuit"" - the popular Minuit minimization package.; ""Minuit2"" - a new object-oriented implementation of Minuit in C++.; ""Fumili"" - the popular Fumili minimization package. ""Method"" group has currently restricted functionality.; ""MIGRAD"" method is available for Minuit and Minuit2; ""FUMILI"" method is available for Fumili and Minuit2; ""SIMPLEX"" method is disabled (will come with the new fitter design). ""Minimization Settings' group allows users to set values for: //; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed. Fit button - performs a fit.; Reset - resets all GUI elements and related fit settings to the; default ones.; Close - closes this window. //; /*. */. Function Members (Methods); public:. TFitEditor(TVirtualPad* pad, TObject* obj); virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:3745,avail,available,3745,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,8,['avail'],['available']
Availability,"out deleting the previous. Draw options:; ""SAME"" sets On/Off function drawing on the same pad.; ""No drawing"" sets On/Off option '0'- do not draw function graphics.; ""Do not store/draw"" sets On/Off option 'N'- do not store the; function, do not draw it. Sliders settings are used if option 'R' - use range is active.; Users can change min/max values by pressing the left mouse button; near to the left/right slider edges. It is possible o change both; values simultaneously by pressing the left mouse button near to its; center and moving it to a new desire position. ""Minimization"" Tab. ""Library"" group allows you to use Minuit, Minuit2 or Fumili; minimization packages for your fit.; ""Minuit"" - the popular Minuit minimization package.; ""Minuit2"" - a new object-oriented implementation of Minuit in C++.; ""Fumili"" - the popular Fumili minimization package. ""Method"" group has currently restricted functionality.; ""MIGRAD"" method is available for Minuit and Minuit2; ""FUMILI"" method is available for Fumili and Minuit2; ""SIMPLEX"" method is disabled (will come with the new fitter design). ""Minimization Settings' group allows users to set values for: //; ""Error definition"" - between 0.0 and 100.0 (default is 1.0).; ""Maximum tolerance"" - the fit relative precision in use.; ""Maximum number of iterations"" - default is 5000. Print options:; ""Default"" - between Verbose and Quiet.; ""Verbose"" - prints results after each iteration.; ""Quiet"" - no fit information is printed. Fit button - performs a fit.; Reset - resets all GUI elements and related fit settings to the; default ones.; Close - closes this window. //; /*. */. Function Members (Methods); public:. virtual~TFitEditor(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitEditor.html:3745,avail,available,3745,root/html602/TFitEditor.html,https://root.cern,https://root.cern/root/html602/TFitEditor.html,4,['avail'],['available']
Availability,"out of that region. This can, however, mean that the fitter gets lost in this region. If this happens, try switching it off. . RecoverFromUndefinedRegions(double strength) When PDF is invalid (e.g. parameter in undefined region), try to direct minimiser away from that region. strength controls the magnitude of the penalty term. Leaving out this argument defaults to 10. Switch off with strength = 0.. SumW2Error(bool flag) Apply correction to errors and covariance matrix. This uses two covariance matrices, one with the weights, the other with squared weights, to obtain the correct errors for weighted likelihood fits. If this option is activated, the corrected covariance matrix is calculated as \( V_\mathrm{corr} = V C^{-1} V \), where \( V \) is the original covariance matrix and \( C \) is the inverse of the covariance matrix calculated using the squared weights. This allows to switch between two interpretations of errors: . SumW2Error Interpretation . true The errors reflect the uncertainty of the Monte Carlo simulation. Use this if you want to know how much accuracy you can get from the available Monte Carlo statistics.; Example: Simulation with 1000 events, the average weight is 0.1. The errors are as big as if one fitted to 1000 events. . false The errors reflect the errors of a dataset, which is as big as the sum of weights. Use this if you want to know what statistical errors you would get if you had a dataset with as many events as the (weighted) Monte Carlo simulation represents.; Example (Data as above): The errors are as big as if one fitted to 100 events. . NoteIf the SumW2Error correction is enabled, the covariance matrix quality stored in the RooFitResult object will be the minimum of the original covariance matrix quality and the quality of the covariance matrix calculated with the squared weights. . AsymptoticError() Use the asymptotically correct approach to estimate errors in the presence of weights. This is slower but more accurate than SumW2Error. S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:107603,error,errors,107603,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['errors']
Availability,"output);; 853 if (output.size() == (outputSize() - 1) * batch.size()); 854 {; 855 auto output_iterator = output.begin();; 856 for (auto pattern_it = batch.begin(); pattern_it != batch.end(); ++pattern_it); 857 {; 858 for (size_t output_index = 1; output_index < outputSize(); ++output_index); 859 {; 860 settings.testSample (0, *output_iterator, (*pattern_it).output ().at (0),; 861 (*pattern_it).weight ());; 862 ++output_iterator;; 863 }; 864 }; 865 }; 866 testError += testPatternError; /// batch.size ();; 867 }; 868 // testError /= testPattern.size ();; 869 }; 870 settings.endTestCycle ();; 871// testError /= weightSum;; 872 ; 873 settings.computeResult (*this, weights);; 874 ; 875 hasConverged = settings.hasConverged (testError);; 876 if (!hasConverged && !isWeightsForDrop); 877 {; 878 dropOutWeightFactor (weights, dropFractions, true); // inverse; 879 isWeightsForDrop = true;; 880 }; 881 }; 882 ++testCycleCount;; 883 ++dropOutChangeCount;; 884 ; 885 ; 886// settings.resetPlot (""errors"");; 887 settings.addPoint (""trainErrors"", cycleCount, trainError);; 888 settings.addPoint (""testErrors"", cycleCount, testError);; 889 settings.plot (""trainErrors"", ""C"", 1, kBlue);; 890 settings.plot (""testErrors"", ""C"", 1, kMagenta);; 891 ; 892 ; 893 // setup error plots and progress bar variables for JsMVA; 894 if (fInteractive){; 895 fInteractive->AddPoint(cycleCount, trainError, testError);; 896 if (*fExitFromTraining) break;; 897 *fIPyCurrentIter = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 898 }; 899 ; 900 if (hasConverged); 901 break;; 902 ; 903 if ((int)cycleCount % 10 == 0) {; 904 ; 905 TString convText = TString::Format( ""(train/test/epo/conv/maxco): %.3g/%.3g/%d/%d/%d"",; 906 trainError,; 907 testError,; 908 (int)cycleCount,; 909 (int)settings.convergenceCount (),; 910 (int)settings.maxConvergenceCount ());; 911 double progress = 100*(double)settings.maxConvergenceCount () /(double)settings.convergenceSteps ();; 912 settings.cycle (prog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:26785,error,errors,26785,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['error'],['errors']
Availability,"outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is that that divisions are possible on whatever axis that; produces still known shapes as slices. The division of shapes should not be; performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide().; The algorithm for dividing a specific shape is known by the shape object, but; is always invoked in a generic way from the volume level. Details on how to; do that can be found in TGeoVolume class. One can see how all division options; are interpreted and which is their result inside specific shape classes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidAfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBig(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidCheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t*, const Double_t*, Double_t*, Int_t); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t*, Bool_t*, Int_t) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:6663,avail,available,6663,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,3,['avail'],['available']
Availability,"outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is that that divisions are possible on whatever axis that; produces still known shapes as slices. The division of shapes should not be; performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide().; The algorithm for dividing a specific shape is known by the shape object, but; is always invoked in a generic way from the volume level. Details on how to; do that can be found in TGeoVolume class. One can see how all division options; are interpreted and which is their result inside specific shape classes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBig(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoShape.html:6651,avail,available,6651,root/html528/TGeoShape.html,https://root.cern,https://root.cern/root/html528/TGeoShape.html,1,['avail'],['available']
Availability,"outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is that that divisions are possible on whatever axis that; produces still known shapes as slices. The division of shapes should not be; performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide().; The algorithm for dividing a specific shape is known by the shape object, but; is always invoked in a generic way from the volume level. Details on how to; do that can be found in TGeoVolume class. One can see how all division options; are interpreted and which is their result inside specific shape classes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBig(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidCheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoShape.html:6651,avail,available,6651,root/html530/TGeoShape.html,https://root.cern,https://root.cern/root/html530/TGeoShape.html,1,['avail'],['available']
Availability,"outwards or inwards; shape respectively. Normal components are statically stored by shape class,; so it has to be copied after retreival in a different array. Dividing shapes. Shapes can generally be divided along a given axis. Supported axis are; X, Y, Z, Rxy, Phi, Rxyz. A given shape cannot be divided however on any axis.; The general rule is that that divisions are possible on whatever axis that; produces still known shapes as slices. The division of shapes should not be; performed by TGeoShape::Divide() calls, but rather by TGeoVolume::Divide().; The algorithm for dividing a specific shape is known by the shape object, but; is always invoked in a generic way from the volume level. Details on how to; do that can be found in TGeoVolume class. One can see how all division options; are interpreted and which is their result inside specific shape classes. /*. */. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TGeoShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Double_tBig(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidCheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tCouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistanceto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoShape.html:6651,avail,available,6651,root/html532/TGeoShape.html,https://root.cern,https://root.cern/root/html532/TGeoShape.html,1,['avail'],['available']
Availability,"ovariance only approximate; status = 2 : full matrix but forced pos def; status = 3 : full accurate matrix. double Correlation(unsigned int i, unsigned int j) const. return correlation coefficient between variable i and j.; If the variable is fixed or const the return value is zero. double GlobalCC(unsigned int i) const. get global correlation coefficient for the variable i. This is a number between zero and one which gives; the correlation between the i-th variable and that linear combination of all other variables which; is most strongly correlated with i.; If the variable is fixed or const the return value is zero. bool GetMinosError(unsigned int i, double& errLow, double& errUp, int = 0). get the minos error for parameter i, return false if Minos failed; A minimizaiton must be performed befre, return false if no minimization has been done; In case of Minos failed the status error is updated as following; status += 10 * minosStatus where the minos status is:; status = 1 : maximum number of function calls exceeded when running for lower error; status = 2 : maximum number of function calls exceeded when running for upper error; status = 3 : new minimum found when running for lower error; status = 4 : new minimum found when running for upper error; status = 5 : any other failure. bool Scan(unsigned int i, unsigned int& nstep, double* x, double* y, double xmin = 0, double xmax = 0). scan a parameter i around the minimum. A minimization must have been done before,; return false if it is not the case. bool Contour(unsigned int i, unsigned int j, unsigned int& npoints, double* xi, double* xj). find the contour points (xi,xj) of the function for parameter i and j around the minimum; The contour will be find for value of the function = Min + ErrorUp();. bool Hesse(). perform a full calculation of the Hessian matrix for error calculation; If a valid minimum exists the calculation is done on the minimum point otherwise is performed; in the current set values of parameters; S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html:11934,error,error,11934,root/html534/ROOT__Minuit2__Minuit2Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Minuit2__Minuit2Minimizer.html,21,"['error', 'failure']","['error', 'failure']"
Availability,"ove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers = 0); Build specified package. Executes the PROOF-INF/BUILD.sh; script if it exists on all unique nodes. If opt is kBuildOnSlavesNoWait; then submit build command to slaves, but don't wait; for results. If opt is kCollectBuildResults then collect result; from slaves. To be used on the master.; If opt = kBuildAll (default) then submit and wait for results; (to be used on the client).; Returns 0 in case of success and -1 in case of error. Int_t BuildPackageOnClient(const char* package, Int_t opt = 0, TString* path = 0, Int_t chkveropt = kCheckROOT); Build specified package on the client. Executes the PROOF-INF/BUILD.sh; script if it exists on the client.; If opt == 0, both the preparation and building phases are run.; If opt == 1, only the preparation phase (asserting and, eventually, downloading; of the package) is done; '*path' contains the full path to the; package to be passed in the next call; If opt == 2, only the building phase is run using *path .; Returns 0 in case of success and -1 in case of error.; The code is equivalent to the one in TProofServ.cxx (TProof::kBuildPackage; case). Keep in sync in case of changes. Int_t LoadPackage(const char* package, Bool_t notOnClient = kFALSE, TList* loadopts = 0, TList* workers = 0); Load specified package. Executes the PROOF-INF/SETUP.C script; on all active nodes. If notOnClient = true, don't load package; on the client. The default is to loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:74403,error,error,74403,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['error'],['error']
Availability,"ove default template arguments. bool IsInterpreterDetail(const char* type); Return true if the type is one the interpreter details which are; only forward declared (ClassInfo_t etc..). bool IsSTLBitset(const char* type); Return true is the name is std::bitset<number> or bitset<number>. ROOT::ESTLType IsSTLCont(const char* type); type : type name: vector<list<classA,allocator>,allocator>; result: 0 : not stl container; code of container 1=vector,2=list,3=deque,4=map; 5=multimap,6=set,7=multiset. int IsSTLCont(const char* type, int testAlloc); type : type name: vector<list<classA,allocator>,allocator>; testAlloc: if true, we test allocator, if it is not default result is negative; result: 0 : not stl container; abs(result): code of container 1=vector,2=list,3=deque,4=map; 5=multimap,6=set,7=multiset; positive val: we have a vector or list with default allocator to any depth; like vector<list<vector<int>>>; negative val: STL container other than vector or list, or non default allocator; For example: vector<deque<int>> has answer -1. bool IsStdClass(const char* type); return true if the class belond to the std namespace. bool IsVectorBool(const char* name). string ResolveTypedef(const char* tname, bool resolveAll = false). string InsertStd(const char* tname). char* DemangleTypeIdName(const type_info& ti, int& errorCode); Demangle in a portable way the type id name.; IMPORTANT: The caller is responsible for freeing the returned const char*. EComplexType GetComplexType(const char* ). char* DemangleName(const char* mangled_name, int& errorCode); Demangle in a portable way the name.; IMPORTANT: The caller is responsible for freeing the returned const char*. » Author: Victor Perev 10/04/2003 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/metautils:$Id$ » Last generated: 2015-06-30 14:41; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClassEdit.html:6032,error,errorCode,6032,root/html602/TClassEdit.html,https://root.cern,https://root.cern/root/html602/TClassEdit.html,2,['error'],['errorCode']
Availability,"over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.C. tutorialsroofitrf712_lagrangianmorphfit.C. ROOT master - ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:16114,error,error,16114,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,1,['error'],['error']
Availability,"over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=59.1285, denominator=wrap_pdf_Int[pTV]=200921; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.338546 cHl3=0.879879 cHq3=-1.35856; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=14.3535, denominator=wrap_pdf_Int[pTV]=34082.1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=0.372361 cHl3=0.491134 cHq3=-0.886807; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=5.8312, denominator=wrap_pdf_Int[pTV]=12183.6; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(wrap_pdf) Calculating sum-of-weights-squared correction matrix for covariance matrix; [#1] INFO:InputArguments -- RooAbsData::plotOn(pseudo_dh) INFO: dataset has non-integer weights, auto-selecting SumW2 errors instead of Poisson errors; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 7389.24 will supersede previous event count of 9313.81 for normalization of PDF projections; DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf712_lagrangianmorphfit.py. tutorialsroofitrf712_lagrangianmorphfit.py. ROOT master ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html:13891,error,error,13891,doc/master/rf712__lagrangianmorphfit_8py.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8py.html,1,['error'],['error']
Availability,"over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=38.6705, denominator=wrap_pdf_Int[pTV]=90131.3; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.22694 cHl3=-7.04051 cHq3=0.54016; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-2.21831, denominator=wrap_pdf_Int[pTV]=89722.5; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.44258 cHl3=4.96668 cHq3=0.0273884; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:12331,error,error,12331,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['error'],['error']
Availability,"overed}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", GetName());; 2063 return 0;; 2064 }; 2065 ; 2066 fEND = Long64_t(size);; 2067 ; 2068 if (fWritable && !fFree) fFree = new TList;; 2069 ; 2070 TKey *key;; 2071 Int_t nrecov = 0;; 2072 nwheader = 1024;; 2073 Int_t nread = nwheader;; 2074 ; 2075 while (idcur < fEND) {; 2076 Seek(idcur); // NOLINT: silence clang-tidy warnings; 2077 if (idcur+nread >= fEND) nread = fEND-idcur-1;; 2078 if (ReadBuffer(header, nread)) { // NOLINT: silence clang-tidy warnings; 2079 // ReadBuffer returns kTRUE in case of failure.; 2080 Error(""Recover"",""%s: failed to read the key data from disk at %lld."",; 2081 GetName(),idcur);; 2082 break;; 2083 }; 2084 buffer = header;; 2085 bufread = header;; 2086 frombuf(buffer, &nbytes);; 2087 if (!nbytes) {; 2088 Error(""Recover"",""Address = %lld\tNbytes = %d\t=====E R R O R======="", idcur, nbytes);; 2089 break;; 2090 }; 2091 if (nbytes < 0) {; 2092 idcur -= nbytes;; 2093 if (fWritable) new TFree(fFree,idcur,idcur-nbytes-1);; 2094 Seek(idcur);; 2095 continue;; 2096 }; 2097 Version_t versionkey;; 2098 frombuf(buffe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:74299,failure,failure,74299,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['failure'],['failure']
Availability,"override;  Returns depth of screen (number of bit planes). ;  ; Display_t GetDisplay () const override;  Returns handle to display (might be useful in some cases where direct X11 manipulation outside of TVirtualX is needed, e.g. ;  ; ROOT::MacOSX::X11::Rectangle GetDisplayGeometry () const;  ; Int_t GetDoubleBuffer (Int_t wid) override;  Queries the double buffer value for the window ""wid"". ;  ; ROOT::MacOSX::X11::EventTranslator * GetEventTranslator () const;  ; FontH_t GetFontHandle (FontStruct_t fs) override;  Returns the font handle of the specified font structure ""fs"". ;  ; void GetFontProperties (FontStruct_t font, Int_t &max_ascent, Int_t &max_descent) override;  Returns the font properties. ;  ; FontStruct_t GetFontStruct (FontH_t fh) override;  Retrieves the associated font structure of the font specified font handle ""fh"". ;  ; void GetGCValues (GContext_t gc, GCValues_t &gval) override;  Returns the components specified by the mask in ""gval"" for the specified GC ""gc"" (see also the GCValues_t structure) ;  ; void GetGeometry (Int_t wid, Int_t &x, Int_t &y, UInt_t &w, UInt_t &h) override;  Returns position and size of window ""wid"". ;  ; void GetImageSize (Drawable_t wid, UInt_t &width, UInt_t &height) override;  Returns the width and height of the image id. ;  ; Window_t GetInputFocus () override;  Returns the window id of the window having the input focus. ;  ; Handle_t GetNativeEvent () const override;  Returns the current native event handle. ;  ; Double_t GetOpenGLScalingFactor () override;  On a HiDPI resolution it can be > 1., this means glViewport should use scaled width and height. ;  ; Window_t GetParent (Window_t wid) const override;  Returns the parent of the window ""id"". ;  ; void GetPasteBuffer (Window_t wid, Atom_t atom, TString &text, Int_t &nchar, Bool_t del) override;  Gets contents of the paste buffer ""atom"" into the string ""text"". ;  ; ULong_t GetPixel (Color_t cindex) override;  Returns pixel value associated to specified ROOT color numbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:12803,mask,mask,12803,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,2,['mask'],['mask']
Availability,"overrideDefinition TGraphBentErrors.h:86; TGraphBentErrors::fEXhighdDouble_t * fEXhighd[fNpoints] array of X high displacementsDefinition TGraphBentErrors.h:34; TGraphBentErrors::GetEXhighdDouble_t * GetEXhighd() const overrideDefinition TGraphBentErrors.h:85; TGraphBentErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideGet high error on X[i].Definition TGraphBentErrors.cxx:430; TGraphBentErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Add a point with bent errors to the graph.Definition TGraphBentErrors.cxx:192; TGraphBentErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Set ex and ey values for point pointed by the mouse.Definition TGraphBentErrors.cxx:587; TGraphBentErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphBentErrors.h:28; TGraphBentErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphBentErrors.h:29; TGraphBentErrors::~TGraphBentErrors~TGraphBentErrors() overrideTGraphBentErrors default destructor.Definition TGraphBentErrors.cxx:176; TGraphBentErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphBentErrors.cxx:495; TGraphBentErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphBentErrors by a constant c1.Definition TGraphBentErrors.cxx:510; TGraphBentErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html:28925,error,errorsDefinition,28925,doc/master/TGraphBentErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"overrideTStylevirtual; TAttLine::Copy(TAttLine &attline) constTAttLine; TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttMarker::Copy(TAttMarker &attmarker) constTAttMarker; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TStyleinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTStylevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; EPaperSize enum nameTStyle; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAttDateTStyleprivate; fAxisMaxDigitsTStyleprivate; fBarOffsetTStyleprivate; fBarWidthTStyleprivate; fBitsTObjectprivate; fCandleBoxRangeTStyleprivate; fCandleScaledTStyleprivate; fCandleWhiskerRangeTStyleprivate; fCanvasBorderModeTStyleprivate; fCanvasBorderSizeTStyleprivate; fCanvasColorTStyleprivate; fCanvasDefHTStyleprivate; fCanvasDefWTStyleprivate; fCanvasDefXTStyleprivate; fCanvasDefYTStyleprivate; fCanvasPreferGLTStyleprivate; fCapLinePSTStyleprivate; fColorModelPSTStyleprivate; fDateXTStyleprivate; fDateYTStyleprivate; fDrawBorderTStyleprivate; fEndErrorSizeTStyleprivate; fErrorXTStyleprivate; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFitFormatTStyleprivate; fFrameBorderModeTStyleprivate; fFrameBorderSizeTStyleprivate; fFrameFillColorTStyleprivate; fFrameFillStyleTStyleprivat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle-members.html:1759,error,error,1759,doc/master/classTStyle-members.html,https://root.cern,https://root.cern/doc/master/classTStyle-members.html,2,['error'],['error']
Availability,"overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 145 of file RooRealVar.h. ◆ fillTreeBranch(). void RooRealVar::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Overload RooAbsReal::fillTreeBranch to also fill tree branches with (asymmetric) errors if requested. ; Reimplemented from RooAbsReal.; Definition at line 1155 of file RooRealVar.cxx. ◆ format() [1/2]. TString * RooRealVar::format ; (; const RooCmdArg & ; formatArg); const. Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ; This function processes the named arguments taken by paramOn() and translates them to an option string parsed by RooRealVar::format(Int_t sigDigits, const char *options) ; Definition at line 849 of file RooRealVar.cxx. ◆ format() [2/2]. TString * RooRealVar::format ; (; Int_t ; sigDigits, . const char * ; options . ); const. Format numeric value of RooRealVar and its error in a variety of ways. ; To control what is shown use the following options N = show name T = show title (takes precedent over N, falls back to N if title is empty) H = hide value E = show error A = show asymmetric error instead of parabolic error (if available) U = show unit; To control how it is shown use these options L = TLatex mode X = Latex mode Y = Latex table mode ( '=' replaced by '&' ) V = Make name \verbatim in Latex mode P = use error to control shown precision F = force fixed precision ; Definition at line 919 of file RooRealVar.cxx. ◆ getAsymErrorHi(). double RooRealVar::getAsymErrorHi ; (; ); const. inline . Definition at line 63 of file RooRealVar.h. ◆ getAsymErrorLo(). double RooRealVar::getAsymErrorLo ; (; ); const. inline . Definition at line 62 of file RooRealVar.h. ◆ getBinning() [1/2]. const RooAbsBinning & RooRealVar::getBinning ; (; const char * ; name = nullptr, . bool ; verbose = true, . bool ; createOnTheFly = false . ); const. overridevirtual . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:79348,error,error,79348,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['error'],['error']
Availability,"overridevirtual . Replace contents of this profile by the addition of h1 and h2. ; this = c1*h1 + c2*h2; c1 and c2 are considered as weights applied to the two summed profiles. The operation acts therefore like merging the two profiles with a weight c1 and c2 ; Reimplemented from TH1.; Definition at line 291 of file TProfile.cxx. ◆ Add() [2/3]. Bool_t TProfile::Add ; (; const TH1 * ; h1, . Double_t ; c1 = 1 . ). overridevirtual . Performs the operation: this = this + c1*h1. ; Reimplemented from TH1.; Definition at line 269 of file TProfile.cxx. ◆ Add() [3/3]. Bool_t TProfile::Add ; (; TF1 * ; h1, . Double_t ; c1 = 1, . Option_t * ; option = """" . ). overridevirtual . Performs the operation: this = this + c1*f1. ; Reimplemented from TH1.; Definition at line 259 of file TProfile.cxx. ◆ Approximate(). void TProfile::Approximate ; (; Bool_t ; approx = kTRUE). static . Static function to set the fgApproximate flag. ; When the flag is true, the function GetBinError will approximate the bin error with the average profile error on all bins in the following situation only. the number of bins in the profile is less than 1002; the bin number of entries is small ( <5); the estimated bin error is extremely small compared to the bin content (see TProfile::GetBinError) . Definition at line 324 of file TProfile.cxx. ◆ BufferEmpty(). Int_t TProfile::BufferEmpty ; (; Int_t ; action = 0). overridevirtual . Fill histogram with all entries in the buffer. . action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is filled from the buffer; action = 1 histogram is filled and buffer is deleted The buffer is automatically deleted when the number of entries in the buffer is greater than the number of entries in the histogram . Reimplemented from TH1.; Definition at line 338 of file TProfile.cxx. ◆ BufferFill() [1/2]. Int_t TProfile::BufferFill ; (; Double_t ; x, . Double_t ; y, . Double_t ; w . ). protectedvirtual . accumulate arguments ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:62331,error,error,62331,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,2,['error'],['error']
Availability,"ow SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SparseData() [1/3]. ROOT::Fit::SparseData::SparseData ; (; std::vector< double > & ; min, . std::vector< double > & ; max . ). Constructor with a vector. ; Definition at line 193 of file SparseData.cxx. ◆ SparseData() [2/3]. ROOT::Fit::SparseData::SparseData ; (; const unsigned int ; dim, . double ; min[], . double ; max[] . ). Constructor with a dimension and two arrays. ; Definition at line 203 of file SparseData.cxx. ◆ SparseData() [3/3]. ROOT::Fit::SparseData::SparseData ; (; const SparseData & ; rhs). Copy constructor. ; Definition at line 215 of file SparseData.cxx. ◆ ~SparseData(). ROOT::Fit::SparseData::~SparseData ; (; ). override . Destructor. ; Definition at line 227 of file SparseData.cxx. Member Function Documentation. ◆ Add(). void ROOT::Fit::SparseData::Add ; (; std::vector< double > & ; min, . std::vector< double > & ; max, . const double ; content, . const double ; error = 1.0 . ). Adds a new bin specified by the vectors. ; Definition at line 241 of file SparseData.cxx. ◆ GetBinData(). void ROOT::Fit::SparseData::GetBinData ; (; BinData & ; bd); const. Transforms the data into a ROOT::Fit::BinData structure. ; Definition at line 308 of file SparseData.cxx. ◆ GetBinDataIntegral(). void ROOT::Fit::SparseData::GetBinDataIntegral ; (; BinData & ; bd); const. Same as before, but returning a BinData with integral format (containing bin edges) ; Definition at line 330 of file SparseData.cxx. ◆ GetBinDataNoZeros(). void ROOT::Fit::SparseData::GetBinDataNoZeros ; (; BinData & ; bd); const. Same as before, but including zero content bins. ; Definition at line 348 of file SparseData.cxx. ◆ GetPoint(). void ROOT::Fit::SparseData::GetPoint ; (; const unsigned int ; i, . std::vector< double > & ; min, . std::vector< double > & ; max, . double & ; content, . double & ; error . ). Definition at line 278 of file SparseData.cxx. ◆ NDim(). unsigned int ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html:7720,error,error,7720,doc/master/classROOT_1_1Fit_1_1SparseData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1SparseData.html,1,['error'],['error']
Availability,"ow SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRObject() [1/3]. ROOT::R::TRObject::TRObject ; (; ). inline . Default constructor. ; Definition at line 79 of file TRObject.h. ◆ TRObject() [2/3]. TRObject::TRObject ; (; SEXP ; robj). Construct a TRObject given a R base object. ; Parameters. robjraw R object . Definition at line 17 of file TRObject.cxx. ◆ TRObject() [3/3]. TRObject::TRObject ; (; SEXP ; robj, . Bool_t ; status . ). Construct a TRObject given a R base object. ; Parameters. robjraw R object ; statusif the raw object is valid obj . Definition at line 28 of file TRObject.cxx. Member Function Documentation. ◆ As(). template<class T > . T ROOT::R::TRObject::As ; (; ). inline . Some datatypes of ROOT or c++ can be wrapped in to a TRObject, this method lets you unwrap those datatypes encapsulate into this TRObject. ; NoteIf the current TRObject is not a valid object it will return and empty object and it will print an error message ; Returnstemplate return with the require datatype ; Definition at line 152 of file TRObject.h. ◆ Class(). static TClass * ROOT::R::TRObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ROOT::R::TRObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t ROOT::R::TRObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file TRObject.h. ◆ DeclFileName(). static const char * ROOT::R::TRObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 194 of file TRObject.h. ◆ GetAttribute(). TRObject ROOT::R::TRObject::GetAttribute ; (; const TString ; name). inline . The R objects can to have associate attributes with this method you can added attribute to TRObject given an object in the template argument. ; Parameters. nameattribute name . Returnsobject associ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html:13805,error,error,13805,doc/master/classROOT_1_1R_1_1TRObject.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRObject.html,1,['error'],['error']
Availability,"ow again the same decomposition but now performed in a loop and all necessary steps are manually invoked. This example also demonstrates another very important point concerning memory management! Note that the vector, matrix and decomposition class are constructed outside the loop since the dimensions of vector/matrix are constant. If we would have replaced lu.SetMatrix(a) by TDecompLU lu(a), we would construct/deconstruct the array elements of lu on the stack.; TVectorD b(n);; TMatrixD a(n,n);; TDecompLU lu(n);; Bool_t ok;; for (....) {; b = ..;; a = ..;; lu.SetMatrix(a);; lu.Decompose();; lu.Solve(b,ok);; }; 14.6.1 Tolerances and Scaling; The tolerance parameter fTol (a member of the base class TDecompBase) plays a crucial role in all operations of the decomposition classes. It gives the user a tool to monitor and steer the operations its default value is \(\varepsilon\) where \(1+\varepsilon=1\).; If you do not want to be bothered by the following considerations, like in most other linear algebra packages, just set the tolerance with SetTol to an arbitrary small number. The tolerance number is used by each decomposition method to decide whether the matrix is near singular, except of course SVD that can handle singular matrices. This will be checked in a different way for any decomposition. For instance in LU, a matrix is considered singular in the solving stage when a diagonal element of the decomposed matrix is smaller than fTol. Here an important point is raised. The Decompose() method is successful as long no zero diagonal element is encountered. Therefore, the user could perform decomposition and only after this step worry about the tolerance number.; If the matrix is flagged as being singular, operations with the decomposition will fail and will return matrices or vectors that are invalid. If one would like to monitor the tolerance parameter but not have the code stop in case of a number smaller than fTol, one could proceed as follows:; TVectorD b = ..;; TMat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:792948,toler,tolerance,792948,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['toler'],['tolerance']
Availability,"ow and overflow bins will have content 0.0 The Sumw2 is also cleared, since there is no more content in the bins. ;  ; TObject * Clone (const char *newname="""") const override;  Make a complete copy of the underlying object. ;  ; virtual Double_t ComputeIntegral (Bool_t onlyPositive=false);  Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ;  ; virtual void DirectoryAutoAdd (TDirectory *);  Perform the automatic addition of the histogram to the given directory. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a line. ;  ; virtual Bool_t Divide (const TH1 *h1);  Divide this histogram by h1. ;  ; virtual Bool_t Divide (const TH1 *h1, const TH1 *h2, Double_t c1=1, Double_t c2=1, Option_t *option="""");  Replace contents of this histogram by the division of h1 by h2. ;  ; virtual Bool_t Divide (TF1 *f1, Double_t c1=1);  Performs the operation: this = this/(c1*f1) if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; void Draw (Option_t *option="""") override;  Draw this histogram with options. ;  ; virtual TH1 * DrawCopy (Option_t *option="""", const char *name_postfix=""_copy"") const;  Copy this histogram and Draw in the current pad. ;  ; virtual TH1 * DrawNormalized (Option_t *option="""", Double_t norm=1) const;  Draw a normalized copy of this histogram. ;  ; virtual void DrawPanel ();  Display a panel with all histogram drawing options. ;  ; virtual void Eval (TF1 *f1, Option_t *option="""");  Evaluate function f1 at the center of bins of this histogram. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute action corresponding to one event. ;  ; virtual void ExtendAxis (Double_t x, TAxis *axis);  Histogram is resized along axis such that x is in the axis range. ;  ; virtual TH1 * FFT (TH1 *h_output, Option_t *option);  This function allows to do discrete Fourier transforms of TH1 and TH2. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:15576,error,errors,15576,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,44,['error'],['errors']
Availability,"ow of regularisation conditions to the matrix L ; Parameters. [in]nElenumber of valid entries in indeces and rowData ; [in]indicescolumn numbers of L to fill ; [in]rowDatadata to fill into the new row of L. returns true if a row was added, false otherwise ; A new row k is added to the matrix L, its dimension is expanded. The new elements Lki are filled from the array rowData[] where the indices i which are taken from the array indices[]. ; Definition at line 1954 of file TUnfold.cxx. ◆ Class(). static TClass * TUnfold::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TUnfold::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TUnfold::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 357 of file TUnfold.h. ◆ ClearHistogram(). void TUnfold::ClearHistogram ; (; TH1 * ; h, . Double_t ; x = 0. . ); const. protected . Initialize bin contents and bin errors for a given histogram. ; Parameters. [out]hhistogram ; [in]xnew histogram content. all histgram errors are set to zero, all contents are set to x ; Definition at line 3680 of file TUnfold.cxx. ◆ ClearResults(). void TUnfold::ClearResults ; (; void ; ). protectedvirtual . reset all results ; Reimplemented in TUnfoldSys.; Definition at line 208 of file TUnfold.cxx. ◆ CreateSparseMatrix(). TMatrixDSparse * TUnfold::CreateSparseMatrix ; (; Int_t ; nrow, . Int_t ; ncol, . Int_t ; nel, . Int_t * ; row, . Int_t * ; col, . Double_t * ; data . ); const. protected . create a sparse matrix, given the nonzero elements ; Parameters. [in]nrownumber of rows ; [in]ncolnumber of columns ; [in]nelnumber of non-zero elements ; [in]rowrow indexes of non-zero elements ; [in]colcolumn indexes of non-zero elements ; [in]datanon-zero elements data. return pointer to a new sparse matrix; shortcut to new TMatrixDSparse() followed by SetMatrixArray() ; Definition at line 578 of file TUnfold.cxx. ◆ DeclF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfold.html:28383,error,errors,28383,doc/master/classTUnfold.html,https://root.cern,https://root.cern/doc/master/classTUnfold.html,1,['error'],['errors']
Availability,"ow(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h). void IconifyWindow(Window_t id). void ReparentWindow(Window_t id, Window_t pid, Int_t x, Int_t y). void SetWindowBackground(Window_t id, ULong_t color). void SetWindowBackgroundPixmap(Window_t id, Pixmap_t pxm). Window_t CreateWindow(Window_t parent, Int_t x, Int_t y, UInt_t w, UInt_t h, UInt_t border, Int_t depth, UInt_t clss, void* visual, SetWindowAttributes_t* attr, UInt_t wtype). void CloseDisplay(). Display_t GetDisplay() const. Visual_t GetVisual() const. Int_t GetScreen() const. Int_t GetDepth() const. Colormap_t GetColormap() const. Atom_t InternAtom(const char* atom_name, Bool_t only_if_exist). Window_t GetDefaultRootWindow() const. Window_t GetParent(Window_t id) const. FontStruct_t LoadQueryFont(const char* font_name). FontH_t GetFontHandle(FontStruct_t fs). void DeleteFont(FontStruct_t fs). GContext_t CreateGC(Drawable_t id, GCValues_t* gval). void ChangeGC(GContext_t gc, GCValues_t* gval). void CopyGC(GContext_t org, GContext_t dest, Mask_t mask). void DeleteGC(GContext_t gc). Cursor_t CreateCursor(ECursor cursor). Pixmap_t CreatePixmap(Drawable_t id, UInt_t w, UInt_t h). Pixmap_t CreatePixmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height, ULong_t forecolor, ULong_t backcolor, Int_t depth). Pixmap_t CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height). Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr). Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data). void DeletePictureData(void* data). void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n). Bool_t ParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color). void QueryColor(Colormap_t cmap, ColorStruct_t& color). void FreeColor(Colormap_t cmap, ULong_t pixel). Int_t EventsPending(). void NextEvent(Event_t& event). void Bell(Int_t percent). void CopyArea(Drawable_t src, Drawable_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11.html:41373,mask,mask,41373,root/html528/TGX11.html,https://root.cern,https://root.cern/root/html528/TGX11.html,6,['mask'],['mask']
Availability,"ow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataErrorLowPtr;; 268 }; 269 else; 270 {; 271 // copy data vector and set correct pointer; 272 fData = rhs.fData;; 273 if ( !fData.empty() ); 274 fDataPtr = &fData.front();; 275 ; 276 // copy coordinate errors and set correct pointers; 277 fCoordErrors = rhs.fCoordErrors;; 278 if (!fCoordErrors.empty()) {; 279 assert(kCoordError == fErrorType || kAsymError == fErrorType);; 280 fCoordErrorsPtr.resize(fDim);; 281 for (unsigned int i = 0; i < fDim; i++) {; 282 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 283 }; 284 }; 285 // copy data error; 286 fDataError = rhs.fDataError;; 287 if (!fDataError.empty()) {; 288 assert(kValueError == fErrorType || kCoordError == fErrorType);; 289 fDataErrorPtr = &fDataError.front();; 290 }; 291 // copy the asymmetric data error; 292 fDataErrorHigh = rhs.fDataErrorHigh;; 293 fDataErrorLow = rhs.fDataErrorLow;; 294 // both error low and high should be empty or not; 295 assert( fDataErrorLow.empty() == fDataErrorHigh.empty()) ;; 296 if (!fDataErrorHigh.empty() && !fDataErrorLow.empty()) {; 297 assert(kAsymError == fErrorType);; 298 fDataErrorHighPtr = &fDataErrorHigh.front();; 299 fDataErrorLowPtr = &fDataErrorLow.front();; 300 }; 301 }; 302 ; 303 fpTmpCoordErrorVector= new double[ fDim ];; 304 ; 305 if ( HasBinEdges() ); 306 fpTmpBinEdgeVector = new double[ fDim ];; 307 ; 308 return *this;; 309 }; 310 ; 311 ; 312 /**; 313 preallocate a data set with given size , dimension and error type (to get the full point size); 314 If the data set already exists and it is having the compatible point size space for the new points; 315 is created in the data sets, while if not compatible the old data are erased and new space of; 316 new size is allocated.; 317 (i.e if exists initialize is equivalent to a resize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:8220,error,error,8220,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['error'],['error']
Availability,"ow; 3264 sFilename = FE->getName().str();; 3265 if (gSystem->FindDynamicLibrary(sFilename, kTRUE); 3266 && fileMap.count(sFilename.Data())) {; 3267 return kTRUE;; 3268 }; 3269 }; 3270 return kFALSE;; 3271}; 3272 ; 3273 ; 3274#if defined(R__MACOSX); 3275 ; 3276////////////////////////////////////////////////////////////////////////////////; 3277/// Check if lib is in the dynamic linker cache, returns true if it is, and if so,; 3278/// modifies the library file name parameter `lib` from `/usr/lib/libFOO.dylib`; 3279/// to `-lFOO` such that it can be passed to the linker.; 3280/// This is a unique feature of macOS 11.; 3281 ; 3282static bool R__UpdateLibFileForLinking(TString &lib); 3283{; 3284 const char *mapfile = nullptr;; 3285#if __x86_64__; 3286 mapfile = ""/System/Library/dyld/dyld_shared_cache_x86_64.map"";; 3287#elif __arm64__; 3288 mapfile = ""/System/Library/dyld/dyld_shared_cache_arm64e.map"";; 3289#else; 3290 #error unsupported architecture; 3291#endif; 3292 if (std::ifstream cacheMap{mapfile}) {; 3293 std::string line;; 3294 while (getline(cacheMap, line)) {; 3295 if (line.find(lib) != std::string::npos) {; 3296 lib.ReplaceAll(""/usr/lib/lib"",""-l"");; 3297 lib.ReplaceAll("".dylib"","""");; 3298 return true;; 3299 }; 3300 }; 3301 return false;; 3302 }; 3303 return false;; 3304}; 3305#endif // R__MACOSX; 3306 ; 3307#if defined (R__LINUX) || defined (R__FBSD); 3308 ; 3309////////////////////////////////////////////////////////////////////////////////; 3310/// Callback for dl_iterate_phdr(), see `man dl_iterate_phdr`.; 3311/// Collects opened libraries.; 3312 ; 3313static int callback_for_dl_iterate_phdr(struct dl_phdr_info *info, size_t size, void *data); 3314{; 3315 // This function is called through UpdateListOfLoadedSharedLibraries() which is locked.; 3316 static std::unordered_set<decltype(info->dlpi_addr)> sKnownLoadedLibBaseAddrs;; 3317 ; 3318 auto newLibs = static_cast<std::vector<std::string>*>(data);; 3319 if (!sKnownLoadedLibBaseAddrs.count(info->dlpi_addr)) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:127270,error,error,127270,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['error'],['error']
Availability,"owRightDefinition GuiTypes.h:375; kTopLeft@ kTopLeftDefinition GuiTypes.h:372; kBottomRight@ kBottomRightDefinition GuiTypes.h:372; kArrowVer@ kArrowVerDefinition GuiTypes.h:374; kCaret@ kCaretDefinition GuiTypes.h:375; kTopSide@ kTopSideDefinition GuiTypes.h:373; kLeftSide@ kLeftSideDefinition GuiTypes.h:373; kWatch@ kWatchDefinition GuiTypes.h:375; kMove@ kMoveDefinition GuiTypes.h:374; kTopRight@ kTopRightDefinition GuiTypes.h:372; kBottomLeft@ kBottomLeftDefinition GuiTypes.h:372; kHand@ kHandDefinition GuiTypes.h:374; kCross@ kCrossDefinition GuiTypes.h:374; kRotate@ kRotateDefinition GuiTypes.h:374; kArrowHor@ kArrowHorDefinition GuiTypes.h:374; kPointer@ kPointerDefinition GuiTypes.h:375. Reimplemented from TVirtualX. ◆ CreateGC(). GContext_t TGWin32VirtualXProxy::CreateGC ; (; Drawable_t ; id, . GCValues_t * ; gval . ). overridevirtual . Creates a graphics context using the provided GCValues_t *gval structure. ; The mask data member of gval specifies which components in the GC are to be set using the information in the specified values structure. It returns a graphics context handle GContext_t that can be used with any destination drawable or O if the creation falls. ; Reimplemented from TVirtualX. ◆ CreateImage(). Drawable_t TGWin32VirtualXProxy::CreateImage ; (; UInt_t ; width, . UInt_t ; height . ). overridevirtual . Allocates the memory needed for an drawable. ; Parameters. [in]widththe width of the image, in pixels ; [in]heightthe height of the image, in pixels . Reimplemented from TVirtualX. ◆ CreatePictureFromData(). Bool_t TGWin32VirtualXProxy::CreatePictureFromData ; (; Drawable_t ; id, . char ** ; data, . Pixmap_t & ; pict, . Pixmap_t & ; pict_mask, . PictureAttributes_t & ; attr . ). overridevirtual . Creates a picture pict from data in bitmap format. ; The picture attributes ""attr"" are used for input and output. Returns kTRUE in case of success, kFALSE otherwise. If the mask ""pict_mask"" does not exist it is set to kNone. ; Reimplemented from TVirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:61827,mask,mask,61827,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"owever commands like "".x file.C"" or "".L file.C"" will not cause the file.C to be transfered to the PROOF cluster. In that case use TProof::Exec(). Returns the status send by the remote server as part of the kPROOF_LOGDONE message. Typically this is the return code of the command on the remote side. Returns -1 in case of error. ; Definition at line 6631 of file TProof.cxx. ◆ SendCurrentState() [1/2]. Int_t TProof::SendCurrentState ; (; ESlaves ; list = kActive). private . Transfer the current state of the master to the active slave servers. ; The current state includes: the current working directory, etc. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6758 of file TProof.cxx. ◆ SendCurrentState() [2/2]. Int_t TProof::SendCurrentState ; (; TList * ; list). private . Transfer the current state of the master to the active slave servers. ; The current state includes: the current working directory, etc. Returns the number of active slaves. Returns -1 in case of error. ; Definition at line 6742 of file TProof.cxx. ◆ SendDataSetStatus(). void TProof::SendDataSetStatus ; (; const char * ; msg, . UInt_t ; n, . UInt_t ; tot, . Bool_t ; st . ). Send or notify data set status. ; Definition at line 9336 of file TProof.cxx. ◆ SendFile(). Int_t TProof::SendFile ; (; const char * ; file, . Int_t ; opt = (kBinary | kForward | kCp | kCpBin), . const char * ; rfile = 0, . TSlave * ; wrk = 0 . ). protected . Send a file to master or slave servers. ; Returns number of slaves the file was sent to, maybe 0 in case master and slaves have the same file system image, -1 in case of error. If defined, send to worker 'wrk' only. If defined, the full path of the remote path will be rfile. If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox (to copy to the cache on a different name use rfile = ""cache:newname""). The mask 'opt' is an or of ESendFileOpt: kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:137666,error,error,137666,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['error'],['error']
Availability,"owing distribution in histogram h. ;  ; virtual void FitSlicesZ (TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option_t *option=""QNR"");  Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-d histogram for each fit parameter Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered. ;  ; Int_t GetBin (Int_t binx, Int_t biny, Int_t binz) const override;  See comments in TH1::GetBin. ;  ; virtual Double_t GetBinContent (Int_t bin) const;  Return content of bin number bin. ;  ; virtual Double_t GetBinContent (Int_t bin, Int_t) const;  ; virtual Double_t GetBinContent (Int_t bin, Int_t, Int_t) const;  ; Double_t GetBinContent (Int_t binx, Int_t biny, Int_t binz) const override;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual Double_t GetBinErrorLow (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinErrorUp (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinWithContent3 (Double_t c, Int_t &binx, Int_t &biny, Int_t &binz, Int_t firstx=0, Int_t lastx=0, Int_t firsty=0, Int_t lasty=0, Int_t firstz=0, Int_t lastz=0, Double_t maxdiff=0) const;  Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ;  ; virtual Double_t GetCorrelationFactor (Int_t axis1=1, Int_t axis2=2) const;  Return correlation factor between axis1 and axis2. ;  ; virtual Double_t GetCovariance (Int_t axis1=1, Int_t axis2=2) const;  Return covariance between axis1 and axis2. ;  ; virtual void GetRandom3 (Double_t &x, Double_t &y, Double_t &, TRandom *rng=nullptr);  Return 3 random number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLTH3Composition.html:7414,error,error,7414,doc/master/classTGLTH3Composition.html,https://root.cern,https://root.cern/doc/master/classTGLTH3Composition.html,8,['error'],['error']
Availability,"owing; recommendations from a group of users.; - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; should be applied only to low statistic bins.; - in version 3.02 (26 Sep 2001), the same group of users recommend instead; to take two times the average error on all bins for these low; statistics bins giving a very small value for eprim2.; - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; when a TProfile is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile with a large number of; bins (eg 100000).; - in version 3.05/06, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation. Ideas for improvements of this algorithm are welcome. No suggestions; received since our call for advice to roottalk in Jul 2002.; see for instance: http://root.cern.ch/root/roottalk/roottalk02/2916.html. Option_t * GetErrorOption() const; -*Return option to compute profile errors; *-* =======================================. char* GetObjectInfo(Int_t px, Int_t py) const; Redefines TObject::GetObjectInfo.; Displays the profile info (bin number, contents, eroor, entries per bin; corresponding to cursor position px,py. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. void LabelsDeflate(Option_t* axis = ""X""); Reduce the number of bins for this axis to the number of bins having a label. void LabelsInflate(Option_t* axis = ""X""); Double the number of bins for axis.; Ref",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile.html:35793,error,errors,35793,root/html528/TProfile.html,https://root.cern,https://root.cern/root/html528/TProfile.html,4,['error'],['errors']
Availability,"owing; recommendations from a group of users.; - in version 3.01 (19 Apr 2001), it is realized that the algorithm above; should be applied only to low statistic bins.; - in version 3.02 (26 Sep 2001), the same group of users recommend instead; to take two times the average error on all bins for these low; statistics bins giving a very small value for eprim2.; - in version 3.04 (Nov 2002), the algorithm is modified/protected for the case; when a TProfile is projected (ProjectionX). The previous algorithm; generated a N^2 problem when projecting a TProfile with a large number of; bins (eg 100000).; - in version 3.05/06, a new static function TProfile::Approximate; is introduced to enable or disable (default) the approximation. Ideas for improvements of this algorithm are welcome. No suggestions; received since our call for advice to roottalk in Jul 2002.; see for instance: http://root.cern.ch/root/roottalk/roottalk02/2916.html. Option_t * GetErrorOption() const; -*Return option to compute profile errors; *-* =======================================. void GetStats(Double_t* stats) const; fill the array stats from the contents of this profile; The array stats must be correctly dimensionned in the calling program.; stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2. If no axis-subrange is specified (via TAxis::SetRange), the array stats; is simply a copy of the statistics quantities computed at filling time.; If a sub-range is specified, the function recomputes these quantities; from the bin contents in the current axis range. void LabelsDeflate(Option_t* axis = ""X""); Reduce the number of bins for this axis to the number of bins having a label. void LabelsInflate(Option_t* axis = ""X""); Double the number of bins for axis.; Refill histogram; This function is called by TAxis::FindBin(const char *label). void LabelsOption(Option_t* option = ""h"", Option_t* axis = ""X""); Set option(s) to draw axis with labels; option = ""a"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProfile.html:39223,error,errors,39223,root/html602/TProfile.html,https://root.cern,https://root.cern/root/html602/TProfile.html,2,['error'],['errors']
Availability,"ownership is relinquished.; A ROOT object coming from a ROOT call is not owned, but before it passes to the Python interpreter, its “must cleanup” bit is set if its type is a class derived from TObject. When the object goes out of scope on the C++ side, the Python object will change type into an object that largely behaves like None. The strict policy differs in that it will never relinquish ownership when passing an object as a parameter to a function. It is then up to the developer to prevent double deletes. Choosing one or the other policy is done by:; ROOT.SetMemoryPolicy( ROOT.kMemoryStrict ); for the strict policy, or for the heuristic policy:; ROOT.SetMemoryPolicy( ROOT.kMemoryHeuristics ); Care must be taken in the case of graphic objects: when drawn on the current pad, a reference to the graphics is kept that PyROOT isn’t currently aware of, and it is up to the developer to keep at lease one Python reference alive. See $ROOTSYS/tutorials/pyroot/zdemo.py (available in the latest release) for an example. Alternatively, one can tell python to give up ownership for individual instances:; o = ROOT.TObject(); ROOT.SetOwnership( o, False ) # True to own, False to release; 19.1.6.2 Memory Management by Hand; If needed, you can explicitly destroy a ROOT object that you own through its associated TClass:; myobject.IsA().Destructor(myobject); which will send out the deletion notification to the system (thus you do not need to care anymore at this point about Python reference counting, the object will go, even if it’s reference count it non-zero), and free the memory.; 19.1.7 Performance; The performance of PyROOT when programming with ROOT in Python is similar to that of Cling. Differences occur mainly because of differences in the respective languages: C++ is much harder to parse, but once parsed, it is much easier to optimize. Consequently, individual calls to ROOT are typically faster from PyROOT, whereas loops are typically slower.; When programming in Python, the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1062125,avail,available,1062125,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidConfigure(Double_t fov, Double_t dolly, Double_t[3] center, Double_t hRotate, Double_t vRotate); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTGLCamera::Dolly(Int_t delta, Bool_t mod1, Bool_t mod2); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; voidTGLCamera::DrawDebugAids() const; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TGLVector3TGLCamera::EyeDirection() const; TGLVertex3TGLCamera::EyePoint() const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGLVertex3TGLCamera::FrustumCenter() const; Rgl::EOverlapTGLCamera::FrustumOverlap(const TGLBoundingBox& box) const; const TGLPlane&TGLCamera::FrustumPlane(TGLCamera::EFrustumPlane plane) const; const TGLMatrix&TGLCamera::GetCamBase() const; const TGLMatrix&TGLCamera::GetCamTrans() const; Double_t*TGLCamera::GetCenterVec(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGLCamera::GetExternalCenter(); Double_tTGLCamera::GetFarClip() const; Double_t*TGLCamera::GetFixDefCenterVec(); Double_tGetFOV() const; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPerspectiveCamera.html:1955,error,error,1955,root/html602/TGLPerspectiveCamera.html,https://root.cern,https://root.cern/root/html602/TGLPerspectiveCamera.html,2,['error'],['error']
Availability,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateBranches(); virtual voidCreateTrees(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidDeleteTrees(); static voidDisableTObjectStreamersForVSDStruct(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveVSD.html:1646,error,error,1646,root/html528/TEveVSD.html,https://root.cern,https://root.cern/root/html528/TEveVSD.html,6,['error'],['error']
Availability,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidCreateCheckList(); voidDaughterToMother(Int_t id, Double_t* local, Double_t* master) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Double_tEfficiency(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFindOverlaps(Int_t inode) const; Double_t*GetBoxes() const; Int_t*GetCheckList(Int_t& nelem) const; virtual Int_t*GetCheckList(Double_t* point, Int_t& nelem); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual Int_t*GetNextCandidates(Double_t* point, Int_t& ncheck); virtual Int_t*GetNextVoxel(Double_t* point, Double_t* dir, Int_t& ncheck); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVoxelFinder.html:1606,error,error,1606,root/html528/TGeoVoxelFinder.html,https://root.cern,https://root.cern/root/html528/TGeoVoxelFinder.html,2,['error'],['error']
Availability,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreateGVEdge(GVizAgraph_t* gv); virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); GVizAgedge_t*GetGVEdge(); virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; TGraphNode*GetNode1(); TGraphNode*GetNode2(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphEdge.html:1698,error,error,1698,root/html534/TGraphEdge.html,https://root.cern,https://root.cern/root/html534/TGraphEdge.html,3,['error'],['error']
Availability,"owser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXTRU.html:8424,error,error,8424,doc/master/classTXTRU.html,https://root.cern,https://root.cern/doc/master/classTXTRU.html,18,['error'],['error']
Availability,"owser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileDrawMap.html:6822,error,error,6822,doc/master/classTFileDrawMap.html,https://root.cern,https://root.cern/doc/master/classTFileDrawMap.html,3,['error'],['error']
Availability,"owser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:15397,error,error,15397,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,8,['error'],['error']
Availability,"owser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCL() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetLowerLimit() const; Double_tGetMuMax() const; Double_tGetMuMin() const; Double_tGetMuStep() const; virtual const char*TObject::GetName() const; Double_tGetNbackground() const; Double_tGetNMax() const; Double_tGetNobserved() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetUpperLimit() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFeldmanCousins.html:2686,error,error,2686,root/html528/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html528/TFeldmanCousins.html,6,['error'],['error']
Availability,"owser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual floatColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTMatrixTBase<float>::Determinant() const; virtual voidTMatrixTBase<float>::Determinant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTMatrixTBase<float>::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual floatTMatrixTBase<float>::E2Norm() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExtractRow(Int_t row, Int_t col, float* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tTMatrixTBase<float>::GetColLwb() const; Int_tTMatrixTBase<float>::GetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidGetMatrix2Array(float* data, Option_t* = """") const; virtual const float*GetMatrixArray() const; virtual float*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tTMatrixTBase<float>::GetNcols() const; Int_tTMatrixTBase<float>::GetNo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTSparse_float_.html:5089,error,error,5089,root/html528/TMatrixTSparse_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTSparse_float_.html,6,['error'],['error']
Availability,"owser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; Double_tConcentration(Double_t time) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFindSolution(const TObjArray* array); voidGetCoeff(Int_t i, Double_t& cn, Double_t& lambda) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGeoElementRN*GetElement() const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TObject::GetName() const; Int_tGetNcoeff() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBatemanSol.html:1933,error,error,1933,root/html528/TGeoBatemanSol.html,https://root.cern,https://root.cern/root/html528/TGeoBatemanSol.html,6,['error'],['error']
Availability,"ox is drawn with surface proportional to contents. The size of the box is proportional to the absolute value of the cell contents. The cells with negative contents are drawn with an X on top of the boxes. With option BOX1 a button is drawn for each cell with surface proportional to contents’ absolute value. A sunken button is drawn for negative values, a raised one for positive values.; 3.8.2.4 The ERRor Bars Options. ""E"" Default. Draw only error bars, without markers; ""E0"" Draw also bins with 0 contents (turn off the symbols clipping).; ""E1"" Draw small lines at the end of error bars; ""E2"" Draw error rectangles; ""E3"" Draw a fill area through the end points of vertical error bars; ""E4"" Draw a smoothed filled area through the end points of error bars. The “E1” bars’ option. Note that for all options, the line and fill attributes of the histogram are used for the errors or errors contours. Use gStyle->SetErrorX(dx) to control the size of the error along x. The parameter dx is a percentage of bin width for errors along X. Set dx=0 to suppress the error along X. Use gStyle->SetEndErrorSize(np) to control the size of the lines at the end of the error bars (when option 1 is used). By default np=1 (np represents the number of pixels).; 3.8.2.5 The Color Option; For each cell (i,j) a box is drawn with a color proportional to the cell content. The color table used is defined in the current style (gStyle ). The color palette in TStyle can be modified with TStyle::SetPalette . Different draw options. 3.8.2.6 The TEXT Option; For each cell (i,j) the cell content is printed. The text attributes are:. Text font = current font set by TStyle; Text size= 0.02 * pad-height * marker-size; Text color= marker color. The TEXT option. 3.8.2.7 The CONTour Options; The following contour options are supported:. ""CONT"": Draw a contour plot (same as CONT0); ""CONT0"": Draw a contour plot using surface colors to distinguish contours; ""CONT1"": Draw a contour plot using line styles to distinguish co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:91758,error,errors,91758,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"oxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::map< Int_t, AnaIntConfig > _anaIntMap;  ! Map for analytical integration codes ;  ; RooAICRegistry _anaReg;  ! Registry for analytical integration codes ;  ; RooObjCacheManager _cacheMgr;  ; Int_t _ipOrder;  The cache manager. ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCachedPdf.html:72313,error,errors,72313,doc/master/classRooAbsCachedPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsCachedPdf.html,1,['error'],['errors']
Availability,"oxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooTemplateProxy< RooAbsPdf > _nominal;  ; RooListProxy _obsSet;  ; RooListProxy _paramSet;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooJeffreysPrior.html:67965,error,errors,67965,doc/master/classRooJeffreysPrior.html,https://root.cern,https://root.cern/doc/master/classRooJeffreysPrior.html,1,['error'],['errors']
Availability,"oxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _noRounding;  ; bool _protectNegative {true};  ; RooRealProxy mean;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPoisson.html:67585,error,errors,67585,doc/master/classRooPoisson.html,https://root.cern,https://root.cern/doc/master/classRooPoisson.html,1,['error'],['errors']
Availability,"oxy, Bool_t dmPointer); virtual~TStreamerSTL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tGetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int_t i) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStreamerSTL.html:1653,error,error,1653,root/html534/TStreamerSTL.html,https://root.cern,https://root.cern/root/html534/TStreamerSTL.html,1,['error'],['error']
Availability,"oxy_CheckExact(PyObject* pyobject); static void*ObjectProxy_AsVoidPtr(PyObject* pyobject); static Bool_tObjectProxy_Check(PyObject* pyobject); static Bool_tObjectProxy_CheckExact(PyObject* pyobject); static PyObject*ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); TPython&operator=(const TPython&); static voidPrompt(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TPython(); TPython(const TPython&). private:. static Bool_tInitialize(). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t Initialize(); Private initialization method: setup the python interpreter and load the; ROOT module. Bool_t Import(const char* name); Import the named python module and create Cling equivalents for its classes; and methods. void LoadMacro(const char* name); Execute the give python script as if it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPython.html:3772,avail,available,3772,root/html604/TPython.html,https://root.cern,https://root.cern/root/html604/TPython.html,1,['avail'],['available']
Availability,"oy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. { fNullPOI = (RooArgSet*)nullpoi.snapshot(); }. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. { fTestStat = testStatistic; }. void SetExpectedNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetAsimovNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetGenerateBinned(bool binned = true); control to use bin data generation. { fGenerateBinned = binned; }. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. { if(name) fSamplingDistName = name; }. string GetSamplingDistName(void); { return fSamplingDistName; }. void SetMaxToys(Double_t t); This option forces a maximum number of total toys. { fMaxToys = t; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSampler.html:6841,error,error,6841,root/html528/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSampler.html,1,['error'],['error']
Availability,"oys = ntoy; }. void SetNEventsPerToy(const Int_t nevents); Forces n events even for extended PDFs. Set NEvents=0 to; use the Poisson distributed events from the extended PDF. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters used when evaluating test statistic. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. { fPdf = &pdf; ClearCache(); }. void SetPriorNuisance(RooAbsPdf* pdf); How to randomize the prior. Set to NULL to deactivate randomization. { fPriorNuisance = pdf; }. void SetNuisanceParameters(const RooArgSet& np); specify the nuisance parameters (eg. the rest of the parameters). { fNuisancePars = &np; }. void SetObservables(const RooArgSet& o); specify the observables in the dataset (needed to evaluate the test statistic). { fObservables = &o; }. void SetGlobalObservables(const RooArgSet& o); specify the conditional observables. { fGlobalObservables = &o; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). { fSize = size; }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { fSize = 1. - cl; }. void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. { fTestStat = testStatistic; }. void SetExpectedNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetAsimovNuisancePar(Bool_t i = kTRUE); { fExpectedNuisancePar = i; }. void SetGenerateBinned(bool binned = true); control to use bin data generation (=> see RooFit::AllBinned() option). { fGenerateBinned = binned; }. void SetGenerateBinnedTag(const char* binnedTag = """"); name of the tag for individual components to be generated binned (=> see RooFit::GenBinned() option). { fGenerateBinnedTag = binnedTag; }. void SetGenerateAutoBinned(Bool_t autoBinned = kTRUE); set auto binned gener",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__ToyMCSampler.html:8751,error,error,8751,root/html532/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__ToyMCSampler.html,1,['error'],['error']
Availability,"p (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTButton.html:29006,error,error,29006,doc/master/classTButton.html,https://root.cern,https://root.cern/doc/master/classTButton.html,4,['error'],['error']
Availability,"p (end of label right adjusted); ""d"" draw labels down (start of label left adjusted). In case not all bins have labels sorting will work only in the case the first n consecutive bins have all labels and sorting will be performed on those label bins.; Parameters. [in]axaxis . Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 5382 of file TH1.cxx. ◆ LoggedInconsistency(). int TH1::LoggedInconsistency ; (; const char * ; name, . const TH1 * ; h1, . const TH1 * ; h2, . bool ; useMerge = false . ); const. protected . Definition at line 883 of file TH1.cxx. ◆ Merge() [1/2]. virtual Long64_t TH1::Merge ; (; TCollection * ; list). inlinevirtual . Reimplemented in TH2Poly, TProfile2Poly, TProfile, TProfile2D, and TProfile3D.; Definition at line 345 of file TH1.h. ◆ Merge() [2/2]. Long64_t TH1::Merge ; (; TCollection * ; li, . Option_t * ; opt . ). Add all histograms in the collection to this histogram. ; This function computes the min/max for the x axis, compute a new number of bins, if necessary, add bin contents, errors and statistics. If all histograms have bin labels, bins with identical labels will be merged, no matter what their order is. If overflows are present and limits are different the function will fail. The function returns the total number of entries in the result histogram if the merge is successful, -1 otherwise.; Possible option: -NOL : the merger will ignore the labels and merge the histograms bin by bin using bin center values to match bins -NOCHECK: the histogram will not perform a check for duplicate labels in case of axes with labels. The check (enabled by default) slows down the merging; IMPORTANT remark. The axis x may have different number of bins and different limits, BUT the largest bin width must be a multiple of the smallest bin width and the upper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:189056,error,errors,189056,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"p = kTRUE). Set parser stops in case of error: . stop = true, stops on error; stop = false, continue parsing on error... . Definition at line 191 of file TXMLParser.cxx. ◆ SetValidate(). void TXMLParser::SetValidate ; (; Bool_t ; val = kTRUE). The parser will validate the xml file if val = true. ; Definition at line 76 of file TXMLParser.cxx. ◆ StopParser(). void TXMLParser::StopParser ; (; ). virtual . Stops parsing. ; Definition at line 166 of file TXMLParser.cxx. ◆ Streamer(). void TXMLParser::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TXMLParser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TXMLParser.h. Member Data Documentation. ◆ fContext. _xmlParserCtxt* TXMLParser::fContext. protected . Parse the xml file. ; Definition at line 31 of file TXMLParser.h. ◆ fParseCode. Int_t TXMLParser::fParseCode. protected . To keep track of the errorcodes. ; Definition at line 37 of file TXMLParser.h. ◆ fReplaceEntities. Bool_t TXMLParser::fReplaceEntities. protected . Replace entities. ; Definition at line 33 of file TXMLParser.h. ◆ fStopError. Bool_t TXMLParser::fStopError. protected . Stop when parse error occurs. ; Definition at line 34 of file TXMLParser.h. ◆ fValidate. Bool_t TXMLParser::fValidate. protected . To validate the parse context. ; Definition at line 32 of file TXMLParser.h. ◆ fValidateError. TString TXMLParser::fValidateError. protected . Parse error. ; Definition at line 35 of file TXMLParser.h. ◆ fValidateWarning. TString TXMLParser::fValidateWarning. protected . Parse warning. ; Definition at line 36 of file TXMLParser.h. Libraries for TXMLParser:. [legend]; The documentation for this class was generated from the following files:; io/xmlparser/inc/TXMLParser.h; io/xmlparser/src/TXMLParser.cxx. TXMLParser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:49 (GVA Time) using Doxygen 1.9.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:21958,error,errorcodes,21958,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['error'],['errorcodes']
Availability,"p = nullptr;; 5472 }; 5473 }; 5474 }; 5475 } else {; 5476 // -- We are *not* a top-level branch.; 5477 fObject = fAddress;; 5478 }; 5479 ; 5480 if (!info) {; 5481 // FIXME: We need and error message here, no streamer info, so cannot set offsets.; 5482 return;; 5483 }; 5484 ; 5485 // We do this only once because it depends only on; 5486 // the type of our object, not on its address.; 5487 if (!fInitOffsets) {; 5488 InitializeOffsets();; 5489 }; 5490 ; 5491 // We are split, recurse down to our sub-branches.; 5492 //; 5493 // FIXME: This is a tail recursion, we burn stack.; 5494 Int_t nbranches = fBranches.GetEntriesFast();; 5495 for (Int_t i = 0; i < nbranches; ++i) {; 5496 TBranch *abranch = (TBranch*) fBranches.UncheckedAt(i);; 5497 // FIXME: This is a tail recursion!; 5498 if (fBranchOffset[i] != TStreamerInfo::kMissing && !(implied && abranch->TestBit(kAddressSet))) {; 5499 abranch->SetAddressImpl(fObject + fBranchOffset[i], implied);; 5500 abranch->SetBit(kAddressSet);; 5501 if (TestBit(kDecomposedObj) != abranch->TestBit(kDecomposedObj)); 5502 abranch->SetMakeClass(TestBit(kDecomposedObj));; 5503 } else {; 5504 // When the member is missing, just leave the address alone; 5505 // (since setting explicitly to 0 would trigger error/warning; 5506 // messages).; 5507 // abranch->SetAddress(0);; 5508 abranch->SetBit(kAddressSet);; 5509 }; 5510 }; 5511}; 5512 ; 5513////////////////////////////////////////////////////////////////////////////////; 5514/// Reset the basket size for all sub-branches of this branch element.; 5515 ; 5516void TBranchElement::SetBasketSize(Int_t buffsize); 5517{; 5518 TBranch::SetBasketSize(buffsize);; 5519 Int_t nbranches = fBranches.GetEntriesFast();; 5520 for (Int_t i = 0; i < nbranches; ++i) {; 5521 TBranch* branch = (TBranch*) fBranches[i];; 5522 branch->SetBasketSize(fBasketSize);; 5523 }; 5524}; 5525 ; 5526////////////////////////////////////////////////////////////////////////////////; 5527/// Set the branch counter for this branch.; 55",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:204518,error,error,204518,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['error'],['error']
Availability,"p a maximum of fMaxEntries in memory. ; Definition at line 6415 of file TTree.cxx. ◆ LoadBaskets(). Int_t TTree::LoadBaskets ; (; Long64_t ; maxmemory = 2000000000). virtual . Read in memory all baskets from all branches up to the limit of maxmemory bytes. ; If maxmemory is non null and positive SetMaxVirtualSize is called with this value. Default for maxmemory is 2000000000 (2 Gigabytes). The function returns the total number of baskets read into memory if negative an error occurred while loading the branches. This method may be called to force branch baskets in memory when random access to branch entries is required. If random access to only a few branches is required, you should call directly TBranch::LoadBaskets. ; Reimplemented in TChain.; Definition at line 6451 of file TTree.cxx. ◆ LoadTree(). Long64_t TTree::LoadTree ; (; Long64_t ; entry). virtual . Set current entry. ; Returns -2 if entry does not exist (just as TChain::LoadTree()). Returns -6 if an error occurs in the notification callback (just as TChain::LoadTree()).; Calls fNotify->Notify() (if fNotify is not null) when starting the processing of a new tree.; NoteThis function is overloaded in TChain. ; Reimplemented in TChain, and TTreeSQL.; Definition at line 6473 of file TTree.cxx. ◆ LoadTreeFriend(). Long64_t TTree::LoadTreeFriend ; (; Long64_t ; entry, . TTree * ; masterTree . ). virtual . Load entry on behalf of our master tree, we may use an index. ; Called by LoadTree() when the masterTree looks for the entry number in a friend tree (us) corresponding to the passed entry number in the masterTree.; If we have no index, our entry number and the masterTree entry number are the same.; If we do have an index, we must find the (major, minor) value pair in masterTree to locate our corresponding entry. ; Definition at line 6557 of file TTree.cxx. ◆ MakeClass(). Int_t TTree::MakeClass ; (; const char * ; classname = nullptr, . Option_t * ; option = """" . ). virtual . Generate a skeleton analysis class for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:171358,error,error,171358,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['error'],['error']
Availability,"p on bins (including underflows/overflows); 2928 for (Int_t i = 0; i < fNcells; ++i) {; 2929 Double_t c0 = RetrieveBinContent(i);; 2930 Double_t c1 = h1->RetrieveBinContent(i);; 2931 if (c1) UpdateBinContent(i, c0 / c1);; 2932 else UpdateBinContent(i, 0);; 2933 ; 2934 if(fSumw2.fN) {; 2935 if (c1 == 0) { fSumw2.fArray[i] = 0; continue; }; 2936 Double_t c1sq = c1 * c1;; 2937 fSumw2.fArray[i] = (GetBinErrorSqUnchecked(i) * c1sq + h1->GetBinErrorSqUnchecked(i) * c0 * c0) / (c1sq * c1sq);; 2938 }; 2939 }; 2940 ResetStats();; 2941 return kTRUE;; 2942}; 2943 ; 2944////////////////////////////////////////////////////////////////////////////////; 2945/// Replace contents of this histogram by the division of h1 by h2.; 2946///; 2947/// `this = c1*h1/(c2*h2)`; 2948///; 2949/// If errors are defined (see TH1::Sumw2), errors are also recalculated; 2950/// Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; 2951/// if not already set.; 2952/// The resulting errors are calculated assuming uncorrelated histograms.; 2953/// However, if option =""B"" is specified, Binomial errors are computed.; 2954/// In this case c1 and c2 do not make real sense and they are ignored.; 2955///; 2956/// IMPORTANT NOTE: If you intend to use the errors of this histogram later; 2957/// you should call Sumw2 before making this operation.; 2958/// This is particularly important if you fit the histogram after TH1::Divide; 2959///; 2960/// Please note also that in the binomial case errors are calculated using standard; 2961/// binomial statistics, which means when b1 = b2, the error is zero.; 2962/// If you prefer to have efficiency errors not going to zero when the efficiency is 1, you must; 2963/// use the function TGraphAsymmErrors::BayesDivide, which will return an asymmetric and non-zero lower; 2964/// error for the case b1=b2.; 2965///; 2966/// The function return kFALSE if the divide operation failed; 2967 ; 2968Bool_t TH1::Divide(const TH1 *h1, const TH1 *h2, Double_t c1, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:116824,error,errors,116824,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"p on extended weighted fits that complements the paper linked before). . PrefitDataFraction(double fraction) Runs a prefit on a small dataset of size fraction*(actual data size). This can speed up fits by finding good starting values for the parameters for the actual fit. WarningPrefitting may give bad results when used in binned analysis. Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit). . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default. . PrintLevel(Int_t level) Set Minuit print level (-1 to 3, default is 1). At -1 all RooFit informational messages are suppressed as well. See RooMinimizer::PrintLevel for the meaning of the levels. . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppresses output completely, a zero value will only print the error count per p.d.f component, a positive value will print details of each error up to numErr messages per p.d.f component. . Parallelize(Int_t nWorkers) Control global parallelization settings. Arguments 1 and above enable the use of RooFit's parallel minimization backend and uses the number given as the number of workers to use in the parallelization. -1 also enables RooFit's parallel minimization backend, and sets the number of workers to the number of available processes. 0 disables this feature. In case parallelization is requested, this option implies ModularL(true) in the internal call to the NLL creation method. . ParallelGradientOptions(bool enable=true, int orderStrategy=0, int chainFactor=1) Experimental - Control gradient parallelization settings. The first argument only disables or enables gradient parallelization, this is on by default. The second argument determines the internal partial derivative calculation ordering strategy. The third ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:109795,error,error,109795,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,1,['error'],['error']
Availability,"p the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » Author: Fons Rademakers 02",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TThread.html:14396,error,error,14396,root/html532/TThread.html,https://root.cern,https://root.cern/root/html532/TThread.html,2,['error'],['error']
Availability,"p the calling thread. Int_t GetTime(ULong_t* absSec, ULong_t* absNanoSec); Static method to get the current time. Returns; the number of seconds. Int_t Lock(); Static method to lock the main thread mutex. Int_t TryLock(); Static method to try to lock the main thread mutex. Int_t UnLock(); Static method to unlock the main thread mutex. void * Function(void* ptr); Static method which is called by the system thread function and; which in turn calls the actual user function. void Ps(); Static method listing the existing threads. void ** Tsd(void* dflt, Int_t k); Static method returning a pointer to thread specific data container; of the calling thread.; k should be between 0 and kMaxUserThreadSlot for user application.; (and between kMaxUserThreadSlot and kMaxThreadSlot for ROOT libraries).; See ROOT::EThreadSlotReservation. void Printf(const char *va_(fmt), ...); Static method providing a thread safe printf. Appends a newline. void ErrorHandler(int level, const char* location, const char* fmt, va_list ap) const; Thread specific error handler function.; It calls the user set error handler in the main thread. void DoError(Int_t level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler. User has to specify the class name as; part of the location, just like for the global Info(), Warning() and; Error() functions. Int_t XARequest(const char* xact, Int_t nb, void** ar, Int_t* iret); Static method used to allow commands to be executed by the main thread. void XAction(); Static method called via the thread timer to execute in the main; thread certain commands. This to avoid sophisticated locking and; possible deadlocking. void SetComment(const char* txt = 0). TThread(const TThread& ). TThread& operator=(const TThread& ). void Delete(Option_t* option = """"); { TObject::Delete(option); }. EPriority GetPriority() const; { return fPriority; }. EState GetState() const; { return fState; }. Long_t GetId() const; { return fId; }. void ps(); { Ps(); }. » ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TThread.html:15273,error,error,15273,root/html602/TThread.html,https://root.cern,https://root.cern/root/html602/TThread.html,2,['error'],['error']
Availability,p this button belongs to; UInt_tTGFrame::fHeightframe height; Pixel_tTGButton::fHighColorhighlight color; Handle_tTGObject::fIdX11/Win32 Window identifier; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; GContext_tTGButton::fNormGCgraphics context used for drawing button; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; EButtonStateTGButton::fStatebutton state; Bool_tTGButton::fStayDowntrue if button has to stay down; UInt_tTGButton::fStylebutton style (modern or classic); UInt_tTGButton::fTHeightbutton height; UInt_tTGButton::fTWidthbutton width; TGToolTip*TGButton::fTiptool tip associated with button; void*TGButton::fUserDatapointer to user data structure; Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static const TGGC*TGButton::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static con,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGuiBldHintsButton.html:18372,down,down,18372,root/html530/TGuiBldHintsButton.html,https://root.cern,https://root.cern/root/html530/TGuiBldHintsButton.html,5,['down'],['down']
Availability,"p() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; const vector<Float_t>&EvaluateMulticlass(const TString& methodTag, Double_t aux = 0); const vector<Float_t>&EvaluateMulticlass(TMVA::MethodBase* method, Double_t aux = 0); Float_tEvaluateMulticlass(UInt_t clsNumber, const TString& methodTag, Double_t aux = 0); Double_tEvaluateMVA(TMVA::MethodBase* method, Double_t aux = 0); Double_tEvaluateMVA(const TString& methodTag, Double_t aux = 0); Double_tEvaluateMVA(const vector<Float_t>&, const TString& methodTag, Double_t aux = 0); Double_tEvaluateMVA(const vector<Double_t>&, const TString& methodTag, Double_t aux = 0); const vector<Float_t>&EvaluateRegression(const TString& methodTag, Double_t aux = 0); const vector<Float_t>&EvaluateRegression(TMVA::MethodBase* method, Double_t aux = 0); Float_tEvaluateRegression(UInt_t tgtNumber, const TString& methodTag, Double_t aux = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TMVA::MethodCuts*FindCutsMVA(const TString& methodTag); TMVA::IMethod*FindMVA(const TString& methodTag); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetMVAError() const; Double_tGetMVAErrorLower() const; Double_tGetMVAErrorUpper() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Reader.html:4489,error,error,4489,root/html528/TMVA__Reader.html,https://root.cern,https://root.cern/root/html528/TMVA__Reader.html,6,['error'],['error']
Availability,"p(); virtual~TDictAttributeMap(); voidTObject::AbstractMethod(const char* method) const; voidAddProperty(const char* key, const char* value); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetPropertyAsString(const char* key) const; Int_tGetPropertySize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; Bool_tHasKey(const char* key) const; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDictAttributeMap.html:1533,error,error,1533,root/html534/TDictAttributeMap.html,https://root.cern,https://root.cern/root/html534/TDictAttributeMap.html,1,['error'],['error']
Availability,"p(workdata->f_user + 1, ""include="", 8)) {; 8542 if (mg_fopen(workdata->conn,; 8543 workdata->f_user + 9,; 8544 MG_FOPEN_MODE_READ,; 8545 &fp)) {; 8546 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8547 (void)mg_fclose(; 8548 &fp.access); /* ignore error on read only file */; 8549 ; 8550 /* No need to continue processing files once we have a; 8551 * match, since nothing will reset it back; 8552 * to 0.; 8553 */; 8554 if (is_authorized) {; 8555 return is_authorized;; 8556 }; 8557 } else {; 8558 mg_cry_internal(workdata->conn,; 8559 ""%s: cannot open authorization file: %s"",; 8560 __func__,; 8561 workdata->buf);; 8562 }; 8563 continue;; 8564 }; 8565 /* everything is invalid for the moment (might change in the; 8566 * future) */; 8567 mg_cry_internal(workdata->conn,; 8568 ""%s: syntax error in authorization file: %s"",; 8569 __func__,; 8570 workdata->buf);; 8571 continue;; 8572 }; 8573 ; 8574 workdata->f_domain = strchr(workdata->f_user, ':');; 8575 if (workdata->f_domain == NULL) {; 8576 mg_cry_internal(workdata->conn,; 8577 ""%s: syntax error in authorization file: %s"",; 8578 __func__,; 8579 workdata->buf);; 8580 continue;; 8581 }; 8582 *(char *)(workdata->f_domain) = 0;; 8583 (workdata->f_domain)++;; 8584 ; 8585 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8586 if (workdata->f_ha1 == NULL) {; 8587 mg_cry_internal(workdata->conn,; 8588 ""%s: syntax error in authorization file: %s"",; 8589 __func__,; 8590 workdata->buf);; 8591 continue;; 8592 }; 8593 *(char *)(workdata->f_ha1) = 0;; 8594 (workdata->f_ha1)++;; 8595 ; 8596 if (!strcmp(workdata->ah.user, workdata->f_user); 8597 && !strcmp(workdata->domain, workdata->f_domain)) {; 8598 return check_password(workdata->conn->request_info.request_method,; 8599 workdata->f_ha1,; 8600 workdata->ah.uri,; 8601 workdata->ah.nonce,; 8602 workdata->ah.nc,; 8603 workdata->ah.cnonce,; 8604 workdata->ah.qop,; 8605 workdata->ah.response);; 8606 }; 8607 }; 8608 ; 8609 return is_authorized;; 8610}; 8611 ; 8612 ; 8613/* Autho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:247192,error,error,247192,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,3,['error'],['error']
Availability,"p(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will reset it back; 8553 * to 0.; 8554 */; 8555 if (is_authorized) {; 8556 return is_authorized;; 8557 }; 8558 } else {; 8559 mg_cry_internal(workdata->conn,; 8560 ""%s: cannot open authorization file: %s"",; 8561 __func__,; 8562 workdata->buf);; 8563 }; 8564 continue;; 8565 }; 8566 /* everything is invalid for the moment (might change in the; 8567 * future) */; 8568 mg_cry_internal(workdata->conn,; 8569 ""%s: syntax error in authorization file: %s"",; 8570 __func__,; 8571 workdata->buf);; 8572 continue;; 8573 }; 8574 ; 8575 workdata->f_domain = strchr(workdata->f_user, ':');; 8576 if (workdata->f_domain == NULL) {; 8577 mg_cry_internal(workdata->conn,; 8578 ""%s: syntax error in authorization file: %s"",; 8579 __func__,; 8580 workdata->buf);; 8581 continue;; 8582 }; 8583 *(char *)(workdata->f_domain) = 0;; 8584 (workdata->f_domain)++;; 8585 ; 8586 workdata->f_ha1 = strchr(workdata->f_domain, ':');; 8587 if (workdata->f_ha1 == NULL) {; 8588 mg_cry_internal(workdata->conn,; 8589 ""%s: syntax error in authorization file: %s"",; 8590 __func__,; 8591 workdata->buf);; 8592 continue;; 8593 }; 8594 *(char *)(workdata->f_ha1) = 0;; 8595 (workdata->f_ha1)++;; 8596 ; 8597 if (!strcmp(workdata->ah.user, workdata->f_user); 8598 && !strcmp(workdata->domain, workdata->f_domain)) {; 8599 return check_password(workdata->conn->request_info.request_method,; 8600 workdata->f_ha1,; 8601 workdata->ah.uri,; 8602 workdata->ah.nonce,; 8603 workdata->ah.nc,; 8604 workdata->ah.cnonce,; 8605 workdata->ah.qop,; 8606 workdata->ah.response);; 8607 }; 8608 }; 8609 ; 8610 return is_authorized;; 8611}; 8612 ; 8613 ; 8614/* Autho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:247224,error,error,247224,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetAlpha() const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoPara.html:3671,error,error,3671,root/html534/TGeoPara.html,https://root.cern,https://root.cern/root/html534/TGeoPara.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; Double_tGetDphi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t index = 0) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTorus.html:3741,error,error,3741,root/html534/TGeoTorus.html,https://root.cern,https://root.cern/root/html534/TGeoTorus.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; Double_tGetDx1() const; Double_tGetDx2() const; Double_tGetDy() const; virtual Double_tTGeoBBox::GetDY() const; Double_tGetDz() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd1.html:3491,error,error,3491,root/html534/TGeoTrd1.html,https://root.cern,https://root.cern/root/html534/TGeoTrd1.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tGetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tGetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; Double_tGetDx1() const; Double_tGetDx2() const; virtual Double_tTGeoBBox::GetDY() const; Double_tGetDy1() const; Double_tGetDy2() const; Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoTrd2.html:3532,error,error,3532,root/html534/TGeoTrd2.html,https://root.cern,https://root.cern/root/html534/TGeoTrd2.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; TGeoBoolNode*GetBoolNode() const; virtual voidGetBoundingCylinder(Double_t*) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCompositeShape.html:9367,error,error,9367,root/html534/TGeoCompositeShape.html,https://root.cern,https://root.cern/root/html534/TGeoCompositeShape.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidGetBoundingCylinder(Double_t*) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(Int_t in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHalfSpace.html:3468,error,error,3468,root/html534/TGeoHalfSpace.html,https://root.cern,https://root.cern/root/html534/TGeoHalfSpace.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoBBox::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoScaledShape.html:3360,error,error,3360,root/html534/TGeoScaledShape.html,https://root.cern,https://root.cern/root/html534/TGeoScaledShape.html,3,['error'],['error']
Availability,"p) const; virtual Double_tDistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual voidDistFromOutside_v(const Double_t* points, const Double_t* dirs, Double_t* dists, Int_t vecsize, Double_t* step) const; static Double_tTGeoShape::DistToPhiMin(const Double_t* point, const Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoBBox::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&TGeoBBox::GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShapeAssembly.html:3308,error,error,3308,root/html534/TGeoShapeAssembly.html,https://root.cern,https://root.cern/root/html534/TGeoShapeAssembly.html,3,['error'],['error']
Availability,"p, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 367 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [16/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayD objects. ; Definition at line 407 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [17/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF & ; tvEyL, . const TVectorF & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of floats in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 423 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [18/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvEx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:52884,error,errors,52884,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"p, UInt_t width, UInt_t height); Creates a bitmap (i.e. pixmap with depth 1) from the bitmap data. id - specifies which screen the pixmap is created on; bitmap - the data in bitmap format; width, height - define the dimensions of the pixmap. void DeletePixmap(Pixmap_t pmap); Explicitely deletes the pixmap resource ""pmap"". Bool_t CreatePictureFromFile(Drawable_t id, const char* filename, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in file ""filename"". The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t CreatePictureFromData(Drawable_t id, char** data, Pixmap_t& pict, Pixmap_t& pict_mask, PictureAttributes_t& attr); Creates a picture pict from data in bitmap format. The picture; attributes ""attr"" are used for input and output. Returns kTRUE in; case of success, kFALSE otherwise. If the mask ""pict_mask"" does not; exist it is set to kNone. Bool_t ReadPictureDataFromFile(const char* filename, char*** ret_data); Reads picture data from file ""filename"" and store it in ""ret_data"".; Returns kTRUE in case of success, kFALSE otherwise. void DeletePictureData(void* data); Delete picture data created by the function ReadPictureDataFromFile. void SetDashes(GContext_t gc, Int_t offset, const char* dash_list, Int_t n); Sets the dash-offset and dash-list attributes for dashed line styles; in the specified GC. There must be at least one element in the; specified dash_list. The initial and alternating elements (second,; fourth, and so on) of the dash_list are the even dashes, and the; others are the odd dashes. Each element in the ""dash_list"" array; specifies the length (in pixels) of a segment of the pattern. gc - specifies the GC (see GCValues_t structure); offset - the phase of the pattern for the dashed line-style you; want to set for the specified GC.; dash_list - the dash-list for the dashed line-st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:43765,mask,mask,43765,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"p, xpos, ypos, ww, hh, 0, 0);; 516 XFlush((Display*)fDisplay);; 517}; 518 ; 519////////////////////////////////////////////////////////////////////////////////; 520/// Draw a box.; 521///; 522/// - mode=0 hollow (kHollow); 523/// - mode=1 solid (kSolid); 524 ; 525void TGX11::DrawBox(int x1, int y1, int x2, int y2, EBoxMode mode); 526{; 527 Int_t x = TMath::Min(x1, x2);; 528 Int_t y = TMath::Min(y1, y2);; 529 Int_t w = TMath::Abs(x2 - x1);; 530 Int_t h = TMath::Abs(y2 - y1);; 531 ; 532 switch (mode) {; 533 ; 534 case kHollow:; 535 XDrawRectangle((Display*)fDisplay, gCws->fDrawing, *gGCline, x, y, w, h);; 536 break;; 537 ; 538 case kFilled:; 539 XFillRectangle((Display*)fDisplay, gCws->fDrawing, *gGCfill, x, y, w, h);; 540 break;; 541 ; 542 default:; 543 break;; 544 }; 545}; 546 ; 547////////////////////////////////////////////////////////////////////////////////; 548/// Draw a cell array.; 549//; 550/// \param [in] x1,y1 : left down corner; 551/// \param [in] x2,y2 : right up corner; 552/// \param [in] nx,ny : array size; 553/// \param [in] ic : array; 554///; 555/// Draw a cell array. The drawing is done with the pixel precision; 556/// if (X2-X1)/NX (or Y) is not a exact pixel number the position of; 557/// the top right corner may be wrong.; 558 ; 559void TGX11::DrawCellArray(int x1, int y1, int x2, int y2, int nx, int ny, int *ic); 560{; 561 int i, j, icol, ix, iy, w, h, current_icol;; 562 ; 563 current_icol = -1;; 564 w = TMath::Max((x2-x1)/(nx),1);; 565 h = TMath::Max((y1-y2)/(ny),1);; 566 ix = x1;; 567 ; 568 for (i = 0; i < nx; i++) {; 569 iy = y1-h;; 570 for (j = 0; j < ny; j++) {; 571 icol = ic[i+(nx*j)];; 572 if (icol != current_icol) {; 573 XSetForeground((Display*)fDisplay, *gGCfill, GetColor(icol).fPixel);; 574 current_icol = icol;; 575 }; 576 XFillRectangle((Display*)fDisplay, gCws->fDrawing, *gGCfill, ix, iy, w, h);; 577 iy = iy-h;; 578 }; 579 ix = ix+w;; 580 }; 581}; 582 ; 583/////////////////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:17498,down,down,17498,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['down'],['down']
Availability,"p-level volume:; //... code for geometry building; root[] gGeoManager->CloseGeometry();; root[] gGeoManager->GetMasterVolume()->Draw();; TGeoManager::GetMasterVolumeTGeoVolume * GetMasterVolume() constDefinition TGeoManager.h:511; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; Doing this ensures that the original top-level volume of the geometry is drawn, even if another volume is currently the geometry root. OK, I suppose you already did that with your simple geometry and immediately noticed a new ROOT canvas popping-up and having some more or less strange picture inside. Here are few questions that might come:; Q: ""The picture is strangely rotated; where are the coordinate axes?""; A: If drawn in a new canvas, any view has some default viewpoint, center of view and size. One can then perform mouse/keyboard actions to change them:. Mouse left-click and drag will rotate the view;; Some keys can be pressed when the view canvas is selected: J/K zoom/un-zoom, U/I move up/down, L/H move left/right. The coordinate axes display as well as changing top or side viewpoints can be activated from the **TView** context menu: right-click on the picture when no object is selected;. Q: ""Every line is black! I cannot figure out what is what...""; A: Volumes can have different colors (those known by ROOT of course). Think at using them after each volume creation: myvolume->SetLineColor(Int_t color); otherwise everything is by default black.; Q: ""The top volume of my geometry is a box but I see only its content.""; A: By default the drawn volume is not displayed just because we do not want to hide its content when changing the view to HLR or solid mode. In order to see it in the default wire frame picture one has to call TGeoManager::SetTopVisible().; Q: ""I do not see all volumes in my tree but just something inside.""; A: By default, TGeoVolume::Draw() paints the content of a given volume three levels down. You ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:107802,down,down,107802,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['down'],['down']
Availability,"p.cxx. ◆ DeleteAll(). void TMap::DeleteAll ; (; ). Remove all (key,value) pairs from the map AND delete the keys AND values when they are allocated on the heap. ; Definition at line 168 of file TMap.cxx. ◆ DeleteEntry(). Bool_t TMap::DeleteEntry ; (; TObject * ; key). Remove (key,value) pair with key from the map. ; Returns true if the key was found and removed, false otherwise. The key and value objects are deleted if map is the owner of keys and values respectively. ; Definition at line 190 of file TMap.cxx. ◆ DeleteKeys(). void TMap::DeleteKeys ; (; ). inline . Definition at line 68 of file TMap.h. ◆ DeleteValues(). void TMap::DeleteValues ; (; ). Remove all (key,value) pairs from the map AND delete the values when they are allocated on the heap. ; Definition at line 151 of file TMap.cxx. ◆ FindObject() [1/2]. TObject * TMap::FindObject ; (; const char * ; keyname); const. overridevirtual . Check if a (key,value) pair exists with keyname as name of the key. ; Returns a TPair* (need to downcast from TObject). Use Key() and Value() to get the pointers to the key and value, respectively. Returns 0 if not found. ; Reimplemented from TCollection.; Definition at line 215 of file TMap.cxx. ◆ FindObject() [2/2]. TObject * TMap::FindObject ; (; const TObject * ; key); const. overridevirtual . Check if a (key,value) pair exists with key as key. ; Returns a TPair* (need to downcast from TObject). Use Key() and Value() to get the pointers to the key and value, respectively. Returns 0 if not found. ; Reimplemented from TCollection.; Definition at line 226 of file TMap.cxx. ◆ GetObjectRef(). TObject ** TMap::GetObjectRef ; (; const TObject * ; obj); const. inlineoverridevirtual . Implements TCollection.; Definition at line 74 of file TMap.h. ◆ GetTable(). const THashTable * TMap::GetTable ; (; ); const. inline . Definition at line 75 of file TMap.h. ◆ GetValue() [1/2]. TObject * TMap::GetValue ; (; const char * ; keyname); const. Returns a pointer to the value associated with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMap.html:21058,down,downcast,21058,doc/master/classTMap.html,https://root.cern,https://root.cern/doc/master/classTMap.html,1,['down'],['downcast']
Availability,"p1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTChain::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*FindBranch(const char* name); virtual TLeaf*FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TChain::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*GetBranch(const char* name); virtual TBranchRef*TTree::GetBr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofChain.html:5052,error,error,5052,root/html532/TProofChain.html,https://root.cern,https://root.cern/root/html532/TProofChain.html,3,['error'],['error']
Availability,"p1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*FindBranch(const char* name); virtual TLeaf*FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*GetBranch(const char* name); virtual TBranchRef*TTree::GetBranchRef() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TChain.html:5203,error,error,5203,root/html532/TChain.html,https://root.cern,https://root.cern/root/html532/TChain.html,3,['error'],['error']
Availability,"p1Simple 1st degree polynomial; static TF1*fgFp1nNormalized 1st degree; static TF1*fgFp2Simple 2nd degree polynomial; static TF1*fgFp2nNormalized 2nd degree; static TF1*fgFp3Function with varying Rcpu; static TF1*fgFp3nNormalized Function with varying Rcpu; static TList*fgGraphsList of TGraphErrors created by Draw actions. private:. Bool_tfUnlinkOutfileWhether to remove empty output files. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); Constructor: check PROOF and load selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. void CloseOutFile(); Close output file. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); Draw the CPU speedup plot.; opt = 'typewhat', e.g. 'std:max:'; type = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node; what = 'max:' draw max rate; 'avg:' draw average rate; 'all:' draw max and average rate on same plot (default); dofit = 0 no fit; 1 fit with the relevant '1st degree related' function; 2 fit with the relevant '2nd degree related' function; 3 fit with varying rcpu function; n0 = for dofit == 3, number of real cores; n1 = for dofit == 3, number of total cores (real + hyperthreaded). T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:9710,error,error,9710,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,3,['error'],['error']
Availability,"p; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TDirectory*TGraph2D::fDirectory!Pointer to directory holding this 2D graph; Double_t*fEX[fNpoints] array of X errors; Double_t*fEY[fNpoints] array of Y errors; Double_t*fEZ[fNpoints] array of Z errors; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TList*TGraph2D::fFunctionsPointer to list of functions (fits and user); TH2D*TGraph2D::fHistogram!2D histogram of z values linearly interpolated on the triangles; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Double_tTGraph2D::fMarginExtra space (in %) around interpolated area for fHistogram; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; Int_tTGraph2D::fMaxIterMaximum number of iterations to find Delaunay triangles; Double_tTGraph2D::fMaximumMaximum value for plotting along z; Double_tTGraph2D::fMinimumMinimum value for plotting along z; TStringTNamed::fNameobject identifier; Int_tTGraph2D::fNpointsNumber of points in the data set; Int_tTGraph2D::fNpxNumber of bins along X in fHistogram; Int_tTGraph2D::fNpyNumber of bins along Y in fHistogram; TVirtualHistPainter*TGraph2D::fPainter!Pointer to histogram painter; Int_tTGraph2D::fSize!Real size of fX, fY and fZ; TStringTNamed::fTitleobject title; Double_t*TGraph2D::fX[fNpoints]; Double_t*TGraph2D::fY[fNpoints] Data set to be plotted; Double_t*TGraph2D::fZ[fNpoints]; Double_tTGraph2D::fZoutfHistogram bin height for points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2DErrors.html:11140,error,errors,11140,root/html534/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html534/TGraph2DErrors.html,3,['error'],['errors']
Availability,"pContainer , typename ItWeight , typename ItGradient > . std::vector< std::vector< LayerData > > TMVA::DNN::Net::prepareLayerData ; (; LayerContainer & ; layers, . Batch & ; batch, . const DropContainer & ; dropContainer, . ItWeight ; itWeightBegin, . ItWeight ; itWeightEnd, . ItGradient ; itGradientBegin, . ItGradient ; itGradientEnd, . size_t & ; totalNumWeights . ); const. Definition at line 1111 of file NeuralNet.icc. ◆ preTrain(). template<typename Minimizer > . void TMVA::DNN::Net::preTrain ; (; std::vector< double > & ; weights, . std::vector< Pattern > & ; trainPattern, . const std::vector< Pattern > & ; testPattern, . Minimizer & ; minimizer, . Settings & ; settings . ). pre-training for future use . ◆ removeLayer(). void TMVA::DNN::Net::removeLayer ; (; ). inline . remove one layer ; Definition at line 1248 of file NeuralNet.h. ◆ setErrorFunction(). void TMVA::DNN::Net::setErrorFunction ; (; ModeErrorFunction ; eErrorFunction). inline . which error function is to be used ; Definition at line 1096 of file NeuralNet.h. ◆ setInputSize(). void TMVA::DNN::Net::setInputSize ; (; size_t ; sizeInput). inline . set the input size of the DNN ; Definition at line 1092 of file NeuralNet.h. ◆ SetIpythonInteractive(). void TMVA::DNN::Net::SetIpythonInteractive ; (; IPythonInteractive * ; fI, . bool * ; fE, . UInt_t * ; M, . UInt_t * ; C . ). inline . Definition at line 1283 of file NeuralNet.h. ◆ setOutputSize(). void TMVA::DNN::Net::setOutputSize ; (; size_t ; sizeOutput). inline . set the output size of the DNN ; Definition at line 1093 of file NeuralNet.h. ◆ train(). template<typename Minimizer > . double TMVA::DNN::Net::train ; (; std::vector< double > & ; weights, . std::vector< Pattern > & ; trainPattern, . const std::vector< Pattern > & ; testPattern, . Minimizer & ; minimizer, . Settings & ; settings . ). start the training ; execute the training until convergence emerges; Parameters. weightsweight vector ; trainPatterntraining pattern ; testPatterntest pattern ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html:16096,error,error,16096,doc/master/classTMVA_1_1DNN_1_1Net.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Net.html,1,['error'],['error']
Availability,"pDist&operator=(const TUnuranEmpDist& rhs); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TUnuranEmpDist(const TUnuranEmpDist&); TUnuranEmpDist(const TH1* h1 = 0, bool useBuffer = true); TUnuranEmpDist(unsigned int n, double* x); TUnuranEmpDist(unsigned int n, double* x, double* y); TUnuranEmpDist(unsigned int n, double* x, double* y, double* z); doubleUpperBin() const. Data Members; private:. boolfBinnedflag for binned/unbinned data; vector<double>fDatapointer to the data vector (used for generation from un-binned data); unsigned intfDimdata dimensionality; doublefMaxmax values (used in the binned case); doublefMinmin values (used in the binned case). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnuranEmpDist(const TH1* h1 = 0, bool useBuffer = true); Constructor from a TH1 objects.; The buffer of the histo, if available, can be used for; the estimation of the parent distribution using smoothing. TUnuranEmpDist(unsigned int n, double* x); constructor for 1D unbinned data. TUnuranEmpDist(unsigned int n, double* x, double* y); constructor for 2D unbinned data. TUnuranEmpDist(unsigned int n, double* x, double* y, double* z); constructor for 3D unbinned data. TUnuranEmpDist(const TUnuranEmpDist& ); Implementation of copy ctor using aassignment operator. virtual ~TUnuranEmpDist(). Destructor (no operations). {}. TUnuranEmpDist * Clone() const. Clone (required by base class). { return new TUnuranEmpDist(*this); }. const std::vector<double> & Data() const. Return reference to data vector (unbinned or binned data). { return fData; }. bool IsBinned() const. Flag to control if data are binned. { return fBinned; }. double LowerBin() const. Min value of binned data; (return 0 for unbinned data). { return fMin; }. double UpperBin() const. upper value of binned data; (return 0 for unbinned data). { return fMax; }. unsigned int NDim()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TUnuranEmpDist.html:1553,avail,available,1553,root/html604/TUnuranEmpDist.html,https://root.cern,https://root.cern/root/html604/TUnuranEmpDist.html,1,['avail'],['available']
Availability,"pLinSolverDens. TQpLinSolverSparse. Function documentation; TQpLinSolverBase(); Default constructor. TQpLinSolverBase(TQpProbBase* factory, TQpDataBase* data); Constructor. TQpLinSolverBase(const TQpLinSolverBase& another); Copy constructor. void Factor(TQpDataBase* prob, TQpVar* vars); Sets up the matrix for the main linear system in ""augmented system"" form. The; actual factorization is performed by a routine specific to either the sparse; or dense case. void ComputeDiagonals(TVectorD& dd, TVectorD& omega, TVectorD& t, TVectorD& lambda, TVectorD& u, TVectorD& pi, TVectorD& v, TVectorD& gamma, TVectorD& w, TVectorD& phi); Computes the diagonal matrices in the augmented system from the current set of variables. void Solve(TQpDataBase* prob, TQpVar* vars, TQpResidual* resids, TQpVar* step); Solves the system for a given set of residuals. Assembles the right-hand side appropriate; to the matrix factored in factor, solves the system using the factorization produced there,; partitions the solution vector into step components, then recovers the step components; eliminated during the block elimination that produced the augmented system form . void SolveXYZS(TVectorD& stepx, TVectorD& stepy, TVectorD& stepz, TVectorD& steps, TVectorD& ztemp, TQpDataBase* data); Assemble right-hand side of augmented system and call SolveCompressed to solve it. void JoinRHS(TVectorD& rhs, TVectorD& rhs1, TVectorD& rhs2, TVectorD& rhs3); Assembles a single vector object from three given vectors .; rhs_out (output) final joined vector; rhs1_in (input) first part of rhs; rhs2_in (input) middle part of rhs; rhs3_in (input) last part of rhs . void SeparateVars(TVectorD& vars1, TVectorD& vars2, TVectorD& vars3, TVectorD& vars); Extracts three component vectors from a given aggregated vector.; vars_in (input) aggregated vector; x_in (output) first part of vars; y_in (output) middle part of vars; z_in (output) last part of vars. TQpLinSolverBase & operator=(const TQpLinSolverBase& source); Assignment",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQpLinSolverBase.html:8253,recover,recovers,8253,root/html602/TQpLinSolverBase.html,https://root.cern,https://root.cern/root/html602/TQpLinSolverBase.html,2,['recover'],['recovers']
Availability,"p_ph_sig2_gamma_bin_9); [#1] INFO:Fitting -- RooAbsPdf::fitTo(model2) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model2_sumData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 13500 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=7.28945 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=7.28945 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:20887,error,error,20887,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,"pace &w, const std::string &, const RooArgList &Vars, double, double);  Create the list of RooRealVar parameters which scale the height of histogram bins. ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classParamHistFunc.html:47592,error,error,47592,doc/master/classParamHistFunc.html,https://root.cern,https://root.cern/doc/master/classParamHistFunc.html,2,['error'],['error']
Availability,"paces ; rf609_xychi2fit.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: setting up a chi^2 fit to an unbinned dataset with X,Y,err(Y) values (and optionally err(X) values) . ; import ROOT; import math; ; ; # Create dataset with X and Y values; # -------------------------------------------------------------------; ; # Make weighted XY dataset with asymmetric errors stored; # The StoreError() argument is essential as it makes; # the dataset store the error in addition to the values; # of the observables. If errors on one or more observables; # are asymmetric, can store the asymmetric error; # using the StoreAsymError() argument; ; x = ROOT.RooRealVar(""x"", ""x"", -11, 11); y = ROOT.RooRealVar(""y"", ""y"", -10, 200); dxy = ROOT.RooDataSet(""dxy"", ""dxy"", {x, y}, StoreError={x, y}); ; # Fill an example dataset with X,err(X),Y,err(Y) values; for i in range(10):; x.setVal(-10 + 2 * i); x.setError((0.5 / 1.0) if (i < 5) else (1.0 / 1.0)); ; # Set Y value and error; y.setVal(x.getVal() * x.getVal() + 4 * abs(ROOT.gRandom.Gaus())); y.setError(math.sqrt(y.getVal())); ; dxy.add({x, y}); ; # Perform chi2 fit to X +/- dX and Y +/- dY values; # ---------------------------------------------------------------------------------------; ; # Make fit function; a = ROOT.RooRealVar(""a"", ""a"", 0.0, -10, 10); b = ROOT.RooRealVar(""b"", ""b"", 0.0, -100, 100); c = ROOT.RooRealVar(""c"", ""c"", 0.0, -100, 100); f = ROOT.RooPolyVar(""f"", ""f"", x, [b, a, c]); ; # Plot dataset in X-Y interpretation; frame = x.frame(Title=""Chi^2 fit of function set of (X#pmdX,Y#pmdY) values""); dxy.plotOnXY(frame, YVar=y); ; # Fit chi^2 using X and Y errors; fit1 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1); fit1.Print(); ; # Overlay fitted function; f.plotOn(frame); ; # Alternative: fit chi^2 integrating f(x) over ranges defined by X errors, rather; # than taking point at center of bin; fit2 = f.chi2FitTo(dxy, YVar=y, Save=True, PrintLevel=-1, Integrate=True); fit2.Print();",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf609__xychi2fit_8py.html:1154,error,error,1154,doc/master/rf609__xychi2fit_8py.html,https://root.cern,https://root.cern/doc/master/rf609__xychi2fit_8py.html,1,['error'],['error']
Availability,"packed; in the existing dir (opt = kUntar, default) or a remove of the existing; directory should be executed (opt = kRemoveOld), thereby triggering a full; re-build. This option if effective only for PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; If existing, the corresponding header basename(macro).h or .hh, is also; uploaded. The default is to load the macro also on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); Remove 'incpath' from the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. void HandleLibIncP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:68395,error,error,68395,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['error'],['error']
Availability,"pagate the change to a previously created histogram you can call TH1::UseCurrentStyle(). You will need to call UseCurrentStyle() on each histogram. When reading many histograms from a file and you wish to update them to the current style, you can use gROOT::ForceStyle and all histograms read after this call will be updated to use the current style. See “Graphics and the Graphical User Interface”. When a histogram is automatically created as a result of a TTree::Draw , the style of the histogram is inherited from the tree attributes and the current style is ignored. The tree attributes are the ones set in the current TStyle at the time the tree was created. You can change the existing tree to use the current style, by calling TTree::UseCurrentStyle() .; 3.8.2 Draw Options; The following draw options are supported on all histogram classes:. “AXIS”: Draw only the axis.; “HIST”: When a histogram has errors, it is visualized by default with error bars. To visualize it without errors use HIST together with the required option (e.g. “HIST SAME C”).; “SAME”: Superimpose on previous picture in the same pad.; “CYL”: Use cylindrical coordinates.; “POL”: Use polar coordinates.; “SPH”: Use spherical coordinates.; “PSR”: Use pseudo-rapidity/phi coordinates.; “LEGO”: Draw a lego plot with hidden line removal.; “LEGO1”: Draw a lego plot with hidden surface removal.; “LEGO2”: Draw a lego plot using colors to show the cell contents.; “SURF”: Draw a surface plot with hidden line removal.; “SURF1”: Draw a surface plot with hidden surface removal.; “SURF2”: Draw a surface plot using colors to show the cell contents.; “SURF3”: Same as SURF with a contour view on the top.; “SURF4”: Draw a surface plot using Gouraud shading.; “SURF5”: Same as SURF3 but only the colored contour is drawn. Used with option CYL , SPH or PSR it allows to draw colored contours on a sphere, a cylinder or in a pseudo rapidly space. In Cartesian or polar coordinates, option SURF3 is used. The following options are ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:85287,error,errors,85287,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"pal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:16490,error,error,16490,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"pansion, possible values; // FIT1_TAYLOR_ORDER_FIRST, FIT1_TAYLOR_ORDER_SECOND. double position_init[MAX_NUMBER_OF_PEAKS1]; // initial values of; // peaks positions, input parameters; double position_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values; // of fitted positions, output parameters; double position_err[MAX_NUMBER_OF_PEAKS1]; // position errors; bool fix_position[MAX_NUMBER_OF_PEAKS1]; // logical vector which allows to fix; // appropriate positions (not fit). However they; // are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks; // amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of; // fitted amplitudes, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS1]; // amplitude errors; bool fix_amp[MAX_NUMBER_OF_PEAKS1]i; // logical vector, which allows to fix; // appropriate amplitudes (not fit). However they; // are present in the estimated functional; double area[MAX_NUMBER_OF_PEAKS1]; // calculated areas of peaks; double area_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak areas. double sigma_init // sigma parameter, see peak shape function; double sigma_calc;; double sigma_err;; bool fix_sigma;; double t_init // t parameter, , see peak shape function; double t_calc;; double t_err;; bool fix_t;; double b_init // b parameter, , see peak shape function; double b_calc;; double b_err;; bool fix_b;; double s_init; // s parameter, , see peak shape function; double s_calc;; double s_err;; bool fix_s;; double a0_init; // backgroud is estimated as a0+a1*x+a2*x*x; double a0_calc;; double a0_err;; bool fix_a0;; double a1_init;; double a1_calc;; double a1_err;; bool fix_a1;; double a2_init;; double a2_calc;; double a2_err;; bool fix_a2;; };; As an example we present simple 1-dimensional synthetic spectrum with 5 peaks. The fit obtained using above given awmi fitting function is given in Figure 5.1. The chi-square achieved in this fit was 0.76873. The input value of the fit (positi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:40384,error,errors,40384,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['error'],['errors']
Availability,"par NB: In the calling function the argument name must be set large enough. ;  ; virtual void GetParameters (TVectorD &vpar);  Returns parameter values. ;  ; Double_t GetParError (Int_t ipar) const override;  Returns the error of parameter #ipar ;  ; const char * GetParName (Int_t ipar) const override;  Returns name of parameter #ipar ;  ; virtual Double_t GetParSignificance (Int_t ipar);  Returns the significance of parameter #ipar ;  ; virtual Double_t GetParTValue (Int_t ipar);  Returns the t-value for parameter #ipar ;  ; Int_t GetStats (Double_t &, Double_t &, Double_t &, Int_t &, Int_t &) const override;  ; Double_t GetSumLog (Int_t) override;  ; virtual Double_t GetY2 () const;  ; TClass * IsA () const override;  ; Bool_t IsFixed (Int_t ipar) const override;  ; virtual Int_t Merge (TCollection *list);  Merge objects in list. ;  ; TLinearFitter & operator= (const TLinearFitter &tlf);  Assignment operator. ;  ; void PrintResults (Int_t level, Double_t amin=0) const override;  Level = 3 (to be consistent with minuit) prints parameters and parameter errors. ;  ; void ReleaseParameter (Int_t ipar) override;  Releases parameter #ipar. ;  ; virtual void SetBasisFunctions (TObjArray *functions);  set the basis functions in case the fitting function is not set directly The TLinearFitter will manage and delete the functions contained in the list ;  ; virtual void SetDim (Int_t n);  set the number of dimensions ;  ; void SetFitMethod (const char *) override;  ; virtual void SetFormula (const char *formula);  Additive parts should be separated by ""++"". ;  ; virtual void SetFormula (TFormula *function);  Set the fitting function. ;  ; Int_t SetParameter (Int_t, const char *, Double_t, Double_t, Double_t, Double_t) override;  ; virtual void StoreData (Bool_t store);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Bool_t UpdateMatrix ();  Update the design matrix after t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:13147,error,errors,13147,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['error'],['errors']
Availability,"par); ROOT::Minuit2::MinuitParameterMinuitParameter(unsigned int num, const string& name, double val); ROOT::Minuit2::MinuitParameterMinuitParameter(unsigned int num, const string& name, double val, double err); ROOT::Minuit2::MinuitParameterMinuitParameter(unsigned int num, const string& name, double val, double err, double min, double max); const char*Name() const; unsigned intNumber() const; ROOT::Minuit2::MinuitParameter&operator=(const ROOT::Minuit2::MinuitParameter& par); voidRelease(); voidRemoveLimits(); voidSetError(double err); voidSetLimits(double low, double up); voidSetLowerLimit(double low); voidSetUpperLimit(double up); voidSetValue(double val); doubleUpperLimit() const; doubleValue() const. Data Members; private:. boolfConst; doublefError; boolfFix; boolfLoLimValid; doublefLoLimit; stringfName; unsigned intfNum; boolfUpLimValid; doublefUpLimit; doublefValue. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MinuitParameter(); default constructor standard with value/error = 0. {}. MinuitParameter(unsigned int num, const string& name, double val); constructor for constant Parameter. {}. MinuitParameter(unsigned int num, const string& name, double val, double err); constructor for standard Parameter. {}. MinuitParameter(unsigned int num, const string& name, double val, double err, double min, double max); constructor for limited Parameter. ~MinuitParameter(); {}. MinuitParameter(const ROOT::Minuit2::MinuitParameter& par); {}. MinuitParameter& operator=(const ROOT::Minuit2::MinuitParameter& par). unsigned int Number() const; access methods. {return fNum;}. const std::string & GetName() const; new API returning a string. { return fName; }. const char * Name() const; return const char * for mantaining backward compatibility. {return fName.c_str();}. double Value() const; {return fValue;}. double Error() const; {return fError;}. void SetValue(double val); interaction. {fValue = val;}. void SetError(double err); {fErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MinuitParameter.html:2225,error,error,2225,root/html530/ROOT__Minuit2__MinuitParameter.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MinuitParameter.html,2,['error'],['error']
Availability,"param path: the URL of the path to check returns: kTRUE if the path is local, kFALSE otherwise ; Reimplemented from TSystem.; Definition at line 318 of file TNetXNGSystem.cxx. ◆ Locate(). Int_t TNetXNGSystem::Locate ; (; const char * ; path, . TString & ; endurl . ). virtual . Get the endpoint URL of a file. ; param path: the entry-point URL of the file (in) param endurl: the endpoint URL of the file (out) returns: 0 in case of success and 1 if the file could not be stat'ed. ; Definition at line 331 of file TNetXNGSystem.cxx. ◆ MakeDirectory(). Int_t TNetXNGSystem::MakeDirectory ; (; const char * ; dir). overridevirtual . Create a directory. ; param dir: the directory name returns: 0 on success, -1 otherwise ; Reimplemented from TSystem.; Definition at line 129 of file TNetXNGSystem.cxx. ◆ OpenDirectory(). void * TNetXNGSystem::OpenDirectory ; (; const char * ; dir). overridevirtual . Open a directory. ; param dir: the name of the directory to open returns: a non-zero pointer (with no special purpose) in case of success, 0 in case of error ; Reimplemented from TSystem.; Definition at line 114 of file TNetXNGSystem.cxx. ◆ Stage() [1/2]. Int_t TNetXNGSystem::Stage ; (; const char * ; path, . UChar_t ; priority . ). virtual . Issue a stage request for a single file. ; param path: the path of the file to stage param opt: defines 'option' and 'priority' for 'Prepare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 401 of file TNetXNGSystem.cxx. ◆ Stage() [2/2]. Int_t TNetXNGSystem::Stage ; (; TCollection * ; files, . UChar_t ; priority . ). virtual . Issue stage requests for multiple files. ; param pathlist: list of paths of files to stage param opt: defines 'option' and 'priority' for 'Prepare': the format is opt = ""option=o priority=p"" returns: 0 for success, -1 for error ; Definition at line 416 of file TNetXNGSystem.cxx. ◆ Streamer(). void TNetXNGSystem::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNetXNGSystem.html:38029,error,error,38029,doc/master/classTNetXNGSystem.html,https://root.cern,https://root.cern/doc/master/classTNetXNGSystem.html,1,['error'],['error']
Availability,"parameter errors (return const pointer). { return (fErrors.empty()) ? 0 : &fErrors.front(); }. const std::vector<double> & Parameters() const; parameter values (return std::vector). { return fParams; }. const double * GetParams() const; parameter values (return const pointer). { return &fParams.front(); }. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Parameter(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index; (NOTE: this due to conflict with TObject::Error cannot used in derived class which; inherits from TObject. Use instead ParError (or Errors()[i] ). double ParError(unsigned int i) const; parameter error by index. std::string ParName(unsigned int i) const; name of the parameter. void SetMinosError(unsigned int i, double elow, double eup); set the Minos errors for parameter i (called by the Fitter class when running Minos). double LowerError(unsigned int i) const; lower Minos error. If Minos has not run for parameter i return the parabolic error. double UpperError(unsigned int i) const; upper Minos error. If Minos has not run for parameter i return the parabolic error. double GlobalCC(unsigned int i) const; parameter global correlation coefficient. double CovMatrix(unsigned int i, unsigned int j) const; retrieve covariance matrix element. double Correlation(unsigned int i, unsigned int j) const; retrieve correlation elements. void GetCovarianceMatrix(TMatrixTSym<double>& mat) const; fill covariance matrix elements using a generic matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetCorrelationMatrix(TMatrixTSym<double>& mat) const; fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetConfidenceIntervals(unsigned int n, unsigned int stride1, u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:8152,error,error,8152,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,1,['error'],['error']
Availability,"parameter uncertainties for weighted fits.; 3946/// ""P"" | Uses Pearson chi-square method. Uses expected errors instead of the observed one (default case). The expected error is instead estimated from the square-root of the bin function value.; 3947/// ""MULTI"" | Uses Loglikelihood method based on multi-nomial distribution. In this case the function must be normalized and one fits only the function shape.; 3948/// ""W"" | Fit using the chi-square method and ignoring the bin uncertainties and skip empty bins.; 3949/// ""WW"" | Fit using the chi-square method and ignoring the bin uncertainties and include the empty bins.; 3950/// ""I"" | Uses the integral of function in the bin instead of the default bin center value.; 3951/// ""F"" | Uses the default minimizer (e.g. Minuit) when fitting a linear function (e.g. polN) instead of the linear fitter.; 3952/// ""U"" | Uses a user specified objective function (e.g. user providedlikelihood function) defined using `TVirtualFitter::SetFCN`; 3953/// ""E"" | Performs a better parameter errors estimation using the Minos technique for all fit parameters.; 3954/// ""M"" | Uses the IMPROVE algorithm (available only in TMinuit). This algorithm attempts improve the found local minimum by searching for a better one.; 3955/// ""S"" | The full result of the fit is returned in the `TFitResultPtr`. This is needed to get the covariance matrix of the fit. See `TFitResult` and the base class `ROOT::Math::FitResult`.; 3956/// ""Q"" | Quiet mode (minimum printing); 3957/// ""V"" | Verbose mode (default is between Q and V); 3958/// ""+"" | Adds this new fitted function to the list of fitted functions. By default, the previous function is deleted and only the last one is kept.; 3959/// ""N"" | Does not store the graphics function, does not draw the histogram with the function after fitting.; 3960/// ""0"" | Does not draw the histogram and the fitted function after fitting, but in contrast to option ""N"", it stores the fitted function in the histogram list of functions.; 3961",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:157542,error,errors,157542,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"parameter value by ordinal index (needed by MINUIT). Double_t GetPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void ClearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void SetPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void BackProp(const ROOT::Fit::FitResult& results); Transfer MINUIT fit results back into RooFit objects. Bool_t SetLogFile(const char* inLogfile); Change the file name for logging of a RooMinimizer of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. void ApplyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. Bool_t SetPdfParamVal(const Int_t& index, const Double_t& value) const; RooRealVar* par = (RooRealVar*)_floatParamList->at(index);. void updateFloatVec(). double DoEval(const double* x) const. unsigned int NDim() const; { return _nDim; }. RooArgList* GetFloatParamList(); { return _floatParamList; }. RooArgList* GetConstParamList(); { return _constParamList; }. RooArgList* GetInitFloatParamList(); { return _initFloatParamList; }. RooArgList* GetInitConstParamList(); { return _initConstParamList; }. void SetEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void SetPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. std::ofstream* GetLogFile(); { return _logfile; }. void SetVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. Double_t& GetMaxFCN(); { return _maxFCN; }. Int_t GetNumInvalidNLL(); { return _numBadNLL; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMinimizerFcn.html:3857,error,errors,3857,root/html602/RooMinimizerFcn.html,https://root.cern,https://root.cern/root/html602/RooMinimizerFcn.html,2,['error'],['errors']
Availability,"parameters ;  ; file  ConfidenceIntervals.C;   Illustrates TVirtualFitter::GetConfidenceIntervals This method computes confidence intervals for the fitted function ;  ; file  ErrorIntegral.C;   Estimate the error in the integral of a fitted function taking into account the errors in the parameters resulting from the fit. ;  ; file  exampleFit3D.C;   example of fitting a 3D function Typical multidimensional parametric regression where the predictor depends on 3 variables ;  ; file  fit1.C;   Simple fitting example (1-d histogram with an interpreted function) ;  ; file  fit2.C;   Fitting a 2-D histogram This tutorial illustrates : ;  ; file  fit2a.C;   Fitting a 2-D histogram (a variant) This tutorial illustrates : ;  ; file  fit2d.C;   Example illustrating how to fit a 2-d histogram of type y=f(x) ;  ; file  fit2dHist.C;   Example to fit two histograms at the same time via the Fitter class. ;  ; file  fitCircle.C;   Generate points distributed with some errors around a circle Fit a circle through the points and draw To run the script, do, eg ;  ; file  fitcont.C;   Example illustrating how to draw the n-sigma contour of a Minuit fit. ;  ; file  fitConvolution.C;   Tutorial for convolution of two functions ;  ; file  fitConvolution.py;   Tutorial for convolution of two functions ;  ; file  fitExclude.C;   Illustrates how to fit excluding points in a given range. ;  ; file  fithist.C;   Example of fit where the model is histogram + function ;  ; file  fitLinear.C;   Example of fitting with a linear function, using TLinearFitter This example is for a TGraphErrors, but it can also be used when fitting a histogram, a TGraph2D or a TMultiGraph ;  ; file  fitLinear2.C;   Fit a 5d hyperplane by n points, using the linear fitter directly ;  ; file  fitLinearRobust.C;   This tutorial shows how the least trimmed squares regression, included in the TLinearFitter class, can be used for fitting in cases when the data contains outliers. ;  ; file  fitMultiGraph.C;   fitting a parab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__fit.html:1469,error,errors,1469,doc/master/group__tutorial__fit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__fit.html,1,['error'],['errors']
Availability,"parameters for DNN layout)*; ; note that in case of only dense layer the input layout could be omitted but it is required when defining more; complex architectures; ; - **layer layout** string defining the layer architecture. The syntax is; - layer type (e.g. DENSE, CONV, RNN); - layer parameters (e.g. number of units); - activation function (e.g TANH, RELU,...); ; *the different layers are separated by the ``"",""`` *; ; #### 2. Define Training Strategy; ; We define here the training strategy parameters for the DNN. The parameters are separated by the ``"",""`` separator.; One can then concatenate different training strategy with different parameters. The training strategy are separated by; the ``""|""`` separator.; ; - Optimizer; - Learning rate; - Momentum (valid for SGD and RMSPROP); - Regularization and Weight Decay; - Dropout; - Max number of epochs; - Convergence steps. if the test error will not decrease after that value the training will stop; - Batch size (This value must be the same specified in the input layout); - Test Repetitions (the interval when the test error will be computed); ; ; #### 3. Define general DNN options; ; We define the general DNN options concatenating in the final string the previously defined layout and training strategy.; Note we use the ``"":""`` separator to separate the different higher level options, as in the other TMVA methods.; In addition to input layout, batch layout and training strategy we add now:; ; - Type of Loss function (e.g. CROSSENTROPY); - Weight Initizalization (e.g XAVIER, XAVIERUNIFORM, NORMAL ); - Variable Transformation; - Type of Architecture (e.g. CPU, GPU, Standard); ; We can then book the DL method using the built option string; ; ***/; ; if (useDL) {; ; bool useDLGPU = false;; #ifdef R__HAS_TMVAGPU; useDLGPU = true;; #endif; ; // Define DNN layout; TString inputLayoutString = ""InputLayout=1|1|7"";; TString batchLayoutString= ""BatchLayout=1|128|7"";; TString layoutString (""Layout=DENSE|64|TANH,DENSE|64|TANH,DENSE|6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:64784,error,error,64784,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,2,['error'],['error']
Availability,"parameters of interest for the alternative; 	hypothesis are taken at the time of the construction.; 	If empty, it treats all free parameters as nuisance parameters. 	The value of the parameters of interest for the null hypotheses; 	are given at each call of Evaluate(data,nullPOI). ~RatioOfProfiledLikelihoodsTestStat(void). Double_t ProfiledLikelihood(RooAbsData& data, RooArgSet& poi, RooAbsPdf& pdf); returns -logL(poi, conditional MLE of nuisance params); it does not subtract off the global MLE; because nuisance parameters of null and alternate may not; be the same. Double_t Evaluate(RooAbsData& data, RooArgSet& nullParamsOfInterest); evaluate the ratio of profile likelihood. void EnableDetailedOutput(bool e = true). void SetAlwaysReuseNLL(Bool_t flag). void SetReuseNLL(Bool_t flag). void SetMinimizer(const char* minimizer). void SetStrategy(Int_t strategy). void SetTolerance(Double_t tol). void SetPrintLevel(Int_t printLevel). void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditional observables when computing the NLL. const RooArgSet* GetDetailedOutput(void); Returns detailed output. The value returned by this function is updated after each call to Evaluate().; The returned RooArgSet contains the following for the alternative and null hypotheses:; <ul>; <li> the minimum nll, fitstatus and convergence quality for each fit </li>; <li> for each fit and for each non-constant parameter, the value, error and pull of the parameter are stored </li>; </ul>. const TString GetVarName() const. void SetSubtractMLE(bool subtract); const bool PValueIsRightTail(void) { return false; } // overwrites default. {fSubtractMLE = subtract;}. » Last changed: root/roostats:$Id$ » Last generated: 2015-09-08 17:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html:4462,error,error,4462,root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,https://root.cern,https://root.cern/root/html534/RooStats__RatioOfProfiledLikelihoodsTestStat.html,1,['error'],['error']
Availability,"parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented from TH1.; Definition at line 81 of file TProfile3D.h. ◆ SetBinsLength(). void TProfile3D::SetBinsLength ; (; Int_t ; n = -1). overridevirtual . Set total number of bins including under/overflow. ; Reallocate bin contents array ; Reimplemented from TH3D.; Definition at line 1318 of file TProfile3D.cxx. ◆ SetBuffer(). void TProfile3D::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; opt = """" . ). overridevirtual . Set the buffer size in units of 8 bytes (double). ; Reimplemented from TH1.; Definition at line 1327 of file TProfile3D.cxx. ◆ SetErrorOption(). void TProfile3D::SetErrorOption ; (; Option_t * ; option = """"). virtual . Set option to compute profile3D errors. ; The computation of the bin errors is based on the parameter option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (T), i.e. the standard error of the bin contents. Note that if TProfile3D::Approximate() is called, an approximation is used when the spread in T is 0 and the number of bin entries is > 0; 's' The bin errors are the standard deviations of the T bin values Note that if TProfile3D::Approximate() is called, an approximation is used when the spread in T is 0 and the number of bin entries is > 0; 'i' Errors are as in default case (standard errors of the bin contents) The only difference is for the case when the spread in T is zero. In this case for N > 0 the error is 1./SQRT(12.*N); 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0. W is the sum in the bin of the weights of the profile. This option is for combining measurements t +/- dt, and the profile is filled with values t and weights w = 1/dt**2; See TProfile::BuildOptions for explanation of all options . Definition at line 1365 of file TProfile3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:103069,error,errors,103069,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,3,['error'],"['error', 'errors']"
Availability,"params.printLatex(Columns=2); ; # Print two parameter lists side by side (name values initvalues); params.printLatex(Sibling=initParams); ; # Print two parameter lists side by side (name values initvalues|name; # values initvalues); params.printLatex(Sibling=initParams, Columns=2); ; # Write LaTex table to file; params.printLatex(Sibling=initParams, OutputFile=""rf407_latextables.tex""); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; \begin{tabular}{lc}; $\verb+a0+ $ & $ 0.5\pm 0.2$\\; $\verb+a1+ $ & $ 0.3\pm 0.1$\\; $\verb+alpha+ $ & $ -1.00$\\; $\verb+bkgfrac+ $ & $ 0.46\pm 0.03$\\; $\verb+mean+ $ & $ 5$\\; $\verb+sig1frac+ $ & $ 0.79\pm 0.05$\\; $\verb+sigma1+ $ & $ 0.5$\\; $\verb+sigma2+ $ & $ 1$\\; \end{tabular}; \begin{tabular}{lc|lc}; $\verb+a0+ $ & $ 0.5\pm 0.2$ & $\verb+mean+ $ & $ 5$\\; $\verb+a1+ $ & $ 0.3\pm 0.1$ & $\verb+sig1frac+ $ & $ 0.79\pm 0.05$\\; $\verb+alpha+ $ & $ -1.00$ & $\verb+sigma1+ $ & $ 0.5$\\; $\verb+bkgfrac+ $ & $ 0.46\pm 0.03$ & $\verb+sigma2+ $ & $ 1$\\; \end{tabular}; \begin{tabular}{lcc}; $\verb+a0+ $ & $ 0.5\pm 0.2$ & $ 0.5$\\; $\verb+a1+ $ & $ 0.3\pm 0.1$ & $ 0$\\; $\verb+alpha+ $ & $ -1.00$ & $-1.00$\\; $\verb+bkgfrac+ $ & $ 0.46\pm 0.03$ & $ ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf407__latextables_8py.html:3590,error,error,3590,doc/master/rf407__latextables_8py.html,https://root.cern,https://root.cern/doc/master/rf407__latextables_8py.html,1,['error'],['error']
Availability,"pare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; virtual ROOT::THnBaseBinIter*CreateIter(Bool_t respectAxisRange) const; static THnSparse*CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16); static THnSparse*CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; Long64_tTHnBase::Fill(const Double_t* x, Double_t w = 1.); Long64_tTHnBase::Fill(const char** name, Double_t w = 1.); virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TFitResultPtrTHnBase::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """"); TAxis*THnBase::GetAxis(Int_t dim) const; virtual Long64_tGetBin(const Int_t* idx) const; virtual Long64_tGetBin(const Double_t* x) const; virtual Long64_tGetBin(const char** name) const; virtual Long64_tGetBin(const Int_t* idx, Bool_t allocate = kTRUE); virtual Long64_tGetBin(const Double_t* x, Bool_t allocate = kTRUE); virtual Long64_tGetBin(co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:6659,error,error,6659,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,2,['error'],['error']
Availability,"pare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*Data() const; TMVA::DataSetInfo&DataInfo() const; virtual voidDeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tDoMulticlass() const; Bool_tDoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeGetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tGetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*GetEvent() const; const TMVA::Event*GetEvent(const TMVA::Event* ev) const; const TMVA::Event*GetEvent(Long64_t ievt) const; const TMVA::Event*GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const; const vector<TMVA::Event*>&GetEventCollection(TMVA::Types::ETreeType type); virtual const char*TObject::GetIconName() const; const TString&GetInputLabel(Int_t i) const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:3636,error,error,3636,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,4,['error'],['error']
Availability,"pare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTProofMgr::Cp(const char*, const char* = 0, const char* = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTProofMgr::DetachSession(Int_t, Option_t* = """"); virtual voidTProofMgr::DetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTProofMgr::Find(const char* = ""~/"", const char* = 0, const char* = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTProofMgr::GetFile(const char*, const char*, const char* = 0); virtual const char*TObject::GetIconName() const; static TList*TProofMgr::GetListOfManagers(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TProofDesc*TProofMgr::GetProofDesc(Int_t id); virtual TP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofMgrLite.html:2015,error,error,2015,root/html528/TProofMgrLite.html,https://root.cern,https://root.cern/root/html528/TProofMgrLite.html,3,['error'],['error']
Availability,"pare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tTProofMgr::Cp(const char*, const char* = 0, const char* = 0); static TProofMgr*TProofMgr::Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); virtual TProof*CreateSession(const char* = 0, const char* = 0, Int_t = -1); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTProofMgr::DetachSession(Int_t, Option_t* = """"); virtual voidTProofMgr::DetachSession(TProof*, Option_t* = """"); virtual voidTProofMgr::DiscardSession(TProof* p); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTProofMgr::Find(const char* = ""~/"", const char* = 0, const char* = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTProofMgr::GetFile(const char*, const char*, const char* = 0); virtual const char*TObject::GetIconName() const; static TList*TProofMgr::GetListOfManagers(); virtual const char*TProofMgr::GetMssUrl(Bool_t = kFALSE); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMgrLite.html:2039,error,error,2039,root/html534/TProofMgrLite.html,https://root.cern,https://root.cern/root/html534/TProofMgrLite.html,3,['error'],['error']
Availability,"parent directory on file; TUrlfServerServer url; Long64_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TAS3File(const char* url, Option_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TAS3File.html:22707,alive,alive,22707,root/html532/TAS3File.html,https://root.cern,https://root.cern/root/html532/TAS3File.html,1,['alive'],['alive']
Availability,"parent directory on file; TUrlfServerServer url; Long64_tTWebFile::fSizefile size; TSocket*TWebFile::fSocketsocket for HTTP/1.1 (stays alive between calls); Double_tTFile::fSum2BufferSum of squares of buffer sizes of objects written so far; Double_tTFile::fSumBufferSum of buffer sizes of objects written so far; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Char_tTFile::fUnitsNumber of bytes for file pointers; TUrlTFile::fUrl!URL of file; TUrlTWebFile::fUrlOrgsave original url in case of temp redirection; Int_tTFile::fVersionFile format version; Bool_tTDirectoryFile::fWritabletrue if directory is writable; Int_tTFile::fWrittenNumber of objects written so far; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory; static TList*TFile::fgAsyncOpenRequestsList of handles for pending open requests; static Long64_tTFile::fgBytesReadNumber of bytes read by all TFile objects; static Long64_tTFile::fgBytesWriteNumber of bytes written by all TFile objects; static TStringTFile::fgCacheFileDirDirectory where to locally stage files; static Bool_tTFile::fgCacheFileDisconnectedIndicates, we trust in the files in the cache dir without stat on the cached file; static Bool_tTFile::fgCacheFileForceIndicates, to force all READ to CACHEREAD; static Long64_tTFile::fgFileCounterCounter for all opened files; static Bool_tTFile::fgOnlyStagedBefore the file is opened, it is checked, that the file is staged, if not, the open fails; static UInt_tTFile::fgOpenTimeoutTimeout for open operations in ms - 0 corresponds to blocking i/o; static TUrlTWebFile::fgProxyglobally set proxy URL; static Int_tTFile::fgReadCallsNumber of bytes read from all TFile objects; static Bool_tTFile::fgReadInfoif true (default) ReadStreamerInfo is called when opening a file; static Int_tTFile::fgReadaheadSizeReadahead buffer size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGSFile(const char* url, Option_t*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGSFile.html:22678,alive,alive,22678,root/html532/TGSFile.html,https://root.cern,https://root.cern/root/html532/TGSFile.html,1,['alive'],['alive']
Availability,"parent). ; Definition at line 259 of file TGLSAViewer.cxx. ◆ ~TGLSAViewer(). TGLSAViewer::~TGLSAViewer ; (; ). override . Destroy standalone viewer object. ; Definition at line 304 of file TGLSAViewer.cxx. Member Function Documentation. ◆ Class(). static TClass * TGLSAViewer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLSAViewer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLSAViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 132 of file TGLSAViewer.h. ◆ Close(). void TGLSAViewer::Close ; (; ). Close the viewer - destructed. ; Definition at line 510 of file TGLSAViewer.cxx. ◆ CreateFrames(). void TGLSAViewer::CreateFrames ; (; ). private . Internal frames creation. ; Definition at line 440 of file TGLSAViewer.cxx. ◆ CreateGLWidget(). void TGLSAViewer::CreateGLWidget ; (; ). overridevirtual . Create a GLwidget, it is an error if it is already created. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 334 of file TGLSAViewer.cxx. ◆ CreateMenus(). void TGLSAViewer::CreateMenus ; (; ). private . File/Camera/Help menus. ; Definition at line 375 of file TGLSAViewer.cxx. ◆ DeclFileName(). static const char * TGLSAViewer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 132 of file TGLSAViewer.h. ◆ DeleteMenuBar(). void TGLSAViewer::DeleteMenuBar ; (; ). Delete the menu bar. ; Definition at line 519 of file TGLSAViewer.cxx. ◆ DestroyGLWidget(). void TGLSAViewer::DestroyGLWidget ; (; ). overridevirtual . Destroy the GLwidget, it is an error if it does not exist. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 357 of file TGLSAViewer.cxx. ◆ DisableCloseMenuEntries(). void TGLSAViewer::DisableCloseMenuEntries ; (; ). Deactivate menu entries for closing the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:42926,error,error,42926,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,1,['error'],['error']
Availability,"parse the contents, instead of a file. ;  ; Int_t ParseFile (const char *filename) override;  It creates the parse context of the xml file, where the xml file name is filename. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TXMLParser;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:3416,error,error,3416,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,1,['error'],['error']
Availability,"parser, a DOM style tree interface and a SAX style event based interface. TXMLParser is parent class of TSAXParser and TDOMParser, which are a SAX interface and DOM interface of libxml. ; Definition at line 24 of file TXMLParser.h. Public Member Functions;  TXMLParser ();  Initializes parser variables. ;  ;  ~TXMLParser () override;  Cleanup. ;  ; Int_t GetParseCode () const;  ; const char * GetParseCodeMessage (Int_t parseCode) const;  Returns the parse code message. ;  ; Bool_t GetReplaceEntities () const;  ; Bool_t GetStopOnError () const;  ; Bool_t GetValidate () const;  ; const char * GetValidateError () const;  ; const char * GetValidateWarning () const;  ; TClass * IsA () const override;  ; virtual Int_t ParseBuffer (const char *contents, Int_t len)=0;  ; virtual Int_t ParseFile (const char *filename)=0;  ; void SetReplaceEntities (Bool_t val=kTRUE);  The parser will replace/expand entities. ;  ; void SetStopOnError (Bool_t stop=kTRUE);  Set parser stops in case of error: ;  ; void SetValidate (Bool_t val=kTRUE);  The parser will validate the xml file if val = true. ;  ; virtual void StopParser ();  Stops parsing. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLParser.html:1538,error,error,1538,doc/master/classTXMLParser.html,https://root.cern,https://root.cern/doc/master/classTXMLParser.html,1,['error'],['error']
Availability,"partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives som",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:7208,reliab,reliability,7208,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,"['error', 'reliab']","['error', 'reliability']"
Availability,"path = 0); Int_tTProof::Retrieve(const char* queryref, const char* path = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTProof::SendDataSetStatus(const char* msg, UInt_t n, UInt_t tot, Bool_t st); Bool_tTProof::SendingLogToWindow() const; voidTProof::SendLogToWindow(Bool_t mode); virtual voidSetActive(); virtual voidSetActive(Bool_t active); virtual voidTProof::SetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTProof::SetDataPoolUrl(const char* url); virtual Int_tTProof::SetDataSetTreeName(const char* dataset, const char* treename); voidTProof::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTProof::SetInputDataFile(const char* datafile); voidTProof::SetLogLevel(Int_t level, UInt_t mask = TProofDebug::kAll); voidTProof::SetManager(TProofMgr* mgr); voidTProof::SetMaxDrawQueries(Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProof::SetParallel(Int_t nodes = 9999, Bool_t random = kFALSE); voidTProof::SetParameter(const char* par, const char* value); voidTProof::SetParameter(const char* par, Int_t value); voidTProof::SetParameter(const char* par, Long_t value); voidTProof::SetParameter(const char* par, Long64_t value); voidTProof::SetParameter(const char* par, Double_t value); voidTProof::SetPrintProgress(PrintProgress_t pp); voidTProof::SetProgressDialog(Bool_t on = kTRUE); voidTProof::SetQueryMode(TProof::EQueryMode mode); voidTProof::SetRealTimeLog(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTProof::ShowCache(Bool_t all = kFALSE); voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:15587,mask,mask,15587,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,2,['mask'],['mask']
Availability,"path, FileStat_t& buf); Get info about a file. Info is returned in the form of a FileStat_t; structure (see TSystem.h).; The function returns 0 in case of success and 1 if the file could; not be stat'ed. int GetFsInfo(const char* path, Long_t* id, Long_t* bsize, Long_t* blocks, Long_t* bfree); Get info about a file system: fs type, block size, number of blocks,; number of free blocks. const char * TempDirectory() const; Return a user configured or systemwide directory to create; temporary files in. FILE * TempFileName(TString& base, const char* dir = 0); Create a secure temporary file by appending a unique; 6 letter string to base. The file will be created in; a standard (system) directory or in the directory; provided in dir. The full filename is returned in base; and a filepointer is returned for safely writing to the file; (this avoids certain security problems). Returns 0 in case; of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set the a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file in a search path. Return value points to TString for; compatibility with Which(const char *, const char *, EAccessMode).; Returns 0 in case file is not found. char * Which(const char* search, const char* file, EAccessMode mode = kFileExists); Find location of file in a search path. User must delete returned string.; Returns 0 in case file is not found. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:28999,error,error,28999,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,6,['error'],['error']
Availability,"pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. Bool_t ExpandPathName(TString& patbuf); Expand a pathname getting rid of special shell characters like ~.$, etc.; For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; environment variables in a pathname. If compatibility is not an issue; you can use on Unix directly $XXX. Returns kFALSE in case of success; or kTRUE in case of error. int Chmod(const char* file, UInt_t mode); Set the file permission bits. Returns -1 in case or error, 0 otherwise. int Umask(Int_t mask); Set the process file creation mode mask. int Utime(const char* file, Long_t modtime, Long_t actime); Set a files modification and access times. If actime = 0 it will be; set to the modtime. Returns 0 on success and -1 in case of error. const char * FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); Find location of file ""wfil"" in a search path.; The search path is specified as a : separated list of directories.; Return value is pointing to wfile for compatibility with; Which(const char*,const char*,EAccessMode) version. Int_t GetUid(const char* user = 0); Returns the user's id. If user = 0, returns current user's id. Int_t GetEffectiveUid(); Returns the effective user id. The effective id corresponds to the; set id bit on the file being executed. Int_t GetGid(const char* group = 0); Returns the group's id. If group = 0, returns current user's group. Int_t GetEffectiveGid(); Returns the effective group id. The effective group id corresponds; to the set id bit on the file being executed. UserGroup_t * GetUserInfo(Int_t uid); Returns all user info in the UserGroup_t structure. The returned; structure must be deleted by the user. In case of error 0 is returned. UserGroup_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:27673,error,error,27673,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,6,['error'],['error']
Availability,"pdf; Int_t*_protoOrderLUT with traversal order of prototype data; RooArgSet_protoVarsPrototype observables; const RooDataSet*_prototypePointer to prototype dataset; RooArgSet*_theEventPointer to observable event being generated; Bool_t_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsGenContext(); Destructor. void attach(const RooArgSet& params); Interface to attach given parameters to object in this context. RooDataSet* createDataSet(const char* name, const char* title, const RooArgSet& obs); Create an empty dataset to hold the events that will be generated. RooDataSet * generate(Double_t nEvents = 0, Bool_t skipInit = kFALSE, Bool_t extendedMode = kFALSE); Generate the specified number of events with nEvents>0 and; and return a dataset containing the generated events. With nEvents<=0,; generate the number of events in the prototype dataset, if available,; or else the expected number of events, if non-zero.; If extendedMode = true generate according to a Poisson(nEvents); The returned dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsGenContext.html:8935,avail,available,8935,root/html534/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html534/RooAbsGenContext.html,1,['avail'],['available']
Availability,"pe = MinimizerType::fSteepest,; 905 double _learningRate = 1e-5, double _momentum = 0.3, int _repetitions = 3,; 906 bool _useMultithreading = true); 907 : Settings (name, _convergenceSteps, _batchSize, _testRepetitions, _factorWeightDecay,; 908 _regularization, _eMinimizerType, _learningRate, _momentum, _repetitions, _useMultithreading); 909 , m_ams (); 910 , m_sumOfSigWeights (0); 911 , m_sumOfBkgWeights (0); 912 , m_scaleToNumEvents (_scaleToNumEvents); 913 , m_cutValue (10.0); 914 , m_pResultPatternContainer(nullptr); 915 , m_fileNameResult (); 916 , m_fileNameNetConfig (); 917 {; 918 }; 919 ; 920 /*! \brief d'tor; 921 *; 922 *; 923 */; 924 virtual ~ClassificationSettings (); 925 {; 926 }; 927 ; 928 void startTrainCycle ();; 929 void endTrainCycle (double /*error*/);; 930 void testIteration () { if (fMonitoring) fMonitoring->ProcessEvents (); }; 931 ; 932 ; 933 /* void createHistograms () */; 934 /* { */; 935 /* std::cout << ""is hist ROC existing?"" << std::endl; */; 936 /* if (m_histROC) */; 937 /* { */; 938 /* std::cout << ""--> yes"" << std::endl; */; 939 /* fMonitoring->ProcessEvents (); */; 940 /* return; */; 941 /* } */; 942 ; 943 /* std::cout << ""create histograms"" << std::endl; */; 944 /* TCanvas* canvas = fMonitoring->GetCanvas (); */; 945 /* if (canvas) */; 946 /* { */; 947 /* std::cout << ""canvas divide"" << std::endl; */; 948 /* canvas->cd (); */; 949 /* canvas->Divide (2,2); */; 950 /* } */; 951 /* if (!m_histROC) */; 952 /* { */; 953 /* m_histROC = new TH2F (""ROC"",""ROC"", 1000, 0, 1.0, 1000, 0, 1.0); m_histROC->SetDirectory (0); */; 954 /* m_histROC->SetLineColor (kBlue); */; 955 /* } */; 956 /* if (!m_histSignificance) */; 957 /* { */; 958 /* m_histSignificance = new TH2F (""Significance"", ""Significance"", 1000, 0,1.0, 5, 0.0, 2.0); */; 959 /* m_histSignificance->SetDirectory (0); */; 960 /* m_histSignificance->SetBit (TH1::kCanRebin); */; 961 /* m_histROC->SetLineColor (kRed); */; 962 /* } */; 963 /* if (!m_histError) */; 964 /* { */; 965 /* m_histError =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:34381,error,error,34381,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['error'],['error']
Availability,"pe etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t weight = 1.); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar = 0, Double_t weight = 1.); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points to be added. Double_t sum(Bool_t correctForBinSize, Bool_t inverseCorr = kFALSE) const; Return the sum of the weights of all hist bins. If correctForBinSize is specified, the sum of weights; is multiplied by the N-dimensio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataHist.html:31577,error,errors,31577,root/html602/RooDataHist.html,https://root.cern,https://root.cern/root/html602/RooDataHist.html,2,['error'],['errors']
Availability,"pe etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar = 0, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points to be added. Double_t sum(Bool_t correctForBinSize) const; Return the sum of the weights of all hist bins. If correctForBinSize is specified, the sum of weights; is multiplied by the N-dimensional bin volume,; making the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataHist.html:28824,error,errors,28824,root/html528/RooDataHist.html,https://root.cern,https://root.cern/root/html528/RooDataHist.html,3,['error'],['errors']
Availability,"pe etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t weight, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar = 0, Double_t weight = 1.0); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points to be added. Double_t sum(Bool_t correctForBinSize, Bool_t inverseCorr = kFALSE) const; Return the sum of the weights of all hist bins. If correctForBinSize is specified, the sum of weights; is multiplied by the N-dimens",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataHist.html:30365,error,errors,30365,root/html534/RooDataHist.html,https://root.cern,https://root.cern/root/html534/RooDataHist.html,1,['error'],['errors']
Availability,"pe) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  . Protected Attributes; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Static Protected Attributes; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static Pixel_t fgDefaultFrameBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGFrame.html:23473,mask,mask,23473,doc/master/classTGFrame.html,https://root.cern,https://root.cern/doc/master/classTGFrame.html,1,['mask'],['mask']
Availability,"pe). Constructor with a string giving name of algorithm. ; Definition at line 65 of file GSLMinimizer.cxx. ◆ ~GSLMinimizer(). ROOT::Math::GSLMinimizer::~GSLMinimizer ; (; ). override . Destructor. ; Definition at line 92 of file GSLMinimizer.cxx. Member Function Documentation. ◆ CovMatrix(). double ROOT::Math::GSLMinimizer::CovMatrix ; (; unsigned int ; , . unsigned int ;  . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 127 of file GSLMinimizer.h. ◆ Edm(). double ROOT::Math::GSLMinimizer::Edm ; (; ); const. inlineoverridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 107 of file GSLMinimizer.h. ◆ Errors(). const double * ROOT::Math::GSLMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 121 of file GSLMinimizer.h. ◆ MinGradient(). const double * ROOT::Math::GSLMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 287 of file GSLMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 125 of file GSLMinimizer.cxx. ◆ NCalls(). unsigned int ROOT::Math::GSLMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 111 of file GSLMinimizer.cxx. ◆ ProvidesError(). bool ROOT::Math::GSLMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 118 of file GSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html:13097,error,errors,13097,doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer.html,1,['error'],['errors']
Availability,"pe* shape, Int_t testNo, Int_t nsamples, Option_t* option); Double_tCheckVoxels(TGeoVolume* vol, TGeoVoxelFinder* voxels, Double_t* xyz, Int_t npoints); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoChecker.html:4388,error,error,4388,root/html530/TGeoChecker.html,https://root.cern,https://root.cern/root/html530/TGeoChecker.html,5,['error'],['error']
Availability,"peType of fitter to use, e.g. ""Minuit"" ""Minuit2"". Passing an empty string will select the default minimizer type of the RooMinimizer, as returned by ROOT::Math::MinimizerOptions::DefaultMinimizerType(). . AttentionThis overrides the default fitter of this RooMinimizer. ; Parameters. [in]algFit algorithm to use. (Optional) . Definition at line 281 of file RooMinimizer.cxx. ◆ minimizerType(). std::string const & RooMinimizer::minimizerType ; (; ); const. inline . Definition at line 175 of file RooMinimizer.h. ◆ minos() [1/2]. int RooMinimizer::minos ; (; ). Execute MINOS. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 376 of file RooMinimizer.cxx. ◆ minos() [2/2]. int RooMinimizer::minos ; (; const RooArgSet & ; minosParamList). Execute MINOS for given list of parameters. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 393 of file RooMinimizer.cxx. ◆ optimizeConst(). void RooMinimizer::optimizeConst ; (; int ; flag). If flag is true, perform constant term optimization on function being minimized. ; Definition at line 489 of file RooMinimizer.cxx. ◆ profileStart(). void RooMinimizer::profileStart ; (; ). private . Start profiling timer. ; Definition at line 698 of file RooMinimizer.cxx. ◆ profileStop(). void RooMinimizer::profileStop ; (; ). private . Stop profiling timer and report results of last session. ; Definition at line 710 of file RooMinimizer.cxx. ◆ save(). RooFit::OwningPtr< RooFitResult > RooMinimizer::save ; (; const char * ; userName = nullptr, . const char * ; userTitle = nullptr . ). Save and return a RooFitResult snapshot of current minimizer status. ; This snapshot contains the values of all constant parameters, the value of all floating parameters at RooMinimizer construction and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:24722,error,errors,24722,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['error'],['errors']
Availability,"peak mark is active ;  ; Float_t fPeakVal;  maximum peak mark ;  ; TString fPicName;  name of picture used as background ;  ; Float_t fScaleMax;  needle min and max scale ;  ; Float_t fScaleMin;  ; FontStruct_t fTextFS;  ; Float_t fThreshold [3];  glowing thresholds ;  ; Bool_t fThresholdActive;  kTRUE if glowing thresholds are active ;  ; EGlowColor fThresholdColor [3];  glowing threshold colors ;  ; Float_t fValue;  needle angle and corresponding value ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Protected Attributes inherited from TGWidget; TString fCommand;  command to be executed ;  ; const TGWindow * fMsgWindow;  window which handles widget events ;  ; Int_t fWidgetFlags;  widget status flags (OR of EWidgetStatus) ;  ; Int_t fWidgetId;  the widget id (used",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:28482,mask,mask,28482,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['mask'],['mask']
Availability,"pecialized in RField.cxx; 449 ; 450template <typename T>; 451std::unique_ptr<T, typename RFieldBase::RCreateObjectDeleter<T>::deleter> RFieldBase::CreateObject() const; 452{; 453 if (GetTypeName() != RField<T>::TypeName()) {; 454 throw RException(; 455 R__FAIL(""type mismatch for field "" + GetFieldName() + "": "" + GetTypeName() + "" vs. "" + RField<T>::TypeName()));; 456 }; 457 return std::unique_ptr<T>(static_cast<T *>(CreateObjectRawPtr()));; 458}; 459 ; 460template <>; 461struct RFieldBase::RCreateObjectDeleter<void> {; 462 using deleter = RCreateObjectDeleter<void>;; 463 void operator()(void *);; 464};; 465 ; 466template <>; 467std::unique_ptr<void, typename RFieldBase::RCreateObjectDeleter<void>::deleter>; 468ROOT::Experimental::RFieldBase::CreateObject<void>() const;; 469 ; 470} // namespace Experimental; 471} // namespace ROOT; 472 ; 473#endif; fClassCppyy::TCppType_t fClassDefinition DeclareConverters.h:272; RError.hxx; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; RFieldBase.hxx; RFieldFundamental.hxx; RFieldROOT::Experimental::RField< T > RFieldDefinition RFieldProvider.hxx:33; RFieldProxiedCollection.hxx; RFieldRecord.hxx; RFieldSTLMisc.hxx; RFieldSequenceContainer.hxx; RNTupleSerialize.hxx; RNTupleUtil.hxx; RSpan.hxx; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; childOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t childDefinition TGWin32VirtualXProxy.cxx:180; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; typeOption_t Option_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RField_8hxx_source.html:19646,error,error,19646,doc/master/RField_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RField_8hxx_source.html,1,['error'],['error']
Availability,"pecific ml method given the method type in enum TMVA::Types::EMVA. ;  ;  Public Member Functions inherited from TMVA::Envelope;  ~Envelope ();  Default destructor. ;  ; virtual void BookMethod (TString methodname, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; virtual void BookMethod (Types::EMVA method, TString methodtitle, TString options="""");  Method to book the machine learning method to perform the algorithm. ;  ; DataLoader * GetDataLoader ();  Method to get the pointer to TMVA::DataLoader object. ;  ; TFile * GetFile ();  Method to get the pointer to TFile object. ;  ; std::vector< OptionMap > & GetMethods ();  Method get the Booked methods in a option map object. ;  ; Bool_t HasMethod (TString methodname, TString methodtitle);  function to check methods booked ;  ; Bool_t IsModelPersistence ();  Method to see if the algorithm model is saved in xml or serialized files. ;  ; Bool_t IsSilentFile ();  Method to see if a file is available to save results. ;  ; Bool_t IsVerbose ();  Method to see if the algorithm should print extra information. ;  ; virtual void ParseOptions ();  Method to parse the internal option string. ;  ; void SetDataLoader (DataLoader *dalaloader);  Method to set the pointer to TMVA::DataLoader object. ;  ; void SetFile (TFile *file);  Method to set the pointer to TFile object, with a writable file. ;  ; void SetModelPersistence (Bool_t status=kTRUE);  Method enable model persistence, then algorithms model is saved in xml or serialized files. ;  ; void SetVerbose (Bool_t status);  Method enable print extra information in the algorithms. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Configurable;  Configurable (const TString &theOption="""");  constructor ;  ; virtual ~Configurable ();  default destructor ;  ; void AddOptionsXMLTo (void *parent) const;  write options to XML file ;  ; template<class T > ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html:2822,avail,available,2822,doc/master/classTMVA_1_1Experimental_1_1Classification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Experimental_1_1Classification.html,1,['avail'],['available']
Availability,"pecified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); Remove 'incpath' from the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. void HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Handle lib, inc search paths modification request. TList * GetListOfPackages(); Get from the master the list of names of the packages available. TList * GetListOfEnabledPackages(); Get from the master the list of names of the packages enabled. void PrintProgress(Long64_t total, Long64_t processed, Float_t procTime = -1., Long64_t bytesread = -1); Print a progress bar on stderr. Used in batch mode. void Progress(Long64_t total, Long64_t processed); Get query progress information. Connect a slot to this signal; to track progress. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Get query progress information. Connect a slot to this signal; to track progress. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Get query progress information. Connect a slot to this signal; to track progress. void Feedback(TList* objs); Get list of feedback objects. Connect a slot to this sign",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:80226,avail,available,80226,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['avail'],['available']
Availability,"pecified colormap. ;  ; virtual Bool_t PointInRegion (Int_t x, Int_t y, Region_t reg);  Returns kTRUE if the point [x, y] is contained in the region reg. ;  ; virtual Region_t PolygonRegion (Point_t *points, Int_t np, Bool_t winding);  Returns a region for the polygon defined by the points array. ;  ; virtual void PutImage (Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h);  Combines an image with a rectangle of the specified drawable. ;  ; virtual void PutPixel (Drawable_t id, Int_t x, Int_t y, ULong_t pixel);  Overwrites the pixel in the image with the specified pixel value. ;  ; virtual void QueryColor (Colormap_t cmap, ColorStruct_t &color);  Returns the current RGB value for the pixel in the ""color"" structure. ;  ; virtual void QueryPointer (Int_t &ix, Int_t &iy);  Returns the pointer position. ;  ; virtual void QueryPointer (Window_t id, Window_t &rootw, Window_t &childw, Int_t &root_x, Int_t &root_y, Int_t &win_x, Int_t &win_y, UInt_t &mask);  Returns the root window the pointer is logically on and the pointer coordinates relative to the root window's origin. ;  ; virtual void RaiseWindow (Window_t id);  Raises the specified window to the top of the stack so that no sibling window obscures it. ;  ; virtual Pixmap_t ReadGIF (Int_t x0, Int_t y0, const char *file, Window_t id=0);  If id is NULL - loads the specified gif file at position [x0,y0] in the current window. ;  ; virtual Bool_t ReadPictureDataFromFile (const char *filename, char ***ret_data);  Reads picture data from file ""filename"" and store it in ""ret_data"". ;  ; virtual void RemoveWindow (ULongptr_t qwid);  Removes the created by Qt window ""qwid"". ;  ; virtual void ReparentWindow (Window_t id, Window_t pid, Int_t x, Int_t y);  If the specified window is mapped, ReparentWindow automatically performs an UnmapWindow request on it, removes it from its current position in the hierarchy, and inserts it as the child of the specified parent. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:21736,mask,mask,21736,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,"pecifies and returns the values actually used in the cmap . Reimplemented from TVirtualX.; Definition at line 2917 of file TGCocoa.mm. ◆ Bell(). void TGCocoa::Bell ; (; Int_t ; percent). overridevirtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented from TVirtualX.; Definition at line 4264 of file TGCocoa.mm. ◆ ChangeActivePointerGrab(). void TGCocoa::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). overridevirtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented from TVirtualX.; Definition at line 2699 of file TGCocoa.mm. ◆ ChangeGC(). void TGCocoa::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). overridevirtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented from TVirtualX.; Definition at line 3012 of file TGCocoa.mm. ◆ ChangeProperties(). void TGCocoa::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented from TVirtualX.; Definition at line 3859 of file TGCocoa.mm. ◆ ChangeProperty(). void TGCocoa::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). overridevirtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Parameters. [in]idthe window whose property you want to change ; [in]propertyspecifies the property name ; [in]typethe type of the property; the X server does not interpre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:54712,mask,mask,54712,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['mask'],['mask']
Availability,"pectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Definition at line 20 of file TSpectrumFit.h. ◆ fNumberIterations. Int_t TSpectrumFit::fNumberIterations. protected . number of iterations in fitting procedure, input parameter, it should be > 0 ; Definition at line 21 of file TSpectrumFit.h. ◆ fPositionCalc. Double_t* TSpectrumFit::fPositionCalc. protected . [fNPeaks] array of calculated values of fitted positions, output parameters ; Definition at line 31 of file TSpectrumFit.h. ◆ fPositionErr. Double_t* TSpectrumFit::fPositionErr. protected . [fNPeaks] array of position errors ; Definition at line 32 of file TSpectrumFit.h. ◆ fPositionInit. Double_t* TSpectrumFit::fPositionInit. protected . [fNPeaks] array of initial values of peaks positions, input parameters ; Definition at line 30 of file TSpectrumFit.h. ◆ fPower. Int_t TSpectrumFit::fPower. protected . possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrumFit.h. ◆ fSCalc. Double_t TSpectrumFit::fSCalc. protected . calculated value of s parameter ; Definition at line 48 of file TSpectrumFit.h. ◆ fSErr. Double_t TSpectrumFit::fSErr. protected . error value of s parameter ; Definition at line 49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:55322,error,errors,55322,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['error'],['errors']
Availability,"ped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return the print level ;  ; void PrintState (std::ostream &os=std::cout);  print iteration state ;  ; template<class FuncIterator > ; bool SetFunctionList (FuncIterator begin, FuncIterator end);  ; void SetPrintLevel (int level);  ; void SetType (const char *name);  set the type using a string ;  ; void SetType (EDerivType type);  set the type of algorithm using derivatives ;  ; void SetType (EType type);  set the type for an algorithm without derivatives ;  ; bool Solve (const double *x, int maxIter=0, double absTol=0, double relTol=0);  Find the root starting from the point X; Use the number of iteration and tolerance if given otherwise use default parameter values which can be defined by the static method SetDefault... ;  ; int Status () const;  Return the status of last root finding. ;  ; const double * X () const;  return the root X values solving the system ;  . Static Public Member Functions; static void SetDefaultMaxIterations (int maxiter);  set maximum number of iterations ;  ; static void SetDefaultTolerance (double abstol, double reltol=0);  set tolerance (absolute and relative) relative tolerance is only use to verify the convergence do it is a minor parameter ;  . Protected Member Functions; void ClearFunctions ();  ; std::pair< bool, int > GetTy",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:4605,toler,tolerance,4605,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['toler'],['tolerance']
Availability,"pen in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", GetName());; 2063 return 0;; 2064 }; 2065 ; 2066 fEND = Long64_t(size);; 2067 ; 2068 if (fWritable && !fFree) fFree = new TList;; 2069 ; 2070 TKey *key;; 2071 Int_t nrecov = 0;; 2072 nwheader = 1024;; 2073 Int_t nread = nwheader;; 2074 ; 207",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:73028,recover,recovered,73028,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovered']
Availability,"pend graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:19133,error,error,19133,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['error'],['error']
Availability,"pend graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:25976,error,error,25976,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['error'],['error']
Availability,"pend the parent name; 1751 TString hname = name;; 1752 if (hname == ""_px"") hname = TString::Format(""%s%s"", GetName(), name);; 1753 TString title = TString::Format(""%s ( Projection X )"",GetTitle());; 1754 ; 1755 // when projecting in Z outer axis are Y and Z (order is important. It is defined in the DoProject1D function); 1756 return DoProject1D(hname, title, iymin, iymax, izmin, izmax, &fXaxis, &fYaxis, &fZaxis, option);; 1757}; 1758 ; 1759 ; 1760////////////////////////////////////////////////////////////////////////////////; 1761/// Project a 3-D histogram into a 1-D histogram along Y.; 1762///; 1763/// The projection is always of the type TH1D.; 1764/// The projection is made from the cells along the Y axis; 1765/// ranging from ixmin to ixmax and izmin to izmax included.; 1766/// By default, underflow and overflow are included in both the X and Z axis.; 1767/// By setting ixmin=1 and ixmax=NbinsX the underflow and/or overflow in X will be excluded; 1768/// By setting izmin=1 and izmax=NbinsZ the underflow and/or overflow in Z will be excluded; 1769///; 1770/// if option ""e"" is specified, the errors are computed.; 1771/// if option ""d"" is specified, the projection is drawn in the current pad.; 1772/// if option ""o"" original axis range of the target axes will be; 1773/// kept, but only bins inside the selected range will be filled.; 1774///; 1775/// NOTE that if a TH1D named ""name"" exists in the current directory or pad,; 1776/// the histogram is reset and filled again with the projected contents of the TH3.; 1777///; 1778/// implemented using Project3D; 1779 ; 1780TH1D *TH3::ProjectionY(const char *name, Int_t ixmin, Int_t ixmax,; 1781 Int_t izmin, Int_t izmax, Option_t *option) const; 1782{; 1783 TString hname = name;; 1784 if (hname == ""_py"") hname = TString::Format(""%s%s"", GetName(), name);; 1785 TString title = TString::Format(""%s ( Projection Y )"",GetTitle());; 1786 ; 1787 // when projecting in Z outer axis are X and Y (order is important. It is defined in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:70011,error,errors,70011,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['errors']
Availability,"pendPad(Option_t* option = """"); const char*AsString(void* buf) const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TDictAttributeMap*TDictionary::GetAttributeMap() const; static TDataType*GetDataType(EDataType type); static TDictionary*TDictionary::GetDictionary(const char* name); static TDictionary*TDictionary::GetDictionary(const type_info& typeinfo); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetFullTypeName() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; Int_tGetType() const; static E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataType.html:1787,error,error,1787,root/html534/TDataType.html,https://root.cern,https://root.cern/root/html534/TDataType.html,3,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TGeoHMatrix*GetFirstMatrix() const; TGeoVolume*GetFirstVolume() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tGetOverlap() const; TPolyMarker3D*GetPolyMarker",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoOverlap.html:1862,error,error,1862,root/html528/TGeoOverlap.html,https://root.cern,https://root.cern/root/html528/TGeoOverlap.html,6,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Bool_tCanDrawItem(const char* path); Bool_tCanExploreItem(const char* path); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual void*FindInHierarchy(const char* path, TClass** cl = 0, TDataMember** member = 0, Int_t* chld = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TObject*FindTObjectInHierarchy(const char* path); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; ULong_tGetItemHash(const char* itemname); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ULong_tGetStreamerInfoHash(); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootSniffer.html:1566,error,error,1566,root/html602/TRootSniffer.html,https://root.cern,https://root.cern/root/html602/TRootSniffer.html,1,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static Int_tCancelPoint(); static TClass*Class(); virtual const char*TObject::ClassName() const; static Int_tCleanUp(); static Int_tCleanUpPop(Int_t exe = 0); static Int_tCleanUpPush(void* free, void* arg = 0); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); static Int_tDelete(TThread*& th); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Int_tExists(); static Int_tExit(void* ret = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Long_tGetId() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TThread::EPriorityGetPriority() const; TThread::EStateGetState() const; static TThread*GetThread(Long_t id); static TThread*GetThread(const char* name); static Int_tGetTime(ULong_t* absSec, UL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TThread.html:1885,error,error,1885,root/html528/TThread.html,https://root.cern,https://root.cern/root/html528/TThread.html,6,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Double_tFindNextBoundary(Double_t* point, Double_t* dir, Int_t& indnext); virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternX.html:2637,error,error,2637,root/html532/TGeoPatternX.html,https://root.cern,https://root.cern/root/html532/TGeoPatternX.html,3,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffset(Int_t idiv); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternCylPhi.html:2642,error,error,2642,root/html532/TGeoPatternCylPhi.html,https://root.cern,https://root.cern/root/html532/TGeoPatternCylPhi.html,9,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTGeoPatternFinder::ClearThreadData() const; virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual TGeoMatrix*CreateMatrix() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tTGeoPatternFinder::GetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternHoneycomb.html:2502,error,error,2502,root/html532/TGeoPatternHoneycomb.html,https://root.cern,https://root.cern/root/html532/TGeoPatternHoneycomb.html,1,['error'],['error']
Availability,"pendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckAll(Int_t); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidCreate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteBinarySearchTree(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); TH1D*Draw1Dim(TMVA::ECellValue cell_value, Int_t nbin, TMVA::PDEFoamKernelBase* kernel = __null); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillBinarySearchTree(const TMVA::Event* ev); virtual voidFillFoamCells(const TMVA::Event* ev, Float_t wt); virtual voidFinalize(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual vector<Float_t>GetCellValue(const map<Int_t,Float_t>& xvec, TMVA::ECellValue cv); virtual Float_tGetCellValue(const TMVA::PDEFoamCell* cell, TMVA::ECellValue cv); virtual Float_tGetCellValue(const vector<Float_t>& xvec, TMVA::ECellValue cv, TMVA::PDEFoamKernelBase*); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetFoamName() const; virtual const char*TObject::GetIconName() const; UInt_tGetMaxDepth() const; UInt_tGetNActiveCells() const; virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoam.html:2815,error,error,2815,root/html602/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoam.html,2,['error'],['error']
Availability,"pended) and if not found; a direct try of libname will be made (in case it contained an; absolute path).; If check is true it will only check if libname exists and is; readable.; Returns 0 on successful loading, -1 in case libname does not; exist or in case of error and -2 in case of version mismatch. Bool_t IsRootFile(const char* filename) const; Return true if the file is local and is (likely) to be a ROOT file. void ls(Option_t* option = """") const; To list all objects of the application.; Loop on all objects created in the ROOT linked lists.; Objects may be files and windows or any other object directly; attached to the ROOT linked list. Int_t LoadMacro(const char* filename, Int_t* error = 0, Bool_t check = kFALSE); Load a macro in the interpreter's memory. Equivalent to the command line; command "".L filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]].; The possible error codes are defined by TInterpreter::EErrorCode.; If check is true it will only check if filename exists and is; readable.; Returns 0 on successful loading and -1 in case filename does not; exist or in case of error. Long_t Macro(const char* filename, Int_t* error = 0, Bool_t padUpdate = kTRUE); Execute a macro in the interpreter. Equivalent to the command line; command "".x filename"". If the filename has ""+"" or ""++"" appended; the macro will be compiled by ACLiC. The filename must have the format:; [path/]macro.C[+|++[g|O]][(args)].; The possible error codes are defined by TInterpreter::EErrorCode.; If padUpdate is true (default) update the current pad.; Returns the macro return value. void Message(Int_t id, const TObject* obj); Process message id called by obj. Long_t ProcessLine(const char* line, Int_t* error = 0); Process interpreter command via TApplication::ProcessLine().; On Win32 the line will be processed asynchronously by sending; it to the CINT interpreter thread. For explicit synchronous pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TROOT.html:32038,error,error,32038,root/html602/TROOT.html,https://root.cern,https://root.cern/root/html602/TROOT.html,2,['error'],['error']
Availability,"perError(unsigned int i) const; doubleValue(unsigned int i) const. protected:. ROOT::Fit::FitResult::IModelFunction*ModelFunction(); voidSetModelFunction(ROOT::Fit::FitResult::IModelFunction* func). Data Members; protected:. vector<unsigned int>fBoundParamslist of limited parameters; doublefChi2fit chi2 value (different than fval in case of chi2 fits); vector<double>fCovMatrixcovariance matrix (size is npar*(npar+1)/2) where npar is total parameters; intfCovStatuscovariance matrix status code; doublefEdmexpected distance from mimimum; vector<double>fErrorserrors ; ROOT::Fit::FitResult::IModelFunction*fFitFunc! model function resulting from the fit. It is given by Fitter but it is managed by FitResult; vector<unsigned int>fFixedParamslist of fixed parameters; vector<double>fGlobalCCglobal Correlation coefficient; stringfMinimTypestring indicating type of minimizer; map<unsigned int,std::pair<double,double> >fMinosErrorsmap contains the two Minos errors; unsigned intfNCallsnumber of function calls; unsigned intfNFreenumber of fit free parameters (total parameters are in size of parameter vector) ; unsigned intfNdfnumber of degree of freedom; boolfNormalizedflag for indicating is errors are normalized; vector<std::string>fParNamesparameter names (only with FCN only fits, when fFitFunc=0); vector<double>fParamsparameter values. Size is total number of parameters; intfStatusminimizer status code; doublefValminimum function value; boolfValidflag for indicating valid fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitResult(). Default constructor for an empty (non valid) fit result. FitResult(ROOT::Math::Minimizer& min, const ROOT::Fit::FitConfig& fconfig, const ROOT::Fit::FitResult::IModelFunction* f, bool isValid, unsigned int sizeOfData = 0, bool binFit = true, const ROOT::Math::IMultiGenFunction* chi2func = 0, unsigned int ncalls = 0). Construct from a Minimizer instance after fitting; Run also Minos if requested from the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:4003,error,errors,4003,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,2,['error'],['errors']
Availability,"perError(unsigned int i) const; doubleValue(unsigned int i) const. protected:. ROOT::Fit::FitResult::IModelFunction*ModelFunction(); voidSetModelFunction(ROOT::Fit::FitResult::IModelFunction* func). Data Members; protected:. vector<unsigned int>fBoundParamslist of limited parameters; doublefChi2fit chi2 value (different than fval in case of chi2 fits); vector<double>fCovMatrixcovariance matrix (size is npar*(npar+1)/2) where npar is total parameters; intfCovStatuscovariance matrix status code; doublefEdmexpected distance from mimimum; vector<double>fErrorserrors ; ROOT::Fit::FitResult::IModelFunction*fFitFunc! model function resulting from the fit. It is given by Fitter but it is managed by FitResult; vector<unsigned int>fFixedParamslist of fixed parameters; vector<double>fGlobalCCglobal Correlation coefficient; stringfMinimTypestring indicating type of minimizer; map<unsigned int,std::pair<double,double> >fMinosErrorsmap contains the two Minos errors; unsigned intfNCallsnumber of function calls; unsigned intfNFreenumber of fit free parameters (total parameters are in size of parameter vector) ; unsigned intfNdfnumber of degree of freedom; boolfNormalizedflag for indicating is errors are normalized; vector<std::string>fParNamesparameter names (only with FCN only fits, when fFitFunc=0); vector<double>fParamsparameter values. Size is total number of parameters; intfStatusminimizer status code; doublefValminimum function value; boolfValidflag for indicating valid fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FitResult(). Default constructor for an empty (non valid) fit result. FitResult(const FitConfig & fconfig). Constructor from a fit-config for a dummy fit; (e.g. when only one fcn evaluation is done). FitResult(ROOT::Math::Minimizer& min, const ROOT::Fit::FitConfig& fconfig, const ROOT::Fit::FitResult::IModelFunction* f, bool isValid, unsigned int sizeOfData = 0, bool binFit = true, const ROOT::Math::IMultiGenFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Fit__FitResult.html:4120,error,errors,4120,root/html530/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html530/ROOT__Fit__FitResult.html,4,['error'],['errors']
Availability,"perLimitMCSModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tRooAbsMCStudyModule::doInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual RooDataSet*finalizeRun(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__UpperLimitMCSModule.html:1538,error,error,1538,root/html526/RooStats__UpperLimitMCSModule.html,https://root.cern,https://root.cern/root/html526/RooStats__UpperLimitMCSModule.html,7,['error'],['error']
Availability,"pera instead.; [legend]; Constructor & Destructor Documentation. ◆ TJSONStackObj(). TJSONStackObj::TJSONStackObj ; (; ). default . keep actual class version, workaround for ReadVersion in custom streamer . ◆ ~TJSONStackObj(). TJSONStackObj::~TJSONStackObj ; (; ). inlineoverride . Definition at line 362 of file TBufferJSON.cxx. Member Function Documentation. ◆ AssignStl(). Bool_t TJSONStackObj::AssignStl ; (; TClass * ; cl, . Int_t ; map_convert, . const char * ; typename_tag . ). inline . Definition at line 442 of file TBufferJSON.cxx. ◆ ClearStl(). void TJSONStackObj::ClearStl ; (; ). inline . Definition at line 467 of file TBufferJSON.cxx. ◆ GetStlNode(). nlohmann::json * TJSONStackObj::GetStlNode ; (; ). inline . Definition at line 462 of file TBufferJSON.cxx. ◆ IsJsonArray(). Int_t TJSONStackObj::IsJsonArray ; (; nlohmann::json * ; json = nullptr, . const char * ; map_convert_type = nullptr . ). inline . checks if specified JSON node is array (compressed or not compressed) returns length of array (or -1 if failure) ; Definition at line 392 of file TBufferJSON.cxx. ◆ IsJsonString(). Bool_t TJSONStackObj::IsJsonString ; (; ). inline . Definition at line 387 of file TBufferJSON.cxx. ◆ IsStl(). Bool_t TJSONStackObj::IsStl ; (; ); const. inline . Definition at line 440 of file TBufferJSON.cxx. ◆ IsStreamerElement(). Bool_t TJSONStackObj::IsStreamerElement ; (; ); const. inline . Definition at line 370 of file TBufferJSON.cxx. ◆ IsStreamerInfo(). Bool_t TJSONStackObj::IsStreamerInfo ; (; ); const. inline . Definition at line 368 of file TBufferJSON.cxx. ◆ MakeReadIndexes(). std::unique_ptr< TArrayIndexProducer > TJSONStackObj::MakeReadIndexes ; (; ). inline . Definition at line 425 of file TBufferJSON.cxx. ◆ NextMemberSeparator(). const char * TJSONStackObj::NextMemberSeparator ; (; ). inline . returns separator for data members ; Definition at line 382 of file TBufferJSON.cxx. ◆ PopIntValue(). Int_t TJSONStackObj::PopIntValue ; (; ). inline . Definition at line 418 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTJSONStackObj.html:12544,failure,failure,12544,doc/master/classTJSONStackObj.html,https://root.cern,https://root.cern/doc/master/classTJSONStackObj.html,1,['failure'],['failure']
Availability,"peration failed. Bool_t Multiply(const TH1* h1); -*-*-*-*-*-*-*-*-*Multiply this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this*h1. If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by multiplication of h1 by h2*-*. this = (c1*h1)*(c2*h2). If errors of this are available (TH1::Sumw2), errors are recalculated.; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Multiply. The function return kFALSE if the Multiply operation failed. void Paint(Option_t* option = """"); -*-*-*-*-*-*-*Control routine to paint any kind of histograms*-*-*-*-*-*-*. This function is automatically called by TCanvas::Update.; (see TH1::Draw for the list of options). TH1 * Rebin(Int_t ngroup = 2, const char* newname = """", const Double_t* xbins = 0); Rebin this histogram. -case 1 xbins=0; If newname is blank (default), the current histogram is modified and; a pointer to it is returned. If newname is not blank, the current histogram is not modified, and a; new histogram is returned which is a Clone of the current histogram; with its name set to newname. The parameter ngroup indicates how many bins of this have to be merged; into one bin of the result. If the original histogram has errors stored (via Sumw2), the resulting; histograms has new erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:99648,error,errors,99648,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['error'],['errors']
Availability,"peration.; 1521 // fCheckSum = GetCheckSum(kLatestCheckSum);; 1522 } else {; 1523 if (!fClassInfo) {; 1524 if (IsZombie()) {; 1525 TClass::RemoveClass(this);; 1526 return;; 1527 }; 1528 }; 1529 }; 1530 }; 1531 }; 1532 if (!silent && (!fClassInfo && !fCanLoadClassInfo) && !isStl && !TClassEdit::IsArtificial(fName) &&; 1533 !TClassEdit::IsInterpreterDetail(fName.Data()) ) {; 1534 if (fState == kHasTClassInit) {; 1535 if (fImplFileLine == -1 && fClassVersion == 0) {; 1536 // We have a 'transient' class with a ClassDefInline and apparently no interpreter; 1537 // information. Since it is transient, it is more than likely that the lack; 1538 // will be harmles.; 1539 } else {; 1540 ::Error(""TClass::Init"", ""no interpreter information for class %s is available even though it has a TClass ""; 1541 ""initialization routine."",; 1542 fName.Data());; 1543 }; 1544 } else {; 1545 const bool ispairbase = TClassEdit::IsStdPairBase(fName.Data()) && !IsFromRootCling();; 1546 if (!ispairbase); 1547 ::Warning(""TClass::Init"", ""no dictionary for class %s is available"", fName.Data());; 1548 }; 1549 }; 1550 ; 1551 fgClassCount++;; 1552 SetUniqueID(fgClassCount);; 1553 ; 1554 // Make the typedef-expanded -> original hash table entries.; 1555 // There may be several entries for any given key.; 1556 // We only make entries if the typedef-expanded name; 1557 // is different from the original name.; 1558 TString resolvedThis;; 1559 if (!givenInfo && strchr (name, '<')) {; 1560 if ( fName != name) {; 1561 if (!fgClassTypedefHash) {; 1562 fgClassTypedefHash = new THashTable (100, 5);; 1563 fgClassTypedefHash->SetOwner (kTRUE);; 1564 }; 1565 ; 1566 fgClassTypedefHash->Add (new TNameMapNode (name, fName));; 1567 SetBit (kHasNameMapNode);; 1568 ; 1569 }; 1570 resolvedThis = TClassEdit::ResolveTypedef (name, kTRUE);; 1571 if (resolvedThis != name) {; 1572 if (!fgClassTypedefHash) {; 1573 fgClassTypedefHash = new THashTable (100, 5);; 1574 fgClassTypedefHash->SetOwner (kTRUE);; 1575 }; 1576 ; 1577 fgClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:59973,avail,available,59973,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"peration.; 1588 // fCheckSum = GetCheckSum(kLatestCheckSum);; 1589 } else {; 1590 if (!fClassInfo) {; 1591 if (IsZombie()) {; 1592 TClass::RemoveClass(this);; 1593 return;; 1594 }; 1595 }; 1596 }; 1597 }; 1598 }; 1599 if (!silent && (!fClassInfo && !fCanLoadClassInfo) && !isStl && !TClassEdit::IsArtificial(fName) &&; 1600 !TClassEdit::IsInterpreterDetail(fName.Data()) ) {; 1601 if (fState == kHasTClassInit) {; 1602 if (fImplFileLine == -1 && fClassVersion == 0) {; 1603 // We have a 'transient' class with a ClassDefInline and apparently no interpreter; 1604 // information. Since it is transient, it is more than likely that the lack; 1605 // will be harmles.; 1606 } else {; 1607 ::Error(""TClass::Init"", ""no interpreter information for class %s is available even though it has a TClass ""; 1608 ""initialization routine."",; 1609 fName.Data());; 1610 }; 1611 } else {; 1612 const bool ispairbase = TClassEdit::IsStdPairBase(fName.Data()) && !IsFromRootCling();; 1613 if (!ispairbase); 1614 ::Warning(""TClass::Init"", ""no dictionary for class %s is available"", fName.Data());; 1615 }; 1616 }; 1617 ; 1618 fgClassCount++;; 1619 SetUniqueID(fgClassCount);; 1620 ; 1621 // Make the typedef-expanded -> original hash table entries.; 1622 // There may be several entries for any given key.; 1623 // We only make entries if the typedef-expanded name; 1624 // is different from the original name.; 1625 TString resolvedThis;; 1626 if (!givenInfo && strchr (name, '<')) {; 1627 if ( fName != name) {; 1628 if (!fgClassTypedefHash) {; 1629 fgClassTypedefHash = new THashTable (100, 5);; 1630 fgClassTypedefHash->SetOwner (kTRUE);; 1631 }; 1632 ; 1633 fgClassTypedefHash->Add (new TNameMapNode (name, fName));; 1634 SetBit (kHasNameMapNode);; 1635 ; 1636 }; 1637 resolvedThis = TClassEdit::ResolveTypedef (name, kTRUE);; 1638 if (resolvedThis != name) {; 1639 if (!fgClassTypedefHash) {; 1640 fgClassTypedefHash = new THashTable (100, 5);; 1641 fgClassTypedefHash->SetOwner (kTRUE);; 1642 }; 1643 ; 1644 fgClas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:62724,avail,available,62724,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"perator/(TH3D const &h1, TH3D const &h2); 4868{; 4869 TH3D hnew = h1;; 4870 hnew.Divide(&h2);; 4871 hnew.SetDirectory(nullptr);; 4872 return hnew;; 4873}; c#define c(i)Definition RSha256.hxx:101; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; e#define e(i)Definition RSha256.hxx:103; Style_tshort Style_tDefinition RtypesCore.h:82; Int_tint Int_tDefinition RtypesCore.h:45; Color_tshort Color_tDefinition RtypesCore.h:85; Version_tshort Version_tDefinition RtypesCore.h:65; Char_tchar Char_tDefinition RtypesCore.h:37; Float_tfloat Float_tDefinition RtypesCore.h:57; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Long64_tlong long Long64_tDefinition RtypesCore.h:69; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBuffer.h; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; TF3.h; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; namechar name[80]Definition TGX11.cxx:110; TH2.h; operator-TH3C operator-(TH3C const &h1, TH3C const &h2)Operator -.Definition TH3.cxx:3755; operator+TH3C operator+(TH3C const &h1, TH3C const &h2)Operator +.Definition TH3.cxx:3743; operator/TH3C operator/(TH3C const &h1, TH3C const &h2)Operator /.Definition TH3.cxx:3779; operator*TH3C operator*(Float_t c1, TH3C const &h3c)Operator *.Definition TH3.cxx:3731; TH3.h; THLimitsFinder.h; THashList.h; xminfloat xminDefinition THbookFile.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:180201,error,error,180201,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['error'],['error']
Availability,"perator= (const TH3D &h1);  Operator =. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH3;  ~TH3 () override;  Destructor. ;  ; void FillRandom (const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in function fname. ;  ; void FillRandom (TH1 *h, Int_t ntimes=5000, TRandom *rng=nullptr) override;  Fill histogram following distribution in histogram h. ;  ; virtual void FitSlicesZ (TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option_t *option=""QNR"");  Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-d histogram for each fit parameter Only cells in the bin range [binminx,binmaxx] and [binminy,binmaxy] are considered. ;  ; Int_t GetBin (Int_t binx, Int_t biny, Int_t binz) const override;  See comments in TH1::GetBin. ;  ; virtual Double_t GetBinErrorLow (Int_t bin) const;  Return lower error associated to bin number bin. ;  ; virtual Double_t GetBinErrorLow (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinErrorUp (Int_t bin) const;  Return upper error associated to bin number bin. ;  ; virtual Double_t GetBinErrorUp (Int_t binx, Int_t biny, Int_t binz);  ; virtual Double_t GetBinWithContent3 (Double_t c, Int_t &binx, Int_t &biny, Int_t &binz, Int_t firstx=0, Int_t lastx=0, Int_t firsty=0, Int_t lasty=0, Int_t firstz=0, Int_t lastz=0, Double_t maxdiff=0) const;  Compute first cell (binx,biny,binz) in the range [firstx,lastx](firsty,lasty][firstz,lastz] for which diff = abs(cell_content-c) <= maxdiff In case several cells in the specified range with diff=0 are found the first cell found is returned in binx,biny,binz. ;  ; virtual Double_t GetCorrelationFactor (Int_t axis1=1, Int_t axis2=2) const;  Return correlation factor between axis1 and axis2. ;  ; virtual Double_t GetCovariance (Int_t axis1=1, Int_t axis2=2) const;  Return covarian",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:11212,error,error,11212,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['error'],['error']
Availability,"perator= ; (; const TFTP & ; ). privatedelete . ◆ Print(). void TFTP::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print some info about the FTP connection. ; Reimplemented from TObject.; Definition at line 157 of file TFTP.cxx. ◆ PrintDirectory(). Int_t TFTP::PrintDirectory ; (; ); const. Print path of remote working directory. ; Returns 0 in case of succes and -1 in cse of failure. ; Definition at line 764 of file TFTP.cxx. ◆ PrintError(). void TFTP::PrintError ; (; const char * ; where, . Int_t ; err . ); const. private . Print error string depending on error code. ; Definition at line 182 of file TFTP.cxx. ◆ put(). void TFTP::put ; (; const char * ; file, . const char * ; remoteName = nullptr . ). inline . Definition at line 111 of file TFTP.h. ◆ PutFile(). Long64_t TFTP::PutFile ; (; const char * ; file, . const char * ; remoteName = nullptr . ). Transfer file to remote host. ; Returns number of bytes sent or < 0 in case of error. Error -1 connection is still open, error -2 connection has been closed. In case of failure fRestartAt is set to the number of bytes correclty transfered. Calling PutFile() immediately afterwards will restart at fRestartAt. If this is not desired call SetRestartAt(0) before calling PutFile(). If rootd reports that the file is locked, and you are sure this is not the case (e.g. due to a crash), you can force unlock it by prepending the remoteName with a '-'. ; Definition at line 233 of file TFTP.cxx. ◆ pwd(). void TFTP::pwd ; (; ); const. inline . Definition at line 117 of file TFTP.h. ◆ Recv(). Int_t TFTP::Recv ; (; Int_t & ; status, . EMessageTypes & ; kind . ); const. private . Return status from rootd server and message kind. ; Returns -1 in case of error otherwise 8 (sizeof 2 words, status and kind). ; Definition at line 191 of file TFTP.cxx. ◆ RenameFile(). Int_t TFTP::RenameFile ; (; const char * ; file1, . const char * ; file2 . ); const. Rename a remote file. ; Anonymous users may not rename files. Returns 0 in c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFTP.html:22087,error,error,22087,doc/master/classTFTP.html,https://root.cern,https://root.cern/doc/master/classTFTP.html,1,['error'],['error']
Availability,"performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLinearMinimizer.html:7986,error,error,7986,root/html534/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html534/TLinearMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id$ » Last generated: 2015-06-02 13:51; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLinearMinimizer.html:8051,error,error,8051,root/html602/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html602/TLinearMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"performing a linear fit we need the basis functions, which are the partial derivatives with respect to the parameters of the model function. bool SetFixedVariable(unsigned int , const string& , double ); set a fixed variable. bool Minimize(); find directly the minimum of the chi2 function; solving the linear equation. Use TVirtualFitter::Eval. bool SetVariable(unsigned int , const string& , double , double ); set free variable (dummy impl. ). { return false; }. double MinValue() const; return minimum function value. { return fMinVal; }. double Edm() const; return expected distance reached from the minimum. { return 0; }. const double * X() const; return pointer to X values at the minimum. { return &fParams.front(); }. const double * MinGradient() const; return pointer to gradient values at the minimum. { return 0; }. unsigned int NCalls() const; number of function calls to reach the minimum. { return 0; }. unsigned int NDim() const; this is <= Function().NDim() which is the total; number of variables (free+ constrained ones). { return fDim; }. unsigned int NFree() const; number of free variables (real dimension of the problem); this is <= Function().NDim() which is the total. { return fNFree; }. bool ProvidesError() const; minimizer provides error and error matrix. { return true; }. const double * Errors() const; return errors at the minimum. { return (fErrors.empty()) ? 0 : &fErrors.front(); }. double CovMatrix(unsigned int i, unsigned int j) const; return covariance matrices elements; if the variable is fixed the matrix is zero; The ordering of the variables is the same as in errors. int CovMatrixStatus() const; return covariance matrix status. » Author: L. Moneta Wed Oct 25 16:28:55 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/minuit:$Id$ » Last generated: 2015-06-02 16:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLinearMinimizer.html:8051,error,error,8051,root/html604/TLinearMinimizer.html,https://root.cern,https://root.cern/root/html604/TLinearMinimizer.html,4,['error'],"['error', 'errors']"
Availability,"perly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitely Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" fiel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSocket.html:13209,error,error,13209,root/html528/TSocket.html,https://root.cern,https://root.cern/root/html528/TSocket.html,3,['error'],['error']
Availability,"pf);; 1864 return kTRUE;; 1865 }; 1866 }; 1867 ; 1868 ::pclose(pf);; 1869 ; 1870 return kFALSE;; 1871}; 1872#endif; 1873 ; 1874////////////////////////////////////////////////////////////////////////////////; 1875/// Expand a pathname getting rid of special shell characaters like ~.$, etc.; 1876/// For Unix/Win32 compatibility use $(XXX) instead of $XXX when using; 1877/// environment variables in a pathname. If compatibility is not an issue; 1878/// you can use on Unix directly $XXX. The user must delete returned string.; 1879/// Returns the expanded pathname or 0 in case of error.; 1880/// The user must delete returned string (delete []).; 1881 ; 1882char *TUnixSystem::ExpandPathName(const char *path); 1883{; 1884 TString patbuf = path;; 1885 if (ExpandPathName(patbuf)); 1886 return nullptr;; 1887 return StrDup(patbuf.Data());; 1888}; 1889 ; 1890////////////////////////////////////////////////////////////////////////////////; 1891/// Set the file permission bits. Returns -1 in case or error, 0 otherwise.; 1892 ; 1893int TUnixSystem::Chmod(const char *file, UInt_t mode); 1894{; 1895 return ::chmod(file, mode);; 1896}; 1897 ; 1898////////////////////////////////////////////////////////////////////////////////; 1899/// Set the process file creation mode mask.; 1900 ; 1901int TUnixSystem::Umask(Int_t mask); 1902{; 1903 return ::umask(mask);; 1904}; 1905 ; 1906////////////////////////////////////////////////////////////////////////////////; 1907/// Set a files modification and access times. If actime = 0 it will be; 1908/// set to the modtime. Returns 0 on success and -1 in case of error.; 1909 ; 1910int TUnixSystem::Utime(const char *file, Long_t modtime, Long_t actime); 1911{; 1912 if (!actime); 1913 actime = modtime;; 1914 ; 1915 struct utimbuf t;; 1916 t.actime = (time_t)actime;; 1917 t.modtime = (time_t)modtime;; 1918 return ::utime(file, &t);; 1919}; 1920 ; 1921////////////////////////////////////////////////////////////////////////////////; 1922/// Find location",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnixSystem_8cxx_source.html:58094,error,error,58094,doc/master/TUnixSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnixSystem_8cxx_source.html,1,['error'],['error']
Availability,"pfilename)) {; 2037 gSystem->Unlink(fHeaderFileName);; 2038 gSystem->Rename(tmpfilename,fHeaderFileName);; 2039 } else gSystem->Unlink(tmpfilename);; 2040 }; 2041 delete [] filename;; 2042 delete [] cutfilename;; 2043 }; 2044 ; 2045} // namespace Internal; 2046} // namespace ROOT; Int_tint Int_tDefinition RtypesCore.h:45; Long_tlong Long_tDefinition RtypesCore.h:54; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBranchElement.h; TBranchProxyClassDescriptor.h; TBranchProxyDescriptor.h; TChain.h; TClassEdit.h; TClass.h; TClonesArray.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kInfoconstexpr Int_t kInfoDefinition TError.h:45; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TFile.h; TFormLeafInfo.h; TFriendElement.h; TFriendProxyDescriptor.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; filenameOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:79217,error,error,79217,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['error'],['error']
Availability,"ph to the list of graphs.Definition TMultiGraph.cxx:419; TMultiGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this multigraph with its current attributes.Definition TMultiGraph.cxx:508; . Graphs with error bars; Three classes are available to handle graphs with error bars: TGraphErrors, TGraphAsymmErrors and TGraphBentErrors. The following drawing options are specific to graphs with error bars:. Option Description . ""Z"" Do not draw small horizontal and vertical lines the end of the error bars. Without ""Z"", the default is to draw these. . "">"" An arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""|>"" A filled arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size. . ""X"" Do not draw error bars. By default, graph classes that have errors are drawn with the errors (TGraph itself has no errors, and so this option has no effect.) . ""||"" Draw only the small vertical/horizontal lines at the ends of the error bars, without drawing the bars themselves. This option is interesting to superimpose statistical-only errors on top of a graph with statistical+systematic errors. . ""[]"" Does the same as option ""||"" except that it draws additional marks at the ends of the small vertical/horizontal lines. It makes plots less ambiguous in case several graphs are drawn on the same picture. . ""0"" By default, when a data point is outside the visible range along the Y axis, the error bars are not drawn. This option forces error bars' drawing for the data points outside the visible range along the Y axis (see example below). . ""2"" Error rectangles are drawn. . ""3"" A filled area is drawn through the end points of the vertical error bars. . ""4"" A smoothed filled area is drawn through the end points of the vertical error bars. . ""5"" Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:8781,error,error,8781,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['error']
Availability,"ph. The following example demonstrate this.; 163 ; 164Begin_Macro(source); 165{; 166 auto c3 = new TCanvas(""c3"",""c3"",600, 400);; 167 ; 168 auto mg = new TMultiGraph(""mg"",""mg"");; 169 ; 170 const Int_t size = 10;; 171 ; 172 double px[size];; 173 double py1[size];; 174 double py2[size];; 175 double py3[size];; 176 ; 177 for ( int i = 0; i < size ; ++i ) {; 178 px[i] = i;; 179 py1[i] = size - i;; 180 py2[i] = size - 0.5 * i;; 181 py3[i] = size - 0.6 * i;; 182 }; 183 ; 184 auto gr1 = new TGraph( size, px, py1 );; 185 gr1->SetName(""gr1"");; 186 gr1->SetTitle(""graph 1"");; 187 gr1->SetMarkerStyle(21);; 188 gr1->SetDrawOption(""AP"");; 189 gr1->SetLineColor(2);; 190 gr1->SetLineWidth(4);; 191 gr1->SetFillStyle(0);; 192 ; 193 auto gr2 = new TGraph( size, px, py2 );; 194 gr2->SetName(""gr2"");; 195 gr2->SetTitle(""graph 2"");; 196 gr2->SetMarkerStyle(22);; 197 gr2->SetMarkerColor(2);; 198 gr2->SetDrawOption(""P"");; 199 gr2->SetLineColor(3);; 200 gr2->SetLineWidth(4);; 201 gr2->SetFillStyle(0);; 202 ; 203 auto gr3 = new TGraph( size, px, py3 );; 204 gr3->SetName(""gr3"");; 205 gr3->SetTitle(""graph 3"");; 206 gr3->SetMarkerStyle(23);; 207 gr3->SetLineColor(4);; 208 gr3->SetLineWidth(4);; 209 gr3->SetFillStyle(0);; 210 ; 211 mg->Add( gr1 );; 212 mg->Add( gr2 );; 213 ; 214 gr3->Draw(""ALP"");; 215 mg->Draw(""LP"");; 216 c3->BuildLegend();; 217}; 218End_Macro; 219 ; 220\anchor MG01e; 221#### Automatic coloring; 222 ; 223Automatic coloring according to the current palette is available as shown in the; 224following example:; 225 ; 226Begin_Macro(source); 227../../../tutorials/graphs/multigraphpalettecolor.C; 228End_Macro; 229 ; 230\anchor MG01f; 231#### Reverse axis; 232 ; 233\since **ROOT version 6.19/02**; 234 ; 235When a TMultiGraph is drawn, the X-axis is drawn with increasing values from left to; 236right and the Y-axis from bottom to top. The two options RX and RY allow to change; 237this order. The option RX allows to draw the X-axis with increasing values from; 238right to left and the RY o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:6460,avail,available,6460,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['avail'],['available']
Availability,"ph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 142 of file TGraphMultiErrors.h. ◆ GetEXlow(). Double_t * TGraphMultiErrors::GetEXlow ; (; ); const. inlineoverridevirtual . Reimplemented from TGraph.; Definition at line 141 of file TGraphMultiErrors.h. ◆ GetEYhigh() [1/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; ); const. overridevirtual . Get all high errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1588 of file TGraphMultiErrors.cxx. ◆ GetEYhigh() [2/2]. Double_t * TGraphMultiErrors::GetEYhigh ; (; Int_t ; e). virtual . Get all high errors e on y coordinates as an array. ; Definition at line 1610 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [1/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; ); const. overridevirtual . Get all low errors on y coordinates as an array summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1577 of file TGraphMultiErrors.cxx. ◆ GetEYlow() [2/2]. Double_t * TGraphMultiErrors::GetEYlow ; (; Int_t ; e). virtual . Get all low errors e on y coordinates as an array. ; Definition at line 1599 of file TGraphMultiErrors.cxx. ◆ GetFillColor() [1/2]. virtual Color_t TAttFill::GetFillColor ; (; ); const. inlinevirtual . Return the fill area color. ; Reimplemented from TAttFill.; Definition at line 30 of file TAttFill.h. ◆ GetFillColor() [2/2]. Color_t TGraphMultiErrors::GetFillColor ; (; Int_t ; e); const. virtual . Get Fill Color for specified error e (-1 = Global and x errors). ; Definition at line 1643 of file TGraphMultiErrors.cxx. ◆ GetFillStyle() [1/2]. virtual Style_t TAttF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:64988,error,errors,64988,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"ph2DErrors() override;; 41 virtual void AddPointError(Double_t x, Double_t y, Double_t z, Double_t ex = 0., Double_t ey = 0., Double_t ez = 0.);; 42 Double_t GetErrorX(Int_t bin) const override;; 43 Double_t GetErrorY(Int_t bin) const override;; 44 Double_t GetErrorZ(Int_t bin) const override;; 45 Double_t *GetEX() const override {return fEX;}; 46 Double_t *GetEY() const override {return fEY;}; 47 Double_t *GetEZ() const override {return fEZ;}; 48 Double_t GetXmaxE() const override;; 49 Double_t GetXminE() const override;; 50 Double_t GetYmaxE() const override;; 51 Double_t GetYminE() const override;; 52 Double_t GetZmaxE() const override;; 53 Double_t GetZminE() const override;; 54 void Print(Option_t *chopt="""") const override;; 55 Int_t RemovePoint(Int_t ipoint); // *MENU*; 56 void Scale(Double_t c1=1., Option_t *option=""z"") override; // *MENU*; 57 void Set(Int_t n) override;; 58 void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) override;; 59 virtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez);; 60 ; 61 ClassDefOverride(TGraph2DErrors,1) //A 2D graph with error bars; 62};; 63 ; 64#endif; 65 ; 66 ; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TGraph2D.h; TGraph2DErrorsGraph 2D class with errors.Definition TGraph2DErrors.h:26; TGraph2DErrors::GetErrorZDouble_t GetErrorZ(Int_t bin) const overrideThis function is called by Graph2DFitChisquare.Definition TGraph2DErrors.cxx:230; TGraph2DErrors::~TGraph2DErrors~TGraph2DErrors() overrideTGraph2DErrors destructor.Definition TGraph2DErrors.cxx:137; TGraph2DErrors::GetYminEDouble_t GetYminE() const overrideReturns the Y minimum with errors.Definition TGraph2DErrors.cxx:274; TGraph2DErrors::GetXminEDouble_t GetXminE() const overrideReturns the X minim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2DErrors_8h_source.html:2697,error,error,2697,doc/master/TGraph2DErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraph2DErrors_8h_source.html,1,['error'],['error']
Availability,"phAsymmErrors.cxx. ◆ operator=(). TGraphAsymmErrors & TGraphAsymmErrors::operator= ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors assignment operator. ; Definition at line 93 of file TGraphAsymmErrors.cxx. ◆ Print(). void TGraphAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print graph and errors values. ; Reimplemented from TGraph.; Definition at line 1229 of file TGraphAsymmErrors.cxx. ◆ SavePrimitive(). void TGraphAsymmErrors::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save primitive as a C++ statement(s) on output stream out. ; Reimplemented from TGraph.; Definition at line 1241 of file TGraphAsymmErrors.cxx. ◆ Scale(). void TGraphAsymmErrors::Scale ; (; Double_t ; c1 = 1., . Option_t * ; option = ""y"" . ). overridevirtual . Multiply the values and errors of a TGraphAsymmErrors by a constant c1. ; If option contains ""x"" the x values and errors are scaled If option contains ""y"" the y values and errors are scaled If option contains ""xy"" both x and y values and errors are scaled ; Reimplemented from TGraph.; Definition at line 1274 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [1/2]. void TGraphAsymmErrors::SetPointError ; (; Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point pointed by the mouse. ; Definition at line 1299 of file TGraphAsymmErrors.cxx. ◆ SetPointError() [2/2]. void TGraphAsymmErrors::SetPointError ; (; Int_t ; i, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh . ). virtual . Set ex and ey values for point number i. ; Definition at line 1331 of file TGraphAsymmErrors.cxx. ◆ SetPointEXhigh(). void TGraphAsymmErrors::SetPointEXhigh ; (; Int_t ; i, . Double_t ; exh . ). virtual . Set EXhigh for point i. ; Definition at line 1362 of file TGraphAsymmErrors.cxx. ◆ SetPointEXlow(). void TGraphAsymmErrors::SetPointEXlow ; (; Int_t ; i, . Double_t ; exl . ). virtual . Set EXlow for point",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:51154,error,errors,51154,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,3,['error'],['errors']
Availability,"phBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Bool_t DoMerge(const TGraph* g); protected function to perform the merge operation of a graph with asymmetric errors. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraphBentErrors.html:17047,down,down,17047,root/html534/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html534/TGraphBentErrors.html,3,['down'],['down']
Availability,"phBentErrors(Int_t n, const Float_t* x, const Float_t* y, const Float_t* exl = 0, const Float_t* exh = 0, const Float_t* eyl = 0, const Float_t* eyh = 0, const Float_t* exld = 0, const Float_t* exhd = 0, const Float_t* eyld = 0, const Float_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. TGraphBentErrors(Int_t n, const Double_t* x, const Double_t* y, const Double_t* exl = 0, const Double_t* exh = 0, const Double_t* eyl = 0, const Double_t* eyh = 0, const Double_t* exld = 0, const Double_t* exhd = 0, const Double_t* eyld = 0, const Double_t* eyhd = 0); TGraphBentErrors normal constructor. if exl,h or eyl,h are null, the corresponding arrays are preset to zero. ~TGraphBentErrors(); TGraphBentErrors default destructor. void Apply(TF1* f); apply a function to all data points; y = f(x,y). Errors are calculated as eyh = f(x,y+eyh)-f(x,y) and; eyl = f(x,y)-f(x,y-eyl). Special treatment has to be applied for the functions where the; role of ""up"" and ""down"" is reversed.; function suggested/implemented by Miroslav Helbich <helbich@mail.desy.de>. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t bin) const; Get high error on X[i]. Double_t GetErrorXlow(Int_t bin) const; Get low error on X[i]. Double_t GetErrorYhigh(Int_t bin) const; Get high error on Y[i].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphBentErrors.html:16579,down,down,16579,root/html528/TGraphBentErrors.html,https://root.cern,https://root.cern/root/html528/TGraphBentErrors.html,3,['down'],['down']
Availability,"phBentErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideGet high error on X[i].Definition TGraphBentErrors.cxx:430; TGraphBentErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Add a point with bent errors to the graph.Definition TGraphBentErrors.cxx:192; TGraphBentErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for newsize points.Definition TGraphBentErrors.h:104; TGraphBentErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0)Set ex and ey values for point pointed by the mouse.Definition TGraphBentErrors.cxx:587; TGraphBentErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphBentErrors.h:28; TGraphBentErrors::fEXhighDouble_t * fEXhigh[fNpoints] array of X high errorsDefinition TGraphBentErrors.h:29; TGraphBentErrors::~TGraphBentErrors~TGraphBentErrors() overrideTGraphBentErrors default destructor.Definition TGraphBentErrors.cxx:176; TGraphBentErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphBentErrors.cxx:495; TGraphBentErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphBentErrors by a constant c1.Definition TGraphBentErrors.cxx:510; TGraphBentErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end]Definition TGraphBentErrors.cxx:474; TGraphBentErrors::GetEXlowdDouble_t * GetEXlowd() const overrideDefinition TGraphBentErrors.h:84; TGraphBentErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphBentErrors.cxx:416; TGraphBentErrors::fEYlowDouble_t * fEYlow[fN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphBentErrors_8h_source.html:9158,error,errorsDefinition,9158,doc/master/TGraphBentErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphBentErrors_8h_source.html,1,['error'],['errorsDefinition']
Availability,"phDelaunay* gd); TGraph2DPainter(const TGraph2DPainter&); virtual~TGraph2DPainter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TList*GetContourList(Double_t contour); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2DPainter.html:1427,error,error,1427,root/html528/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html528/TGraph2DPainter.html,4,['error'],['error']
Availability,"phErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Classstatic TClass * Class(); TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::Streamervoid Streamer(TBuffer &) overrideStream an object of class TGraphErrors.Definition TGraphErrors.cxx:817; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with errors.Definition TGraphErrors.cxx:573; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:635; TGraphErrors::GetErrorYl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:33930,error,errorsDefinition,33930,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"phMultiErrors ; (; const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD & ; tvEyL, . const TVectorD & ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with six vectors of doubles in input and a single y error dimension. ; The signature of this constructor is equal to the corresponding constructor of TGraphAsymmErrors. A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL, tvEyH. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 462 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [19/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorF & ; tvX, . const TVectorF & ; tvY, . const TVectorF & ; tvExL, . const TVectorF & ; tvExH, . const TVectorF * ; tvEyL, . const TVectorF * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of floats in input and multiple y error dimension. ; A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 500 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [20/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; ne, . const TVectorD & ; tvX, . const TVectorD & ; tvY, . const TVectorD & ; tvExL, . const TVectorD & ; tvExH, . const TVectorD * ; tvEyL, . const TVectorD * ; tvEyH, . Int_t ; m = kOnlyFirst . ). Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ; The number of points in the graph is the minimum of number of points in tvX and tvY. ; Definition at line 539 of file TGraphMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:54808,error,error,54808,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"phMultiErrors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMultiErrors.cxx:951; TGraphMultiErrors::SetEYhighvirtual void SetEYhigh(Int_t e, Int_t np, const Double_t *eyH)Set error e eyH values.Definition TGraphMultiErrors.cxx:1995; TGraphMultiErrors::GetNYErrorsInt_t GetNYErrors() constDefinition TGraphMultiErrors.h:166; TGraphMultiErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphMultiErrors.cxx:869; TGraphMultiErrors::SetAttFillvirtual void SetAttFill(Int_t e, TAttFill *taf)Set TAttFill parameters of error e by copying from another TAttFill (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2018; TGraphMultiErrors::SetEYlowvirtual void SetEYlow(Int_t e, Int_t np, const Double_t *eyL)Set error e eyL values.Definition TGraphMultiErrors.cxx:1982; TGraphMultiErrors::fAttFillstd::vector< TAttFill > fAttFillThe AttFill attributes of the different errors.Definition TGraphMultiErrors.h:41; TGraphMultiErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fExL, fExH, fEyL and fEyH ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:23009,error,error,23009,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['error']
Availability,"phTheta(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcd(Int_t idiv); virtual TGeoNode*TGeoPatternFinder::CdNext(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGeoNode*FindNode(Double_t* point, const Double_t* dir = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTGeoPatternFinder::GetByteCount() const; Int_tTGeoPatternFinder::GetCurrent(); virtual Int_tGetDivAxis(); Int_tTGeoPatternFinder::GetDivIndex(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTGeoPatternFinder::GetEnd() const; virtual const char*TObject::GetIconName() const; virtual TGeoMatrix*TGeoPatternFinder::GetMatrix(); virtual const char*TObject::GetName() const; Int_tTGeoPatternFinder::GetNdiv() const; Int_tTGeoPatternFinder::GetNext() const; TGeoNode*TGeoPatternFinder::GetNodeOffset(Int_t idiv); vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPatternSphTheta.html:2618,error,error,2618,root/html528/TGeoPatternSphTheta.html,https://root.cern,https://root.cern/root/html528/TGeoPatternSphTheta.html,2,['error'],['error']
Availability,ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=7.28945 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=7.28945 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:21704,error,error,21704,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=7.28945 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=7.28945 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:24155,error,error,24155,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=7.28945 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=7.28945 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maxim,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:27423,error,error,27423,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=7.28945 p_ph_sig2_gamma_bin_2=1 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (10415.9) to force MIGRAD to back out of this region. Error log follows.; Parameter values: Abkg=1 Asig=1 p_ph_sig2_gamma_bin_0=1 p_ph_sig2_gamma_bin_1=1 p_ph_sig2_gamma_bin_10=1 p_ph_sig2_gamma_bin_11=1 p_ph_sig2_gamma_bin_12=1 p_ph_sig2_gamma_bin_13=1 p_ph_sig2_gamma_bin_14=1 p_ph_sig2_gamma_bin_15=1 p_ph_sig2_gamma_bin_16=1 p_ph_sig2_gamma_bin_17=1 p_ph_sig2_gamma_bin_18=1 p_ph_sig2_gamma_bin_19=1 p_ph_sig2_gamma_bin_2=7.28945 p_ph_sig2_gamma_bin_20=1 p_ph_sig2_gamma_bin_21=1 p_ph_sig2_gamma_bin_22=1 p_ph_sig2_gamma_bin_23=1 p_ph_sig2_gamma_bin_24=1 p_ph_sig2_gamma_bin_3=1 p_ph_sig2_gamma_bin_4=1 p_ph_sig2_gamma_bin_5=1 p_ph_sig2_gamma_bin_6=1 p_ph_sig2_gamma_bin_7=1 p_ph_sig2_gamma_bin_8=1 p_ph_sig2_gamma_bin_9=1; ; RooAbsMinimizerFcn: Minimized function has error,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:25789,error,error,25789,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,2,['error'],['error']
Availability,"pha_optim; // optimization of convergence coefficients, possible values; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x; // positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 2D peaks (not fit).; // However they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted y positions of 2D peaks, output parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // y positions of 2D peaks (not fit).; // However they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x; // positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 1D ridges (not fit).; // However they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calcu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:47416,error,errors,47416,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['error'],['errors']
Availability,"pically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(char *(*)(const char* prompt) getlineFunc, void (*)(char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void RewindDictionary(); Rewind CINT dictionary to the point where it was before e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:21177,error,error,21177,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,2,['error'],['error']
Availability,"pically; $ROOTSYS/etc/system.rootmap). void EndOfLineAction(); It calls a ""fantom"" method to synchronize user keyboard input; and ROOT prompt line. Bool_t IsLoaded(const char* filename) const; Return true if the file has already been loaded by cint. Int_t Load(const char* filenam, Bool_t system = kFALSE); Load a library file in CINT's memory.; if 'system' is true, the library is never unloaded. void LoadMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Load a macro file in CINT's memory. Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line.; If the command is executed and the result of G__process_cmd is 0,; the return value is the int value corresponding to the result of the command; (float and double return values will be truncated). Long_t ProcessLineAsynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line asynch. Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0); Let CINT process a command line synchronously, i.e we are waiting; it will be finished. Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0); Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; however not declarations, like ""Int_t x;""). void PrintIntro(); Print CINT introduction and help message. void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); Set a getline function to call when input is needed. void RecursiveRemove(TObject* obj); Delete object from CINT symbol table so it can not be used anymore.; CINT objects are always on the heap. void Reset(); Reset the CINT state to the state saved by the last call to; TCint::SaveContext(). void ResetAll(); Reset the CINT state to its initial state. void ResetGlobals(); Reset the CINT global object state to the state saved by the last; call to TCint::SaveGlobalsContext(). void ResetGlobalVar(void* obj); Reset the CINT global object state to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TCint.html:21281,error,error,21281,root/html530/TCint.html,https://root.cern,https://root.cern/root/html530/TCint.html,3,['error'],['error']
Availability,"pid,pidf);; 1999 pid->IncrementCount();; 2000 ; 2001 {; 2002 R__WRITE_LOCKGUARD(ROOT::gCoreMutex);; 2003 pidslist->Add(pid);; 2004 Int_t ind = pidslist->IndexOf(pid);; 2005 pid->SetUniqueID((UInt_t)ind);; 2006 }; 2007 ; 2008 return pid;; 2009}; 2010 ; 2011 ; 2012////////////////////////////////////////////////////////////////////////////////; 2013/// Attempt to recover file if not correctly closed; 2014///; 2015/// The function returns the number of keys that have been recovered.; 2016/// If no keys can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 204",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72265,recover,recovered,72265,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['recover'],['recovered']
Availability,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Mon Jul 4 15:24:50 2011 » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooWorkspace__CodeRepo.html:7550,error,errors,7550,root/html530/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html530/RooWorkspace__CodeRepo.html,4,"['error', 'recover']","['error', 'errors', 'recover']"
Availability,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Thu Nov 3 20:10:09 2011 » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooWorkspace__CodeRepo.html:7550,error,errors,7550,root/html532/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html532/RooWorkspace__CodeRepo.html,4,"['error', 'recover']","['error', 'errors', 'recover']"
Availability,"piled OK; map<TString,ClassFiles>_fmapList of contained files; RooWorkspace*_wspaceowning workspace. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Bool_t autoImportClass(TClass* tc, Bool_t doReplace = kFALSE); Import code of class 'tc' into the repository. If code is already in repository it is only imported; again if doReplace is false. The names and location of the source files is determined from the information; in TClass. If no location is found in the TClass information, the files are searched in the workspace; search path, defined by addClassDeclImportDir() and addClassImplImportDir() for declaration and implementation; files respectively. If files cannot be found, abort with error status, otherwise update the internal; class-to-file map and import the contents of the files, if they are not imported yet. void Streamer(TBuffer& b); Custom streamer for the workspace. Stream contents of workspace; and code repository. When reading, read code repository first; and compile missing classes before proceeding with streaming; of workspace contents to avoid errors. std::string listOfClassNames() const; Return STL string with last of class names contained in the code repository. Bool_t compileClasses(); For all classes in the workspace for which no class definition is; found in the ROOT class table extract source code stored in code; repository into temporary directory set by; setClassFileExportDir(), compile classes and link them with; current ROOT session. If a compilation error occurs print; instructions for user how to fix errors and recover workspace and; abort import procedure. CodeRepo(RooWorkspace* wspace = 0); {}. virtual ~CodeRepo(); {}. Bool_t compiledOK() const; { return _compiledOK ; }. » Last changed: Wed Dec 8 11:39:40 2010 » Last generated: 2010-12-08 11:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooWorkspace__CodeRepo.html:7481,error,errors,7481,root/html528/RooWorkspace__CodeRepo.html,https://root.cern,https://root.cern/root/html528/RooWorkspace__CodeRepo.html,4,"['error', 'recover']","['error', 'errors', 'recover']"
Availability,"piledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. In addition this can be multiplexed with the two bits:; kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode. This bits can be masked out by using kDecomposedObjMask . Definition at line 2867 of file TTree.cxx. ◆ Class(). static TClass * TTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 659 of file TTree.h. ◆ CloneTree(). TTree * TTree::CloneTree ; (; Long64_t ; nentries = -1, . Option_t * ; option = """" . ). virtual . Create a clone of this tree and copy nentries. ; By default copy all entries. The compression level of the cloned tree is set to the destination file's compression level.; NOTE: Only active branches are copied. See TTree::SetBranchStatus for more information and usage regarding the (de)activation of branches. More examples are provided in the tutorials listed below.; NOTE: If the TTree is a TChain, the structure of the first TTree is used for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:103093,mask,masked,103093,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,1,['mask'],['masked']
Availability,"piledCollectionProxy (-3) : Missing compiled collection proxy for a compiled collection; kMismatch (-2) : Non-Class Pointer type given does not match the type expected by the branch; kClassMismatch (-1) : Class Pointer type given does not match the type expected by the branch; kMatch (0) : perfect match; kMatchConversion (1) : match with (I/O) conversion; kMatchConversionCollection (2) : match with (I/O) conversion of the content of a collection; kMakeClass (3) : MakeClass mode so we can not check.; kVoidPtr (4) : void* passed so no check was made.; kNoCheck (5) : Underlying TBranch not yet available so no check was made. In addition this can be multiplexed with the two bits:; kNeedEnableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to be in Decomposed Object (aka MakeClass) mode.; kNeedDisableDecomposedObj : in order for the address (type) to be 'usable' the branch needs to not be in Decomposed Object (aka MakeClass) mode. This bits can be masked out by using kDecomposedObjMask . Definition at line 2867 of file TTree.cxx. ◆ Class(). static TClass * TTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 705 of file TTree.h. ◆ CloneTree(). TTree * TTree::CloneTree ; (; Long64_t ; nentries = -1, . Option_t * ; option = """" . ). virtual . Create a clone of this tree and copy nentries. ; By default copy all entries. The compression level of the cloned tree is set to the destination file's compression level.; NOTE: Only active branches are copied. See TTree::SetBranchStatus for more information and usage regarding the (de)activation of branches. More examples are provided in the tutorials listed below.; NOTE: If the TTree is a TChain, the structure of the first TTree is used for the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:103266,mask,masked,103266,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,1,['mask'],['masked']
Availability,"pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented from TSocket.; Definition at line 68 of file TServerSocket.h. ◆ Send() [3/4]. Int_t TServerSocket::Send ; (; Int_t ; kind). inlineoverridevirtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 70 of file TServerSocket.h. ◆ Send() [4/4]. Int_t TServerSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). inlineoverridevirtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented from TSocket.; Definition at line 72 of file TServerSocket.h. ◆ SendObject(). Int_t TServerSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). inlineoverridevirtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Reimplemented from TSocket.; Definition at line 76 of file TServerSocket.h. ◆ SendRaw(). Int_t TServerSocket::SendRaw ; (; const void * ; buffer, . Int_t ; length, . ESendRecvOptions ; opt = kDefault . ). inlineoverridevirtual . Send a raw buffer of specified length. ; Using option kOob one can send OOB data. Returns the number of bytes sent or -1 in cas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTServerSocket.html:29499,error,error,29499,doc/master/classTServerSocket.html,https://root.cern,https://root.cern/doc/master/classTServerSocket.html,1,['error'],['error']
Availability,"place current statistics with the values in array stats.Definition TProfile2D.cxx:1474; TProfile2D::BufferFillInt_t BufferFill(Double_t, Double_t) overrideaccumulate arguments in buffer.Definition TProfile2D.h:44; TProfile2D::fTsumwzDouble_t fTsumwzTotal Sum of weight*Z.Definition TProfile2D.h:39; TProfile2D::FillInt_t Fill(const Double_t *v)Definition TProfile2D.h:51; TProfile2D::IsATClass * IsA() const overrideDefinition TProfile2D.h:153; TProfile2D::ProjectionXYTH2D * ProjectionXY(const char *name=""_pxy"", Option_t *option=""e"") constProject this profile2D into a 2-D histogram along X,Y.Definition TProfile2D.cxx:1287; TProfile2D::MultiplyBool_t Multiply(TF1 *h1, Double_t c1=1) overridePerforms the operation: this = this*c1*f1.Definition TProfile2D.cxx:1235; TProfile2D::LabelsDeflatevoid LabelsDeflate(Option_t *axis=""X"") overrideReduce the number of bins for this axis to the number of bins having a label.Definition TProfile2D.cxx:980; TProfile2D::GetBinErrorDouble_t GetBinError(Int_t bin) const overrideReturn bin error of a Profile2D histogram.Definition TProfile2D.cxx:881; TProfile2D::Approximatestatic void Approximate(Bool_t approx=kTRUE)Static function, set the fgApproximate flag.Definition TProfile2D.cxx:277; TProfile2D::fErrorModeEErrorType fErrorModeOption to compute errors.Definition TProfile2D.h:35; TProfile2D::fZminDouble_t fZminLower limit in Z (if set)Definition TProfile2D.h:36; TProfile2D::RebinXTProfile2D * RebinX(Int_t ngroup=2, const char *newname="""") overrideRebin only the X axis.Definition TProfile2D.cxx:1837; TProfile2D::GetW2Double_t * GetW2()Definition TProfile2D.h:66; TProfile2D::fScalingBool_t fScaling! True when TProfile2D::Scale is calledDefinition TProfile2D.h:38; TProfile2D::GetBinEffectiveEntriesvirtual Double_t GetBinEffectiveEntries(Int_t bin)Return bin effective entries for a weighted filled Profile histogram.Definition TProfile2D.cxx:858; TProfile2D::GetErrorOptionOption_t * GetErrorOption() constReturn option to compute profile2D erro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:87719,error,error,87719,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,1,['error'],['error']
Availability,"placeAll(""MULTIPROC"","""");; 716 // }; 717 ; 718 if (opt.Contains(""SERIAL"")) {; 719 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kSequential;; 720 opt.ReplaceAll(""SERIAL"","""");; 721 }; 722 ; 723 if (opt.Contains(""MULTITHREAD"")) {; 724 fitOption.ExecPolicy = ROOT::EExecutionPolicy::kMultiThread;; 725 opt.ReplaceAll(""MULTITHREAD"","""");; 726 }; 727 ; 728 if (opt.Contains(""I"")) fitOption.Integral= 1; // integral of function in the bin (no sense for graph); 729 if (opt.Contains(""W"")) fitOption.W1 = 1; // all non-empty bins or points have weight =1 (for chi2 fit); 730 if (opt.Contains(""WW"")) fitOption.W1 = 2; //all bins have weight=1, even empty bins; 731 if (opt.Contains(""L"")) fitOption.Like = 1;; 732 if (opt.Contains(""X"")) fitOption.Chi2 = 1;; 733 if (opt.Contains(""P"")) {; 734 fitOption.PChi2 = 1;; 735 if (fitOption.W1) { // option contains also w is a weighted Pearson chi2 fit; 736 fitOption.PChi2 = 2;; 737 fitOption.W1 = 0; // does not make sense to have errors=1 in Pearson chi2 fits; 738 }; 739 }; 740 ; 741 // specific likelihood fit options; 742 if (fitOption.Like == 1) {; 743 //if (opt.Contains(""LL"")) fitOption.Like = 2;; 744 if (opt.Contains(""W"")){ fitOption.Like = 2; fitOption.W1=0;}// (weighted likelihood); 745 if (opt.Contains(""MULTI"")) {; 746 if (fitOption.Like == 2) fitOption.Like = 6; // weighted multinomial; 747 else fitOption.Like = 4; // multinomial likelihood fit instead of Poisson; 748 opt.ReplaceAll(""MULTI"","""");; 749 }; 750 // give precedence for likelihood options; 751 if (fitOption.Chi2 || fitOption.PChi2 ); 752 Warning(""Fit"",""Cannot use P or X option in combination of L. Ignore the chi2 option and perform a likelihood fit"");; 753 }; 754 }; 755 // specific Graph options (need to be parsed before); 756 else if (type == EFitObjectType::kGraph) {; 757 opt.ReplaceAll(""ROB"", ""H"");; 758 opt.ReplaceAll(""EX0"", ""T"");; 759 ; 760 //for robust fitting, see if # of good points is defined; 761 // decode parameters for robust fitting; 762 Double_t h=0;; 763 if (opt.C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:27224,error,errors,27224,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['error'],['errors']
Availability,"placementVector3D classes, v3 is the same type of v1; a is a scalar value); v1 += v2;; v1 -= v2;; v1 = - v2;; v1 *= a;; v1 /= a;; v2 = a * v1;; v2 = v1 / a;; v2 = v1 * a;; v3 = v1 + v2;; v3 = v1 - v2;; 13.12.2.5 Comparison; For v1 and v2 of the same type (same coordinate system and same scalar type):; v1 == v2;; v1 != v2;; 13.12.2.6 Dot and Cross Product; We support the dot and cross products, through the Dot() and Cross() method, with any vector (q) implementing x(), y() and z().; XYZVector v1(x,y,z);; double s = v1.Dot(q);; XYZVector v2 = v1.Cross(q);; Note that the multiplication between two vectors using the operator * is not supported because it is ambiguous.; 13.12.2.7 Other Methods; XYZVector u = v1.Unit(); //return unit vector parallel to v1; 13.12.3 Example: 3D Point Classes; To use all possible types of 3D points one must include the header file Math/Point3D.h. The following typedef’s defined in the header file Math/Point3Dfwd.h, are available for different instantiations of the template class ROOT::Math::PositionVector3D:. ROOT::Math::XYZPoint point based on x, y, z coordinates (Cartesian) in double precision; ROOT::Math::XYZPointF point based on x, y, z coordinates (Cartesian) in float precision; ROOT::Math::Polar3DPoint point based on r, theta, phi coordinates (polar) in double precision; ROOT::Math::Polar3DPointF point based on r, theta, phi coordinates (polar) in float precision; ROOT::Math::RhoZPhiPoint point based on rho, z, phi coordinates (cylindrical using z) in double precision; ROOT::Math::RhoZPhiPointF point based on rho, z, phi coordinates (cylindrical using z) in float precision; ROOT::Math::RhoEtaPhiPoint point based on rho, eta, phi coordinates (cylindrical using eta instead of z) in double precision; ROOT::Math::RhoEtaPhiPointF point based on rho, eta, phi coordinates (cylindrical using eta instead of z) in float precision. 13.12.3.1 Constructors and Assignment; The following declarations are available:; XYZPoint p1; //an empty vector (x=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:732894,avail,available,732894,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"plate<class FunctionType > . ROOT::Math::BasicFitMethodFunction< FunctionType >::~BasicFitMethodFunction ; (; ). inlineoverride . Virtual Destructor (no operations) ; Definition at line 58 of file FitMethodFunction.h. Member Function Documentation. ◆ DataElement(). template<class FunctionType > . virtual double ROOT::Math::BasicFitMethodFunction< FunctionType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. pure virtual . method returning the data i-th contribution to the fit objective function For example the residual for the least square functions or the pdf element for the likelihood functions. ; Estimating also the gradient of the data element if the passed pointer is not null and the Hessian. The flag fullHessian is set when one needs to compute the full Hessian (not the approximated one) and should be used when the full second derivatives of the model functions are available ; Implemented in ROOT::Fit::PoissonLikelihoodFCN< DerivFunType, ModelFunType >, ROOT::Fit::Chi2FCN< DerivFunType, ModelFunType >, and ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >. ◆ G2(). template<class FunctionType > . virtual bool ROOT::Math::BasicFitMethodFunction< FunctionType >::G2 ; (; const double * ; , . double * ;  . ); const. inlinevirtual . Computes the Second derivatives. ; Return false if this is not supported ; Definition at line 104 of file FitMethodFunction.h. ◆ HasHessian(). template<class FunctionType > . virtual bool ROOT::Math::BasicFitMethodFunction< FunctionType >::HasHessian ; (; ); const. inlinevirtual . Reimplemented in ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >, ROOT::Fit::BasicFCN< DerivFunType, ROOT::Math::IParamMultiFunction, BinData >, and ROOT::Fit::BasicFCN< DerivFunType, ROOT::Math::IParamMultiFunction, UnBinData >.; Definition at line 76 of file FitMethodFunction.h. ◆ Hessian(). template<class FunctionType > . virtual bool R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html:4571,avail,available,4571,doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicFitMethodFunction.html,1,['avail'],['available']
Availability,"play the; palette axis values are taken from the Z axis of the object. For example, to; set the labels size on the palette axis do:. hist->GetZaxis()->SetLabelSize(). WARNING: The palette axis is always drawn vertically.; Setting the color palette; To change the color palette TStyle::SetPalette should be used, eg:. gStyle->SetPalette(ncolors,colors);. For example the option ""COL"" draws a 2D histogram with cells; represented by a box filled with a color index which is a function; of the cell content.; If the cell content is N, the color index used will be the color number; in colors[N], etc. If the maximum cell content is greater than; ncolors, all cell contents are scaled to ncolors.; If ncolors <= 0, a default palette (see below) of 50 colors is; defined. This palette is recommended for pads, labels ...; if ncolors == 1 && colors == 0, then a Pretty Palette with a; Spectrum Violet->Red is created with 50 colors. That's the default rain bow; palette. Other prefined palettes with 255 colors are available when colors == 0.; The following value of ncolors give access to:. if ncolors = 51 and colors=0, a Deep Sea palette is used.; if ncolors = 52 and colors=0, a Grey Scale palette is used.; if ncolors = 53 and colors=0, a Dark Body Radiator palette is used.; if ncolors = 54 and colors=0, a two-color hue palette palette is used.(dark blue through neutral gray to bright yellow); if ncolors = 55 and colors=0, a Rain Bow palette is used.; if ncolors = 56 and colors=0, an inverted Dark Body Radiator palette is used. If ncolors > 0 && colors == 0, the default palette is used; with a maximum of ncolors.; The default palette defines:. index 0 to 9 : shades of grey; index 10 to 19 : shades of brown; index 20 to 29 : shades of blue; index 30 to 39 : shades of red; index 40 to 49 : basic colors. The color numbers specified in the palette can be viewed by selecting; the item ""colors"" in the ""VIEW"" menu of the canvas tool bar.; The red, green, and blue components of a color can be c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:64294,avail,available,64294,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,3,['avail'],['available']
Availability,"ple ""x++sin(y)"" for fitting ""[0]*x+[1]*sin(y)"". TFitResultPtr Fit(TF2* f2, Option_t* option = """", Option_t* goption = """"); Fits this 2D graph with function f2. f2 is an already predefined function created by TF2.; Predefined functions such as gaus, expo and poln are automatically; created by ROOT. The list of fit options is given in parameter option.; option = ""W"" Set all weights to 1; ignore error bars; = ""U"" Use a User specified fitting algorithm (via SetFCN); = ""Q"" Quiet mode (minimum printing); = ""V"" Verbose mode (default is between Q and V); = ""R"" Use the Range specified in the function range; = ""N"" Do not store the graphics function, do not draw; = ""0"" Do not plot the result of the fit. By default the fitted function; is drawn unless the option ""N"" above is specified.; = ""+"" Add this new fitted function to the list of fitted functions; (by default, any previous function is deleted); = ""C"" In case of linear fitting, not calculate the chisquare; (saves time); = ""EX0"" When fitting a TGraphErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph2d; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF2 *f2 = new TF2(""f2"",""gaus"",1,3);; graph2d->Fit(""f2"",""R"");. Setting initial conditions. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus. One can however disable; this automatic computation by specifying the option ""B"".; You can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2D.html:22050,error,errors,22050,root/html528/TGraph2D.html,https://root.cern,https://root.cern/root/html528/TGraph2D.html,12,"['error', 'robust']","['errors', 'robust']"
Availability,"ple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestion",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMD5.html:4410,error,error,4410,root/html534/TMD5.html,https://root.cern,https://root.cern/root/html534/TMD5.html,1,['error'],['error']
Availability,"ple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2010-09-23 20:17; This page has been automatical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMD5.html:4405,error,error,4405,root/html528/TMD5.html,https://root.cern,https://root.cern/root/html528/TMD5.html,1,['error'],['error']
Availability,"ple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2011-07-04 15:33; This page has been automatical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMD5.html:4405,error,error,4405,root/html530/TMD5.html,https://root.cern,https://root.cern/root/html530/TMD5.html,1,['error'],['error']
Availability,"ple of 4. void Transform(UInt_t* buf, const UChar_t* in); The core of the MD5 algorithm, this alters an existing MD5 hash to; reflect the addition of 16 longwords of new data. Update() blocks; the data and converts bytes into longwords for this routine. Int_t SetDigest(const char* md5ascii); Set the digest from the ASCII representation 'md5ascii'. The caller; is responsible to make sure that the 32 chars md5ascii are valid.; Returns -1 if md5ascii is malformed, returns 0 otherwise. TMD5 * ReadChecksum(const char* file); Returns checksum stored in ASCII in specified file. Use to read files; created via WriteChecksum(). The returned TMD5 object must be deleted; by the user. Returns 0 in case the file cannot be opened or in case of; error. Static utlity function. Int_t WriteChecksum(const char* file, const TMD5* md5); Writes checksum in ASCII format to specified file. This file can; directly be read by ReadChecksum(). The md5 must have been finalized.; Returns -1 in case file cannot be opened or in case of error,; 0 otherwise. Static utility function. TMD5 * FileChecksum(const char* file); Returns checksum of specified file. The returned TMD5 object must; be deleted by the user. Returns 0 in case the file does not exists; or in case of error. This function preserves the modtime of the file; so it can be safely used in conjunction with methods that keep track; of the file's modtime. Static utility function. Int_t FileChecksum(const char* file, UChar_t* digest); Returns checksum of specified file in digest argument. Returns -1 in; case of error, 0 otherwise. This method preserves the modtime of the; file so it can be safely used in conjunction with methods that keep; track of the file's modtime. Static utility function. virtual ~TMD5(); { }. » Author: Fons Rademakers 29/9/2001 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TMD5.h 33386 2010-05-05 13:41:15Z rdm $ » Last generated: 2011-11-03 20:19; This page has been automatical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMD5.html:4405,error,error,4405,root/html532/TMD5.html,https://root.cern,https://root.cern/root/html532/TMD5.html,1,['error'],['error']
Availability,"plement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:22201,error,error,22201,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['error'],['error']
Availability,"plement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:9902,error,error,9902,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['error'],['error']
Availability,"plementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector.; Definition at line 48 of file TSelHandleDataSet.h. ◆ Process(). Bool_t TSelHandleDataSet::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 165 of file TSelHandleDataSet.cxx. ◆ ReleaseCache(). void TSelHandleDataSet::ReleaseCache ; (; const char * ; fn). private . Release the memory cache associated with file 'fn'. ; Definition at line 74 of file TSelHandleDataSet.cxx. ◆ RemoveFile(). void TSelHandleDataSet::RemoveFile ; (; const char * ; fn). private . Physically remove the file 'fn'. ; Definition at line 109 of file TSelHandleDataSet.cxx. ◆ SetInputList(). void TSelHandleDataSet::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 52 of file TSelHandleDataSet.h. ◆ SetObject(). void TSelHandleDataSet::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelHandleDataSet.html:16318,avail,available,16318,doc/master/classTSelHandleDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelHandleDataSet.html,1,['avail'],['available']
Availability,"plemented from TSystem.; Definition at line 3298 of file TUnixSystem.cxx. ◆ Closelog(). void TUnixSystem::Closelog ; (; ). overridevirtual . Close connection to system log daemon. ; Reimplemented from TSystem.; Definition at line 2663 of file TUnixSystem.cxx. ◆ ClosePipe(). int TUnixSystem::ClosePipe ; (; FILE * ; pipe). overridevirtual . Close the pipe. ; Reimplemented from TSystem.; Definition at line 2171 of file TUnixSystem.cxx. ◆ ConnectService(). int TUnixSystem::ConnectService ; (; const char * ; server, . int ; port, . int ; tcpwindowsize, . const char * ; protocol = ""tcp"" . ). Connect to service servicename on server servername. ; Definition at line 3201 of file TUnixSystem.cxx. ◆ CopyFile(). int TUnixSystem::CopyFile ; (; const char * ; f, . const char * ; t, . Bool_t ; overwrite = kFALSE . ). overridevirtual . Copy a file. ; If overwrite is true and file already exists the file will be overwritten. Returns 0 when successful, -1 in case of file open failure, -2 in case the file already exists and overwrite was false and -3 in case of error during copy. ; Reimplemented from TSystem.; Definition at line 1598 of file TUnixSystem.cxx. ◆ DeclFileName(). static const char * TUnixSystem::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 219 of file TUnixSystem.h. ◆ DispatchOneEvent(). void TUnixSystem::DispatchOneEvent ; (; Bool_t ; pendingOnly = kFALSE). overridevirtual . Dispatch a single event. ; Reimplemented from TSystem.; Definition at line 1093 of file TUnixSystem.cxx. ◆ DispatchSignals(). void TUnixSystem::DispatchSignals ; (; ESignals ; sig). Handle and dispatch signals. ; Definition at line 3648 of file TUnixSystem.cxx. ◆ DispatchTimers(). Bool_t TUnixSystem::DispatchTimers ; (; Bool_t ; mode). Handle and dispatch timers. ; If mode = kTRUE dispatch synchronous timers else a-synchronous timers. ; Definition at line 2979 of file TUnixSystem.cxx. ◆ DynFindSymbol(). Func_t TUnixSystem::DynFindS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnixSystem.html:44047,failure,failure,44047,doc/master/classTUnixSystem.html,https://root.cern,https://root.cern/doc/master/classTUnixSystem.html,2,"['error', 'failure']","['error', 'failure']"
Availability,"plemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 8767 of file TH1.cxx. ◆ SetBins() [5/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax . ). virtual . Redefine x and y axis parameters. ; The X and Y axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile2D, TProfile, and TProfile3D.; Definition at line 8820 of file TH1.cxx. ◆ SetBins() [6/6]. void TH1::SetBins ; (; Int_t ; nx, . Double_t ; xmin, . Double_t ; xmax, . Int_t ; ny, . Double_t ; ymin, . Double_t ; ymax, . Int_t ; nz, . Double_t ; zmin, . Double_t ; zmax . ). virtual . Redefine x, y and z axis parameters. ; The X, Y and Z axis parameters are modified. The bins content array is resized if errors (Sumw2) the errors array is resized The previous bin contents are lost To change only the axis limits, see TAxis::SetRange ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8875 of file TH1.cxx. ◆ SetBinsLength(). virtual void TH1::SetBinsLength ; (; Int_t ; = -1). inlinevirtual . Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 380 of file TH1.h. ◆ SetBuffer(). void TH1::SetBuffer ; (; Int_t ; buffersize, . Option_t * ; option = """" . ). virtual . Set the maximum number of entries to be kept in the buffer. ; Reimplemented in TProfile3D, TProfile, and TProfile2D.; Definition at line 8458 of file TH1.cxx. ◆ SetCanExtend(). UInt_t TH1::SetCanExtend ; (; UInt_t ; extendBitMask). virtual . Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ; Definition at line 6649 of file TH1.cxx. ◆ SetCellContent(). vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:207993,error,errors,207993,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['error'],['errors']
Availability,"plemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 500 of file TSocket.cxx. ◆ Send() [2/4]. Int_t TSocket::Send ; (; const TMessage & ; mess). virtual . Send a TMessage object. ; Returns the number of bytes in the TMessage that were sent and -1 in case of error. In case the TMessage::What has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Reimplemented in TServerSocket, TPSocket, and TSSLSocket.; Definition at line 522 of file TSocket.cxx. ◆ Send() [3/4]. Int_t TSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 463 of file TSocket.cxx. ◆ Send() [4/4]. Int_t TSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Reimplemented in TPSocket, TSSLSocket, and TServerSocket.; Definition at line 481 of file TSocket.cxx. ◆ SendObject(). Int_t TSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocket.html:36239,error,error,36239,doc/master/classTSocket.html,https://root.cern,https://root.cern/doc/master/classTSocket.html,1,['error'],['error']
Availability,"plemented using the routines FitUtil::EvaluateChi2 or FitUtil::EvaluatePoissonLogL in; 4214/// the file math/mathcore/src/FitUtil.cxx.; 4215/// It is possible to specify a user defined fitting function, using option ""U"" and; 4216/// calling the following functions:; 4217///; 4218/// ~~~ {.cpp}; 4219/// TVirtualFitter::Fitter(myhist)->SetFCN(MyFittingFunction);; 4220/// ~~~; 4221///; 4222/// where MyFittingFunction is of type:; 4223///; 4224/// ~~~ {.cpp}; 4225/// extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; 4226/// ~~~; 4227///; 4228/// #### Note on treatment of empty bins; 4229///; 4230/// Empty bins, which have the content equal to zero AND error equal to zero,; 4231/// are excluded by default from the chi-square fit, but they are considered in the likelihood fit.; 4232/// since they affect the likelihood if the function value in these bins is not negligible.; 4233/// Note that if the histogram is having bins with zero content and non zero-errors they are considered as; 4234/// any other bins in the fit. Instead bins with zero error and non-zero content are by default excluded in the chi-squared fit.; 4235/// In general, one should not fit a histogram with non-empty bins and zero errors.; 4236///; 4237/// If the bin errors are not known, one should use the fit option ""W"", which gives a weight=1 for each bin (it is an unweighted least-square; 4238/// fit). When using option ""WW"" the empty bins will be also considered in the chi-square fit with an error of 1.; 4239/// Note that in this fitting case (option ""W"" or ""WW"") the resulting fitted parameter errors; 4240/// are corrected by the obtained chi2 value using this scaling expression:; 4241/// `errorp *= sqrt(chisquare/(ndf-1))` as it is done when fitting a TGraph with; 4242/// no point errors.; 4243///; 4244/// #### Excluding points; 4245///; 4246/// You can use TF1::RejectPoint inside your fitting function to exclude some points; 4247/// within a certain range ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:174804,error,errors,174804,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['errors']
Availability,"pler& sampler); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0, central limits use 0.5,; for upper/lower limits it is 0/1 depends on sign of test statistic w.r.t. parameter. {fLeftSideFraction = leftSideFraction;}. void SetParameterPointsToTest(RooAbsData& pointsToTest); User-defined set of points to test. Double_t Size() const; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (common for each dimension); void SetNumSteps(Int_t);; This class can make regularly spaced scans based on range stored in RooRealVars.; Choose number of steps for a rastor scan (specific for each dimension); void SetNumSteps(map<RooAbsArg, Int_t>); Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetModel(const RooStats::ModelConfig& model); Set ModelConfig. {fModel = model;}. void SetData(RooAbsData& data); Set the DataSet. { fData = data; }. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. ConfidenceBelt* GetConfidenceBelt(); get confidence belt. {return fConfBelt;}. void UseAdaptiveSampling(bool flag = true); adaptive sampling algorithm t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__NeymanConstruction.html:5997,error,error,5997,root/html528/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html528/RooStats__NeymanConstruction.html,3,['error'],['error']
Availability,"ples. (b) correlated shifts of the input matrix histA. These shifts are taken; as one-sigma effects when switchig on a given error soure.; several such error sources may be defined. (c) a systematic error on the regularisation parameter tau. (d) uncorrelated errors on background sources, taken as the errors; provided with the background histograms. (e) scale errors on background sources. In addition there is the (statistical) uncertainty of the input vector (i). Source (a) is providede with the original histogram histA; TUnfoldSys(histA,...). Sources (b) are added by calls to; AddSysError(). The systematic uncertainty on tau (c) is set by; SetTauError(). Backgound sources causing errors of type (d) and (e) are added by; SubtractBackground(). NOTE:. Systematic errors (a), (b), (c) are propagated to the result; AFTER unfolding. Background errors (d) and (e) are added to the data errors; BEFORE unfolding. For this reason:; errors of type (d) and (e) are INCLUDED in the standard error matrix; and other methods provided by the base class TUnfold:; GetOutput(); GetEmatrix(). whereas errors of type (a), (b), (c) are NOT INCLUDED in the methods; provided by the base class TUnfold. Accessing error matrices:. The error sources (b),(c) and (e) propagate to shifts of the result.; These shifts may be accessed as histograms using the methods; GetDeltaSysSource() corresponds to (b); GetDeltaSysTau() corresponds to (c); GetDeltaSysBackgroundScale() corresponds to (e); The error sources (a) and (d) originate from many uncorrelated errors,; which in general are NOT uncorrelated on the result vector.; Thus, there is no corresponding shift of the output vector, only error; matrices are available. Method to get error matrix corresponds to error sources. GetEmatrixSysUncorr() (a); GetEmatrixSysSource() (b); GetEmatrixSysTau() (c); GetEmatrixSysBackgroundUncorr() (d); GetEmatrixSysBackgroundScale() (e); GetEmatrixInput() (i); GetEmatrix() (i)+(d)+(e); GetEmatrixTotal() (i)+(a)+(b)+(c)+(d)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldSys.html:2058,error,errors,2058,root/html534/TUnfoldSys.html,https://root.cern,https://root.cern/root/html534/TUnfoldSys.html,6,['error'],"['error', 'errors']"
Availability,"plexType : short. strong . EnumeratorkNone ; kDouble ; kFloat ; kInt ; kLong . Definition at line 111 of file TClassEdit.h. ◆ EModType. enum TClassEdit::EModType. EnumeratorkNone ; kDropTrailStar ; kDropDefaultAlloc ; kDropAlloc ; kInnerClass ; kInnedMostClass ; kDropStlDefault ; kDropComparator ; kDropAllDefault ; kLong64 ; kDropStd ; kKeepOuterConst ; kResolveTypedef ; kDropPredicate ; kDropHash . Definition at line 75 of file TClassEdit.h. ◆ ESTLType. enum TClassEdit::ESTLType. EnumeratorkNotSTL ; kVector ; kList ; kForwardlist ; kDeque ; kMap ; kMultiMap ; kSet ; kMultiSet ; kUnorderedSet ; kUnorderedMultiSet ; kUnorderedMap ; kUnorderedMultiMap ; kBitSet ; kEnd . Definition at line 93 of file TClassEdit.h. Function Documentation. ◆ CleanType(). string TClassEdit::CleanType ; (; const char * ; typeDesc, . int ; mode = 0, . const char ** ; tail = nullptr . ). Cleanup type description, redundant blanks removed and redundant tail ignored return *tail = pointer to last used character if (mode==0) keep keywords if (mode==1) remove keywords outside the template params if (mode>=2) remove the keywords everywhere. ; if (tail!=0) cut before the trailing *; The keywords currently are: ""const"" , ""volatile"" removed; CleanType("" A<B, C< D, E> > *,F,G>"") returns ""A<B,C<D,E> >*"" ; Definition at line 1232 of file TClassEdit.cxx. ◆ DemangleName(). char * TClassEdit::DemangleName ; (; const char * ; mangled_name, . int & ; errorCode . ). inline . Definition at line 208 of file TClassEdit.h. ◆ DemangleTypeIdName(). char * TClassEdit::DemangleTypeIdName ; (; const std::type_info & ; ti, . int & ; errorCode . ). Demangle in a portable way the type id name. ; IMPORTANT: The caller is responsible for freeing the returned const char* ; Definition at line 2148 of file TClassEdit.cxx. ◆ GetComplexType(). TClassEdit::EComplexType TClassEdit::GetComplexType ; (; const char * ; clName). Definition at line 137 of file TClassEdit.cxx. ◆ GetLong64_Name() [1/2]. string TClassEdit::GetLong64_Name",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTClassEdit.html:7017,redundant,redundant,7017,doc/master/namespaceTClassEdit.html,https://root.cern,https://root.cern/doc/master/namespaceTClassEdit.html,2,['redundant'],['redundant']
Availability,"plitlevel); 1604{; 1605 if (!ptrClass) {; 1606 Error(""Branch"", ""The pointer specified for %s is not of a class known to ROOT"", branchname);; 1607 return nullptr;; 1608 }; 1609 TClass* actualClass = nullptr;; 1610 void** addr = (void**) addobj;; 1611 if (addr && *addr) {; 1612 actualClass = ptrClass->GetActualClass(*addr);; 1613 if (!actualClass) {; 1614 Warning(""Branch"", ""The actual TClass corresponding to the object provided for the definition of the branch \""%s\"" is missing.\n\tThe object will be truncated down to its %s part"",; 1615 branchname, ptrClass->GetName());; 1616 actualClass = ptrClass;; 1617 } else if ((ptrClass != actualClass) && !actualClass->InheritsFrom(ptrClass)) {; 1618 Error(""Branch"", ""The actual class (%s) of the object provided for the definition of the branch \""%s\"" does not inherit from %s"", actualClass->GetName(), branchname, ptrClass->GetName());; 1619 return nullptr;; 1620 }; 1621 } else {; 1622 actualClass = ptrClass;; 1623 }; 1624 if (actualClass && actualClass->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(actualClass->GetCollectionProxy())) {; 1625 Error(""Branch"", writeStlWithoutProxyMsg,; 1626 actualClass->GetName(), branchname, actualClass->GetName());; 1627 return nullptr;; 1628 }; 1629 return Branch(branchname, actualClass->GetName(), (void*) addobj, bufsize, splitlevel);; 1630}; 1631 ; 1632////////////////////////////////////////////////////////////////////////////////; 1633/// Same as TTree::Branch but automatic detection of the class name.; 1634/// \see TTree::Branch for other details.; 1635 ; 1636TBranch* TTree::BranchImpRef(const char* branchname, const char *classname, TClass* ptrClass, void *addobj, Int_t bufsize, Int_t splitlevel); 1637{; 1638 TClass* claim = TClass::GetClass(classname);; 1639 if (!ptrClass) {; 1640 if (claim && claim->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(claim->GetCollectionProxy())) {; 1641 Error(""Branch"", writeStlWithoutProxyMsg,; 1642 claim->GetName(), branch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:60949,down,down,60949,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['down'],['down']
Availability,"plitter ;  ; Int_t fMax;  max x position frame can be resized to ;  ; Int_t fMin;  min x position frame can be resized to ;  ; Int_t fStartX;  x position when dragging starts ;  ;  Protected Attributes inherited from TGSplitter; Bool_t fDragging;  true if in dragging mode ;  ; Bool_t fExternalHandler;  true when splitter movement is handled externally ;  ; Cursor_t fSplitCursor;  split cursor ;  ; const TGPicture * fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Private Member Functions;  TGVSplitter (const TGVSplitter &)=delete;  ; TGVSplitter & operator= (const TGVSplitter &)=delete;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 ))",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVSplitter.html:23351,mask,mask,23351,doc/master/classTGVSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVSplitter.html,1,['mask'],['mask']
Availability,"plitter ;  ; Int_t fMax;  max x position frame can be resized to ;  ; Int_t fMin;  min x position frame can be resized to ;  ; Int_t fStartX;  x position when dragging starts ;  ;  Protected Attributes inherited from TGSplitter; Bool_t fDragging;  true if in dragging mode ;  ; Bool_t fExternalHandler;  true when splitter movement is handled externally ;  ; Cursor_t fSplitCursor;  split cursor ;  ; const TGPicture * fSplitterPic;  picture to draw splitter ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TGFrame; static const TGGC * fgBckgndGC = nullptr;  ; static const TGGC * fgBlackGC = nullptr;  ; static Pixel_t fgBlackPixel = 0;  ; static Window_t fgDbw = 0;  ; static Int_t fgDbx = 0;  ; static Int_t fgDby = 0;  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGVFileSplitter.html:28387,mask,mask,28387,doc/master/classTGVFileSplitter.html,https://root.cern,https://root.cern/doc/master/classTGVFileSplitter.html,1,['mask'],['mask']
Availability,"plitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;�����������",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:45922,error,error,45922,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['error'],['error']
Availability,"ploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Doxygen filter allowing to execute macros given as examples in the documentation and show the resulting picture directly in the documentation.; Tutorials; The tutorials in $ROOTSYS/tutorials are also presented on the web thanks to Doxygen. They are now part of the reference guide allowing nice cross-referencing with the classes documentation. Here also a filter has been developed to generate the resulting picture.; Build, Configuration and Testing Infrastructure; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the project, it generates the files needed by your build tool (GNU make, Ninja, Visual Studio, etc) for building ROOT. The classic build with configure/make is is still available but it will not be evolving with the new features of ROOT.; We added full support for C++14.; Minor changes in the build system:. Renamed build option POSTGRESQL_LIBRARIES to POSTGRESQL_LIBRARY; Added build option builtin_openssl to build OpenSSL internally. This is specially needed for the latest Mac OSX (El Capitan). Patch Releases; Release 6.06/02; Core. Make TListOfFunctions::Get thread-safe; Make TPluginManager thread-safe ROOT-7927; Properly handle the case of an executable with a space in its full pathname when search for linked in library. This fixes ROOT-8019. Dictionaries. Fix ROOT-7879: Prevent LinkDef files to be listed in a rootmap file and use (as the user actually expects) the header files #included in the linkdef file, if any, as the top level headers. Interpreter. Ignore access check when evaluating ROOT-7426. Meta Library; Add a new mode for TClass::SetCanSplit (2) which indicates that this class and any derived class should not be split. This included a rework the m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:23914,avail,available,23914,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['avail'],['available']
Availability,"plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selecor is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Return 0 on success, -1 on error. void SetProofDS(TProof* p); Set the PROOF instance to be used for dataset operations, like releasing; cache ...; Use SetProofDS(0) to reset and using the default PROOF. TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0). void CloseOutFile(); { SetOutFile(0); }. const char * GetOutFileName() const; { return fOutFileName; }. void SetNTries(Int_t nt); { if (nt > 0) fNtries = nt; }. void SetHistType(TPBHistType* histtype); { fHistType = histtype; }. void SetNHist(Int_t nh); { fNHist = nh; }. void SetReadType(TPBReadType* readtype); { fReadType = readtype; }. void SetCPUSel(const char* sel); { fCPUSel = sel; }. void SetCPUPar(const char* par); { fCPUPar = par; }. void SetDataSel(const char* sel); { fDataSel = sel; }. voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:10397,error,error,10397,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['error'],['error']
Availability,"plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selecor is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofBench.html:9642,error,error,9642,root/html530/TProofBench.html,https://root.cern,https://root.cern/root/html530/TProofBench.html,1,['error'],['error']
Availability,"plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenOar to change it; and to pass the list of PARs defining the alternative selector.; These can be changed via dset, sel and fnroot, respectively.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:9773,error,error,9773,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,1,['error'],['error']
Availability,"plots available in https://doi.org/10.48550/arXiv.1908.0; // The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values; // covered by the analysis.; const std::vector<double> x{5.50e3, 5.52e3, 12.54e3, 17.43e3, 22.40e3, 27.48e3, 30e3, 10000e3};; const std::vector<double> y{0.06628, 0.06395, 0.06396, 0.03372, 0.02441, 0.01403, 0, 0};; TGraph graph(x.size(), x.data(), y.data());; ; // Use the Vary method to add the systematic variations to the total MC scale factor (""weight"") of the analysis; // The input consists of the input column to be varied and the lambda function to compute the systematic variations.; // The new output columns contain the varied values of the input column.; auto df_with_variations_mc =; df_mc; .Vary(""weight"",; [&graph](double x, const RVecF &pt, const RVec<unsigned int> &type) {; const auto v = Mean(Map(pt[type == 11], [&graph](auto p) { return graph.Eval(p); }));; return RVec<double>{(1 + v) * x, (1 - v) * x};; },; {""weight"", ""goodlep_pt"", ""goodlep_type""}, {""up"", ""down""}); .Histo1D<float>(ROOT::RDF::TH1DModel(""Invariant Mass"", ""m4l"", 24, 80, 170), ""m4l"", ""weight"");; ; // Create the total MC scale factor histograms: ""nominal"", ""weight:up"" and ""weight:down"".; auto histos_mc = VariationsFor(df_with_variations_mc);; ; // Evaluate the total MC uncertainty based on the variations. Note, in this case the uncertainties are symmetric.; for (unsigned int i = 0; i < histos_mc[""nominal""].GetXaxis()->GetNbins(); i++) {; histos_mc[""nominal""].SetBinError(; i, (histos_mc[""weight:up""].GetBinContent(i) - histos_mc[""nominal""].GetBinContent(i)));; }; ; // Make the plot of the data, individual MC contributions and the total MC scale factor systematic variations.; gROOT->SetStyle(""ATLAS"");; ; // Create canvas with pad; auto c = new TCanvas(""c"", "" "", 600, 600);; auto pad = new TPad(""upper_pad"", """", 0, 0, 1, 1);; pad->SetTickx(0);; pad->SetTicky(0);; pad->Draw();; pad->cd();; ; // Draw stack with MC contributions; //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html:9186,down,down,9186,doc/master/df106__HiggsToFourLeptons_8C.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8C.html,1,['down'],['down']
Availability,"plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData_left,fit_nll_model_modelData_right'; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'leftToMiddle' created with bounds [0,5]; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData' created with bounds [0,5]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -1620.17, estimated distance to minimum: 0.000658484; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a0 7.0685e-01 +/- 7.00e-01; a1 2.2397e-01 +/- 6.03e-01; nbkg 7.1175e+02 +/- 1.22e+03; nsig 4.4359e+02 +/- 1.28e+02; sig1frac 9.7243e-01 +/- 8.92e-01; ; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html:17513,error,error,17513,doc/master/rf204a__extendedLikelihood_8C.html,https://root.cern,https://root.cern/doc/master/rf204a__extendedLikelihood_8C.html,2,['error'],['error']
Availability,"plugin (tab and tab element). Examples:; create a new browser:; TBrowser b;; b#define b(i)Definition RSha256.hxx:100; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; create a new TCanvas in a new top right tab element:; b.ExecPlugin(""Canvas"", 0, ""new TCanvas()"");; create a new top right tab element embedding the TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"");; create a new bottom tab element embedding the TGMainFrame created by the macro 'myMacro.C':; b.ExecPlugin(""MyPlugin"", ""myMacro.C"", 0, TRootBrowser::kBottom);; TRootBrowser::kBottom@ kBottomDefinition TRootBrowser.h:121; this browser implementation can be selected via the env Browser.Name in .rootrc, (TRootBrowser or TRootBrowserLite) the default being TRootBrowserLite a list of options (plugins) for the new TRootBrowser is also specified via the env 'Browser.Options' in .rootrc, the default being: FECI; Here is the list of available options:; F: File browser; E: Text Editor; H: HTML browser C: Canvas I: I/O redirection; P: Proof; G: GL viewer . Definition at line 54 of file TRootBrowser.h. Public Types; enum  EInsertPosition { kLeft; , kRight; , kBottom; };  ; enum  ENewBrowserMessages { ;   kBrowse = 11011; , kOpenFile; , kClone; , kHelpAbout; , ;   kHelpOnBrowser; , kHelpOnCanvas; , kHelpOnMenus; , kHelpOnGraphicsEd; , ;   kHelpOnObjects; , kHelpOnPS; , kHelpOnRemote; , kNewEditor; , ;   kNewCanvas; , kNewHtml; , kExecPluginMacro; , kExecPluginCmd; , ;   kCloseTab; , kCloseWindow; , kQuitRoot. };  ;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2 )); , ;   kEditDisableLayout = (1ULL << ( 3 )); , kEditDisableResize = (1ULL << ( 4 )); , kEditDisableHeight = (1ULL << ( 5 )); , kEditDisableWidth = (1ULL << ( 6 )); , ;   kEditDisableBtnEnable = (1ULL << ( 7 )); , kEditDisableKeyEnable = (1ULL << ( 8 )). };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowser.html:1683,avail,available,1683,doc/master/classTRootBrowser.html,https://root.cern,https://root.cern/doc/master/classTRootBrowser.html,1,['avail'],['available']
Availability,"ply(const TElementPosActionT<float>& action); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual floatColNorm() const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tDeterminant() const; virtual voidDeterminant(Double_t& d1, Double_t& d2) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual floatE2Norm() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExtractRow(Int_t row, Int_t col, float* v, Int_t n = -1) const; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const Int_t*GetColIndexArray() const; virtual Int_t*GetColIndexArray(); Int_tGetColLwb() const; Int_tGetColUpb() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual voidGetMatrix2Array(float* data, Option_t* option = """") const; virtual const float*GetMatrixArray() const; virtual float*GetMatrixArray(); virtual const char*TObject::GetName() const; Int_tGetNcols() const; Int_tGetNoElements() const; Int_tGetNrows() const; virtual char*TObject::GetObjectInfo(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_float_.html:8850,error,error,8850,root/html528/TMatrixTBase_float_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_float_.html,6,['error'],['error']
Availability,"plyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::IsATClass * IsA() const overrideDefinition TGraphAsymmErrors.h:89; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErrorYlow(Int_t i) const overrideGet low error on Y.Definition TGraphAsymmErrors.cxx:1184; TGraphAsymmErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideReturns the combined error along X at point i by computing the average of the lower and upper varianc...Definition TGraphAsymmErrors.cxx:1122; TGraphAsymmErrors::TGraphAsymmErrorsTGraphAsymmErrors()TGraphAsymmErrors default constructor.Definition TGraphAsymmErrors.cxx:72; TGraphAsymmErrors::operator=TGraphAsymmErrors & operator=(const TGraphAsymmErrors &gr)TGraphAsymmErrors assignment operator.Definition TGraphAsymmErrors.cxx:93; TGraphAsymmErrors::~TGraphAsymmErrors~TGraphAsymmErrors() overrideTGraphAsymmErrors default destructor.Definition TGraphAsymmErrors.cxx:433; TGraphAsymmErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphAsymmErrors by a constant c1.Definition TGraphAsymmErrors.cxx:1274; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:63978,error,error,63978,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['error']
Availability,"pname,GetTitle(),nx,xbins->GetArray(),ny,ybins->GetArray() );; 1313 }; 1314 fXaxis.Copy(*h1->GetXaxis());; 1315 fYaxis.Copy(*h1->GetYaxis());; 1316 Bool_t computeErrors = kFALSE;; 1317 Bool_t cequalErrors = kFALSE;; 1318 Bool_t binEntries = kFALSE;; 1319 Bool_t binWeight = kFALSE;; 1320 if (opt.Contains(""b"")) binEntries = kTRUE;; 1321 if (opt.Contains(""e"")) computeErrors = kTRUE;; 1322 if (opt.Contains(""w"")) binWeight = kTRUE;; 1323 if (opt.Contains(""c=e"")) {cequalErrors = kTRUE; computeErrors=kFALSE;}; 1324 if (computeErrors || binWeight || (binEntries && fBinSumw2.fN) ) h1->Sumw2();; 1325 ; 1326 // Fill the projected histogram; 1327 Int_t bin,binx, biny;; 1328 Double_t cont;; 1329 for (binx =0;binx<=nx+1;binx++) {; 1330 for (biny =0;biny<=ny+1;biny++) {; 1331 bin = GetBin(binx,biny);; 1332 ; 1333 if (binEntries) cont = GetBinEntries(bin);; 1334 else if (cequalErrors) cont = GetBinError(bin);; 1335 else if (binWeight) cont = GetBinContent(bin) * GetBinEntries(bin);; 1336 else cont = GetBinContent(bin); // default case; 1337 ; 1338 h1->SetBinContent(bin ,cont);; 1339 ; 1340 // if option E projected histogram errors are same as profile; 1341 if (computeErrors ) h1->SetBinError(bin , GetBinError(bin) );; 1342 // in case of option W bin error is deduced from bin sum of z**2 values of profile; 1343 // this is correct only if the profile is unweighted; 1344 if (binWeight) h1->GetSumw2()->fArray[bin] = fSumw2.fArray[bin];; 1345 // in case of bin entries and profile is weighted, we need to set also the bin error; 1346 if (binEntries && fBinSumw2.fN ) {; 1347 R__ASSERT( h1->GetSumw2() );; 1348 h1->GetSumw2()->fArray[bin] = fBinSumw2.fArray[bin];; 1349 }; 1350 }; 1351 }; 1352 h1->SetEntries(fEntries);; 1353 return h1;; 1354}; 1355 ; 1356////////////////////////////////////////////////////////////////////////////////; 1357/// Project a 2-D histogram into a profile histogram along X.; 1358///; 1359/// The projection is made from the channels along the Y axis; 1360/// ranging f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:47988,error,errors,47988,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"point is outside the visible range along the Y; axis, the error bars are not drawn. This option forces error bars' drawing for; the data points outside the visible range along the Y axis (see example below). ""2""; Error rectangles are drawn. ""3""; A filled area is drawn through the end points of the vertical error bars. ""4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""5""; Error rectangles are drawn like option ""2"". In addition the contour line; around the boxes is drawn. This can be useful when boxes' fill colors are very; light or in gray scale mode. gStyle->SetErrorX(dx) controls the size of the error along x.; dx = 0 removes the error along x. gStyle->SetEndErrorSize(np) controls the size of the lines; at the end of the error bars (when option 1 is used).; By default np=1. (np represents the number of pixels).; TGraphErrors; A TGraphErrors is a TGraph with error bars. The errors are; defined along X and Y and are symmetric: The left and right errors are the same; along X and the bottom and up errors are the same along Y. Picture; Source. {; TCanvas *c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; double ey[] = {1, 0.5, 1, 0.5, 1};; TGraphErrors* ge = new TGraphErrors(5, x, y, ex, ey);; ge->Draw(""ap"");; return c4;; }; The option ""0"" shows the error bars for data points outside range. Picture; Source. {; TCanvas *c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; float x[] = {1,2,3};; float err_x[] = {0,0,0};; float err_y[] = {5,5,5};; float y[] = {1,4,9};; TGraphErrors tg(3,x,y,err_x,err_y);; c48->Divide(2,1);; c48->cd(1); gPad->DrawFrame(0,0,4,8); tg.Draw(""PC"");; c48->cd(2); gPad->DrawFrame(0,0,4,8); tg.Draw(""0PC"");; return c48;; }; The option ""3"" shows the errors as a band. Picture; Source. {; TCanvas *c41 = new TCanvas(""c41"",""c41"",200,10,600,400);; double x[] = {0, 1, 2, 3, 4};; double y[] = {0, 2, 4, 1, 3};; double ex[] = {0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraphPainter.html:7223,error,errors,7223,root/html532/TGraphPainter.html,https://root.cern,https://root.cern/root/html532/TGraphPainter.html,12,['error'],['errors']
Availability,"pointer TClonesArray *fTracks in the $ROOTSYS/test/Event example). If “->” is not specified, the pointer member is read via buf >> pointer. In this case the pointer may be null. Note that the option with “->” is faster to read or write and it also consumes less space in the file.; Option 2 - the option AutoDelete is set:; TBranch *branch = T.GetBranch(""event"");; branch->SetAddress(&event);; branch->SetAutoDelete(kTRUE);; for (Int_t i=0; i<nentries; i++) {; T.GetEntry(i); // the object event has been filled at this point; }; At any iteration, the GetEntry deletes the object event and a new instance of Event is created and filled.; Option 3 - same as option 1, but you delete the event yourself:; for (Int_t i=0; i<nentries; i++) {; delete event;; event = 0; //EXTREMELY IMPORTANT; T.GetEntry(i);; // the objrect event has been filled at this point; }; It is strongly recommended to use the default option 1. It has the additional advantage that functions like TTree::Draw (internally calling TTree::GetEntry) will be functional even when the classes in the file are not available. Reading selected branches is quicker than reading an entire entry. If you are interested in only one branch, you can use the TBranch::GetEntry method and only that branch is read. Here is the script tree1r:; void tree1r(){; // read the Tree generated by tree1w and fill two histograms; // note that we use ""new"" to create the TFile and TTree objects,; // to keep them alive after leaving this function.; TFile *f = new TFile(""tree1.root"");; TTree *t1 = (TTree*)f->Get(""t1"");; Float_t px, py, pz;; Double_t random;; Int_t ev;; t1->SetBranchAddress(""px"",&px);; t1->SetBranchAddress(""py"",&py);; t1->SetBranchAddress(""pz"",&pz);; t1->SetBranchAddress(""random"",&random);; t1->SetBranchAddress(""ev"",&ev);; // create two histograms; TH1F *hpx = new TH1F(""hpx"",""px distribution"",100,-3,3);; TH2F *hpxpy = new TH2F(""hpxpy"",""py vs px"",30,-3,3,30,-3,3);; //read all entries and fill the histograms; Int_t nentries = (Int_t)t1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:558580,avail,available,558580,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,pointer for specified error dimension.; 1620 ; 1621TAttFill *TGraphMultiErrors::GetAttFill(Int_t e); 1622{; 1623 if (e >= 0 && e < fNYErrors); 1624 return &fAttFill.at(e);; 1625 else; 1626 return nullptr;; 1627}; 1628 ; 1629////////////////////////////////////////////////////////////////////////////////; 1630/// Get AttLine pointer for specified error dimension.; 1631 ; 1632TAttLine *TGraphMultiErrors::GetAttLine(Int_t e); 1633{; 1634 if (e >= 0 && e < fNYErrors); 1635 return &fAttLine.at(e);; 1636 else; 1637 return nullptr;; 1638}; 1639 ; 1640////////////////////////////////////////////////////////////////////////////////; 1641/// Get Fill Color for specified error e (-1 = Global and x errors).; 1642 ; 1643Color_t TGraphMultiErrors::GetFillColor(Int_t e) const; 1644{; 1645 if (e == -1); 1646 return GetFillColor();; 1647 else if (e >= 0 && e < fNYErrors); 1648 return fAttFill[e].GetFillColor();; 1649 else; 1650 return 0;; 1651}; 1652 ; 1653////////////////////////////////////////////////////////////////////////////////; 1654/// Get Fill Style for specified error e (-1 = Global and x errors).; 1655 ; 1656Style_t TGraphMultiErrors::GetFillStyle(Int_t e) const; 1657{; 1658 if (e == -1); 1659 return GetFillStyle();; 1660 else if (e >= 0 && e < fNYErrors); 1661 return fAttFill[e].GetFillStyle();; 1662 else; 1663 return 0;; 1664}; 1665 ; 1666////////////////////////////////////////////////////////////////////////////////; 1667/// Get Line Color for specified error e (-1 = Global and x errors).; 1668 ; 1669Color_t TGraphMultiErrors::GetLineColor(Int_t e) const; 1670{; 1671 if (e == -1); 1672 return GetLineColor();; 1673 else if (e >= 0 && e < fNYErrors); 1674 return fAttLine[e].GetLineColor();; 1675 else; 1676 return 0;; 1677}; 1678 ; 1679////////////////////////////////////////////////////////////////////////////////; 1680/// Get Line Style for specified error e (-1 = Global and x errors).; 1681 ; 1682Style_t TGraphMultiErrors::GetLineStyle(Int_t e) const; 1683{; 1684 if ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:56310,error,error,56310,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"points arranged as (x0,x1,...,xN,y0,....yN) stride1=1 stride2=n; for multi-dim points arraged as (x0,y0,..,x1,y1,...,xN,yN,..) stride1=ndim, stride2=1. the confidence interval are returned in the array ci; cl is the desired confidedence interval value; norm is a flag to control if the intervals need to be normalized to the chi2/ndf value; By default the intervals are corrected using the chi2/ndf value of the fit if a chi2 fit is performed. void GetConfidenceIntervals(const ROOT::Fit::BinData& data, double* ci, double cl = 0.95, bool norm = true) const. evaluate confidence interval for the point specified in the passed data sets; the confidence interval are returned in the array ci; cl is the desired confidence interval value. int Index(const string& name) const; get index for parameter name (return -1 if not found). void NormalizeErrors(); normalize errors using chi2/ndf for chi2 fits. bool NormalizedErrors() const; flag to chek if errors are normalized. { return fNormalized; }. void Print(ostream& os, bool covmat = false) const; print the result and optionaly covariance matrix and correlations. void PrintCovMatrix(ostream& os) const; print error matrix and correlations. bool IsParameterBound(unsigned int ipar) const; query if a parameter is bound. bool IsParameterFixed(unsigned int ipar) const; query if a parameter is fixed. bool ParameterBounds(unsigned int ipar, double& lower, double& upper) const; retrieve parameter bounds - return false if parameter is not bound. std::string GetParameterName(unsigned int ipar) const; get name of parameter (deprecated). void SetModelFunction(ROOT::Fit::FitResult::IModelFunction* func); { fFitFunc = func; }. » Author: L. Moneta Wed Aug 30 11:05:34 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Fit__FitResult.html:11549,error,error,11549,root/html534/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html534/ROOT__Fit__FitResult.html,1,['error'],['error']
Availability,"points in the graph Existing coordinates are preserved New coordinates above fNpoints a...Definition TGraph.cxx:2277; TGraph::GetPointvirtual Int_t GetPoint(Int_t i, Double_t &x, Double_t &y) constGet x and y values for point number i.Definition TGraph.cxx:1533; TGraph::CopyPointsvirtual Bool_t CopyPoints(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin)Copy points from fX and fY to arrays[0] and arrays[1] or to fX and fY if arrays == 0 and ibegin !...Definition TGraph.cxx:779; TGraph::operator=TGraph & operator=(const TGraph &)Equal operator for this graph.Definition TGraph.cxx:232; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TIterDefinition TCollection.h:235; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::AtoiInt_t Atoi() constReturn integer value of string.Definition TString.cxx:1988; TString::AtofDouble_t Atof() constReturn floating-point value contained in string.Definition TString.cxx:2054; TString::IsFloatBool_t IsFloat() constReturns kTRUE if string contains a floating point or integer number.Definition TString.cxx:1858; TString::Dataconst char * Data() constDefinition TString.h:376; TString::IsDigitBool_t IsDigit() constReturns true if all characters in string are digits (0-9) or white spaces, i.e.Definition TString.cxx:1830; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::Formatstatic TString Format(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:40226,error,error,40226,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['error']
Availability,"points that are equi-probable?; use approximate posterior; t.b.d use real function to find the mode. void ComputeIntervalUsingRooFit(double c1, double c2) const; compute the interval using RooFit. void ComputeIntervalFromCdf(double c1, double c2) const; compute the interval using Cdf integration. void ApproximatePosterior() const; approximate posterior in nbins using a TF1 and; scan the values. void ComputeIntervalFromApproxPosterior(double c1, double c2) const; compute the interval using the approximate posterior function. void ComputeShortestInterval() const; compute the shortest interval. BayesianCalculator(); constructor. void SetData(RooAbsData& data). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__BayesianCalculator.html:11187,error,error,11187,root/html528/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__BayesianCalculator.html,1,['error'],['error']
Availability,"points) return -1;; 1154 if (fEXhigh) return fEXhigh[i];; 1155 return -1;; 1156}; 1157 ; 1158 ; 1159////////////////////////////////////////////////////////////////////////////////; 1160/// Get low error on X.; 1161 ; 1162Double_t TGraphAsymmErrors::GetErrorXlow(Int_t i) const; 1163{; 1164 if (i<0 || i>fNpoints) return -1;; 1165 if (fEXlow) return fEXlow[i];; 1166 return -1;; 1167}; 1168 ; 1169 ; 1170////////////////////////////////////////////////////////////////////////////////; 1171/// Get high error on Y.; 1172 ; 1173Double_t TGraphAsymmErrors::GetErrorYhigh(Int_t i) const; 1174{; 1175 if (i<0 || i>fNpoints) return -1;; 1176 if (fEYhigh) return fEYhigh[i];; 1177 return -1;; 1178}; 1179 ; 1180 ; 1181////////////////////////////////////////////////////////////////////////////////; 1182/// Get low error on Y.; 1183 ; 1184Double_t TGraphAsymmErrors::GetErrorYlow(Int_t i) const; 1185{; 1186 if (i<0 || i>fNpoints) return -1;; 1187 if (fEYlow) return fEYlow[i];; 1188 return -1;; 1189}; 1190 ; 1191 ; 1192////////////////////////////////////////////////////////////////////////////////; 1193/// Adds all graphs with asymmetric errors from the collection to this graph.; 1194/// Returns the total number of points in the result or -1 in case of an error.; 1195 ; 1196Int_t TGraphAsymmErrors::Merge(TCollection* li); 1197{; 1198 TIter next(li);; 1199 while (TObject* o = next()) {; 1200 TGraph *g = dynamic_cast<TGraph*>(o);; 1201 if (!g) {; 1202 Error(""Merge"",; 1203 ""Cannot merge - an object which doesn't inherit from TGraph found in the list"");; 1204 return -1;; 1205 }; 1206 int n0 = GetN();; 1207 int n1 = n0+g->GetN();; 1208 Set(n1);; 1209 Double_t * x = g->GetX();; 1210 Double_t * y = g->GetY();; 1211 Double_t * exlow = g->GetEXlow();; 1212 Double_t * exhigh = g->GetEXhigh();; 1213 Double_t * eylow = g->GetEYlow();; 1214 Double_t * eyhigh = g->GetEYhigh();; 1215 for (Int_t i = 0 ; i < g->GetN(); i++) {; 1216 SetPoint(n0+i, x[i], y[i]);; 1217 if (exlow) fEXlow[n0+i] = exlow[i];",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:41195,error,errors,41195,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errors']
Availability,"polargram; 3818 if (thePolargram) if (!gPad->FindObject(thePolargram->GetName())) thePolargram=nullptr;; 3819 if (!thePolargram) {; 3820 // Find any other Polargram in the Pad; 3821 TListIter padObjIter(gPad->GetListOfPrimitives());; 3822 while (TObject* AnyObj = padObjIter.Next()) {; 3823 if (TString(AnyObj->ClassName()).CompareTo(""TGraphPolargram"",; 3824 TString::kExact)==0); 3825 thePolargram = (TGraphPolargram*)AnyObj;; 3826 theGraphPolar->SetPolargram(thePolargram);; 3827 }; 3828 }; 3829 }; 3830 ; 3831 // Get new polargram range if necessary.; 3832 if (!thePolargram) {; 3833 // Get range, initialize with first/last value; 3834 rwrmin = theY[0]; rwrmax = theY[theNpoints-1];; 3835 rwtmin = theX[0]; rwtmax = theX[theNpoints-1];; 3836 ; 3837 for (ipt = 0; ipt < theNpoints; ipt++) {; 3838 // Check for errors if available; 3839 if (theEX) {; 3840 if (theX[ipt] -theEX[ipt] < rwtmin) rwtmin = theX[ipt]-theEX[ipt];; 3841 if (theX[ipt] +theEX[ipt] > rwtmax) rwtmax = theX[ipt]+theEX[ipt];; 3842 } else {; 3843 if (theX[ipt] < rwtmin) rwtmin=theX[ipt];; 3844 if (theX[ipt] > rwtmax) rwtmax=theX[ipt];; 3845 }; 3846 if (theEY) {; 3847 if (theY[ipt] -theEY[ipt] < rwrmin) rwrmin = theY[ipt]-theEY[ipt];; 3848 if (theY[ipt] +theEY[ipt] > rwrmax) rwrmax = theY[ipt]+theEY[ipt];; 3849 } else {; 3850 if (theY[ipt] < rwrmin) rwrmin=theY[ipt];; 3851 if (theY[ipt] > rwrmax) rwrmax=theY[ipt];; 3852 }; 3853 }; 3854 // Add radial and Polar margins.; 3855 if (rwrmin == rwrmax) rwrmax += 1.;; 3856 if (rwtmin == rwtmax) rwtmax += 1.;; 3857 Double_t dr = (rwrmax-rwrmin);; 3858 Double_t dt = (rwtmax-rwtmin);; 3859 rwrmax += 0.1*dr;; 3860 rwrmin -= 0.1*dr;; 3861 ; 3862 // Assume equally spaced points for full 2*Pi.; 3863 rwtmax += dt/theNpoints;; 3864 } else {; 3865 rwrmin = thePolargram->GetRMin();; 3866 rwrmax = thePolargram->GetRMax();; 3867 rwtmin = thePolargram->GetTMin();; 3868 rwtmax = thePolargram->GetTMax();; 3869 }; 3870 ; 3871 if ((!thePolargram) || theGraphPolar->GetOptionAxis()) {; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:135498,error,errors,135498,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,"['avail', 'error']","['available', 'errors']"
Availability,"polation. Not yet implemented. ;  ; virtual Double_t Interpolate (Double_t x, Double_t y, Double_t z) const;  3d Interpolation. Not yet implemented. ;  ; Bool_t IsBinOverflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is overflow. ;  ; Bool_t IsBinUnderflow (Int_t bin, Int_t axis=0) const;  Return true if the bin is underflow. ;  ; virtual Bool_t IsHighlight () const;  ; virtual Double_t KolmogorovTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using Kolmogorov test. ;  ; Long64_t Merge (TCollection *list, Option_t *option);  Add all histograms in the collection to this histogram. ;  ; void Paint (Option_t *option="""") override;  Control routine to paint any kind of histograms. ;  ; void Print (Option_t *option="""") const override;  Print some global quantities for this histogram. ;  ; virtual void RebinAxis (Double_t x, TAxis *axis);  ; virtual TH1 * RebinX (Int_t ngroup=2, const char *newname="""");  ; virtual void Rebuild (Option_t *option="""");  Using the current bin info, recompute the arrays for contents and errors. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove object from the list of functions. ;  ; virtual void ResetStats ();  Reset the statistics including the number of entries and replace with values calculated from bin content. ;  ; void SaveAs (const char *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinConten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:24558,error,errors,24558,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['errors']
Availability,"pollres = 0 means timeout */; 6322 nread = 0;; 6323 }; 6324#endif; 6325 ; 6326 } else {; 6327 struct mg_pollfd pfd[1];; 6328 int pollres;; 6329 ; 6330 pfd[0].fd = conn->client.sock;; 6331 pfd[0].events = POLLIN;; 6332 pollres = mg_poll(pfd,; 6333 1,; 6334 (int)(timeout * 1000.0),; 6335 &(conn->phys_ctx->stop_flag));; 6336 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6337 return -2;; 6338 }; 6339 if (pollres > 0) {; 6340 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6341 err = (nread < 0) ? ERRNO : 0;; 6342 if (nread <= 0) {; 6343 /* shutdown of the socket at client side */; 6344 return -2;; 6345 }; 6346 } else if (pollres < 0) {; 6347 /* error callint poll */; 6348 return -2;; 6349 } else {; 6350 /* pollres = 0 means timeout */; 6351 nread = 0;; 6352 }; 6353 }; 6354 ; 6355 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6356 return -2;; 6357 }; 6358 ; 6359 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6360 /* some data has been read, or no data was requested */; 6361 return nread;; 6362 }; 6363 ; 6364 if (nread < 0) {; 6365 /* socket error - check errno */; 6366#if defined(_WIN32); 6367 if (err == WSAEWOULDBLOCK) {; 6368 /* TODO (low): check if this is still required */; 6369 /* standard case if called from close_socket_gracefully */; 6370 return -2;; 6371 } else if (err == WSAETIMEDOUT) {; 6372 /* TODO (low): check if this is still required */; 6373 /* timeout is handled by the while loop */; 6374 return 0;; 6375 } else if (err == WSAECONNABORTED) {; 6376 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6377 return -2;; 6378 } else {; 6379 DEBUG_TRACE(""recv() failed, error %d"", err);; 6380 return -2;; 6381 }; 6382#else; 6383 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6384 * if the timeout is reached and if the socket was set to non-; 6385 * blocking in close_socket_gracefully, so we can not distinguish; 6386 * here. We have to wait for the timeout in both cases for now.; 6387 */; 6388 if (ERROR_TRY_AGAIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:184753,error,error,184753,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,2,['error'],['error']
Availability,"pollres = 0 means timeout */; 6323 nread = 0;; 6324 }; 6325#endif; 6326 ; 6327 } else {; 6328 struct mg_pollfd pfd[1];; 6329 int pollres;; 6330 ; 6331 pfd[0].fd = conn->client.sock;; 6332 pfd[0].events = POLLIN;; 6333 pollres = mg_poll(pfd,; 6334 1,; 6335 (int)(timeout * 1000.0),; 6336 &(conn->phys_ctx->stop_flag));; 6337 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6338 return -2;; 6339 }; 6340 if (pollres > 0) {; 6341 nread = (int)recv(conn->client.sock, buf, (len_t)len, 0);; 6342 err = (nread < 0) ? ERRNO : 0;; 6343 if (nread <= 0) {; 6344 /* shutdown of the socket at client side */; 6345 return -2;; 6346 }; 6347 } else if (pollres < 0) {; 6348 /* error callint poll */; 6349 return -2;; 6350 } else {; 6351 /* pollres = 0 means timeout */; 6352 nread = 0;; 6353 }; 6354 }; 6355 ; 6356 if (!STOP_FLAG_IS_ZERO(&conn->phys_ctx->stop_flag)) {; 6357 return -2;; 6358 }; 6359 ; 6360 if ((nread > 0) || ((nread == 0) && (len == 0))) {; 6361 /* some data has been read, or no data was requested */; 6362 return nread;; 6363 }; 6364 ; 6365 if (nread < 0) {; 6366 /* socket error - check errno */; 6367#if defined(_WIN32); 6368 if (err == WSAEWOULDBLOCK) {; 6369 /* TODO (low): check if this is still required */; 6370 /* standard case if called from close_socket_gracefully */; 6371 return -2;; 6372 } else if (err == WSAETIMEDOUT) {; 6373 /* TODO (low): check if this is still required */; 6374 /* timeout is handled by the while loop */; 6375 return 0;; 6376 } else if (err == WSAECONNABORTED) {; 6377 /* See https://www.chilkatsoft.com/p/p_299.asp */; 6378 return -2;; 6379 } else {; 6380 DEBUG_TRACE(""recv() failed, error %d"", err);; 6381 return -2;; 6382 }; 6383#else; 6384 /* TODO: POSIX returns either EAGAIN or EWOULDBLOCK in both cases,; 6385 * if the timeout is reached and if the socket was set to non-; 6386 * blocking in close_socket_gracefully, so we can not distinguish; 6387 * here. We have to wait for the timeout in both cases for now.; 6388 */; 6389 if (ERROR_TRY_AGAIN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:184785,error,error,184785,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,2,['error'],['error']
Availability,"ponding to the closest RGB; value supported by the hardware. If no cell could be allocated it; returns kFALSE, otherwise kTRUE. The pixel value is set to default. Let system think we could allocate; color. cmap - the colormap; color - specifies and returns the values actually used in the cmap. void QueryColor(Colormap_t cmap, ColorStruct_t& color); Returns the current RGB value for the pixel in the ""color"" structure. The color components are set to default. cmap - the colormap; color - specifies and returns the RGB values for the pixel specified; in the structure. void NextEvent(Event_t& event); The ""event"" is set to default event.; This method however, should never be called. void GetPasteBuffer(Window_t id, Atom_t atom, TString& text, Int_t& nchar, Bool_t del); Gets contents of the paste buffer ""atom"" into the string ""text"".; (nchar = number of characters) If ""del"" is true deletes the paste; buffer afterwards. Bool_t Init(void* display = 0); Initializes the X system. Returns kFALSE in case of failure.; It is implementation dependent. void ClearWindow(); Clears the entire area of the current window. void CloseWindow(); Deletes current window. void ClosePixmap(); Deletes current pixmap. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. Double_t GetOpenGLScalingFactor(); On a HiDPI resolution it can be > 1., this means glViewport should use; scaled width and height. void CreateOpenGLContext(Int_t wid = 0); Creates OpenGL context for window ""wid"". void DeleteOpenGLContext(Int_t wid = 0); Deletes OpenGL context for window ""wid"". Window_t CreateOpenGLWindow(Window_t parentID, UInt_t width, UInt_t height, const vector<pair<UInt_t,Int_t> >& format); Create window with special pixel format. Noop everywhere except Cocoa. Handle_t CreateOpenGLContext(Window_t windowID, Handle_t sharedContext); Creates OpenGL context for window ""windowID"". Bool_t MakeOpenGLContextCurrent(Handle_t ctx, Window_t windowI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualX.html:25124,failure,failure,25124,root/html602/TVirtualX.html,https://root.cern,https://root.cern/root/html602/TVirtualX.html,2,['failure'],['failure']
Availability,"ponding to the closest RGB; value supported by the hardware. If no cell could be allocated it; returns kFALSE, otherwise kTRUE. The pixel value is set to default. Let system think we could allocate; color. cmap - the colormap; color - specifies and returns the values actually used in the cmap. void QueryColor(Colormap_t cmap, ColorStruct_t& color); Returns the current RGB value for the pixel in the ""color"" structure. The color components are set to default. cmap - the colormap; color - specifies and returns the RGB values for the pixel specified; in the structure. void NextEvent(Event_t& event); The ""event"" is set to default event.; This method however, should never be called. void GetPasteBuffer(Window_t id, Atom_t atom, TString& text, Int_t& nchar, Bool_t del); Gets contents of the paste buffer ""atom"" into the string ""text"".; (nchar = number of characters) If ""del"" is true deletes the paste; buffer afterwards. Bool_t Init(void* display = 0); Initializes the X system. Returns kFALSE in case of failure.; It is implementation dependent. void ClearWindow(); Clears the entire area of the current window. void CloseWindow(); Deletes current window. void ClosePixmap(); Deletes current pixmap. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. Double_t GetOpenGLScalingFactor(); On a HiDPI resolution it can be > 1., this means glViewport should use; scaled width and height. void CreateOpenGLContext(Int_t wid = 0); Creates OpenGL context for window ""wid"". void DeleteOpenGLContext(Int_t wid = 0); Deletes OpenGL context for window ""wid"". Window_t CreateOpenGLWindow(Window_t parentID, UInt_t width, UInt_t height, const vector<std::pair<UInt_t,Int_t> >& format); Create window with special pixel format. Noop everywhere except Cocoa. Handle_t CreateOpenGLContext(Window_t windowID, Handle_t sharedContext); Creates OpenGL context for window ""windowID"". Bool_t MakeOpenGLContextCurrent(Handle_t ctx, Window_t wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualX.html:24506,failure,failure,24506,root/html534/TVirtualX.html,https://root.cern,https://root.cern/root/html534/TVirtualX.html,1,['failure'],['failure']
Availability,"ponding to the closest RGB; value supported by the hardware. If no cell could be allocated it; returns kFALSE, otherwise kTRUE. The pixel value is set to default. Let system think we could allocate; color. cmap - the colormap; color - specifies and returns the values actually used in the cmap. void QueryColor(Colormap_t cmap, ColorStruct_t& color); Returns the current RGB value for the pixel in the ""color"" structure. The color components are set to default. cmap - the colormap; color - specifies and returns the RGB values for the pixel specified; in the structure. void NextEvent(Event_t& event); The ""event"" is set to default event.; This method however, should never be called. void GetPasteBuffer(Window_t id, Atom_t atom, TString& text, Int_t& nchar, Bool_t del); Gets contents of the paste buffer ""atom"" into the string ""text"".; (nchar = number of characters) If ""del"" is true deletes the paste; buffer afterwards. Bool_t Init(void* display = 0); Initializes the X system. Returns kFALSE in case of failure.; It is implementation dependent. void ClearWindow(); Clears the entire area of the current window. void CloseWindow(); Deletes current window. void ClosePixmap(); Deletes current pixmap. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copies the pixmap ""wid"" at the position [xpos,ypos] in the current window. void CreateOpenGLContext(Int_t wid = 0); Creates OpenGL context for window ""wid"". void DeleteOpenGLContext(Int_t wid = 0); Deletes OpenGL context for window ""wid"". void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draws a box between [x1,y1] and [x2,y2] according to the ""mode"". mode - drawing mode:; mode = 0 hollow (kHollow); mode = 1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draws a cell array. The drawing is done with the pixel presicion; if (x2-x1)/nx (or y) is not a exact pixel number the position of; the top rigth corner may be wrong. x1,y1 - left down corner; x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:23193,failure,failure,23193,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,3,['failure'],['failure']
Availability,"ponent Analysis (using; TPrincipal), and use; to get a linear transformation; ; , so that; ; are constrained and linear independent. Perform a Principal Component Analysis on; ; , to get linear; indenpendent (among themselves, but not independent of; ; ) quantities . For each component ; make a mutlidimensional fit,; using ; as the variables, thus determing a set of; coefficents ; . To process data, using this parameterisation, do. Test wether the observation ; within the domain of; the parameterization, using the result from the Principal Component; Analysis. Determine ; as before. Detetmine ; as before. Use the result of the fit to determind ; . Transform back to ; from ; , using; the result from the Principal Component Analysis. Testing the parameterization. The class also provides functionality for testing the, over the; training sample, found parameterization; (TMultiDimFit::Fit). This is done by passing; the class a test sample of tuples of the form ; , where ; are the independent; variables, the known, dependent quantity, and is; the square error in ; (TMultiDimFit::AddTestRow). The parameterization is then evaluated at every ; in the; test sample, and. is evaluated. The relative error over the test sample. should not be to low or high compared to from the training; sample. Also, multiple correlation coefficient from both samples should; be fairly close, otherwise one of the samples is not representive of; the problem. A large difference in the reduced over the two; samples indicate an over fit, and the maximum number of terms in the; parameterisation should be reduced. It's possible to use Minuit; [4] to further improve the fit, using the test sample. Christian Holm; November 2000, NBI. Bibliography; 1. Philip R. Bevington and D. Keith Robinson.; Data Reduction and Error Analysis for the Physical Sciences.; McGraw-Hill, 2 edition, 1992.; 2. René Brun et al.; Mudifi.; Long writeup DD/75-23, CERN, 1980.; 3. Gene H. Golub and Charles F. van Loan.; Matrix Comput",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:11962,error,error,11962,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['error'],['error']
Availability,"pontential pdf; alpha = ROOT.RooRealVar(""alpha"", ""alpha"", -1); bkg2 = ROOT.RooExponential(""bkg2"", ""Background 2"", x, alpha); ; # Sum the background components into a composite background pdf; bkg1frac = ROOT.RooRealVar(""bkg1frac"", ""fraction of component 1 in background"", 0.2, 0.0, 1.0); bkg = ROOT.RooAddPdf(""bkg"", ""Signal"", [bkg1, bkg2], [bkg1frac]); ; # Sum the composite signal and background; bkgfrac = ROOT.RooRealVar(""bkgfrac"", ""fraction of background"", 0.5, 0.0, 1.0); model = ROOT.RooAddPdf(""model"", ""g1+g2+a"", [bkg, sig], [bkgfrac]); ; # Print composite tree in ASCII; # -----------------------------------------------------------; ; # Print tree to stdout; model.Print(""t""); ; # Print tree to file; model.printCompactTree("""", ""rf206_asciitree.txt""); ; # Draw composite tree graphically; # -------------------------------------------------------------; ; # Print GraphViz DOT file with representation of tree; model.graphVizTree(""rf206_model.dot""); ; # Make graphic output file with one of the GraphViz tools; # (freely available from www.graphviz.org); #; # 'Top-to-bottom graph'; # unix> dot -Tgif -o rf207_model_dot.gif rf207_model.dot; #; # 'Spring-model graph'; # unix> fdp -Tgif -o rf207_model_fdp.gif rf207_model.dot; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; 0x788d230 RooAddPdf::model = 0.602695/1 [Auto,Clean] ; 0x73f4730/V- RooAddPdf::bkg = 0.20539/1 [Auto,Clean] ; 0x793f3e0/V- RooChebychev::bkg1 = 1 [Auto,Dirty] ; 0x71161c0/V- RooRealVar::x = 5; 0x7539e30/V- RooRealVar::a0 = 0.5; 0x7496810/V- RooRealVar::a1 = 0; 0x7353b80/V- RooRealVar::bkg1frac = 0.2; 0x792d390/V- RooExponential::bkg2 = 0.00673795 [Auto,Dirty] ; 0x71161c0/V- RooRealVar::x = 5; 0x7429310/V- RooRealVar::alpha = -1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf206__treevistools_8py.html:2353,avail,available,2353,doc/master/rf206__treevistools_8py.html,https://root.cern,https://root.cern/doc/master/rf206__treevistools_8py.html,1,['avail'],['available']
Availability,"poorstatistics [11], [12].; The third statistic to be optimized, which is implemented in the fitting functions is Maximum Likelihood Method. It is of the choice of the user to select suitable statistic.. after differentiating \(\chi^2\) we obtain the following \(M\) simultaneous equations. \[ \sum_{i=1}^{N}; \frac{y_i-f(i,a^{(t)})}{y_i}; \frac{\partial f(i,a^t)}{\partial a_k}=; \sum_{j=1}^{M}\sum_{i=1}^{N}; \frac{\partial f(i,a^{(t)})}{\partial a_j}; \frac{\partial f(i,a^{(t)})}{\partial a_k}; \Delta a_j^{(t)} \]. in \(\gamma\)-ray spectra we have to fit together tens, hundreds of peaks simultaneously that represent sometimes thousands of parameters.; the calculation of the inversion matrix of such a size is practically impossible.; the awmi method is based on the assumption that off-diagonal terms in the matrix A are equal to zero. \[; \Delta a_{k}^{(t+1)} = \alpha^{(t)}; \frac{; \sum_{i=1}^{N} \frac{e_{i}^{(t)}}{y_i}\frac{\partial f(i,a^{(t)})}{\partial a_k}; }{; \sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}; }; \]; where the error in the channel \(i\) is \(e_{i}^{(t)} = y_i-f(i,a^{(t)}); k=1,2,...,M\) and \(\alpha^{(t)}=1\) if the process is convergent or \(\alpha^{(t)}=0.5 \alpha^{(t-1)}\) if it is divergent. Another possibility is to optimize this coefficient.; the error of \(k\)-th parameter estimate is; \[; \Delta a_k^{(e)}=; \sqrt{\frac; {\sum_{i=1}^{N}\frac{e_i^2}{y_i}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^2\frac{1}{y_i}}; }; \]; algorithm with higher powers w=1,2,3…; \[; \Delta a_{k,w}^{(t+1)}=; \alpha^{(t)}; \frac; {\sum_{i=1}^{N} \frac{e_i}{y_i}\left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w-1}}; {\sum_{i=1}^{N} \left[ \frac{\partial f(i,a^{(t)})}{\partial a_k}\right]^{2w}\frac{1}{y_i}}; \]; we have implemented the nonsymmetrical semiempirical peak shape function.; it contains the symmetrical Gaussian as well as nonsymmetrical terms.; \[; f(i,a) =; \sum_{i=1}^{M} A",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:36532,error,error,36532,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['error'],['error']
Availability,"pop up the context menu and then select the menu; entry 'Fit Panel'. ""General"" Tab. The first set of GUI elements is related to the function choice; and settings. The status bar on the bottom provides information; about the current minimization settings using the following; abbreviations:; LIB - shows the current choice between Minuit/Minuit2/Fumili; MIGRAD or FUMILI points to the current minimization method in use.; Itr: - shows the maximum number of iterations nnnn set for the fit.; Prn: - can be DEF/VER/QT and shows the current print option in use. ""Predefined"" combo box - contains a list of predefined functions; in ROOT. The default one is Gaussian. ""Operation"" radio button group defines selected operational mode; between functions: NOP - no operation (default); ADD - addition; CONV - convolution (will be implemented in the future). Users can enter the function expression in a text entry field.; The entered string is checked after Enter key was pressed. An; error message shows up if the string is not accepted. The current; prototype is limited and users have no freedom to enter file/user; function names in this field. ""Set Parameters"" button opens a dialog for parameters settings. ""Fit Settings"" provides user interface elements related to the; fitter. Currently there are two method choices: Chi-square and; Binned Likelihood. ""Linear Fit"" check button sets the use of Linear fitter is it is; selected. Otherwise the option 'F' is applied if polN is selected.; ""Robust"" number entry sets the robust value when fitting graphs.; ""No Chi-square"" check button sets ON/OFF option 'C' - do not; calculate Chi-square (for Linear fitter). Fit options:; ""Integral"" check button switch ON/OFF option 'I' - use integral; of function instead of value in bin center.; ""Best Errors"" sets ON/OFF option 'E' - better errors estimation; using Minos technique.; ""All weights = 1"" sets ON/OFF option 'W' - all weights set to 1,; excluding empty bins and ignoring error bars.; ""Empty bins, weight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitEditor.html:1420,error,error,1420,root/html528/TFitEditor.html,https://root.cern,https://root.cern/root/html528/TFitEditor.html,6,['error'],['error']
Availability,"port(w) importing RooRealVar::a1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::bkgfrac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooAddPdf::sig; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::mean; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma1; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sig1frac; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooGaussian::sig2; [#1] INFO:ObjectHandling -- RooWorkspace::import(w) importing RooRealVar::sigma2; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] IN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf510__wsnamedsets_8C.html:10288,error,error,10288,doc/master/rf510__wsnamedsets_8C.html,https://root.cern,https://root.cern/doc/master/rf510__wsnamedsets_8C.html,2,['error'],['error']
Availability,"ported fonts](\ref ATTTEXT53); 45 ; 46\anchor ATTTEXT1; 47## Text Alignment; 48 ; 49The text alignment is an integer number (`align`) allowing to control; 50the horizontal and vertical position of the text string with respect; 51to the text position.; 52The text alignment of any class inheriting from `TAttText` can; 53be changed using the method `SetTextAlign` and retrieved using the; 54method `GetTextAlign`.; 55 ; 56~~~ {.cpp}; 57 align = 10*HorizontalAlign + VerticalAlign; 58~~~; 59 ; 60For horizontal alignment the following convention applies:; 61 ; 62~~~ {.cpp}; 63 1=left adjusted, 2=centered, 3=right adjusted; 64~~~; 65 ; 66For vertical alignment the following convention applies:; 67 ; 68~~~ {.cpp}; 69 1=bottom adjusted, 2=centered, 3=top adjusted; 70~~~; 71 ; 72For example:; 73 ; 74~~~ {.cpp}; 75 align = 11 = left adjusted and bottom adjusted; 76 align = 32 = right adjusted and vertically centered; 77~~~; 78 ; 79Begin_Macro(source); 80textalign.C; 81End_Macro; 82 ; 83Mnemonic constants are available:; 84 ; 85~~~ {.cpp}; 86kHAlignLeft = 10, kHAlignCenter = 20, kHAlignRight = 30,; 87kVAlignBottom = 1, kVAlignCenter = 2, kVAlignTop = 3; 88~~~; 89 ; 90They allow to write:; 91 ; 92~~~ {.cpp}; 93object->SetTextAlign(kHAlignLeft+kVAlignTop);; 94~~~; 95 ; 96\anchor ATTTEXT2; 97## Text Angle; 98 ; 99Text angle in degrees.; 100The text angle of any class inheriting from `TAttText` can; 101be changed using the method `SetTextAngle` and retrieved using the; 102method `GetTextAngle`.; 103The following picture shows the text angle:; 104 ; 105Begin_Macro(source); 106textangle.C; 107End_Macro; 108 ; 109\anchor ATTTEXT3; 110## Text Color; 111 ; 112The text color is a color index (integer) pointing in the ROOT; 113color table.; 114The text color of any class inheriting from `TAttText` can; 115be changed using the method `SetTextColor` and retrieved using the; 116method `GetTextColor`.; 117The following table shows the first 50 default colors.; 118 ; 119Begin_Macro; 120{; 121 TCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttText_8cxx_source.html:2526,avail,available,2526,doc/master/TAttText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttText_8cxx_source.html,1,['avail'],['available']
Availability,"ported. Options to control construction of the chi^2. DataError(RooAbsData::ErrorType) -- Choose between Poisson errors and Sum-of-weights errors; NumCPU(Int_t) -- Activate parallel processing feature on N processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to create a chi2. RooFitResult* chi2FitTo(RooDataSet& xydata, RooCmdArg arg1, RooCmdArg arg2, 				 RooCmdArg arg3, RooCmdArg arg4, RooCmdArg arg5, 				 RooCmdArg arg6, RooCmdArg arg7, RooCmdArg arg8); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights, or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. Options to control flow of fit procedure. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:73634,error,errors,73634,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,1,['error'],['errors']
Availability,"pos, . Int_t ; len . ). virtual . Read a buffer from the file at the offset 'pos' in the file. ; Returns kTRUE in case of failure. Compared to ReadBuffer(char*, Int_t), this routine does not change the cursor on the physical file representation (fD) if the data is in this TFile's cache. ; Reimplemented in TSQLFile, TXMLFile, TDavixFile, TDCacheFile, TNetFile, TWebFile, and TNetXNGFile.; Definition at line 1720 of file TFile.cxx. ◆ ReadBufferAsync(). Bool_t TFile::ReadBufferAsync ; (; Long64_t ; offs, . Int_t ; len . ). virtual . Reimplemented in TDavixFile.; Definition at line 5208 of file TFile.cxx. ◆ ReadBuffers(). Bool_t TFile::ReadBuffers ; (; char * ; buf, . Long64_t * ; pos, . Int_t * ; len, . Int_t ; nbuf . ). virtual . Read the nbuf blocks described in arrays pos and len. ; The value pos[i] is the seek position of block i of length len[i]. Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer. This function is overloaded by TNetFile, TWebFile, etc. Returns kTRUE in case of failure. ; Reimplemented in TDavixFile, TDCacheFile, TNetFile, TS3WebFile, TWebFile, and TNetXNGFile.; Definition at line 1821 of file TFile.cxx. ◆ ReadBufferViaCache(). Int_t TFile::ReadBufferViaCache ; (; char * ; buf, . Int_t ; len . ). protected . Read buffer via cache. ; Returns 0 if the requested block is not in the cache, 1 in case read via cache was successful, 2 in case read via cache failed. ; Definition at line 1889 of file TFile.cxx. ◆ ReadFree(). void TFile::ReadFree ; (; ). virtual . Read the FREE linked list. ; Every file has a linked list (fFree) of free segments. This linked list has been written on the file via WriteFree as a single data record. ; Reimplemented in TSQLFile, and TXMLFile.; Definition at line 1925 of file TFile.cxx. ◆ ReadProcessID(). TProcessID * TFile::ReadProcessID ; (; UShort_t ; pidf). virtual . The TProcessID with number pidf is read from this file. ; If the object is not already entered in the gROOT list, it is added. ; Definition at lin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFile.html:87146,failure,failure,87146,doc/master/classTFile.html,https://root.cern,https://root.cern/doc/master/classTFile.html,1,['failure'],['failure']
Availability,"posal(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual boolRooStats::ProposalFunction::CheckParameters(RooArgSet& params); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Double_tGetProposalDensity(RooArgSet& x1, RooArgSet& x2); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__UniformProposal.html:1838,error,error,1838,root/html526/RooStats__UniformProposal.html,https://root.cern,https://root.cern/root/html526/RooStats__UniformProposal.html,12,['error'],['error']
Availability,"positeFrame* main, UInt_t r, UInt_t c, Int_t s = 0, Int_t h = 0); ~TGMatrixLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TGDimensionGetDefaultSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGMatrixLayout.html:2327,error,error,2327,root/html528/TGMatrixLayout.html,https://root.cern,https://root.cern/root/html528/TGMatrixLayout.html,4,['error'],['error']
Availability,"positeShape ; (; ). Default constructor. ; Definition at line 218 of file TGeoCompositeShape.cxx. ◆ TGeoCompositeShape() [3/5]. TGeoCompositeShape::TGeoCompositeShape ; (; const char * ; name, . const char * ; expression . ). Default constructor. ; Definition at line 227 of file TGeoCompositeShape.cxx. ◆ TGeoCompositeShape() [4/5]. TGeoCompositeShape::TGeoCompositeShape ; (; const char * ; expression). Default constructor. ; Definition at line 243 of file TGeoCompositeShape.cxx. ◆ TGeoCompositeShape() [5/5]. TGeoCompositeShape::TGeoCompositeShape ; (; const char * ; name, . TGeoBoolNode * ; node . ). Constructor with a Boolean node. ; Definition at line 259 of file TGeoCompositeShape.cxx. ◆ ~TGeoCompositeShape(). TGeoCompositeShape::~TGeoCompositeShape ; (; ). override . destructor ; Definition at line 273 of file TGeoCompositeShape.cxx. Member Function Documentation. ◆ Capacity(). Double_t TGeoCompositeShape::Capacity ; (; ); const. overridevirtual . Computes capacity of this shape [length^3] by sampling with 1% error. ; Reimplemented from TGeoBBox.; Definition at line 282 of file TGeoCompositeShape.cxx. ◆ Class(). static TClass * TGeoCompositeShape::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoCompositeShape::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoCompositeShape::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 84 of file TGeoCompositeShape.h. ◆ ClearThreadData(). void TGeoCompositeShape::ClearThreadData ; (; ); const. overridevirtual . Needed just for cleanup. ; Reimplemented from TGeoShape.; Definition at line 200 of file TGeoCompositeShape.cxx. ◆ ComputeBBox(). void TGeoCompositeShape::ComputeBBox ; (; ). overridevirtual . compute bounding box of the sphere ; Reimplemented from TGeoBBox.; Definition at line 305 of file TGeoCompositeShape.cxx. ◆ ComputeNormal(). void TGeoCompositeShape::ComputeN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:34587,error,error,34587,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['error'],['error']
Availability,"possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function. ; Definition at line 26 of file TSpectrum2Fit.h. ◆ fRoCalc. Double_t TSpectrum2Fit::fRoCalc. protected . calculated value of correlation coefficient ; Definition at line 60 of file TSpectrum2Fit.h. ◆ fRoErr. Double_t TSpectrum2Fit::fRoErr. protected . error value of correlation coefficient ; Definition at line 61 of file TSpectrum2Fit.h. ◆ fRoInit. Double_t TSpectrum2Fit::fRoInit. protected . initial value of correlation coefficient ; Definition at line 59 of file TSpectrum2Fit.h. ◆ fSigmaCalcX. Double_t TSpectrum2Fit::fSigmaCalcX. protected . calculated value of sigma x parameter ; Definition at line 54 of file TSpectrum2Fit.h. ◆ fSigmaCalcY. Double_t TSpectrum2Fit::fSigmaCalcY. protected . calculated value of sigma y parameter ; Definition at line 57 of file TSpectrum2Fit.h. ◆ fSigmaErrX. Double_t TSpectrum2Fit::fSigmaErrX. protected . error value of sigma x parameter ; Definition at line 55 of file TSpectrum2Fit.h. ◆ fSigmaErrY. Double_t TSpectrum2Fit::fSigmaErrY. protected . error value of sigma y parameter ; Definition at line 58 of file TSpectrum2Fit.h. ◆ fSigmaInitX. Double_t TSpectrum2Fit::fSigmaInitX. protected . initial value of sigma x parameter ; Definition at line 53 of file TSpectrum2Fit.h. ◆ fSigmaInitY. Double_t TSpectrum2Fit::fSigmaInitY. protected . initial value of sigma y parameter ; Definition at line 56 of file TSpectrum2Fit.h. ◆ fStatisticType. Int_t TSpectrum2Fit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrum2Fit.h. ◆ fSxCalc. Double_t TSpectrum2Fit::fSxCalc. protected . calculated value of s parameter for 1D ridges in x direction ; Definition at line 75 of file TSpectrum2Fit.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:91183,error,error,91183,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['error'],['error']
Availability,"posterior as estimated value for the efficiency; + shortest: compute shortest interval (done by default if mode option is set); + central: compute central interval (done by default if mode option is NOT set). - n : number of weights (has to be the number of one-dimensional; TEfficiency objects in pList); If no weights are passed, the internal weights GetWeight() of; the given TEfficiency objects are used.; - w : array of length n with weights for each TEfficiency object in; pList (w[0] correspond to pList->First ... w[n-1] -> pList->Last); The weights do not have to be normalised. For each bin the calculation is done by the Combine(double&, double& ...) method. void Draw(Option_t* opt); draws the current TEfficiency object. options:; - 1-dimensional case: same options as TGraphAsymmErrors::Draw(); but as default ""AP"" is used; - 2-dimensional case: same options as TH2::Draw(); - 3-dimensional case: not yet supported. specific TEfficiency drawing options:; - E0 - plot bins where the total number of passed events is zero; (the error interval will be [0,1] ). void Fill(Bool_t bPassed, Double_t x, Double_t y = 0, Double_t z = 0); This function is used for filling the two histograms. Input: bPassed - flag whether the current event passed the selection; true: both histograms are filled; false: only the total histogram is filled; x - x value; y - y value (use default=0 for 1-D efficiencies); z - z value (use default=0 for 2-D or 1-D efficiencies). Int_t FindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; returns the global bin number containing the given values. Note: - values which belong to dimensions higher than the current dimension; of the TEfficiency object are ignored (i.e. for 1-dimensional; efficiencies only the x-value is considered). Int_t Fit(TF1* f1, Option_t* opt = """"); fits the efficiency using the TBinomialEfficiencyFitter class. The resulting fit function is added to the list of associated functions. Options: - ""+"": previous fitted functions in th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEfficiency.html:52542,error,error,52542,root/html528/TEfficiency.html,https://root.cern,https://root.cern/root/html528/TEfficiency.html,1,['error'],['error']
Availability,"ppRemote(nullptr); 102{; 103 ResetBit(kProcessRemotely);; 104}; 105 ; 106////////////////////////////////////////////////////////////////////////////////; 107/// Create an application environment. The application environment; 108/// provides an interface to the graphics system and eventloop; 109/// (be it X, Windows, macOS or BeOS). After creating the application; 110/// object start the eventloop by calling its Run() method. The command; 111/// line options recognized by TApplication are described in the GetOptions(); 112/// method. The recognized options are removed from the argument array.; 113/// The original list of argument options can be retrieved via the Argc(); 114/// and Argv() methods. The appClassName ""proofserv"" is reserved for the; 115/// PROOF system. The ""options"" and ""numOptions"" arguments are not used,; 116/// except if you want to by-pass the argv processing by GetOptions(); 117/// in which case you should specify numOptions<0. All options will; 118/// still be available via the Argv() method for later use.; 119 ; 120TApplication::TApplication(const char *appClassName, Int_t *argc, char **argv,; 121 void * /*options*/, Int_t numOptions) :; 122 fArgc(0), fArgv(nullptr), fAppImp(nullptr), fIsRunning(kFALSE), fReturnFromRun(kFALSE),; 123 fNoLog(kFALSE), fNoLogo(kFALSE), fQuit(kFALSE),; 124 fFiles(nullptr), fIdleTimer(nullptr), fSigHandler(nullptr), fExitOnException(kDontExit),; 125 fAppRemote(nullptr); 126{; 127 R__LOCKGUARD(gInterpreterMutex);; 128 ; 129 // Create the list of applications the first time; 130 if (!fgApplications); 131 fgApplications = new TList;; 132 ; 133 // Add the new TApplication early, so that the destructor of the; 134 // default TApplication (if it is called in the block of code below); 135 // will not destroy the files, socket or TColor that have already been; 136 // created.; 137 fgApplications->Add(this);; 138 ; 139 if (gApplication && gApplication->TestBit(kDefaultApplication)) {; 140 // allow default TApplication to be rep",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:4502,avail,available,4502,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['avail'],['available']
Availability,"ppedMultiTF1.h""; 14#include ""TGraph.h""; 15 ; 16 ; 17#include <iostream>; 18 ; 19/** \class TFitResult; 20 \ingroup Hist; 21Extends the ROOT::Fit::Result class with a TNamed inheritance; 22providing easy possibility for I/O; 23*/; 24 ; 25ClassImp(TFitResult);; 26 ; 27////////////////////////////////////////////////////////////////////////////////; 28/// Constructor from a ROOT::Fit::FitResult; 29/// copy the contained TF1 pointer function if it is; 30 ; 31TFitResult::TFitResult(const ROOT::Fit::FitResult& f) :; 32 TNamed(""TFitResult"",""TFitResult""),; 33 ROOT::Fit::FitResult(f); 34{; 35 ROOT::Math::WrappedMultiTF1 * wfunc = dynamic_cast<ROOT::Math::WrappedMultiTF1 *>(ModelFunction().get() );; 36 if (wfunc) wfunc->SetAndCopyFunction();; 37}; 38 ; 39 ; 40////////////////////////////////////////////////////////////////////////////////; 41/// Print result of the fit, by default chi2, parameter values and errors.; 42/// if option ""V"" is given print also error matrix and correlation; 43 ; 44void TFitResult::Print(Option_t *option) const; 45{; 46 TString opt(option);; 47 opt.ToUpper();; 48 bool doCovMat = opt.Contains(""V"");; 49 ROOT::Fit::FitResult::Print( std::cout, doCovMat);; 50}; 51 ; 52////////////////////////////////////////////////////////////////////////////////; 53/// Return the covariance matrix from fit; 54///; 55/// The matrix is a symmetric matrix with a size N equal to; 56/// the total number of parameters considered in the fit including the fixed ones; 57/// The matrix row and columns corresponding to the fixed parameters will contain only zero's; 58 ; 59TMatrixDSym TFitResult::GetCovarianceMatrix() const; 60{; 61 if (CovMatrixStatus() == 0) {; 62 Warning(""GetCovarianceMatrix"",""covariance matrix is not available"");; 63 return TMatrixDSym();; 64 }; 65 TMatrixDSym mat(NPar());; 66 ROOT::Fit::FitResult::GetCovarianceMatrix<TMatrixDSym>(mat);; 67 return mat;; 68}; 69 ; 70////////////////////////////////////////////////////////////////////////////////; 71/// Return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResult_8cxx_source.html:1641,error,error,1641,doc/master/TFitResult_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFitResult_8cxx_source.html,1,['error'],['error']
Availability,"ppendPad(Option_t* option = """"); Bool_tAreAllWorkersAssigned(); Bool_tAreAllWorkersMerged(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidDeactivate(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Int_tGetMergedObjects(); Int_tGetMergedWorkers(); TSlave*GetMerger(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Int_tGetPort(); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; TList*GetWorkers(); Int_tGetWorkersToMerge(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMergerInfo.html:1790,error,error,1790,root/html528/TMergerInfo.html,https://root.cern,https://root.cern/root/html528/TMergerInfo.html,6,['error'],['error']
Availability,"ppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearConstantParams(); voidClearParamValues(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidCollectHistograms(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; vector<RooStats::HistFactory::Asimov>&GetAsimovDatasets(); intGetBinHigh(); intGetBinLow(); RooStats::HistFactory::Channel&GetChannel(string); vector<RooStats::HistFactory::Channel>&GetChannels(); vector<std::string>&GetConstantParams(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); boolGetExportOnly(); vector<RooStats::HistFactory::PreprocessFunction>&GetFunctionObjects(); map<std::string,double>&GetGammaSyst(); virtual const char*TObject::GetIconName() const; map<std::string,double>&GetLogNormSyst(); doubleGetLumi(); doubleGetLumiRelErr(); virtual const char*TNamed::GetName() const; map<std::string,double>&GetNoSyst(); virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html:2310,error,error,2310,root/html534/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__Measurement.html,1,['error'],['error']
Availability,"ppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearConstantParams(); voidClearParamValues(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidCollectHistograms(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; vector<RooStats::HistFactory::Asimov>&GetAsimovDatasets(); intGetBinHigh(); intGetBinLow(); RooStats::HistFactory::Channel&GetChannel(string); vector<RooStats::HistFactory::Channel>&GetChannels(); vector<string>&GetConstantParams(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); boolGetExportOnly(); vector<RooStats::HistFactory::PreprocessFunction>&GetFunctionObjects(); map<string,double>&GetGammaSyst(); virtual const char*TObject::GetIconName() const; map<string,double>&GetLogNormSyst(); doubleGetLumi(); doubleGetLumiRelErr(); virtual const char*TNamed::GetName() const; map<string,double>&GetNoSyst(); virtual char*TObject::GetObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html:2317,error,error,2317,root/html602/RooStats__HistFactory__Measurement.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__Measurement.html,2,['error'],['error']
Availability,"ppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTreeCache::DropBranch(TBranch* b, Bool_t subbranches = kFALSE); virtual voidTTreeCache::DropBranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; const TObjArray*TTreeCache::GetCachedBranches() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTTreeCache::GetEfficiency() const; Double_tTTreeCache::GetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tTTreeCache::GetLearnEntries(); virtual const char*TObject::GetName() const; Int_tGetNFound(); Int_tGetNMissed(); Int_tGetNUnzip(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeCacheUnzip.html:2487,error,error,2487,root/html532/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html532/TTreeCacheUnzip.html,1,['error'],['error']
Availability,"pper limit must also be a multiple of the bin width. Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }; ; TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h->Merge(list);; h->Draw();; }; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27. Definition at line 6022 of file TH1.cxx. ◆ Multiply() [1/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1). virtual . Multiply this histogram by h1. ; this = this*h1; If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Multiply; The function return kFALSE if the Multiply operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 6111 of file TH1.cxx. ◆ Multiply() [2/3]. Bool_t TH1::Multiply ; (; const TH1 * ; h1, . const TH1 * ; h2, . Double_t ; c1 = 1, . Double_t ; c2 = 1, . Option_t * ; option = """" . ). virtual . Replace contents of this histogram by multiplication of h1 by h2. ; this = (c1*h1)*(c2*h2); If errors of this are available (TH1::Sumw2), errors are recalculated. Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this if not already set.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:190807,error,errors,190807,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,3,"['avail', 'error']","['available', 'errors']"
Availability,"pplication) {; 3573 if (gApplication->IsCmdThread()) {; 3574 return ProcessLine(line, error);; 3575 }; 3576 return 0;; 3577 }; 3578 return ProcessLine(line, error);; 3579}; 3580 ; 3581////////////////////////////////////////////////////////////////////////////////; 3582/// Directly execute an executable statement (e.g. ""func()"", ""3+5"", etc.; 3583/// however not declarations, like ""Int_t x;"").; 3584 ; 3585Longptr_t TCling::Calc(const char* line, EErrorCode* error); 3586{; 3587#ifdef R__WIN32; 3588 // Test on ApplicationImp not being 0 is needed because only at end of; 3589 // TApplication ctor the IsLineProcessing flag is set to 0, so before; 3590 // we can not use it.; 3591 if (gApplication && gApplication->GetApplicationImp()) {; 3592 while (gROOT->IsLineProcessing() && !gApplication) {; 3593 Warning(""Calc"", ""waiting for cling thread to free"");; 3594 gSystem->Sleep(500);; 3595 }; 3596 gROOT->SetLineIsProcessing();; 3597 }; 3598#endif // R__WIN32; 3599 R__LOCKGUARD_CLING(gInterpreterMutex);; 3600 if (error) {; 3601 *error = TInterpreter::kNoError;; 3602 }; 3603 cling::Value valRef;; 3604 cling::Interpreter::CompilationResult cr = cling::Interpreter::kFailure;; 3605 try {; 3606 cr = fInterpreter->evaluate(line, valRef);; 3607 }; 3608 catch (cling::InterpreterException& ex); 3609 {; 3610 Error(""Calc"", ""%s.\n%s"", ex.what(), ""Evaluation of your expression was aborted."");; 3611 ex.diagnose();; 3612 cr = cling::Interpreter::kFailure;; 3613 }; 3614 ; 3615 if (cr != cling::Interpreter::kSuccess) {; 3616 // Failure in compilation.; 3617 if (error) {; 3618 // Note: Yes these codes are weird.; 3619 *error = TInterpreter::kRecoverable;; 3620 }; 3621 return 0L;; 3622 }; 3623 if (!valRef.isValid()) {; 3624 // Failure at runtime.; 3625 if (error) {; 3626 // Note: Yes these codes are weird.; 3627 *error = TInterpreter::kDangerous;; 3628 }; 3629 return 0L;; 3630 }; 3631 ; 3632 if (valRef.isVoid()) {; 3633 return 0;; 3634 }; 3635 ; 3636 RegisterTemporary(valRef);; 3637#ifdef R__WIN32;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:139986,error,error,139986,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,['error'],['error']
Availability,"pplication::NeedGraphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual voidTApplication::Open(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofServLite&operator=(const TProofServLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTProofServ::Print(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tTApplication::ProcessLine(const char* line, Bool_t sync = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); Int_tTProofServ::ReceiveFile(const char* file, Bool_t bin, Long64_t size); virtual voidTObject::RecursiveRemove(TObject* obj); static Int_tTProofServ::RegisterDataSets(TList* in, TList* out, TDataSetManager* dsm, TString& e); virtual voidTProofServ::ReleaseWorker(const char*); virtual voidTApplication::RemoveIdleTimer(); voidTProofServ::Reset(const char* dir); voidTObject::ResetBit(UInt_t f); static voidTProofServ::ResolveKeywords(TString& fname, const char* path = 0); voidTProofServ::RestartComputeTime(); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTProofServ::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constME",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServLite.html:10772,error,error,10772,root/html602/TProofServLite.html,https://root.cern,https://root.cern/root/html602/TProofServLite.html,2,['error'],['error']
Availability,"pport . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Reference Guide. The Reference Guide is available for all major ROOT releases, and for the current HEAD of the git master:. HEAD of the git master - browse; 6.20 - browse | download; 6.18 - browse | download; 6.16 - browse | download; 6.14 - browse | download; 6.12 - browse | download; 6.10 - browse | download; 6.08 - browse | download; 6.06 - browse | download; 6.04 - browse | download; 6.02 - browse | download; 5.34 - browse | download; 5.32 - browse | download; 5.30 - browse | download; 5.28 - browse | download; 5.26 - browse | download; 5.24 - browse | download. Additionally, the source code is accessible via:. Browsing the Git repository using gitweb; Github. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/guides/reference-guide.html:2169,down,download,2169,d/guides/reference-guide.html,https://root.cern,https://root.cern/d/guides/reference-guide.html,1,['down'],['download']
Availability,"pproach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionally; compute binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:59662,error,errors,59662,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,1,['error'],['errors']
Availability,"pproach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. void Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibility to optionaly; compute Binomial errors. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. void Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this histogram by the division of h1 by h2*-*-*. this = c1*h1/(c2*h2). if errors are defined (see TH1::Sumw2), errors are also recalculated; Note that if h1 or h2 have Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; However, if option =""B"" is specified, Binomial errors are computed.; In this case c1 and c2 do not make real sense and they are ignored. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:57980,error,errors,57980,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['error'],['errors']
Availability,"pr Version_t TSSLSocket::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TSSLSocket.h. ◆ Close(). void TSSLSocket::Close ; (; Option_t * ; option = """"). overridevirtual . Close the SSL connection. ; Reimplemented from TSocket.; Definition at line 164 of file TSSLSocket.cxx. ◆ DeclFileName(). static const char * TSSLSocket::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TSSLSocket.h. ◆ IsA(). TClass * TSSLSocket::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSocket.; Definition at line 78 of file TSSLSocket.h. ◆ Recv() [1/4]. Int_t TSSLSocket::Recv ; (; char * ; str, . Int_t ; max . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; The expected message must be of type kMESS_STRING. Returns length of received string (can be 0 if otherside of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 75 of file TSSLSocket.h. ◆ Recv() [2/4]. Int_t TSSLSocket::Recv ; (; char * ; str, . Int_t ; max, . Int_t & ; kind . ). inlineoverridevirtual . Receive a character string message of maximum max length. ; Returns in kind the message type. Returns length of received string+4 (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there is nothing to be read). ; Reimplemented from TSocket.; Definition at line 76 of file TSSLSocket.h. ◆ Recv() [3/4]. Int_t TSSLSocket::Recv ; (; Int_t & ; status, . Int_t & ; kind . ). inlineoverridevirtual . Receives a status and a message type. ; Returns length of received integers, 2*sizeof(Int_t) (can be 0 if other side of connection is closed) or -1 in case of error or -4 in case a non-blocking socket would block (i.e. there i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSSLSocket.html:21563,error,error,21563,doc/master/classTSSLSocket.html,https://root.cern,https://root.cern/doc/master/classTSSLSocket.html,1,['error'],['error']
Availability,"practical applications of MVAs correlations are present. ; Linear correlations, measured from the training sample, can be taken into account in a straightforward manner through the square-root of the covariance matrix. The square-root of a matrix \( C \) is the matrix \( C′ \) that multiplied with itself yields \( C \): \( C \)= \( C′C′ \). We compute the square-root matrix (SQM) by means of diagonalising ( \( D \)) the covariance matrix:. \[; D = S^TCS \Rightarrow C' = S \sqrt{DS^T}; \]. and the linear transformation of the linearly correlated into the uncorrelated variables space is then given by multiplying the measured variable tuple by the inverse of the SQM. Note that these transformations are performed for both signal and background separately, since the correlation pattern is not the same in the two samples.; The above diagonalisation is complete for linearly correlated, Gaussian distributed variables only. In real-world examples this is not often the case, so that only little additional information may be recovered by the diagonalisation procedure. In these cases, non-linear methods must be applied. ; Definition at line 61 of file MethodLikelihood.h. Public Member Functions;  MethodLikelihood (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodLikelihood (DataSetInfo &theData, const TString &theWeightFile);  construct likelihood references from file ;  ; virtual ~MethodLikelihood ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to XML ;  ; const Ranking * CreateRanking ();  computes ranking of input variables ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the likelihood estimator for signal fill a new Likelihood branch into the testTree ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes. ;  ; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:2890,recover,recovered,2890,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['recover'],['recovered']
Availability,"present in given dataset; projection of PDF is achieved by constructing an average over all observable values in given set.; Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, -- As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging; const RooAbsData& d). ProjectionRange(const char* rn) -- Override default range of projection integrals to a different range speficied by given range name.; This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) -- Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control. PrintEvalErrors(Int_t numErr) -- Control number of p.d.f evaluation errors printed per curve. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(Double_t value) -- Set curve points at which (pdf) evaluation error occur to specified value. By default the; function value is plotted. Normalization(Double_t scale, -- Adjust normalization by given scale factor. Interpretation of number depends on code: Relative:; ScaleType code) relative adjustment factor, NumEvent: scale to match given number of events. Name(const chat* name) -- Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) -- Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1. ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions. AddTo(const char* name, -- Add constructed projecti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:45866,error,error,45866,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['error'],['error']
Availability,"presenting a convolution with given; basis function. The owners object name is incorporated in the clones name; to avoid multiple convolution objects with the same name in complex PDF structures. RooAddModel will clone all the component models to create a composite convolution object. Int_t basisCode(const char* name) const; Return code for basis function representing by 'name' string.; The basis code of the first component model will be returned,; if the basis is supported by all components. Otherwise 0; is returned. void updateCoefficients(RooAddModel::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const. void getCompIntList(const RooArgSet* nset, const RooArgSet* iset, RooAddModel::pRooArgList& compIntList, Int_t& code, const char* isetRangeName) const; Check if this configuration was created before. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms. void selectNormalization(const RooArgSet* depS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:46104,error,error,46104,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,12,['error'],['error']
Availability,"presenting a convolution with given; basis function. The owners object name is incorporated in the clones name; to avoid multiple convolution objects with the same name in complex PDF structures. RooAddModel will clone all the component models to create a composite convolution object. Int_t basisCode(const char* name) const; Return code for basis function representing by 'name' string.; The basis code of the first component model will be returned,; if the basis is supported by all components. Otherwise 0; is returned. void updateCoefficients(RooAddModel::CacheElem& cache, const RooArgSet* nset) const; Update the coefficient values in the given cache element: calculate new remainder; fraction, normalize fractions obtained from extended ML terms to unity and; multiply these the various range and dimensional corrections needed in the; current use context. Double_t evaluate() const; Calculate the current value. void resetErrorCounters(Int_t resetValue = 10); Reset error counter to given value, limiting the number; of future error messages for this pdf to 'resetValue'. Bool_t checkObservables(const RooArgSet* nset) const; Check if PDF is valid for given normalization set.; Coeffient and PDF must be non-overlapping, but pdf-coefficient; pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const. void getCompIntList(const RooArgSet* nset, const RooArgSet* iset, RooAddModel::pRooArgList& compIntList, Int_t& code, const char* isetRangeName) const; Check if this configuration was created before. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset); Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms. void selectNormalization(const RooArgSet* depSet = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddModel.html:45436,error,error,45436,root/html526/RooAddModel.html,https://root.cern,https://root.cern/root/html526/RooAddModel.html,2,['error'],['error']
Availability,"presses the search for the url fragment; identifier and limits the query identifier search to cases; where the tree name is given as a trailing slash-separated; string at the end of the file name.; Outpus:; filename - the url or filename to be opened or matched; treename - the treename, which may be found as a trailing part of the; name or in a url fragment section. If not found this will; be empty.; query - is the url query section, including the leading question; mark. If not found or the query section is only followed by; a fragment this will be empty.; suffix - the portion of name which was removed to form filename. void Print(Option_t* option = """") const; -- Print the header information of each tree in the chain.; See TTree::Print for a list of options. Long64_t Process(const char* filename, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process all entries in this chain, calling functions in filename.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success.; See TTree::Process. Long64_t Process(TSelector* selector, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process this chain executing the code in selector.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Resets the state of this chain. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this chain after a merge (keep the customization but; forget the data). Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); -- Loop on tree and print entries passing selection.; If varexp is 0 (or """") then print only first 8 columns.; If var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TChain.html:51016,error,error,51016,root/html602/TChain.html,https://root.cern,https://root.cern/root/html602/TChain.html,2,['error'],['error']
Availability,"presses the search for the url fragment; identifier and limits the query identifier search to cases; where the tree name is given as a trailing slash-separated; string at the end of the file name.; Outpus:; filename - the url or filename to be opened or matched; treename - the treename, which may be found as a trailing part of the; name or in a url fragment section. If not found this will; be empty.; query - is the url query section, including the leading question; mark. If not found or the query section is only followed by; a fragment this will be empty.; suffix - the portion of name which was removed to form filename. void Print(Option_t* option = """") const; -- Print the header information of each tree in the chain.; See TTree::Print for a list of options. Long64_t Process(const char* filename, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process all entries in this chain, calling functions in filename.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success.; See TTree::Process. Long64_t Process(void* selector, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); Process this chain executing the code in selector.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. void RecursiveRemove(TObject* obj); Make sure that obj (which is being deleted or will soon be) is no; longer referenced by this TTree. void RemoveFriend(TTree* ); Remove a friend from the list of friends. void Reset(Option_t* option = """"); Resets the state of this chain. void ResetAfterMerge(TFileMergeInfo* ); Resets the state of this chain after a merge (keep the customization but; forget the data). Long64_t Scan(const char* varexp = """", const char* selection = """", Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); -- Loop on tree and print entries passing selection.; If varexp is 0 (or """") then print only first 8 columns.; If varexp =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TChain.html:49325,error,error,49325,root/html534/TChain.html,https://root.cern,https://root.cern/root/html534/TChain.html,1,['error'],['error']
Availability,"pression tree is indeed constant. ; Reimplemented from RooAbsRealLValue.; Definition at line 145 of file RooLinearVar.cxx. ◆ jacobian(). double RooLinearVar::jacobian ; (; ); const. overridevirtual . Return value of Jacobian associated with the transformation. ; Reimplemented from RooAbsRealLValue.; Definition at line 169 of file RooLinearVar.cxx. ◆ operator=(). RooAbsArg & RooAbsRealLValue::operator= ; (; double ; newValue). virtual . Assignment operator from a double. ; Reimplemented from RooAbsRealLValue.; Definition at line 46 of file RooAbsRealLValue.cxx. ◆ readFromStream(). bool RooLinearVar::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream. ; Reimplemented from RooAbsRealLValue.; Definition at line 179 of file RooLinearVar.cxx. ◆ setVal() [1/3]. void RooLinearVar::setVal ; (; double ; value). overridevirtual . Assign given value to linear transformation: sets input variable to (value-offset)/slope If slope is zerom an error message is printed and no assignment is made. ; Implements RooAbsRealLValue.; Definition at line 124 of file RooLinearVar.cxx. ◆ setVal() [2/3]. virtual void RooAbsRealLValue::setVal ; (; double ; value). virtual . Set the current value of the object. Needs to be overridden by implementations. ; Implements RooAbsRealLValue. ◆ setVal() [3/3]. virtual void RooAbsRealLValue::setVal ; (; double ; value, . const char * ;  . ). inlinevirtual . Set the current value of the object. ; The rangeName is ignored. Can be overridden by derived classes to e.g. check if the value fits in the given range. ; Reimplemented from RooAbsRealLValue.; Definition at line 43 of file RooAbsRealLValue.h. ◆ Streamer(). void RooLinearVar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsRealLValue. ◆ StreamerNVirtual(). void RooLinearVar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinearVar.html:73910,error,error,73910,doc/master/classRooLinearVar.html,https://root.cern,https://root.cern/doc/master/classRooLinearVar.html,1,['error'],['error']
Availability,"print full information of fit including covariance matrix; r->Write(); // store the result in a file. The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also; from the fitted function.; If the graph is made persistent, the list of; associated functions is also persistent. Given a pointer (see above); to an associated function myfunc, one can retrieve the function/fit; parameters with calls such as:; Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter. Fit Statistics. You can change the statistics box to display the fit parameters with; the TStyle::SetOptFit(mode) method. This mode has four digits.; mode = pcev (default = 0111); v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degress of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011);; prints the fit probability, parameter names/values, and errors.; You can change the position of the statistics box with these lines; (where g is a pointer to the TGraph):. Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position. void FitPanel(); Display a GUI panel with all graph fit options. See class TFitEditor for example. TAxis * GetXaxis() const; Get x axis of the graph. TAxis * GetYaxis() const; Get y axis of the graph. TAxis * GetZaxis() const; Get z axis of the graph. TList * GetContourList(Double_t contour); Returns the X and Y graphs building a contour. A contour level may; consist in several parts not connected to each other. This function; returns them in a graphs' list. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It always returns a negative value. Real implementation in TGraph2DErrors. Double_t GetErrorY(Int_t bin) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2D.html:26357,error,errors,26357,root/html528/TGraph2D.html,https://root.cern,https://root.cern/root/html528/TGraph2D.html,6,['error'],['errors']
Availability,"printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; (spread option), or e(I,J,K) if CHOPT=' ' (error on mean). See TProfile3D::BuildOptions for explanation of parameters. see other constructors below with all possible combinations of; fix and variable bin size like in TH3D. TProfile3D(const char* name, const char* title, Int_t nbinsx, const Double_t* xbins, Int_t nbinsy, const Double_t* ybins, Int_t nbinsz, const Double_t* zbins, Option_t* option = """"); Create a 3-D Profile with variable bins in X , Y and Z. void BuildOptions(Double_t tmin, Double_t tmax, Option_t* option); Set Profile3D histogram structure and options*-*-; *-* =============================================. If a cell has N data points all with the same value T (especially; possible when dealing with integers), the spread in T for that cell; is zero, and the uncertainty assigned is also zero, and the cell is; ignored in making subsequent fits. If SQRT(T) was the correct error; in the case above, then SQRT(T)/SQRT(N) would be the correct error here.; In fact, any cell with non-zero number of entries N but with zero spread; should have an uncertainty SQRT(T)/SQRT(N). Now, is SQRT(T)/SQRT(N) really the correct uncertainty?; that it is only in the case where the T variable is some sort; of counting statistics, following a Poisson distribution. This should; probably be set as the default case. However, T can be any variable; from an original NTUPLE, not necessarily distributed ""Poissonly"".; The computation of errors is based on the parameter option:; option:; ' ' (Default) Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" SQRT(T)/SQRT(N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 's' Errors are Spread for Spread.ne.0. ,; "" "" SQRT(T) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0; 'i' Errors are Spread/SQRT(N) for Spread.ne.0. ,; "" "" 1./SQRT(12.*N) for Spread.eq.0,N.gt.0 ,; "" "" 0. for N.eq.0. The third case above corresponds to Integer T values for which the; uncertainty is +-0.5, wi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProfile3D.html:29990,error,error,29990,root/html528/TProfile3D.html,https://root.cern,https://root.cern/root/html528/TProfile3D.html,6,['error'],['error']
Availability,"printed if the specified index does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [1/3]. virtual bool RooAbsCategoryLValue::setLabel ; (; const char * ; label, . bool ; printError = true . ). pure virtual . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [2/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [3/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ setOrdinal(). bool RooAbsCategoryLValue::setOrdinal ; (; unsigned int ; index). Set our state to our nth defined type. ; Returnstrue in case of an error. ; Definition at line 110 of file RooAbsCategoryLValue.cxx. ◆ Streamer(). void RooAbsCategoryLValue::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory.; Reimplemented in RooCategory, and RooSuperCategory. ◆ StreamerNVirtual(). void RooAbsCategoryLValue::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:53795,error,error,53795,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['error'],['error']
Availability,"printed per likelihood evaluation. A negative; value suppress output completely, a zero value will only print the error count per p.d.f component,; a positive value is will print details of each error up to numErr messages per p.d.f component. RooFitResult* chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to steer chi2 fits. RooAbsReal* createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a histogram and this function. The following named arguments are supported. Options to control construction of the chi^2. DataError(RooAbsData::ErrorType) -- Choose between Poisson errors and Sum-of-weights errors; NumCPU(Int_t) -- Activate parallel processing feature on N processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to create a chi2. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights, or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given colum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:73869,error,errors,73869,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,12,['error'],['errors']
Availability,"printing.; 174 RPrintSchemaVisitor printVisitor(output);; 175 ; 176 // Note that we do not need to connect the model, we are only looking at its tree of fields; 177 fullModel->GetConstFieldZero().AcceptVisitor(prepVisitor);; 178 ; 179 printVisitor.SetFrameSymbol(frameSymbol);; 180 printVisitor.SetWidth(width);; 181 printVisitor.SetDeepestLevel(prepVisitor.GetDeepestLevel());; 182 printVisitor.SetNumFields(prepVisitor.GetNumFields());; 183 ; 184 for (int i = 0; i < width; ++i); 185 output << frameSymbol;; 186 output << ""\n"";; 187 fullModel->GetConstFieldZero().AcceptVisitor(printVisitor);; 188 for (int i = 0; i < width; ++i); 189 output << frameSymbol;; 190 output << std::endl;; 191 break;; 192 }; 193 case ENTupleInfo::kStorageDetails: fSource->GetSharedDescriptorGuard()->PrintInfo(output); break;; 194 case ENTupleInfo::kMetrics: fMetrics.Print(output); break;; 195 default:; 196 // Unhandled case, internal error; 197 R__ASSERT(false);; 198 }; 199}; 200 ; 201ROOT::Experimental::RNTupleReader *ROOT::Experimental::RNTupleReader::GetDisplayReader(); 202{; 203 if (!fDisplayReader); 204 fDisplayReader = Clone();; 205 return fDisplayReader.get();; 206}; 207 ; 208void ROOT::Experimental::RNTupleReader::Show(NTupleSize_t index, std::ostream &output); 209{; 210 auto reader = GetDisplayReader();; 211 const auto &entry = reader->GetModel().GetDefaultEntry();; 212 ; 213 reader->LoadEntry(index);; 214 output << ""{"";; 215 for (auto iValue = entry.begin(); iValue != entry.end();) {; 216 output << std::endl;; 217 RPrintValueVisitor visitor(*iValue, output, 1 /* level */);; 218 iValue->GetField().AcceptVisitor(visitor);; 219 ; 220 if (++iValue == entry.end()) {; 221 output << std::endl;; 222 break;; 223 } else {; 224 output << "","";; 225 }; 226 }; 227 output << ""}"" << std::endl;; 228}; 229 ; 230const ROOT::Experimental::RNTupleDescriptor &ROOT::Experimental::RNTupleReader::GetDescriptor(); 231{; 232 auto descriptorGuard = fSource->GetSharedDescriptorGuard();; 233 if (!fCachedDescriptor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleReader_8cxx_source.html:8470,error,error,8470,doc/master/RNTupleReader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleReader_8cxx_source.html,1,['error'],['error']
Availability,"priority. TThread * GetThread(Long_t id); Static method to find a thread by id. TThread * GetThread(const char* name); Static method to find a thread by name. TThread * Self(); Static method returning pointer to current thread. Long_t Join(void** ret = 0); Join this thread. Long_t Join(Long_t id, void** ret = 0); Static method to join a thread by id. Long_t SelfId(); Static method returning the id for the current thread. Int_t Run(void* arg = 0); Start the thread. This starts the static method TThread::Function(); which calls the user function specified in the TThread ctor with; the arg argument. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(); Kill this thread. Returns 0 on success, otherwise an error number will; be returned. Int_t Kill(Long_t id); Static method to kill the thread by id. Returns 0 on success, otherwise; an error number will be returned. Int_t Kill(const char* name); Static method to kill thread by name. Returns 0 on success, otherwise; an error number will be returned. Int_t SetCancelOff(); Static method to turn off thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelOn(); Static method to turn on thread cancellation. Returns 0 on success,; otherwise an error number will be returned. Int_t SetCancelAsynchronous(); Static method to set the cancellation response type of the calling thread; to asynchronous, i.e. cancel as soon as the cancellation request; is received. Int_t SetCancelDeferred(); Static method to set the cancellation response type of the calling thread; to deferred, i.e. cancel only at next cancellation point.; Returns 0 on success, otherwise an error number will be returned. Int_t CancelPoint(); Static method to set a cancellation point. Returns 0 on success, otherwise; an error number will be returned. Int_t CleanUpPush(void* free, void* arg = 0); Static method which pushes thread cleanup method on stack.; Returns 0 in case of success and -1 in case of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TThread.html:11884,error,error,11884,root/html530/TThread.html,https://root.cern,https://root.cern/root/html530/TThread.html,5,['error'],['error']
Availability,"private:. TEveTriangleSetEditor(const TEveTriangleSetEditor&); TEveTriangleSetEditor&operator=(const TEveTriangleSetEditor&). Data Members; public:. enum TGFrame::[unnamed] { kDeleteWindowCalled; };; enum TGWindow::EEditMode { kEditEnable; kEditDisable; kEditDisableEvents; kEditDisableGrab; kEditDisableLayout; kEditDisableResize; kEditDisableHeight; kEditDisableWidth; kEditDisableBtnEnable; kEditDisableKeyEnable; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLabel*fInfoInfo label.; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TEveTriangleSet*fMModel object.; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTriangleSetEditor.html:17306,mask,mask,17306,root/html528/TEveTriangleSetEditor.html,https://root.cern,https://root.cern/root/html528/TEveTriangleSetEditor.html,4,['mask'],['mask']
Availability,"probability a couple of approximations and; methodes has been developped. For a detailed discussion, please have a look at; this statistical paper:. http://www-stat.wharton.upenn.edu/~tcai/paper/Binomial-StatSci.pdf. void ComputeRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; Compute Range. void CopyAndRelease(Double_t** newarrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy and release. Bool_t CopyPoints(Double_t** arrays, Int_t ibegin, Int_t iend, Int_t obegin); Copy errors from fE*** to arrays[***]; or to f*** Copy points. Bool_t CtorAllocate(void); Should be called from ctors after fNpoints has been set. void FillZero(Int_t begin, Int_t end, Bool_t from_ctor = kTRUE); Set zero values for point arrays in the range [begin, end). Double_t GetErrorX(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by GraphFitChisquare.; It returns the error along Y at point i. Double_t GetErrorXhigh(Int_t i) const; Get high error on X. Double_t GetErrorXlow(Int_t i) const; Get low error on X. Double_t GetErrorYhigh(Int_t i) const; Get high error on Y. Double_t GetErrorYlow(Int_t i) const; Get low error on Y. void Print(Option_t* chopt = """") const; Print graph and errors values. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point pointed by the mouse. void SetPointError(Int_t i, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); Set ex and ey values for point number i. void SetPointEXlow(Int_t i, Double_t exl); Set EXlow for point i. void SetPointEXhigh(Int_t i, Double_t exh); Set EXhigh for point i. void SetPointEYlow(Int_t i, Double_t eyl); Set EYlow for point i. void SetPointEYhigh(Int_t i, Double_t eyh); Set EYhigh for point i. void Streamer(TBuffer& b); Strea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphAsymmErrors.html:21507,error,error,21507,root/html528/TGraphAsymmErrors.html,https://root.cern,https://root.cern/root/html528/TGraphAsymmErrors.html,3,['error'],['error']
Availability,"problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coeff",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:7849,error,errors,7849,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['error'],['errors']
Availability,"problems are the following:; 271 ; 272##### Excessive numerical roundoff:; 273 ; 274Be especially careful of exponential and factorial functions which get big; 275very quickly and lose accuracy.; 276 ; 277##### Starting too far from the solution:; 278 ; 279The function may have unphysical local minima, especially at infinity in; 280some variables.; 281 ; 282##### Minuit parameter errors in the presence of limits; 283This concerns the way Minuit reports the symmetric (or parabolic) errors; 284on parameters. It does not apply to the errors reported from Minos, which; 285are in general asymmetric.; 286 ; 287The symmetric errors reported by Minuit are always calculated from; 288the covariance matrix, assuming that this matrix has been calculated,; 289usually as the result of a Migrad minimization or a direct; 290calculation by Hesse which inverts the second derivative matrix.; 291 ; 292When there are no limits on the parameter in question, the error reported; 293by Minuit should therefore be exactly equal to the square root of the; 294corresponding diagonal element of the error matrix reported by Minuit.; 295 ; 296However, when there are limits on the parameter, there is a transformation; 297between the internal parameter values seen by Minuit (which are unbounded); 298and the external parameter values seen by the user in FCN (which remain; 299inside the desired limits). Therefore the internal error matrix kept by; 300Minuit must be transformed to an external error matrix for the user.; 301This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; 302where DEXDIN is the derivative of the external value with respect to the; 303internal value at the minimum. This is a linearisation of the; 304transformation, and is the only way to produce an error matrix in external; 305coordinates meaningful to the user. But when reporting the individual; 306parabolic errors for limited parameters, Minuit can do a little better, so; 307it does. In this case, Minuit actually ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:14067,error,error,14067,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['error']
Availability,"procedure. Some branches may have buffers holding many entries. If fAutoSave is negative, AutoSave is automatically called by TTree::Fill when the number of bytes generated since the previous AutoSave is greater than -fAutoSave bytes. If fAutoSave is positive, AutoSave is automatically called by TTree::Fill every N entries. This function may also be invoked by the user. Each AutoSave generates a new key on the file. Once the key with the tree header has been written, the previous cycle (if any) is deleted.; Note that calling TTree::AutoSave too frequently (or similarly calling TTree::SetAutoSave with a small value) is an expensive operation. You should make tests for your own application to find a compromise between speed and the quantity of information you may loose in case of a job crash.; In case your program crashes before closing the file holding this tree, the file will be automatically recovered when you will connect the file in UPDATE mode. The Tree will be recovered at the status corresponding to the last AutoSave.; if option contains ""SaveSelf"", gDirectory->SaveSelf() is called. This allows another process to analyze the Tree while the Tree is being filled.; if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all the current basket are closed-out and written to disk individually.; By default the previous header is deleted after having written the new header. if option contains ""Overwrite"", the previous Tree header is deleted before written the new header. This option is slightly faster, but the default option is safer in case of a problem (disk quota exceeded) when writing the new header.; The function returns the number of bytes written to the file. if the number of bytes is null, an error has occurred while writing the header to the file. How to write a Tree in one process and view it from another process; The following two scripts illustrate how to do this. The script treew.C is executed by process1, treer.C by process2; script treew.C: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:75536,recover,recovered,75536,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['recover'],['recovered']
Availability,"process synchronous. Returns -4 in case of kNoBlock and errno == EWOULDBLOCK. Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). support for streaming TStreamerInfo added by Rene Brun May 2008 support for streaming TProcessID added by Rene Brun June 2008 ; Definition at line 486 of file TUDPSocket.cxx. ◆ Send() [3/4]. Int_t TUDPSocket::Send ; (; Int_t ; kind). virtual . Send a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 427 of file TUDPSocket.cxx. ◆ Send() [4/4]. Int_t TUDPSocket::Send ; (; Int_t ; status, . Int_t ; kind . ). virtual . Send a status and a single message opcode. ; Use kind (opcode) to set the TMessage ""what"" field. Returns the number of bytes that were sent (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending process synchronous. ; Definition at line 445 of file TUDPSocket.cxx. ◆ SendObject(). Int_t TUDPSocket::SendObject ; (; const TObject * ; obj, . Int_t ; kind = kMESS_OBJECT . ). virtual . Send an object. ; Returns the number of bytes sent and -1 in case of error. In case the ""kind"" has been or'ed with kMESS_ACK, the call will only return after having received an acknowledgement, making the sending synchronous. ; Definition at line 566 of file TUDPSocket.cxx. ◆ SendProcessIDs(). void TUDPSocket::SendProcessIDs ; (; const TMessage & ; mess). protected . Check if TProcessIDs must be sent. ; The list of TProcessIDs in the object in the message is found by looking in the TMessage bits. We send only the TProcessIDs not yet send on this socket. ; Definition at line 651 of file TUDPSocket.cxx. ◆ SendRaw(). Int_t TU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUDPSocket.html:31136,error,error,31136,doc/master/classTUDPSocket.html,https://root.cern,https://root.cern/doc/master/classTUDPSocket.html,1,['error'],['error']
Availability,"processes; Range() -- Calculate Chi2 only in selected region. RooAbsReal* createChi2(RooDataHist& data, const RooLinkedList& cmdList); Internal back-end function to create a chi2. RooFitResult* chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Create a chi-2 from a series of x and y value stored in a dataset.; The y values can either be the event weights, or can be another column designated; by the YVar() argument. The y value must have errors defined for the chi-2 to; be well defined. The following named arguments are supported. Options to control construction of the chi^2. YVar(RooRealVar& yvar) -- Designate given column in dataset as Y value; Integrate(Bool_t flag) -- Integrate function over range specified by X errors; rather than take value at bin center. Options to control flow of fit procedure. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time CPU and wall c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsReal.html:75012,error,errors,75012,root/html528/RooAbsReal.html,https://root.cern,https://root.cern/root/html528/RooAbsReal.html,6,['error'],['errors']
Availability,"producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallelMergeTest.C;  pclient.CClient program to test parallel sockets ;  pserv.CServer program to test parallel sockets ;  spy.CClient program which allows the snooping of objects from a spyserv process ;  spyserv.CServer program which allows clients, ""spies"", to connect and snoop objects ;  TestAuth.CMacro test authentication methods stand alone ;  testTUDPSocket.CAs test echo server use udpserver.c in the same directory ;  treeClient.CClient program which creates and fills 2 histograms and a TTree ;  TUriTest.CRudimentary TUri test macro ;  udpserver.c;  ► physics;  PhaseSpace.C Example of use of TGenPhaseSpace ;  ► proof;  EmptyInclude.hEmpty file to test TProof::Load in runProof.C and StressProof.cxx in conjunction with ProcFileElements and ProofEventProc ;  finalizeProof.CMacro to finalize queries run with the macro tutorials/runProof ;  getProof.CAttaches to a PROOF session, possibly at the indicated URL ;  ProcFileElements.CClass to hold information about the processed elements of a file ;  ProcFileElements.hClass to hold information about the processed elements of a file ;  ProofAux.CSelector used for auxiliary actions in the PROOF tutorials ;  ProofAux.hSelector used for auxiliary actions in the PROOF tutorials ;  ProofEvent.CSelector for generic processing with Event ;  ProofEvent.hSelector for generic processing with Event ;  ProofEventProc.CSelector t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:135204,echo,echo,135204,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,5,['echo'],['echo']
Availability,"production adapted from the ATLAS Open Data release in 2020 (http://opendata.atlas.cern/release/2020/documentation/). The data was recorded with the ATLAS detector during 2016 at a center-of-mass energy of 13 TeV. Top quarks with a mass of about 172 GeV are mostly produced in pairs but also appear alone, dominantly from the decays of a W boson in association with a light jet.; The analysis is translated to a RDataFrame workflow processing up to 60 GB of simulated events and data. By default the analysis runs on a preskimmed dataset to reduce the runtime. The full dataset can be used with the –full-dataset argument and you can also run only on a fraction of the original dataset using the argument –lumi-scale.; See the corresponding spec json file. ; import ROOT; import sys; import json; import argparse; import os; ; # Argument parsing; parser = argparse.ArgumentParser(); parser.add_argument(""--lumi-scale"", type=float, default=0.05,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); if 'df107_SingleTopAnalysis.py' in sys.argv[0]:; # Script; args = parser.parse_args(); else:; # Notebook; args = parser.parse_args(args=[]); ; if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(); ; if not args.full_dataset: lumi_scale = 0.05 # The preskimmed dataset contains only 0.5 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.1f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)); ; if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html:1377,avail,available,1377,doc/master/df107__SingleTopAnalysis_8py.html,https://root.cern,https://root.cern/doc/master/df107__SingleTopAnalysis_8py.html,1,['avail'],['available']
Availability,"projDeps = RooArgSet(), bool includeWeights = kTRUE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNumSWeightVars() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooDataSet*GetSDataSet() const; Double_tGetSumOfEventSWeight(Int_t numEvent) const; Double_tGetSWeight(Int_t numEvent, const char* sVariable) const; RooArgListGetSWeightVars() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetYieldFromSWeight(const char* sVariabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SPlot.html:2268,error,error,2268,root/html526/RooStats__SPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__SPlot.html,7,['error'],['error']
Availability,"proofopt=0);  Constructor: check PROOF and load selectors PAR. ;  ;  ~TProofBench () override;  Destructor. ;  ; void CloseOutFile ();  Close output file. ;  ; Int_t CopyDataSet (const char *dset, const char *dsetdst, const char *destdir);  Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst' decribing them. ;  ; Bool_t GetDebug ();  ; const char * GetOutFileName () const;  ; TClass * IsA () const override;  ; Int_t MakeDataSet (const char *dset=0, Long64_t nevt=-1, const char *fnroot=""event"", Bool_t regenerate=kFALSE);  Create the largest dataset for the run. ;  ; Int_t OpenOutFile (Bool_t wrt=kFALSE, Bool_t verbose=kTRUE);  Set the otuput file Return 0 on success, -1 on error. ;  ; Int_t ReleaseCache (const char *dset);  Release memory cache for dataset 'dset' Return 0 on success, -1 on error. ;  ; Int_t RemoveDataSet (const char *dset);  Physically remove the dataset 'dset', i.e. ;  ; Int_t RunCPU (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1, Int_t step=-1);  Perform the CPU run Return 0 on success, -1 on error. ;  ; Int_t RunCPUx (Long64_t nevents=-1, Int_t start=-1, Int_t stop=-1);  Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ;  ; Int_t RunDataSet (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1, Int_t step=1);  Perform a test using dataset 'dset' Return 0 on success, -1 on error Open the file for the results. ;  ; Int_t RunDataSetx (const char *dset=""BenchDataSet"", Int_t start=1, Int_t stop=-1);  Perform a test using dataset 'dset' scanning over the number of workers per node. ;  ; void SetCPUPar (const char *par);  ; void SetCPUSel (const char *sel);  ; void SetDataGenPar (const char *par);  ; void SetDataGenSel (const char *sel);  ; void SetDataPar (const char *par);  ; void SetDataSel (const char *sel);  ; void SetDebug (Bool_t debug=kTRUE);  ; void SetHistType (TPBHistType *histtype);  ; void SetNFilesWrk (Int_t nf=0);  ; void SetNHist (Int_t nh); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:1652,error,error,1652,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['error'],['error']
Availability,"proofsrv).; Returns the number of bytes sent or -1 in case of error. Bool_t Ping(const char* ord = 0); Ping functionality: contact the server to check its vitality.; If external, the server waits for a reply from the server; Returns kTRUE if OK or kFALSE in case of error. void RemoteTouch(); Remote touch functionality: contact the server to proof our vitality.; No reply from server is expected. void CtrlC(); Interrupt the remote protocol instance. Used to propagate Ctrl-C.; No reply from server is expected. Int_t PickUpReady(); Wait and pick-up next buffer from the asynchronous queue. TXSockBuf * PopUpSpare(Int_t sz); Pop-up a buffer of at least size bytes from the spare list; If none is found either one is reallocated or a new one; created. void PushBackSpare(); Release read buffer giving back to the spare list. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Int_t SendInterrupt(Int_t type); Send urgent message (interrupt) to remote server; Returns 0 or -1 in case of error. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -5 if pipe broken (connection invalid).; In those case mess == 0. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Send message to intermediate coordinator.; If any output is due, this is returned as an obj string to be; deleted by the caller. void SendUrgent(Int_t type, Int_t int1, Int_t int2); Send urgent message to counterpart; 'type' specifies the type of; the message (see TXSocket::EUrgentMsgType), and 'int1', 'int2'; two containers for additional information. void InitEnvs(); Init environment",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXSocket.html:17467,error,error,17467,root/html602/TXSocket.html,https://root.cern,https://root.cern/root/html602/TXSocket.html,2,['error'],['error']
Availability,"propriate callback when certain conditions occur. ; Definition at line 23 of file TSAXParser.h. Public Member Functions;  TSAXParser ();  Create SAX parser. ;  ;  ~TSAXParser () override;  TSAXParser desctructor. ;  ; virtual void ConnectToHandler (const char *handlerName, void *handler);  A default TSAXParser to a user-defined Handler connection function. ;  ; TClass * IsA () const override;  ; virtual void OnCdataBlock (const char *text, Int_t len);  Emit a signal for OnCdataBlock. ;  ; virtual void OnCharacters (const char *characters);  Emit a signal for OnCharacters, where characters are the characters outside of tags. ;  ; virtual void OnComment (const char *text);  Emit a signal for OnComment, where text is the comment. ;  ; virtual void OnEndDocument ();  Emit a signal for OnEndDocument. ;  ; virtual void OnEndElement (const char *name);  Emit a signal for OnEndElement, where name is the Element's name. ;  ; virtual Int_t OnError (const char *text);  Emit a signal for OnError, where text is the error and it returns the Parse Error Code, see TXMLParser. ;  ; virtual Int_t OnFatalError (const char *text);  Emit a signal for OnFactalError, where text is the error and it returns the Parse Error Code, see TXMLParser. ;  ; virtual void OnStartDocument ();  Emit a signal for OnStartDocument. ;  ; virtual void OnStartElement (const char *name, const TList *attr);  Emit a signal for OnStarElement, where name is the Element's name and attribute is a TList of (TObjString*, TObjString *) TPair's. ;  ; virtual void OnWarning (const char *text);  Emit a signal for OnWarning, where text is the warning. ;  ; Int_t ParseBuffer (const char *contents, Int_t len) override;  It parse the contents, instead of a file. ;  ; Int_t ParseFile (const char *filename) override;  It creates the parse context of the xml file, where the xml file name is filename. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_Stream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:1753,error,error,1753,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,1,['error'],['error']
Availability,"propriate value for the desired confidence level and call the method MnContours::operator() for each contour.; 5.2.3 contour(…); MnContours::contour(unsigned int parx, unsigned int pary, unsigned int npoints = 20) causes a \(\mbox{CONTOURS}\) error analysis and returns the result in form of ContoursError. As a by-product ContoursError keeps the MinosError information of parameters \(\mbox{parx}\) and \(\mbox{pary}\). The result ContoursError can be easily printed using std::cout.; 5.3 MnEigen; [api:eigen] MnEigen calculates and the eigenvalues of the user covariance matrix MnUserCovariance.; 5.3.1 MnEigen(); MnEigen is instantiated via default constructor.; 5.3.2 operator(); operator()(const MnUserCovariance&) const will perform the calculation of the eigenvalues of the covariance matrix and return the result in form of a std::vector<double>. The eigenvalues are ordered from the smallest first to the largest eigenvalue.; 5.4 MnHesse; [api:hesse]; With MnHesse the user can instructs M to calculate, by finite differences, the Hessian or error matrix. That is, it calculates the full matrix of second derivatives of the function with respect to the currently variable parameters, and inverts it.; 5.4.1 MnHesse(); The default constructor of MnHesse() will use default settings of MnStrategy. Other constructors with user specific MnStrategy settings are provided as well.; 5.4.2 operator(); The MnHesse::operator() is overloaded both for internal (M ) and external (user) parameters. External parameters can be specified as std::vector\(<\)double\(>\) or as MnUserParameters. The return value is always a MnUserParameterState.; The optional argument \(\mbox{maxcalls}\) specifies the (approximate) maximum number of function calls after which the calculation will be stopped.; 5.5 MnMachinePrecision; [api:epsmac]; 5.5.1 MnMachinePrecision(); M determines the nominal precision itself in the default constructor MnMachinePrecision().; 5.5.2 setPrecision(double eps); Informs M that the re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:45654,error,error,45654,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TGWindow * fMsgWindow;  window handling container messages ;  ; TGPopupMenu * fPopup;  Popup menu associated to the title icon. ;  ;  Protected Attributes inherited from TGIcon; TImage * fImage;  image ;  ; TString fPath;  directory of image ;  ; const TGPicture * fPic;  icon picture ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x position ;  ; Int_t fY;  frame y position ;  ;  Protected Attributes inherited from TGWindow; UInt_t fEditDisabled;  flags used for ""guibuilding"" ;  ; TString fName;  name of the window used in SavePrimitive() ;  ; Bool_t fNeedRedraw;  kTRUE if window needs to be redrawn ;  ; const TGWindow * fParent;  Parent window. ;  ;  Protected Attributes inherited from TGObject; TGClient * fClient;  Connection to display server. ;  ; Handle_t fId;  X11/Win32 Window identifier. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Friends; class TGMdiFrame;  ; class TGMdiTitleBar;  . Additional Inherited Members;  Public Types inherited from TGWindow; enum  EEditMode { ;   kEditEnable = 0; , kEditDisable = (1ULL << ( 0 )); , kEditDisableEvents = (1ULL << ( 1 )); , kEditDisableGrab = (1ULL << ( 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiTitleIcon.html:24130,mask,mask,24130,doc/master/classTGMdiTitleIcon.html,https://root.cern,https://root.cern/doc/master/classTGMdiTitleIcon.html,1,['mask'],['mask']
Availability,"protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance Chart:. TObject. ←; TSynapse. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { return fwei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSynapse.html:6097,error,error,6097,root/html602/TSynapse.html,https://root.cern,https://root.cern/root/html602/TSynapse.html,2,['error'],['error']
Availability,"protectedvirtual; DoProfile(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoProjection(bool onX, const char *name, Int_t firstbin, Int_t lastbin, Option_t *option) constTH2protectedvirtual; DoQuantiles(bool onX, const char *name, Double_t prob) constTH2protectedvirtual; Draw(Option_t *option="""") overrideTH1virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""", const char *name_postfix=""_copy"") constTH1virtual; DrawNormalized(Option_t *option="""", Double_t norm=1) constTH1virtual; DrawPanel()TH1virtual; Dump() constTObjectvirtual; EBinErrorOpt enum nameTH1; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatOverflows enum nameTH1; EStatusBits enum nameTH1; Eval(TF1 *f1, Option_t *option="""")TH1virtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTH1virtual; ExtendAxis(Double_t x, TAxis *axis)TH1virtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBarOffsetTH1protected; fBarWidthTH1protected; fBinStatErrOptTH1protected; fBitsTObjectprivate; fBufferTH1protected; fBufferSizeTH1protected; fContourTH1protected; fDimensionTH1protected; fDirectoryTH1protected; fEntriesTH1protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; FFT(TH1 *h_output, Option_t *option)TH1virtual; fFunctionsTH1protected; fgAddDirectoryTH1protectedstatic; fgBufferSizeTH1protectedstatic; fgDefaultSumw2TH1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgStatOverflowsTH1protectedstatic; Fill(Double_t) overrideTH2protectedvirtual; Fill(const char *, Double_t) overrideTH2inlineprotectedvirtual; Fill(Double_t x, Double_t y) overrideTH2virtual; Fill(Double_t x, Double_t y, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2-members.html:4681,error,error,4681,doc/master/classTH2-members.html,https://root.cern,https://root.cern/doc/master/classTH2-members.html,2,['error'],['error']
Availability,"prototype, i.e. ""char*,int,float"". If the class is 0 the global; function list will be searched. const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE); The 'name' is known to the interpreter, this function returns; the internal version of this name (usually just resolving typedefs); This is used in particular to synchronize between the name used; by rootcint and by the run-time environment (TClass); Return 0 if the name is not known. void Execute(const char* function, const char* params, int* error = 0); Execute a global function with arguments params. void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); Execute a method from class cl with arguments params. void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); Execute a method from class cl with the arguments in array params; (params[0] ... params[n] = array of TObjString parameters). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); Execute a CINT macro. const char * GetTopLevelMacroName() const; Return the file name of the current un-included interpreted file.; See the documentation for GetCurrentMacroName(). const char * GetCurrentMacroName() const; Return the file name of the currently interpreted file,; included or not. Example to illustrate the difference between; GetCurrentMacroName() and GetTopLevelMacroName():. ; inclfile.h. #include <iostream>; void inclfunc() {; std::cout << ""In inclfile.h"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() returns "" <<; TCint::GetTopLevelMacroName() << std::endl;; }. mymacro.C. #include <iostream>; #include ""inclfile.h""; void mymacro() {; std::cout << ""In mymacro.C"" << std::endl;; std::cout << "" TCint::GetCurrentMacroName() returns "" <<; TCint::GetCurrentMacroName() << std::endl;; std::cout << "" TCint::GetTopLevelMacroName() return",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:27287,error,error,27287,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['error'],['error']
Availability,"ps this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TMonitor* mon, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of messages; received. Can be 0 if there are no active slaves.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. void CleanGDirectory(TList* ol); Remove links to objects in list 'ol' from gDirectory. Int_t CollectInputFrom(TSocket* s, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect and analyze available input from socket s.; Returns 0 on success, -1 if any failure occurs. Int_t HandleInputMessage(TSlave* wrk, TMessage* m, Bool_t deactonfail = kFALSE); Analyze the received message.; Returns 0 on success (1 if this the last message from this socket), -1 if; any failure occurs. void HandleSubmerger(TMessage* mess, TSlave* sl); Process a message of type kPROOF_SUBMERGER. void RedirectWorker(TSocket* s, TSlave* sl, Int_t output_size); Redirect output of worker sl to some merger. Int_t FindNextFreeMerger(); Return a merger, which is both active and still accepts some workers to be; assigned to it. It works on the 'round-robin' basis. void AskForOutput(TSlave* sl); Master asks for output from worker sl. void UpdateDialog(); Final update of the progress dialog. void ActivateAsyncInput(); Activate the a-sync input handler. void DeActivateAsyncInput(); De-activate a-sync input handler. Int_t GetActiveMergersCount(); Get the active mergers count. Bool_t CreateMerger(TSlave* sl, Int_t port); Create a new merger. void MarkBad(TSlave* wrk, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:43292,failure,failure,43292,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['failure'],['failure']
Availability,"ps(TUrl* furl, TString& fn, TList* srvmaplist = 0); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual Int_tClearCache(const char* uri = 0); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TStringTDataSetManager::CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static Int_tTDataSetManager::FillMetaData(TFileInfo* fi, TDirectory* d, const char* rdir = ""/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Long64_tTDataSetManager::GetAvgFileSize() const; virtual TFileCollection*GetDataSet(const char* uri, const char* srv = 0); TFileCollection*GetDataSet(const char* group, const char* user, const char* dsName, UInt_t option = 0, TMD5** checksum = 0); virtual TMap*GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport); TMap*GetDataSets(const char* group, const char* user, const char* dsName = 0, UInt_t option = 0); static TList*TDataSetManager::GetDataSetSrvMaps(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:1851,error,error,1851,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,3,['error'],['error']
Availability,"ps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); coverity[UNINIT_CTOR]; Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration rang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegrator1D.html:8343,toler,tolerance,8343,root/html530/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html530/RooIntegrator1D.html,3,['toler'],['tolerance']
Availability,"psMaximum number of steps; Int_t_minStepsZeroMinimum number of steps to declare convergence to zero; Bool_tRooAbsIntegrator::_printEvalCounterIf true print number of function evaluation required for integration; Double_t_range! Size of integration range; RooIntegrator1D::SummationRule_rule; Double_t*_s! Integrator workspace; Double_t_savedResult! Integrator workspace; Bool_t_useIntegrandLimitsIf true limits of function binding are ued; Bool_tRooAbsIntegrator::_validIs integrator in valid state?; Double_t*_x! do not persist; Double_t_xmax! Upper integration bound; Double_t_xmin! Lower integration bound. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void registerIntegrator(RooNumIntFactory& fact); Register RooIntegrator1D, is parameters and capabilities with RooNumIntFactory. RooIntegrator1D(); Default constructor. RooIntegrator1D(const RooAbsFunc& function, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding, using specified summation; rule, maximum number of steps and conversion tolerance. The integration; limits are taken from the function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, RooIntegrator1D::SummationRule rule = Trapezoid, Int_t maxSteps = 0, Double_t eps = 0); Construct integrator on given function binding for given range,; using specified summation rule, maximum number of steps and; conversion tolerance. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object. The integration limits are taken from the; function binding. RooIntegrator1D(const RooAbsFunc& function, Double_t xmin, Double_t xmax, const RooNumIntConfig& config); Construct integrator on given function binding, using specified; configuration object and integration rang",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator1D.html:8251,toler,tolerance,8251,root/html528/RooIntegrator1D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator1D.html,1,['toler'],['tolerance']
Availability,"pt = o; }. void SetSessionID(Int_t id). Int_t Send(const TMessage& mess); Send interfaces. Int_t Send(Int_t kind); { return TSocket::Send(kind); }. Int_t Send(Int_t status, Int_t kind); { return TSocket::Send(status, kind); }. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); { return TSocket::Send(mess, kind); }. Int_t SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock). Int_t Recv(TMessage*& mess); Recv interfaces. Int_t Recv(Int_t& status, Int_t& kind); { return TSocket::Recv(status, kind); }. Int_t Recv(char* mess, Int_t max); { return TSocket::Recv(mess, max); }. Int_t Recv(char* mess, Int_t max, Int_t& kind); { return TSocket::Recv(mess, max, kind); }. Int_t RecvRaw(void* buf, Int_t len, ESendRecvOptions opt = kDefault); Interrupts. Int_t GetInterrupt(Bool_t& forward). void SendUrgent(Int_t type, Int_t int1, Int_t int2); Urgent message. void SetInterrupt(Bool_t i = kTRUE); Interrupt the low level socket. Bool_t IsInterrupt(); Set / Check async msg queue waiting status. { R__LOCKGUARD(fAMtx); return fRDInterrupt; }. void SetAWait(Bool_t w = kTRUE); { R__LOCKGUARD(fAMtx); fAWait = w; }. Bool_t IsAWait(); { R__LOCKGUARD(fAMtx); return fAWait; }. Int_t Flush(); Flush the asynchronous queue. Bool_t Ping(const char* ord = 0); Ping the counterpart. void RemoteTouch(); Request remote touch of the admin file associated with this connection. void CtrlC(); Propagate a Ctrl-C. Int_t SetOption(ESockOptions , Int_t ); Standard options cannot be set. { return 0; }. void DisableTimeout(); Disable / Enable read timeout. { fDontTimeout = kTRUE; }. void EnableTimeout(); { fDontTimeout = kFALSE; }. Int_t Reconnect(); Try reconnection after error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-09-08 17:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocket.html:15675,error,error,15675,root/html534/TXSocket.html,https://root.cern,https://root.cern/root/html534/TXSocket.html,1,['error'],['error']
Availability,"pt changes; Bool_tTGedFrame::fAvoidSignalflag for executing slots; TGCompositeFrame*TGeoConeEditor::fBFrameFrame containing Apply/Undo; Pixel_tTGFrame::fBackgroundframe background color; Int_tTGFrame::fBorderWidthframe border width; TGClient*TGObject::fClientConnection to display server; TGCompositeFrame*TGeoConeEditor::fDFrameFrame containing Delayed draw; Int_tTGFrame::fDNDStateEDNDFlags; TGCheckButton*TGeoConeEditor::fDelayedCheck button for delayed draw; Double_tTGeoConeEditor::fDziInitial box dz; TGNumberEntry*TGeoConeEditor::fEDzNumber entry for DZ; TGNumberEntry*fEPhi1Number entry for phi1; TGNumberEntry*fEPhi2Number entry for phi2; TGNumberEntry*TGeoConeEditor::fERmax1Number entry for rmax1; TGNumberEntry*TGeoConeEditor::fERmax2Number entry for rmax2; TGNumberEntry*TGeoConeEditor::fERmin1Number entry for rmin1; TGNumberEntry*TGeoConeEditor::fERmin2Number entry for rmin2; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGeoConeEditor::fIsModifiedFlag that volume was modified; Bool_tTGeoConeEditor::fIsShapeEditableFlag that the shape can be changed; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tfLockPhi lock; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoConeSegEditor.html:19303,mask,mask,19303,root/html602/TGeoConeSegEditor.html,https://root.cern,https://root.cern/root/html602/TGeoConeSegEditor.html,2,['mask'],['mask']
Availability,"pt on drawing actions. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetMerging(Bool_t on = kTRUE); Switch on/off merge timer. ~TProofPlayerRemote(); Destructor. Int_t InitPacketizer(TDSet* dset, Long64_t nentries, Long64_t first, const char* defpackunit, const char* defpackdata); Init the packetizer; Return 0 on success (fPacketizer is correctly initialized), -1 on failure. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* set, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF.; This method is called on client and on the PROOF master.; The return value is -1 in case of an error and TSelector::GetStatus() in; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(Bool_t savememvalues = kFALSE); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofPr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerRemote.html:18481,error,error,18481,root/html534/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html534/TProofPlayerRemote.html,2,['error'],['error']
Availability,"pt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-03-17 21:00; This page has been automatically generated. For comments or suggestions regarding ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRint.html:14917,echo,echo,14917,root/html534/TRint.html,https://root.cern,https://root.cern/root/html534/TRint.html,1,['echo'],['echo']
Availability,"pt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TRint.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-07-04 15:37; This page has been automatically generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRint.html:14898,echo,echo,14898,root/html530/TRint.html,https://root.cern,https://root.cern/root/html530/TRint.html,1,['echo'],['echo']
Availability,"pt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: Rene Brun 17/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id: TRint.h 39402 2011-05-26 12:56:31Z axel $ » Last generated: 2011-12-02 14:28; This page has been automatically generat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TRint.html:14898,echo,echo,14898,root/html532/TRint.html,https://root.cern,https://root.cern/root/html532/TRint.html,1,['echo'],['echo']
Availability,"pt(); Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". const char * SetPrompt(const char* newPrompt); Set a new default prompt. It returns the previous prompt.; The prompt may contain a %d which will be replaced by the commend; number. The default prompt is ""root [%d] "". The maximum length of; the prompt is 55 characters. To set the prompt in an interactive; session do:; root [0] ((TRint*)gROOT->GetApplication())->SetPrompt(""aap> ""); aap>. Bool_t HandleTermInput(); Handle input coming from terminal. void HandleException(Int_t sig); Handle exceptions (kSigBus, kSigSegmentationViolation,; kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; Specific TApplication implementations may want something different here. void Terminate(int status); Terminate the application. Reset the terminal to sane mode and call; the logoff macro defined via Rint.Logoff environment variable. void SetEchoMode(Bool_t mode); Set console mode:. mode = kTRUE - echo input symbols; mode = kFALSE - noecho input symbols. Long_t ProcessRemote(const char* line, Int_t* error = 0); Process the content of a line starting with "".R"" (already stripped-off); The format is; [user@]host[:dir] [-l user] [-d dbg] [script]; The variable 'dir' is the remote directory to be used as working dir.; The username can be specified in two ways, ""-l"" having the priority; (as in ssh).; A 'dbg' value > 0 gives increasing verbosity.; The last argument 'script' allows to specify an alternative script to; be executed remotely to startup the session. Long_t ProcessLineNr(const char* filestem, const char* line, Int_t* error = 0); Calls ProcessLine() possibly prepending a #line directive for; better diagnostics. Must be called after fNcmd has been increased for; the next line. Int_t TabCompletionHook(char* buf, int* pLoc, ostream& out); Forward tab completion request to our TTabCom::Hook(). TRint(const TRint& ). TRint& operator=(const TRint& ). void Interrupt(); { fInterrupt = kTRUE; }. » Author: ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRint.html:15743,echo,echo,15743,root/html602/TRint.html,https://root.cern,https://root.cern/root/html602/TRint.html,2,['echo'],['echo']
Availability,"pt, but only bins inside the selected range will be filled. . Definition at line 226 of file THnBase.h. ◆ Projection() [3/3]. TH2D * THnBase::Projection ; (; Int_t ; yDim, . Int_t ; xDim, . Option_t * ; option = """" . ); const. inline . Project all bins into a 2-dimensional histogram, keeping only axes ""xDim"" and ""yDim"". ; WARNING: just like TH3::Project3D(""yx"") and TTree::Draw(""y:x""), Projection(y,x) uses the first argument to define the y-axis and the second for the x-axis!; If ""option"" contains ""E"" errors will be calculated. ""A"" ranges of the taget axes will be ignored. ; Definition at line 239 of file THnBase.h. ◆ ProjectionAny(). TObject * THnBase::ProjectionAny ; (; Int_t ; ndim, . const Int_t * ; dim, . Bool_t ; wantNDim, . Option_t * ; option = """" . ); const. protected . Project all bins into a ndim-dimensional THn / THnSparse (whatever *this is) or if (ndim < 4 and !wantNDim) a TH1/2/3 histogram, keeping only axes in dim (specifying ndim dimensions). ; If ""option"" contains:; ""E"" errors will be calculated.; ""A"" ranges of the target axes will be ignored.; ""O"" original axis range of the target axes will be kept, but only bins inside the selected range will be filled. . Definition at line 618 of file THnBase.cxx. ◆ ProjectionND(). THnBase * THnBase::ProjectionND ; (; Int_t ; ndim, . const Int_t * ; dim, . Option_t * ; option = """" . ); const. inline . Definition at line 257 of file THnBase.h. ◆ RebinBase() [1/2]. THnBase * THnBase::RebinBase ; (; const Int_t * ; group); const. protected . Combine the content of ""group"" neighboring bins for each dimension into a new bin and return the resulting THnBase. ; For group={2,1,1} and a 3 dimensional histogram, pairs of x-bins will be grouped. ; Definition at line 1248 of file THnBase.cxx. ◆ RebinBase() [2/2]. THnBase * THnBase::RebinBase ; (; Int_t ; group); const. protected . Combine the content of ""group"" neighboring bins into a new bin and return the resulting THnBase. ; For group=2 and a 3 dimensional histogram, all ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnBase.html:40036,error,errors,40036,doc/master/classTHnBase.html,https://root.cern,https://root.cern/doc/master/classTHnBase.html,1,['error'],['errors']
Availability,"pt.First(""d""),1);; 2390 // remove also other options; 2391 if (opt.Contains(""e"")) opt.Remove(opt.First(""e""),1);; 2392 if (!gPad || !gPad->FindObject(h1)) {; 2393 h1->Draw(opt);; 2394 } else {; 2395 h1->Paint(opt);; 2396 }; 2397 }; 2398 ; 2399 return h1;; 2400}; 2401 ; 2402 ; 2403////////////////////////////////////////////////////////////////////////////////; 2404/// Project a 2-D histogram into a 1-D histogram along X.; 2405///; 2406/// The projection is always of the type TH1D.; 2407/// The projection is made from the channels along the Y axis; 2408/// ranging from firstybin to lastybin included.; 2409/// By default, all bins including under- and overflow are included.; 2410/// The number of entries in the projection is estimated from the; 2411/// number of effective entries for all the cells included in the projection.; 2412///; 2413/// To exclude the underflow bins in Y, use firstybin=1.; 2414/// To exclude the overflow bins in Y, use lastybin=nx.; 2415///; 2416/// if option ""e"" is specified, the errors are computed.; 2417/// if option ""d"" is specified, the projection is drawn in the current pad.; 2418/// if option ""o"" original axis range of the target axes will be; 2419/// kept, but only bins inside the selected range will be filled.; 2420///; 2421/// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; 2422/// One must create a graphical cut (mouse or C++) and specify the name; 2423/// of the cut between [] in the option.; 2424/// For example, with a TCutG named ""cutg"", one can call:; 2425/// myhist->ProjectionX("" "",firstybin,lastybin,""[cutg]"");; 2426/// To invert the cut, it is enough to put a ""-"" in front of its name:; 2427/// myhist->ProjectionX("" "",firstybin,lastybin,""[-cutg]"");; 2428/// It is possible to apply several cuts:; 2429/// myhist->ProjectionX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; 2430///; 2431/// NOTE that if a TH1D named ""name"" exists in the current directory or pad; 2432/// the histogram is reset and filled again ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:98253,error,errors,98253,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['error'],['errors']
Availability,"ptRootMapFileName,; 5116 rootmapLibName,; 5117 classesDefsList,; 5118 classesNamesForRootmap,; 5119 nsNames,; 5120 typedefsRootmapLines,; 5121 enumNames,; 5122 varNames,; 5123 headersClassesMap,; 5124 headersToIgnore);; 5125 ; 5126 if (0 != rootclingRetCode) return 1;; 5127 }; 5128 ; 5129 if (genreflex::verbose); 5130 tmpCatalog.dump();; 5131 ; 5132 // Manually call end of translation unit because we never call the; 5133 // appropriate deconstructors in the interpreter. This writes out the C++; 5134 // module file that we currently generate.; 5135 {; 5136 cling::Interpreter::PushTransactionRAII RAII(&interp);; 5137 CI->getSema().getASTConsumer().HandleTranslationUnit(CI->getSema().getASTContext());; 5138 }; 5139 ; 5140 // Add the warnings; 5141 rootclingRetCode += ROOT::TMetaUtils::GetNumberOfErrors();; 5142 ; 5143 // make sure the file is closed before committing; 5144 fileout.close();; 5145 ; 5146 // Before returning, rename the files if no errors occurred; 5147 // otherwise clean them to avoid remnants (see ROOT-10015); 5148 if(rootclingRetCode == 0) {; 5149 rootclingRetCode += tmpCatalog.commit();; 5150 } else {; 5151 tmpCatalog.clean();; 5152 }; 5153 ; 5154 return rootclingRetCode;; 5155 ; 5156}; 5157 ; 5158namespace genreflex {; 5159 ; 5160////////////////////////////////////////////////////////////////////////////////; 5161/// Loop on arguments: stop at the first which starts with -; 5162 ; 5163 unsigned int checkHeadersNames(std::vector<std::string> &headersNames); 5164 {; 5165 unsigned int numberOfHeaders = 0;; 5166 for (std::vector<std::string>::iterator it = headersNames.begin();; 5167 it != headersNames.end(); ++it) {; 5168 const std::string headername(*it);; 5169 if (ROOT::TMetaUtils::IsHeaderName(headername)) {; 5170 numberOfHeaders++;; 5171 } else {; 5172 ROOT::TMetaUtils::Warning(nullptr,; 5173 ""*** genreflex: %s is not a valid header name (.h and .hpp extensions expected)!\n"",; 5174 headername.c_str());; 5175 }; 5176 }; 5177 return numberOfHeaders;;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:208760,error,errors,208760,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['errors']
Availability,"ption ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:59163,error,error,59163,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['error'],['error']
Availability,"ption = """"); Remove all (key,value) pairs from the map AND delete the keys; when they are allocated on the heap. void DeleteValues(); Remove all (key,value) pairs from the map AND delete the values; when they are allocated on the heap. void DeleteAll(); Remove all (key,value) pairs from the map AND delete the keys AND; values when they are allocated on the heap. Bool_t DeleteEntry(TObject* key); Remove (key,value) pair with key from the map. Returns true; if the key was found and removed, false otherwise.; The key and value objects are deleted if map is the owner; of keys and values respectively. TObject * FindObject(const char* keyname) const; Check if a (key,value) pair exists with keyname as name of the key.; Returns a TPair* (need to downcast from TObject). Use Key() and; Value() to get the pointers to the key and value, respectively.; Returns 0 if not found. TObject * FindObject(const TObject* key) const; Check if a (key,value) pair exists with key as key.; Returns a TPair* (need to downcast from TObject). Use Key() and; Value() to get the pointers to the key and value, respectively.; Returns 0 if not found. TObject * GetValue(const char* keyname) const; Returns a pointer to the value associated with keyname as name of the key. TObject * GetValue(const TObject* key) const; Returns a pointer to the value associated with key. TIterator * MakeIterator(Bool_t dir = kIterForward) const; Create an iterator for TMap. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print the collection entry. void Rehash(Int_t newCapacity, Bool_t checkObjValidity = kTRUE); Rehash the underlaying THashTable (see THashTable::Rehash()). TObject * Remove(TObject* key); Remove the (key,value) pair with key from the map. Returns the; key object or 0 in case key was not found. If map is the owner; of values, the value is deleted. TPair * RemoveEntry(TObject* key); Remove (key,value) pair with key from the map. Returns the; pair object or 0 in case the key was ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMap.html:10715,down,downcast,10715,root/html528/TMap.html,https://root.cern,https://root.cern/root/html528/TMap.html,6,['down'],['downcast']
Availability,"ption = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& text) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TText*DrawText(Double_t x, Double_t y, const char* text); virtual TText*DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidGetControlBox(Int_t x, Int_t y, Double_t theta, Int_t* cBoxX, Int_t* cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetTextAdvance(UInt_t& a, const char* text, const Bool_t kern = kTRUE) const; virtual Short_tTAttText::GetTextAlign() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TText.html:2076,error,error,2076,root/html534/TText.html,https://root.cern,https://root.cern/root/html534/TText.html,1,['error'],['error']
Availability,"ption = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject& text) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TText*DrawText(Double_t x, Double_t y, const char* text); virtual TText*DrawText(Double_t x, Double_t y, const wchar_t* text); virtual TText*DrawTextNDC(Double_t x, Double_t y, const char* text); virtual TText*DrawTextNDC(Double_t x, Double_t y, const wchar_t* text); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tGetBBox(); virtual TPointGetBBoxCenter(); virtual voidGetBoundingBox(UInt_t& w, UInt_t& h, Bool_t angle = kFALSE); virtual voidGetControlBox(Int_t x, Int_t y, Double_t theta, Int_t[4] cBoxX, Int_t[4] cBoxY); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetTextAdvance(UInt_t& a, const char* text, const Bool_t kern = kTRUE) const; virtual Short_tTAttText::GetTextAlign() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TText.html:1964,error,error,1964,root/html602/TText.html,https://root.cern,https://root.cern/root/html602/TText.html,2,['error'],['error']
Availability,"ption = """"); virtual voidTMacro::Browse(TBrowser* b); virtual TMD5*TMacro::Checksum(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Long_tExec(const char* params = ""0"", Int_t* error = 0); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual TObjString*TMacro::GetLineWith(const char* text) const; TList*TMacro::GetListOfLines() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveMacro.html:1667,error,error,1667,root/html528/TEveMacro.html,https://root.cern,https://root.cern/root/html528/TEveMacro.html,6,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); voidclearErrorCount(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voiddeleteStream(Int_t id); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_terrorCount() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooMsgService::StreamConfig&getStream(Int_t id); Bool_tgetStreamStatus(Int_t id) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; RooFit::MsgLevelglobalKillBelow() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:2890,error,error,2890,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,1,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(const char* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpToFile(const char* RootFileName, const char* options); voidDumpToImage(const char* filename); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; doubleGetBCenter(double n_sigmas = 1, bool display = false); TH1F*GetBhisto(); double*GetBIntExtremes(double frac); doubleGetBmean(); doubleGetBrms(); TVirtualPad*GetCanvas(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); doubleGetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); double*GetHistoPvals(TH1* histo, double percentage); virtual const char*TObject::GetIconName() const; doubleGetMedian(TH1* histo); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; doubleGetSBCe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridPlot.html:1769,error,error,1769,root/html526/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridPlot.html,7,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFirstMother() const; virtual Int_tGetGeneration() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const TAttParticle*GetParticle() const; virtual Int_tGetSecondMother() const; virtual Double_tGetTime() const; virtual Double_tGetTimeEnd() const; virtual const char*GetTitle() const; virtual Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPrimary.html:1842,error,error,1842,root/html528/TPrimary.html,https://root.cern,https://root.cern/root/html528/TPrimary.html,6,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidGetDirection(Float_t& theta, Float_t& phi) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidGetPosition(Float_t& x, Float_t& y, Float_t& z) const; TObject*GetRefObject() const; virtual voidG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMarker3DBox.html:2077,error,error,2077,root/html528/TMarker3DBox.html,https://root.cern,https://root.cern/root/html528/TMarker3DBox.html,6,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); Bool_tFindLimits(const RooRealVar& param, double& lower, double& upper); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const RooArgSet*GetBestFitParameters() const; Int_tGetContourPoints(const RooRealVar& paramX, const RooRealVar& paramY, Double_t* x, Double_t* y, Int_t npoints = 30); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; RooAbsReal*GetLikelihoodRatio(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__LikelihoodInterval.html:2634,error,error,2634,root/html526/RooStats__LikelihoodInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__LikelihoodInterval.html,5,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; RooAbsData*GetParameterPoints() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__PointSetInterval.html:1921,error,error,1921,root/html526/RooStats__PointSetInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__PointSetInterval.html,5,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*GetParameters() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ConfInterval.html:2187,error,error,2187,root/html526/RooStats__ConfInterval.html,https://root.cern,https://root.cern/root/html526/RooStats__ConfInterval.html,10,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); voidBuildIdArray(); Bool_tCdDown(Int_t index); voidCdNode(Int_t nodeid); voidCdTop(); voidCdUp(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFillIdBranch(const Int_t* br, Int_t startlevel = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; void*GetBranch() const; voidGetBranchNames(Int_t* names) const; voidGetBranchNumbers(Int_t* copyNumbers, Int_t* volumeNumbers) const; voidGetBranchOnlys(Int_t* isonly) const; TGeoHMatrix*GetCurrentMatrix() const; Int_tGetCurrentNodeId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const Int_t*GetIdBranch() const; Int_tGetLevel() const; void*GetMatrices() const; TGeoNode*GetMother(Int_t up = 1) const; TGeoHMatrix*GetMotherMatrix(Int_t up = 1) const; virtual const char*TObject::GetName() const; TGeoNode*GetNode() const; Int_tGetNodeId() const; virtual char*TObject::G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoNodeCache.html:1583,error,error,1583,root/html528/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html528/TGeoNodeCache.html,3,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); voidCalculateActivationValue(); voidCalculateDelta(); voidCalculateValue(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeletePreLinks(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidForceValue(Double_t value); Double_tGetActivationValue() const; Double_tGetDEDw() const; Double_tGetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tGetValue() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TNeuron.html:1610,error,error,1610,root/html528/TMVA__TNeuron.html,https://root.cern,https://root.cern/root/html528/TMVA__TNeuron.html,6,['error'],['error']
Availability,"ption = """"); virtual voidTObject::Browse(TBrowser* b); voidCheckForUnusedOptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableConfigurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetConfigDescription() const; const char*GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const TString&GetOptions() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Configurable.html:1558,error,error,1558,root/html528/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html528/TMVA__Configurable.html,4,['error'],['error']
Availability,"ption = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. PyObject*CallSelf(const char* method, PyObject* pyobject = 0); voidSetupPySelf(). Data Members; public:. enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. TTree*fChain; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPySelector.html:7938,avail,available,7938,root/html534/TPySelector.html,https://root.cern,https://root.cern/root/html534/TPySelector.html,1,['avail'],['available']
Availability,"ption and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. void SetReplyHostName(const char* host_name); Set reply host name. const char * GetDcapVersion(); Return dCache version string. Int_t SysOpen(const char* pathname, Int_t flags, UInt_t mode); Interface to system open. All arguments like in POSIX open. Int_t SysClose(Int_t fd); Interface to system close. All arguments like in POSIX close. Int_t SysRead(Int_t fd, void* buf, Int_t len); Interface to system read. All arguments like in POSIX read. Int_t SysWrite(Int_t fd, const void* buf, Int_t len); Interface to system write. All arguments like in POSIX write. Long64_t S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:23905,failure,failure,23905,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['failure'],['failure']
Availability,"ption contains ""y"" the y values and (multiple) errors are scaled; 1764/// If option contains ""xy"" both x and y values and (multiple) errors are scaled; 1765 ; 1766void TGraphMultiErrors::Scale(Double_t c1, Option_t *option); 1767{; 1768 TGraph::Scale(c1, option);; 1769 TString opt = option; opt.ToLower();; 1770 if (opt.Contains(""x"") && GetEXlow()) {; 1771 for (Int_t i=0; i<GetN(); i++); 1772 GetEXlow()[i] *= c1;; 1773 }; 1774 if (opt.Contains(""x"") && GetEXhigh()) {; 1775 for (Int_t i=0; i<GetN(); i++); 1776 GetEXhigh()[i] *= c1;; 1777 }; 1778 if (opt.Contains(""y"")) {; 1779 for (size_t d=0; d<fEyL.size(); d++); 1780 for (Int_t i=0; i<fEyL[d].GetSize(); i++); 1781 fEyL[d][i] *= c1;; 1782 for (size_t d=0; d<fEyH.size(); d++); 1783 for (Int_t i=0; i<fEyH[d].GetSize(); i++); 1784 fEyH[d][i] *= c1;; 1785 }; 1786}; 1787 ; 1788////////////////////////////////////////////////////////////////////////////////; 1789/// Set ex and ey values for point pointed by the mouse.; 1790///; 1791/// Up to 3 y error dimensions possible.; 1792 ; 1793void TGraphMultiErrors::SetPointError(Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2,; 1794 Double_t eyH2, Double_t eyL3, Double_t eyH3); 1795{; 1796 if (!gPad) {; 1797 Error(""SetPointError"", ""Cannot be used without gPad, requires last mouse position"");; 1798 return;; 1799 }; 1800 ; 1801 Int_t px = gPad->GetEventX();; 1802 Int_t py = gPad->GetEventY();; 1803 ; 1804 // localize point to be deleted; 1805 Int_t ipoint = -2;; 1806 // start with a small window (in case the mouse is very close to one point); 1807 for (Int_t i = 0; i < fNpoints; i++) {; 1808 Int_t dpx = px - gPad->XtoAbsPixel(gPad->XtoPad(fX[i]));; 1809 Int_t dpy = py - gPad->YtoAbsPixel(gPad->YtoPad(fY[i]));; 1810 ; 1811 if (dpx * dpx + dpy * dpy < 25) {; 1812 ipoint = i;; 1813 break;; 1814 }; 1815 }; 1816 ; 1817 if (ipoint == -2); 1818 return;; 1819 ; 1820 SetPointEX(ipoint, exL, exH);; 1821 ; 1822 if (fNYErrors > 0); 1823 SetPointEY(ipoint, 0, eyL1, eyH1);; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:61111,error,error,61111,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"ption for details on the differences. The option=prof is automatically selected in case of y:x>>pf where pf is an existing TProfile histogram. Making a 2D Profile histogram; In case of a 3-Dim expression, one can generate a TProfile2D histogram instead of a TH3F histogram by specifying option=prof or option=profs. or option=profi or option=profg ; the trailing letter select the way the bin error are computed, See TProfile2D::SetErrorOption for details on the differences. The option=prof is automatically selected in case of z:y:x>>pf where pf is an existing TProfile2D histogram. Making a 5D plot using GL; If option GL5D is specified together with 5 variables, a 5D plot is drawn using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example. Making a parallel coordinates plot; In case of a 2-Dim or more expression with the option=para, one can generate a parallel coordinates plot. With that option, the number of dimensions is arbitrary. Giving more than 4 variables without the option=para or option=candle or option=goff will produce an error. Making a candle sticks chart; In case of a 2-Dim or more expression with the option=candle, one can generate a candle sticks chart. With that option, the number of dimensions is arbitrary. Giving more than 4 variables without the option=para or option=candle or option=goff will produce an error. Normalizing the output histogram to 1; When option contains ""norm"" the output histogram is normalized to 1. Saving the result of Draw to a TEventList, a TEntryList or a TEntryListArray; TTree::Draw can be used to fill a TEventList object (list of entry numbers) instead of histogramming one variable. If varexp0 has the form >>elist , a TEventList object named ""elist"" is created in the current directory. elist will contain the list of entry numbers satisfying the current selection. If option ""entrylist"" is used, a TEntryList object is created If the selection contains arrays, vectors or any container class and option ""entrylistarray"" is used,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:129536,error,error,129536,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['error'],['error']
Availability,"ption given to TTree::Process; TSelectorList*TSelector::fOutputlist of objects created during processing; Long64_tTSelector::fStatusselector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(). PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t GetEntry(Long64_t entry, Int_t getall = 0); Boilerplate get entry; same as for generated code; not forwarded. void Init(TTree* tree); Initialize with the current tree to be used; not forwarded (may be called; multiple times, and is called from Begin() and SlaveBegin() ). Bool_t Notify(); Forward call to derived Notify() if available. void Begin(TTree* tree = 0); First function called, and used to setup the python self; forward call. void SlaveBegin(TTree* tree); First function called on worker node, needs to make sure python self is setup,; then store the tree to be used, initialize client, and forward call. Bool_t Process(Long64_t entry); Actual processing; call is forwarded to python self. void SlaveTerminate(); End of client; call is forwarded to python self. void Terminate(); End of job; call is forwarded to python self. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); If no 'why' given, read from python error. » Last changed: Fri Nov 26 14:27:24 2010 » Last generated: 2010-11-26 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPySelector.html:9073,avail,available,9073,root/html528/TPySelector.html,https://root.cern,https://root.cern/root/html528/TPySelector.html,2,"['avail', 'error']","['available', 'error']"
Availability,"ption; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&, bool copy = false); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~VirtualIntegratorOneDim(); destructor: no operation. {}. double Integral(double a, doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html:1175,avail,available,1175,root/html526/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__VirtualIntegratorOneDim.html,1,['avail'],['available']
Availability,"ption; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » ROOT::Math::VirtualIntegratorOneDim. class ROOT::Math::VirtualIntegratorOneDim: public ROOT::Math::VirtualIntegrator. Abstract class for all numerical integration methods (1D and multi-dim); Interface defining the common methods for the; numerical integrator classes of one and multi dimensions; The derived class VirtualIntegratorOneDim defines the methods; for one-dimensional integration.; The derived class VirtualIntegratorMultiDim defines the method for; multi-dimensional integration.; The concrete classes for one dimension (e.g. GSLIntegrator) or; multi-dimension (e.g. GSLMCIntegrator) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorOneDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(); virtual doubleIntegral(const vector<double>& pts); virtual doubleIntegral(double a, double b); virtual doubleIntegralCauchy(double a, double b, double c); virtual doubleIntegralLow(double b); virtual doubleIntegralUp(double a); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorOneDim&operator=(const ROOT::Math::VirtualIntegratorOneDim&); virtual ROOT::Math::IntegratorOneDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorOneDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorOneDim.html:1175,avail,available,1175,root/html528/ROOT__Math__VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorOneDim.html,6,['avail'],['available']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFolder.html:10368,error,error,10368,doc/master/classTFolder.html,https://root.cern,https://root.cern/doc/master/classTFolder.html,2,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLinkedList.html:5882,error,error,5882,doc/master/classRooLinkedList.html,https://root.cern,https://root.cern/doc/master/classRooLinkedList.html,1,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:17186,error,error,17186,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,4,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html:8320,error,error,8320,doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1Internal_1_1RKeyBlob.html,18,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:54360,error,error,54360,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,588,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWindow.html:7376,error,error,7376,doc/master/classTGWindow.html,https://root.cern,https://root.cern/doc/master/classTGWindow.html,1,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassDocInfo.html:4096,error,error,4096,doc/master/classTClassDocInfo.html,https://root.cern,https://root.cern/doc/master/classTClassDocInfo.html,13,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLAttr.html:3206,error,error,3206,doc/master/classTXMLAttr.html,https://root.cern,https://root.cern/doc/master/classTXMLAttr.html,45,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPServerSocket.html:9320,error,error,9320,doc/master/classTPServerSocket.html,https://root.cern,https://root.cern/doc/master/classTPServerSocket.html,6,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMapFile.html:7874,error,error,7874,doc/master/classTMapFile.html,https://root.cern,https://root.cern/doc/master/classTMapFile.html,1,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClassMenuItem.html:5312,error,error,5312,doc/master/classTClassMenuItem.html,https://root.cern,https://root.cern/doc/master/classTClassMenuItem.html,1,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImagePlugin.html:3598,error,error,3598,doc/master/classTASImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTASImagePlugin.html,7,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLDocument.html:3550,error,error,3550,doc/master/classTXMLDocument.html,https://root.cern,https://root.cern/doc/master/classTXMLDocument.html,490,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDNDManager.html:4111,error,error,4111,doc/master/classTGDNDManager.html,https://root.cern,https://root.cern/doc/master/classTGDNDManager.html,6,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of thi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classh1analysis.html:4754,error,error,4754,doc/master/classh1analysis.html,https://root.cern,https://root.cern/doc/master/classh1analysis.html,27,['error'],['error']
Availability,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html:11068,error,error,11068,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooBrowser.html,2,['error'],['error']
Availability,"ption="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::SetCacheFileDirstatic Bool_t SetCacheFileDir(std::string_view cacheDir, Bool_t operateDisconnected=kTRUE, Bool_t forceCacheread=kFALSE)Sets the directory where to locally stage/cache remote files.Definition TFile.cxx:4626; TGraphAsymmErrorsTGraph with asymmetric error bars.Definition TGraphAsymmErrors.h:26; TGraphAsymmErrors::SetPointEYlowvirtual void SetPointEYlow(Int_t i, Double_t eyl)Set EYlow for point i.Definition TGraphAsymmErrors.cxx:1376; TGraphAsymmErrors::SetPointErrorvirtual void SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh)Set ex and ey values for point pointed by the mouse.Definition TGraphAsymmErrors.cxx:1299; TGraphAsymmErrors::SetPointEYhighvirtual void SetPointEYhigh(Int_t i, Double_t eyh)Set EYhigh for point i.Definition TGraphAsymmErrors.cxx:1390; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraph::SetPointvirtual void SetPoint(Int_t i, Double_t x, Double_t y)Set x and y values for point number i.Definition TGraph.cxx:2342; TGraph::GetNInt_t GetN() constDefinition TGraph.h:132; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetPointvirtual Int_t GetPoint(Int_t i, Double_t &x, Double_t &y) constGet x and y values for point number i.Definition TGraph.cxx:1533; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObject::Drawvirtual void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/AtlasExample_8C.html:8579,error,error,8579,doc/master/AtlasExample_8C.html,https://root.cern,https://root.cern/doc/master/AtlasExample_8C.html,1,['error'],['error']
Availability,"ption=prof is automatically selected in case of z:y:x>>pf; 4322/// where pf is an existing TProfile2D histogram.; 4323///; 4324/// ### Making a 5D plot using GL; 4325///; 4326/// If option GL5D is specified together with 5 variables, a 5D plot is drawn; 4327/// using OpenGL. See $ROOTSYS/tutorials/tree/staff.C as example.; 4328///; 4329/// ### Making a parallel coordinates plot; 4330///; 4331/// In case of a 2-Dim or more expression with the option=para, one can generate; 4332/// a parallel coordinates plot. With that option, the number of dimensions is; 4333/// arbitrary. Giving more than 4 variables without the option=para or; 4334/// option=candle or option=goff will produce an error.; 4335///; 4336/// ### Making a candle sticks chart; 4337///; 4338/// In case of a 2-Dim or more expression with the option=candle, one can generate; 4339/// a candle sticks chart. With that option, the number of dimensions is; 4340/// arbitrary. Giving more than 4 variables without the option=para or; 4341/// option=candle or option=goff will produce an error.; 4342///; 4343/// ### Normalizing the output histogram to 1; 4344///; 4345/// When option contains ""norm"" the output histogram is normalized to 1.; 4346///; 4347/// ### Saving the result of Draw to a TEventList, a TEntryList or a TEntryListArray; 4348///; 4349/// TTree::Draw can be used to fill a TEventList object (list of entry numbers); 4350/// instead of histogramming one variable.; 4351/// If varexp0 has the form >>elist , a TEventList object named ""elist""; 4352/// is created in the current directory. elist will contain the list; 4353/// of entry numbers satisfying the current selection.; 4354/// If option ""entrylist"" is used, a TEntryList object is created; 4355/// If the selection contains arrays, vectors or any container class and option; 4356/// ""entrylistarray"" is used, a TEntryListArray object is created; 4357/// containing also the subentries satisfying the selection, i.e. the indices of; 4358/// the branches which h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:175183,error,error,175183,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"ption_t *opt);  List the contents of a file sequentially. ;  ; virtual Bool_t Matches (const char *name);  Return kTRUE if 'url' matches the coordinates of this file. ;  ; virtual Bool_t MustFlush () const;  ; void Paint (Option_t *option="""") override;  Paint all objects in the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Int_t len);  Read a buffer from the file. ;  ; virtual Bool_t ReadBuffer (char *buf, Long64_t pos, Int_t len);  Read a buffer from the file at the offset 'pos' in the file. ;  ; virtual Bool_t ReadBufferAsync (Long64_t offs, Int_t len);  ; virtual Bool_t ReadBuffers (char *buf, Long64_t *pos, Int_t *len, Int_t nbuf);  Read the nbuf blocks described in arrays pos and len. ;  ; virtual void ReadFree ();  Read the FREE linked list. ;  ; virtual TProcessID * ReadProcessID (UShort_t pidf);  The TProcessID with number pidf is read from this file. ;  ; virtual void ReadStreamerInfo ();  Read the list of StreamerInfo from this file. ;  ; virtual Int_t Recover ();  Attempt to recover file if not correctly closed. ;  ; virtual Int_t ReOpen (Option_t *mode);  Reopen a file with a different access mode. ;  ; virtual void Seek (Long64_t offset, ERelativeTo pos=kBeg);  Seek to a specific position in the file. Pos it either kBeg, kCur or kEnd. ;  ; virtual void SetCacheRead (TFileCacheRead *cache, TObject *tree=nullptr, ECacheAction action=kDisconnect);  Set a pointer to the read cache. ;  ; virtual void SetCacheWrite (TFileCacheWrite *cache);  Set a pointer to the write cache. ;  ; virtual void SetCompressionAlgorithm (Int_t algorithm=ROOT::RCompressionSetting::EAlgorithm::kUseGlobal);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; virtual void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html:7944,recover,recover,7944,doc/v632/classROOT_1_1TBufferMergerFile.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TBufferMergerFile.html,5,['recover'],['recover']
Availability,"ption_t *option) overrideReset this histogram: contents, errors, etc.Definition TH2Poly.cxx:591; TH2Poly::fStepYDouble_t fStepYDimensions of a partition cell.Definition TH2Poly.h:164; TH2Poly::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TH2Poly.cxx:1333; TH2Poly::FFTTH1 * FFT(TH1 *, Option_t *) overrideNOT IMPLEMENTED for TH2Poly.Definition TH2Poly.cxx:1735; TH2Poly::fCellsTList * fCells[fNCells] The array of TLists that store the bins that intersect with each cell. List do not own the ...Definition TH2Poly.h:163; TH2Poly::fCellYInt_t fCellYNumber of partition cells in the y-direction of the histogram.Definition TH2Poly.h:161; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TH2::Copyvoid Copy(TObject &hnew) const overrideCopy.Definition TH2.cxx:380; TH2::fTsumwxyDouble_t fTsumwxyTotal Sum of weight*X*Y.Definition TH2.h:36; TH2::Resetvoid Reset(Option_t *option="""") overrideReset this histogram: contents, errors, etc.Definition TH2.cxx:2600; TH2::fTsumwy2Double_t fTsumwy2Total Sum of weight*Y*Y.Definition TH2.h:35; TH2::fTsumwyDouble_t fTsumwyTotal Sum of weight*Y.Definition TH2.h:34; TH2::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TH2.cxx:2485; TIterDefinition TCollection.h:235; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::GetListOfGraphsTList * GetListOfGraphs() constDefinition TMultiGraph.h:68; TMultiGraph::Classstatic TClass * Class(); TMultiGraph::IsInsidevirtual Int_t IsInside(Double_t x, Double_t y) constReturn 1 if the point (x,y) is inside one of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:74938,error,errors,74938,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['error'],['errors']
Availability,"ption_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; double; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662. A composite shape example; Composite shapes can be subsequently used for defining volumes. Moreover, these volumes contain other volumes, following the general criteria. Volumes created based on composite shapes cannot be divided. ; Definition at line 27 of file TGeoCompositeShape.h. Public Member Functions;  TGeoCompositeShape ();  Default constructor. ;  ;  TGeoCompositeShape (const char *expression);  Default constructor. ;  ;  TGeoCompositeShape (const char *name, const char *expression);  Default constructor. ;  ;  TGeoCompositeShape (const char *name, TGeoBoolNode *node);  Constructor with a Boolean node. ;  ;  ~TGeoCompositeShape () override;  destructor ;  ; Double_t Capacity () const override;  Computes capacity of this shape [length^3] by sampling with 1% error. ;  ; void ClearThreadData () const override;  Needed just for cleanup. ;  ; void ComputeBBox () override;  compute bounding box of the sphere ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Computes normal vector in POINT to the composite shape. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Tests if point is inside the shape. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; void CreateThreadData (Int_t nthreads) override;  Needed just for cleanup. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:10232,error,error,10232,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['error'],['error']
Availability,"ption_t *option="""")Helper function for the SavePrimitive functions from TH1 or classes derived from TH1,...Definition TH1.cxx:7379; TH1::GetBinErrorSqUncheckedvirtual Double_t GetBinErrorSqUnchecked(Int_t bin) constDefinition TH1.h:449; TH1::fMinimumDouble_t fMinimumMinimum value for plotting.Definition TH1.h:101; TH1::GetEntriesvirtual Double_t GetEntries() constReturn the current number of entries.Definition TH1.cxx:4423; TH1::SetNamevoid SetName(const char *name) overrideChange the name of this histogram.Definition TH1.cxx:8960; TH1::ResetStatsvirtual void ResetStats()Reset the statistics including the number of entries and replace with values calculated from bin cont...Definition TH1.cxx:7902; TH1::SetBinErrorOptionvirtual void SetBinErrorOption(EBinErrorOpt type)Definition TH1.h:381; TH1::kNstat@ kNstatSize of statistics data (up to TProfile3D)Definition TH1.h:184; TH1::fEntriesDouble_t fEntriesNumber of entries.Definition TH1.h:95; TH1::kNormal@ kNormalErrors with Normal (Wald) approximation: errorUp=errorLow= sqrt(N)Definition TH1.h:65; TH1::fXaxisTAxis fXaxisX axis descriptor.Definition TH1.h:90; TH1::fSumw2TArrayD fSumw2Array of sum of squares of weights.Definition TH1.h:104; TH1::GetSumw2Nvirtual Int_t GetSumw2N() constDefinition TH1.h:315; TH1::fYaxisTAxis fYaxisY axis descriptor.Definition TH1.h:91; TH1::GetSumOfWeightsvirtual Double_t GetSumOfWeights() constReturn the sum of weights excluding under/overflows.Definition TH1.cxx:7917; TH1::Sumw2virtual void Sumw2(Bool_t flag=kTRUE)Create structure to store sum of squares of weights.Definition TH1.cxx:9020; TH1::SetEntriesvirtual void SetEntries(Double_t n)Definition TH1.h:391; TH1::fTsumwxDouble_t fTsumwxTotal Sum of weight*X.Definition TH1.h:98; TH2PolyBinHelper class to represent a bin in the TH2Poly histogram.Definition TH2Poly.h:25; TH2PolyBin::GetXMinDouble_t GetXMin()Returns the minimum value for the x coordinates of the bin.Definition TH2Poly.cxx:1565; TH2PolyBin::~TH2PolyBin~TH2PolyBin() overrideD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:63518,error,errorUp,63518,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,2,['error'],"['errorLow', 'errorUp']"
Availability,"ption_t* option = """"); Int_tBeauty(); virtual voidTObject::Browse(TBrowser* b); Int_tCharm(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; Double_tEnergy() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; Double_tEta() const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Double_tGetCalcMass() const; Int_tGetDaughter(Int_t i) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetFirstDaughter() const; Int_tGetFirstMother() const; virtual const char*TObject::GetIconName() const; Int_tGetLastDaughter() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; Double_tGetMass(); Int_tGetMother(Int_t i) const; virtual const char*GetName() const; Int_tGetNDaughters() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TParticle.html:2825,error,error,2825,root/html528/TParticle.html,https://root.cern,https://root.cern/root/html528/TParticle.html,2,['error'],['error']
Availability,"ption_t* option = """"); intArraySize() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tRooStats::SimpleInterval::CheckParameters(const RooArgSet&) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::SimpleInterval::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual RooArgSet*RooStats::SimpleInterval::GetParameters() const; RooStats::HypoTestResult*GetResult(int index) const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; doubleGetXValue(int index) const; doubleGetYError(int index",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:1535,error,error,1535,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,2,['error'],['error']
Availability,"ption_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&TShape::GetBuffer3D(Int_t reqSections) const; virtual Color_tGetColorAttribute() const; virtual TShape*GetConnection() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual TPoints3DABC*GetMarker() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPolyLineShape.html:2174,error,error,2174,root/html528/TPolyLineShape.html,https://root.cern,https://root.cern/root/html528/TPolyLineShape.html,6,['error'],['error']
Availability,"ption_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidConstrain(Int_t parm, Double_t low, Double_t high); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidErrorAnalysis(Double_t UP); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFit(); Double_tGetChisquare() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TVirtualFitter*GetFitter() const; virtual const char*TObject::GetIconName() const; TH1*GetMCPrediction(Int_t parm) const; virtual const char*TObject::GetName() const; Int_tGetNDF() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TH1*GetPlot(); Double_tGetProb() const; voidGetResult(Int_t parm, Double_t& value, Double_t& error) const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFractionFitter.html:6314,error,error,6314,root/html528/TFractionFitter.html,https://root.cern,https://root.cern/root/html528/TFractionFitter.html,1,['error'],['error']
Availability,"ptions for drawing:. “z” or “Z”the horizontal and vertical small lines are not drawn at the end of error bars; “>”an arrow is drawn at the end of the error bars; “|>”a full arrow is drawn at the end of the error bar; its size is \(\frac{2}{3}\) of the marker size; “[]”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors. The constructor has six arrays as parameters: X and Y as TGraph and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",; 200,10,700,500);; c1->SetGrid();. // create the arrays for the points; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5, .61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the arrays with high and low errors; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};. // create TGraphAsymmErrors with the arrays; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; 4.5 Graphs with Asymmetric Bent Errors. A graph with asymmetric bent error bars. A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The various format options to draw a TGraphBentErrors are explained in TGraphBentErrors::Paint method. The TGraphBentErrors is drawn by default with error bars and small horizontal and vertical lines at the end of the error bars. If option “z” or “Z” is specified, these small lines are not drawn. If the option “X” is specified, the errors are not drawn (the TGraph::Paint method equivalent). if optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:148921,error,errors,148921,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"ptions supported for 1D histograms. "" ""; Default. ""AH""; Draw histogram without axis. ""A"" can be combined with any drawing option. For; instance, ""AC"" draws the histogram as a smooth Curve without axis. ""][""; When this option is selected the first and last vertical lines of the histogram; are not drawn. ""B""; Bar chart option. ""BAR""; Like option ""B"", but bars can be drawn with a 3D effect. ""HBAR""; Like option ""BAR"", but bars are drawn horizontally. ""C""; Draw a smooth Curve through the histogram bins. ""E""; Draw error bars. ""E0""; Draw error bars. Markers are drawn for bins with 0 contents. ""E1""; Draw error bars with perpendicular lines at the edges. ""E2""; Draw error bars with rectangles. ""E3""; Draw a fill area through the end points of the vertical error bars. ""E4""; Draw a smoothed filled area through the end points of the error bars. ""E5""; Like E3 but ignore the bins with 0 contents. ""E6""; Like E4 but ignore the bins with 0 contents. ""X0""; When used with one of the ""E"" option, it suppress the error bar along; X as gStyle->SetErrorX(0) would do. ""L""; Draw a line through the bin contents. ""P""; Draw current marker at each bin except empty bins. ""P0""; Draw current marker at each bin including empty bins. ""PIE""; Draw histogram as a Pie Chart. ""*H""; Draw histogram with a * at each bin. ""LF2""; Draw histogram like with option ""L"" but with a fill area. Note that ""L"" draws; also a fill area if the hist fill color is set but the fill area corresponds to; the histogram contour. ""9""; Force histogram to be drawn in high resolution mode. By default, the histogram; is drawn in low resolution in case the number of bins is greater than the number; of pixels in the current pad. This option should be combined with a ""drawing; option"" like ""H"" or ""L"". Options supported for 2D histograms. "" ""; Default (scatter plot). ""ARR""; Arrow mode. Shows gradient between adjacent cells. ""BOX""; A box is drawn for each cell with surface proportional to the content's; absolute value. A negative content is m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:6830,error,error,6830,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,3,['error'],['error']
Availability,"ptions() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; TMVA::ConfigurableTMVA::Configurable::Configurable(const TString& theOption = """"); TMVA::ConfigurableTMVA::Configurable::Configurable(const TMVA::Configurable&); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEstimatorFunction(vector<Double_t>& pars); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::FitterBaseTMVA::FitterBase::FitterBase(const TMVA::FitterBase&); TMVA::FitterBaseTMVA::FitterBase::FitterBase(TMVA::IFitterTarget& target, const TString& name, const vector<TMVA::Interval*> ranges, const TString& theOption); const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TMVA::IFitterTarget&TMVA::FitterBase::GetFitterTarget() const; virtual const char*TObject::GetIconName() const; virtual const char*TMVA::FitterBase::GetName() const; Int_tTMVA::FitterBase::GetNpars() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MinuitFitter.html:1675,error,error,1675,root/html602/TMVA__MinuitFitter.html,https://root.cern,https://root.cern/root/html602/TMVA__MinuitFitter.html,2,['error'],['error']
Availability,"ptions:; 'M' merge: finally merge the created files; 'L' local: copy locally the files before merging (implies 'M'); 'D' dataset: create a TFileCollection; 'R' register: dataset run with dataset registration; 'O' overwrite: force dataset replacement during registration; 'V' verify: verify the registered dataset; Special 'option' values for backward compatibility:; """" equivalent to ""M""; ""LOCAL"" equivalent to ""ML"" or ""L"". void Init(const char* path, const char* dsname); Initializer. Called by all constructors. ~TProofOutputFile(); Main destructor. void SetOutputFileName(const char* name); Set the name of the output file; in the form of an Url. TFile* OpenFile(const char* opt); Open the file using the unique temporary name. Int_t AdoptFile(TFile* f); Adopt a file already open.; Return 0 if OK, -1 in case of failure. Long64_t Merge(TCollection* list); Merge objects from the list into this object. void Print(Option_t* option = """") const; Dump the class content. void NotifyError(const char* errmsg); Notify error message. void AddFile(TFileMerger* merger, const char* path); Add file to merger, checking the result. void Unlink(const char* path); Unlink path. TFileCollection * GetFileCollection(); Get instance of the file collection to be used in 'dataset' mode. TFileMerger * GetFileMerger(Bool_t local = kFALSE); Get instance of the file merger to be used in 'merge' mode. Int_t AssertDir(const char* dirpath); Assert directory path 'dirpath', with the ownership of the last already; existing subpath.; Return 0 on success, -1 on error. TProofOutputFile(const TProofOutputFile& ). TProofOutputFile& operator=(const TProofOutputFile& ). void SetFileName(const char* name); { fFileName = name; }. void SetDir(const char* dir, Bool_t raw = kFALSE). void SetMerged(Bool_t merged = kTRUE); { fMerged = merged; }. void SetWorkerOrdinal(const char* ordinal); { fWorkerOrdinal = ordinal; }. TProofOutputFile(); { }. const char * GetDir(Bool_t raw = kFALSE) const; { return (raw) ? fRawDir : fDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofOutputFile.html:8964,error,error,8964,root/html530/TProofOutputFile.html,https://root.cern,https://root.cern/root/html530/TProofOutputFile.html,2,['error'],['error']
Availability,"ptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoPcon; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoBBox; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox *box2, const TGeoMatrix *mat2) R__DEPRECATED(6;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Contains (const Double_t *point, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin);  ; static const char * DeclFileName ();  ; static Double_t DistFromInside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ; static Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Double_t dx, Double_t dy, Double_t dz, const Double_t *origin, Double_t stepmax=TGeoShape::Big());  ;  Static Public Member Functions inherited from TGeoShape; static Double_t Big ();  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Double_t ComputeEpsMch ();  Compute machine round-off double precision error as the smallest number that if added to 1.0 is different than 1.0. ;  ; static const char * DeclFileName ();  ; static Double_t DistToPhiMin (const Double_t *point, const Double_t *dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:17074,error,error,17074,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,1,['error'],['error']
Availability,"ptr, const Float_t *eyld=nullptr, const Float_t *eyhd=nullptr);  TGraphBentErrors normal constructor. ;  ;  ~TGraphBentErrors () override;  TGraphBentErrors default destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Double_t eyhd=0);  Add a point with bent errors to the graph. ;  ; void Apply (TF1 *f) override;  Apply a function to all data points \( y = f(x,y) \). ;  ; void ComputeRange (Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const override;  Compute range. ;  ; Double_t GetErrorX (Int_t bin) const override;  It returns the error along X at point i. ;  ; Double_t GetErrorXhigh (Int_t bin) const override;  Get high error on X[i]. ;  ; Double_t GetErrorXlow (Int_t bin) const override;  Get low error on X[i]. ;  ; Double_t GetErrorY (Int_t bin) const override;  It returns the error along Y at point i. ;  ; Double_t GetErrorYhigh (Int_t bin) const override;  Get high error on Y[i]. ;  ; Double_t GetErrorYlow (Int_t bin) const override;  Get low error on Y[i]. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXhighd () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEXlowd () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYhighd () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEYlowd () const override;  ; TClass * IsA () const override;  ; void Print (Option_t *chopt="""") const override;  Print graph and errors values. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; void Scale (Double_t c1=1., Option_t *option=""y"") override;  Multiply the values and errors of a TGraphBentErrors by a constant c1. ;  ; virtual void SetPointError (Double_t exl, Double_t exh, Double_t eyl, Double_t eyh, Double_t exld=0, Double_t exhd=0, Double_t eyld=0, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:4272,error,error,4272,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['error']
Availability,"ptsROOT::Math::MinimizerOptions fMinimizerOptsminimizer control parameters including name and algo typeDefinition FitConfig.h:268; ROOT::Fit::FitConfig::~FitConfig~FitConfig()Destructor.Definition FitConfig.cxx:52; ROOT::Fit::FitConfig::CreateMinimizerROOT::Math::Minimizer * CreateMinimizer()create a new minimizer according to chosen configurationDefinition FitConfig.cxx:173; ROOT::Fit::FitConfig::fMinosErrorsbool fMinosErrorsdo full error analysis using MinosDefinition FitConfig.h:261; ROOT::Fit::FitConfig::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)static function to control default minimizer type and algorithmDefinition FitConfig.cxx:252; ROOT::Fit::FitConfig::SetFromFitResultvoid SetFromFitResult(const FitResult &rhs)Definition FitConfig.cxx:80; ROOT::Fit::FitConfig::MinimizerTypeconst std::string & MinimizerType() constreturn type of minimizer packageDefinition FitConfig.h:187; ROOT::Fit::FitConfig::fWeightCorrbool fWeightCorrapply correction to errors for weights fitsDefinition FitConfig.h:263; ROOT::Fit::FitConfig::fUpdateAfterFitbool fUpdateAfterFitupdate the configuration after a fit using the resultDefinition FitConfig.h:262; ROOT::Fit::FitConfig::operator=FitConfig & operator=(const FitConfig &rhs)Definition FitConfig.cxx:62; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::ParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/re...Definition ParameterSettings.h:33; ROOT::Math::Factory::CreateMinimizerstatic ROOT::Math::Minimizer * CreateMinimizer(const std::string &minimizerType="""", const std::string &algoType="""")static method to create the corresponding Minimizer given the string Supported Minimizers types are: ...Definition Factory.cxx:63; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; ROOT::Math::Minim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/FitConfig_8cxx_source.html:13990,error,errors,13990,doc/master/FitConfig_8cxx_source.html,https://root.cern,https://root.cern/doc/master/FitConfig_8cxx_source.html,1,['error'],['errors']
Availability,"public:. TTree*fChain; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. PyObject*fPySelf! actual python object. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupPySelf(); Install the python side identity of the TPySelector. PyObject* CallSelf(const char* method, PyObject* pyobject = 0); Forward <method> to python. TPySelector(TTree* = 0, PyObject* self = 0); Construct a TSelector derived with <self> as the underlying, which is; generally 0 to start out with in the current PROOF framework. ~TPySelector(); Destructor. Only deref if still holding on to Py_None (circular otherwise). Int_t Version() const; Return version number of this selector. First forward; if not overridden, then; yield an obvious ""undefined"" number,. Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPySelector.html:8229,avail,available,8229,root/html602/TPySelector.html,https://root.cern,https://root.cern/root/html602/TPySelector.html,2,['avail'],['available']
Availability,"purity limit for sig/bkg nodes; Bool_tfPairNegWeightsGlobalpair ev. with neg. and pos. weights in traning sample and ""annihilate"" them; TMVA::DecisionTree::EPruneMethodfPruneMethodmethod used for prunig; TStringfPruneMethodSprune method option String; Double_tfPruneStrengtha parameter to set the ""amount"" of pruning..needs to be adjusted; Bool_tfRandomisedTreeschoose a random subset of possible cut variables at each node during training; map<const TMVA::Event*,vector<double> >fResidualsindividual event residuals for gradient boost; TMVA::SeparationBase*fSepTypethe separation used in node splitting; TStringfSepTypeSthe separation (option string) used in node splitting; Double_tfShrinkagelearning rate for gradient boost;; Double_tfSigToBkgFractionSignal to Background fraction assumed during training; vector<const TMVA::Event*>fSubSamplesubsample for bagged grad boost; Double_tfSumOfWeightssum of all event weights; vector<const TMVA::Event*>*fTrainSamplepointer to sample actually used in training (fEventSample or fSubSample) for example; Bool_tfTrainWithNegWeightsyes there are negative event weights and we don't ignore them; Double_tfTransitionPointbreak-down point for gradient regression; Bool_tfUseExclusiveVarsindividual variables already used in fisher criterium are not anymore analysed individually for node splitting; Bool_tfUseFisherCutsuse multivariate splits using the Fisher criterium; UInt_tfUseNTrainEventsnumber of randomly picked training events used in randomised (and bagged) trees; UInt_tfUseNvarsthe number of variables used in the randomised tree splitting; Bool_tfUsePoissonNvarsuse ""fUseNvars"" not as fixed number but as mean of a possion distr. in each split; Bool_tfUseYesNoLeafuse sig or bkg classification in leave nodes or sig/bkg; vector<const TMVA::Event*>fValidationSamplethe Validation events; vector<Double_t>fVariableImportancethe relative importance of the different variables; map<const TMVA::Event*,pair<Double_t,Double_t> >fWeightedResidualsweighte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBDT.html:26284,down,down,26284,root/html602/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBDT.html,2,['down'],['down']
Availability,"purity to classify a node as a signal node (used in pruning and boosting to determine; misclassification error rate); PruneMethod The Pruning method:; known: NoPruning // switch off pruning completely; ExpectedError; CostComplexity; PruneStrength a parameter to adjust the amount of pruning. Should be large enough such that overtraining is avoided.; PruningValFraction number of events to use for optimizing pruning (only if PruneStrength < 0, i.e. automatic pruning); NegWeightTreatment IgnoreNegWeightsInTraining Ignore negative weight events in the training.; DecreaseBoostWeight Boost ev. with neg. weight with 1/boostweight instead of boostweight; PairNegWeightsGlobal Pair ev. with neg. and pos. weights in traning sample and ""annihilate"" them; MaxDepth maximum depth of the decision tree allowed before further splitting is stopped. void DeclareCompatibilityOptions(); options that are used ONLY for the READER to ensure backward compatibility. void ProcessOptions(); the option string is decoded, for available options see ""DeclareOptions"". void SetMinNodeSize(Double_t sizeInPercent). void SetMinNodeSize(TString sizeInPercent). void Init( void ); common initialisation with defaults for the BDT-Method. void Reset( void ); reset the method, as if it had just been instantiated (forget all training etc.). ~MethodBDT( void ); destructor; Note: fEventSample and ValidationSample are already deleted at the end of TRAIN; When they are not used anymore; for (UInt_t i=0; i<fEventSample.size(); i++) delete fEventSample[i];; for (UInt_t i=0; i<fValidationSample.size(); i++) delete fValidationSample[i];. void InitEventSample( void ); initialize the event sample (i.e. reset the boost-weights... etc). void PreProcessNegativeEventWeights(); o.k. you know there are events with negative event weights. This routine will remove; them by pairing them with the closest event(s) of the same event class with positive; weights; A first attempt is ""brute force"", I dont' try to be clever using search t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:28898,avail,available,28898,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,3,['avail'],['available']
Availability,"put = ( 1 , 100 , 4 ) Activation Function = Identity; : Using 3200 events for training and 800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.691476; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.605916 0.542204 0.0761789 0.00657979 45977.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.512732 0.499825 0.0771995 0.00657724 45311.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.477495 0.458718 0.0776312 0.00665553 45085.9 0; : 4 Minimum Test error found - save the configuration ; : 4 | 0.438338 0.418147 0.0780597 0.00669006 44837 0; : 5 Minimum Test error found - save the configuration ; : 5 | 0.407569 0.391703 0.0786075 0.00678976 44557.2 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:15260,error,error,15260,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['error'],['error']
Availability,"put = 2 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 50 , Width = 50 ) Output = ( 1 , 50 , 50 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 50 , Width = 1 ) Output = ( 1 , 50 , 1 ) Activation Function = Identity; : Using 800 events for training and 200 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 33494.1; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 34747.6 33079.7 0.0192196 0.00176099 45822.6 0; : 2 Minimum Test error found - save the configuration ; : 2 | 34222.2 32417.1 0.0195047 0.0017702 45109.9 0; : 3 Minimum Test error found - save the configuration ; : 3 | 33496 31618.4 0.0197158 0.00178336 44611.8 0; : 4 Minimum Test error found - save the configuration ; : 4 | 32719.2 30843.2 0.0198205 0.00178286 44351.8 0; : 5 Minimum Test error found - save the configuration ; : 5 | 31879.6 30001 0.0200761 0.00184919 43891 0; : 6 Minimum Test error found - save the configuration ; : 6 | 30965 29177.4 0.0203037 0.00185469 43362.8 0; : 7 Minimum Test error found - save the configuration ; : 7 | 30273.8 28682.9 0.0206315 0.00190133 42711.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configura",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:11324,error,error,11324,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"put content of collection as LaTex table. ; By default a table with two columns is created: the left column contains the name of each variable, the right column the value.; The following optional named arguments can be used to modify the default behavior . Argument Effect . Columns(Int_t ncol) Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns . Sibling(const RooAbsCollection& other) Define sibling list. The sibling list is assumed to have objects with the same name in the same order. If this is not the case warnings will be printed. If a single sibling list is specified, 3 columns will be output: the (common) name, the value of this list and the value in the sibling list. Multiple sibling lists can be specified by repeating the Sibling() command. . Format(const char* str) Classic format string, provided for backward compatibility . Format() Formatting arguments. . const char* what Controls what is shown. ""N"" adds name, ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value . FixedPrecision(int n) Controls precision, set fixed number of digits . AutoPrecision(int n) Controls precision. Number of shown digits is calculated from error and n specified additional digits (1 is sensible default) . VerbatimName(bool flag) Put variable name in a \verb+ + clause. . OutputFile(const char* fname) Send output to file with given name rather than standard output. Example use: list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; Formatstatic char * Format(const char *format, va_list ap)Format a string in a circular formatting buffer (using a printf style format descriptor).Definition TString.cxx:2442. PyROOT; The RooAbsCollection::printLatex() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1310 of file RooAbsCollection.cxx. ◆ printLatex() [2/2]. void RooAbsCollection::printLatex ; (; std::ostream & ; o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:49570,error,error,49570,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,2,['error'],['error']
Availability,"put content of collection as LaTex table. ; By default a table with two columns is created: the left column contains the name of each variable, the right column the value.; The following optional named arguments can be used to modify the default behavior . Argument Effect . Columns(Int_t ncol) Fold table into multiple columns, i.e. ncol=3 will result in 3 x 2 = 6 total columns . Sibling(const RooAbsCollection& other) Define sibling list. The sibling list is assumed to have objects with the same name in the same order. If this is not the case warnings will be printed. If a single sibling list is specified, 3 columns will be output: the (common) name, the value of this list and the value in the sibling list. Multiple sibling lists can be specified by repeating the Sibling() command. . Format(const char* str) Classic format string, provided for backward compatibility . Format() Formatting arguments. . const char* what Controls what is shown. ""N"" adds name, ""E"" adds error, ""A"" shows asymmetric error, ""U"" shows unit, ""H"" hides the value . FixedPrecision(int n) Controls precision, set fixed number of digits . AutoPrecision(int n) Controls precision. Number of shown digits is calculated from error and n specified additional digits (1 is sensible default) . VerbatimName(bool flag) Put variable name in a \verb+ + clause. . OutputFile(const char* fname) Send output to file with given name rather than standard output. Example use: list.printLatex(Columns(2), Format(""NEU"",AutoPrecision(1),VerbatimName()) );; Formatstatic char * Format(const char *format, va_list ap)Format a string in a circular formatting buffer (using a printf style format descriptor).Definition TString.cxx:2442. PyROOT; The RooAbsCollection::printLatex() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1320 of file RooAbsCollection.cxx. ◆ printLatex() [2/2]. void RooAbsCollection::printLatex ; (; std::ostream & ; o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCollection.html:47787,error,error,47787,doc/master/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/master/classRooAbsCollection.html,2,['error'],['error']
Availability,"put data; x0: bias distribution, from simulation. Preservation of the area. lambda: lagrangian multiplier; y_i: one component of the vector y; (Ax)_i: one component of the vector Ax. Determination of the unfolding result x:. (a) not constrained: minimisation is performed as a function of x; for fixed lambda=0; or; (b) constrained: stationary point is found as a function of x and lambda. The constraint can be useful to reduce biases on the result x; in cases where the vector y follows non-Gaussian probability densities; (example: Poisson statistics at counting experiments in particle physics). Some random examples:. (1) measure a cross-section as a function of, say, E_T(detector); and unfold it to obtain the underlying distribution E_T(generator); (2) measure a lifetime distribution and unfold the contributions from; different flavours; (3) measure the transverse mass and decay angle; and unfold for the true mass distribution plus background. Documentation. Some technical documentation is available here:; http://www.desy.de/~sschmitt. Note:; For most applications it is better to use the derived class; TUnfoldSys or even better TUnfoldDensity. TUnfoldSys extends the functionality of TUnfold; such that systematic errors are propagated to teh result; and that the unfolding can be done with proper background; subtraction. TUnfoldDensity extends further the functionality of TUnfoldSys; complex binning schemes are supported; The binning of input histograms is handeld consistently:; (1) the regularisation may be done by density,; i.e respecting the bin widths; (2) methods are provided which preserve the proper binning; of the result histograms. Implementation. The result of the unfolding is calculated as follows:. Lsquared = L#L regularisation conditions squared. epsilon_j = sum_i A_ij vector of efficiencies. E^-1 = ((A# Vyy^-1 A)+tau^2 Lsquared). x = E (A# Vyy^-1 y + tau^2 Lsquared x0 +lambda/2 * epsilon) is the result. The derivatives; dx_k/dy_i; dx_k/dA_ij; dx_k/d(tau^2);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfold.html:3080,avail,available,3080,root/html534/TUnfold.html,https://root.cern,https://root.cern/root/html534/TUnfold.html,3,['avail'],['available']
Availability,"put parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // y positions of 2D peaks (not fit).; // However they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x; // positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 1D ridges (not fit).; // However they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate y positions of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks; // amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows; // to fix appropriate amplitudes of 2D peaks (not fit).; // However they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:48445,error,errors,48445,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['error'],['errors']
Availability,"put(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; retreive unfolding result folded back by the matrix; name: name of the histogram; title: title of the histogram; y0,y1: lower/upper edge of histogram.; if (y0>=y1) then y0=0 and y1=nbin are used. TH1D * GetInput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; retreive input distribution; name: name of the histogram; title: title of the histogram; y0,y1: lower/upper edge of histogram.; if (y0>=y1) then y0=0 and y1=nbin are used. TH2D * GetRhoIJ(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive full matrix of correlation coefficients; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. TH2D * GetEmatrix(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive full error matrix; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. TH1D * GetRhoI(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive matrix of global correlation coefficients; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. TH2D * GetLsquared(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive ix of regularisation conditions squared; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. void SetConstraint(TUnfold::EConstraint constraint); set type of constraint for the next unfolding. Double_t GetTau(void); return regularisation parameter. Double_t GetChi2L(void); return chi**2 contribution from regularisation conditions. Int_t GetNpar(void); return number of parameters. Double_t Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:30522,error,error,30522,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,3,['error'],['error']
Availability,"put: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. TUnfoldSys(const TH2* hist_A, TUnfold::EHistMap histmap, TUnfold::ERegMode regmode = kRegModeSize, TUnfold::EConstraint constraint = kEConstraintNone); arguments:; hist_A: matrix that describes the migrations; histmap: mapping of the histogram axes to the unfolding output; regmode: global regularisation mode; data members initialized to something different from zero:; fDA2, fDAcol; initialize TUnfold. void AddSysError(const TH2* sysError, const char* name, TUnfold::EHistMap histmap, TUnfoldSys::ESysErrMode mode); add a correlated error source; sysError: alternative matrix or matrix of absolute/relative shifts; name: name of the error source; histmap: mapping of the histogram axes to the unfolding output; mode: format of the error source. void DoBackgroundSubtraction(void); performs background subtraction; fY = fYData - fBgrIn; fVyy = fVyyData + fBgrErrUncorr^2 + fBgrErrCorr * fBgrErrCorr#; fVyyinv = fVyy^(-1). Int_t SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0); Define the input data for subsequent calls to DoUnfold(Double_t); input: input distribution with errors; scaleBias: scale factor applied to the bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Calls the SetInput metghod of the base class, then renames the input; vectors fY and fVyy, then performs the background subtraction; Data members ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:18779,error,error,18779,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,9,['error'],['error']
Availability,putHoriz; kHistMapOutputVert; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*fAoutsideInput: underflow/overflow bins; TMap*fBgrErrCorrInInput: background sources correlated error; TMap*fBgrErrUncorrInInput: uncorrelated error from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLsquaredInput: regularisation conditions squared; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. TUnfoldSys(const TH2* ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfoldSys.html:17291,error,error,17291,root/html528/TUnfoldSys.html,https://root.cern,https://root.cern/root/html528/TUnfoldSys.html,3,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTDirectory.html:12183,error,error,12183,doc/v632/classTDirectory.html,https://root.cern,https://root.cern/doc/v632/classTDirectory.html,7,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXMLFile.html:21618,error,error,21618,doc/master/classTXMLFile.html,https://root.cern,https://root.cern/doc/master/classTXMLFile.html,15,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:11586,error,error,11586,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphTime.html:5658,error,error,5658,doc/master/classTGraphTime.html,https://root.cern,https://root.cern/doc/master/classTGraphTime.html,1,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTChain.html:31935,error,error,31935,doc/v632/classTChain.html,https://root.cern,https://root.cern/doc/v632/classTChain.html,29,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:20226,error,error,20226,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,3,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:3572,error,error,3572,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,2,['error'],['error']
Availability,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html:7794,error,error,7794,doc/v632/classROOT_1_1RGeoPainter.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoPainter.html,15,['error'],['error']
Availability,"pwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; double; int; ROOT::Detail::RDF::RDFLogChannelROOT::Experimental::RLogChannel & RDFLogChannel()Definition RDFUtils.cxx:37; ROOT::Experimental::Internal::GetChannelOrManagerRLogChannel & GetChannelOrManager()Definition RLogger.hxx:302; ROOT::Experimental::ELogLevel::kDebug@ kDebugDebug information; only useful for developers; can have added verbosity up to 255-kDebug.; ROOT::Experimental::ELogLevel::kError@ kErrorAn error.; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::RDF::Experimental::AddProgressBarvoid AddProgressBar(ROOT::RDF::RNode df)Add ProgressBar to a ROOT::RDF::RNode.Definition RDFHelpers.cxx:373; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::RDF::SampleCallback_tstd::function< void(unsigned int, const ROOT::RDF::RSampleInfo &)> SampleCallback_tThe type of a data-block callback, registered with an RDataFrame computation graph via e....Definition RSampleInfo.hxx:134; ROOT::RDF::AsRNodeRNode AsRNode(NodeType node)Cast a RDataFrame node to the common type ROOT::RDF::RNode.Definition RDFHelpers.hxx:158; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8cxx_source.html:22625,error,error,22625,doc/master/RDFHelpers_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8cxx_source.html,1,['error'],['error']
Availability,"px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoShape::DistToPhiMin(Double_t* point, Double_t* dir, Double_t s1, Double_t c1, Double_t s2, Double_t c2, Double_t sm, Double_t cm, Bool_t in = kTRUE); virtual TGeoVolume*TGeoBBox::Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); virtual voidTGeoShape::Draw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static Double_tTGeoShape::EpsMch(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGeoShape::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*TGeoBBox::GetAxisName(Int_t iaxis) const; virtual Double_tTGeoBBox::GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const; virtual voidTGeoBBox::GetBoundingCylinder(Double_t* param) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; virtual Int_tTGeoBBox::GetByteCount() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTGeoBBox::GetDX() const; virtual Double_tTGeoBBox::GetDY() const; virtual Double_tTGeoBBox::GetDZ() const; virtual Double_tTGeoBBox::GetFacetArea(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoXtru.html:4124,error,error,4124,root/html528/TGeoXtru.html,https://root.cern,https://root.cern/root/html528/TGeoXtru.html,3,['error'],['error']
Availability,"px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; ECheckClassInfo enum nameTInterpreter; EDeprecatedStatusBits enum nameTObject; EErrorCode enum nameTInterpreter; EndOfLineAction() finalTClingvirtual; EReturnType enum nameTInterpreter; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Evaluate(const char *, TInterpreterValue &) finalTClingvirtual; Execute(const char *function, const char *params, int *error=nullptr) finalTClingvirtual; Execute(TObject *obj, TClass *cl, const char *method, const char *params, int *error=nullptr) finalTClingvirtual; Execute(TObject *obj, TClass *cl, const char *method, const char *params, Bool_t objectIsConst, int *error=nullptr)TCling; Execute(TObject *obj, TClass *cl, TMethod *method, TObjArray *params, int *error=nullptr) finalTClingvirtual; Execute(TMethod *, TObjArray *, int *=nullptr) finalTClinginlineprivatevirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; ExecuteMacro(const char *filename, EErrorCode *error=nullptr) finalTClingvirtual; ExecuteWithArgsAndReturn(TMethod *method, void *address, const void *args[]=nullptr, int nargs=0, void *ret=nullptr) const finalTClingvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fAutoLoadCallBackTClingprivate; fAutoLoadLibStorageTClingprivate; fBitsTObjectprivate; fClassesHeadersMapTClingprivate; fClassesToUpdateTClingprivate; fClingCallbacksTClingprivate; fCurExecutingMacrosTClingprivate; fCxxModulesEnabledTClingprivate; fExitCodeTClingprivate; fgDtorOnlyTObjectprivatestatic; fGlobalsListSerialTClingprivate; fgObjectStatTObjectprivatestatic; fgSetOfSpecialsTClingprivatestatic; fHeaderParsingOnDemandTClingprivate; FillBuffer(char *&buffer)TNamedvirtual; fInclude",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling-members.html:12894,error,error,12894,doc/master/classTCling-members.html,https://root.cern,https://root.cern/doc/master/classTCling-members.html,5,['error'],['error']
Availability,"px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tDivide(const TH1* h1); virtual Bool_tDivide(TF1* f1, Double_t c1 = 1); virtual Bool_tDivide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*DrawCopy(Option_t* option = """", const char* name_postfix = ""_copy"") const; virtual TH1*DrawNormalized(Option_t* option = """", Double_t norm = 1) const; virtual voidDrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidEval(TF1* f1, Option_t* option = """"); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExtendAxis(Double_t x, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TH1*FFT(TH1* h_output, Option_t* option); virtual Int_tFill(Double_t x); virtual Int_tFill(Double_t x, Double_t w); virtual Int_tFill(const char* name, Double_t w); virtual voidTNamed::FillBuffer(char*& buffer); virtual voidFillN(Int_t ntimes, const Double_t* x, const Double_t* w, Int_t stride = 1); virtual voidFillN(Int_t, const Double_t*, const Double_t*, const Double_t*, Int_t); virtual voidFillRandom(const char* fname, Int_t ntimes = 5000); virtual voidFillRandom(TH1* h, Int_t ntimes = 5000); virtual Int_tFindBin(Double_t x, Double_t y = 0, Double_t z = 0); virtual Int_tFindFirstBinAbove(Double_t threshold = 0, Int_t axis = 1) const; virtual Int_tFindFixBin(Double_t x, Double_t y = 0, Double_t z = 0) const; virtual Int_tFindLastBinAbove(Double_t threshold = 0, Int_t axis = 1) const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:19704,error,error,19704,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['error']
Availability,"px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTGraph::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTGraph::DrawGraph(Int_t n, const Int_t* x, const Int_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Float_t* x, const Float_t* y, Option_t* option = """"); virtual voidTGraph::DrawGraph(Int_t n, const Double_t* x = 0, const Double_t* y = 0, Option_t* option = """"); virtual voidTGraph::DrawPanel()MENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tTGraph::Eval(Double_t x, TSpline* spline = 0, Option_t* option = """") const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTGraph::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTGraph::Expand(Int_t newsize); virtual voidTGraph::Expand(Int_t newsize, Int_t step); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TGraph::FindObject(const char* name) const; virtual TObject*TGraph::FindObject(const TObject* obj) const; virtual TFitResultPtrTGraph::Fit(const char* formula, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0)MENU ; virtual TFitResultPtrTGraph::Fit(TF1* f1, Option_t* option = """", Option_t* goption = """", Axis_t xmin = 0, Axis_t xmax = 0); virtual voidTGraph::FitPanel()MENU ; virtual Double_tTGraph::GetCorrelationFactor() const; virtual Double_tTGraph::GetCovariance() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Bool_tTGraph::GetEditable() const; virtual Double_tTGraphErrors::GetErrorX(Int_t bin) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphPolar.html:3556,error,error,3556,root/html528/TGraphPolar.html,https://root.cern,https://root.cern/root/html528/TGraphPolar.html,6,['error'],['error']
Availability,"py and release.Definition TGraphMultiErrors.cxx:748; TGraphMultiErrors::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TGraphMultiErrors.cxx:1729; TGraphMultiErrors::fSumErrorsModeInt_t fSumErrorsModeHow y errors are summed: kOnlyFirst = Only First; kSquareSum = Squared Sum; kSum = Absolute Addition.Definition TGraphMultiErrors.h:33; TGraphMultiErrors::GetLineWidthvirtual Width_t GetLineWidth() constReturn the line width.Definition TAttLine.h:35; TGraphMultiErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphMultiErrors.h:142; TGraphMultiErrors::ESummationModesESummationModesDefinition TGraphMultiErrors.h:57; TGraphMultiErrors::kAbsSum@ kAbsSumCalculate the absolute sum of all errors.Definition TGraphMultiErrors.h:60; TGraphMultiErrors::kSquareSum@ kSquareSumCalculate the square sum of all errors.Definition TGraphMultiErrors.h:59; TGraphMultiErrors::kOnlyFirst@ kOnlyFirstOnly take errors from first dimension.Definition TGraphMultiErrors.h:58; TGraphMultiErrors::GetAttFillvirtual TAttFill * GetAttFill(Int_t e)Get AttFill pointer for specified error dimension.Definition TGraphMultiErrors.cxx:1621; TGraphMultiErrors::SetLineStylevirtual void SetLineStyle(Int_t e, Style_t lstyle)Set Line Style of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2095; TGraphMultiErrors::CopyPointsBool_t CopyPoints(Double_t **arrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy errors from fE*** to arrays[***] or to f*** Copy points.Definition TGraphMultiErrors.cxx:777; TGraphMultiErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exH)Set exH value for point i.Definition TGraphMultiErrors.cxx:1869; TGraphMultiErrors::fExLDouble_t * fExL[fNpoints] array of X low errorsDefinition TGraphMultiErrors.h:35; TGraphMultiErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point array",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:19745,error,errors,19745,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['errors']
Availability,"py constructors ; Definition at line 221 of file BinData.cxx. Member Function Documentation. ◆ Add() [1/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val . ). add multi-dim coordinate data with only value ; Definition at line 504 of file BinData.cxx. ◆ Add() [2/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; elval, . double ; ehval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 577 of file BinData.cxx. ◆ Add() [3/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . const double * ; ex, . double ; eval . ). add multi-dim coordinate data with both error in coordinates and value ; Definition at line 546 of file BinData.cxx. ◆ Add() [4/8]. void ROOT::Fit::BinData::Add ; (; const double * ; x, . double ; val, . double ; eval . ). add multi-dim coordinate data with only error in value ; add multi-dim coordinate data with only error in value The class stores internally the inverse of the error in this case ; Definition at line 524 of file BinData.cxx. ◆ Add() [5/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y . ). add one dim data with only coordinate and values ; Definition at line 408 of file BinData.cxx. ◆ Add() [6/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; ey . ). add one dim data with error in the coordinate (x) in this case store the value (y) error and not the inverse ; Definition at line 452 of file BinData.cxx. ◆ Add() [7/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ex, . double ; eyl, . double ; eyh . ). add one dim data with error in the coordinate (x) and asymmetric errors in the value (y) in this case store the y errors and not the inverse ; Definition at line 479 of file BinData.cxx. ◆ Add() [8/8]. void ROOT::Fit::BinData::Add ; (; double ; x, . double ; y, . double ; ey . ). add one dim data with no error in the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:17859,error,error,17859,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,3,['error'],['error']
Availability,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJet.html:7108,error,error,7108,doc/master/classJet.html,https://root.cern,https://root.cern/doc/master/classJet.html,4,['error'],['error']
Availability,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:14954,error,error,14954,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,2,['error'],['error']
Availability,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLHistPainter.html:10111,error,error,10111,doc/master/classTGLHistPainter.html,https://root.cern,https://root.cern/doc/master/classTGLHistPainter.html,3,['error'],['error']
Availability,"py this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:5711,error,error,5711,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,4,['error'],['error']
Availability,"py(TObject& f1) const; Copy this F1 to a new F1. Double_t Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; Returns the first derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". if the argument params is null, the current function parameters are used,; otherwise the parameters in params are used. the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for the vast majority; of functions. Give a smaller value if your function has many changes; of the second derivative in the function range. Getting the error via TF1::DerivativeError:; (total error = roundoff error + interpolation error); the estimate of the roundoff error is taken as follows:. where k is the double precision, ai are coefficients used in; central difference formulas; interpolation error is decreased by making the step size h smaller. Author: Anna Kreshuk. Double_t Derivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; Returns the second derivative of the function at point x,; computed by Richardson's extrapolation method (use 2 derivative estimates; to compute a third, more accurate estimation); first, derivatives with steps h and h/2 are computed by central difference formulas. the final estimate ; ""Numerical Methods for Scientists and Engineers"", H.M.Antia, 2nd edition"". if the argument params is null, the current function parameters are used,; otherwise the parameters in params are used. the argument eps may be specified to control the step size (precision).; the step size is taken as eps*(xmax-xmin).; the default value (0.001) should be good enough for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:31951,error,error,31951,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,15,['error'],['error']
Availability,"py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*TTree::GetBranchRef() const; virtual Bool_tTTree::GetBranchStatus(const char* branch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTreeSQL.html:4007,error,error,4007,root/html532/TTreeSQL.html,https://root.cern,https://root.cern/root/html532/TTreeSQL.html,3,['error'],['error']
Availability,"py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Double_t* x); virtual Int_tFill(Double_t x0, Double_t x1, Double_t x2 = 0, Double_t x3 = 0, Double_t x4 = 0, Double_t x5 = 0, Double_t x6 = 0, Double_t x7 = 0, Double_t x8 = 0, Double_t x9 = 0, Double_t x10 = 0, Double_t x11 = 0, Double_t x12 = 0, Double_t x13 = 0, Double_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtupleD.html:4869,error,error,4869,root/html532/TNtupleD.html,https://root.cern,https://root.cern/root/html532/TNtupleD.html,3,['error'],['error']
Availability,"py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tFill(const Float_t* x); Int_tFill(Int_t x0); Int_tFill(Double_t x0); virtual Int_tFill(Float_t x0, Float_t x1 = 0, Float_t x2 = 0, Float_t x3 = 0, Float_t x4 = 0, Float_t x5 = 0, Float_t x6 = 0, Float_t x7 = 0, Float_t x8 = 0, Float_t x9 = 0, Float_t x10 = 0, Float_t x11 = 0, Float_t x12 = 0, Float_t x13 = 0, Float_t x14 = 0); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaske",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TNtuple.html:4851,error,error,4851,root/html532/TNtuple.html,https://root.cern,https://root.cern/root/html532/TNtuple.html,3,['error'],['error']
Availability,"py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tTTree::Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTTree::DropBaskets(); virtual voidTTree::DropBranchFromCache(const char* bname, Bool_t subbranches = kFALSE); virtual voidTTree::DropBranchFromCache(TBranch* branch, Bool_t subbranches = kFALSE); virtual voidTTree::DropBuffers(Int_t nbytes); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Int_tTTree::Fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TBranch*TTree::FindBranch(const char* name); virtual TLeaf*TTree::FindLeaf(const char* name); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTTree::Fit(const char* funcname, const char* varexp, const char* selection = """", Option_t* option = """", Option_t* goption = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual Int_tTTree::FlushBaskets() const; virtual const char*TTree::GetAlias(const char* aliasName) const; virtual Long64_tTTree::GetAutoFlush() const; virtual Long64_tTTree::GetAutoSave() const; virtual TBranch*TTree::GetBranch(const char* name); virtual TBranchRef*TTree::GetBranchRef() const; virtual Bool_tTTree::GetBranchStatus(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/THbookTree.html:5502,error,error,5502,root/html532/THbookTree.html,https://root.cern,https://root.cern/root/html532/THbookTree.html,3,['error'],['error']
Availability,"py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidDrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawFrame(Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light); voidDrawPolyLine(Int_t n, TPoints* xy); voidDrawPolyLineNDC(Int_t n, TPoints* uv); virtual voidDrawPolyMarker(Int_t n, Float_t* x, Float_t* y); virtual voidDrawPolyMarker(Int_t n, Double_t* x, Double_t* y); virtual voidDrawPS(Int_t n, Float_t* xw, Float_t* yw); virtual voidDrawPS(Int_t n, Double_t* xw, Double_t* yw); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSVG.html:3296,error,error,3296,root/html528/TSVG.html,https://root.cern,https://root.cern/root/html528/TSVG.html,9,['error'],['error']
Availability,"p}; 2077/// gSystem->ListLibraries(); 2078/// ~~~; 2079///; 2080/// The following line lists all the libraries currently loaded having ""RIO"" in their names:; 2081/// ~~~ {.cpp}; 2082/// gSystem->ListLibraries("".*RIO.*""); 2083/// ~~~; 2084 ; 2085void TSystem::ListLibraries(const char *regexp) {; 2086 if (!(regexp && regexp[0])); 2087 regexp = "".*"";; 2088 TRegexp pat(regexp, kFALSE);; 2089 TString libs(GetLibraries());; 2090 TString tok;; 2091 Ssiz_t from = 0, ext;; 2092 while (libs.Tokenize(tok, from, "" "")) {; 2093 if ((tok.Index(pat, &ext) != 0) || (ext != tok.Length())); 2094 continue;; 2095 std::cout << tok << ""\n"";; 2096 }; 2097}; 2098 ; 2099////////////////////////////////////////////////////////////////////////////////; 2100/// Return the thread local storage for the custom last error message; 2101 ; 2102TString &TSystem::GetLastErrorString(); 2103{; 2104 TTHREAD_TLS_DECL( TString, gLastErrorString);; 2105 return gLastErrorString;; 2106}; 2107 ; 2108////////////////////////////////////////////////////////////////////////////////; 2109/// Return the thread local storage for the custom last error message; 2110 ; 2111const TString &TSystem::GetLastErrorString() const; 2112{; 2113 return const_cast<TSystem*>(this)->GetLastErrorString();; 2114}; 2115 ; 2116////////////////////////////////////////////////////////////////////////////////; 2117/// Get list of shared libraries loaded at the start of the executable.; 2118/// Returns 0 in case list cannot be obtained or in case of error.; 2119 ; 2120const char *TSystem::GetLinkedLibraries(); 2121{; 2122 return nullptr;; 2123}; 2124 ; 2125////////////////////////////////////////////////////////////////////////////////; 2126/// Return a space separated list of loaded shared libraries.; 2127/// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; 2128/// This list is of a format suitable for a linker, i.e it may contain; 2129/// -Lpathname and/or -lNameOfLib.; 2130/// Option can be any of:; 2131/// - S: shared librari",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:67989,error,error,67989,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,2,['error'],['error']
Availability,"q"") ; Tl.DrawText(x2, y, ""#leq"");; y -= step ; Tl.DrawLatex(x1, y, ""#approx"") ; Tl.DrawText(x2, y, ""#approx"");; y -= step ; Tl.DrawLatex(x1, y, ""#in"") ; Tl.DrawText(x2, y, ""#in"");; y -= step ; Tl.DrawLatex(x1, y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");. // Draw Second Column; y = 0.96; x1 = 0.22; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.DrawLatex(x1, y, ""#",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLatex.html:4177,down,downarrow,4177,root/html534/TLatex.html,https://root.cern,https://root.cern/root/html534/TLatex.html,3,['down'],['downarrow']
Availability,"q"") ; Tl.DrawText(x2, y, ""#leq"");; y -= step ; Tl.DrawLatex(x1, y, ""#approx"") ; Tl.DrawText(x2, y, ""#approx"");; y -= step ; Tl.DrawLatex(x1, y, ""#in"") ; Tl.DrawText(x2, y, ""#in"");; y -= step ; Tl.DrawLatex(x1, y, ""#supset"") ; Tl.DrawText(x2, y, ""#supset"");; y -= step ; Tl.DrawLatex(x1, y, ""#cap"") ; Tl.DrawText(x2, y, ""#cap"");; y -= step ; Tl.DrawLatex(x1, y, ""#ocopyright"") ; Tl.DrawText(x2, y, ""#ocopyright"");; y -= step ; Tl.DrawLatex(x1, y, ""#trademark"") ; Tl.DrawText(x2, y, ""#trademark"");; y -= step ; Tl.DrawLatex(x1, y, ""#times"") ; Tl.DrawText(x2, y, ""#times"");; y -= step ; Tl.DrawLatex(x1, y, ""#bullet"") ; Tl.DrawText(x2, y, ""#bullet"");; y -= step ; Tl.DrawLatex(x1, y, ""#voidb"") ; Tl.DrawText(x2, y, ""#voidb"");; y -= step ; Tl.DrawLatex(x1, y, ""#doublequote"") ; Tl.DrawText(x2, y, ""#doublequote"");; y -= step ; Tl.DrawLatex(x1, y, ""#lbar"") ; Tl.DrawText(x2, y, ""#lbar"");; y -= step ; Tl.DrawLatex(x1, y, ""#arcbottom"") ; Tl.DrawText(x2, y, ""#arcbottom"");; y -= step ; Tl.DrawLatex(x1, y, ""#downarrow"") ; Tl.DrawText(x2, y, ""#downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#leftrightarrow"") ; Tl.DrawText(x2, y, ""#leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Downarrow"") ; Tl.DrawText(x2, y, ""#Downarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#Leftrightarrow"") ; Tl.DrawText(x2, y, ""#Leftrightarrow"");; y -= step ; Tl.DrawLatex(x1, y, ""#void8"") ; Tl.DrawText(x2, y, ""#void8"");; y -= step ; Tl.DrawLatex(x1, y, ""#hbar"") ; Tl.DrawText(x2, y, ""#hbar"");. // Draw Second Column; y = 0.96; step = 0.0465; x1 = 0.27; x2 = x1+0.04;; Tl.DrawLatex(x1, y, ""#diamond"") ; Tl.DrawText(x2, y, ""#diamond"");; y -= step ; Tl.DrawLatex(x1, y, ""#aleph"") ; Tl.DrawText(x2, y, ""#aleph"");; y -= step ; Tl.DrawLatex(x1, y, ""#geq"") ; Tl.DrawText(x2, y, ""#geq"");; y -= step ; Tl.DrawLatex(x1, y, ""#neq"") ; Tl.DrawText(x2, y, ""#neq"");; y -= step ; Tl.DrawLatex(x1, y, ""#notin"") ; Tl.DrawText(x2, y, ""#notin"");; y -= step ; Tl.DrawLatex(x1, y, ""#subseteq"") ; Tl.DrawText(x2, y, ""#subseteq"");; y -= step ; Tl.Draw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:4008,down,downarrow,4008,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,3,['down'],['downarrow']
Availability,"q, Double_t *smo, Double_t *acvr);  Function for super smoother Based on R function supsmu: Translated to C++ by C. ;  ; static void BDRsupsmu (Int_t n, Double_t *x, Double_t *y, Double_t *w, Int_t iper, Double_t span, Double_t alpha, Double_t *smo, Double_t *sc);  Friedmanns super smoother (Friedman, 1984). ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void Lowest (Double_t *x, Double_t *y, Int_t n, Double_t &xs, Double_t &ys, Int_t nleft, Int_t nright, Double_t *w, Bool_t userw, Double_t *rw, Bool_t &ok);  Fit value at x[i] Based on R function lowest: Translated to C++ by C. ;  ; static void Psort (Double_t *x, Int_t n, Int_t k);  Static function based on R function rPsort: adapted to C++ by Christian Stratowa (R source file: R_sort.c by R Development Core Team (C) 1999-2001) ;  ; static void Rank (Int_t n, Double_t *a, Int_t *index, Int_t *rank, Bool_t down=kTRUE);  static function ;  ; static Int_t Rcmp (Double_t x, Double_t y);  Static function if (ISNAN(x)) return 1; if (ISNAN(y)) return -1;. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TGraph * fGin;  Input graph. ;  ; TGraph * fGout;  Output graph. ;  ; Double_t fMaxX;  Maximum value of array ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphSmooth.html:11877,down,down,11877,doc/master/classTGraphSmooth.html,https://root.cern,https://root.cern/doc/master/classTGraphSmooth.html,1,['down'],['down']
Availability,"qCollection*fTimersList of timers; TStringTNamed::fTitleobject title; TStringfWdpathWorking directory; TFdSet*fWritemask!Files that should be checked for write events; TFdSet*fWriteready!Files with writes waiting. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSystem. ←. TNetSystem; ←. TXNetSystem. TNetXNGSystem. TUnixSystem. TWebSystem. Function documentation; TSystem(const char* name = ""Generic"", const char* title = ""Generic System""); Create a new OS interface. ~TSystem(); Delete the OS interface. Bool_t Init(); Initialize the OS interface. void SetProgname(const char* name); Set the application name (from command line, argv[0]) and copy it in; gProgName. void SetDisplay(); Set DISPLAY environment variable based on utmp entry. Only for UNIX. void SetErrorStr(const char* errstr); Set the system error string. This string will be used by GetError().; To be used in case one does not want or can use the system error; string (e.g. because error is generated by a third party POSIX like; library that does not use standard errno). const char * GetError(); Return system error string. Int_t GetErrno(); Static function returning system error number. void ResetErrno(); Static function resetting system error number. void RemoveOnExit(TObject* obj); Objects that should be deleted on exit of the OS interface. const char * HostName(); Return the system's host name. void NotifyApplicationCreated(); Hook to tell TSystem that the TApplication object has been created. void Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); Beep for duration milliseconds with a tone of freqency freq.; Defaults to printing the '\a' character to stdout.; If freq or duration is <0 respectively, use default value.; If setDefault is set, only set the frequency and duration as; new defaults, but don't beep.; If default freq or duration is <0, never beep (silence). void Run(); System event loop. void ExitLoop(); Exit from event loop. void InnerLoop(); Inner event loop. Bool_t Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSystem.html:18901,error,error,18901,root/html602/TSystem.html,https://root.cern,https://root.cern/root/html602/TSystem.html,1,['error'],['error']
Availability,"qrt((eyL * eyL + eyH * eyH) / 2.);; 1462}; 1463 ; 1464////////////////////////////////////////////////////////////////////////////////; 1465/// Get error e on y coordinate for point `i`.; 1466/// In case of asymmetric errors the mean of the square sum is returned; 1467 ; 1468Double_t TGraphMultiErrors::GetErrorY(Int_t i, Int_t e) const; 1469{; 1470 if (i < 0 || i >= fNpoints || e >= fNYErrors || (fEyL.empty() && fEyH.empty())); 1471 return -1.;; 1472 ; 1473 Double_t eyL = fEyL.empty() ? 0. : fEyL[e][i];; 1474 Double_t eyH = fEyH.empty() ? 0. : fEyH[e][i];; 1475 return TMath::Sqrt((eyL * eyL + eyH * eyH) / 2.);; 1476}; 1477 ; 1478////////////////////////////////////////////////////////////////////////////////; 1479/// Get low error on x coordinate for point `i`.; 1480 ; 1481Double_t TGraphMultiErrors::GetErrorXlow(Int_t i) const; 1482{; 1483 if (i < 0 || i >= fNpoints || !fExL); 1484 return -1.;; 1485 else; 1486 return fExL[i];; 1487}; 1488 ; 1489////////////////////////////////////////////////////////////////////////////////; 1490/// Get high error on x coordinate for point `i`.; 1491 ; 1492Double_t TGraphMultiErrors::GetErrorXhigh(Int_t i) const; 1493{; 1494 if (i < 0 || i >= fNpoints || !fExH); 1495 return -1.;; 1496 else; 1497 return fExH[i];; 1498}; 1499 ; 1500////////////////////////////////////////////////////////////////////////////////; 1501/// Get low error on y coordinate for point `i`.; 1502/// The multiple errors of the dimensions are summed according to `fSumErrorsMode`.; 1503 ; 1504Double_t TGraphMultiErrors::GetErrorYlow(Int_t i) const; 1505{; 1506 if (i < 0 || i >= fNpoints || fEyL.empty()); 1507 return -1.;; 1508 ; 1509 if (fSumErrorsMode == TGraphMultiErrors::kOnlyFirst); 1510 return fEyL[0][i];; 1511 else if (fSumErrorsMode == TGraphMultiErrors::kSquareSum) {; 1512 Double_t sum = 0.;; 1513 for (Int_t j = 0; j < fNYErrors; j++); 1514 sum += fEyL[j][i] * fEyL[j][i];; 1515 return TMath::Sqrt(sum);; 1516 } else if (fSumErrorsMode == TGraphMultiErrors::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:51065,error,error,51065,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['error']
Availability,"quantiles could also be plotted for reference. It represents a robust linear fit, not sensitive to the extremes of the dataset. As in the two datasets case, departures from straight line indicate departures from the specified distribution. Next picture shows an example of a qq-plot of a dataset from N(3, 2) distribution and TMath::Gaus(0, 1) theoretical function. Fitting parameters are estimates of the distribution mean and sigma.; 4.9 TMultiGraph. A multigraph example. A TMultiGraph is a collection of TGraph (or derived) objects. Use TMultiGraph::Addto add a new graph to the list. The TMultiGraph owns the objects in the list. The drawing and fitting options are the same as for TGraph.; {; // create the points; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};; Double_t x2[n] = {-.12,.15,.35,.45,.6,.71,.8,.95,.99,1.05};; Double_t y2[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the width of errors in x and y direction; Double_t ex[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t ey[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};. // create two graphs; TGraph *gr1 = new TGraph(n,x2,y2);; TGraphErrors *gr2 = new TGraphErrors(n,x,y,ex,ey);. // create a multigraph and draw it; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1);; mg->Add(gr2);; mg->Draw(""ALP"");; }; 4.10 TGraph2D. Delaunay triangles and Voronoï diagram. This class is a set of N points x[i], y[i], z[i] in a non-uniform grid. Several visualization techniques are implemented, including Delaunay triangulation. Delaunay triangulation is defined as follow: ‘for a set S of points in the Euclidean plane, the unique triangulation DT(S) of S such that no point in S is inside the circum-circle of any triangle in DT(S). DT(S) is the dual of the Voronoï diagram of S. If n is the number of points in S, the Voronoï diagram of S is the partitioning of the plane containing S points into n convex polygons such that each polygon contains exact",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:156434,error,errors,156434,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['errors']
Availability,"quareFitbool DoLeastSquareFit(const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)least square fitDefinition Fitter.cxx:309; ROOT::Fit::Fitter::SetFCNbool SetFCN(unsigned int npar, Function &fcn, const double *params=nullptr, unsigned int dataSize=0, int fitType=0)Set a generic FCN function as a C++ callable object implementing double () (const double *) Note that...Definition Fitter.h:656; ROOT::Fit::Fitter::fFunc_vstd::shared_ptr< IModelFunction_v > fFunc_v! copy of the fitted function containing on output the fit resultDefinition Fitter.h:564; ROOT::Fit::Fitter::fResultstd::shared_ptr< ROOT::Fit::FitResult > fResult! pointer to the object containing the result of the fitDefinition Fitter.h:568; ROOT::Fit::Fitter::GetDataFromFCNbool GetDataFromFCN()internal functions to get data set and model function from FCN useful for fits done with customized F...Definition Fitter.h:584; ROOT::Fit::Fitter::CalculateMinosErrorsbool CalculateMinosErrors()perform an error analysis on the result using MINOS To be called only after fitting and when a minimi...Definition Fitter.cxx:593; ROOT::Fit::Fitter::DoUpdateMinimizerOptionsbool DoUpdateMinimizerOptions(bool canDifferentMinim=true)Definition Fitter.cxx:763; ROOT::Fit::Fitter::SetFunctionvoid SetFunction(const IModelFunction &func, bool useGradient=false)Set the fitted function (model function) from a parametric function interface.Definition Fitter.cxx:59; ROOT::Fit::Fitter::CalculateHessErrorsbool CalculateHessErrors()perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the...Definition Fitter.cxx:530; ROOT::Fit::Fitter::fConfigFitConfig fConfigfitter configuration (options and parameter settings)Definition Fitter.h:562; ROOT::Fit::Fitter::FitterFitter()Default constructor.Definition Fitter.h:102; ROOT::Fit::Fitter::fFuncstd::shared_ptr< IModelFunction > fFunc! copy of the fitted function containing on output the fit resultDefinition Fitter.h:566; ROOT::F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:47978,error,error,47978,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['error'],['error']
Availability,"quaredWeightsKeeps track of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CBinPointObsolete class, no more in use ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDataVectorClass holding the fit data points ;  CDataWrapperClass maintaining a pointer to external data Using this class avoids copying the data when performing a fit NOTE: this class is not thread-safe and should not be used in parallel fits ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:16700,error,error,16700,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['error'],['error']
Availability,"quaredWeightsKeeps track of the histogram's total sum of squared weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatTotalSumOfWeightsKeeps track of the histogram's total sum of weights ;  CTBinStatNo-op; this class does not provide per-bin statistics ;  ►CTHistStatUncertaintyHistogram statistics to keep track of the Poisson uncertainty per bin ;  CTBinStatModifying view on a THistStatUncertainty for a given bin ;  CTConstBinStatConst view on a THistStatUncertainty for a given bin ;  CTHistViewA view on a histogram, selecting a range on a subset of dimensions ;  CTHistViewOutOfRange;  CTLogEntry;  CTLogHandlerAbstract TLogHandler base class ;  CTLogManager;  ►NFitNamespace for the fitting classes ;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/annotated.html:17785,error,error,17785,doc/v610/annotated.html,https://root.cern,https://root.cern/doc/v610/annotated.html,1,['error'],['error']
Availability,"que ID. RooMsgService& instance(); Return reference to singleton instance. void saveState(); Save current state of message service. void restoreState(); Restore last saved state of message service. Bool_t isActive(const RooAbsArg* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Bool_t isActive(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Check if logging is active for given object/topic/RooFit::MsgLevel combination. Int_t activeStream(const RooAbsArg* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. Int_t activeStream(const TObject* self, RooFit::MsgTopic topic, RooFit::MsgLevel level); Find appropriate logging stream for message from given object with given topic and message level. ostream& log(const RooAbsArg* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with RooAbsArg object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. ostream& log(const TObject* self, RooFit::MsgLevel level, RooFit::MsgTopic topic, Bool_t skipPrefix); Log error message associated with TObject object self at given level and topic. If skipPrefix; is true the standard RooMsgService prefix is not added. void Print(Option_t* options = 0) const; Print configuration of message service. If ""v"" option is given also; inactive streams are listed. StreamConfig& getStream(Int_t id); { return _streams[id] ; }. Int_t numStreams() const; { return _streams.size() ; }. void reset(); { cleanup() ; }. void setGlobalKillBelow(RooFit::MsgLevel level); { _globMinLevel = level ; }. RooFit::MsgLevel globalKillBelow() const; { return _globMinLevel ; }. void showPid(Bool_t flag); { _showPid = flag ; }. Bool_t silentMode() const; Print level support for RooFit-related messages that are not routed t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMsgService.html:11019,error,error,11019,root/html526/RooMsgService.html,https://root.cern,https://root.cern/root/html526/RooMsgService.html,1,['error'],['error']
Availability,"r & TSAXParser::operator= ; (; const TSAXParser & ; ). privatedelete . ◆ Parse(). Int_t TSAXParser::Parse ; (; ). privatevirtual . This function parses the xml file, by initializing the parser and checks whether the parse context is created or not, it will check as well whether the document is well formated. ; It returns the parse error code, see TXMLParser. ; Definition at line 212 of file TSAXParser.cxx. ◆ ParseBuffer(). Int_t TSAXParser::ParseBuffer ; (; const char * ; contents, . Int_t ; len . ). overridevirtual . It parse the contents, instead of a file. ; It will return error if is attempted to parse a second file while a parse is in progres. It returns parse code error, see TXMLParser. ; Implements TXMLParser.; Definition at line 259 of file TSAXParser.cxx. ◆ ParseFile(). Int_t TSAXParser::ParseFile ; (; const char * ; filename). overridevirtual . It creates the parse context of the xml file, where the xml file name is filename. ; If context is created sucessfully, it will call Parse() It returns parse error code, see TXMLParser. ; Implements TXMLParser.; Definition at line 242 of file TSAXParser.cxx. ◆ Streamer(). void TSAXParser::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSAXParser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TSAXParser.h. Friends And Related Symbol Documentation. ◆ TSAXParserCallback. friend class TSAXParserCallback. friend . Definition at line 25 of file TSAXParser.h. Member Data Documentation. ◆ fSAXHandler. _xmlSAXHandler* TSAXParser::fSAXHandler. private . libxml2 SAX handler ; Definition at line 28 of file TSAXParser.h. Libraries for TSAXParser:. [legend]; The documentation for this class was generated from the following files:; io/xmlparser/inc/TSAXParser.h; io/xmlparser/src/TSAXParser.cxx. TSAXParser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:24204,error,error,24204,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,1,['error'],['error']
Availability,"r &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoMaterial;  TGeoMaterial ();  Default constructor. ;  ;  TGeoMaterial (const char *name);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, Double_t radlen=0, Double_t intlen=0);  Constructor. ;  ;  TGeoMaterial (const char *name, Double_t a, Double_t z, Double_t rho, EGeoMaterialState state, Double_t temperature=STP_temperature, Double_t pressure=STP_pressure);  Constructor with state, temperature and pressure. ;  ;  TGeoMaterial (const char *name, TGeoElement *elem, Double_t rho);  Constructor. ;  ;  ~TGeoMaterial () override;  Destructor. ;  ; bool AddConstProperty (const char *property, const char *ref);  ; bool AddProperty (const char *property, const char *ref);  ; virtual Double_t GetA () const;  ; TGeoElement * GetBaseElement () const;  ; virtual TObject * GetCerenkovProperties () const;  ; TList const & GetConstProperties () const;  ; Double_t GetConstProperty (const char *property, Bool_t *error=nullptr) const;  ; Double_t GetConstProperty (Int_t i, Bool_t *error=nullptr) const;  ; const char * GetConstPropertyRef (const char *property) const;  ; const char * GetConstPropertyRef (Int_t i) const;  ; virtual Int_t GetDefaultColor () const;  Get some default color related to this material. ;  ; virtual Double_t GetDensity () const;  ; TGeoElement * GetElement () const;  Get a pointer to the element this material is made of. ;  ; TGeoExtension * GetFWExtension () const;  ; Int_t GetIndex ();  Retrieve material index in the list of materials. ;  ; virtual Double_t GetIntLen () const;  ; Int_t GetNconstProperties () const;  ; Int_t GetNproperties () const;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; Double_t GetPressure () const;  ; TList const & GetProperties () const;  ; TGDMLMatrix * GetProperty (const char *name) const;  ; TGDMLMatrix * GetProperty (Int_t i) const;  ; const char * GetPropertyRef (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoMixture.html:4404,error,error,4404,doc/master/classTGeoMixture.html,https://root.cern,https://root.cern/doc/master/classTGeoMixture.html,2,['error'],['error']
Availability,"r (Int_t e, Color_t fcolor);  Set Fill Color of error e (-1 = Global and x errors). ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillColorAlpha (Int_t e, Color_t fcolor, Float_t falpha);  Set Fill Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Int_t e, Style_t fstyle);  Set Fill Style of error e (-1 = Global and x errors). ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; virtual void SetLineColor (Color_t lcolor);  Set the line color. ;  ; virtual void SetLineColor (Int_t e, Color_t lcolor);  Set Line Color of error e (-1 = Global and x errors). ;  ; virtual void SetLineColorAlpha (Color_t lcolor, Float_t lalpha);  Set a transparent line color. ;  ; virtual void SetLineColorAlpha (Int_t e, Color_t lcolor, Float_t lalpha);  Set Line Color and Alpha of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Int_t e, Style_t lstyle);  Set Line Style of error e (-1 = Global and x errors). ;  ; virtual void SetLineStyle (Style_t lstyle);  Set the line style. ;  ; virtual void SetLineWidth (Int_t e, Width_t lwidth);  Set Line Width of error e (-1 = Global and x errors). ;  ; virtual void SetLineWidth (Width_t lwidth);  Set the line width. ;  ; virtual void SetPointError (Double_t exL, Double_t exH, Double_t eyL1, Double_t eyH1, Double_t eyL2=0., Double_t eyH2=0., Double_t eyL3=0., Double_t eyH3=0.);  Set ex and ey values for point pointed by the mouse. ;  ; virtual void SetPointError (Int_t i, Int_t ne, Double_t exL, Double_t exH, const Double_t *eyL, const Double_t *eyH);  Set ex and ey values for point i. ;  ; virtual void SetPointEX (Int_t i, Double_t exL, Double_t exH);  Set ex values for point i. ;  ; virtual void SetPointEXhigh (Int_t i, Double_t exH);  Set exH value for point i. ;  ; virtual void SetPointEXlow (Int_t i, Double_t exL);  Set exL value for point i. ;  ; virtual void SetPointEY (Int_t i, Int_t e,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:15095,error,error,15095,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,2,['error'],"['error', 'errors']"
Availability,"r (auto text : {; ""No template uncertainties"",; ""are taken into account."",; ""This leads to low errors"",; ""for the parameters A, since"",; ""the only source of errors"",; ""are the data statistics.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; ; can->cd(2);; frame = x.frame(Title(""Barlow Beeston for Sig & Bkg separately""));; sumData.plotOn(frame);; model1.plotOn(frame, LineColor(kBlue), VisualizeError(*result1));; // Plot data again to show it on top of error bands:; sumData.plotOn(frame);; model1.plotOn(frame, LineColor(kBlue));; model1.plotOn(frame, Components(p_ph_sig1), LineColor(kAzure));; model1.plotOn(frame, Components(p_ph_bkg1), LineColor(kRed));; model1.paramOn(frame, Parameters(RooArgSet(Asig1, Abkg1)));; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; pt.Clear();; for (auto text : {; ""With gamma parameters, the"",; ""signal & background templates"",; ""can adapt to the data."",; ""Note how the blue signal"",; ""template changes its shape."",; ""This leads to higher errors"",; ""of the scale parameters A.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; can->cd(3);; frame = x.frame(Title(""Barlow Beeston light for (Sig+Bkg)""));; sumData.plotOn(frame);; model2.plotOn(frame, LineColor(kBlue), VisualizeError(*result2));; // Plot data again to show it on top of model0 error bands:; sumData.plotOn(frame);; model2.plotOn(frame, LineColor(kBlue));; model2.plotOn(frame, Components(p_ph_sig2), LineColor(kAzure));; model2.plotOn(frame, Components(p_ph_bkg2), LineColor(kRed));; model2.paramOn(frame, Parameters(RooArgSet(Asig2, Abkg2)));; ; sigData->plotOn(frame, MarkerColor(kBlue));; frame->Draw();; ; pt.Clear();; for (auto text : {; ""When signal and background"",; ""template share one gamma para-"",; ""meter per bin, they adapt less."",; ""The errors of the A parameters"",; ""also shrink slightly.""}) {; pt.AddText(text);; }; pt.DrawClone();; ; ; std::cout << ""Asig [normal ] = "" << Asig0.getVal() << "" +/- "" << Asig0.getError() << std::endl;; std::cout << ""Asig [BB ] = "" << Asi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html:6587,error,errors,6587,doc/master/rf709__BarlowBeeston_8C.html,https://root.cern,https://root.cern/doc/master/rf709__BarlowBeeston_8C.html,1,['error'],['errors']
Availability,"r (const char *name, const char *title, double minValue, double maxValue, const char *unit="""");  Create a variable allowed to float in the given range. ;  ;  RooRealVar (const char *name, const char *title, double value, const char *unit="""");  Create a constant variable with a value and optional unit. ;  ;  RooRealVar (const char *name, const char *title, double value, double minValue, double maxValue, const char *unit="""");  Create a variable with the given starting value. ;  ;  RooRealVar (const RooRealVar &other, const char *name=nullptr);  Copy Constructor. ;  ;  ~RooRealVar () override;  Destructor. ;  ; TObject * clone (const char *newname) const override;  ; void copyCacheFast (const RooRealVar &other, bool setValDirty=true);  ; Int_t defaultPrintContents (Option_t *opt) const override;  Mapping of Print() option string to RooPrintable contents specifications. ;  ; void deleteSharedProperties ();  Stop sharing properties. ;  ; RooErrorVar * errorVar () const;  Return a RooAbsRealLValue representing the error associated with this variable. ;  ; TString * format (const RooCmdArg &formatArg) const;  Format contents of RooRealVar for pretty printing on RooPlot parameter boxes. ;  ; TString * format (Int_t sigDigits, const char *options) const;  Format numeric value of RooRealVar and its error in a variety of ways. ;  ; double getAsymErrorHi () const;  ; double getAsymErrorLo () const;  ; const RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) const override;  Return binning definition with name. ;  ; RooAbsBinning & getBinning (const char *name=nullptr, bool verbose=true, bool createOnTheFly=false) override;  Return binning definition with name. ;  ; std::list< std::string > getBinningNames () const override;  Get a list of all binning names. ;  ; double getError () const;  ; double getErrorHi () const;  ; double getErrorLo () const;  ; double getValV (const RooArgSet *nset=nullptr) const override;  Return value of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:1822,error,errorVar,1822,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,2,['error'],"['error', 'errorVar']"
Availability,"r (const char *type, const char *algo=nullptr);  Set the default Minimizer type and corresponding algorithms. ;  ; static void SetDefaultPrecision (double prec);  Set the default Minimizer precision. ;  ; static void SetDefaultPrintLevel (int level);  Set the default Print Level. ;  ; static void SetDefaultStrategy (int strat);  Set the default strategy. ;  ; static void SetDefaultTolerance (double tol);  Set the Minimization tolerance. ;  . Private Attributes; std::string fAlgoType;  Minimizer algorithmic specification (Migrad, Minimize, ...) ;  ; double fErrorDef;  error definition (=1. for getting 1 sigma error for chi2 fits) ;  ; ROOT::Math::IOptions * fExtraOptions;  ; int fLevel;  debug print level ;  ; int fMaxCalls;  maximum number of function calls ;  ; int fMaxIter;  maximum number of iterations ;  ; std::string fMinimType;  Minimizer type (Minuit, Minuit2, etc.. ;  ; double fPrecision;  precision of the objective function evaluation (value <=0 means left to default) ;  ; int fStrategy;  minimizer strategy (used by Minuit) ;  ; double fTolerance;  minimize tolerance to reach solution ;  . #include <Math/MinimizerOptions.h>; Constructor & Destructor Documentation. ◆ MinimizerOptions() [1/2]. ROOT::Math::MinimizerOptions::MinimizerOptions ; (; ). Definition at line 137 of file MinimizerOptions.cxx. ◆ ~MinimizerOptions(). ROOT::Math::MinimizerOptions::~MinimizerOptions ; (; ). Definition at line 170 of file MinimizerOptions.cxx. ◆ MinimizerOptions() [2/2]. ROOT::Math::MinimizerOptions::MinimizerOptions ; (; const MinimizerOptions & ; opt). Definition at line 146 of file MinimizerOptions.cxx. Member Function Documentation. ◆ Default(). IOptions & ROOT::Math::MinimizerOptions::Default ; (; const char * ; name). static . Retrieve extra options for a given minimizer name. ; If the extra options already exist in a global map of (Minimizer name, options) it will return a reference to that options, otherwise it will create a new one and return the corresponding refe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html:4961,toler,tolerance,4961,doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MinimizerOptions.html,1,['toler'],['tolerance']
Availability,"r (ctrl-c); TStringTProofMgr::fMssUrlURL for the remote data pool, if any; TStringTNamed::fNameobject identifier; Int_tTProofMgr::fRemoteProtocolProtocol number run by the daemon server; TProofMgr::EServTypeTProofMgr::fServTypeType of server: old-proofd, XrdProofd; TList*TProofMgr::fSessionsPROOF session managed by this server; TStringTNamed::fTitleobject title; TUrlTProofMgr::fUrlServer URL; static TListTProofMgr::fgListOfManagersSub-list of TROOT::ListOfProofs for managers. private:. TXSocket*fSocketConnection to XRD. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TProofMgr. TXHandler. ←; TXProofMgr. Function documentation; TXProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); Create a PROOF manager for the standard (old) environment. Int_t Init(Int_t loglevel = -1); Do real initialization: open the connection and set the relevant; variables.; Login and authentication are dealt with at this level, if required.; Return 0 in case of success, 1 if the remote server is a 'proofd',; -1 in case of error. ~TXProofMgr(); Destructor: close the connection. void SetInvalid(); Invalidate this manager by closing the connection. TProof * AttachSession(TProofDesc* d, Bool_t gui = kFALSE); Dummy version provided for completeness. Just returns a pointer to; existing session 'id' (as shown by TProof::QuerySessions) or 0 if 'id' is; not valid. The boolena 'gui' should be kTRUE when invoked from the GUI. void DetachSession(Int_t , Option_t* = """"); Detach session with 'id' from its proofserv. The 'id' is the number; shown by QuerySessions. The correspondent TProof object is deleted.; If id == 0 all the known sessions are detached.; Option opt=""S"" or ""s"" forces session shutdown. void DetachSession(TProof* , Option_t* = """"); Detach session 'p' from its proofserv. The instance 'p' is invalidated; and should be deleted by the caller. Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TProofMgr::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofMgr.html:10715,error,error,10715,root/html602/TXProofMgr.html,https://root.cern,https://root.cern/root/html602/TXProofMgr.html,2,['error'],['error']
Availability,"r (for the plugin manager see the TPluginManager class). The returned type of TFile depends on the file name specified by 'url'. If 'url' is a '|'-separated list of file URLs, the 'URLs' are tried sequentially in the specified order until a successful open. If the file starts with ""root:"", ""roots:"" or ""rootk:"" a TNetFile object will be returned, with ""http:"" a TWebFile, with ""file:"" a local TFile, etc. (see the list of TFile plugin handlers in $ROOTSYS/etc/system.rootrc for regular expressions that will be checked) and as last a local file will be tried. Before opening a file via TNetFile a check is made to see if the URL specifies a local file. If that is the case the file will be opened via a normal TFile. To force the opening of a local file via a TNetFile use either TNetFile directly or specify as host ""localhost"". The netopt argument is only used by TNetFile. For the meaning of the options and other arguments see the constructors of the individual file classes. In case of error, it returns a nullptr.; For TFile implementations supporting asynchronous file open, see TFile::AsyncOpen(...), it is possible to request a timeout with the option TIMEOUT=<secs>: the timeout must be specified in seconds and it will be internally checked with granularity of one millisec. For remote files there is the option: CACHEREAD opens an existing file for reading through the file cache. The file will be downloaded to the cache and opened from there. If the download fails, it will be opened remotely. The file will be downloaded to the directory specified by SetCacheFileDir().; The caller is responsible for deleting the pointer. In READ mode, a nullptr is returned if the file does not exist or cannot be opened. In CREATE mode, a nullptr is returned if the file already exists or cannot be created. In RECREATE mode, a nullptr is returned if the file can not be created. In UPDATE mode, a nullptr is returned if the file cannot be created or opened. ; Definition at line 4089 of file TFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:83411,error,error,83411,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['error'],['error']
Availability,"r ) :; 26 FitData( maxpoints, dim ),; 27 fErrorType( err ),; 28 fDataPtr( nullptr ),; 29 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 30 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 31 {; 32 InitializeErrors();; 33 InitDataVector( );; 34 }; 35 ; 36 ; 37 /**; 38 constructor from option and default range; 39 */; 40 BinData::BinData (const DataOptions & opt, unsigned int maxpoints,; 41 unsigned int dim, ErrorType err ) :; 42 FitData( opt, maxpoints, dim ),; 43 fErrorType( err ),; 44 fDataPtr( nullptr ),; 45 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 46 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 47 {; 48 InitializeErrors();; 49 InitDataVector( );; 50 }; 51 ; 52 /**; 53 constructor from options and range; 54 efault is 1D and value errors; 55 */; 56 BinData::BinData (const DataOptions & opt, const DataRange & range,; 57 unsigned int maxpoints, unsigned int dim, ErrorType err ) :; 58 FitData( opt, range, maxpoints, dim ),; 59 fErrorType( err ),; 60 fDataPtr( nullptr ),; 61 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 62 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 63 {; 64 InitializeErrors();; 65 InitDataVector( );; 66 }; 67 ; 68 /** constructors using external data */; 69 ; 70 /**; 71 constructor from external data for 1D with errors on coordinate and value; 72 */; 73 BinData::BinData (unsigned int n, const double * dataX, const double * val,; 74 const double * ex , const double * eval ) :; 75 FitData( n, dataX ),; 76 fDataPtr( nullptr ),; 77 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 78 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 79 {; 80 assert( val );; 81 fDataPtr = val;; 82 ; 83 if ( nullptr != eval ); 84 {; 85 fDataErrorPtr = eval;; 86 ; 87 fErrorType = kValueError;; 88 ; 89 if ( nullptr != ex ); 90 {; 91 fCoordErrorsPtr.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:2189,error,errors,2189,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['error'],['errors']
Availability,"r * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TNamed::TNamedTNamed()Definition TNamed.h:36; TNamed::fNameTString fNameDefinition TNamed.h:32; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::GetEntriesFastInt_t GetEntriesFast() constDefinition TObjArray.h:58; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjStringCollectable string class.Definition TObjString.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::AbstractMethodvoid AbstractMethod(const char *method) constUse this method to implement an ""abstract"" method that you don't want to leave purely abstract.Definition TObject.cxx:1035; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::SysErrorvirtual void SysError(const char *method, const char *msgfmt,...) constIssue system error message.Definition TObject.cxx:1007; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::kInvalidObject@ kInvalidObjectif object ctor succeeded but object should not be usedDefinition TObject.h:72; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TObject::Infovirtual void Info(const char *method, const char *msgfmt,...) constIssue info message.Definition TObject.cxx:967; TOrdCollectionOrdered collection.Definition TOrdCollection.h:32; TPluginHandlerDefinition TPluginM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:162163,error,error,162163,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"r *&buf, Bool_t *x)Definition Bytes.h:278; tobufvoid tobuf(char *&buf, Bool_t x)Definition Bytes.h:55; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; UShort_tunsigned short UShort_tDefinition RtypesCore.h:40; Int_tint Int_tDefinition RtypesCore.h:45; Version_tshort Version_tDefinition RtypesCore.h:65; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Short_tshort Short_tDefinition RtypesCore.h:39; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; TBrowser.h; TBufferFile.h; TClass.h; TDirectoryFile.h; gDirectory#define gDirectoryDefinition TDirectory.h:384; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; TFile.h; gFile#define gFileDefinition TFile.h:347; TFree.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; offsetOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h offsetDefinition TGWin32VirtualXProxy.cxx:245; resultOption_t Option_t TPoint TPoint const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TKey_8cxx_source.html:55231,error,error,55231,doc/master/TKey_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TKey_8cxx_source.html,1,['error'],['error']
Availability,"r *err_msg =; 20107 ""Not enough memory for worker thread connection array"";; 20108 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20109 ; 20110 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20111 mg_snprintf(NULL,; 20112 NULL, /* No truncation check for error buffers */; 20113 error->text,; 20114 error->text_buffer_size,; 20115 ""%s"",; 20116 err_msg);; 20117 }; 20118 free_context(ctx);; 20119 pthread_setspecific(sTlsKey, NULL);; 20120 return NULL;; 20121 }; 20122 ; 20123#if defined(ALTERNATIVE_QUEUE); 20124 ctx->client_wait_events =; 20125 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20126 sizeof(ctx->client_wait_events[0]),; 20127 ctx);; 20128 if (ctx->client_wait_events == NULL) {; 20129 const char *err_msg = ""Not enough memory for worker event array"";; 20130 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20131 mg_free(ctx->worker_threadids);; 20132 ; 20133 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20134 mg_snprintf(NULL,; 20135 NULL, /* No truncation check for error buffers */; 20136 error->text,; 20137 error->text_buffer_size,; 20138 ""%s"",; 20139 err_msg);; 20140 }; 20141 free_context(ctx);; 20142 pthread_setspecific(sTlsKey, NULL);; 20143 return NULL;; 20144 }; 20145 ; 20146 ctx->client_socks =; 20147 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20148 sizeof(ctx->client_socks[0]),; 20149 ctx);; 20150 if (ctx->client_socks == NULL) {; 20151 const char *err_msg = ""Not enough memory for worker socket array"";; 20152 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20153 mg_free(ctx->client_wait_events);; 20154 mg_free(ctx->worker_threadids);; 20155 ; 20156 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20157 mg_snprintf(NULL,; 20158 NULL, /* No truncation check for error buffers */; 20159 error->text,; 20160 error->text_buffer_size,; 20161 ""%s"",; 20162 err_msg);; 20163 }; 20164 free_context(ctx);; 20165 pthread_setspecific(sTlsKey, NULL);; 20166 return NULL;; 20167 }; 20168 ; 20169 for (i = 0; (unsigned)i < ctx->cfg_worker_threads;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:601886,error,error,601886,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"r *err_msg =; 20108 ""Not enough memory for worker thread connection array"";; 20109 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20110 ; 20111 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20112 mg_snprintf(NULL,; 20113 NULL, /* No truncation check for error buffers */; 20114 error->text,; 20115 error->text_buffer_size,; 20116 ""%s"",; 20117 err_msg);; 20118 }; 20119 free_context(ctx);; 20120 pthread_setspecific(sTlsKey, NULL);; 20121 return NULL;; 20122 }; 20123 ; 20124#if defined(ALTERNATIVE_QUEUE); 20125 ctx->client_wait_events =; 20126 (void **)mg_calloc_ctx(ctx->cfg_worker_threads,; 20127 sizeof(ctx->client_wait_events[0]),; 20128 ctx);; 20129 if (ctx->client_wait_events == NULL) {; 20130 const char *err_msg = ""Not enough memory for worker event array"";; 20131 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20132 mg_free(ctx->worker_threadids);; 20133 ; 20134 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20135 mg_snprintf(NULL,; 20136 NULL, /* No truncation check for error buffers */; 20137 error->text,; 20138 error->text_buffer_size,; 20139 ""%s"",; 20140 err_msg);; 20141 }; 20142 free_context(ctx);; 20143 pthread_setspecific(sTlsKey, NULL);; 20144 return NULL;; 20145 }; 20146 ; 20147 ctx->client_socks =; 20148 (struct socket *)mg_calloc_ctx(ctx->cfg_worker_threads,; 20149 sizeof(ctx->client_socks[0]),; 20150 ctx);; 20151 if (ctx->client_socks == NULL) {; 20152 const char *err_msg = ""Not enough memory for worker socket array"";; 20153 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 20154 mg_free(ctx->client_wait_events);; 20155 mg_free(ctx->worker_threadids);; 20156 ; 20157 if ((error != NULL) && (error->text_buffer_size > 0)) {; 20158 mg_snprintf(NULL,; 20159 NULL, /* No truncation check for error buffers */; 20160 error->text,; 20161 error->text_buffer_size,; 20162 ""%s"",; 20163 err_msg);; 20164 }; 20165 free_context(ctx);; 20166 pthread_setspecific(sTlsKey, NULL);; 20167 return NULL;; 20168 }; 20169 ; 20170 for (i = 0; (unsigned)i < ctx->cfg_worker_threads;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:601919,error,error,601919,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"r *filename=""hist"", Option_t *option="""") const override;  Save the histogram as .csv, .tsv or .txt. ;  ; virtual void SetAxisColor (Color_t color=1, Option_t *axis=""X"");  Set color to draw the axis line and tick marks. ;  ; virtual void SetAxisRange (Double_t xmin, Double_t xmax, Option_t *axis=""X"");  Set the ""axis"" range. ;  ; virtual void SetBarOffset (Float_t offset=0.25);  Set the bar offset as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBarWidth (Float_t width=0.5);  Set the width of bars as fraction of the bin width for drawing mode ""B"". ;  ; virtual void SetBinError (Int_t bin, Double_t error);  Set the bin Error Note that this resets the bin eror option to be of Normal Type and for the non-empty bin the bin error is set by default to the square root of their content. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinError (Int_t binx, Int_t biny, Int_t binz, Double_t error);  See convention for numbering bins in TH1::GetBin. ;  ; virtual void SetBinErrorOption (EBinErrorOpt type);  ; virtual UInt_t SetCanExtend (UInt_t extendBitMask);  Make the histogram axes extendable / not extendable according to the bit mask returns the previous bit mask specifying which axes are extendable. ;  ; virtual void SetCellContent (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetCellError (Int_t binx, Int_t biny, Double_t content);  ; virtual void SetColors (Color_t linecolor=-1, Color_t markercolor=-1, Color_t fillcolor=-1);  Shortcut to set the three histogram colors with a single call. ;  ; virtual void SetContent (const Double_t *content);  Replace bin contents by the contents of array content. ;  ; virtual void SetContour (Int_t nlevels, const Double_t *levels=nullptr);  Set the number and values of contour levels. ;  ; virtual void SetContourLevel (Int_t level, Double_t value);  Set value for one contour level. ;  ; virtual void SetDirecto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile2D.html:33285,error,error,33285,doc/master/classTProfile2D.html,https://root.cern,https://root.cern/doc/master/classTProfile2D.html,2,['error'],['error']
Availability,"r *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsiste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:35356,error,error,35356,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,4,['error'],['error']
Availability,"r *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Double_t GetBinContent (const Int_t *idx) const;  Forwards to THnBase::GetBinContent() overload. ;  ; Double_t GetBinContent (Long64_t bin, Int_t *idx=nullptr) const override;  Return the content of the filled bin number ""idx"". ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  Get square of the error of bin addressed by linidx as \(\sum weight^{2}\) If errors are not enabled (via Sumw2() or CalculateErrors()) return contents. ;  ; Int_t GetChunkSize () const;  ; Long64_t GetNbins () const override;  ; Int_t GetNChunks () const;  ; Double_t GetSparseFractionBins () const;  Return the amount of filled bins over all bins. ;  ; Double_t GetSparseFractionMem () const;  Return the amount of used memory over memory that would be used by a non-sparse n-dimensional histogram. ;  ; TClass * IsA () const override;  ; THnSparse * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse.html:6479,error,error,6479,doc/master/classTHnSparse.html,https://root.cern,https://root.cern/doc/master/classTHnSparse.html,2,['error'],"['error', 'errors']"
Availability,"r *name[], Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple addressed by ""name"", allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Double_t *x) const override;  ; Long64_t GetBin (const Double_t *x, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional tuple x, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Long64_t GetBin (const Int_t *idx) const override;  ; Long64_t GetBin (const Int_t *idx, Bool_t allocate=kTRUE) override;  Get the bin index for the n dimensional coordinates coord, allocate one if it doesn't exist yet and ""allocate"" is true. ;  ; Double_t GetBinContent (const Int_t *idx) const;  Forwards to THnBase::GetBinContent() overload. ;  ; Double_t GetBinContent (Long64_t bin, Int_t *idx=nullptr) const override;  Return the content of the filled bin number ""idx"". ;  ; Double_t GetBinError2 (Long64_t linidx) const override;  Get square of the error of bin addressed by linidx as \(\sum weight^{2}\) If errors are not enabled (via Sumw2() or CalculateErrors()) return contents. ;  ; Int_t GetChunkSize () const;  ; Long64_t GetNbins () const override;  ; Int_t GetNChunks () const;  ; Double_t GetSparseFractionBins () const;  Return the amount of filled bins over all bins. ;  ; Double_t GetSparseFractionMem () const;  Return the amount of used memory over memory that would be used by a non-sparse n-dimensional histogram. ;  ; THnSparse * Projection (Int_t ndim, const Int_t *dim, Option_t *option="""") const;  ; TH3D * Projection (Int_t xDim, Int_t yDim, Int_t zDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH1D * Projection (Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; TH2D * Projection (Int_t yDim, Int_t xDim, Option_t *option="""") const;  Forwards to THnBase::Projection(). ;  ; THnSparse * Rebin (const Int_t *group) const;  ; THnSparse * Rebin (Int_t group) const;  ; void Reset (Option_t *optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparseT.html:3743,error,error,3743,doc/master/classTHnSparseT.html,https://root.cern,https://root.cern/doc/master/classTHnSparseT.html,2,['error'],"['error', 'errors']"
Availability,"r *url, Int_t debug, const char *script);; 98 static void Close(TApplication *app);; 99 ; 100public:; 101 TApplication(const char *appClassName, Int_t *argc, char **argv,; 102 void *options = nullptr, Int_t numOptions = 0);; 103 virtual ~TApplication();; 104 ; 105 void InitializeGraphics(Bool_t only_web = kFALSE);; 106 virtual void GetOptions(Int_t *argc, char **argv);; 107 TSignalHandler *GetSignalHandler() const { return fSigHandler; }; 108 virtual void SetEchoMode(Bool_t mode);; 109 TString GetSetup();; 110 void OpenForumTopic(const TString & type);; 111 void OpenGitHubIssue(const TString & type);; 112 void OpenInBrowser(const TString & url);; 113 void OpenReferenceGuideFor(const TString & strippedClass);; 114 virtual void HandleException(Int_t sig);; 115 virtual void HandleIdleTimer(); //*SIGNAL*; 116 virtual Bool_t HandleTermInput() { return kFALSE; }; 117 virtual void Init() { fAppImp->Init(); }; 118 virtual Longptr_t ProcessLine(const char *line, Bool_t sync = kFALSE, Int_t *error = nullptr);; 119 virtual Longptr_t ProcessFile(const char *file, Int_t *error = nullptr, Bool_t keep = kFALSE);; 120 virtual void Run(Bool_t retrn = kFALSE);; 121 virtual void SetIdleTimer(UInt_t idleTimeInSec, const char *command);; 122 virtual void RemoveIdleTimer();; 123 const char *GetIdleCommand() const { return fIdleCommand; }; 124 virtual void StartIdleing();; 125 virtual void StopIdleing();; 126 EExitOnException ExitOnException(EExitOnException opt = kExit);; 127 ; 128 virtual const char *ApplicationName() const { return fAppImp->ApplicationName(); }; 129 virtual void Show() { fAppImp->Show(); }; 130 virtual void Hide() { fAppImp->Hide(); }; 131 virtual void Iconify() { fAppImp->Iconify(); }; 132 virtual void Open() { fAppImp->Open(); }; 133 virtual void Raise() { fAppImp->Raise(); }; 134 virtual void Lower() { fAppImp->Lower(); }; 135 virtual Bool_t IsCmdThread() { return fAppImp ? fAppImp->IsCmdThread() : kTRUE; }; 136 virtual TApplicationImp *GetApplicationImp() { return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8h_source.html:4787,error,error,4787,doc/master/TApplication_8h_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8h_source.html,1,['error'],['error']
Availability,"r *varName=nullptr);  SamplingDistribution constructor. ;  ;  ~SamplingDistribution () override;  Destructor of SamplingDistribution. ;  ; void Add (const SamplingDistribution *other);  merge two sampling distributions ;  ; double CDF (double x) const;  calculate CDF as a special case of Integral(...) with lower limit equal to -inf ;  ; const std::vector< double > & GetSampleWeights () const;  Get the sampling weights. ;  ; const std::vector< double > & GetSamplingDistribution () const;  Get test statistics values. ;  ; Int_t GetSize () const;  size of samples ;  ; const TString GetVarName () const;  ; double Integral (double low, double high, bool normalize=true, bool lowClosed=true, bool highClosed=false) const;  numerical integral in these limits ;  ; double IntegralAndError (double &error, double low, double high, bool normalize=true, bool lowClosed=true, bool highClosed=false) const;  numerical integral in these limits including error estimation ;  ; double InverseCDF (double pvalue);  get the inverse of the Cumulative distribution function ;  ; double InverseCDF (double pvalue, double sigmaVariaton, double &inverseVariation);  get the inverse of the Cumulative distribution function together with the inverse based on sampling variation ;  ; double InverseCDFInterpolate (double pvalue);  get the inverse of the Cumulative distribution function ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:2254,error,error,2254,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,2,['error'],['error']
Availability,"r * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:2601,error,error,2601,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['error'],['error']
Availability,"r * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TGPicture (const char *name, Bool_t scaled=kFALSE);  ;  TGPicture (const char *name, Pixmap_t pxmap, Pixmap_t mask=0);  ctor. Important: both pixmaps pxmap and mask must be unique (not shared) ;  ; void Draw (Option_t *="""") override;  Default Draw method for all objects. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; PictureAttributes_t fAttributes;  picture attributes ;  ; Pixmap_t fMask;  picture mask pixmap ;  ; TString fName;  name of picture ;  ; Pixmap_t fPic;  picture pixmap ;  ; Bool_t fScaled;  kTRUE if picture is scaled ;  ;  Protected Attributes inherited from TRefCnt; UInt_t fRefs;  . Friends; class TGPicturePool;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TRefCnt; enum  EReferenceFlag { kStaticInit; };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGPicture.html:10285,mask,mask,10285,doc/master/classTGPicture.html,https://root.cern,https://root.cern/doc/master/classTGPicture.html,1,['mask'],['mask']
Availability,"r * GetDataPoolUrl () const;  ; virtual TFileCollection * GetDataSet (const char *dataset, const char *optStr="""");  Get a list of TFileInfo objects describing the files of the specified dataset. ;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; virtual TMap * GetDataSets (const char *uri="""", const char *optStr="""");  Lists all datasets that match given uri. ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; virtual TList * GetListOfQueries (Option_t *opt="""");  Ask the master for the list of queries. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of queries whose full results are kept in the remote sandbox. ;  ; TFileCollection * GetMissingFiles (TQueryResult *qr=0);  Get a TFileCollection with the files missing in the query described by 'qr' or the last query if qr is null (default). ;  ; Int_t GetNumberOfDrawQueries ();  ; Int_t GetNumberOfQueries ();  Number of queries processed by this session. ;  ; TObject * GetOutput (const char *name);  Get specified object that has been produced dur",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:9182,avail,available,9182,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['avail'],['available']
Availability,"r . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MINUIT2; » ROOT::Minuit2::MnApplication. class ROOT::Minuit2::MnApplication. application interface class for minimizers (migrad, simplex, Minimize,; Scan); User normally instantiates the derived class like ROOT::Minuit2::MnMigrad; for using Migrad for minimization. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~MnApplication(); voidAdd(const char*, double); voidAdd(const char* Name, double val, double err); voidAdd(const char* Name, double val, double err, double, double); const ROOT::Minuit2::MnUserCovariance&Covariance() const; doubleError(unsigned int) const; doubleError(const char*) const; vector<double>Errors() const; doubleExt2int(unsigned int, double) const; unsigned intExtOfInt(unsigned int) const; virtual const ROOT::Minuit2::FCNBase&Fcnbase() const; voidFix(unsigned int); voidFix(const char*); unsigned intIndex(const char*) const; doubleInt2ext(unsigned int, double) const; unsigned intIntOfExt(unsigned int) const; virtual const ROOT::Minuit2::ModularFunctionMinimizer&Minimizer() const; const vector<ROOT::Minuit2::MinuitParameter>&MinuitParameters() const; const char*Name(unsigned int) const; unsigned intNumOfCalls() const; virtual ROOT::Minuit2::FunctionMinimumoperator()(unsigned int maxfcn = 0, double tolerance = 0.1); const ROOT::Minuit2::MinuitParameter&Parameter(unsigned int i) const; const ROOT::Minuit2::MnUserParameters&Parameters() const; vector<double>Params() const; const ROOT::Minuit2::MnMachinePrecision&Precision() const; voidRelease(unsigned int); voidRelease(const char*); voidRemoveLimits(unsigned int); voidRemoveLimits(const char*); voidSetError(unsigned int, double); voidSetError(const char*, double); voidSetLimits(unsigned int, double, double); voidSetLimits(const char*, double, double); voidSetPrecision(double); voidSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html:1590,toler,tolerance,1590,root/html526/ROOT__Minuit2__MnApplication.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__MnApplication.html,5,['toler'],['tolerance']
Availability,"r :; i. a named entry-list in the input list or in the input data list; ii. a named entry-list in memory (in gDirectory); iii. the path of a file containing the entry-list to be used; In the case ii) and iii) the entry-list object(s) is(are) added to the input; data list.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(const char* selector, Long64_t nentries, Option_t* option = """"); Generic (non-data based) selector processing: the Process() method of the; specified selector (.C) or TSelector object is called 'n' times.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TDSet* dset, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TDSet) using the specified selector object.; Entry- or event-lists should be set in the data set object using; TDSet::SetEntryList.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(TFileCollection* fc, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process a data set (TFileCollection) using the specified selector object; The default tree is analyzed (i.e. the first one found). To specify another; tree, the default tree can be changed using TFileCollection::SetDefaultMetaData .; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Long64_t Process(const char* dsetname, TSelector* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0, TObject* enl = 0); Process with name of dataset and TSelector object. Long64_t Process(TSelector* selector, Long64_t nentries, Option_t* option = """"); Generic (non-data based) selector processing: the Process() method of the; specified selector is called 'n' times.; The return value is -1 in case of error and TSelector::GetStatus() in; in case of success. Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:55908,error,error,55908,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"r ; (; unsigned int ; ipoint); const. inline . Return a pointer to the error (or the inverse error) on the value for a given point depending on the type of data. . If the data contains only value error (e.g. from histograms) returns a pointer to the inverse of the errors.; If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a pointer to the corresponding value error (NOT the inverse).; If the data contains asymmetric errors return a pointer to the average error (NOT the inverse): 0.5(eu + el).; If the data does not contain errors return a nullptr. . Definition at line 249 of file BinData.h. ◆ GetAsymError(). void ROOT::Fit::BinData::GetAsymError ; (; unsigned int ; ipoint, . double & ; lowError, . double & ; highError . ); const. inline . Definition at line 307 of file BinData.h. ◆ GetBinUpEdgeComponent(). double ROOT::Fit::BinData::GetBinUpEdgeComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 502 of file BinData.h. ◆ GetBinUpEdgeCoordinates(). void ROOT::Fit::BinData::GetBinUpEdgeCoordinates ; (; unsigned int ; ipoint, . double * ; x . ); const. inline . Thread save version of function retrieving the bin up-edge in case of multidimensions. ; Definition at line 532 of file BinData.h. ◆ GetCoordErrorComponent(). double ROOT::Fit::BinData::GetCoordErrorComponent ; (; unsigned int ; ipoint, . unsigned int ; icoord . ); const. inline . returns a single coordinate error component of a point. ; This function is threadsafe in contrast to Coords(...) and can easily get vectorized by the compiler in loops running over the ipoint-index. ; Definition at line 395 of file BinData.h. ◆ GetErrorType(). ErrorType ROOT::Fit::BinData::GetErrorType ; (; ); const. inline . retrieve the errortype ; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:22186,error,error,22186,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['error'],['error']
Availability,"r = (TColor*) iColor())); 2605 color->Allocate();; 2606}; 2607 ; 2608////////////////////////////////////////////////////////////////////////////////; 2609/// \brief Static function creating a color palette based on an input text file.; 2610///; 2611/// Every color in the file will take the same amount of space in the palette.; 2612///; 2613/// \see https://doi.org/10.1038/s41467-020-19160-7; 2614/// \note This function is designed to load into ROOT the colour-vision; 2615/// deficiency friendly and perceptually uniform colour maps specially designed; 2616/// in https://doi.org/10.5281/zenodo.4491293, namely the .txt files stored; 2617/// in the subfolders of ScientificColourMaps7.zip, e.g. batlow/batlow.txt; 2618///; 2619/// \param fileName: Name of a .txt file (ASCII) containing three floats per; 2620/// line, separated by spaces, namely the r g b fractions of the color, each; 2621/// value being in the range [0,1].; 2622/// \param alpha the global opacity for all colors within this palette; 2623/// \return a positive value on success and -1 on error.; 2624/// \author Fernando Hueso-González; 2625Int_t TColor::CreateColorTableFromFile(TString fileName, Float_t alpha); 2626{; 2627 std::ifstream f(fileName.Data());; 2628 if (!f.good()) {; 2629 ::Error(""TColor::CreateColorPalette(const TString)"", ""%s does not exist or cannot be opened"", fileName.Data());; 2630 return -1;; 2631 }; 2632 ; 2633 Int_t nLines = 0;; 2634 Float_t r, g, b;; 2635 std::vector<Float_t> reds, greens, blues;; 2636 while (f >> r >> g >> b) {; 2637 nLines++;; 2638 if (r < 0. || r > 1.) {; 2639 ::Error(""TColor::CreateColorPalette(const TString)"", ""Red value %f outside [0,1] on line %d of %s "", r,; 2640 nLines, fileName.Data());; 2641 f.close();; 2642 return -1;; 2643 }; 2644 if (g < 0. || g > 1.) {; 2645 ::Error(""TColor::CreateColorPalette(const TString)"", ""Green value %f outside [0,1] on line %d of %s "", g,; 2646 nLines, fileName.Data());; 2647 f.close();; 2648 return -1;; 2649 }; 2650 if (b < 0. |",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:95312,error,error,95312,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['error'],['error']
Availability,"r = 0). Int_t LoadLibraryMap(const char* rootmapfile = 0). Int_t RescanLibraryMap(). Int_t ReloadAllSharedLibraryMaps(). Int_t UnloadAllSharedLibraryMaps(). Int_t UnloadLibraryMap(const char* library). Long_t ProcessLine(const char* line, TInterpreter::EErrorCode* error = 0). Long_t ProcessLineSynch(const char* line, TInterpreter::EErrorCode* error = 0). void PrintIntro(). Int_t SetClassSharedLibs(const char* cls, const char* libs). void SetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc). void ResetAll(). void ResetGlobals(). void ResetGlobalVar(void* obj). void RewindDictionary(). Int_t DeleteGlobal(void* obj). Int_t DeleteVariable(const char* name). void SaveContext(). void SaveGlobalsContext(). void UpdateListOfGlobals(). void UpdateListOfGlobalFunctions(). void UpdateListOfTypes(). void SetClassInfo(TClass* cl, Bool_t reload = kFALSE). Bool_t CheckClassInfo(const char* name, Bool_t autoload = kTRUE). Long_t Calc(const char* line, TInterpreter::EErrorCode* error = 0). void CreateListOfBaseClasses(TClass* cl). void CreateListOfDataMembers(TClass* cl). void CreateListOfMethods(TClass* cl). void CreateListOfMethodArgs(TFunction* m). void UpdateListOfMethods(TClass* cl). TString GetMangledName(TClass* cl, const char* method, const char* params). TString GetMangledNameWithPrototype(TClass* cl, const char* method, const char* proto). const char * GetInterpreterTypeName(const char* name, Bool_t full = kFALSE). void * GetInterfaceMethod(TClass* cl, const char* method, const char* params). void * GetInterfaceMethodWithPrototype(TClass* cl, const char* method, const char* proto). void Execute(const char* function, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0). void Execute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0). Long_t ExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0). Bool_t IsEr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TInterpreter.html:19915,error,error,19915,root/html534/TInterpreter.html,https://root.cern,https://root.cern/root/html534/TInterpreter.html,1,['error'],['error']
Availability,"r = 25); virtual~TFitter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Double_tChisquare(Int_t npar, Double_t* params) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual Int_tExecuteCommand(const char* command, Double_t* args, Int_t nargs); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFitChisquare(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); virtual voidFitChisquareI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); virtual voidFitLikelihood(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); virtual voidFitLikelihoodI(Int_t& npar, Double_t* gin, Double_t& f, Double_t* u, Int_t flag); static TVirtualFitter*TVirtualFitter::Fitter(TObject* obj, Int_t maxpar = 25); virtual voidFixParameter(Int_t ipar); virtual voidGetConfidenceI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFitter.html:1344,error,error,1344,root/html528/TFitter.html,https://root.cern,https://root.cern/root/html528/TFitter.html,4,['error'],['error']
Availability,"r = false;; 225 ; 226 // this functions use the TVirtualFitter; 227 if (special != 0 && !fitOption.Bound && !linear) {; 228 if (special == 100) ROOT::Fit::InitGaus (*fitdata,f1); // gaussian; 229 else if (special == 110 || special == 112) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D gaussians ( xygaus or bigaus); 230 else if (special == 400) ROOT::Fit::InitGaus (*fitdata,f1); // landau (use the same); 231 else if (special == 410) ROOT::Fit::Init2DGaus(*fitdata,f1); // 2D landau (use the same); 232 ; 233 else if (special == 200) ROOT::Fit::InitExpo (*fitdata, f1); // exponential; 234 ; 235 }; 236 ; 237 ; 238 // set the fit function; 239 // if option grad is specified use gradient; 240 if ( (linear || fitOption.Gradient) ); 241 fitter->SetFunction(ROOT::Math::WrappedMultiTF1(*f1));; 242#ifdef R__HAS_VECCORE; 243 else if(f1->IsVectorized()); 244 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunctionTempl<ROOT::Double_v> &>(ROOT::Math::WrappedMultiTF1Templ<ROOT::Double_v>(*f1)));; 245#endif; 246 else; 247 fitter->SetFunction(static_cast<const ROOT::Math::IParamMultiFunction &>(ROOT::Math::WrappedMultiTF1(*f1) ) );; 248 ; 249 // error normalization in case of zero error in the data; 250 if (fitdata->GetErrorType() == ROOT::Fit::BinData::kNoError) fitConfig.SetNormErrors(true);; 251 // error normalization also in case of W or WW options (weights = 1); 252 if (fitdata->Opt().fErrors1) fitConfig.SetNormErrors(true);; 253 // normalize errors also in case you are fitting a Ndim histo with a N-1 function; 254 if (int(fitdata->NDim()) == hdim -1 ) fitConfig.SetNormErrors(true);; 255 ; 256 ; 257 // here need to get some static extra information (like max iterations, error def, etc...); 258 ; 259 ; 260 // parameter settings and transfer the parameters values, names and limits from the functions; 261 // is done automatically in the Fitter.cxx; 262 for (int i = 0; i < npar; ++i) {; 263 ROOT::Fit::ParameterSettings & parSettings = fitConfig.ParSettings(i);; 264 ; 265 // ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:9492,error,error,9492,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,2,['error'],['error']
Availability,"r = kTRUE; // for polynomial functions; 161 // do not use linear fitter in these case; 162 if (fitOption.Bound || fitOption.Like || fitOption.Errors || fitOption.Gradient || fitOption.More || fitOption.User|| fitOption.Integral || fitOption.Minuit); 163 linear = kFALSE;; 164 ; 165 // create an empty TFitResult; 166 std::shared_ptr<TFitResult> tfr(new TFitResult() );; 167 // create the fitter from an empty fit result; 168 std::shared_ptr<ROOT::Fit::Fitter> fitter(new ROOT::Fit::Fitter(std::static_pointer_cast<ROOT::Fit::FitResult>(tfr) ) );; 169 ROOT::Fit::FitConfig & fitConfig = fitter->Config();; 170 ; 171 // create options; 172 ROOT::Fit::DataOptions opt;; 173 opt.fIntegral = fitOption.Integral;; 174 opt.fUseRange = fitOption.Range;; 175 opt.fExpErrors = fitOption.PChi2; // pearson chi2 with expected errors; 176 if (fitOption.Like || fitOption.PChi2) opt.fUseEmpty = true; // use empty bins in log-likelihood fits; 177 if (special==300) opt.fCoordErrors = false; // no need to use coordinate errors in a pol0 fit; 178 if (fitOption.NoErrX) opt.fCoordErrors = false; // do not use coordinate errors when requested; 179 if (fitOption.W1 ) opt.fErrors1 = true;; 180 if (fitOption.W1 > 1) opt.fUseEmpty = true; // use empty bins with weight=1; 181 if (fitOption.PChi2 == 1) {; 182 opt.fErrors1 = true; // we are not using errors in chi2, it is like setting = 1; 183 } else if (fitOption.PChi2 == 2) {; 184 opt.fErrors1 = false; // we need the errors in weighted likelihood fit; 185 }; 186 ; 187 if (fitOption.BinVolume) {; 188 opt.fBinVolume = true; // scale by bin volume; 189 if (fitOption.BinVolume == 2) opt.fNormBinVolume = true; // scale by normalized bin volume; 190 }; 191 ; 192 if (opt.fUseRange) {; 193#ifdef DEBUG; 194 printf(""use range \n"" );; 195#endif; 196 HFit::GetFunctionRange(*f1,range);; 197 }; 198#ifdef DEBUG; 199 printf(""range size %d\n"", range.Size(0) );; 200 if (range.Size(0)) {; 201 double x1; double x2; range.GetRange(0,x1,x2);; 202 printf("" range in x = [%f,%f] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:6403,error,errors,6403,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['error'],['errors']
Availability,"r == -1) {; ::Error(""add_ellipse"", ""failed to find a new color index for a gradient fill"");; return false;; }; ; TEllipse * const newEllipse = new TEllipse(xC, yC, r, r);; newEllipse->SetFillColor(newColor);; newEllipse->Draw();; ; return true;; }; ; //______________________________________________________________________; void radialgradients(bool gl = true); {; gRandom->SetSeed(4357);; ; gStyle->SetCanvasPreferGL(gl);; ; auto cnv = new TCanvas(""radialgradients"", ""radial gradients"", 800, 800);; if (!cnv->UseGL() && !cnv->IsWeb()); ::Warning(""radialgradients"", ""This macro requires either OpenGL or Web canvas to correctly handle gradient colors"");; ; for (unsigned i = 0; i < 100; ++i); add_ellipse(gRandom->Rndm(), gRandom->Rndm(), 0.5 * gRandom->Rndm());; }; Color_tshort Color_tDefinition RtypesCore.h:85; Double_tdouble Double_tDefinition RtypesCore.h:59; TCanvas.h; TColorGradient.h; TEllipse.h; TError.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; gROOT#define gROOTDefinition TROOT.h:406; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; colorsColor * colorsDefinition X3DBuffer.c:21; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TColor::GetRadialGradientstatic Int_t GetRadialGradient(Double_t r, const std::vector< Int_t > &colors, const std::vector< Double_t > &positions={})Static function: Returns the rad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/gl_2radialgradients_8C.html:2501,error,error,2501,doc/master/gl_2radialgradients_8C.html,https://root.cern,https://root.cern/doc/master/gl_2radialgradients_8C.html,1,['error'],['error']
Availability,"r == fObjectVersionRepository.end()) {; 5447 // No, it wasn't, skip special version handling.; 5448 //Error(""Destructor2"", ""Attempt to delete unregistered object of class '%s' at address %p!"", GetName(), p);; 5449 inRepo = kFALSE;; 5450 } else {; 5451 //objVer = iter->second;; 5452 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5453 objVer = iter->second;; 5454 if (objVer == fClassVersion) {; 5455 currentVersion = kTRUE;; 5456 break;; 5457 }; 5458 }; 5459 }; 5460 }; 5461 ; 5462 if (!inRepo || currentVersion) {; 5463 // The object was allocated using code for the same class version; 5464 // as is loaded now. We may proceed without worry.; 5465 TVirtualStreamerInfo* si = GetStreamerInfo();; 5466 if (si) {; 5467 si->Destructor(p, dtorOnly);; 5468 } else {; 5469 Error(""Destructor"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct emulated object!"", GetName(), fClassVersion, p);; 5470 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5471 Int_t i = fStreamerInfo->LowerBound();; 5472 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5473 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5474 if (fStreamerInfo->At(i) != nullptr) {; 5475 Error(""Destructor"", ""Doing Dump() ..."");; 5476 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5477 }; 5478 }; 5479 }; 5480 } else {; 5481 // The loaded class version is not the same as the version of the code; 5482 // which was used to allocate this object. The best we can do is use; 5483 // the TVirtualStreamerInfo to try to free up some of the allocated memory.; 5484 TVirtualStreamerInfo* si = (TVirtualStreamerInfo*) fStreamerInfo->At(objVer);; 5485 if (si) {; 5486 si->Destructor(p, dtorOnly);; 5487 } else {; 5488 Error(""Destructor"", ""No streamer info available for class '%s' version %d, cannot destruct object at addr: %p"", GetName(), objVer, p);; 5489 Error(""Destructor"", ""length of fStreamerIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:209027,avail,available,209027,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"r == fObjectVersionRepository.end()) {; 5514 // No, it wasn't, skip special version handling.; 5515 //Error(""Destructor2"", ""Attempt to delete unregistered object of class '%s' at address %p!"", GetName(), p);; 5516 inRepo = kFALSE;; 5517 } else {; 5518 //objVer = iter->second;; 5519 for (; (iter != fObjectVersionRepository.end()) && (iter->first == p); ++iter) {; 5520 objVer = iter->second;; 5521 if (objVer == fClassVersion) {; 5522 currentVersion = kTRUE;; 5523 break;; 5524 }; 5525 }; 5526 }; 5527 }; 5528 ; 5529 if (!inRepo || currentVersion) {; 5530 // The object was allocated using code for the same class version; 5531 // as is loaded now. We may proceed without worry.; 5532 TVirtualStreamerInfo* si = GetStreamerInfo();; 5533 if (si) {; 5534 si->Destructor(p, dtorOnly);; 5535 } else {; 5536 Error(""Destructor"", ""No streamer info available for class '%s' version %d at address %p, cannot destruct emulated object!"", GetName(), fClassVersion, p);; 5537 Error(""Destructor"", ""length of fStreamerInfo is %d"", fStreamerInfo->GetSize());; 5538 Int_t i = fStreamerInfo->LowerBound();; 5539 for (Int_t v = 0; v < fStreamerInfo->GetSize(); ++v, ++i) {; 5540 Error(""Destructor"", ""fStreamerInfo->At(%d): %p"", i, fStreamerInfo->At(i));; 5541 if (fStreamerInfo->At(i) != nullptr) {; 5542 Error(""Destructor"", ""Doing Dump() ..."");; 5543 ((TVirtualStreamerInfo*)fStreamerInfo->At(i))->Dump();; 5544 }; 5545 }; 5546 }; 5547 } else {; 5548 // The loaded class version is not the same as the version of the code; 5549 // which was used to allocate this object. The best we can do is use; 5550 // the TVirtualStreamerInfo to try to free up some of the allocated memory.; 5551 TVirtualStreamerInfo* si = (TVirtualStreamerInfo*) fStreamerInfo->At(objVer);; 5552 if (si) {; 5553 si->Destructor(p, dtorOnly);; 5554 } else {; 5555 Error(""Destructor"", ""No streamer info available for class '%s' version %d, cannot destruct object at addr: %p"", GetName(), objVer, p);; 5556 Error(""Destructor"", ""length of fStreamerIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:211778,avail,available,211778,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['avail'],['available']
Availability,"r > 1); 1327 upper = 1.;; 1328 }; 1329 } else {; 1330 // when not using weights (all cases) or in case of Poisson ratio with weights; 1331 if (t != 0.); 1332 eff = ((Double_t)p) / t;; 1333 ; 1334 low = pBound(t, p, conf, false);; 1335 upper = pBound(t, p, conf, true);; 1336 }; 1337 }; 1338 // treat as Poisson ratio; 1339 if (bPoissonRatio) {; 1340 Double_t ratio = eff / (1 - eff);; 1341 // take the intervals in eff as intervals in the Poisson ratio; 1342 low = low / (1. - low);; 1343 upper = upper / (1. - upper);; 1344 eff = ratio;; 1345 if (bEffective) {; 1346 // scale result by the ratio of the weight; 1347 eff *= wratio;; 1348 low *= wratio;; 1349 upper *= wratio;; 1350 }; 1351 }; 1352 // Set the point center and its errors; 1353 if (TMath::Finite(eff)) {; 1354 SetPoint(npoint, pass->GetBinCenter(b), eff);; 1355 SetPointEX(npoint, pass->GetBinCenter(b) - pass->GetBinLowEdge(b),; 1356 pass->GetBinLowEdge(b) - pass->GetBinCenter(b) + pass->GetBinWidth(b));; 1357 SetPointEY(npoint, 0, eff - low, upper - eff);; 1358 npoint++; // we have added a point to the graph; 1359 }; 1360 }; 1361 ; 1362 Set(npoint); // tell the graph how many points we've really added; 1363 if (npoint < nbins); 1364 Warning(""Divide"", ""Number of graph points is different than histogram bins - %d points have been skipped"",; 1365 nbins - npoint);; 1366 ; 1367 if (bVerbose) {; 1368 Info(""Divide"", ""made a graph with %d points from %d bins"", npoint, nbins);; 1369 Info(""Divide"", ""used confidence level: %.2lf\n"", conf);; 1370 if (bIsBayesian); 1371 Info(""Divide"", ""used prior probability ~ beta(%.2lf,%.2lf)"", alpha, beta);; 1372 Print();; 1373 }; 1374}; 1375 ; 1376////////////////////////////////////////////////////////////////////////////////; 1377/// Compute Range.; 1378 ; 1379void TGraphMultiErrors::ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const; 1380{; 1381 TGraph::ComputeRange(xmin, ymin, xmax, ymax);; 1382 ; 1383 for (Int_t i = 0; i < fNpoints; i++) {; 1384 if (fX",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html:46315,error,errors,46315,doc/master/TGraphMultiErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8cxx_source.html,1,['error'],['errors']
Availability,"r Functions inherited from RooAbsCachedReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCachedReal.html:47028,error,error,47028,doc/master/classRooCachedReal.html,https://root.cern,https://root.cern/doc/master/classRooCachedReal.html,6,['error'],['error']
Availability,"r Functions inherited from RooAbsHiddenReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUnblindCPAsymVar.html:47508,error,error,47508,doc/master/classRooUnblindCPAsymVar.html,https://root.cern,https://root.cern/doc/master/classRooUnblindCPAsymVar.html,8,['error'],['error']
Availability,"r Functions |; Private Attributes |; Friends |; List of all members ; TPSocket Class Reference. . Definition at line 33 of file TPSocket.h. Public Member Functions;  TPSocket (const char *host, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (const char *host, Int_t port, Int_t size, TSocket *sock);  Create a parallel socket on a connection already opened via TSocket sock. ;  ;  TPSocket (TInetAddress address, const char *service, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ;  TPSocket (TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize=-1);  Create a parallel socket. ;  ; virtual ~TPSocket ();  Cleanup the parallel socket. ;  ; void Close (Option_t *opt="""") override;  Close a parallel socket. ;  ; Int_t GetDescriptor () const override;  Return socket descriptor. ;  ; Int_t GetErrorCode () const;  Returns error code. ;  ; TInetAddress GetLocalInetAddress () override;  Return internet address of local host to which the socket is bound. ;  ; Int_t GetOption (ESockOptions opt, Int_t &val) override;  Get socket options. Returns -1 in case of error. ;  ; Int_t GetSize () const;  ; TClass * IsA () const override;  ; Bool_t IsValid () const override;  ; Int_t Recv (char *mess, Int_t max) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (char *mess, Int_t max, Int_t &kind) override;  Receive a character string message of maximum max length. ;  ; Int_t Recv (Int_t &status, Int_t &kind) override;  Receives a status and a message type. ;  ; Int_t Recv (TMessage *&mess) override;  Receive a TMessage object. ;  ; Int_t RecvRaw (void *buffer, Int_t length, ESendRecvOptions opt=kDefault) override;  Send a raw buffer of specified length. ;  ; Int_t Send (const char *mess, Int_t kind=kMESS_STRING) override;  Send a character string buffer. ;  ; Int_t S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:1229,error,error,1229,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['error'],['error']
Availability,"r Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; ROOT::Math::GSLMultiRootFinder Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multidimensional ROOT finding. ; Class for Multidimensional root finding algorithms bassed on GSL. ; This class is used to solve a non-linear system of equations:; f1(x1,....xn) = 0 f2(x1,....xn) = 0 .................. fn(x1,....xn) = 0; See the GSL online manual for information on the GSL MultiRoot finding algorithms; The available GSL algorithms require the derivatives of the supplied functions or not (they are computed internally by GSL). In the first case the user needs to provide a list of multidimensional functions implementing the gradient interface (ROOT::Math::IMultiGradFunction) while in the second case it is enough to supply a list of functions impelmenting the ROOT::Math::IMultiGenFunction interface. The available algorithms requiring derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridSJ with name ""HybridSJ"": modified Powell's hybrid method as implemented in HYBRJ in MINPACK . ROOT::Math::GSLMultiRootFinder::kHybridJ with name ""HybridJ"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kNewton with name ""Newton"": Newton method . ROOT::Math::GSLMultiRootFinder::kGNewton with name ""GNewton"": modified Newton method . The algorithms without derivatives (see also the GSL documentation ) are the followings: . ROOT::Math::GSLMultiRootFinder::kHybridS with name ""HybridS"": same as HybridSJ but using finate difference approximation for the derivatives . ROOT::Math::GSLMultiRootFinder::kHybrid with name ""Hybrid"": unscaled version of the previous algorithm . ROOT::Math::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:1142,avail,available,1142,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,1,['avail'],['available']
Availability,r MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor from; the defaultErrorLevel() method of the input function. void setEps(Double_t eps); Change MINUIT epsilon. void setOffsetting(Bool_t flag); Enable internal likelihood offsetting for enhanced numeric precision. RooFitResult* fit(const char* options); Parse traditional RooAbsPdf::fitTo driver options. s - Run Hesse first to estimate initial step size; m - Run Migrad only; h - Run Hesse to estimate errors; v - Verbose mode; l - Log parameters after each Minuit steps to file; t - Activate profile timer; r - Save fit result; 0 - Run Migrad with strategy 0. Int_t migrad(); Execute MIGRAD. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t hesse(); Execute HESSE. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(); Execute MINOS. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t minos(const RooArgSet& minosParamList); Execute MINOS for given list of parameters. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t seek(); Execute SEEK. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t simplex(); Execute SIMPLEX. Changes in parameter values; and calculated errors are automatically; propagated back the RooRealVars representing; the floating parameters in the MINUIT operation. Int_t improve(); Execute IMPROVE. Changes in parameter values; and calculat,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:10422,error,errors,10422,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,3,['error'],['errors']
Availability,"r NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence; it is not again checked in each of these subsequet calls.. Float_t EvaluateMulticlass(UInt_t clsNumber, const TString& methodTag, Double_t aux = 0); evaluates the multiclass MVA. TMVA::IMethod* FindMVA(const TString& methodTag); return pointer to method with tag ""methodTag"". TMVA::MethodCuts* FindCutsMVA(const TString& methodTag); special function for Cuts to avoid dynamic_casts in ROOT macros,; which are not properly handled by CINT. Double_t GetProba(const TString& methodTag, Double_t ap_sig = 0.5, Double_t mvaVal = -9999999); evaluates probability of MVA for given set of input variables. Double_t GetRarity(const TString& methodTag, Double_t mvaVal = -9999999); evaluates the MVA's rarity. void DecodeVarNames( const std::string& varNames ); decodes ""name1:name2:..."" form. void DecodeVarNames(const TString& varNames); decodes ""name1:name2:..."" form. Reader(const TString& theOption = """", Bool_t verbose = 0); without prior specification of variables. Double_t GetMVAError() const; returns error on MVA response for given event; NOTE: must be called AFTER ""EvaluateMVA(...)"" call !. { return fMvaEventError; }. Double_t GetMVAErrorLower() const; { return fMvaEventError; }. Double_t GetMVAErrorUpper() const; { return fMvaEventErrorUpper; }. const char* GetName() const; accessors. { return ""Reader""; }. Bool_t Verbose( void ); { return fVerbose; }. void SetVerbose(Bool_t v); { fVerbose = v; }. const DataSetInfo& DataInfo() const; { return fDataSetInfo; }. DataSetInfo& DataInfo(); { return fDataSetInfo; }. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__Reader.html:15709,error,error,15709,root/html604/TMVA__Reader.html,https://root.cern,https://root.cern/root/html604/TMVA__Reader.html,1,['error'],['error']
Availability,"r NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence; it is not again checked in each of these subsequet calls.. Float_t EvaluateMulticlass(UInt_t clsNumber, const TString& methodTag, Double_t aux = 0); evaluates the multiclass MVA. TMVA::IMethod* FindMVA(const TString& methodTag); return pointer to method with tag ""methodTag"". TMVA::MethodCuts* FindCutsMVA(const TString& methodTag); special function for Cuts to avoid dynamic_casts in ROOT macros,; which are not properly handled by CINT. Double_t GetProba(const TString& methodTag, Double_t ap_sig = 0.5, Double_t mvaVal = -9999999); evaluates probability of MVA for given set of input variables. Double_t GetRarity(const TString& methodTag, Double_t mvaVal = -9999999); evaluates the MVA's rarity. void DecodeVarNames( const std::string& varNames ); decodes ""name1:name2:..."" form. void DecodeVarNames(const TString& varNames); decodes ""name1:name2:..."" form. Reader(const TString& theOption = """", Bool_t verbose = 0); without prior specification of variables. Double_t GetMVAError() const; returns error on MVA response for given event; NOTE: must be called AFTER ""EvaluateMVA(...)"" call !. { return fMvaEventError; }. Double_t GetMVAErrorLower() const; { return fMvaEventError; }. Double_t GetMVAErrorUpper() const; { return fMvaEventErrorUpper; }. const char* GetName() const; accessors. { return ""Reader""; }. Bool_t Verbose( void ); { return fVerbose; }. void SetVerbose(Bool_t v); { fVerbose = v; }. const DataSetInfo& DataInfo() const; { return fDataSetInfo; }. DataSetInfo& DataInfo(); { return fDataSetInfo; }. » Author: Andreas Hoecker, Peter Speckmayer, Joerg Stelzer, Helge Voss, Kai Voss, Eckhard von Toerne, Jan Therhaag » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Reader.html:15701,error,error,15701,root/html602/TMVA__Reader.html,https://root.cern,https://root.cern/root/html602/TMVA__Reader.html,1,['error'],['error']
Availability,"r PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); Remove 'incpath' from the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. void HandleLibIncP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:69143,error,error,69143,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['error'],['error']
Availability,"r PROOF protocol > 8.; Returns 0 in case of success and -1 in case of error. Int_t Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); Load the specified macro on master, workers and, if notOnClient is; kFALSE, on the client. The macro file is uploaded if new or updated.; Additional files to be uploaded (or updated, if needed) can be specified; after a comma, e.g. ""mymacro.C+,thisheader.h,thatheader.h"".; If existing in the same directory, a header basename(macro).h or .hh, is also; uploaded.; The default is to load the macro also on the client; notOnClient can be used; to avoid loading on the client.; On masters, if uniqueWorkers is kTRUE, the macro is loaded on unique workers; only, and collection is not done; if uniqueWorkers is kFALSE, collection; from the previous request is done, and broadcasting + collection from the; other workers is done.; The wrks arg can be used on the master to limit the set of workers.; Returns 0 in case of success and -1 in case of error. Int_t AddDynamicPath(const char* libpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'libpath' to the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t AddIncludePath(const char* incpath, Bool_t onClient = kFALSE, TList* wrks = 0, Bool_t doCollect = kTRUE); Add 'incpath' to the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveDynamicPath(const char* libpath, Bool_t onClient = kFALSE); Remove 'libpath' from the lib path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; Return 0 on success, -1 otherwise. Int_t RemoveIncludePath(const char* incpath, Bool_t onClient = kFALSE); Remove 'incpath' from the inc path search.; Multiple paths can be specified at once separating them with a comma or; a blank.; R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:79008,error,error,79008,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['error'],['error']
Availability,"r PROOF-based analysis facilities. afs; OFF; AFS support, requires AFS libs and objects. alien; ON; AliEn support, requires libgapiUI from ALICE. all; OFF; Enable all optional components. asimage; ON; Image processing support, requires libAfterImage. astiff; ON; Include tiff support in image processing. bonjour; ON; Bonjour support, requires libdns_sd and/or Avahi. builtin_afterimage; ON; Built included libAfterImage, or use system libAfterImage. builtin_fftw3; OFF; Built the FFTW3 library internally (downloading tarfile from the Web) (ROOT 6 only). builtin_ftgl; ON; Built included libFTGL, or use system libftgl. builtin_freetype; OFF; Built included libfreetype, or use system libfreetype. builtin_glew; ON; Built included libGLEW, or use system libGLEW. builtin_pcre; OFF; Built included libpcre, or use system libpcre. builtin_zlib; OFF; Built included libz, or use system libz. builtin_lzma; OFF; Built included liblzma, or use system liblzma. builtin_davix; OFF; Built the Davix library internally (downloading tarfile from the Web). builtin_gsl; OFF; Built the GSL library internally (downloading tarfile from the Web). builtin_cfitsio; OFF; Built the FITSIO library internally (downloading tarfile from the Web). builtin_xrootd; OFF; Built the XROOTD internally (downloading tarfile from the Web). builtin_llvm; ON; Built the LLVM internally. builtin_tbb; OFF; Built the TBB internally. cxx11; ON; Build using C++11 compatible mode, requires gcc > 4.7.x or clang. cxx14; OFF; Build using C++14 compatible mode, requires gcc > 4.9.x or clang. cxx17; OFF; Build using C++17 compatible mode, requires gcc > 7.1.x or clang. libcxx; OFF; Build using libc++, requires cxx11 option (MacOS X only, for the time being). castor; ON; CASTOR support, requires libshift from CASTOR >= 1.5.2. ccache; OFF; Enable ccache usage for speeding up builds. chirp; ON; Chirp support (Condor remote I/O), requires libchirp_client. cling; ON; Enable new CLING C++ interpreter. cocoa; *; Use native Cocoa/Quartz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:8036,down,downloading,8036,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['down'],['downloading']
Availability,"r Profile3D histograms.; 85 ; 86TProfile3D::~TProfile3D(); 87{; 88}; 89 ; 90////////////////////////////////////////////////////////////////////////////////; 91/// Normal Constructor for Profile histograms.; 92///; 93/// The first eleven parameters are similar to TH3D::TH3D.; 94/// All values of t are accepted at filling time.; 95/// To fill a profile3D histogram, one must use TProfile3D::Fill function.; 96///; 97/// Note that when filling the profile histogram the function Fill; 98/// checks if the variable t is between fTmin and fTmax.; 99/// If a minimum or maximum value is set for the T scale before filling,; 100/// then all values below tmin or above tmax will be discarded.; 101/// Setting the minimum or maximum value for the T scale before filling; 102/// has the same effect as calling the special TProfile3D constructor below; 103/// where tmin and tmax are specified.; 104///; 105/// H(I,J,K) is printed as the cell contents. The errors computed are s(I,J,K) if CHOPT='S'; 106/// (spread option), or e(I,J,K) if CHOPT=' ' (error on mean).; 107///; 108/// See TProfile3D::BuildOptions for explanation of parameters; 109///; 110/// see other constructors below with all possible combinations of; 111/// fix and variable bin size like in TH3D.; 112 ; 113TProfile3D::TProfile3D(const char *name,const char *title,Int_t nx,Double_t xlow,Double_t xup,Int_t ny,Double_t ylow,Double_t yup,Int_t nz, Double_t zlow,Double_t zup,Option_t *option); 114 : TH3D(name,title,nx,xlow,xup,ny,ylow,yup,nz,zlow,zup); 115{; 116 BuildOptions(0,0,option);; 117 if (xlow >= xup || ylow >= yup || zlow >= zup) SetBuffer(fgBufferSize);; 118}; 119 ; 120////////////////////////////////////////////////////////////////////////////////; 121/// Create a 3-D Profile with variable bins in X , Y and Z.; 122 ; 123TProfile3D::TProfile3D(const char *name,const char *title,Int_t nx,const Double_t *xbins,Int_t ny,const Double_t *ybins,Int_t nz,const Double_t *zbins,Option_t *option); 124 : TH3D(name,title,nx,xbins,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:4234,error,errors,4234,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,2,['error'],"['error', 'errors']"
Availability,"r Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:40275,error,error,40275,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,2,['error'],['error']
Availability,"r Window Shape Extension adds non-rectangular windows to the System. ; This allows for making shaped (partially transparent) windows ; Reimplemented from TVirtualX.; Definition at line 1551 of file TGCocoa.mm. ◆ Streamer(). void TGCocoa::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TGQuartz. ◆ StreamerNVirtual(). void TGCocoa::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 476 of file TGCocoa.h. ◆ SubtractRegion(). void TGCocoa::SubtractRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Subtracts regb from rega and stores the results in result. ; Reimplemented from TVirtualX.; Definition at line 4344 of file TGCocoa.mm. ◆ SupportsExtension(). Int_t TGCocoa::SupportsExtension ; (; const char * ; ext); const. overridevirtual . Returns 1 if window system server supports extension given by the argument, returns 0 in case extension is not supported and returns -1 in case of error (like server not initialized). ; Reimplemented from TVirtualX.; Definition at line 517 of file TGCocoa.mm. ◆ Sync(). void TGCocoa::Sync ; (; Int_t ; mode). overridevirtual . Set synchronisation on or off. ; Parameters. [in]modesynchronisation on/off; mode=1 on; mode<>0 off . Reimplemented from TVirtualX.; Definition at line 4125 of file TGCocoa.mm. ◆ TextWidth(). Int_t TGCocoa::TextWidth ; (; FontStruct_t ; font, . const char * ; s, . Int_t ; len . ). overridevirtual . Return length of the string ""s"" in pixels. Size depends on font. ; Reimplemented from TVirtualX.; Definition at line 2849 of file TGCocoa.mm. ◆ TranslateCoordinates(). void TGCocoa::TranslateCoordinates ; (; Window_t ; src, . Window_t ; dest, . Int_t ; src_x, . Int_t ; src_y, . Int_t & ; dest_x, . Int_t & ; dest_y, . Window_t & ; child . ). overridevirtual . Translates coordinates in one window to the coordinate space of another window. ; It takes the ""src_x"" ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCocoa.html:123588,error,error,123588,doc/master/classTGCocoa.html,https://root.cern,https://root.cern/doc/master/classTGCocoa.html,1,['error'],['error']
Availability,"r a weighted filled Profile histogram.Definition TProfile.cxx:853; TProfile::DivideBool_t Divide(TF1 *h1, Double_t c1=1) overridePerforms the operation: this = this/(c1*f1).Definition TProfile.cxx:453; TProfile::RebinTH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr) overrideRebin this profile grouping ngroup bins together.Definition TProfile.cxx:1410; TProfile::fgApproximatestatic Bool_t fgApproximatebin error approximation optionDefinition TProfile.h:48; TProfile::ExtendAxisvoid ExtendAxis(Double_t x, TAxis *axis) overrideProfile histogram is resized along x axis such that x is in the axis range.Definition TProfile.cxx:1583; TProfile::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TProfile.cxx:1358; TProfile::BuildOptionsvoid BuildOptions(Double_t ymin, Double_t ymax, Option_t *option)Set Profile histogram structure and options.Definition TProfile.cxx:227; TProfile::fErrorModeEErrorType fErrorModeOption to compute errors.Definition TProfile.h:40; TProfile::MergeLong64_t Merge(TCollection *list) overrideMerge all histograms in the collection in this histogram.Definition TProfile.cxx:1192; TProfile::Copyvoid Copy(TObject &hnew) const overrideCopy a Profile histogram to a new profile histogram.Definition TProfile.cxx:423; TProfile::fYmaxDouble_t fYmaxUpper limit in Y (if set)Definition TProfile.h:42; TProfile::SetBinEntriesvirtual void SetBinEntries(Int_t bin, Double_t w)Set the number of entries in bin.Definition TProfile.cxx:1700; TProfile::ProjectionXTH1D * ProjectionX(const char *name=""_px"", Option_t *option=""e"") constProject this profile into a 1-D histogram along X.Definition TProfile.cxx:1283; TProfile::SetErrorOptionvirtual void SetErrorOption(Option_t *option="""")Set option to compute profile errors.Definition TProfile.cxx:1777; TProfile::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on outp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile_8cxx_source.html:80902,error,errors,80902,doc/master/TProfile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile_8cxx_source.html,1,['error'],['errors']
Availability,"r and lower bounds to draw the function. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t xmax, Double_t ymax) override;  Initialize the upper and lower bounds to draw the function-. ;  ; void SetRange (Double_t xmin, Double_t ymin, Double_t zmin, Double_t xmax, Double_t ymax, Double_t zmax) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TF2. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Double_t Variance2X (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ; virtual Double_t Variance2Y (Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon=0.000001);  ;  Public Member Functions inherited from TF1;  TF1 ();  TF1 default constructor. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin, Double_t xmax, Option_t *option);  Same constructor as above (for TFormula based function) but passing an option strings available options VEC - vectorize the formula expressions (not possible for lambda based expressions) NL - function is not stores in the global list of functions GL - function will be always stored in the global list of functions , independently of the global setting of TF1::DefaultAddToGlobalList. ;  ;  TF1 (const char *name, const char *formula, Double_t xmin=0, Double_t xmax=1, EAddToList addToGlobList=EAddToList::kDefault, bool vectorize=false);  TF1 constructor using a formula definition. ;  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, const char *, const char *, EAddToList addToGlobList=EAddToList::kDefault);  ; template<class PtrObj , typename MemFn > ;  TF1 (const char *name, const PtrObj &p, MemFn memFn, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  ;  TF1 (const char *name, Double_t xmin, Double_t xmax, Int_t npar, Int_t ndim=1, EAddToList addToGlobList=EAddToList::kDefault);  F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:10124,avail,available,10124,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['avail'],['available']
Availability,"r and that linear combination of all other parameters which is most strongly correlated with i. ;  ; virtual bool Hesse ();  perform a full calculation of the Hessian matrix for error calculation ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual const double * MinGradient () const;  return pointer to gradient values at the minimum ;  ; virtual int MinosStatus () const;  status code of Minos (to be re-implemented by the minimizers supporting Minos) ;  ; virtual unsigned int NCalls () const;  number of function calls to reach the minimum ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual void PrintResults ();  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; virtual bool ProvidesError () const;  minimizer provides error and error matrix ;  ; virtual bool Scan (unsigned int ivar, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0);  scan function minimum for variable i. ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html:8390,error,error,8390,doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BasicMinimizer.html,2,['error'],['error']
Availability,"r as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \); This tool prunes branches from a tree if the expected error of a node is less than that of the sum of the error in its descendants. ; Definition at line 54 of file ExpectedErrorPruneTool.h. Public Member Functions;  ExpectedErrorPruneTool ();  ; virtual ~ExpectedErrorPruneTool ();  ; virtual PruningInfo * CalculatePruningInfo (DecisionTree *dt, const IPruneTool::EventSample *testEvents=nullptr, Bool_t isAutomatic=kFALSE);  ; void SetPruneStrengthIncrement (Double_t dalpha);  ;  Public Member Functions inherited from TMVA::IPruneTool;  IPruneTool ();  ; virtual ~IPruneTool ();  ; Double_t GetPruneStrength () const;  ; Bool_t IsAutomatic () const;  ; void SetAutomatic ();  ; void SetPruneStrength (Double_t alpha);  . Private Member Functions; Int_t CountNodes (DecisionTreeNode *node, Int_t icount=0);  ; void FindListOfNodes (DecisionTreeNode *node);  recursive pruning of nodes using the Expected Error Pruning (EEP) ;  ; Double_t GetNodeError (DecisionTreeNode *node) const;  Calculate an UPPER limit on the error made by the classification done by this node. ;  ; Double_t GetSubTreeError (DecisionTreeNode *node) const;  calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ;  ; MsgLogger & Log () const;  . Private Attributes; Double_t fDeltaPruneStrength;  ! the stepsize for optimizing the pruning strength parameter ;  ; MsgLogger * fLogger;  ! message logger ;  ; Double_t fNodePurityLimit;  ! the purity limit for labelling a terminal node as signal ;  ; std::vector< DecisionTreeNode * > fPruneSequence;  ! the (optimal) prune sequence ;  . Additional Inherited Members;  Public Types inherited from TMVA::IPruneTool; typedef std::vector< const Event * > EventSample;  ;  Protected Attributes inherited from TMVA::IPruneTool; Double_t B;  ; Double_t fPruneStrength;  ! regularization parameter in pruning ;  ; Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:1890,error,error,1890,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['error'],['error']
Availability,"r big enough to hold the data; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffer(char* buffer, Long64_t position, Int_t length); Read a data chunk of the given size, starting from the given offset. param buffer: a pointer to a buffer big enough to hold the data; param position: offset from the beginning of the file; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffers(char* buffer, Long64_t* position, Int_t* length, Int_t nbuffs); Read scattered data chunks in one operation. param buffer: a pointer to a buffer big enough to hold all of the; requested data; param position: position[i] is the seek position of chunk i of len; length[i]; param length: length[i] is the length of the chunk at offset; position[i]; param nbuffs: number of chunks; returns: kTRUE in case of failure. Bool_t WriteBuffer(const char* buffer, Int_t length); Write a data chunk. param buffer: the data to be written; param length: the size of the buffer; returns: kTRUE in case of failure. void Flush(). void Seek(Long64_t offset, TFile::ERelativeTo position = kBeg); Set the position within the file. param offset: the new offset relative to position; param position: the relative position, either kBeg, kCur or kEnd. Int_t ParseOpenMode(Option_t* in, TString& modestr, XrdCl::OpenFlags::Flags& mode, Bool_t assumeRead); Parse a file open mode given as a string into a canonically formatted; output mode string and an integer code that the xroot client can use. param in: the file open mode as a string (in); modestr: open mode string after parsing (out); mode: correctly parsed option mode code (out); assumeRead: if the open mode is not recognised assume read (in); returns: 0 in case the mode was successfully parsed,; -1 in case of failure. Bool_t IsUseable() const; Check the file is open and isn't a zombie. Bool_t GetVectorReadLimits(); Find the server-specific readv config params. Returns kFALSE in case of; error, kTRUE oth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TNetXNGFile.html:26744,failure,failure,26744,root/html602/TNetXNGFile.html,https://root.cern,https://root.cern/root/html602/TNetXNGFile.html,2,['failure'],['failure']
Availability,"r can pick it up. ; Returns 0 and fill fSelector in case of success. Returns -1 and sets fSelector to 0 in case of failure. ; Definition at line 45 of file TProofPlayerLite.cxx. ◆ Process() [1/2]. Long64_t TProofPlayerLite::Process ; (; TDSet * ; dset, . const char * ; selector_file, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayer.; Definition at line 109 of file TProofPlayerLite.cxx. ◆ Process() [2/2]. Long64_t TProofPlayerLite::Process ; (; TDSet * ; dset, . TSelector * ; selector, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; first = 0 . ). overridevirtual . Process specified TDSet on PROOF. ; This method is called on client and on the PROOF master. The return value is -1 in case of an error and TSelector::GetStatus() in in case of success. ; Reimplemented from TProofPlayer.; Definition at line 80 of file TProofPlayerLite.cxx. ◆ SetupFeedback(). void TProofPlayerLite::SetupFeedback ; (; ). overrideprotectedvirtual . Setup reporting of feedback objects. ; Reimplemented from TProofPlayer.; Definition at line 485 of file TProofPlayerLite.cxx. ◆ StoreFeedback(). void TProofPlayerLite::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback results from the specified slave. ; Reimplemented from TProofPlayer.; Definition at line 511 of file TProofPlayerLite.cxx. ◆ Streamer(). void TProofPlayerLite::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayer. ◆ StreamerNVirtual(). void TProofPlayerLite::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file TProofPlayerLite.h. proof/proofplayer/inc/TProofPlayerLite.h; proof/proofplayer/src/T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLite.html:30427,error,error,30427,doc/master/classTProofPlayerLite.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLite.html,1,['error'],['error']
Availability,"r char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; TGraph.h; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; ymaxfloat ymaxDefinition THbookFile.cxx:95; TCollectionCollection abstract base class.Definition TCollection.h:65; TF11-Dim function classDefinition TF1.h:233; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphErrors::ComputeRangevoid ComputeRange(Double_t &xmin, Double_t &ymin, Double_t &xmax, Double_t &ymax) const overrideCompute range.Definition TGraphErrors.cxx:480; TGraphErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEX, and fEY arrays with the sorted values.Definition TGraphErrors.cxx:866; TGraphErrors::GetErrorYDouble_t GetErrorY(Int_t bin) const overrideIt returns the error along Y at point i.Definition TGraphErrors.cxx:623; TGraphErrors::GetEXDouble_t * GetEX() const overrideDefinition TGraphErrors.h:69; TGraphErrors::GetErrorXDouble_t GetErrorX(Int_t bin) const overrideIt returns the error along X at point i.Definition TGraphErrors.cxx:612; TGraphErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8h_source.html:6787,error,error,6787,doc/master/TGraphErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8h_source.html,1,['error'],['error']
Availability,"r class. Function Members (Methods); public:. virtual~SimplexMinimizer(); virtual const ROOT::Minuit2::MinimumBuilder&Builder() const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html:1624,toler,toler,1624,root/html526/ROOT__Minuit2__SimplexMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__SimplexMinimizer.html,4,['toler'],['toler']
Availability,"r correlation matrix as a TMatrixDSym object. In addition TFitResult derives from TNamed and can be conveniently stored in a file.; When fitting an histogram ( a TH1 object) or a graph (a TGraph object) it is possible to return a TFitResult via the TFitResultPtr object, which behaves as a smart pointer to a TFitResult. TFitResultPtr is the return object by TH1::Fit or TGraph::Fit. By default the TFitResultPtr contains only the status of the fit and can be obtained by an automatic conversion of the TFitResultPtr to an integer.; If the fit option S is instead used, TFitResultPtr contains the TFitResult and behaves as a smart pointer to it. This is an example:; int fitStatus = hist->Fit(myFunction); // TFitResultPtr contains only the fit status. TFitResultPtr r = hist->Fit(myFunction,""S""); // TFitResultPtr contains the TFitResult; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t chi2 = r->Chi2(); // to retrieve the fit chi2; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; 5.8 The Minimization packages; As explained before various minimization packages can be used when fitting in ROOT. We have seen before how to configure the Fitter class to use different minimization packages and different minimization options. When using the Fit method the minimization package (and its options) can be selected using the static methods of the ROOT::Math::MinimizerOptions class. For example to select Minuit2 instead of Minuit for fitting an histogram do:; ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""Minuit2"");; // fit the histogram histo with the gaussian pre-defined function; histo->Fit(""gaus"");; In the following we will give some brief description of the minimization packages. The packages all implement the ROOT::Math::Mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:212697,error,error,212697,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"r delete (void *ptr, void *vp);  Only called by placement new when throwing an exception. ;  ; void operator delete[] (void *ptr);  Operator delete []. ;  ; void operator delete[] (void *ptr, void *vp);  Only called by placement new[] when throwing an exception. ;  ; void * operator new (size_t sz);  ; void * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:38906,error,error,38906,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,8,['error'],['error']
Availability,"r each fit parameter and it created by the ROOT::Fit::FitConfig class, after the model function has been set in the Fitter. Only when the function is set, the number of parameter is known and automatically the FitConfig creates the corresponding ParameterSetting objects.; When fitting, different minimizer can be used. The can be implemented in different libraries and loaded ar run time by the plug-in manager system of ROOT. Each different minimizer (e.g. Minuit, Minuit2, Fumili, etc.) consists of a different implementation of the ROOT::Math::Minimizer interface. Within the same minimizer, thus within the same class implementing the Minimizer interface, different algorithms can exist. For example in the case of Minuit, we have Migrad, Simplex or Minimize. The minimizer and its corresponding algorithm, when available, can be set by using the function FitConfig::SetMinimizer(""minimizerName"") or by using directly the ROOT:Math::MinimizerOptions class.; If the requested minimizer is not available in ROOT, the default one is used. The default minimizer type and algorithm can be specified by using the static function ROOT::Math::MinimizerOptions::SetDefaultMinimizer(""minimizerName""); 5.7.4 Minimizer Libraries and Algorithms; The list of available minimizer libraries currently available in ROOT, with their corresponding available algorithms is the following one. Some minimizers (e.g. Minuit) contain several algorithms that the user can choose. Others are based on a single algorithm (e.g. Fumili). Minuit (library libMinuit). Old version of Minuit, based on the TMinuit class. The list of possible algorithms are:. Migrad (default one); Simplex; Minimize (it is a combination of Migrad and Simplex); MigradImproved; Scan; Seek. Minuit2 (library libMinuit2). New C++ version of Minuit. The list of possible algorithm is :. Migrad (default); Simplex; Minimize; Scan; Fumili . This is the same algorithm of TFumili, but implemented in the Minuit2 library. Fumili. Implement a dedicated mi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:201905,avail,available,201905,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"r errors with limits.; 157 ; 158In the best case, where the minimum is far from any limits, MINUIT will; 159correctly transform the error matrix, and the parameter errors it reports; 160should be accurate and very close to those you would have got without; 161limits. In other cases (which should be more common, since otherwise you; 162wouldn't need limits), the very meaning of parameter errors becomes; 163problematic. Mathematically, since the limit is an absolute constraint on; 164the parameter, a parameter at its limit has no error, at least in one; 165direction. The error matrix, which can assign only symmetric errors, then; 166becomes essentially meaningless.; 167 ; 168### Interpretation of Parameter Errors:; 169 ; 170There are two kinds of problems that can arise: the reliability of; 171MINUIT's error estimates, and their statistical interpretation, assuming; 172they are accurate.; 173 ; 174### Statistical interpretation:; 175 ; 176For discussion of basic concepts, such as the meaning of the elements of; 177the error matrix, or setting of exact confidence levels see:; 178 ; 179 1. F.James.; 180 Determining the statistical Significance of experimental Results.; 181 Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; 182 ; 183 2. W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet.; 184 Statistical Methods in Experimental Physics.; 185 North-Holland, 1971.; 186 ; 187### Reliability of MINUIT error estimates.; 188 ; 189MINUIT always carries around its own current estimates of the parameter; 190errors, which it will print out on request, no matter how accurate they; 191are at any given point in the execution. For example, at initialization,; 192these estimates are just the starting step sizes as specified by the user.; 193After a HESSE step, the errors are usually quite accurate,; 194unless there has been a problem. MINUIT, when it prints out error values,; 195also gives some indication of how reliable it thinks they are. For; 196example, those marked <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:8545,error,error,8545,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"r even the same) files. It is not difficult to provide a file or files; 8484 * s.t. they force civetweb; 8485 * to infinitely recurse and then crash.; 8486 */; 8487#define INITIAL_DEPTH 9; 8488#if INITIAL_DEPTH <= 0; 8489#error Bad INITIAL_DEPTH for recursion, set to at least 1; 8490#endif; 8491 ; 8492#if !defined(NO_FILESYSTEMS); 8493struct read_auth_file_struct {; 8494 struct mg_connection *conn;; 8495 struct ah ah;; 8496 const char *domain;; 8497 char buf[256 + 256 + 40];; 8498 const char *f_user;; 8499 const char *f_domain;; 8500 const char *f_ha1;; 8501};; 8502 ; 8503 ; 8504static int; 8505read_auth_file(struct mg_file *filep,; 8506 struct read_auth_file_struct *workdata,; 8507 int depth); 8508{; 8509 int is_authorized = 0;; 8510 struct mg_file fp;; 8511 size_t l;; 8512 ; 8513 if (!filep || !workdata || (0 == depth)) {; 8514 return 0;; 8515 }; 8516 ; 8517 /* Loop over passwords file */; 8518 while (mg_fgets(workdata->buf, sizeof(workdata->buf), filep) != NULL) {; 8519 l = strlen(workdata->buf);; 8520 while (l > 0) {; 8521 if (isspace((unsigned char)workdata->buf[l - 1]); 8522 || iscntrl((unsigned char)workdata->buf[l - 1])) {; 8523 l--;; 8524 workdata->buf[l] = 0;; 8525 } else; 8526 break;; 8527 }; 8528 if (l < 1) {; 8529 continue;; 8530 }; 8531 ; 8532 workdata->f_user = workdata->buf;; 8533 ; 8534 if (workdata->f_user[0] == ':') {; 8535 /* user names may not contain a ':' and may not be empty,; 8536 * so lines starting with ':' may be used for a special purpose; 8537 */; 8538 if (workdata->f_user[1] == '#') {; 8539 /* :# is a comment */; 8540 continue;; 8541 } else if (!strncmp(workdata->f_user + 1, ""include="", 8)) {; 8542 if (mg_fopen(workdata->conn,; 8543 workdata->f_user + 9,; 8544 MG_FOPEN_MODE_READ,; 8545 &fp)) {; 8546 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8547 (void)mg_fclose(; 8548 &fp.access); /* ignore error on read only file */; 8549 ; 8550 /* No need to continue processing files once we have a; 8551 * match, since nothing will r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:245002,error,error,245002,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"r even the same) files. It is not difficult to provide a file or files; 8485 * s.t. they force civetweb; 8486 * to infinitely recurse and then crash.; 8487 */; 8488#define INITIAL_DEPTH 9; 8489#if INITIAL_DEPTH <= 0; 8490#error Bad INITIAL_DEPTH for recursion, set to at least 1; 8491#endif; 8492 ; 8493#if !defined(NO_FILESYSTEMS); 8494struct read_auth_file_struct {; 8495 struct mg_connection *conn;; 8496 struct ah ah;; 8497 const char *domain;; 8498 char buf[256 + 256 + 40];; 8499 const char *f_user;; 8500 const char *f_domain;; 8501 const char *f_ha1;; 8502};; 8503 ; 8504 ; 8505static int; 8506read_auth_file(struct mg_file *filep,; 8507 struct read_auth_file_struct *workdata,; 8508 int depth); 8509{; 8510 int is_authorized = 0;; 8511 struct mg_file fp;; 8512 size_t l;; 8513 ; 8514 if (!filep || !workdata || (0 == depth)) {; 8515 return 0;; 8516 }; 8517 ; 8518 /* Loop over passwords file */; 8519 while (mg_fgets(workdata->buf, sizeof(workdata->buf), filep) != NULL) {; 8520 l = strlen(workdata->buf);; 8521 while (l > 0) {; 8522 if (isspace((unsigned char)workdata->buf[l - 1]); 8523 || iscntrl((unsigned char)workdata->buf[l - 1])) {; 8524 l--;; 8525 workdata->buf[l] = 0;; 8526 } else; 8527 break;; 8528 }; 8529 if (l < 1) {; 8530 continue;; 8531 }; 8532 ; 8533 workdata->f_user = workdata->buf;; 8534 ; 8535 if (workdata->f_user[0] == ':') {; 8536 /* user names may not contain a ':' and may not be empty,; 8537 * so lines starting with ':' may be used for a special purpose; 8538 */; 8539 if (workdata->f_user[1] == '#') {; 8540 /* :# is a comment */; 8541 continue;; 8542 } else if (!strncmp(workdata->f_user + 1, ""include="", 8)) {; 8543 if (mg_fopen(workdata->conn,; 8544 workdata->f_user + 9,; 8545 MG_FOPEN_MODE_READ,; 8546 &fp)) {; 8547 is_authorized = read_auth_file(&fp, workdata, depth - 1);; 8548 (void)mg_fclose(; 8549 &fp.access); /* ignore error on read only file */; 8550 ; 8551 /* No need to continue processing files once we have a; 8552 * match, since nothing will r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:245034,error,error,245034,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"r example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TSelector. ◆ Print(). void TSelEventGen::Print ; (; Option_t * ; option = """"); const. overridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 486 of file TSelEventGen.cxx. ◆ Process(). Bool_t TSelEventGen::Process ; (; Long64_t ; entry). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either TTree::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms. ; Reimplemented from TSelector.; Definition at line 326 of file TSelEventGen.cxx. ◆ SetInputList(). void TSelEventGen::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 68 of file TSelEventGen.h. ◆ SetObject(). void TSelEventGen::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 67 of file TSelEventGen.h. ◆ SetOption(). void TSelEventGen::SetOption ; (; const char * ; option). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 66 of file TSelEventGen.h. ◆ SlaveBegin(). void TSelEventGen::SlaveBegin ; (; TTree * ; tree). overridevirtual . The SlaveBegin() function is called after the Begin() function. ; When runn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelEventGen.html:17491,avail,available,17491,doc/master/classTSelEventGen.html,https://root.cern,https://root.cern/doc/master/classTSelEventGen.html,1,['avail'],['available']
Availability,"r expressions that will be checked) and as last a local file will; be tried.; Before opening a file via TNetFile a check is made to see if the URL; specifies a local file. If that is the case the file will be opened; via a normal TFile. To force the opening of a local file via a; TNetFile use either TNetFile directly or specify as host ""localhost"".; The netopt argument is only used by TNetFile. For the meaning of the; options and other arguments see the constructors of the individual; file classes. In case of error returns 0. For TFile implementations supporting asynchronous file open, see; TFile::AsyncOpen(...), it is possible to request a timeout with the; option:; TIMEOUT=<secs> the timeout must be specified in seconds and; it will be internally checked with granularity of; one millisec. For remote files there is the option:; CACHEREAD opens an existing file for reading through the file cache.; The file will be downloaded to the cache and opened from there.; If the download fails, it will be opened remotely.; The file will be downloaded to the directory specified by; SetCacheFileDir(). TFileOpenHandle * AsyncOpen(const char* name, Option_t* option = """", const char* ftitle = """", Int_t compress = 1, Int_t netopt = 0); Static member function to submit an open request. The request will be; processed asynchronously. See TFile::Open(const char *, ...) for an; explanation of the arguments. A handler is returned which is to be passed; to TFile::Open(TFileOpenHandle *) to get the real TFile instance once; the file is open.; This call never blocks and it is provided to allow parallel submission; of file opening operations expected to take a long time.; TFile::Open(TFileOpenHandle *) may block if the file is not yet ready.; The sequence; TFile::Open(TFile::AsyncOpen(const char *, ...)); is equivalent to; TFile::Open(const char *, ...) .; To be effective, the underlying TFile implementation must be able to; support asynchronous open functionality. Currently, only TXNetFile; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:46015,down,download,46015,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['down'],['download']
Availability,"r expressions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch added or already included; -1 on error. Int_t DropBranch(TBranch* b, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this function is called by TBranch::GetBasket.; Returns 0 branch dropped or not in cache; -1 on error. Int_t DropBranch(const char* branch, Bool_t subbranches = kFALSE); Remove a branch to the list of branches to be stored in the cache; this is to be used by user (thats why we pass the name of the branch).; It works in exactly the same way as TTree::SetBranchStatus so you; probably want to look over ther for details about the use of bname; with regular expresions.; The branches are taken with respect to the Owner of this TTreeCache; (i.e. the original Tree); NB: if bname=""*"" all branches are put in the cache and the learning phase stopped; Returns 0 branch dropped or not in cache; -1 on error. Bool_t FillBuffer(); Fill the cache buffer with the branches in the cache. Double_t GetEfficiency() const; Give the total efficiency of the cache... defined as the ratio; of blocks found in the cache vs. the number of blocks prefetched; ( it could be more than 1 if we read the same block from the cache more; than once ); Note: This should eb used at the end of the processing or we will; get uncomplete stats. Double_t GetEfficiencyRel() const; This will indicate a sort of relative efficiency... a ratio of the; reads found in the cache to the number of reads so far. Int_t GetLearnEntries(); static function returning the number of entries used to train the cache; see SetLearnEntries. void Print(Option_t* option = """") const; Print cache statistics, like; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficien",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeCache.html:23733,error,error,23733,root/html604/TTreeCache.html,https://root.cern,https://root.cern/root/html604/TTreeCache.html,1,['error'],['error']
Availability,r found - save the configuration ; : 4 | 32719.2 30843.2 0.0198205 0.00178286 44351.8 0; : 5 Minimum Test error found - save the configuration ; : 5 | 31879.6 30001 0.0200761 0.00184919 43891 0; : 6 Minimum Test error found - save the configuration ; : 6 | 30965 29177.4 0.0203037 0.00185469 43362.8 0; : 7 Minimum Test error found - save the configuration ; : 7 | 30273.8 28682.9 0.0206315 0.00190133 42711.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 29852.4 28319.6 0.0206438 0.00186969 42611.9 0; : 9 Minimum Test error found - save the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:12531,error,error,12531,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,"r from GSL based on the ROOT::Math::GSLMinimizer. Available algorithms are:; 66 /// - BFGS2 (default); 67 /// - BFGS; 68 /// - ConjugateFR; 69 /// - ConjugatePR; 70 /// - SteepestDescent; 71 /// - GSLMultiFit Minimizer based on GSL for minimizing only non linear least-squared functions (using an approximation similar to Fumili). See ROOT::Math::GSLMultiFit.; 72 /// - GSLSimAn Simulated annealing minimizer from GSL (see ROOT::Math::GSLSimAnMinimizer). It is a stochastic minimization algorithm using only function values and not the gradient.; 73 /// - Genetic Genetic minimization algorithms (see TMVA::Genetic); 74 ///; 75 static void SetDefaultMinimizer(const char *type, const char *algo = nullptr);; 76 ; 77 /// Set the default level for computing the parameter errors.; 78 /// For example for 1-sigma parameter errors; 79 /// - up = 1 for a chi-squared function; 80 /// - up = 0.5 for a negative log-likelihood function; 81 ///; 82 /// The value will be used also by Minos when computing the confidence interval; 83 static void SetDefaultErrorDef(double up);; 84 ; 85 /// Set the Minimization tolerance.; 86 /// The Default value for Minuit and Minuit2 is 0.01; 87 static void SetDefaultTolerance(double tol);; 88 ; 89 /// Set the default Minimizer precision.; 90 /// (used only by MInuit and Minuit2); 91 /// It is used to specify the numerical precision used for computing the; 92 /// objective function. It should be left to the default value found by the Minimizer; 93 /// (typically double precision); 94 static void SetDefaultPrecision(double prec);; 95 ; 96 /// Set the maximum number of function calls.; 97 static void SetDefaultMaxFunctionCalls(int maxcall);; 98 ; 99 /// Set the maximum number of iterations.; 100 /// Used by the GSL minimizers and Genetic. Not used by Minuit,Minuit2.; 101 static void SetDefaultMaxIterations(int maxiter);; 102 ; 103 /// Set the default strategy.; 104 /// The strategy is a parameter used only by Minuit and Minuit2.; 105 /// Possible values are:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8h_source.html:3644,toler,tolerance,3644,doc/master/MinimizerOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html,1,['toler'],['tolerance']
Availability,"r interaction of the user between two minimization steps will make use of the result of the preceeding minimization in an optimal way. The interface for parameters (see [api:parameters], [api:covariance] and [api:state]) is forwardedin MnMigrad.; 4.4.3 Subsequent minimizations; M takes care that all information is treated in an optimal and correct wayif the user interacts with the parameters between two minimizations. MnMigrad retains the result of the last minimization and uses this as input for the next step. Between two minimization requests to MnMigrad the user can fix or release parameters, put limits on them or remove limits from them. Each instance of a MnMigrad object maintains its own state and one can have multiple instances of MnMigrad objects.; 4.4.4 M fails to find a minimum; If M fails to find a minimum, the user is notified by a warning message isued by M when running into troubles. Problems can be:. a bug in M; an error in the \(\mbox{FCN}\); a highly difficult problem (usually strong correlations among parameters); floating–point precision. 4.5 The output from minimization; 4.5.1 The FunctionMinimum; The output of the minimizers is the FunctionMinimum. The FunctionMinimum contains the result of the minimization in both internal parameter representation and external parameter representation.; 4.5.2 User representable format: MnUserParameterState; On request, the result of the minimzation is transformed into a user representable format for parameters and errors, the MnUserParameterState.; 4.5.3 Access values, errors, covariance; The result can be accessed via methods like MnUserParameterState::value(unsigned int n) and MnUserParameterState::error(unsigned int n), where \(n\) is the index of the parameter in the list of parameters defined by the user.; 4.5.4 Printout of the result; The FunctionMinimum can be printed on the output simply via std::cout. It will print both the internal and external state, that is parameters, errors and the covariance matri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:40675,error,error,40675,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['error'],['error']
Availability,"r is in the window ""id"". ;  ; void SetDashes (GContext_t gc, Int_t offset, const char *dash_list, Int_t n) override;  Sets the dash-offset and dash-list attributes for dashed line styles in the specified GC. ;  ; void SetDNDAware (Window_t win, Atom_t *typelist) override;  Add XdndAware property and the list of drag and drop types to the Window win. ;  ; void SetDoubleBuffer (Int_t wid, Int_t mode) override;  Sets the double buffer on/off on the window ""wid"". ;  ; void SetDoubleBufferOFF () override;  Turns double buffer mode off. ;  ; void SetDoubleBufferON () override;  Turns double buffer mode on. ;  ; void SetDrawMode (EDrawMode mode) override;  Sets the drawing mode. ;  ; void SetFillAttributes () override;  Invoke the DialogCanvas Fill attributes. ;  ; void SetFillColor (Color_t cindex) override;  Set the fill area color. ;  ; void SetFillStyle (Style_t style) override;  Set the fill area style. ;  ; void SetForeground (GContext_t gc, ULong_t foreground) override;  Sets the foreground color for the specified GC (shortcut for ChangeGC with only foreground mask set). ;  ; void SetIconName (Window_t id, char *name) override;  Sets the window icon name. ;  ; void SetIconPixmap (Window_t id, Pixmap_t pix) override;  Sets the icon name pixmap. ;  ; void SetInputFocus (Window_t id) override;  Changes the input focus to specified window ""id"". ;  ; void SetKeyAutoRepeat (Bool_t on=kTRUE) override;  Turns key auto repeat on (kTRUE) or off (kFALSE). ;  ; void SetLineAttributes () override;  Invoke the DialogCanvas Line attributes. ;  ; void SetLineColor (Color_t cindex) override;  Set the line color. ;  ; void SetLineStyle (Style_t linestyle) override;  Set the line style. ;  ; void SetLineType (Int_t n, Int_t *dash) override;  Sets the line type. ;  ; void SetLineWidth (Width_t width) override;  Set the line width. ;  ; void SetMarkerAttributes () override;  Invoke the DialogCanvas Marker attributes. ;  ; void SetMarkerColor (Color_t cindex) override;  Set the marker col",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:23481,mask,mask,23481,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['mask'],['mask']
Availability,"r is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Implemented in RooCategory, RooSuperCategory, RooCategory, and RooSuperCategory. ◆ setLabel() [2/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::pair< std::string, value_type > & ; nameIdxPair, . bool ; printError = true . ). inline . Change category state to the state name of another category. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. NoteThe state index of the other category is ignored. ; Returnsbool to signal an error. ; Definition at line 69 of file RooAbsCategoryLValue.h. ◆ setLabel() [3/3]. bool RooAbsCategoryLValue::setLabel ; (; const std::string & ; label, . bool ; printError = true . ). inline . Change category state by specifying a state name. ; If printError is set, a message will be printed if the specified state name does not represent a valid state. Returnsbool to signal an error. ; Definition at line 60 of file RooAbsCategoryLValue.h. ◆ setOrdinal(). bool RooAbsCategoryLValue::setOrdinal ; (; unsigned int ; index). Set our state to our nth defined type. ; Returnstrue in case of an error. ; Definition at line 110 of file RooAbsCategoryLValue.cxx. ◆ Streamer(). void RooAbsCategoryLValue::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCategory.; Reimplemented in RooCategory, and RooSuperCategory. ◆ StreamerNVirtual(). void RooAbsCategoryLValue::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 123 of file RooAbsCategoryLValue.h. ◆ volume(). double RooAbsCategoryLValue::volume ; (; const char * ; rangeName); const. inlineoverridevirtual . Implements RooAbsLValue.; Definition at line 89 of file RooAbsCategoryLValue.h. Friends And Related Symbol Documentation. ◆ RooSimGenContext. friend class RooSimGenContext. friend . Definition at line 112 of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsCategoryLValue.html:54176,error,error,54176,doc/master/classRooAbsCategoryLValue.html,https://root.cern,https://root.cern/doc/master/classRooAbsCategoryLValue.html,1,['error'],['error']
Availability,r level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=5.28877; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 4 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=-35.3713 m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ] has 2000 errors; ; RooAbsMinimizerFcn: Minimized function has error status but is ignored.; Parameter values: k=nan m0=nan; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denomi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:8698,error,errors,8698,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,4,['error'],"['error', 'errors']"
Availability,"r library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Refresh the list of shared libraries and return it. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first librar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:28829,error,error,28829,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"r library maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if succesful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared libraries known to CINT. const char * GetClassSharedLibs(const char* cls); Get the list of shared libraries containing the code for class cls.; The first library",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TCint.html:29305,error,error,29305,root/html528/TCint.html,https://root.cern,https://root.cern/root/html528/TCint.html,3,['error'],['error']
Availability,"r likelihood minimization ; Definition at line 317 of file Minimizer.h. ◆ Errors(). virtual const double * ROOT::Math::Minimizer::Errors ; (; ); const. inlinevirtual . return errors at the minimum ; Reimplemented in TFumiliMinimizer, ROOT::Math::GeneticMinimizer, ROOT::Math::GSLMinimizer, ROOT::Math::GSLNLSMinimizer, TLinearMinimizer, TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 246 of file Minimizer.h. ◆ FixVariable(). bool ROOT::Math::Minimizer::FixVariable ; (; unsigned int ; ivar). virtual . fix an existing variable ; Reimplemented in ROOT::Math::BasicMinimizer, ROOT::Minuit2::Minuit2Minimizer, and TMinuitMinimizer.; Definition at line 87 of file Minimizer.cxx. ◆ GetCovMatrix(). bool ROOT::Math::Minimizer::GetCovMatrix ; (; double * ; covMat); const. virtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented in TMinuitMinimizer, ROOT::Minuit2::Minuit2Minimizer, and ROOT::Math::RMinimizer.; Definition at line 135 of file Minimizer.cxx. ◆ GetHessianMatrix(). bool ROOT::Math::Minimizer::GetHessianMatrix ; (; double * ; hMat); const. virtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented in TMinuitMinimizer, and ROOT::Minuit2::Minuit2Minimizer.; Definition at line 148 of file Minimizer.cxx. ◆ GetMinosError(). bool ROOT::Math::Minimizer::GetMinosError ; (; unsigned int ; ivar, . double & ; errLow, . double & ; errUp, . int ; option = 0 . ). virtual . m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html:18070,error,errors,18070,doc/master/classROOT_1_1Math_1_1Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1Minimizer.html,1,['error'],['errors']
Availability,"r limit must also; be a multiple of the bin width. Bool_t Multiply(TF1* h1, Double_t c1 = 1); Performs the operation: this = this*c1*f1. Bool_t Multiply(const TH1* h1); Multiply this profile2D by h1*-; *-* =============================. this = this*h1. Bool_t Multiply(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """"); -*-*-*Replace contents of this profile2D by multiplication of h1 by h2; *-* ================================================================. this = (c1*h1)*(c2*h2). TH3D * ProjectionXYZ(const char* name = ""_pxyz"", Option_t* option = ""e"") const; Project this profile3D into a 3-D histogram along X,Y,Z*-*-; *-* =====================================================. The projection is always of the type TH3D. if option ""E"" is specified, the errors are computed. (default); if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:39722,error,errors,39722,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,9,['error'],['errors']
Availability,r log follows.; Parameter values: a0=0.729962 a1=-0.49802 mean=4.92039 nbkg=146.276 nsig=144.44 sig1frac=0.620699; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 500; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 490; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 480; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 470; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 460; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 450; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 440; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 430; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-926.481) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.653979 a1=-0.469539 mean=5.00078 nbkg=160.963 nsig=166.526 sig1frac=0.628924; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 420; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-768.847) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.749295 a1=-0.303934 mean=4.98272 nbkg=121.461 nsig=145.338 sig1frac=0.822833; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-798.509) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.791035 a1=-0.287544 mean=4.98693 nbkg=127.577 nsig=149.203 sig1frac=0.914567; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 410; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 400; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 390; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-977.775) to force MI,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:19159,error,errors,19159,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,4,['error'],"['error', 'errors']"
Availability,"r log follows.; Parameter values: cHDD=3.22694 cHl3=-7.04051 cHq3=0.54016; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; getLogVal() top-level p.d.f evaluates to NaN @ numerator=wrap_pdf=-2.21831, denominator=wrap_pdf_Int[pTV]=89722.5; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (86348.3) to force MIGRAD to back out of this region. Error log follows.; Parameter values: cHDD=3.44258 cHl3=4.96668 cHq3=0.0273884; RooAbsPdf::wrap_pdf_over_wrap_pdf_Int[pTV][ numerator=wrap_pdf denominator=wrap_pdf_Int[pTV] ]; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denominator=wrap_pdf_Int[pTV]=242.998; p.d.f value is less than zero, trying to recover @ numerator=wrap_pdf=0.403042, denomi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html:13003,recover,recover,13003,doc/master/rf712__lagrangianmorphfit_8C.html,https://root.cern,https://root.cern/doc/master/rf712__lagrangianmorphfit_8C.html,2,['recover'],['recover']
Availability,"r model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the minimum value for the Y axis of 1-d histograms; is set to 0 if the minimum bin content is greater than 0 and TH1::SetMinimum; has not been called.; Otherwise the minimum is based on the minimum bin content. void SetNdivisions(Int_t n = 510, Option_t* axis = ""X""); Set the number of divisions to draw an axis.; ndiv : Number of divisions. n = N1 + 100*N2 + 10000*N3; N1=number of primary divisions.; N2=number of secondary divisions.; N3=number of 3rd divisions.; e.g.:; nndi=0 --> no tick marks.; nndi=2 --> 2 divisions, one tick mark in the middle; of the axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetAxisColor(Color_t color = 1, Option_t* axis = ""X""); Set color to draw the axis line and tick marks.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetEndErrorSize(Float_t np = 2); Set the size (in pixels) of the small lines drawn at the; end of the error bars (TH1 or TGraphErrors).; The default value is 2 pixels.; Set np=0 to remove these lines. void SetHeaderPS(const char* header); Define a string to be inserted in the Postscript header; The string in header will be added to the Postscript file; immediately following the %%Page line; For example, this string may contain special Postscript instructions like; 200 200 translate; the following header string will print the string ""my annotation"" at the; bottom left corner of the page (outside the user area); ""gsave 100 -100 t 0 r 0 0 m /Helvetica-Bold findfont 56 sf 0 0 m ( my annotation ) show gr""; This information is used in TPostScript::Initialize. void SetIsReading(Bool_t reading = kTRUE); Sets the fIsReading member to reading (default=kTRUE); fIsReading (used via gStyle->IsReading()) can be used in; the functions myclass::UseCurrentStyle to read from the current style; or write to the current style. void SetTitlePS(const char* pstitle); Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TStyle.html:28608,error,error,28608,root/html604/TStyle.html,https://root.cern,https://root.cern/root/html604/TStyle.html,1,['error'],['error']
Availability,"r model. void SetHistMinimumZero(Bool_t zero = kTRUE); If the argument zero=kTRUE the minimum value for the Y axis of 1-d histograms; is set to 0 if the minimum bin content is greater than 0 and TH1::SetMinimum; has not been called.; Otherwise the minimum is based on the minimum bin content. void SetNdivisions(Int_t n = 510, Option_t* axis = ""X""); Set the number of divisions to draw an axis.; ndiv : Number of divisions. n = N1 + 100*N2 + 10000*N3; N1=number of primary divisions.; N2=number of secondary divisions.; N3=number of 3rd divisions.; e.g.:; nndi=0 --> no tick marks.; nndi=2 --> 2 divisions, one tick mark in the middle; of the axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetAxisColor(Color_t color = 1, Option_t* axis = ""X""); Set color to draw the axis line and tick marks.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetEndErrorSize(Float_t np = 2); Set the size (in pixels) of the small lines drawn at the; end of the error bars (TH1 or TGraphErrors).; The default value is 2 pixels.; Set np=0 to remove these lines. void SetHeaderPS(const char* header); Define a string to be inserted in the Postscript header; The string in header will be added to the Postscript file; immediatly following the %%Page line; For example, this string may contain special Postscript instructions like; 200 200 translate; the following header string will print the string ""my annotation"" at the; bottom left corner of the page (outside the user area); ""gsave 100 -100 t 0 r 0 0 m /Helvetica-Bold findfont 56 sf 0 0 m ( my annotation ) show gr""; This information is used in TPostScript::Initialize. void SetIsReading(Bool_t reading = kTRUE); Sets the fIsReading member to reading (default=kTRUE); fIsReading (used via gStyle->IsReading()) can be used in; the functions myclass::UseCurrentStyle to read from the current style; or write to the current style. void SetTitlePS(const char* pstitle); Define",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:27124,error,error,27124,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,5,['error'],['error']
Availability,"r new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualX&operator=(const TVirtualX&); virtual voidTObject::Paint(Option_t* option = """"); virtual Bool_tParseColor(Colormap_t cmap, const char* cname, ColorStruct_t& color); virtual Bool_tPointInRegion(Int_t x, Int_t y, Region_t reg); virtual Region_tPolygonRegion(Point_t* points, Int_t np, Bool_t winding); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidPutImage(Drawable_t id, GContext_t gc, Drawable_t img, Int_t dx, Int_t dy, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidPutPixel(Drawable_t id, Int_t x, Int_t y, ULong_t pixel); virtual voidQueryColor(Colormap_t cmap, ColorStruct_t& color); virtual voidQueryPointer(Int_t& ix, Int_t& iy); virtual voidQueryPointer(Window_t id, Window_t& rootw, Window_t& childw, Int_t& root_x, Int_t& root_y, Int_t& win_x, Int_t& win_y, UInt_t& mask); virtual voidRaiseWindow(Window_t id); virtual Int_tTObject::Read(const char* name); virtual Pixmap_tReadGIF(Int_t x0, Int_t y0, const char* file, Window_t id = 0); virtual Bool_tReadPictureDataFromFile(const char* filename, char*** ret_data); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemoveWindow(ULong_t qwid); virtual voidReparentWindow(Window_t id, Window_t pid, Int_t x, Int_t y); virtual Int_tRequestLocator(Int_t mode, Int_t ctyp, Int_t& x, Int_t& y); virtual Int_tRequestString(Int_t x, Int_t y, char* text); virtual voidRescaleWindow(Int_t wid, UInt_t w, UInt_t h); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); virtual voidTAttMarker::ResetAttMarker(Option_t* toption = """"); virtual voidTAttText::ResetAttText(Option_t* toption = """"); voidTObject::ResetBit(UInt_t f); virtual Int_tResizePixmap(Int_t wid, UInt_t w, UInt_t h); virtual voidResizeWindow(Int_t wid); virtual voidResizeWindow(Wind",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualX.html:13053,mask,mask,13053,root/html528/TVirtualX.html,https://root.cern,https://root.cern/root/html528/TVirtualX.html,6,['mask'],['mask']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox *box2, const TGeoMatrix *mat2) R__DEPRECATED(6;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Contains (const Double_t *point,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoBBox.html:13180,error,error,13180,doc/master/classTGeoBBox.html,https://root.cern,https://root.cern/doc/master/classTGeoBBox.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Double_t Capacity (Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, const Double_t *dir, Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCone.html:13850,error,error,13850,doc/master/classTGeoCone.html,https://root.cern,https://root.cern/doc/master/classTGeoCone.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Double_t Capacity (Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2, Double_t phi1, Double_t phi2);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoConeSeg.html:14521,error,error,14521,doc/master/classTGeoConeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoConeSeg.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, const Double_t *dir, Double_t *norm, Double_t rmin, Double_t rma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTube.html:13582,error,error,13582,doc/master/classTGeoTube.html,https://root.cern,https://root.cern/doc/master/classTGeoTube.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2);  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void ComputeNormalS (const Double_t *point, const Double_t *dir, Double_t *nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTubeSeg.html:14151,error,error,14151,doc/master/classTGeoTubeSeg.html,https://root.cern,https://root.cern/doc/master/classTGeoTubeSeg.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGeoShape * MakeScaledShape (const char *name, TGeoShape *shape, TGeoScale *scale);  Create a scaled shape starting from a non-scaled one. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:15178,error,error,15178,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGeoTessellated * ImportFromObjFormat (const char *objfile, bool check=false, bool verbose=false);  Reader from .obj format. ;  ;  Static Pub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTessellated.html:17367,error,error,17367,doc/master/classTGeoTessellated.html,https://root.cern,https://root.cern/doc/master/classTGeoTessellated.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void GetPlaneNormal (Double_t *p1, Double_t *p2, Double_t *p3, Double_t *norm);  ; static Bool_t InsidePolygon (Double_t x, Double_t y, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoArb8.html:16281,error,error,16281,doc/master/classTGeoArb8.html,https://root.cern,https://root.cern/doc/master/classTGeoArb8.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoArb8; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrap.html:15711,error,error,15711,doc/master/classTGeoTrap.html,https://root.cern,https://root.cern/doc/master/classTGeoTrap.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoBBox; static Bool_t AreOverlapping (const TGeoBBox *box1, const TGeoMatrix *mat1, const TGeoBBox ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:24819,error,error,24819,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,11,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoPcon; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:14911,error,error,14911,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoTrap; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGtra.html:17471,error,error,17471,doc/master/classTGeoGtra.html,https://root.cern,https://root.cern/doc/master/classTGeoGtra.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoTube; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz);  ; static TClass * Cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoEltu.html:16443,error,error,16443,doc/master/classTGeoEltu.html,https://root.cern,https://root.cern/doc/master/classTGeoEltu.html,2,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TGeoTubeSeg; static Double_t Capacity (Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCtub.html:17347,error,error,17347,doc/master/classTGeoCtub.html,https://root.cern,https://root.cern/doc/master/classTGeoCtub.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMacro; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveMacro.html:10135,error,error,10135,doc/master/classTEveMacro.html,https://root.cern,https://root.cern/doc/master/classTEveMacro.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTExec.html:12491,error,error,12491,doc/master/classTExec.html,https://root.cern,https://root.cern/doc/master/classTExec.html,2,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static vecgeom::cxx::Transformation3D * Convert (TGeoMatrix const *const geomatrix);  Convert a TGeoMatrix to a TRansformation3D. ;  ; static vecgeom::cxx::VUnplacedVolume * Convert (TGeoShape const *const shape);  Convert a TGeo shape to VUnplacedVolume, then creates a VPlacedVolume. ;  ; static TGeoV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVGShape.html:13632,error,error,13632,doc/master/classTGeoVGShape.html,https://root.cern,https://root.cern/doc/master/classTGeoVGShape.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static void BuildParallelCoord (TSelectorDraw *selector, bool candle);  Call constructor and add the variables. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetEntryList (TPara",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:19155,error,error,19155,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttImage;  TAttImage ();  TAttImage default constructor. ;  ;  TAttImage (EImageQuality lquality, UInt_t lcompression, Bool_t constRatio);  TAttImage normal constructor. ;  ; virtual ~TAttImage ();  TAttImage destructor. ;  ; void Copy (TAttImage &attline) const;  Copy this image attributes to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImage.html:21858,error,error,21858,doc/master/classTASImage.html,https://root.cern,https://root.cern/doc/master/classTASImage.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArc.html:11017,error,error,11017,doc/master/classTArc.html,https://root.cern,https://root.cern/doc/master/classTArc.html,28,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttMarker;  TAttMarker ();  TAttMarker default constructor. ;  ;  TAttMarker (Color_t color, Style_t style, Size_t msize);  TAttMarker normal constructor. ;  ; virtual ~TAttMarker ();  TAttMarker destructor. ;  ; void Copy (TAttMarker &attmarker) const;  Copy this marker attributes to a new TA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveLine.html:30412,error,error,30412,doc/master/classTEveLine.html,https://root.cern,https://root.cern/doc/master/classTEveLine.html,10,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttText;  TAttText ();  AttText default constructor. ;  ;  TAttText (Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize);  AttText normal constructor. ;  ; virtual ~TAttText ();  AttText destructor. ;  ; void Copy (TAttText &atttext) const;  Copy this text attributes to a n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAnnotation.html:19562,error,error,19562,doc/master/classTAnnotation.html,https://root.cern,https://root.cern/doc/master/classTAnnotation.html,8,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TAxis3D * GetPadAxis (TVirtualPad *pad=nullptr);  Returns the ""pad"" Axis3D object pointer if any. ;  ; static Double_t * PixeltoXYZ (Double_t px, Double_t py, Double_t *point3D, TView *view=nullptr);  Convert ""screen pixel"" coordinates to some center of 3D WC coordinate if view and gPad present. ;  ; static TAxis3D * Togg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTAxis3D.html:13841,error,error,13841,doc/master/classTAxis3D.html,https://root.cern,https://root.cern/doc/master/classTAxis3D.html,1,['error'],['error']
Availability,"r new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Color_t GetLineColor () const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDiamond.html:15562,error,error,15562,doc/master/classTDiamond.html,https://root.cern,https://root.cern/doc/master/classTDiamond.html,4,['error'],['error']
Availability,"r of a class's init class (see the ClassImp macro). ;  ; void ResetClassVersion (TClass *, const char *, Short_t);  Global function to update the version number. ;  ; template<class RootClass > ; Short_t SetClassVersion (RootClass *);  ; std::vector< std::string > Split (std::string_view str, std::string_view delims, bool skipEmpty);  Splits a string at each character in delims. ;  ; static void StrReplace (std::string &proc, const std::string &pat, const std::string &tr);  Replace all accurances of given string with other string. ;  ; template<typename value_type > ; void ToHumanReadableSize (value_type bytes, Bool_t si, Double_t *coeff, const char **units);  Return the size expressed in 'human readable' format. ;  ; static Bool_t ValidateRule (const std::map< std::string, std::string > &rule, std::string &error_string);  Validate if the user specified rules are correct. ;  ; static void WriteAutoVariables (const std::list< std::string > &target, const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:13246,down,down,13246,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['down'],['down']
Availability,"r of bytes committed to the; 4571/// individual branches.; 4572///; 4573/// If a write error occurs, the number of bytes returned is -1.; 4574///; 4575/// If no data are written, because, e.g., the branch is disabled,; 4576/// the number of bytes returned is 0.; 4577///; 4578/// __The baskets are flushed and the Tree header saved at regular intervals__; 4579///; 4580/// At regular intervals, when the amount of data written so far is; 4581/// greater than fAutoFlush (see SetAutoFlush) all the baskets are flushed to disk.; 4582/// This makes future reading faster as it guarantees that baskets belonging to nearby; 4583/// entries will be on the same disk region.; 4584/// When the first call to flush the baskets happen, we also take this opportunity; 4585/// to optimize the baskets buffers.; 4586/// We also check if the amount of data written is greater than fAutoSave (see SetAutoSave).; 4587/// In this case we also write the Tree header. This makes the Tree recoverable up to this point; 4588/// in case the program writing the Tree crashes.; 4589/// The decisions to FlushBaskets and Auto Save can be made based either on the number; 4590/// of bytes written (fAutoFlush and fAutoSave negative) or on the number of entries; 4591/// written (fAutoFlush and fAutoSave positive).; 4592/// Note that the user can decide to call FlushBaskets and AutoSave in her event loop; 4593/// base on the number of events written instead of the number of bytes written.; 4594///; 4595/// \note Calling `TTree::FlushBaskets` too often increases the IO time.; 4596///; 4597/// \note Calling `TTree::AutoSave` too often increases the IO time and also the; 4598/// file size.; 4599///; 4600/// \note This method calls `TTree::ChangeFile` when the tree reaches a size; 4601/// greater than `TTree::fgMaxTreeSize`. This doesn't happen if the tree is; 4602/// attached to a `TMemFile` or derivate.; 4603 ; 4604Int_t TTree::Fill(); 4605{; 4606 Int_t nbytes = 0;; 4607 Int_t nwrite = 0;; 4608 Int_t nerror = 0;; 4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:186206,recover,recoverable,186206,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['recover'],['recoverable']
Availability,"r of entries printed; n = 1; name of histogram is printed; Example: gStyle->SetOptStat(11);; print only name of histogram and number of entries.; gStyle->SetOptStat(1101); displays the name of histogram, mean value and RMS.; WARNING: never call SetOptStat(000111); but SetOptStat(1111), 0001111 will; be taken as an octal number !!; WARNING: SetOptStat(1) is taken as SetOptStat(1111) (for back compatibility; with older versions. If you want to print only the name of the histogram; call SetOptStat(1000000001).; NOTE that in case of 2-D histograms, when selecting just underflow (10000); or overflow (100000), the stats box will show all combinations; of underflow/overflows and not just one single number!. void SetOptStat(Option_t* stat); The parameter mode can be any combination of kKsSiourRmMen; k : kurtosis printed; K : kurtosis and kurtosis error printed; s : skewness printed; S : skewness and skewness error printed; i : integral of bins printed; o : number of overflows printed; u : number of underflows printed; r : rms printed; R : rms and rms error printed; m : mean value printed; M : mean value mean error values printed; e : number of entries printed; n : name of histogram is printed; Example: gStyle->SetOptStat(""ne"");; print only name of histogram and number of entries.; gStyle->SetOptStat(""n"") print only the name of the histogram; gStyle->SetOptStat(""nemr"") is the default. void SetPaperSize(TStyle::EPaperSize size); Set paper size for PostScript output. void SetPaperSize(Float_t xsize = 20, Float_t ysize = 26); Set paper size for PostScript output.; The paper size is specified in centimeters. Default is 20x26.; See also TPad::Print. void SetTickLength(Float_t length = 0.03, Option_t* axis = ""X""); Set the tick marks length for an axis.; axis specifies which axis (""x"",""y"",""z""), default = ""x""; if axis=""xyz"" set all 3 axes. void SetTitleColor(Color_t color = 1, Option_t* axis = ""X""); if axis ==""x"" set the X axis title color; if axis ==""y"" set the Y axis title color; i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyle.html:33984,error,error,33984,root/html528/TStyle.html,https://root.cern,https://root.cern/root/html528/TStyle.html,12,['error'],['error']
Availability,"r of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorEntries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t en",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSelectorEntries.html:7248,avail,available,7248,root/html602/TSelectorEntries.html,https://root.cern,https://root.cern/root/html602/TSelectorEntries.html,1,['avail'],['available']
Availability,"r of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TSelectorEntries.html:7224,avail,available,7224,root/html604/TSelectorEntries.html,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html,1,['avail'],['available']
Availability,"r of slaves the message; was sent to. Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TList* slaves); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastRaw(const void* buffer, Int_t length, TProof::ESlaves list = kActive); Broadcast a raw buffer of specified length to all slaves in the; specified list. Returns the number of slaves the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile, TList* wrks); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. Int_t BroadcastFile(const char* file, Int_t opt, const char* rfile = 0, TProof::ESlaves list = kAllUnique); Broadcast file to all workers in the specified list. Returns the number of workers; the buffer was sent to.; Returns -1 in case of error. void ReleaseMonitor(TMonitor* mon); Release the used monitor to be used, making sure to delete newly created; monitors. Int_t Collect(const TSlave* sl, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from slave sl. Returns the number of slaves that; responded (=1).; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(TList* slaves, Long_t timeout = -1, Int_t endtype = -1, Bool_t deactonfail = kFALSE); Collect responses from the slave servers. Returns the number of slaves; that responded.; If timeout >= 0, wait at most timeout seconds (timeout = -1 by default,; which means wait forever).; If defined (>= 0) endtype is the message that stops this collection. Int_t Collect(ESlaves list, Long_t timeout, Int_t endtype, Bool_t deactonfail); Collect responses from the slave servers. Returns the number of sla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:41458,error,error,41458,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"r on Y.Definition TGraphAsymmErrors.cxx:1173; TGraphAsymmErrors::MergeInt_t Merge(TCollection *list) overrideAdds all graphs with asymmetric errors from the collection to this graph.Definition TGraphAsymmErrors.cxx:1196; TGraphAsymmErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t i) const overrideGet low error on X.Definition TGraphAsymmErrors.cxx:1162; TGraphAsymmErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphAsymmErrors.h:31; TGraphAsymmErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values.Definition TGraphAsymmErrors.cxx:1468; TGraphAsymmErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphAsymmErrors.cxx:1456; TGraphAsymmErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphAsymmErrors.h:75; TGraphAsymmErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphAsymmErrors.h:29; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::IsATClass * IsA() const overrideDefinition TGraphAsymmErrors.h:89; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:62874,error,errorsDefinition,62874,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,1,['error'],['errorsDefinition']
Availability,"r on Y.Definition TGraphAsymmErrors.cxx:1173; TGraphAsymmErrors::MergeInt_t Merge(TCollection *list) overrideAdds all graphs with asymmetric errors from the collection to this graph.Definition TGraphAsymmErrors.cxx:1196; TGraphAsymmErrors::GetErrorXlowDouble_t GetErrorXlow(Int_t i) const overrideGet low error on X.Definition TGraphAsymmErrors.cxx:1162; TGraphAsymmErrors::fEYlowDouble_t * fEYlow[fNpoints] array of Y low errorsDefinition TGraphAsymmErrors.h:31; TGraphAsymmErrors::UpdateArraysvoid UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideUpdate the fX, fY, fEXlow, fEXhigh, fEYlow and fEYhigh arrays with the sorted values.Definition TGraphAsymmErrors.cxx:1468; TGraphAsymmErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphAsymmErrors.cxx:1456; TGraphAsymmErrors::GetEXhighDouble_t * GetEXhigh() const overrideDefinition TGraphAsymmErrors.h:75; TGraphAsymmErrors::fEXlowDouble_t * fEXlow[fNpoints] array of X low errorsDefinition TGraphAsymmErrors.h:29; TGraphAsymmErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphAsymmErrors.cxx:468; TGraphAsymmErrors::AllocateDouble_t ** Allocate(Int_t size) overrideAllocate internal data structures for size points.Definition TGraphAsymmErrors.cxx:444; TGraphAsymmErrors::GetEYlowDouble_t * GetEYlow() const overrideDefinition TGraphAsymmErrors.h:76; TGraphAsymmErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with asymmetric errors.Definition TGraphAsymmErrors.cxx:1077; TGraphAsymmErrors::CopyAndReleasevoid CopyAndRelease(Double_t **newarrays, Int_t ibegin, Int_t iend, Int_t obegin) overrideCopy and release.Definition TGraphAsymmErrors.cxx:1007; TGraphAsymmErrors::SetPointEXhighvirtual void SetPointEXhigh(Int_t i, Double_t exh)Set EXhigh for point i.Definition TGraphAsymmErrors.cxx:1362; TGraphAsymmErrors::GetErrorYlowDouble_t GetErro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html:11622,error,errorsDefinition,11622,doc/master/TGraphAsymmErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8h_source.html,1,['error'],['errorsDefinition']
Availability,"r optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. Class Charts. Inh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnixSystem.html:19000,mask,mask,19000,root/html534/TUnixSystem.html,https://root.cern,https://root.cern/root/html534/TUnixSystem.html,9,['mask'],"['mask', 'masks']"
Availability,"r optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. set<voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGSystem.html:18210,mask,mask,18210,root/html534/TNetXNGSystem.html,https://root.cern,https://root.cern/root/html534/TNetXNGSystem.html,9,['mask'],"['mask', 'masks']"
Availability,"r optimized compilation; TSeqCollection*TSystem::fHelpersList of helper classes for alternative file/directory access; TStringTSystem::fHostnameHostname; Bool_tTSystem::fInControlTrue if in eventloop; TStringTSystem::fIncludePathUsed to expand $IncludePath in the directives given to SetMakeSharedLib and SetMakeExe; Bool_tTSystem::fInsideNotifyUsed by DispatchTimers(); Int_tTSystem::fLevelLevel of nested eventloops; TStringTSystem::fLinkdefSuffixDefault suffix for linkdef files to be used by ACLiC (see EACLiCProperties); TStringTSystem::fLinkedLibsUsed to expand $LinkedLibs in the directives given to SetMakeSharedLib and SetMakeExe; TStringTSystem::fListLibsList shared libraries, cache used by GetLibraries; TStringTSystem::fListPathsList of all include (fIncludePath + interpreter include path). Cache used by GetIncludePath; TStringTSystem::fMakeExeDirective used to build an executable; TStringTSystem::fMakeSharedLibDirective used to build a shared library; Int_tTSystem::fMaxrfdLargest fd in read mask; Int_tTSystem::fMaxwfdLargest fd in write mask; TStringTNamed::fNameobject identifier; Int_tTSystem::fNfdNumber of fd's in masks; TStringTSystem::fObjExtExtension of object files (.o, .obj, etc.); TSeqCollection*TSystem::fOnExitListList of items to be cleaned-up on exit; TFdSet*TSystem::fReadmask!Files that should be checked for read events; TFdSet*TSystem::fReadready!Files with reads waiting; Int_tTSystem::fSigcntNumber of pending signals; TSeqCollection*TSystem::fSignalHandlerList of signal handlers; TFdSet*TSystem::fSignals!Signals that were trapped; TStringTSystem::fSoExtExtension of shared library (.so, .sl, .a, .dll, etc.); TSeqCollection*TSystem::fStdExceptionHandlerList of std::exception handlers; TSeqCollection*TSystem::fTimersList of timers; TStringTNamed::fTitleobject title; TStringTSystem::fWdpathWorking directory; TFdSet*TSystem::fWritemask!Files that should be checked for write events; TFdSet*TSystem::fWriteready!Files with writes waiting. private:. void*fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TWebSystem.html:17935,mask,mask,17935,root/html534/TWebSystem.html,https://root.cern,https://root.cern/root/html534/TWebSystem.html,9,['mask'],"['mask', 'masks']"
Availability,"r or the tool bar. void DoDelete(); Delete the current selected style from the ROOT session.; Called via the menu or the tool bar. void DoRename(); Rename the current selected style. Called via the menu bar. void DoExport(); Save the current selected style in a C++ macro file. Called via the menu; or the tool bar. void DoExit(); Close the style manager. Called via the menu bar. void DoHelp(Int_t i); Open an help window. Called via the menu bar or the tool bar. void DoImportCanvas(); Create a new style (a copy of gStyle) and import the properties of the; current canvas inside. void CreateMacro(); Create a TGFileInfo concerning a macro, if it doesn't exist already. void AddToolbar(TGCompositeFrame* p); Add the tool bar to the frame 'p'. void AddTopLevelInterface(TGCompositeFrame* cf); Add the top level interface to the frame 'cf'. This part of the; interface will provide all enable functionalities, excluding the; edition of styles. void BuildList(TStyle* style = 0); Build the list of styles which will appear in the available styles; combo box. The new style to select is mentioned. If no style has; been specified, the last entry of the list is selected. void UpdateStatusBar(); Update the content of the status bar: show the name of the current; selected style, its title and the macro from which it has been imported. void UpdateEditor(Int_t tabNum); Update the values of every widget entry in the editor. The new values; are loaded from the current selected style. void ConnectAll(); Connect every entry in the top level interface to the slot. void DisconnectAll(); Disconnect every entry in the top level interface of the slot. void ConnectEditor(Int_t tabNum); Connect every widget entry of the editor to its specific slot. void DisconnectEditor(Int_t tabNum); Disconnect every widget entry of the editor from its slot. Must be; called before UpdateEditor() to avoid recursive calls. void DoEditor(); Called each time something is changed in the style editor. Thanks to; this metho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStyleManager.html:50078,avail,available,50078,root/html528/TStyleManager.html,https://root.cern,https://root.cern/root/html528/TStyleManager.html,6,['avail'],['available']
Availability,"r performance); Bool_tfStatCached! (transient) is file status cached?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDCacheFile(const char* path, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Create a dCache file object. A dCache file is the same as a TFile; except that it is being accessed via a dCache server. The url; argument must be of the form: dcache:/pnfs/<path>/<file>.root or; dcap://<nodename.org>/<path>/<file>.root. If the file specified in the; URL does not exist, is not accessable or can not be created the kZombie; bit will be set in the TDCacheFile object. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to E",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDCacheFile.html:23139,error,error,23139,root/html528/TDCacheFile.html,https://root.cern,https://root.cern/root/html528/TDCacheFile.html,3,['error'],['error']
Availability,"r performance); Bool_tfStatCached! (transient) is file status cached?. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDCacheFile(const char* path, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); Create a dCache file object. A dCache file is the same as a TFile; except that it is being accessed via a dCache server. The url; argument must be of the form: dcache:/pnfs/<path>/<file>.root or; dcap://<nodename.org>/<path>/<file>.root. If the file specified in the; URL does not exist, is not accessable or can not be created the kZombie; bit will be set in the TDCacheFile object. Use IsZombie() to see if the; file is accessable. For a description of the option and other arguments; see the TFile ctor. The preferred interface to this constructor is; via TFile::Open(). ~TDCacheFile(); Close and cleanup dCache file. Bool_t ReadBuffer(char* buf, Int_t len); Read specified byte range from remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t ReadBuffers(char* buf, Long64_t* pos, Int_t* len, Int_t nbuf); Read the nbuf blocks described in arrays pos and len,; where pos[i] is the seek position of block i of length len[i].; Note that for nbuf=1, this call is equivalent to TFile::ReafBuffer.; This function is overloaded by TNetFile, TWebFile, etc.; Returns kTRUE in case of failure. Bool_t WriteBuffer(const char* buf, Int_t len); Write specified byte range to remote file via dCache daemon.; Returns kTRUE in case of error. Bool_t Stage(const char* path, UInt_t secs, const char* location = 0); Stage() returns kTRUE on success and kFALSE on failure. Bool_t CheckFile(const char* path, const char* location = 0); CheckFile() returns kTRUE on success and kFALSE on failure. In; case the file exists but is not cached, CheckFile() returns; kFALSE and errno is set to EAGAIN. void SetOpenTimeout(UInt_t secs); Set file open timeout. void SetOnError(TDCacheFile::OnErrorAction = kOnErrorDefault); Set on error handler. v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDCacheFile.html:23039,error,error,23039,root/html526/TDCacheFile.html,https://root.cern,https://root.cern/root/html526/TDCacheFile.html,1,['error'],['error']
Availability,"r pidf is read from this file.; If the object is not already entered in the gROOT list, it is added. Int_t Recover(); Attempt to recover file if not correctly closed.; The function returns the number of keys that have been recovered.; If no keys can be recovered, the file will be declared Zombie by; the calling function. This function is automatically called when; opening a file. If the file is open in read only mode, the file is not modified.; If open in update mode and the function finds something to recover,; a new directory header is written to the file. When opening the file gain; no message from Recover will be reported.; If keys have been recovered, the file is usable and you can safely; read the corresponding objects.; If the file is not usable (a zombie), you can test for this case; with code like:; TFile f(""myfile.root"");; if (f.IsZombie()) {file is unusable); If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; You can test if the file has been recovered with; if (f.TestBit(TFile::kRecovered)) {.. the file has been recovered}. When writing TTrees to a file, it is important to save the Tree header; at regular intervals (see TTree::AutoSave). If a file containing a Tree; is recovered, the last Tree header written to the file will be used.; In this case all the entries in all the branches written before writing; the header are valid entries. One can disable the automatic recovery procedure by setting; TFile.Recover 0; in the system.rootrc file. Int_t ReOpen(Option_t* mode); Reopen a file with a different access mode, like from READ to; UPDATE or from NEW, CREATE, RECREATE, UPDATE to READ. Thus the; mode argument can be either ""READ"" or ""UPDATE"". The method returns; 0 in case the mode was successfully modified, 1 in case the mode; did not change (was already as requested or wrong input arguments); and -1 in case of failure, in which case the file cannot be used; anymore. The current directory (gFile) is changed to this fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:35392,recover,recovered,35392,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,6,['recover'],['recovered']
Availability,"r points lying outside the interpolated area. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGraph2DErrors(); TGraph2DErrors default constructor. TGraph2DErrors(Int_t n); TGraph2DErrors normal constructor; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph2DErrors.html:13252,error,errors,13252,root/html530/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html530/TGraph2DErrors.html,2,['error'],['errors']
Availability,"r protocol; cnf_file=filename Read options from the named option file instead of; from my.cnf; cnf_group=groupname Read options from the named group from my.cnf or the; file specified with cnf_file option; If several parameters are specified, they should be separated by ""&"" symbol; Example of connection argument:; TSQLServer::Connect(""mysql://host.domain/test?timeout=10&multi_statements"");. ~TMySQLServer(); Close connection to MySQL DB server. void Close(Option_t* opt = """"); Close connection to MySQL DB server. TSQLResult * Query(const char* sql); Execute SQL command. Result object must be deleted by the user.; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. Bool_t Exec(const char* sql); Execute SQL command which does not produce any result sets.; Returns kTRUE if successful. Int_t SelectDataBase(const char* dbname); Select a database. Returns 0 if successful, non-zero otherwise. TSQLResult * GetDataBases(const char* wild = 0); List all available databases. Wild is for wildcarding ""t%"" list all; databases starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. TSQLResult * GetTables(const char* dbname, const char* wild = 0); List all tables in the specified database. Wild is for wildcarding; ""t%"" list all tables starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherwise.; The result object must be deleted by the user. TList* GetTablesList(const char* wild = 0); Return list of tables with specified wildcard. TSQLTableInfo * GetTableInfo(const char* tablename); Produces SQL table info.; Object must be deleted by user. TSQLResult * GetColumns(const char* dbname, const char* table, const char* wild = 0); List all columns in specified table in the specified database.; Wild is for wildcarding ""t%"" list all columns starting with ""t"".; Returns a pointer to a TSQLResult object if successful, 0 otherw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMySQLServer.html:10590,avail,available,10590,root/html528/TMySQLServer.html,https://root.cern,https://root.cern/root/html528/TMySQLServer.html,6,['avail'],['available']
Availability,"r regularization (L1 or L2)Definition NeuralNet.icc:498; TMVA::DNN::InvSoftSignstd::shared_ptr< std::function< double(double)> > InvSoftSignDefinition NeuralNet.cxx:20; TMVA::DNN::InvGaussComplementstd::shared_ptr< std::function< double(double)> > InvGaussComplementDefinition NeuralNet.cxx:15; TMVA::DNN::computeRegularization< EnumRegularization::L2 >double computeRegularization< EnumRegularization::L2 >(double weight, const double &factorWeightDecay)Definition NeuralNet.icc:226; TMVA::DNN::regularizationauto regularization(const typename Architecture_t::Matrix_t &A, ERegularization R) -> decltype(Architecture_t::L1Regularization(A))Evaluate the regularization functional for a given weight matrix.Definition Functions.h:238; TMVA::DNN::ModeErrorFunction::CROSSENTROPY@ CROSSENTROPY; TMVA::DNN::ModeErrorFunction::SUMOFSQUARES@ SUMOFSQUARES; TMVA::DNN::ModeErrorFunction::CROSSENTROPY_MUTUALEXCLUSIVE@ CROSSENTROPY_MUTUALEXCLUSIVE; TMVA::DNN::softMaxCrossEntropydouble softMaxCrossEntropy(ItOutput itProbabilityBegin, ItOutput itProbabilityEnd, ItTruth itTruthBegin, ItTruth itTruthEnd, ItDelta itDelta, ItDelta itDeltaEnd, ItInvActFnc itInvActFnc, double patternWeight)soft-max-cross-entropy error function (for mutual exclusive cross-entropy)Definition NeuralNet.icc:458; TMVA::DNN::InvTanhstd::shared_ptr< std::function< double(double)> > InvTanhDefinition NeuralNet.cxx:22; TMVA::DNN::Linearstd::shared_ptr< std::function< double(double)> > LinearDefinition NeuralNet.cxx:24; TMVA::DNN::WeightInitializationStrategyWeightInitializationStrategyweight initialization strategies to be chosen fromDefinition NeuralNet.h:1050; TMVA::DNN::WeightInitializationStrategy::TEST@ TEST; TMVA::DNN::WeightInitializationStrategy::XAVIERUNIFORM@ XAVIERUNIFORM; TMVA::DNN::WeightInitializationStrategy::XAVIER@ XAVIER; TMVA::DNN::WeightInitializationStrategy::LAYERSIZE@ LAYERSIZE; TMVA::DNN::InvReLUstd::shared_ptr< std::function< double(double)> > InvReLUDefinition NeuralNet.cxx:17; TMVA::DNN::GaussCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:74941,error,error,74941,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['error'],['error']
Availability,"r relevant classes. A successful example of this is the PHP.net documentation with its user annotations. THtml can include a link to a class’s Wiki page by setting the Wiki base URL via Root.Html.WikiURL or THtml::SetWikiURL().; 27.5 Tutorial; You can run the tutorial htmlex.C to see how THtml converts a script to HTML and how it creates the corresponding class reference:; root[] .x $(ROOTSYS)/tutorials/htmlex.C+; Have a look at the HTML version of the macro in htmldoc/htmlex.C.html(which should be the same as the one at http://root.cern.ch/root/html/examples/htmlex.C.html).; It demonstrates how to generate documentation for your classes and for ROOT classes and how to “beautify” a macro.; 28 Appendix A: Install and Build ROOT. 28.1 License; ROOT is made available under the LGPL v2.1 license. For full details see the file LICENSE in the ROOT distribution.; 28.2 Installing ROOT; To install ROOT you will need to go to the ROOT website at: https://root.cern/install/; You have a choice to download the binaries or the source. The source is quicker to transfer since it is only 31 MB, but you will need to compile and link it. The binaries range from 50 MB to 100 MB depending on the target platform.; 28.3 Choosing a Version; The ROOT developers follow the principle of “release early and release often”, however a very large portion of a user base requires a stable product therefore generally three versions of the system is available for download - new, old and pro:. The new version evolves quickly, with weekly or bi-weekly releases. Use this to get access to the latest and greatest, but it may not be stable. By trying out the new version you can help us converge quickly to a stable version that can then become the new pro version. If you are a new user we would advice you to try the new version.; The pro (production) version is a version we feel comfortable with to exposing to a large audience for serious work. The change rate of this version is much lower than for the new v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1251748,down,download,1251748,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['down'],['download']
Availability,"r settings from number of parameters and a vector of values and optionally step values. ;  ; void SetUpdateAfterFit (bool on=true);  Update configuration after a fit using the FitResult. ;  ; void SetWeightCorrection (bool on=true);  apply the weight correction for error matrix computation ;  ; bool UpdateAfterFit () const;  Update configuration after a fit using the FitResult. ;  ; bool UseWeightCorrection () const;  Apply Weight correction for error matrix computation. ;  . Static Public Member Functions; static void SetDefaultMinimizer (const char *type, const char *algo=nullptr);  static function to control default minimizer type and algorithm ;  . Private Attributes; ROOT::Math::MinimizerOptions fMinimizerOpts;  minimizer control parameters including name and algo type ;  ; bool fMinosErrors;  do full error analysis using Minos ;  ; std::vector< unsigned int > fMinosParams;  vector with the parameter indices for running Minos ;  ; bool fNormErrors;  flag for error normalization ;  ; bool fParabErrors;  get correct parabolic errors estimate (call Hesse after minimizing) ;  ; std::vector< ROOT::Fit::ParameterSettings > fSettings;  vector with the parameter settings ;  ; bool fUpdateAfterFit;  update the configuration after a fit using the result ;  ; bool fWeightCorr;  apply correction to errors for weights fits ;  . #include <Fit/FitConfig.h>; Constructor & Destructor Documentation. ◆ FitConfig() [1/2]. ROOT::Fit::FitConfig::FitConfig ; (; unsigned int ; npar = 0). Default constructor. ; Definition at line 40 of file FitConfig.cxx. ◆ FitConfig() [2/2]. ROOT::Fit::FitConfig::FitConfig ; (; const FitConfig & ; rhs). Definition at line 57 of file FitConfig.cxx. ◆ ~FitConfig(). ROOT::Fit::FitConfig::~FitConfig ; (; ). Destructor. ; Definition at line 52 of file FitConfig.cxx. Member Function Documentation. ◆ CreateMinimizer(). ROOT::Math::Minimizer * ROOT::Fit::FitConfig::CreateMinimizer ; (; ). create a new minimizer according to chosen configuration ; Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html:4293,error,error,4293,doc/master/classROOT_1_1Fit_1_1FitConfig.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig.html,4,['error'],"['error', 'errors']"
Availability,"r std::vector, there's; 380 // is going to be only minor overhead in c++11.; 381 const double * GetPoint( unsigned int ipoint, double & value ) const; 382 {; 383 assert( ipoint < fMaxPoints );; 384 value = Value( ipoint );; 385 ; 386 return Coords( ipoint );; 387 }; 388 ; 389 /**; 390 returns a single coordinate error component of a point.; 391 This function is threadsafe in contrast to Coords(...); 392 and can easily get vectorized by the compiler in loops; 393 running over the ipoint-index.; 394 */; 395 double GetCoordErrorComponent( unsigned int ipoint, unsigned int icoord ) const; 396 {; 397 assert( ipoint < fMaxPoints );; 398 assert( icoord < fDim );; 399 assert( fCoordErrorsPtr.size() == fDim );; 400 assert( fCoordErrorsPtr[icoord] );; 401 assert( fCoordErrors.empty() || &fCoordErrors[icoord].front() == fCoordErrorsPtr[icoord] );; 402 ; 403 return fCoordErrorsPtr[icoord][ipoint];; 404 }; 405 ; 406 /**; 407 Return a pointer to the errors in the coordinates for the given fit point; 408 */; 409 // not threadsafe, to be replaced with never constructs!; 410 // for example: just return std::array or std::vector, there's; 411 // is going to be only minor overhead in c++11.; 412 const double* CoordErrors( unsigned int ipoint ) const; 413 {; 414 assert( ipoint < fMaxPoints );; 415 assert( fpTmpCoordErrorVector );; 416 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 417 ; 418 for ( unsigned int i=0; i < fDim; i++ ); 419 {; 420 assert( fCoordErrorsPtr[i] );; 421 assert( fCoordErrors.empty() || &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 422 ; 423 fpTmpCoordErrorVector[i] = fCoordErrorsPtr[i][ipoint];; 424 }; 425 ; 426 return fpTmpCoordErrorVector;; 427 }; 428 ; 429 ; 430 /**; 431 retrieve in a single call a pointer to the coordinate data, value and inverse error for; 432 the given fit point.; 433 To be used only when type is kValueError or kNoError. In the last case the value 1 is returned; 434 for the error.; 435 */; 436 // not threadsafe, to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:14278,error,errors,14278,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['errors']
Availability,"r supports them ) otherwise as default se...Definition GeneticMinimizer.cxx:146; ROOT::Math::GeneticMinimizer::SetOptionsvirtual void SetOptions(const ROOT::Math::MinimizerOptions &opt)Definition GeneticMinimizer.cxx:217; ROOT::Math::GeneticMinimizer::MinValuedouble MinValue() const overridereturn minimum function valueDefinition GeneticMinimizer.cxx:331; ROOT::Math::GeneticMinimizer::Errorsconst double * Errors() const overridereturn errors at the minimumDefinition GeneticMinimizer.cxx:366; ROOT::Math::GeneticMinimizer::NCallsunsigned int NCalls() const overridenumber of function calls to reach the minimumDefinition GeneticMinimizer.cxx:340; ROOT::Math::GeneticMinimizer::Minimizebool Minimize() overridemethod to perform the minimizationDefinition GeneticMinimizer.cxx:252; ROOT::Math::GeneticMinimizer::GetGeneticOptionsvoid GetGeneticOptions(ROOT::Math::MinimizerOptions &opt) constDefinition GeneticMinimizer.cxx:191; ROOT::Math::GeneticMinimizer::ProvidesErrorbool ProvidesError() const overrideminimizer provides error and error matrixDefinition GeneticMinimizer.cxx:365; ROOT::Math::GeneticMinimizer::SetVariablebool SetVariable(unsigned int ivar, const std::string &name, double val, double step) overrideset a new free variableDefinition GeneticMinimizer.cxx:153; ROOT::Math::GeneticMinimizer::fResultstd::vector< double > fResultDefinition GeneticMinimizer.h:109; ROOT::Math::GeneticMinimizer::fFitnessTMVA::IFitterTarget * fFitnessDefinition GeneticMinimizer.h:107; ROOT::Math::GeneticMinimizer::fRangesstd::vector< TMVA::Interval * > fRangesDefinition GeneticMinimizer.h:106; ROOT::Math::GeneticMinimizer::SetParametersvoid SetParameters(const GeneticMinimizerParameters &params)Definition GeneticMinimizer.cxx:177; ROOT::Math::GeneticMinimizer::MinGradientconst double * MinGradient() const overridereturn pointer to gradient values at the minimumDefinition GeneticMinimizer.cxx:364; ROOT::Math::GeneticMinimizer::Edmdouble Edm() const overridereturn expected distance reached f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneticMinimizer_8h_source.html:5980,error,error,5980,doc/master/GeneticMinimizer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneticMinimizer_8h_source.html,2,['error'],['error']
Availability,"r testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.01 regularization 0 minimum error = 0.699892; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.548477 0.466013 0.191275 0.014698 9061.23 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.431501 0.379356 0.191981 0.0145985 9020.06 0; : 3 | 0.40241 0.379482 0.19151 0.014162 9021.8 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.408996 0.379041 0.192713 0.0146534 8985.76 0; : 5 | 0.41143 0.414316 0.191728 0.014237 9014.55 1; : 6 | 0.385066 0.478603 0.19226 0.0142608 8988.82 2; : 7 | 0.404168 0.388159 0.192259 0.0142353 8987.58 3; : 8 Minimum Test error found - save the configuration ; : 8 | 0.394387 0.377539 0.19273 0.0147168 8988.1 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.386834 0.375541 0.192946 0.014741 8978.44 0; : 10 | 0.381359 0.385778 0.195351 0.0142527 8835 1; : 11 | 0.391916 0.415129 0.193961 0.0143386 8907.56 2; : 12 | 0.390755 0.379468 0.194376 0.0145555 8897.75 3; : 13 | 0.409355 0.396515 0.195082 0.0144231 8856.49 4; : 14 | 0.400917 0.375809 0.194321 0.0142902 8887.36 5; : 15 | 0.384495 0.401588 0.194138 0.0144019 8901.96 6; : 16 | 0.400658 0.401489 0.198047 0.014311 8708.13 7; : 17 Minimum Test error found - save the configuration ; : 17 | 0.386851 0.371455 0.194859 0.0148291 8887.42 0; : 18 | 0.389253 0.376491 0.196282 0.0143574 8794.87 1; : 19 | 0.378227 0.384958 0.199317 0.0143422 8649.85 2; : 20 | 0.387911 0.390858 0.193697 0.0144047 8923.97 3; : 21 | 0.391998 0.3743 0.194318 0.0146357 8904.63 4; : 22 | 0.396695 0.384671 0.194406 0.0145452 8895.77 5; : 23 | 0.38744 0.376683 0.195092 0.0143629 885",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:47934,error,error,47934,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['error'],['error']
Availability,"r the creation of a hierarchical link between two volumes. As it will be described further on in this document, there are few other methods performing similar actions, but let us keep things simple for the time being. In addition, notice that there are some visualization-related calls in the example followed by a final TGeoVolume::Draw() call for the top volume. These are explained in details in the section ""Visualization Settings and Attributes"". At this point, you will probably like to see how this geometry looks like. You just need to run the example and you will get the following picture that you can rotate using the mouse; or you can zoom / move it around (see what the Help menu of the GL window displays).; % root rootgeom.C; rootgeomTGeoNode * rootgeom()Definition eveGeoBrowser.C:47. Now let us browse the hierarchy that was just created. Start a browser and double-click on the item simple1 representing the gGeoManager object. Note that right click opens the context menu of the manager class where several global methods are available.; root[] new TBrowser;; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37. The folders Materials, Media and Local transformations are in fact the containers where the geometry manager stores the corresponding objects. The Illegal overlaps folder is empty but can be filled after performing a geometry validity check (see section: ""Checking the; Geometry""). If tracking is performed using TGeo, the folder Tracks might contain user-defined tracks that can be visualized/animated in the geometry context (see section: ""Creating and; Visualizing Tracks""). Since for the time being we are interested more in the geometrical hierarchy, we will focus on the last two displayed items TOPand TOP_1. These are the top volume and the corresponding top node in the hierarchy.; Double clicking on the TOP volume will unfold all different volumes contained by the top volume. In the right panel, we will see all the volumes co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:11842,avail,available,11842,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['avail'],['available']
Availability,"r the data points outside the visible range along the Y axis (see example below). |; 232| ""2"" | Error rectangles are drawn. |; 233| ""3"" | A filled area is drawn through the end points of the vertical error bars. |; 234| ""4"" | A smoothed filled area is drawn through the end points of the vertical error bars. |; 235| ""5"" | Error rectangles are drawn like option ""2"". In addition the contour line around the boxes is drawn. This can be useful when boxes' fill colors are very light or in gray scale mode. |; 236 ; 237 ; 238`gStyle->SetErrorX(dx)` controls the size of the error along x.; 239`dx = 0` removes the error along x.; 240 ; 241`gStyle->SetEndErrorSize(np)` controls the size of the lines; 242at the end of the error bars (when option 1 is used).; 243By default `np=1`. (np represents the number of pixels).; 244 ; 245\anchor GrP3a; 246#### TGraphErrors; 247 ; 248A `TGraphErrors` is a `TGraph` with error bars. The errors are; 249defined along X and Y and are symmetric: The left and right errors are the same; 250along X and the bottom and up errors are the same along Y.; 251 ; 252Begin_Macro(source); 253{; 254 auto c4 = new TCanvas(""c4"",""c4"",200,10,600,400);; 255 double x[] = {0, 1, 2, 3, 4};; 256 double y[] = {0, 2, 4, 1, 3};; 257 double ex[] = {0.1, 0.2, 0.3, 0.4, 0.5};; 258 double ey[] = {1, 0.5, 1, 0.5, 1};; 259 auto ge = new TGraphErrors(5, x, y, ex, ey);; 260 ge->SetTitle(""A graph with errors"");; 261 ge->Draw(""ap"");; 262}; 263End_Macro; 264 ; 265The option ""0"" shows the error bars for data points outside range.; 266 ; 267Begin_Macro(source); 268{; 269 auto c48 = new TCanvas(""c48"",""c48"",200,10,600,400);; 270 float x[] = {1,2,3};; 271 float err_x[] = {0,0,0};; 272 float err_y[] = {5,5,5};; 273 float y[] = {1,4,9};; 274 auto tg = new TGraphErrors(3,x,y,err_x,err_y);; 275 c48->Divide(2,1);; 276 c48->cd(1); gPad->DrawFrame(0,0,4,8); tg->Draw(""PC"");; 277 c48->cd(2); gPad->DrawFrame(0,0,4,8); tg->Draw(""0PC"");; 278}; 279End_Macro; 280 ; 281The option ""3"" shows the errors a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:10121,error,errors,10121,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,3,['error'],['errors']
Availability,"r the four different samples: data, higgs, zz and other (this is specific to this particular analysis); 148histos = []; 149for sample_category in [""data"", ""higgs"", ""zz"", ""other""]:; 150 histos.append(; 151 df.Filter(f'sample_category == ""{sample_category}""').Histo1D(; 152 ROOT.RDF.TH1DModel(f""{sample_category}"", ""m4l"", 24, 80, 170),; 153 ""m4l"",; 154 ""weight"",; 155 ); 156 ); 157 ; 158# Evaluate the systematic uncertainty; 159 ; 160# The systematic uncertainty in this analysis is the MC scale factor uncertainty that depends on lepton; 161# kinematics such as pT or pseudorapidity.; 162# Muons uncertainties are negligible, as stated in https://atlas.web.cern.ch/Atlas/GROUPS/PHYSICS/PAPERS/MUON-2018-03/.; 163# Electrons uncertainties are evaluated based on the plots available in https://doi.org/10.48550/arXiv.1908.00005.; 164# The uncertainties are linearly interpolated, using the `TGraph::Eval()` method, to cover a range of pT values covered by the analysis.; 165 ; 166# Create a VaryHelper to interpolate the available data.; 167ROOT.gInterpreter.Declare(; 168 """"""; 169using namespace ROOT::VecOps;; 170 ; 171class VaryHelper; 172{; 173 const std::vector<double> x{5.50e3, 5.52e3, 12.54e3, 17.43e3, 22.40e3, 27.48e3, 30e3, 10000e3};; 174 const std::vector<double> y{0.06628, 0.06395, 0.06396, 0.03372, 0.02441, 0.01403, 0, 0};; 175 TGraph graph;; 176 ; 177public:; 178 VaryHelper() : graph(x.size(), x.data(), y.data()) {}; 179 RVec<double> operator()(const double &w, const RVecF &pt, const RVec<unsigned int> &type); 180 {; 181 const auto v = Mean(Map(pt[type == 11], [this](auto p); 182 {return this->graph.Eval(p); }); 183 );; 184 return RVec<double>{(1 + v) * w, (1 - v) * w};; 185 }; 186};; 187 ; 188VaryHelper variationsFactory;; 189""""""; 190); 191 ; 192# Use the Vary method to add the systematic variations to the total MC scale factor (""weight"") of the analysis.; 193df_variations_mc = (; 194 df.Filter(""isMC == true""); 195 .Vary(""weight"", ""variationsFactory(weight, goodlep_pt, goo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html:7946,avail,available,7946,doc/master/df106__HiggsToFourLeptons_8py_source.html,https://root.cern,https://root.cern/doc/master/df106__HiggsToFourLeptons_8py_source.html,1,['avail'],['available']
Availability,r the inverse error) on the value for a given point; 239 depending on the type of data.; 240 - If the data contains only value error (e.g. from histograms) returns a pointer to; 241 the inverse of the errors.; 242 - If the data contains errors in coordinates and value (e.g from TGraphErrors) returns a; 243 pointer to the corresponding value error (NOT the inverse).; 244 - If the data contains asymmetric errors return a pointer to the average error (NOT the inverse):; 245 0.5(eu + el).; 246 - If the data does not contain errors return a nullptr.; 247 */; 248 ; 249 const double * ErrorPtr(unsigned int ipoint) const{; 250 assert( ipoint < fMaxPoints );; 251 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 252 kAsymError == fErrorType || kNoError == fErrorType );; 253 ; 254 if ( fErrorType == kNoError ); 255 return nullptr;; 256 return &fDataErrorPtr[ ipoint ];; 257 }; 258 ; 259 /// Return the error on the given point.; 260 /// Safer method returning in any case the error and not the inverse as in the; 261 /// function above.; 262 double Error( unsigned int ipoint ) const; 263 {; 264 assert( ipoint < fMaxPoints );; 265 assert( kValueError == fErrorType || kCoordError == fErrorType ||; 266 kAsymError == fErrorType || kNoError == fErrorType );; 267 ; 268 if ( fErrorType == kNoError ); 269 {; 270 assert( !fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 271 assert( fDataError.empty() && fDataErrorHigh.empty() && fDataErrorLow.empty() );; 272 return 1.0;; 273 }; 274 ; 275 if ( fErrorType == kValueError ) // need to invert (inverror is stored); 276 {; 277 assert( fDataErrorPtr && !fDataErrorHighPtr && !fDataErrorLowPtr );; 278 assert( fDataErrorHigh.empty() && fDataErrorLow.empty() );; 279 assert( fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 280 ; 281 double eval = fDataErrorPtr[ ipoint ];; 282 ; 283 if (fWrapped); 284 return eval;; 285 else; 286 return (eval != 0.0) ? 1.0/eval : 0.0;; 287 }; 288 ; 289 if ( fErrorType == kAsymEr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:8888,error,error,8888,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['error'],['error']
Availability,"r the minimal required interface: \(\mbox{FCN}\) and starting values for parameters and uncertainties. Optional the strategy level in MnStrategy can be specified.; 5.11.2 MnSimplex(const FCNBase&, const MnUserParameters&,. unsigned int) ###; Constructor for high level parameters interface. Optional the strategy level in MnStrategy can be specified.; 5.11.3 MnSimplex(const FCNBase&, const MnUserParameterState&,. const MnStrategy&) ###; Constructor from a full state (parameters + covariance) as starting input plus the desired strategy.; 5.11.4 operator(); MnSimplex::operator()(unsigned int maxfcn, double tolerance) causes minimization of the \(\mbox{FCN}\) and returns the result in form of a FunctionMinimum. Minimization terminates either when the function has been called (approximately) \(\mbox{maxfcn}\) times, or when the estimated vertical distance to minimum (\(\mbox{EDM}\)) is less than \(\mbox{tolerance*up}\). The default value of \(\mbox{tolerance}\) is \(\mbox{0.1}\). (see [howto:errordef]).; 5.11.5 Parameter interaction; MnSimplex retains the result after each minimization (MnUserParameterStae, see [api:state]) and forwards the interface for parameter interaction.; 5.11.6 SimplexMinimizer(); The SimplexMinimizer() is instantiated using default constructor.; 5.11.7 minimize(const FCNBase&, …); The SimplexMinimizer provides several overloaded methods minimize with return value FunctionMinimum. Together with the user \(\mbox{FCN}\) (either an implementation of FCNBase or FCNGradientBase) the user has to give as input the parameters with starting values in one of the defined formats (std::vector\(<\)double\(>\), MnUserParameters or MnUserParameterState).; 5.12 MnStrategy; [api:strategy] Sets the strategy to be used in calculating first and second derivatives and in certain minimization methods. In general, low values of \(\mbox{level}\) mean fewer function calls and high values mean more reliable minimization. Currently allowed values are 0 (low), 1 (default), an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html:51378,error,errordef,51378,root/htmldoc/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html,1,['error'],['errordef']
Availability,"r this axis to the number of bins having a label. void LabelsInflate(Option_t* axis = ""X""); Double the number of bins for axis.; Refill histogram; This function is called by TAxis::FindBin(const char *label). void LabelsOption(Option_t* option = ""h"", Option_t* axis = ""X""); Set option(s) to draw axis with labels; option = ""a"" sort by alphabetic order; = "">"" sort by decreasing values; = ""<"" sort by increasing values; = ""h"" draw labels horizonthal; = ""v"" draw labels vertical; = ""u"" draw labels up (end of label right adjusted); = ""d"" draw labels down (start of label left adjusted). Bool_t SameLimitsAndNBins(const TAxis& axis1, const TAxis& axis2); Same limits and bins. Bool_t RecomputeAxisLimits(TAxis& destAxis, const TAxis& anAxis); Finds new limits for the axis for the Merge function.; returns false if the limits are incompatible. Long64_t Merge(TCollection* list); Add all histograms in the collection to this histogram.; This function computes the min/max for the x axis,; compute a new number of bins, if necessary,; add bin contents, errors and statistics.; If all histograms have bin labels, bins with identical labels; will be merged, no matter what their order is.; If overflows are present and limits are different the function will fail.; The function returns the total number of entries in the result histogram; if the merge is successfull, -1 otherwise. IMPORTANT remark. The axis x may have different number; of bins and different limits, BUT the largest bin width must be; a multiple of the smallest bin width and the upper limit must also; be a multiple of the bin width.; Example:; void atest() {; TH1F *h1 = new TH1F(""h1"",""h1"",110,-110,0);; TH1F *h2 = new TH1F(""h2"",""h2"",220,0,110);; TH1F *h3 = new TH1F(""h3"",""h3"",330,-55,55);; TRandom r;; for (Int_t i=0;i<10000;i++) {; h1->Fill(r.Gaus(-55,10));; h2->Fill(r.Gaus(55,10));; h3->Fill(r.Gaus(0,10));; }. TList *list = new TList;; list->Add(h1);; list->Add(h2);; list->Add(h3);; TH1F *h = (TH1F*)h1->Clone(""h"");; h->Reset();; h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:91567,error,errors,91567,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,1,['error'],['errors']
Availability,"r this axis to the number of bins having a label.; 846 ; 847void TProfile3D::LabelsDeflate(Option_t *ax); 848{; 849 TProfileHelper::LabelsDeflate(this, ax);; 850}; 851 ; 852////////////////////////////////////////////////////////////////////////////////; 853/// Double the number of bins for axis.; 854/// Refill histogram; 855/// This function is called by TAxis::FindBin(const char *label); 856 ; 857void TProfile3D::LabelsInflate(Option_t *ax); 858{; 859 TProfileHelper::LabelsInflate(this, ax);; 860}; 861 ; 862////////////////////////////////////////////////////////////////////////////////; 863/// Set option(s) to draw axis with labels.; 864///; 865/// option might have the following values:; 866///; 867/// - ""a"" sort by alphabetic order; 868/// - "">"" sort by decreasing values; 869/// - ""<"" sort by increasing values; 870/// - ""h"" draw labels horizontal; 871/// - ""v"" draw labels vertical; 872/// - ""u"" draw labels up (end of label right adjusted); 873/// - ""d"" draw labels down (start of label left adjusted); 874 ; 875void TProfile3D::LabelsOption(Option_t * /* option */, Option_t * /* ax */); 876{; 877 Error(""LabelsOption"",""Labels option function is not implemented for a TProfile3D"");; 878}; 879////////////////////////////////////////////////////////////////////////////////; 880/// Merge all histograms in the collection in this histogram.; 881///; 882/// This function computes the min/max for the axes,; 883/// compute a new number of bins, if necessary,; 884/// add bin contents, errors and statistics.; 885/// If overflows are present and limits are different the function will fail.; 886/// The function returns the total number of entries in the result histogram; 887/// if the merge is successful, -1 otherwise.; 888///; 889/// IMPORTANT remark. The 2 axis x and y may have different number; 890/// of bins and different limits, BUT the largest bin width must be; 891/// a multiple of the smallest bin width and the upper limit must also; 892/// be a multiple of the bin widt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile3D_8cxx_source.html:30605,down,down,30605,doc/master/TProfile3D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile3D_8cxx_source.html,1,['down'],['down']
Availability,"r to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfAdaBoostBetaADA boost parameter, default is 1; vector<TH1*>fBTrainBgdMVAHist; vector<TH1*>fBTrainSigMVAHist; Double_tfBaggedSampleFractionrel.Size of bagged sample; UInt_tfBoostNumNumber of times the classifier is boosted; TStringfBoostTypestring specifying the boost type; Double_tfBoostWeightthe weight used to boost the next classifier; TStringfBoostedMethodNamedetails of the boosted classifier; TStringfBoostedMethodOptionsoptions; TStringfBoostedMethodTitletitle; TMVA::DataSetManager*fDataSetManagerDSMTEST; Bool_tfDetailedMonitoringproduce detailed monitoring histograms (boost-wise); Bool_tfHistoricBoolOptionhistoric variable, only needed for ""CompatibilityOptions""; TStringfHistoricOptionhistoric variable, only needed for ""CompatibilityOptions""; vector<Float_t>*fMVAvaluesmva values for the last trained method; Double_tfMethodErrorestimation of the level error of the classifier; Bool_tfMonitorBoostedMethodmonitor the MVA response of every classifier; TTree*fMonitorTreetree to monitor values during the boosting; Double_tfOverlap_integral; Double_tfROC_trainingroc integral of last trained method (on training sample); UInt_tfRandomSeedseed for random number generator used for bagging; vector<TH1*>fTestBgdMVAHist; vector<TH1*>fTestSigMVAHist; vector<TH1*>fTrainBgdMVAHist; vector<TH1*>fTrainSigMVAHist; TStringfTransformStringmin and max values for the classifier response. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBoost(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = __null). MethodBoost(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = __null). ~MethodBoost( void ); d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBoost.html:20343,error,error,20343,root/html602/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBoost.html,2,['error'],['error']
Availability,"r to reset the compression level of the branches.; 2037 if (!file) {; 2038 // FIXME: We need an error message here.; 2039 return 0;; 2040 }; 2041 ; 2042 // Options; 2043 bool fastClone = false;; 2044 TString opt = option;; 2045 opt.ToLower();; 2046 if (opt.Contains(""fast"")) {; 2047 fastClone = true;; 2048 }; 2049 ; 2050 // The chain tree must have a list of branches; 2051 // because we may try to change their basket; 2052 // size later.; 2053 TObjArray* lbranches = GetListOfBranches();; 2054 if (!lbranches) {; 2055 // FIXME: We need an error message here.; 2056 return 0;; 2057 }; 2058 ; 2059 // The chain must have a current tree because; 2060 // that is the one we will clone.; 2061 if (!fTree) {; 2062 // -- LoadTree() has not yet been called, no current tree.; 2063 // FIXME: We need an error message here.; 2064 return 0;; 2065 }; 2066 ; 2067 // Copy the chain's current tree without; 2068 // copying any entries, we will do that later.; 2069 TTree* newTree = CloneTree(0);; 2070 if (!newTree) {; 2071 // FIXME: We need an error message here.; 2072 return 0;; 2073 }; 2074 ; 2075 // Strip out the (potential) directory name.; 2076 // FIXME: The merged chain may or may not have the; 2077 // same name as the original chain. This is; 2078 // bad because the chain name determines the; 2079 // names of the trees in the chain by default.; 2080 newTree->SetName(gSystem->BaseName(GetName()));; 2081 ; 2082 // FIXME: Why do we do this?; 2083 newTree->SetAutoSave(2000000000);; 2084 ; 2085 // Circularity is incompatible with merging, it may; 2086 // force us to throw away entries, which is not what; 2087 // we are supposed to do.; 2088 newTree->SetCircular(0);; 2089 ; 2090 // Reset the compression level of the branches.; 2091 if (opt.Contains(""c"")) {; 2092 TBranch* branch = nullptr;; 2093 TIter nextb(newTree->GetListOfBranches());; 2094 while ((branch = (TBranch*) nextb())) {; 2095 branch->SetCompressionSettings(file->GetCompressionSettings());; 2096 }; 2097 }; 2098 ; 2099 // Reset th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:74482,error,error,74482,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['error'],['error']
Availability,"r to specify the confidence level in units of sigma to use for calculating error bars. The nominal bin width specifies the default used by addBin(), and is used to set the relative normalization of bins with different widths. If not set, the nominal bin width is calculated as range/nbins. ; Definition at line 70 of file RooHist.cxx. ◆ RooHist() [4/6]. RooHist::RooHist ; (; const TH1 & ; data1, . const TH1 & ; data2, . double ; nominalBinWidth = 0, . double ; nSigma = 1, . RooAbsData::ErrorType ; etype = RooAbsData::Poisson, . double ; xErrorFrac = 1.0, . bool ; efficiency = false, . double ; scaleFactor = 1.0 . ). Create a histogram from the asymmetry between the specified TH1 objects which may have fixed or variable bin widths, but which must both have the same binning. ; The asymmetry is calculated as (1-2)/(1+2). Error bars are calculated using Binomial statistics. Prints a warning and rounds any bins with non-integer contents. Use the optional parameter to specify the confidence level in units of sigma to use for calculating error bars. The nominal bin width specifies the default used by addAsymmetryBin(), and is used to set the relative normalization of bins with different widths. If not set, the nominal bin width is calculated as range/nbins. ; Definition at line 122 of file RooHist.cxx. ◆ RooHist() [5/6]. RooHist::RooHist ; (; const RooHist & ; hist1, . const RooHist & ; hist2, . double ; wgt1 = 1.0, . double ; wgt2 = 1.0, . RooAbsData::ErrorType ; etype = RooAbsData::Poisson, . double ; xErrorFrac = 1.0 . ). Create histogram as sum of two existing histograms. ; If Poisson errors are selected the histograms are added and Poisson confidence intervals are calculated for the summed content. If wgt1 and wgt2 are not 1 in this mode, a warning message is printed. If SumW2 errors are selected the histograms are added and the histograms errors are added in quadrature, taking the weights into account. ; Definition at line 195 of file RooHist.cxx. ◆ RooHist() [6/6]. Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHist.html:45631,error,error,45631,doc/master/classRooHist.html,https://root.cern,https://root.cern/doc/master/classRooHist.html,1,['error'],['error']
Availability,"r tools, contained in ROOT/RDFHelpers.hxx. ;  ; file  df021_createTGraph.C;   Fill a TGraph using RDataFrame. ;  ; file  df021_createTGraph.py;   Fill a TGraph using RDataFrame. ;  ; file  df022_useKahan.C;   Implement a custom action that evaluates a Kahan sum. ;  ; file  df023_aggregate.C;   Use the Aggregate action to specify arbitrary data aggregations. ;  ; file  df024_Display.C;   Use the Display action to inspect entry values. ;  ; file  df024_Display.py;   Use the Display action to inspect entry values. ;  ; file  df025_RNode.C;   Manipulate RDF objects in functions, loops and conditional branches. ;  ; file  df026_AsNumpyArrays.py;   Read data from RDataFrame into Numpy arrays. ;  ; file  df027_SQliteDependencyOverVersion.C;   Plot the ROOT downloads based on the version reading a remote sqlite3 file. ;  ; file  df028_SQliteIPLocation.C;   Plot the location of ROOT downloads reading a remote sqlite3 file. ;  ; file  df029_SQlitePlatformDistribution.C;   Use RDataFrame to display data about ROOT downloads. ;  ; file  df030_SQliteVersionsOfROOT.C;   Read an sqlite3 databases with RDataFrame and plot statistics on ROOT downloads. ;  ; file  df031_Stats.C;   Use the Stats action to extract the statistics of a column. ;  ; file  df031_Stats.py;   Use the Stats action to extract the statistics of a column. ;  ; file  df032_RDFFromNumpy.py;   Read data from Numpy arrays into RDataFrame. ;  ; file  df033_Describe.py;   Get information about the dataframe with the convenience method Describe. ;  ; file  df034_SaveGraph.C;   Basic SaveGraph usage. ;  ; file  df034_SaveGraph.py;   Basic SaveGraph usage. ;  ; file  df035_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ; file  df036_missingBranches.C;   ;  ; file  df037_TTreeEventMatching.C;   ;  ; file  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ; file  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ; fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__dataframe.html:5493,down,downloads,5493,doc/master/group__tutorial__dataframe.html,https://root.cern,https://root.cern/doc/master/group__tutorial__dataframe.html,1,['down'],['downloads']
Availability,"r which the calculation will be stopped for that parameter.; 5.8.1 MnMinos(const FCNBase&, const FunctionMinimum&); Construct an MnMinos object from the user’s \(\mbox{FCN}\) and a valid FunctionMinimum. Additional constructors for user specific MnStrategy settings are provided.; 5.8.2 operator(); MnMinos::operator()(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\). The return value is a std::pair\(<\)double,double\(>\) with the lower and upper bounds of parameter \(\mbox{n}\).; 5.8.3 minos(unsigned int n, unsigned int maxcalls); MnMinos::minos(unsigned int n, unsigned int maxcalls) causes a \(\mbox{MINOS}\) error analysis for external parameter \(\mbox{n}\) and returns a MinosError with the lower and upper bounds of parameter \(\mbox{n}\) and additional information in case that one bound could not be found. The result MinosError can be easily printed using std::cout.; 5.8.4 Other methods; Additional methods exist to ask for one side of \(\mbox{MINOS}\) errors only.; 5.9 MnPlot; [api:plot] MnPlot prints the result of \(\mbox{CONTOURS}\) or \(\mbox{SCAN}\) on a text terminal.; 5.9.1 MnPlot(); The default constructor initializes default settings for the text window size.; 5.9.2 operator(); MnPlot::operator()(const std::vector\(<\)std::pair\(<\)double,double\(>\) \(>\)&) prints a vector of (x,y) points on the text terminal. operator()(double xmin, double ymin, const std::vector\(<\)std::pair\(<\)double,double\(>\) \(>\)&) prints in addition the coordinates of the (x,y) values at the minimum.; 5.10 MnScan and ScanMinimizer; [api:scan]; MnScan scans the value of the user function by varying one parameter. It is sometimes useful for debugging the user function or finding a reasonable starting point. Constructor arguments, methods arguments and names of methods are the same as for MnMigrad and VariableMetricMinimizer.; 5.10.1 scan(unsigned int par, unsigned int npoint, double low, double high); Scans the va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:51647,error,errors,51647,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['errors']
Availability,"r""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttribute(""StoreError""); on each X-type observable for which the error should be stored and add datapoints to the dataset as follows. RooDataSet::add(xset,yval,yerr) where xset is the RooArgSet of x observables (with or without errors) and yval and yerr; are the Double_t values that correspond to the Y and its error. RooXYChi2Var(const char* name, const char* title, RooAbsPdf& extPdf, RooDataSet& data, RooRealVar& yvar, Bool_t integrate = kFALSE). RooXYChi2Var constructor with an extended p.d.f. and X-Y values dataset; The value of the function that defines the chi^2 in this form is takes as; the p.d.f. times the expected number of events. An X-Y dataset is a weighted dataset with one or more observables X where the weight is interpreted; as the Y value and the weight error is interpreted as the Y value error. The weight must have an; non-zero error defined at each point for the chi^2 calculation to be meaningful. To store errors associated with the x and y values in a RooDataSet, call RooRealVar::setAttrib",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooXYChi2Var.html:38939,error,errors,38939,root/html528/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html528/RooXYChi2Var.html,12,['error'],"['error', 'errors']"
Availability,"r&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. static voidInitStatics(). private:. TGLFontManager(const TGLFontManager&); TGLFontManager&operator=(const TGLFontManager&). Data Members; protected:. map<TGLFont,int>fFontMapmap of created fonts; list<const TGLFont*>fFontTrashfonts to purge; static Int_tfgExtendedFontStart; static TObjArrayfgFontFileArraymap font-id to ttf-font-file; static vector<int>fgFontSizeArraymap of valid font-size; static Bool_tfgStaticInitDoneglobal initialization flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLFontManager(); Destructor. void RegisterFont(Int_t size, Int_t file, TGLFont::EMode mode, TGLFont& out); Provide font with given size, file and FTGL class. void RegisterFont(Int_t size, const char* name, TGLFont::EMode mode, TGLFont& out); Get mapping from ttf id to font names. Table taken from TTF.cxx. void ReleaseFont(TGLFont& font); Release font with given attributes. Returns false if font has; not been found in the managers font set. TObjArray* GetFontFileArray(); Get id to file name map. Int_t GetExtendedFontStartIndex(). Int_t GetFontSize(Int_t ds); Get availabe font size. Int_t GetFontSize(Int_t ds, Int_t min, Int_t max); Get availabe font size. const char* GetFontNameFromId(Int_t ); Get font name from TAttAxis font id. void InitStatics(); Create a list of available font files and allowed font sizes. void ClearFontTrash(); Delete FTFFont objects registered for destruction. TGLFont& operator=(const TGLFontManager& ). TGLFontManager(const TGLFontManager& ). TGLFontManager(); {}. FontSizeVec_t* GetFontSizeArray(). » Author: Alja Mrak-Tadel 2008 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-03-13 19:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLFontManager.html:2327,avail,availabe,2327,root/html534/TGLFontManager.html,https://root.cern,https://root.cern/root/html534/TGLFontManager.html,3,['avail'],"['availabe', 'available']"
Availability,"r() (UInt_t row, UInt_t column);  Operator for easy cell acces. ;  ; virtual void PreviousChunk ();  Move the table to the previous chunk of the data set with the same size. ;  ; virtual void ScrollCHeaders (Int_t xpos);  Scroll the column headers horizontally. ;  ; virtual void ScrollRHeaders (Int_t ypos);  Scroll the row headers vertically. ;  ; virtual void SetDefaultColors ();  Set the background color for all rows and headers to their defaults. ;  ; virtual void SetEvenRowBackground (Pixel_t pixel);  Set the background color for all even numbered rows. ;  ; virtual void SetHeaderBackground (Pixel_t pixel);  Set the background color for the headers. ;  ; virtual void SetOddRowBackground (Pixel_t pixel);  Set the background color for all odd numbered rows. ;  ; virtual void Show ();  Show the contents of the TGTable in stdout. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update ();  Update the range of the available data and refresh the current view. ;  ; virtual void UpdateView ();  Update and layout the visible part of the TGTable. ;  ; virtual void UserRangeChange ();  Slot used when the text in one of the range frame text entries changes. ;  ;  Public Member Functions inherited from TGCompositeFrame;  TGCompositeFrame (const TGWindow *p=nullptr, UInt_t w=1, UInt_t h=1, UInt_t options=0, Pixel_t back=GetDefaultFrameBackground());  Create a composite frame. ;  ;  TGCompositeFrame (TGClient *c, Window_t id, const TGWindow *parent=nullptr);  Create a frame using an externally created window. ;  ;  ~TGCompositeFrame () override;  Delete a composite frame. ;  ; virtual void AddFrame (TGFrame *f, TGLayoutHints *l=nullptr);  Add frame to the composite frame using the specified layout hints. ;  ; void ChangeOptions (UInt_t options) override;  Change composite frame options. Options is an OR of the EFrameTypes. ;  ; virtual void ChangeSubframesBackground (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSimpleTable.html:4957,avail,available,4957,doc/master/classTGSimpleTable.html,https://root.cern,https://root.cern/doc/master/classTGSimpleTable.html,2,['avail'],['available']
Availability,"r()(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; calculate one side (negative or positive Error) of the Parameter; give as input (optionally) maxcalls and tolerance. double Upper(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross Loval(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross Upval(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross FindCrossValue(int dir, unsigned int , unsigned int maxcalls, double toler) const; internal method to get crossing value via MnFunctionCross. » Last changed: root/minuit2:$Id: MnMinos.h 39212 2011-05-17 08:41:02Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html:2354,toler,toler,2354,root/html530/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__MnMinos.html,6,['toler'],"['toler', 'tolerance']"
Availability,"r()(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; doubleUpper(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const; ROOT::Minuit2::MnCrossUpval(unsigned int, unsigned int maxcalls = 0, double toler = 0.1) const. protected:. ROOT::Minuit2::MnCrossFindCrossValue(int dir, unsigned int, unsigned int maxcalls, double toler) const. Data Members; private:. const ROOT::Minuit2::FCNBase&fFCN; const ROOT::Minuit2::FunctionMinimum&fMinimum; ROOT::Minuit2::MnStrategyfStrategy. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, unsigned int stra = 1); construct from FCN + Minimum + strategy. MnMinos(const ROOT::Minuit2::FCNBase& fcn, const ROOT::Minuit2::FunctionMinimum& min, const ROOT::Minuit2::MnStrategy& stra); construct from FCN + Minimum + strategy. ~MnMinos(); {}. std::pair<double,double> operator()(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; returns the negative (pair.first) and the positive (pair.second); Minos Error of the Parameter. double Lower(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const; calculate one side (negative or positive Error) of the Parameter; give as input (optionally) maxcalls and tolerance. double Upper(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross Loval(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross Upval(unsigned int , unsigned int maxcalls = 0, double toler = 0.1) const. MnCross FindCrossValue(int dir, unsigned int , unsigned int maxcalls, double toler) const; internal method to get crossing value via MnFunctionCross. » Last changed: root/minuit2:$Id: MnMinos.h 39212 2011-05-17 08:41:02Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__MnMinos.html:2354,toler,toler,2354,root/html532/ROOT__Minuit2__MnMinos.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__MnMinos.html,6,['toler'],"['toler', 'tolerance']"
Availability,"r(). double ROOT::Math::BrentMinimizer1D::FValUpper ; (; ); const. overridevirtual . Return function value at current upper bound of the minimization interval. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 73 of file BrentMinimizer1D.cxx. ◆ Iterations(). int ROOT::Math::BrentMinimizer1D::Iterations ; (; ); const. inlineoverridevirtual . Return number of iteration used to find minimum. ; Implements ROOT::Math::IMinimizer1D.; Definition at line 102 of file BrentMinimizer1D.h. ◆ Minimize(). bool ROOT::Math::BrentMinimizer1D::Minimize ; (; int ; maxIter, . double ; absTol = 1.E-8, . double ; relTol = 1.E-10 . ). overridevirtual . Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached. ; Return true if iterations converged successfully @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position (default 1.E-8) @param absTol desired relative error in the minimum position (default = 1.E-10) ; Implements ROOT::Math::IMinimizer1D.; Definition at line 76 of file BrentMinimizer1D.cxx. ◆ Name(). const char * ROOT::Math::BrentMinimizer1D::Name ; (; ); const. overridevirtual . Return name of minimization algorithm (""BrentMinimizer1D"") ; Implements ROOT::Math::IMinimizer1D.; Definition at line 124 of file BrentMinimizer1D.cxx. ◆ SetDefaultNpx(). void ROOT::Math::BrentMinimizer1D::SetDefaultNpx ; (; int ; npx). static . set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ; Definition at line 43 of file BrentMinimizer1D.cxx. ◆ SetDefaultNSearch(). void ROOT::Math::BrentMinimizer1D::SetDefaultNSearch ; (; int ; n). static . set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ; Definition at line 45 of file BrentMinimizer1D.cxx. ◆ SetFunction(). void ROOT::Math::BrentMinimizer1D::SetFunction ; (; const ROOT::Math::IGenFunction & ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:6247,error,error,6247,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,1,['error'],['error']
Availability,"r(). void TVirtualX::BeginModalSessionFor ; (; Window_t ; window). virtual . Start a modal session for a dialog window. ; Definition at line 2488 of file TVirtualX.cxx. ◆ Bell(). void TVirtualX::Bell ; (; Int_t ; percent). virtual . Sets the sound bell. Percent is loudness from -100% to 100%. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1517 of file TVirtualX.cxx. ◆ ChangeActivePointerGrab(). void TVirtualX::ChangeActivePointerGrab ; (; Window_t ; , . UInt_t ; , . Cursor_t ;  . ). virtual . Changes the specified dynamic parameters if the pointer is actively grabbed by the client and if the specified time is no earlier than the last-pointer-grab time and no later than the current X server time. ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 2424 of file TVirtualX.cxx. ◆ ChangeGC(). void TVirtualX::ChangeGC ; (; GContext_t ; gc, . GCValues_t * ; gval . ). virtual . Changes the components specified by the mask in gval for the specified GC. ; Parameters. [in]gcspecifies the GC to be changed ; [in]gvalspecifies the mask and the values to be set. (see also the GCValues_t structure) ; Reimplemented in TGCocoa, TGWin32, TGWin32VirtualXProxy, and TGX11.; Definition at line 1339 of file TVirtualX.cxx. ◆ ChangeProperties(). void TVirtualX::ChangeProperties ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . Int_t ; format, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Reimplemented in TGWin32, TGWin32VirtualXProxy, TGX11, and TGCocoa.; Definition at line 2448 of file TVirtualX.cxx. ◆ ChangeProperty(). void TVirtualX::ChangeProperty ; (; Window_t ; id, . Atom_t ; property, . Atom_t ; type, . UChar_t * ; data, . Int_t ; len . ). virtual . Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ; Para",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:51866,mask,mask,51866,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['mask'],['mask']
Availability,"r(); TTreeDrawArgsParser(const TTreeDrawArgsParser&); virtual~TTreeDrawArgsParser(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Bool_tGetAdd() const; Int_tGetDimension() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TStringGetExp() const; virtual const char*TObject::GetIconName() const; Double_tGetIfSpecified(Int_t num, Double_t def) const; static Int_tGetMaxDimension(); virtual const char*TObject::GetName() const; Int_tGetNoParameters() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; TStringGetObjectName() const; static Bool_tTObject::GetObjectStat(); TStringGetObjectTitle() const; virtual Option_t*TObject::GetOption() const; Bool_tGetOptionSame() const; TObject*GetOriginal() const; Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeDrawArgsParser.html:1498,error,error,1498,root/html528/TTreeDrawArgsParser.html,https://root.cern,https://root.cern/root/html528/TTreeDrawArgsParser.html,4,['error'],['error']
Availability,"r(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; voidComputeFCN(Int_t& npar, Double_t*, Double_t& f, Double_t* par, Int_t flag); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFit(TF1* f1, Option_t* option = """"); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); static TVirtualFitter*GetFitter(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBinomialEfficiencyFitter.html:4194,error,error,4194,root/html526/TBinomialEfficiencyFitter.html,https://root.cern,https://root.cern/root/html526/TBinomialEfficiencyFitter.html,5,['error'],['error']
Availability,"r(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");. cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; THStack *a = new THStack(""a"",""Stacked 2D histograms"");; TF2 *f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; TH2F *h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillColor(38);; h2sta->FillRandom(""f1"",4000);; TF2 *f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; f2->SetParameters(params2);; TH2F *h2stb = new TH2F(""h2stb"",""h2stb"",20,-4,4,20,-4,4);; h2stb->SetFillColor(46);; h2stb->FillRandom(""f2"",3000);; a->Add(h2sta);; a->Add(h2stb);; a->Draw();; return cst;; }; If at least one of the histograms in the stack has errors, the whole stack is; visualized by default with error bars. To visualize it without errors the; option ""HIST"" should be used. Picture; Source. {; TCanvas *cst1 = new TCanvas(""cst1"",""cst1"",700,400);; cst1->Divide(2,1);. TH1F * hst11 = new TH1F(""hst11"", """", 20, -10, 10);; hst11->Sumw2();; hst11->FillRandom(""gaus"", 1000);; hst11->SetFillColor(kViolet);; hst11->SetLineColor(kViolet);. TH1F * hst12 = new TH1F(""hst12"", """", 20, -10, 10);; hst12->FillRandom(""gaus"", 500);; hst12->SetFillColor(kBlue);; hst12->SetLineColor(kBlue);. THStack st1(""st1"", ""st1"");; st1.Add(hst11);; st1.Add(hst12);. cst1->cd(1); st1.Draw();; cst1->cd(2); st1.Draw(""hist"");. return cst1;; }; Drawing of 3D implicit functions; 3D implicit functions (TF3) can be drawn as iso-surfaces.; The implicit function f(x,y,z) = 0 is drawn in cartesian coordinates.; In the following example the options ""FB"" and ""BB"" suppress the; ""Front Box"" and ""Back Box"" around the plot. Picture; Source. {; TCanvas *c2 = new TCanvas(""c2"",""c2"",600,400);; TF3 *f3 = new TF3(""f3"",""sin(x*x+y*y+z*z-36)"",-2,2,-2,2,-2,2);; f3->SetClippingBoxOn(0,0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THistPainter.html:74229,error,errors,74229,root/html602/THistPainter.html,https://root.cern,https://root.cern/root/html602/THistPainter.html,1,['error'],['errors']
Availability,"r(31+j);; m->Draw();; }; }; 4.2 Superimposing Two Graphs; To super impose two graphs you need to draw the axis only once, and leave out the “A” in the draw options for the second graph. Next is an example:. Superimposing two graphs. {; Int_t n = 20;; Double_t x[n], y[n], x1[n], y1[n];. // create a blue graph with a cos function; gr1->SetLineColor(4);; gr1->Draw(""AC*"");. // superimpose the second graph by leaving out the axis option ""A""; gr2->SetLineWidth(3);; gr2->SetMarkerStyle(21);; gr2->SetLineColor(2);; gr2->Draw(""CP"");; }; 4.3 Graphs with Error Bars; A TGraphErrors is a TGraph with error bars. The various draw format options of TGraphErrors::Paint() are derived from TGraph.; void TGraphErrors::Paint(Option_t *option). Graphs with different draw options of error bars. In addition, it can be drawn with the “Z” option to leave off the small lines at the end of the error bars. If option contains “>”, an arrow is drawn at the end of the error bars. If option contains “|>”, a full arrow is drawn at the end of the error bars. The size of the arrow is set to 2/3 of the marker size.; The option “[]” is interesting to superimpose systematic errors on top of the graph with the statistical errors. When it is specified, only the end vertical/horizontal lines of the error bars are drawn.; To control the size of the lines at the end of the error bars (when option 1 is chosen) use SetEndErrorSize(np). By default np=1; np represents the number of pixels.; gStyle->SetEndErrorSize(np);; The four parameters of TGraphErrors are: X, Y (as in TGraph), X-errors, and Y-errors - the size of the errors in the x and y direction. Next example is $ROOTSYS/tutorials/graphs/gerrors.C.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",200,10,700,500);; c1->SetGrid();. // create the coordinate arrays; Int_t n = 10;; Float_t x[n] = {-.22,.05,.25,.35,.5,.61,.7,.85,.89,.95};; Float_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the error arrays; Float_t ex[n] = {.05,.1,.07,.07,.0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:146343,error,error,146343,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['error'],['error']
Availability,"r(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidTRandom::Circle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tTRandom::Exp(Double_t tau); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tTRandom::Gaus(Double_t mean = 0, Double_t sigma = 1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLuxury() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual UInt_tGetSeed() const; static voidGetTableSeeds(UInt_t* seeds, Int_t index); const UInt_t*GetTheSeeds() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRandom1.html:2040,error,error,2040,root/html530/TRandom1.html,https://root.cern,https://root.cern/root/html530/TRandom1.html,5,['error'],['error']
Availability,"r(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidTRandom::Circle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tTRandom::Exp(Double_t tau); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tTRandom::Gaus(Double_t mean = 0, Double_t sigma = 1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual Int_tGetLuxury() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual UInt_tTRandom::GetSeed() const; static voidGetTableSeeds(UInt_t* seeds, Int_t index); const UInt_t*GetTheSeeds() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom1.html:2040,error,error,2040,root/html528/TRandom1.html,https://root.cern,https://root.cern/root/html528/TRandom1.html,1,['error'],['error']
Availability,"r(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidTRandom::Circle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tTRandom::Exp(Double_t tau); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tTRandom::Gaus(Double_t mean = 0, Double_t sigma = 1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual UInt_tGetSeed() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRandom3.html:3146,error,error,3146,root/html530/TRandom3.html,https://root.cern,https://root.cern/root/html530/TRandom3.html,5,['error'],['error']
Availability,"r(Double_t mean = 0, Double_t gamma = 1); virtual voidTObject::Browse(TBrowser* b); virtual voidTRandom::Circle(Double_t& x, Double_t& y, Double_t r); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Double_tTRandom::Exp(Double_t tau); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tTRandom::Gaus(Double_t mean = 0, Double_t sigma = 1); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual UInt_tTRandom::GetSeed() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRandom2.html:2121,error,error,2121,root/html528/TRandom2.html,https://root.cern,https://root.cern/root/html528/TRandom2.html,7,['error'],['error']
Availability,"r(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; Long64_tTBasket::CopyTo(TFile* to); voidCreateBuffer(const char* name, TString title, vector<Int_t>* vc, TBranch* branch, TSQLResult** rs); virtual voidTKey::Delete(Option_t* option = """"); virtual voidTKey::DeleteBuffer(); virtual voidTBasket::DeleteEntryOffset(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual Int_tTBasket::DropBuffers(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTKey::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TBranch*TBasket::GetBranch() const; virtual char*TKey::GetBuffer() const; TBuffer*TKey::GetBufferRef() const; Int_tTBasket::GetBufferSize() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Int_t*TBasket::GetDisplacement() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_t*TBasket::GetEntryOffset() const; Int_tTBasket::GetEntryPointer(Int_t Entry); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; Int_tTBasket::GetLast() const; TDirectory*TKey::GetMotherDir() const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBasketSQL.html:1841,error,error,1841,root/html526/TBasketSQL.html,https://root.cern,https://root.cern/root/html526/TBasketSQL.html,7,['error'],['error']
Availability,"r(ROOT::TBranchProxyDescriptor* desc, Bool_t isBase); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetBranchName() const; TStringGetContainerName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TVirtualStreamerInfo*GetInfo() const; ROOT::TBranchProxyClassDescriptor::ELocationGetIsClones() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetRawSymbol() const; UInt_tGetSplitLevel() const; const char*GetSubBranchPrefix() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__TBranchProxyClassDescriptor.html:1758,error,error,1758,root/html526/ROOT__TBranchProxyClassDescriptor.html,https://root.cern,https://root.cern/root/html526/ROOT__TBranchProxyClassDescriptor.html,7,['error'],['error']
Availability,"r(RooAbsData& data, const RooStats::ModelConfig& model, RooStats::ProposalFunction& proposalFunction, Int_t numIters, RooArgList* axes = NULL, Double_t size = 0.05); alternate constructor, specifying many arguments. void SetModel(const RooStats::ModelConfig& model); set the model. MCMCCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, RooAbsPdf& priorPdf, RooStats::ProposalFunction& proposalFunction, Int_t numIters, RooArgList* axes = NULL, Double_t size = 0.05). void SetupBasicUsage(); Setting automatic configuration with basic settings. Uses a; UniformProposal,10,000 iterations, 40 burn in steps, 50 bins for each; RooRealVar, determines interval by keys, and turns on sparse histogram; mode in the MCMCInterval. Finds a 95% confidence interval. MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCCalculator.html:10628,error,error,10628,root/html526/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCCalculator.html,1,['error'],['error']
Availability,"r(TObject* obj1); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tAssertClass(TClass* cl) const; virtual voidBrowse(TBrowser* b); Int_tCapacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; Bool_tContains(const char* name) const; Bool_tContains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDelete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDump() const; static voidEmptyGarbageCollection(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; static voidGarbageCollect(TObject* obj); static TCollection*GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntries() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tGetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tGrowBy(Int_t delta) const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollection.html:2540,error,error,2540,root/html526/TCollection.html,https://root.cern,https://root.cern/root/html526/TCollection.html,1,['error'],['error']
Availability,"r(TTimer *)TSysteminlinevirtual; Run()TSystemvirtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; Select(TList *active, Long_t timeout)TSystemvirtual; Select(TFileHandler *fh, Long_t timeout)TSystemvirtual; SendBuf(int sock, const void *buffer, int length)TSystemvirtual; SendRaw(int sock, const void *buffer, int length, int flag)TSystemvirtual; SetAclicMode(EAclicMode mode)TSystemvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBuildDir(const char *build_dir, Bool_t isflat=kFALSE)TSystemvirtual; SetDisplay()TSystemvirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetDynamicPath(const char *pathname)TSystemvirtual; Setenv(const char *name, const char *value)TSystemvirtual; SetErrorStr(const char *errstr)TSystem; SetFlagsDebug(const char *)TSystemvirtual; SetFlagsOpt(const char *)TSystemvirtual; SetFPEMask(Int_t mask=kDefaultMask)TSystemvirtual; SetIncludePath(const char *includePath)TSystemvirtual; SetLinkdefSuffix(const char *suffix)TSystemvirtual; SetLinkedLibs(const char *linkedLibs)TSystemvirtual; SetMakeExe(const char *directives)TSystemvirtual; SetMakeSharedLib(const char *directives)TSystemvirtual; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetObjExt(const char *objExt)TSystemvirtual; SetProgname(const char *name)TSystemvirtual; SetSockOpt(int sock, int kind, int val)TSystemvirtual; SetSoExt(const char *soExt)TSystemvirtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; ShowOutput(RedirectHandle_t *h)TSystemvirtual; SigAlarmInterruptsSyscalls(Bool_t)TSysteminlineprotectedvirtual; Sizeof() constTNamedvirtual; Sleep(UInt_t milliSec)TSystemvirtual; SplitAclicMode(const char *filename, TString &mode, TString &args, TString &io) constTSystemvirtual; StackT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSystem-members.html:14274,mask,mask,14274,doc/master/classTSystem-members.html,https://root.cern,https://root.cern/doc/master/classTSystem-members.html,1,['mask'],['mask']
Availability,"r(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TMVA::MsgLogger&Log() const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfAbsTolabsolute tolerance deviation; Double_t (*)(Double_t)fGetRootVal; TMVA::MsgLogger*fLogger! message logger; Int_tfMaxItermaximum number of iterations; Double_tfRootMaxmaximum root value; Double_tfRootMinminimum root value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RootFinder(Double_t (*)(Double_t) rootVal, Double_t rootMin, Double_t rootMax, Int_t maxIterations = 100, Double_t absTolerance = 0.0); constructor. ~RootFinder( void ); destructor. Double_t Root(Double_t refValue); Root finding using Brents algorithm; taken from CERNLIB function RZERO. RootFinder(Double_t (*)(Double_t) rootVal, Double_t rootMin, Double_t rootMax, Int_t maxIterations = 100, Double_t absTolerance = 0.0). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id: RootFinder.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__RootFinder.html:5341,toler,tolerance,5341,root/html532/TMVA__RootFinder.html,https://root.cern,https://root.cern/root/html532/TMVA__RootFinder.html,1,['toler'],['tolerance']
Availability,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoInitialize(EAddToList addToGlobList)TF1protected; Draw(Option_t *option="""") overrideTF2virtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawCopy(Option_t *option="""") const overrideTF2virtual; DrawDerivative(Option_t *=""al"") overrideTF2inlinevirtual; DrawF1(Double_t xmin, Double_t xmax, Option_t *option="""")TF1virtual; DrawIntegral(Option_t *=""al"") overrideTF2inlinevirtual; Dump() constTObjectvirtual; EAddToList enum nameTF1; EDeprecatedStatusBits enum nameTObject; EFType enum nameTF1protected; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTF1; Eval(Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) constTF1virtual; EvalPar(const Double_t *x, const Double_t *params=nullptr)TF1virtual; EvalPar(const T *x, const Double_t *params=nullptr)TF1; EvalParTempl(const T *data, const Double_t *params=nullptr)TF1inlineprivate; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTF2virtual; fAlphaTF1protected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBetaTF1protected; fBitsTObjectprivate; fChisquareTF1protected; fCompositionTF1protected; fContourTF2protected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFormulaTF1protected; fFunctorTF1protected; fgAbsValueTF1protectedstatic; fgAddToGlobListTF1protectedstatic; fGammaTF1protected; fgCurrentTF1protectedstatic; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fgRejectPointTF1protectedstatic; fHistogramTF1protected; FillBuffer(char *&buffer)TNamedvirtual; FindMinMax(Double_t *x, bool findmax) constTF2protectedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fInte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2-members.html:3509,error,error,3509,doc/master/classTF2-members.html,https://root.cern,https://root.cern/doc/master/classTF2-members.html,2,['error'],['error']
Availability,"r(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; DoMerge(const TGraph *g) overrideTGraphErrorsprotectedvirtual; Draw(Option_t *options="""") overrideTGraphPolarvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawGraph(Int_t n, const Int_t *x, const Int_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Float_t *x, const Float_t *y, Option_t *option="""")TGraphvirtual; DrawGraph(Int_t n, const Double_t *x=nullptr, const Double_t *y=nullptr, Option_t *option="""")TGraphvirtual; DrawPanel()TGraphvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTGraph; Eval(Double_t x, TSpline *spline=nullptr, Option_t *option="""") constTGraphvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideTGraphvirtual; Expand(Int_t newsize)TGraphvirtual; Expand(Int_t newsize, Int_t step)TGraphvirtual; ExpandAndCopy(Int_t size, Int_t iend)TGraphprotected; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fEXTGraphErrorsprotected; fEYTGraphErrorsprotected; fFillColorTAttFillprotected; fFillStyleTAttFillprotected; fFunctionsTGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fHistogramTGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideTGraphErrorsprotectedvirtual; FindObject(const char *name) const overrideTGraphvirtual; FindObject(const TObject *obj) const overrideTGraphvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPolar-members.html:3249,error,error,3249,doc/master/classTGraphPolar-members.html,https://root.cern,https://root.cern/doc/master/classTGraphPolar-members.html,2,['error'],['error']
Availability,"r(upgrade, ""websocket"")) {; 13256 /* The headers ""Host"", ""Sec-WebSocket-Key"", ""Sec-WebSocket-Protocol"" and; 13257 * ""Sec-WebSocket-Version"" are also required.; 13258 * Don't check them here, since even an unsupported websocket protocol; 13259 * request still IS a websocket request (in contrast to a standard HTTP; 13260 * request). It will fail later in handle_websocket_request.; 13261 */; 13262 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13263 }; 13264 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13265 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13266 }; 13267 ; 13268 /* Upgrade to another protocol */; 13269 return -1;; 13270}; 13271 ; 13272 ; 13273static int; 13274parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13275{; 13276 int n;; 13277 unsigned int a, b, c, d, slash;; 13278 ; 13279 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13280 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13281 // integer value, but function will not report conversion; 13282 // errors; consider using 'strtol' instead; 13283 slash = 32;; 13284 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13285 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13286 // an integer value, but function will not report conversion; 13287 // errors; consider using 'strtol' instead; 13288 n = 0;; 13289 }; 13290 }; 13291 ; 13292 if ((n > 0) && ((size_t)n == vec->len)) {; 13293 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13294 /* IPv4 format */; 13295 if (sa->sa.sa_family == AF_INET) {; 13296 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13297 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13298 | ((uint32_t)c << 8) | (uint32_t)d;; 13299 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13300 return (ip & mask) == net;; 13301 }; 13302 return 0;; 13303 }; 13304 }; 13305#if defined(USE_IPV6); 13306 else {; 13307 char ad[50];; 13308 const char *p;; 13309 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:388176,error,errors,388176,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['errors']
Availability,"r(upgrade, ""websocket"")) {; 13257 /* The headers ""Host"", ""Sec-WebSocket-Key"", ""Sec-WebSocket-Protocol"" and; 13258 * ""Sec-WebSocket-Version"" are also required.; 13259 * Don't check them here, since even an unsupported websocket protocol; 13260 * request still IS a websocket request (in contrast to a standard HTTP; 13261 * request). It will fail later in handle_websocket_request.; 13262 */; 13263 return PROTOCOL_TYPE_WEBSOCKET; /* Websocket */; 13264 }; 13265 if (0 != mg_strcasestr(upgrade, ""h2"")) {; 13266 return PROTOCOL_TYPE_HTTP2; /* Websocket */; 13267 }; 13268 ; 13269 /* Upgrade to another protocol */; 13270 return -1;; 13271}; 13272 ; 13273 ; 13274static int; 13275parse_match_net(const struct vec *vec, const union usa *sa, int no_strict); 13276{; 13277 int n;; 13278 unsigned int a, b, c, d, slash;; 13279 ; 13280 if (sscanf(vec->ptr, ""%u.%u.%u.%u/%u%n"", &a, &b, &c, &d, &slash, &n); 13281 != 5) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to an; 13282 // integer value, but function will not report conversion; 13283 // errors; consider using 'strtol' instead; 13284 slash = 32;; 13285 if (sscanf(vec->ptr, ""%u.%u.%u.%u%n"", &a, &b, &c, &d, &n); 13286 != 4) { // NOLINT(cert-err34-c) 'sscanf' used to convert a string to; 13287 // an integer value, but function will not report conversion; 13288 // errors; consider using 'strtol' instead; 13289 n = 0;; 13290 }; 13291 }; 13292 ; 13293 if ((n > 0) && ((size_t)n == vec->len)) {; 13294 if ((a < 256) && (b < 256) && (c < 256) && (d < 256) && (slash < 33)) {; 13295 /* IPv4 format */; 13296 if (sa->sa.sa_family == AF_INET) {; 13297 uint32_t ip = ntohl(sa->sin.sin_addr.s_addr);; 13298 uint32_t net = ((uint32_t)a << 24) | ((uint32_t)b << 16); 13299 | ((uint32_t)c << 8) | (uint32_t)d;; 13300 uint32_t mask = slash ? (0xFFFFFFFFu << (32 - slash)) : 0;; 13301 return (ip & mask) == net;; 13302 }; 13303 return 0;; 13304 }; 13305 }; 13306#if defined(USE_IPV6); 13307 else {; 13308 char ad[50];; 13309 const char *p;; 13310 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:388209,error,errors,388209,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['errors']
Availability,"r) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2010-11-19 17:34; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorMultiDim.html:2442,toler,tolerance,2442,root/html528/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"r) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorMultiDim.html:2444,toler,tolerance,2444,root/html530/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"r) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__VirtualIntegratorMultiDim.html:2444,toler,tolerance,2444,root/html532/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"r) can be created using the; plug-in manager.; Users should not use directly this class but the concrete classes ROOT::Math::IntegratorOneDim or; ROOT::Math::IntegratorMultiDim. @ingroup Integration. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~VirtualIntegratorMultiDim(); virtual doubleROOT::Math::VirtualIntegrator::Error() const; virtual doubleIntegral(const double*, const double*); virtual intROOT::Math::VirtualIntegrator::NEval() const; ROOT::Math::VirtualIntegratorMultiDim&operator=(const ROOT::Math::VirtualIntegratorMultiDim&); virtual ROOT::Math::IntegratorMultiDimOptionsOptions() const; virtual doubleROOT::Math::VirtualIntegrator::Result() const; virtual voidROOT::Math::VirtualIntegrator::SetAbsTolerance(double); virtual voidSetFunction(const ROOT::Math::IMultiGenFunction&); virtual voidSetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); virtual voidROOT::Math::VirtualIntegrator::SetRelTolerance(double); virtual intROOT::Math::VirtualIntegrator::Status() const; virtual ROOT::Math::IntegrationMultiDim::TypeType() const. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; double Integral(const double* , const double* ); evaluate integral. void SetFunction(const ROOT::Math::IMultiGenFunction& ); set integration function. return Options(). void SetOptions(const ROOT::Math::IntegratorMultiDimOptions& opt); set the options; (should be re-implemented by derived classes -if more options than tolerance exist. virtual ~VirtualIntegratorMultiDim(); destructor: no operation. {}. » Author: Magdalena Slawinska 10/2007 » Copyright (c) 2007 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 17:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__VirtualIntegratorMultiDim.html:2444,toler,tolerance,2444,root/html534/ROOT__Math__VirtualIntegratorMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__VirtualIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"r) const;  ; void LocalToMasterBomb (const Double_t *local, Double_t *master) const;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const;  ; void MasterToLocal (const Double_t *master, Double_t *local) const;  ; void MasterToLocalBomb (const Double_t *master, Double_t *local) const;  ; void MasterToLocalVect (const Double_t *master, Double_t *local) const;  ; void MasterToTop (const Double_t *master, Double_t *top) const;  Convert coordinates from master volume frame to top. ;  ; void PopDummy (Int_t ipop=9999);  ; Bool_t PopPath ();  ; Bool_t PopPath (Int_t index);  ; Bool_t PopPoint ();  ; Bool_t PopPoint (Int_t index);  ; Int_t PushPath (Int_t startlevel=0);  ; Int_t PushPoint (Int_t startlevel=0);  ; void ResetAll ();  Reset the navigator. ;  ; void ResetState ();  Reset current state flags. ;  ; Double_t Safety (Bool_t inside=kFALSE);  Compute safe distance from the current point. ;  ; TGeoNode * SearchNode (Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr);  Returns the deepest node containing fPoint, which must be set a priori. ;  ; void SetCheckingOverlaps (Bool_t flag=kTRUE);  ; void SetCldirChecked (Double_t *dir);  ; void SetCurrentDirection (const Double_t *dir);  ; void SetCurrentDirection (Double_t nx, Double_t ny, Double_t nz);  ; void SetCurrentPoint (const Double_t *point);  ; void SetCurrentPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastPoint (Double_t x, Double_t y, Double_t z);  ; void SetLastSafetyForPoint (Double_t safe, const Double_t *point);  ; void SetLastSafetyForPoint (Double_t safe, Double_t x, Double_t y, Double_t z);  ; void SetOutside (Bool_t flag=kTRUE);  ; void SetStartSafe (Bool_t flag=kTRUE);  ; void SetStep (Double_t step);  ; TGeoNode * Step (Bool_t is_geom=kTRUE, Bool_t cross=kTRUE);  Make a rectiliniar step of length fStep from current point (fPoint) on current direction (fDirection). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNavigator.html:8211,down,downwards,8211,doc/master/classTGeoNavigator.html,https://root.cern,https://root.cern/doc/master/classTGeoNavigator.html,1,['down'],['downwards']
Availability,"r) ||; 3488 strstr(filename, ""/usr/bin/cyg"")); 3489 return;; 3490#elif defined(R__WIN32); 3491 if (strstr(filename, ""/Windows/"")); 3492 return;; 3493#elif defined (R__LINUX); 3494 if (strstr(filename, ""/ld-linux""); 3495 || strstr(filename, ""linux-gnu/""); 3496 || strstr(filename, ""/libstdc++.""); 3497 || strstr(filename, ""/libgcc""); 3498 || strstr(filename, ""/libc.""); 3499 || strstr(filename, ""/libdl.""); 3500 || strstr(filename, ""/libm."")); 3501 return;; 3502#endif; 3503 // Update string of available libraries.; 3504 if (!fSharedLibs.IsNull()) {; 3505 fSharedLibs.Append("" "");; 3506 }; 3507 fSharedLibs.Append(filename);; 3508}; 3509 ; 3510////////////////////////////////////////////////////////////////////////////////; 3511/// Load a library file in cling's memory.; 3512/// if 'system' is true, the library is never unloaded.; 3513/// Return 0 on success, -1 on failure.; 3514 ; 3515Int_t TCling::Load(const char* filename, Bool_t system); 3516{; 3517 assert(!IsFromRootCling() && ""Trying to load library from rootcling!"");; 3518 ; 3519 // Used to return 0 on success, 1 on duplicate, -1 on failure, -2 on ""fatal"".; 3520 R__LOCKGUARD_CLING(gInterpreterMutex);; 3521 cling::DynamicLibraryManager* DLM = fInterpreter->getDynamicLibraryManager();; 3522 std::string canonLib = DLM->lookupLibrary(filename);; 3523 cling::DynamicLibraryManager::LoadLibResult res; 3524 = cling::DynamicLibraryManager::kLoadLibNotFound;; 3525 if (!canonLib.empty()) {; 3526 if (system); 3527 res = DLM->loadLibrary(filename, system, true);; 3528 else {; 3529 // For the non system libs, we'd like to be able to unload them.; 3530 // FIXME: Here we lose the information about kLoadLibAlreadyLoaded case.; 3531 cling::Interpreter::CompilationResult compRes;; 3532 HandleInterpreterException(GetMetaProcessorImpl(), Form("".L %s"", canonLib.c_str()), compRes, /*cling::Value*/nullptr);; 3533 if (compRes == cling::Interpreter::kSuccess); 3534 res = cling::DynamicLibraryManager::kLoadLibSuccess;; 3535 }; 3536 }; 3537 ; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:136799,failure,failure,136799,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['failure'],['failure']
Availability,"r). constructor from dimension of point and max number of points (to pre-allocate vector); Give a zero value and then use Initialize later one if the size is not known. explicit BinData(const ROOT::Fit::DataOptions& opt, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from option and default range. BinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from options and range; efault is 1D and value errors. BinData(unsigned int n, const double* dataX, const double* val, const double* ex, const double* eval); constructurs using external data . constructor from external data for 1D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* val, const double* ex, const double* ey, const double* eval). constructor from external data for 2D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, const double* val, const double* ex, const double* ey, const double* ez, const double* eval). constructor from external data for 3D with errors on coordinate and value. BinData(const ROOT::Fit::BinData& ). copy constructor. BinData & operator=(const ROOT::Fit::BinData& ). assignment operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__BinData.html:6940,error,errors,6940,root/html528/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__BinData.html,2,['error'],['errors']
Availability,"r). constructor from dimension of point and max number of points (to pre-allocate vector); Give a zero value and then use Initialize later one if the size is not known. explicit BinData(const ROOT::Fit::DataOptions& opt, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from option and default range. BinData(const ROOT::Fit::DataOptions& opt, const ROOT::Fit::DataRange& range, unsigned int maxpoints = 0, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). constructor from options and range; efault is 1D and value errors. BinData(unsigned int n, const double* dataX, const double* val, const double* ex, const double* eval); constructurs using external data . constructor from external data for 1D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* val, const double* ex, const double* ey, const double* eval). constructor from external data for 2D with errors on coordinate and value. BinData(unsigned int n, const double* dataX, const double* dataY, const double* dataZ, const double* val, const double* ex, const double* ey, const double* ez, const double* eval). constructor from external data for 3D with errors on coordinate and value. BinData(const ROOT::Fit::BinData& ). copy constructors. BinData & operator=(const ROOT::Fit::BinData& ). assignment operator. virtual ~BinData(). destructor. void Initialize(unsigned int maxpoints, unsigned int dim = 1, ROOT::Fit::BinData::ErrorType err = kValueError). preallocate a data set with given size , dimension and error type (to get the full point size); If the data set already exists and it is having the compatible point size space for the new points; is created in the data sets, while if not compatible the old data are erased and new space of; new size is allocated.; (i.e if exists initialize is equivalent to a resize( NPoints() + maxpoints). unsigned int PointSize() const. return the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Fit__BinData.html:6942,error,errors,6942,root/html532/ROOT__Fit__BinData.html,https://root.cern,https://root.cern/root/html532/ROOT__Fit__BinData.html,4,['error'],['errors']
Availability,"r); virtual~TStreamerSTLstring(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTStreamerSTL::CannotSplit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tTStreamerElement::GetArrayDim() const; Int_tTStreamerElement::GetArrayLength() const; TClass*TStreamerElement::GetClass() const; virtual TClass*TStreamerElement::GetClassPointer() const; Int_tTStreamerSTL::GetCtype() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTStreamerElement::GetExecID() const; Double_tTStreamerElement::GetFactor() const; virtual const char*TStreamerElement::GetFullName() const; virtual const char*TObject::GetIconName() const; virtual const char*GetInclude() const; Int_tTStreamerElement::GetMaxIndex(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerSTLstring.html:1536,error,error,1536,root/html528/TStreamerSTLstring.html,https://root.cern,https://root.cern/root/html528/TStreamerSTLstring.html,4,['error'],['error']
Availability,"r)TEntryListvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TEntryListinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DirectoryAutoAdd(TDirectory *)TEntryListvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Enter(Long64_t entry, TTree *tree=nullptr)TEntryListvirtual; Enter(Long64_t localentry, const char *treename, const char *filename)TEntryListvirtual; EnterRange(Long64_t start, Long64_t end, TTree *tree=nullptr, UInt_t step=1U)TEntryList; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fBlocksTEntryListprotected; fCurrentTEntryListprotected; fDirectoryTEntryListprotected; fEntriesToProcessTEntryListprotected; fFileNameTEntryListprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; fLastIndexQueriedTEntryListprotected; fLastIndexReturnedTEntryListprotected; fListsTEntryListprotected; fNTEntryListprotected; fNameTNamedprotected; fNBlocksTEntryListprotected; fReapplyTEntryListprotected; fShiftTEntryListprotected; fStringHashTEntryListprotected; fTitleTNamedprotected; fTreeNameTEntryListprotected; fTreeNumberTEntryListprotected; fUniqueIDTObjectprivate; GetCurrentList() constTEntryListinlinevirtual; GetD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryList-members.html:1789,error,error,1789,doc/master/classTEntryList-members.html,https://root.cern,https://root.cern/doc/master/classTEntryList-members.html,2,['error'],['error']
Availability,"r* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tCountKey(const void* key, Int_t firstIndx = 0, Bool_t bSearch = kTRUE, Int_t* firstRow = 0) const; virtual Int_tCountKeys() const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual Int_tFindFirstKey(const void* key) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const char*GetColumnName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetFirstRow() const; virtual const char*TObject::GetIconName() const; Int_tGetIndex(UInt_t sortedIndex) const; virtual const void*GetKeyAddress(Int_t indx); virtual Int_tGetLastFound() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNRows() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual TTable*GetTable() const; virtual const char*GetTableName() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTableSorter.html:4884,error,error,4884,root/html528/TTableSorter.html,https://root.cern,https://root.cern/root/html528/TTableSorter.html,6,['error'],['error']
Availability,"r* b); virtual Bool_tCd(const char* = """", Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual TGridResult*Command(const char*, Bool_t = kFALSE, UInt_t = 2); virtual Int_tTObject::Compare(const TObject* obj) const; static TGrid*Connect(const char* grid, const char* uid = 0, const char* pw = 0, const char* options = 0); virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGrid() const; virtual const char*GetHomeDirectory(); const char*GetHost() const; virtual const char*TObject::GetIconName() const; virtual TGridJDL*GetJDLGenerator(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOptions() const; Int_tGetPort() const; const char*GetPw() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGrid.html:1925,error,error,1925,root/html528/TGrid.html,https://root.cern,https://root.cern/root/html528/TGrid.html,6,['error'],['error']
Availability,"r* build_dir = """", UInt_t dirmode = 0); virtual char*ConcatFileName(const char* dir, const char* name); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual char*DynamicPathName(const char* lib, Bool_t quiet = kFALSE); virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidExitLoop(); virtual Bool_tExpandPathName(TString& path); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeGetAclicMode() const; virtual Int_tGetAclicProperties() const; voidGetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*GetBuildArch() const; virtual const char*GetBuildCompiler() const; virtual const char*GetBuildCompilerVersion() const; virtual c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSystem.html:3433,error,error,3433,root/html528/TSystem.html,https://root.cern,https://root.cern/root/html528/TSystem.html,4,['error'],['error']
Availability,"r* dir, const char* name); intConnectService(const char* server, int port, int tcpwindowsize); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual Func_tDynFindSymbol(const char* module, const char* entry); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Int_tExec(const char* shellcmd); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExit(int code, Bool_t mode = kTRUE); virtual voidTSystem::ExitLoop(); virtual Bool_tExpandPathName(TString& patbuf); virtual char*ExpandPathName(const char* path); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual const char*FindFile(const char* search, TString& file, EAccessMode mode = kFileExists); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFreeDirectory(void* dirp); virtual TSystem::EAclicModeTSystem::GetAclicMode() const; virtual Int_tTSystem::GetAclicProperties() const; voidTSystem::GetBeepDefaults(Int_t& freq, Int_t& duration) const; virtual const char*TSystem::GetBuildArch() const; virtual const char*TSystem::GetBuildCompiler() const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:3285,error,error,3285,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,2,['error'],['error']
Availability,"r* extF = """", const char* extD = """"); virtual~TNeuron(); voidTObject::AbstractMethod(const char* method) const; voidAddInLayer(TNeuron*); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidForceExternalValue(Double_t value); Double_tGetBranch() const; Double_tGetDeDw() const; Double_tGetDEDw() const; Double_tGetDerivative() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetError() const; virtual const char*TObject::GetIconName() const; TNeuron*GetInLayer(Int_t n) const; Double_tGetInput() const; virtual const char*TNamed::GetName() const; const Double_t*GetNormalisation() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNeuron.html:2146,error,error,2146,root/html528/TNeuron.html,https://root.cern,https://root.cern/root/html528/TNeuron.html,4,['error'],['error']
Availability,"r* keydatetime, Int_t cycle, const char* classname); virtual~TKeySQL(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTKey::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidDelete(Option_t* option = """"); virtual voidDeleteBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFillBuffer(char*&); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual char*GetBuffer() const; TBuffer*TKey::GetBufferRef() const; virtual const char*TKey::GetClassName() const; Short_tTKey::GetCycle() const; const TDatime&TKey::GetDatime() const; Long64_tGetDBDirId() const; Long64_tGetDBKeyId() const; Long64_tGetDBObjId() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TFile*TKey::GetFile() const; virtual const char*TKey::GetIconName() const; Short_tTKey::GetKeep() const; Int_tTKey::GetKeylen() const; TDirectory*TKey::GetMotherDir() const; virtual const char*TNamed::GetName() const; Int_tTKey::GetNbytes() const; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TKeySQL.html:1777,error,error,1777,root/html530/TKeySQL.html,https://root.cern,https://root.cern/root/html530/TKeySQL.html,3,['error'],['error']
Availability,"r* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0 on success. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Bool_t HandleInput(const void* in = 0); Handle asynchronous input on the socket. void SetInterruptH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSlave.html:9560,error,error,9560,root/html528/TXSlave.html,https://root.cern,https://root.cern/root/html528/TXSlave.html,1,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); TStringRooSharedProperties::asString(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual RooSharedProperties*clone(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; voidRooSharedProperties::decreaseRefCount(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; voidRooSharedProperties::increaseRefCount(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCategorySharedProperties.html:1886,error,error,1886,root/html534/RooCategorySharedProperties.html,https://root.cern,https://root.cern/root/html534/RooCategorySharedProperties.html,4,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual Bool_tASImage2File(ASImage*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual ASImage*File2ASImage(const char*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTImagePlugin::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TASImagePlugin.html:2238,error,error,2238,root/html526/TASImagePlugin.html,https://root.cern,https://root.cern/root/html526/TASImagePlugin.html,7,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; static TVirtualPerfStats*&TVirtualPerfStats::CurrentPerfStats(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; static const char*TVirtualPerfStats::EventType(TVirtualPerfStats::EEventType type); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidFileEvent(const char*, const char*, const char*, const char*, Bool_t); virtual voidFileOpenEvent(TFile*, const char*, Double_t); virtual voidFileReadEvent(TFile* file, Int_t len, Double_t start); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual voidFinish(); virtual Long64_tGetBytesRead() const; virtual Long64_tGetBytesReadExtra() const; virtual Double_tGetCpuTime() const; virtual Double_tGetDiskTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TGraphErrors*GetGraphIO(); TGraphErrors*GetGraphTime(); const char*GetHostInfo() const; virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreePerfStats.html:3783,error,error,3783,root/html534/TTreePerfStats.html,https://root.cern,https://root.cern/root/html534/TTreePerfStats.html,3,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; RooAbsIntegrator*createIntegrator(RooAbsFunc& func, const RooNumIntConfig& config, Int_t ndim = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*getDepIntegratorName(const char* name); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const RooAbsIntegrator*getProtoIntegrator(const char* name); virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumIntFactory.html:1883,error,error,1883,root/html526/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html526/RooNumIntFactory.html,4,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetKnot(Double_t& x, Double_t& y) const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSplinePoly.html:1554,error,error,1554,root/html528/TSplinePoly.html,https://root.cern,https://root.cern/root/html528/TSplinePoly.html,6,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelector::Begin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProofDriverSelector.html:1688,error,error,1688,root/html534/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html534/RooProofDriverSelector.html,3,['error'],['error']
Availability,"r* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTSelector::Begin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* time",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProofDriverSelector.html:1686,error,error,1686,root/html526/RooProofDriverSelector.html,https://root.cern,https://root.cern/root/html526/RooProofDriverSelector.html,4,['error'],['error']
Availability,"r* name = ""hist"") const; TH2F*createHistogram(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2, Int_t nx, Int_t ny, const char* cuts = """", const char* name = ""hist"") const; virtual Int_tRooAbsData::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooAbsData::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual RooAbsData*emptyClone(const char* newName = 0, const char* newTitle = 0, const RooArgSet* vars = 0) const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidRooAbsData::fill(); virtual voidTNamed::FillBuffer(char*& buffer); virtual TH1*RooAbsData::fillHistogram(TH1* hist, const RooArgList& plotVars, const char* cuts = """", const char* cutRange = 0) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const RooArgSet*get() const; virtual const RooArgSet*get(Int_t index) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tRooAbsData::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataSet.html:4467,error,error,4467,root/html526/RooDataSet.html,https://root.cern,https://root.cern/root/html526/RooDataSet.html,4,['error'],['error']
Availability,"r* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Short_tGetBorderMode() const; Short_tGetBorderSize() const; Int_tGetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tGetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWbox.html:1856,error,error,1856,root/html528/TWbox.html,https://root.cern,https://root.cern/root/html528/TWbox.html,3,['error'],['error']
Availability,"r* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidCopy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidDrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Short_tGetBorderMode() const; Short_tGetBorderSize() const; Int_tGetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tGetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::Get",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TWbox.html:1856,error,error,1856,root/html534/TWbox.html,https://root.cern,https://root.cern/root/html534/TWbox.html,3,['error'],['error']
Availability,"r* path, Option_t* opt = 0); Issue a stage request for file defined by 'path'. The string 'opt'; defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p"". void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE); Bulk locate request for a collection of files. A noop prepare command is; issued beforehand to fill redirector's cache, then Locate() is issued on; each file. Results are saved back to the input collection: when a file is; found, the staged bit is set to on, and its endpoint URL is added, if; different from the redirector's URL. If a file is not found, the staged; bit is set to off.; If addDummyUrl is kTRUE, in case file is not staged or redirector is; identical to endpoint URL, a dummy URL is prepended, respectively:; ""noop://redir"" and ""noop://none"".; If the collection contains URLs with ""anchors"" (i.e., #fileName.root),; they are ignored by xrootd.; The Locate() command preserves anchors, but needs single paths to be full; URLs beginning with root://.; Returns < 0 in case of errors, and the number of files processed in case; of success. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TXNetSystem. TXNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: A. Peters, G. Ganis 7/2/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXNetFileStager.html:8660,error,errors,8660,root/html602/TXNetFileStager.html,https://root.cern,https://root.cern/root/html602/TXNetFileStager.html,1,['error'],['errors']
Availability,"r* path, Option_t* opt = 0); Issue a stage request for file defined by 'path'. The string 'opt'; defines 'option' and 'priority' for 'Prepare': the format is; opt = ""option=o priority=p"". void GetPrefix(const char* url, TString& pfx); Isolate prefix in url. void Print(Option_t* option = """") const; Print basic info about this stager. Int_t Locate(const char* path, TString& endpath); Get actual end-point url for a path; Returns 0 in case of success and 1 if any error occured. Int_t LocateCollection(TFileCollection* fc, Bool_t addDummyUrl = kFALSE); Bulk locate request for a collection of files. A noop prepare command is; issued beforehand to fill redirector's cache, then Locate() is issued on; each file. Results are saved back to the input collection: when a file is; found, the staged bit is set to on, and its endpoint URL is added, if; different from the redirector's URL. If a file is not found, the staged; bit is set to off.; If addDummyUrl is kTRUE, in case file is not staged or redirector is; identical to endpoint URL, a dummy URL is prepended, respectively:; ""noop://redir"" and ""noop://none"".; If the collection contains URLs with ""anchors"" (i.e., #fileName.root),; they are ignored by xrootd.; The Locate() command preserves anchors, but needs single paths to be full; URLs beginning with root://.; Returns < 0 in case of errors, and the number of files processed in case; of success. Bool_t Matches(const char* s); Returns kTRUE if stager 's' is compatible with current stager.; Avoids multiple instantiations of the potentially the same TXNetSystem. TXNetFileStager(const char* stager = """"). Bool_t IsValid() const; { return (fSystem ? kTRUE : kFALSE); }. » Author: A. Peters, G. Ganis 7/2/2007 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/netx:$Id$ » Last generated: 2015-09-08 17:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TXNetFileStager.html:8613,error,errors,8613,root/html604/TXNetFileStager.html,https://root.cern,https://root.cern/root/html604/TXNetFileStager.html,1,['error'],['errors']
Availability,"r* ref = 0); Return pointer to the full TQueryResult instance owned by the player; and referenced by 'ref'. If ref = 0 or """", return the last query result. void ShowQueries(Option_t* opt = """"); Ask the master for the list of queries.; Options:; ""A"" show information about all the queries known to the; server, i.e. even those processed by other sessions; ""L"" show only information about queries locally available; i.e. already retrieved. If ""L"" is specified, ""A"" is; ignored.; ""F"" show all details available about queries; ""H"" print help menu; Default """". Bool_t IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); See if the data is ready to be analyzed. void Interrupt(TProof::EUrgent type, TProof::ESlaves list = kActive); Send interrupt to master or slave servers. Int_t GetParallel() const; Returns number of slaves active in parallel mode. Returns 0 in case; there are no active slaves. Returns -1 in case of error. TList * GetListOfSlaveInfos(); Returns list of TSlaveInfo's. In case of error return 0. void Activate(TList* slaves = 0); Activate slave server list. void SetMonitor(TMonitor* mon = 0, Bool_t on = kTRUE); Activate (on == TRUE) or deactivate (on == FALSE) all sockets; monitored by 'mon'. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TList* workers); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. Int_t BroadcastGroupPriority(const char* grp, Int_t priority, TProof::ESlaves list = kAllUnique); Broadcast the group priority to all workers in the specified list. Returns; the number of workers the message was successfully sent to.; Returns -1 in case of error. void ResetMergePrg(); Reset the merge progress notificator. Int_t Broadcast(const TMessage& mess, TList* slaves); Broadcast a message to all slaves in the specified list. Returns; the number of slaves the message was successfully sent to.; Returns -1 in case of error. Int_t Br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:38111,error,error,38111,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,6,['error'],['error']
Availability,"r* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin); Create a plugin handler. Called by TPluginManager. Bool_t CanHandle(const char* base, const char* uri); Check if regular expression appears in the URI, if so return kTRUE.; If URI = 0 always return kTRUE. void SetupCallEnv(); Setup ctor or static method call environment. Int_t CheckPlugin() const; Check if the plugin library for this handler exits. Returns 0; when it exists and -1 in case the plugin does not exist. Int_t LoadPlugin(); Load the plugin library for this handler. Returns 0 on successful loading; and -1 in case the library does not exist or in case of error. Long_t ExecPlugin(Int_t va_(nargs), ...); Execute ctor for this plugin and return pointer to object of specific; class. User must cast the returned long to the correct class.; This method accepts a variable number of arguments to be passed; to the ctor, where nargs is the number of arguments, followed; by nargs arguments. Returns 0 in case of error. void Print(Option_t* opt = """") const; Print info about the plugin handler. If option is ""a"" print; also the ctor's that will be used. TPluginHandler(); { }. TPluginHandler(const char* base, const char* regexp, const char* className, const char* pluginName, const char* ctor, const char* origin). TPluginHandler& operator=(const TPluginHandler& ). const char * GetBase() const; { return fBase; }. const char * GetRegexp() const; { return fRegexp; }. const char * GetPlugin() const; { return fPlugin; }. const char * GetCtor() const; { return fCtor; }. const char * GetOrigin() const; { return fOrigin; }. const char * GetClass() const; { return fClass; }. » Author: Fons Rademakers 26/1/2002 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPluginHandler.html:10468,error,error,10468,root/html534/TPluginHandler.html,https://root.cern,https://root.cern/root/html534/TPluginHandler.html,1,['error'],['error']
Availability,"r* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEnableTimeout(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; static voidErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); static Long_tTApplication::ExecuteFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); TApplication::EExitOnExceptionTApplication::ExitOnException(TApplication::EExitOnException opt = kExit); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; static voidFilterLocalroot(TString& path, const char* url = ""root://dum/""); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFlushLogFile(); TObject*Get(const char* namecycle); Int_tGetActSessions() const; virtual TApplicationImp*TApplication::GetApplicationImp(); static TList*TApplication::GetApplications(); TApplication*TApplication::GetAppRemote() const; TProofLockPath*GetCacheLock(); const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataDir() const; const char*GetDataDirOpts() const; static TMap*GetDataS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServ.html:4263,error,error,4263,root/html602/TProofServ.html,https://root.cern,https://root.cern/root/html602/TProofServ.html,2,['error'],['error']
Availability,"r* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteAction(); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGroupButton.html:5850,error,error,5850,root/html602/TGroupButton.html,https://root.cern,https://root.cern/root/html602/TGroupButton.html,2,['error'],['error']
Availability,"r* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; vir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TButton.html:7684,error,error,7684,root/html602/TButton.html,https://root.cern,https://root.cern/root/html602/TButton.html,2,['error'],['error']
Availability,"r* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::GetC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePad.html:5567,error,error,5567,root/html602/TEvePad.html,https://root.cern,https://root.cern/root/html602/TEvePad.html,4,['error'],['error']
Availability,"r* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* uri); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* uri, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:6191,error,error,6191,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['error'],['error']
Availability,"r* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); Int_tTProof::EnablePackage(const char* package, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); Int_tTProof::EnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE, TList* workers = 0); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tTProof::Exec(const char* cmd, Bool_t plusMaster = kFALSE); Int_tTProof::Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tTProof::ExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidTProof::Feedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tTProof::Finalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tTProof::Finalize(const char* queryref, Bool_t force = kFALSE); TList*TProof::FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tTProof::GetBytesRead() const; Int_tTProof::GetClientProtocol() const; const char*TProof::GetConfDir() const; const char*TProof::GetConfFile() const; Float_tTProof::GetCpuTime() const; const char*TProof::GetDataPoolUrl() const; virtual TFileCollection*TProof::GetDataSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:6418,error,error,6418,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,4,['error'],['error']
Availability,"r* title); virtual~RooAbsMCStudyModule(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tdoInitializeInstance(RooMCStudy&); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual RooDataSet*finalizeRun(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsMCStudyModule.html:1990,error,error,1990,root/html526/RooAbsMCStudyModule.html,https://root.cern,https://root.cern/root/html526/RooAbsMCStudyModule.html,5,['error'],['error']
Availability,"r* title, Int_t x, Int_t y, UInt_t width, UInt_t height); virtual TContextMenuImp*CreateContextMenuImp(TContextMenu* c, const char* name, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title); virtual TControlBarImp*CreateControlBarImp(TControlBar* c, const char* title, Int_t x, Int_t y); virtual TInspectorImp*TGuiFactory::CreateInspectorImp(const TObject* obj, UInt_t width, UInt_t height); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootGuiFactory.html:2559,error,error,2559,root/html528/TRootGuiFactory.html,https://root.cern,https://root.cern/root/html528/TRootGuiFactory.html,6,['error'],['error']
Availability,"r* user, const char* dsName); Checks if the indicated dataset exits. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings and verification, if required.; If a dataset with the same name already exists the action fails unless 'opts'; contains 'O', in which case the old dataset is overwritten, or contains 'U',; in which case 'newDataSet' is added to the existing dataset (duplications are; ignored, if any).; If 'opts' contains 'V' the dataset files are also verified (if the dataset manager; is configured to allow so). By default the dataset is not verified.; If 'opts' contains 'T' the in the dataset object (status bits, meta,...); is trusted, i.e. not reset (if the dataset manager is configured to allow so).; Returns 0 on success, -1 on failure. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs, >= 0 on success.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). Int_t ScanDataSet(const char* group, const char* user, const char* dsName, UInt_t option = kReopen|kDebug); See documentation of ScanDataSet(TFileCollection *dataset, UInt_t option). TMap * GetDataSets(const char* uri, UInt_t option = TDataSetManager::kExport). Returns all datasets for the <group> and <user> specified by <uri>.; If <user> is 0, it returns all datasets for the given <group>.; If <group> is 0, it returns all datasets.; The returned TMap contains:; <group> --> <map of users> --> <map of datasets> --> <dataset> (TFileCollection). The unsigned int 'option' is forwarded to GetDataSet and BrowseDataSet.; Available options (to be .or.ed):; kShowDefault a default selection is shown that include the ones from; the current user, the ones from the group and the common ones; kPrint print the dataset content; kQuotaUpdate update quotas; kExport use export na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDataSetManagerFile.html:18608,failure,failure,18608,root/html528/TDataSetManagerFile.html,https://root.cern,https://root.cern/root/html528/TDataSetManagerFile.html,4,['failure'],['failure']
Availability,"r* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPySelector.html:2725,error,error,2725,root/html534/TPySelector.html,https://root.cern,https://root.cern/root/html534/TPySelector.html,3,['error'],['error']
Availability,"r* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree = 0); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPySelector.html:2725,error,error,2725,root/html528/TPySelector.html,https://root.cern,https://root.cern/root/html528/TPySelector.html,3,['error'],['error']
Availability,"r*)crdbuf, ""'"");; 5879 if (kapo1 == 0) goto L150;; 5880 kapo2 = strspn((const char*)crdbuf + kapo1, ""'"");; 5881 if (kapo2 == 0) goto L150;; 5882// new (free-field) format; 5883 kapo2 += kapo1;; 5884// skip leading blanks if any; 5885 for (istart = 1; istart <= kapo1-1; ++istart) {; 5886 if (crdbuf(istart-1,1) != ' ') goto L120;; 5887 }; 5888 goto L210;; 5889L120:; 5890// parameter number integer; 5891 celmnt = crdbuf(istart-1, kapo1-istart);; 5892 if (scanf((const char*)celmnt,&fk)) {;}; 5893 k = Int_t(fk);; 5894 if (k <= 0) goto L210;; 5895 cnamk = ""PARAM "" + celmnt;; 5896 if (kapo2 - kapo1 > 1) {; 5897 cnamk = crdbuf(kapo1, kapo2-1-kapo1);; 5898 }; 5899// special handling if comma or blanks and a comma follow 'name'; 5900 for (icy = kapo2 + 1; icy <= lenbuf; ++icy) {; 5901 if (crdbuf(icy-1,1) == ',') goto L139;; 5902 if (crdbuf(icy-1,1) != ' ') goto L140;; 5903 }; 5904 uk = 0;; 5905 wk = 0;; 5906 a = 0;; 5907 b = 0;; 5908 goto L170;; 5909L139:; 5910 ++icy;; 5911L140:; 5912 ibegin = icy;; 5913 ctemp = crdbuf(ibegin-1,lenbuf-ibegin);; 5914 mncrck(ctemp, 20, comand, lnc, fMaxpar, fPARSplist, llist, ierr, fIsyswr);; 5915 if (ierr > 0) goto L180;; 5916 uk = fPARSplist[0];; 5917 wk = 0;; 5918 if (llist >= 2) wk = fPARSplist[1];; 5919 a = 0;; 5920 if (llist >= 3) a = fPARSplist[2];; 5921 b = 0;; 5922 if (llist >= 4) b = fPARSplist[3];; 5923 goto L170;; 5924// old (fixed-field) format; 5925L150:; 5926 if (scanf((const char*)crdbuf,&xk,stmp,&uk,&wk,&a,&b)) {;}; 5927 cnamk = stmp;; 5928 k = Int_t(xk);; 5929 if (k == 0) goto L210;; 5930// parameter format cracked, implement parameter definition; 5931L170:; 5932 mnparm(k-1, cnamk, uk, wk, a, b, ierr);; 5933 icondn = ierr;; 5934 return;; 5935// format or other error; 5936L180:; 5937 icondn = 1;; 5938 return;; 5939// end of data; 5940L210:; 5941 icondn = 2;; 5942}; 5943 ; 5944////////////////////////////////////////////////////////////////////////////////; 5945/// To fit a parabola to npar2p points; 5946///; 5947/// - npar2p no.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:193201,error,error,193201,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['error'],['error']
Availability,"r*DataMemberInfo_TypeName(DataMemberInfo_t*) const; virtual Long_tDataMemberInfo_TypeProperty(DataMemberInfo_t*) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:6979,error,error,6979,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,3,['error'],['error']
Availability,"r*TObject::ClassName() const; virtual voidClear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TObject*CloneObject(const TObject* obj, Bool_t autoadd = kTRUE); virtual voidClose(Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidCopy(TObject&) const; static voidDecodeNameCycle(const char* namecycle, char* name, Short_t& cycle); virtual voidDelete(const char* namecycle = """"); virtual voidDeleteAll(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; static voidEncodeNameCycle(char* buffer, const char* name, Short_t cycle); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TKey*FindKey(const char*) const; virtual TKey*FindKeyAny(const char*) const; virtual TObject*FindObject(const char* name) const; virtual TObject*FindObject(const TObject* obj) const; virtual TObject*FindObjectAny(const char* name) const; virtual TObject*FindObjectAnyFile(const char*) const; virtual TObject*Get(const char* namecycle); virtual Int_tGetBufferSize() const; virtual TDirectory*GetDirectory(const char* namecycle, Bool_t printError = false, const char* funcname = ""GetDirectory""); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual TFile*GetFile() const; virtual const char*TObject::GetIconName() const; virtual TKey*GetKey(const char*, Short_t = 9999) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDirectory.html:2020,error,error,2020,root/html528/TDirectory.html,https://root.cern,https://root.cern/root/html528/TDirectory.html,2,['error'],['error']
Availability,"r*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TXSlave(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd); Create a PROOF slave object. Called via the TProof ctor. void Init(const char* host, Int_t stype); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TXSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TXSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 if it did not ping or in case of error. void Touch(); Touch the client admin file to proof we are alive. void Interrupt(Int_t type); Send interrupt to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. It will be; processed asynchronously by a separate thread. Int_t GetProofdProtocol(TSocket* s); Find out the remote proofd protocol version.; Returns -1 in case of error. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator.; If any output is due, this is returned as a generic message. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t SendGroupPriority(const char* grp, Int_t priority); Communicate to the coordinator the priprity of the group to which the; user belongs; Return 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXSlave.html:9366,ping,ping,9366,root/html528/TXSlave.html,https://root.cern,https://root.cern/root/html528/TXSlave.html,2,"['error', 'ping']","['error', 'ping']"
Availability,"r, . const Double_t * ; exld = nullptr, . const Double_t * ; exhd = nullptr, . const Double_t * ; eyld = nullptr, . const Double_t * ; eyhd = nullptr . ). TGraphBentErrors normal constructor. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 142 of file TGraphBentErrors.cxx. ◆ TGraphBentErrors() [5/5]. TGraphBentErrors::TGraphBentErrors ; (; const TGraphBentErrors & ; gr). TGraphBentErrors copy constructor. ; Definition at line 71 of file TGraphBentErrors.cxx. ◆ ~TGraphBentErrors(). TGraphBentErrors::~TGraphBentErrors ; (; ). override . TGraphBentErrors default destructor. ; Definition at line 176 of file TGraphBentErrors.cxx. Member Function Documentation. ◆ AddPointError(). void TGraphBentErrors::AddPointError ; (; Double_t ; x, . Double_t ; y, . Double_t ; exl, . Double_t ; exh, . Double_t ; eyl, . Double_t ; eyh, . Double_t ; exld = 0, . Double_t ; exhd = 0, . Double_t ; eyld = 0, . Double_t ; eyhd = 0 . ). virtual . Add a point with bent errors to the graph. ; Definition at line 192 of file TGraphBentErrors.cxx. ◆ Allocate(). Double_t ** TGraphBentErrors::Allocate ; (; Int_t ; newsize). inlineoverrideprotectedvirtual . Allocate internal data structures for newsize points. ; Reimplemented from TGraph.; Definition at line 104 of file TGraphBentErrors.h. ◆ Apply(). void TGraphBentErrors::Apply ; (; TF1 * ; f). overridevirtual . Apply a function to all data points \( y = f(x,y) \). ; Errors are calculated as \( eyh = f(x,y+eyh)-f(x,y) \) and \( eyl = f(x,y)-f(x,y-eyl) \).; Special treatment has to be applied for the functions where the role of ""up"" and ""down"" is reversed.; Function suggested/implemented by Miroslav Helbich helbi.nosp@m.ch@m.nosp@m.ail.d.nosp@m.esy..nosp@m.de ; Reimplemented from TGraph.; Definition at line 210 of file TGraphBentErrors.cxx. ◆ Class(). static TClass * TGraphBentErrors::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGraphBentErrors::Class_Na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphBentErrors.html:36699,error,errors,36699,doc/master/classTGraphBentErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphBentErrors.html,1,['error'],['errors']
Availability,"r, 0 otherwise. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. Int_t SendCanvases(); Send any created canvas to client. Int_t BrowseDirectory(const char* dirname); Browse directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:15384,avail,available,15384,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,5,['avail'],['available']
Availability,"r, 0 otherwise. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. Int_t SendCanvases(); Send any created canvas to client. Int_t BrowseDirectory(const char* dirname); Browse directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationServer.html:16479,avail,available,16479,root/html602/TApplicationServer.html,https://root.cern,https://root.cern/root/html602/TApplicationServer.html,2,['avail'],['available']
Availability,"r, Bool_t check_norm=kFALSE)TGeoManager; Read(const char *name)TObjectvirtual; RecursiveRemove(TObject *obj)TObjectvirtual; RefreshPhysicalNodes(Bool_t lock=kTRUE)TGeoManager; RegisterMatrix(const TGeoMatrix *matrix)TGeoManager; RemoveMaterial(Int_t index)TGeoManager; RemoveNavigator(const TGeoNavigator *nav)TGeoManager; ReplaceVolume(TGeoVolume *vorig, TGeoVolume *vnew)TGeoManager; ResetBit(UInt_t f)TObjectinline; ResetState()TGeoManager; ResetUserData()TGeoManager; RestoreMasterVolume()TGeoManager; Safety(Bool_t inside=kFALSE)TGeoManager; SamplePoints(Int_t npoints, Double_t &dist, Double_t epsil=1E-5, const char *g3path="""")TGeoManager; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SaveAttributes(const char *filename=""tgeoatt.C"")TGeoManager; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SearchNode(Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr)TGeoManager; SelectTrackingMedia()TGeoManager; SetAlignableEntry(const char *unique_name, const char *path, Int_t uid=-1)TGeoManager; SetAllIndex()TGeoManager; SetAnimateTracks(Bool_t flag=kTRUE)TGeoManagerinline; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetBombFactors(Double_t bombx=1.3, Double_t bomby=1.3, Double_t bombz=1.3, Double_t bombr=1.3)TGeoManager; SetCheckedNode(TGeoNode *node)TGeoManager; SetCheckingOverlaps(Bool_t flag=kTRUE)TGeoManagerinline; SetCldirChecked(Double_t *dir)TGeoManagerinline; SetClipping(Bool_t flag=kTRUE)TGeoManagerinline; SetClippingShape(TGeoShape *clip)TGeoManager; SetCurrentDirection(Double_t *dir)TGeoManagerinline; SetCurrentDirection(Double_t nx, Double_t ny, Double_t nz)TGeoManagerinline; SetCurrentNavigator(Int_t index)TGeoManager; SetCurrentPoint(Double_t *point)TGeoManagerinline; SetCurrentPoint(Double_t x, Double_t y, Double_t z)TGeoManagerinline; SetCurrentTrack(Int_t i)TGeoManagerinline; SetCurrentTrack(TVirtualGeoTrack *track)TGeoManagerinline; SetDefaultUnits(EDefaultUnits new_value)TGeoManag",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager-members.html:23573,down,downwards,23573,doc/master/classTGeoManager-members.html,https://root.cern,https://root.cern/doc/master/classTGeoManager-members.html,1,['down'],['downwards']
Availability,"r, Bool_t proxyOwnsArg = kFALSE); virtual~RooArgProxy(); RooAbsArg*absArg() const; voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgProxy.html:2226,error,error,2226,root/html526/RooArgProxy.html,https://root.cern,https://root.cern/root/html526/RooArgProxy.html,5,['error'],['error']
Availability,"r, Double_t *eyh=nullptr, Double_t *ezl=nullptr, Double_t *ezh=nullptr, Option_t *option="""");  TGraph2DAsymmErrors constructor with doubles vectors as input. ;  ;  ~TGraph2DAsymmErrors () override;  TGraph2DAsymmErrors destructor. ;  ; virtual void AddPointError (Double_t x, Double_t y, Double_t z, Double_t exl=0., Double_t exh=0., Double_t eyl=0., Double_t eyh=0., Double_t ezl=0., Double_t ezh=0.);  Add a 3D point with asymmetric errorbars to an existing graph. ;  ; Double_t GetErrorX (Int_t bin) const override;  Returns the combined error along X at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorXhigh (Int_t i) const;  Returns the high error along X at point i. ;  ; Double_t GetErrorXlow (Int_t i) const;  Returns the low error along X at point i. ;  ; Double_t GetErrorY (Int_t bin) const override;  Returns the combined error along Y at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorYhigh (Int_t i) const;  Returns the high error along Y at point i. ;  ; Double_t GetErrorYlow (Int_t i) const;  Returns the low error along Y at point i. ;  ; Double_t GetErrorZ (Int_t bin) const override;  Returns the combined error along Z at point i by computing the average of the lower and upper variance. ;  ; Double_t GetErrorZhigh (Int_t i) const;  Returns the high error along Z at point i. ;  ; Double_t GetErrorZlow (Int_t i) const;  Returns the low error along Z at point i. ;  ; Double_t * GetEXhigh () const override;  ; Double_t * GetEXlow () const override;  ; Double_t * GetEYhigh () const override;  ; Double_t * GetEYlow () const override;  ; Double_t * GetEZhigh () const override;  ; Double_t * GetEZlow () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Ret",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:4493,error,error,4493,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['error']
Availability,"r, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addAsymmetryBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. ~RooHist(); Destructor. Bool_t hasIdenticalBinning(const RooHist& other) const; Return kTRUE if binning of this RooHist is identical to that of 'other'. Bool_t isIdentical(const RooHist& other, Double_t tol = 1e-6) const; Return kTRUE if contents of this RooHIst is identical within given; relative tolerance to that of 'other'. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this histogram to the specified output stream. Standard: number of entries; Shape: error CL and maximum value; Verbose: print our bin contents and errors. void printName(ostream& os) const; Print name of RooHist. void printTitle(ostream& os) const; Print title of RooHist. void printClassName(ostream& os) const; Print class name of RooHist. RooHist* makeResidHist(const RooCurve& curve, bool normalize = false) const; Create and return RooHist containing residuals w.r.t to given curve.; If nor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooHist.html:24479,error,error,24479,root/html526/RooHist.html,https://root.cern,https://root.cern/root/html526/RooHist.html,4,['error'],['error']
Availability,"r, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addAsymmetryBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value (n1-n2)/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBin(Axis_t binCenter, Int_t n1, Int_t n2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. void addEfficiencyBinWithError(Axis_t binCenter, Double_t n1, Double_t n2, Double_t en1, Double_t en2, Double_t binWidth = 0, Double_t xErrorFrac = 1.0, Double_t scaleFactor = 1.0); Add a bin to this histogram with the value n1/(n1+n2); using an error bar calculated with Binomial statistics. ~RooHist(); Destructor. Bool_t hasIdenticalBinning(const RooHist& other) const; Return kTRUE if binning of this RooHist is identical to that of 'other'. Bool_t isIdentical(const RooHist& other, Double_t tol = 1e-6) const; Return kTRUE if contents of this RooHIst is identical within given; relative tolerance to that of 'other'. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Print info about this histogram to the specified output stream. Standard: number of entries; Shape: error CL and maximum value; Verbose: print our bin contents and errors. void printName(ostream& os) const; Print name of RooHist. void printTitle(ostream& os) const; Print title of RooHist. void printClassName(ostream& os) const; Print class name of RooHist. RooHist* makeResidHist(const RooCurve& curve, bool normalize = false, bool useAverage = false) const; Create and return RooHist containing residuals w.r.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooHist.html:24436,error,error,24436,root/html534/RooHist.html,https://root.cern,https://root.cern/root/html534/RooHist.html,1,['error'],['error']
Availability,"r, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0);  Process a data set (TFileCollection) using the specified selector object The default tree is analyzed (i.e. ;  ; virtual Long64_t Process (TSelector *selector, Long64_t nentries, Option_t *option="""");  Generic (non-data based) selector processing: the Process() method of the specified selector is called 'n' times. ;  ; void Progress (Long64_t total, Long64_t processed);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  Get query progress information. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  Get query progress information. ;  ; void PutLog (TQueryResult *qr);  Display log of query pq into the log window frame. ;  ; void QueryResultReady (const char *ref);  Notify availability of a query result. ;  ; virtual Bool_t RegisterDataSet (const char *name, TFileCollection *dataset, const char *optStr="""");  Register the 'dataSet' on the cluster under the current user, group and the given 'dataSetName'. ;  ; Int_t Remove (const char *queryref, Bool_t all=kFALSE);  Send remove request for the query specified by ref. ;  ; Int_t Remove (Int_t query, Bool_t all=kFALSE);  Send remove request for the qry-th query in fQueries. ;  ; void RemoveChain (TChain *chain);  Remove chain from data set. ;  ; virtual Int_t RemoveDataSet (const char *dataset, const char *optStr="""");  Remove the specified dataset from the PROOF cluster. ;  ; Int_t RemoveDynamicPath (const char *libpath, Bool_t onClient=kFALSE);  Remove 'libpath' from the lib path search. ;  ; void RemoveFeedback (const char *name);  Remove object from feedback list. ;  ; Int_t RemoveIncludePath (const char *incpath, Bool_t onClient=kFALSE);  Remove 'incpath' from the inc path search. ;  ; virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:15617,avail,availability,15617,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,2,['avail'],['availability']
Availability,"r, opt_vec.len) == 0); 19922 break;; 19923 }; 19924 lua_rawset(state, -3);; 19925 lua_pop(state, 1);; 19926 }; 19927 ; 19928 /* Call script */; 19929 state = mg_lua_context_script_run(state,; 19930 ctx->dd.config[LUA_BACKGROUND_SCRIPT],; 19931 ctx,; 19932 ebuf,; 19933 sizeof(ebuf));; 19934 if (!state) {; 19935 mg_cry_ctx_internal(ctx,; 19936 ""lua_background_script start error: %s"",; 19937 ebuf);; 19938 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19939 mg_snprintf(NULL,; 19940 NULL, /* No truncation check for error buffers */; 19941 error->text,; 19942 error->text_buffer_size,; 19943 ""Error in script %s: %s"",; 19944 config_options[DOCUMENT_ROOT].name,; 19945 ebuf);; 19946 }; 19947 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19948 ; 19949 free_context(ctx);; 19950 pthread_setspecific(sTlsKey, NULL);; 19951 return NULL;; 19952 }; 19953 ; 19954 /* state remains valid */; 19955 ctx->lua_background_state = (void *)state;; 19956 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19957 ; 19958 } else {; 19959 ctx->lua_background_state = 0;; 19960 }; 19961#endif; 19962 ; 19963 /* Step by step initialization of ctx - depending on build options */; 19964#if !defined(NO_FILESYSTEMS); 19965 if (!set_gpass_option(ctx, NULL)) {; 19966 const char *err_msg = ""Invalid global password file"";; 19967 /* Fatal error - abort start. */; 19968 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19969 ; 19970 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19971 mg_snprintf(NULL,; 19972 NULL, /* No truncation check for error buffers */; 19973 error->text,; 19974 error->text_buffer_size,; 19975 ""%s"",; 19976 err_msg);; 19977 }; 19978 free_context(ctx);; 19979 pthread_setspecific(sTlsKey, NULL);; 19980 return NULL;; 19981 }; 19982#endif; 19983 ; 19984#if defined(USE_MBEDTLS); 19985 if (!mg_sslctx_init(ctx, NULL)) {; 19986 const char *err_msg = ""Error initializing SSL context"";; 19987 /* Fatal error - abort start. */; 19988 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19989 ; 19990 if ((error !=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/civetweb_8c_source.html:596686,error,error,596686,doc/master/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/master/civetweb_8c_source.html,1,['error'],['error']
Availability,"r, opt_vec.len) == 0); 19923 break;; 19924 }; 19925 lua_rawset(state, -3);; 19926 lua_pop(state, 1);; 19927 }; 19928 ; 19929 /* Call script */; 19930 state = mg_lua_context_script_run(state,; 19931 ctx->dd.config[LUA_BACKGROUND_SCRIPT],; 19932 ctx,; 19933 ebuf,; 19934 sizeof(ebuf));; 19935 if (!state) {; 19936 mg_cry_ctx_internal(ctx,; 19937 ""lua_background_script start error: %s"",; 19938 ebuf);; 19939 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19940 mg_snprintf(NULL,; 19941 NULL, /* No truncation check for error buffers */; 19942 error->text,; 19943 error->text_buffer_size,; 19944 ""Error in script %s: %s"",; 19945 config_options[DOCUMENT_ROOT].name,; 19946 ebuf);; 19947 }; 19948 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19949 ; 19950 free_context(ctx);; 19951 pthread_setspecific(sTlsKey, NULL);; 19952 return NULL;; 19953 }; 19954 ; 19955 /* state remains valid */; 19956 ctx->lua_background_state = (void *)state;; 19957 pthread_mutex_unlock(&ctx->lua_bg_mutex);; 19958 ; 19959 } else {; 19960 ctx->lua_background_state = 0;; 19961 }; 19962#endif; 19963 ; 19964 /* Step by step initialization of ctx - depending on build options */; 19965#if !defined(NO_FILESYSTEMS); 19966 if (!set_gpass_option(ctx, NULL)) {; 19967 const char *err_msg = ""Invalid global password file"";; 19968 /* Fatal error - abort start. */; 19969 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19970 ; 19971 if ((error != NULL) && (error->text_buffer_size > 0)) {; 19972 mg_snprintf(NULL,; 19973 NULL, /* No truncation check for error buffers */; 19974 error->text,; 19975 error->text_buffer_size,; 19976 ""%s"",; 19977 err_msg);; 19978 }; 19979 free_context(ctx);; 19980 pthread_setspecific(sTlsKey, NULL);; 19981 return NULL;; 19982 }; 19983#endif; 19984 ; 19985#if defined(USE_MBEDTLS); 19986 if (!mg_sslctx_init(ctx, NULL)) {; 19987 const char *err_msg = ""Error initializing SSL context"";; 19988 /* Fatal error - abort start. */; 19989 mg_cry_ctx_internal(ctx, ""%s"", err_msg);; 19990 ; 19991 if ((error !=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/civetweb_8c_source.html:596719,error,error,596719,doc/v632/civetweb_8c_source.html,https://root.cern,https://root.cern/doc/v632/civetweb_8c_source.html,1,['error'],['error']
Availability,"r,; 0 in case of success. Int_t GetFromWeb10(char* buf, Int_t len, const TString& msg); Read multiple byte range request from web server.; Uses HTTP 1.0 daemon wihtout mod-root.; Returns -2 in case file does not exist, -1 in case; of error and 0 in case of success. void Seek(Long64_t offset, TFile::ERelativeTo pos = kBeg); Set position from where to start reading. Long64_t GetSize() const; Return maximum file size. Int_t GetHead(); Get the HTTP header. Depending on the return code we can see if; the file exists and if the server uses mod_root.; Returns -1 in case of an error, -2 in case the file does not exists,; -3 in case HEAD is not supported (dCache HTTP door) and; 0 in case of success. Int_t GetLine(TSocket* s, char* line, Int_t maxsize); Read a line from the socket. Reads at most one less than the number of; characters specified by maxsize. Reading stops when a newline character; is found, The newline (\n) and cr (\r), if any, are removed.; Returns -1 in case of error, or the number of characters read (>= 0); otherwise. Int_t GetHunk(TSocket* s, char* hunk, Int_t maxsize); Read a hunk of data from the socket, up until a terminator. The hunk is; limited by whatever the TERMINATOR callback chooses as its; terminator. For example, if terminator stops at newline, the hunk; will consist of a line of data; if terminator stops at two; newlines, it can be used to read the head of an HTTP response.; Upon determining the boundary, the function returns the data (up to; the terminator) in hunk. In case of read error, -1 is returned. In case of having read some; data, but encountering EOF before seeing the terminator, the data; that has been read is returned, but it will (obviously) not contain the; terminator. The TERMINATOR function is called with three arguments: the; beginning of the data read so far, the beginning of the current; block of peeked-at data, and the length of the current block.; Depending on its needs, the function is free to choose whether to; analyze al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TWebFile.html:28169,error,error,28169,root/html528/TWebFile.html,https://root.cern,https://root.cern/root/html528/TWebFile.html,6,['error'],['error']
Availability,"r,; bool compton);; The meaning of the parameters is as follows:. spectrum: pointer to the vector of the source spectrum; size: length of spectrum vector; number_of_iterations: maximal width of clipping window; direction: direction of change of clipping window. Possible values:. BACK1_INCREASING_WINDOW; BACK1_DECREASING_WINDOW. filter_order: order of clipping filter. Possible values:. BACK1_ORDER2; BACK1_ORDER4; BACK1_ORDER6; BACK1_ORDER8. compton: logical variable whether the estimation of Compton edge will be included. Possible values:. BACK1_EXCLUDE_COMPTON; BACK1_INCLUDE_COMPTON. 1.2 2-DIMENSIONAL SPECTRA; This basic background estimation function allows to separate useless spectrum information (2D-continuous background and coincidences of peaks with background in both dimensions) from peaks. It calculates background spectrum from the source spectrum. The result is placed in the array pointed by spectrum pointer. On successful completion it returns 0. On error it returns a pointer to the string describing error.; char *Background2(float **spectrum,; int sizex,; int sizey,; int number_of_iterations);; Function parameters:. spectrum: pointer to the array of the source spectrum; sizex: x length of spectrum; sizey: y length of spectrum; number_of_iterations: width of the clipping window. In Figure 1.6 we present an example of a 2-dimensional spectrum before background elimination. 2-dimensional spectrum before background elimination. Estimated background is shown in Figure 1.7. After subtraction we get pure 2-dimensional peaks. Estimated background. Similarly to 1-dimensional case, we have generalized also the function for 2-dimensional background estimation. Sometimes the widths of peaks in both dimensions are different. As an example, we can introduce an n-gamma 2-dimensional spectra. Then it is necessary to set different widths of clipping window in both dimensions. In Figure 1.8 we give an example of such a spectrum. It is necessary to set different widths of cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:5209,error,error,5209,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,2,['error'],['error']
Availability,"r,cputime),""brNDC"");; p->Draw();; p->SetTextColor(kRed+3);; p->SetFillColor(kYellow-8);; pad->Update();; return ok;; }; ; int minuit2FitBench(int npass=20) {; TH1::AddDirectory(false);; TCanvas *c1 = new TCanvas(""FitBench"",""Fitting Demo"",10,10,900,900);; c1->Divide(2,2);; c1->SetFillColor(kYellow-9);; // create a TF1 with the range from 0 to 3 and 6 parameters; fitFcn = new TF1(""fitFcn"",fitFunction,0,3,6);; fitFcn->SetNpx(200);; gStyle->SetOptFit();; gStyle->SetStatY(0.6);; ; bool ok = true;; //with Minuit; c1->cd(1);; ok &= DoFit(""Minuit"",gPad,npass);; ; //with Fumili; c1->cd(2);; ok &= DoFit(""Fumili"",gPad,npass);; ; //with Minuit2; c1->cd(3);; ok &= DoFit(""Minuit2"",gPad,npass);; ; //with Fumili2; c1->cd(4);; ok &= DoFit(""Fumili2"",gPad,npass);; ; c1->SaveAs(""FitBench.root"");; return (ok) ? 0 : 1;; }; MinimizerOptions.h; kRed@ kRedDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; TCanvas.h; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; TF1.h; TFrame.h; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; SetLineColorOption_t Option_t SetLineColorDefinition TGWin32VirtualXProxy.cxx:54; TH1.h; TMath.h; TPaveLabel.h; TROOT.h; TRandom3.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TStopwatch.h; Formchar * Form(const char *fmt,...)Formats a string in a circular formatting buffer.Definition TString.cxx:2489; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; TSystem.h; gPad#define gPadDefinition TVirtualPad.h:308; ROOT::Math::MinimizerOptions::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)Set the default Minimizer type and corresponding algorithms.Definition MinimizerOptions.cxx:43; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Updatevirtual void Update()Called by functions such as SetRange, SetNpx, SetParameters",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/minuit2FitBench_8C.html:6366,error,error,6366,doc/master/minuit2FitBench_8C.html,https://root.cern,https://root.cern/doc/master/minuit2FitBench_8C.html,1,['error'],['error']
Availability,"r-Cousins chi2); 1057 ROOT::Fit::PoissonLLFunction nll(data, wf1);; 1058 return 2.* nll( f1.GetParameters() ) ;; 1059 }; 1060 ROOT::Fit::Chi2Function chi2(data, wf1);; 1061 return chi2(f1.GetParameters() );; 1062 ; 1063}; BinData.h; Chi2FCN.h; FitConfig.h; Fitter.h; HFitInterface.h; MinimizerOptions.h; Minimizer.h; PoissonLikelihoodFCN.h; g#define g(i)Definition RSha256.hxx:105; s1#define s1(x)Definition RSha256.hxx:91; h#define h(i)Definition RSha256.hxx:106; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; TBackCompFitter.h; kIterBackwardconst Bool_t kIterBackwardDefinition TCollection.h:43; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; TF1.h; TF2.h; TF3.h; TFitResultPtr.h; TFitResult.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:41264,error,error,41264,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['error'],['error']
Availability,"r. ; Definition at line 8114 of file TProof.cxx. ◆ UnloadPackages(). Int_t TProof::UnloadPackages ; (; ). private . Unload all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 8147 of file TProof.cxx. ◆ UpdateDialog(). void TProof::UpdateDialog ; (; ). protected . Final update of the progress dialog. ; Definition at line 4353 of file TProof.cxx. ◆ UploadDataSet() [1/2]. Int_t TProof::UploadDataSet ; (; const char * ; , . const char * ; , . const char * ; = 0, . Int_t ; = 0, . TList * ; = 0 . ). *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ; *** Please use TProofMgr::UploadFiles.; Upload a set of files and save the list of files by name dataSetName. The mask 'opt' is a combination of EUploadOpt: kAppend (0x1) if set true files will be appended to the dataset existing by given name kOverwriteDataSet (0x2) if dataset with given name exited it would be overwritten kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists kOverwriteAllFiles (0x8) overwrite all files that may exist kOverwriteNoFiles (0x10) overwrite none kAskUser (0x0) ask user before overwriteng dataset/files The default value is kAskUser. The user will be asked to confirm overwriting dataset or files unless specified opt provides the answer! If kOverwriteNoFiles is set, then a pointer to TList must be passed as skippedFiles argument. The function will add to this list TFileInfo objects describing all files that existed on the cluster and were not uploaded. ; Definition at line 10666 of file TProof.cxx. ◆ UploadDataSet() [2/2]. Int_t TProof::UploadDataSet ; (; const char * ; , . TList * ; , . const char * ; = 0, . Int_t ; = 0, . TList * ; = 0 . ). *** This function is deprecated and will disappear in future versions *** *** It is just a wrapper around TFile::Cp. ; *** Please use TProofMgr::UploadFiles.; Upload a set of files and save the list of files by name dataSetName. The 'files' argume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:154918,mask,mask,154918,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['mask'],['mask']
Availability,"r. ; if exl,h or eyl,h are null, the corresponding arrays are preset to zero ; Definition at line 155 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [5/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorF & ; vx, . const TVectorF & ; vy, . const TVectorF & ; vexl, . const TVectorF & ; vexh, . const TVectorF & ; veyl, . const TVectorF & ; veyh . ). Constructor with six vectors of floats in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 187 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [6/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TVectorD & ; vx, . const TVectorD & ; vy, . const TVectorD & ; vexl, . const TVectorD & ; vexh, . const TVectorD & ; veyl, . const TVectorD & ; veyh . ). Constructor with six vectors of doubles in input A grapherrors is built with the X coordinates taken from vx and Y coord from vy and the errors from vectors vexl/h and veyl/h. ; The number of points in the graph is the minimum of number of points in vx and vy. ; Definition at line 216 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [7/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TGraphAsymmErrors & ; gr). TGraphAsymmErrors copy constructor. ; Definition at line 78 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [8/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; h). TGraphAsymmErrors constructor importing its parameters from the TH1 object passed as argument the low and high errors are set to the bin error of the histogram. ; Definition at line 242 of file TGraphAsymmErrors.cxx. ◆ TGraphAsymmErrors() [9/10]. TGraphAsymmErrors::TGraphAsymmErrors ; (; const TH1 * ; pass, . const TH1 * ; total, . Option_t * ; option = """" . ). Creates a TGraphAsymmErrors by dividing two input TH1 histograms: pass/total. ; (see TGraphAsymmErrors::Divide) ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors.html:37993,error,errors,37993,doc/master/classTGraphAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors.html,1,['error'],['errors']
Availability,"r. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  ;  Protected Attributes inherited from TAttMarker; Color_t fMarkerColor;  Marker color. ;  ; Size_t fMarkerSize;  Marker size. ;  ; Style_t fMarkerStyle;  Marker style. ;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TGraph; static void SwapValues (Double_t *arr, Int_t pos1, Int_t pos2);  Swap values. ;  . #include <TGraphMultiErrors.h>. Inheritance diagram for TGraphMultiErrors:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ESummationModes. enum TGraphMultiErrors::ESummationModes. EnumeratorkOnlyFirst Only take errors from first dimension. . kSquareSum Calculate the square sum of all errors. . kAbsSum Calculate the absolute sum of all errors. . Definition at line 57 of file TGraphMultiErrors.h. Constructor & Destructor Documentation. ◆ TGraphMultiErrors() [1/23]. TGraphMultiErrors::TGraphMultiErrors ; (; ). TGraphMultiErrors default constructor. ; Definition at line 66 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [2/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title . ). TGraphMultiErrors default constructor with name and title. ; Definition at line 74 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [3/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne = 1 . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; All values are initialized to 0. ; Definition at line 84 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [4/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne = 1 . ).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:44676,error,errors,44676,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"r. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(const char* dset = 0, Long64_t nevt = -1, const char* fnroot = ""event"", Bool_t regenerate = kFALSE); Create the largest dataset for the run.; Defaults for; dataset name, filename root; are; ""BenchDataSet"", ""event""; respectively.; These can be changed via dset and fnroot, respectively.; The string 'fnroot' defines the location of the files, interpreted as an URL.; Examples:; fnroot files; 'event' <datadir>/event_<ord>_<#>.root; '/mss/event' /mss/event_<ord>_<#>.root; 'root://srv//mss/event?remote=1'; root://srv//mss/event_<ord>_<#>?remote=1.root; Default selector is TSelEventGen. Use SetDataGenSel and SetDataGenPar to change it; and to pass the list of PARs defining the alternative selector.; The argument 'nevt' controls the number of events per file (-1 for the default,; which is 30000).; Return 0 on success, -1 on error. Int_t CopyDataSet(const char* dset, const char* dsetdst, const char* destdir); Copy the files of dataset 'dset' to 'destdir' and create a new dataset named 'dsetdst'; decribing them.; Return 0 on success, -1 on error. void SetProofDS(TProof* p); Set the PROOF instance to be used for dataset operations, like releasing; cache ...; Use SetProofDS(0) to reset and using the default PROOF. TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0). const char * GetOutFileName() const; { return fOutFileName; }. void SetNFilesWrk(Int_t nf = 0); { fNFilesWrk = (nf > 0) ? nf : 4; }. void SetNTries(Int_t nt); { if (nt > 0) fNtries = nt; }. void SetHistType(TPBHistType* histtype); { fHistType = histtype; }. void SetNHist(Int_t nh); { fNHist = nh; }. void SetReadType(TPBReadType* readtype); { fReadType = readtype; }. void SetReleaseCache(Bool_t on = kTRUE); { fReleaseCache = on; }. void SetCPUSel(const char* sel); { fCPUSel = sel; }. void SetCPUPar(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:13776,error,error,13776,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,3,['error'],['error']
Availability,"r. It will abort the program.; 239 ; 240/// @warning Fatal() *will* not abort the program if `gErrorIgnoreLevel > kFatal`; 241/// - but for all reasonable settings it *will* abort.; 242// So let's be reasonable wrt Coverity:; 243// coverity[+kill]; 244void Fatal(const char *location, const char *fmt, ...); 245{; 246 std::va_list ap;; 247 va_start(ap, fmt);; 248 ErrorHandler(kFatal, location, fmt, ap);; 249 va_end(ap);; 250}; h#define h(i)Definition RSha256.hxx:106; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; gErrorAbortLevelInt_t gErrorAbortLevelDefinition TError.cxx:32; kAssertMsgconst char * kAssertMsgDefinition TError.cxx:35; Errorvoid Error(const char *location, const char *fmt,...)Use this function in case an error occurred.Definition TError.cxx:185; Breakvoid Break(const char *location, const char *fmt,...)Use this function in case an error occurred.Definition TError.cxx:207; GetErrorHandlerErrorHandlerFunc_t GetErrorHandler()Returns the current error handler function.Definition TError.cxx:100; Infovoid Info(const char *location, const char *fmt,...)Use this function for informational messages.Definition TError.cxx:218; gErrorHandlerstatic ErrorHandlerFunc_t gErrorHandlerDefinition TError.cxx:38; SysErrorvoid SysError(const char *location, const char *fmt,...)Use this function in case a system (OS or GUI) related error occurred.Definition TError.cxx:196; GetErrorSystemMsgHandlerRefstatic ROOT::Internal::ErrorSystemMsgHandlerFunc_t & GetErrorSystemMsgHandlerRef()Definition TError.cxx:41; AbstractMethodvoid AbstractMethod(const char *method)This function can be used in abstract base classes in case one does not want to make the class a ""rea...Definition TError.cxx:159; ErrorHandlervoid ErrorHandler(Int_t level, const char *location, const char *fmt, std::va_list ap)General error handler function. It calls the u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:9013,error,error,9013,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,1,['error'],['error']
Availability,"r. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; ROOT::Experimental::RResult< T > Class Template ReferenceCore ROOT classes » Base ROOT classes. ; template<typename T>; class ROOT::Experimental::RResult< T >The class is used as a return type for operations that can fail; wraps a value of type T or an RError. ; The RResult<T> class and their related classes are used for call chains that can throw exceptions, such as I/O code paths. Throwing of the exception is deferred to allow for if (result) style error checking where it makes sense. If an RResult in error state leaves the scope unchecked, it will throw.; A function returning an RResult might look like this:; RResult<int> MyIOFunc(); {; int rv = syscall(...);; if (rv == -1); return R__FAIL(""user-facing error message"");; if (rv == kShortcut); return 42;; return R__FORWARD_RESULT(FuncThatReturnsRResultOfInt());; }; R__FORWARD_RESULT#define R__FORWARD_RESULT(res)Short-hand to return an RResult<T> value from a subroutine to the calling stack frame.Definition RError.hxx:292; R__FAIL#define R__FAIL(msg)Short-hand to return an RResult<T> in an error state; the RError is implicitly converted into RResult...Definition RError.hxx:290; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; Code using MyIOFunc might look like this:; auto result = MyIOOperation();; if (!result) {; // custom error handling or result.Throw(); }; switch (result.Inspect()) {; ...; }; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; Note that RResult<vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html:985,error,error,985,doc/master/classROOT_1_1Experimental_1_1RResult.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RResult.html,1,['error'],['error']
Availability,"r. Reference Guide ; .  . Loading...; Searching...; No Matches. Namespaces ; rf610_visualerror.py File ReferenceTutorials » RooFit Tutorials. Detailed Description; Likelihood and minimization: visualization of errors from a covariance matrix . ; import ROOT; ; ; # Setup example fit; # ---------------------------------------; ; # Create sum of two Gaussians pdf with factory; x = ROOT.RooRealVar(""x"", ""x"", -10, 10); ; m = ROOT.RooRealVar(""m"", ""m"", 0, -10, 10); s = ROOT.RooRealVar(""s"", ""s"", 2, 1, 50); sig = ROOT.RooGaussian(""sig"", ""sig"", x, m, s); ; m2 = ROOT.RooRealVar(""m2"", ""m2"", -1, -10, 10); s2 = ROOT.RooRealVar(""s2"", ""s2"", 6, 1, 50); bkg = ROOT.RooGaussian(""bkg"", ""bkg"", x, m2, s2); ; fsig = ROOT.RooRealVar(""fsig"", ""fsig"", 0.33, 0, 1); model = ROOT.RooAddPdf(""model"", ""model"", [sig, bkg], [fsig]); ; # Create binned dataset; x.setBins(25); d = model.generateBinned({x}, 1000); ; # Perform fit and save fit result; r = model.fitTo(d, Save=True, PrintLevel=-1); ; # Visualize fit error; # -------------------------------------; ; # Make plot frame; frame = x.frame(Bins=40, Title=""P.d.f with visualized 1-sigma error band""); d.plotOn(frame); ; # Visualize 1-sigma error encoded in fit result 'r' as orange band using linear error propagation; # ROOT.This results in an error band that is by construction symmetric; #; # The linear error is calculated as; # error(x) = Z* F_a(x) * Corr(a,a') F_a'(x); #; # where F_a(x) = [ f(x,a+da) - f(x,a-da) ] / 2,; #; # with f(x) = the plotted curve; # 'da' = error taken from the fit result; # Corr(a,a') = the correlation matrix from the fit result; # Z = requested significance 'Z sigma band'; #; # The linear method is fast (required 2*N evaluations of the curve, N is the number of parameters),; # but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and; # Gaussian approximations made; #; model.plotOn(frame, VisualizeError=(r, 1), FillColor=""kOrange""); ; # Calculate error using sampling method and visual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf610__visualerror_8py.html:1067,error,error,1067,doc/master/rf610__visualerror_8py.html,https://root.cern,https://root.cern/doc/master/rf610__visualerror_8py.html,1,['error'],['error']
Availability,"r. RooRealVar(const char* name, const char* title, Double_t value, const char* unit = """"); Constructor with value and unit. RooRealVar(const char* name, const char* title, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with range and unit. Initial value is center of range. RooRealVar(const char* name, const char* title, Double_t value, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with value, range and unit. RooRealVar(const RooRealVar& other, const char* name = 0); Copy Constructor. ~RooRealVar(); Destructor. Double_t getVal(const RooArgSet* nset = 0) const; Return value of variable. void setVal(Double_t value); Set value of variable to 'value'. If 'value' is outside; range of object, clip value into range. void setVal(Double_t value, const char* rangeName); Set value of variable to 'value'. If 'value' is outside; range named 'rangeName' of object, clip value into that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE) const; Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name = 0, Bool_t verbose = kTRUE, Bool_t createOnTheFly = kFALSE); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is cre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealVar.html:40069,error,errorVar,40069,root/html528/RooRealVar.html,https://root.cern,https://root.cern/root/html528/RooRealVar.html,4,['error'],"['error', 'errorVar']"
Availability,"r. RooRealVar(const char* name, const char* title, Double_t value, const char* unit = """"); Constructor with value and unit. RooRealVar(const char* name, const char* title, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with range and unit. Initial value is center of range. RooRealVar(const char* name, const char* title, Double_t value, Double_t minValue, Double_t maxValue, const char* unit = """"); Constructor with value, range and unit. RooRealVar(const RooRealVar& other, const char* name = 0); Copy Constructor. ~RooRealVar(); Destructor. Double_t getVal(const RooArgSet* nset = 0) const; Return value of variable. void setVal(Double_t value); Set value of variable to 'value'. If 'value' is outside; range of object, clip value into range. void setVal(Double_t value, const char* rangeName); Set value of variable to 'value'. If 'value' is outside; range named 'rangeName' of object, clip value into that range. RooErrorVar* errorVar() const; Return a RooAbsRealLValue representing the error associated; with this variable. The callers takes ownership of the; return object. Bool_t hasBinning(const char* name) const; Returns true if variable has a binning with 'name'. const RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. RooAbsBinning& getBinning(const char* name, Bool_t verbose, Bool_t createOnTheFly); Return binning definition with name. If binning with 'name' is not found it is created; on the fly as a clone of the default binning if createOnTheFly is true, otherwise; a reference to the default binning is returned. If verbose is true a message; is printed if a binning is created on the gly. void setBinning(const RooAbsBin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealVar.html:39588,error,errorVar,39588,root/html526/RooRealVar.html,https://root.cern,https://root.cern/root/html526/RooRealVar.html,2,['error'],"['error', 'errorVar']"
Availability,"r. This area can be used for highlightning of the active viewer. ; Definition at line 48 of file TGLEmbeddedViewer.cxx. ◆ ~TGLEmbeddedViewer(). TGLEmbeddedViewer::~TGLEmbeddedViewer ; (; ). override . Destroy standalone viewer object. ; Definition at line 61 of file TGLEmbeddedViewer.cxx. Member Function Documentation. ◆ Class(). static TClass * TGLEmbeddedViewer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLEmbeddedViewer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLEmbeddedViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TGLEmbeddedViewer.h. ◆ CreateFrames(). void TGLEmbeddedViewer::CreateFrames ; (; ). private . Internal frames creation. ; Definition at line 84 of file TGLEmbeddedViewer.cxx. ◆ CreateGLWidget(). void TGLEmbeddedViewer::CreateGLWidget ; (; ). overridevirtual . Create a GLwidget, it is an error if it is already created. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 100 of file TGLEmbeddedViewer.cxx. ◆ DeclFileName(). static const char * TGLEmbeddedViewer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TGLEmbeddedViewer.h. ◆ DestroyGLWidget(). void TGLEmbeddedViewer::DestroyGLWidget ; (; ). overridevirtual . Destroy the GLwidget, it is an error if it does not exist. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 121 of file TGLEmbeddedViewer.cxx. ◆ GetFrame(). TGCompositeFrame * TGLEmbeddedViewer::GetFrame ; (; ); const. inline . Definition at line 46 of file TGLEmbeddedViewer.h. ◆ GetName(). const char * TGLEmbeddedViewer::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:40317,error,error,40317,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2010-10-03 18:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph2DPainter.html:8106,error,error,8106,root/html528/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html528/TGraph2DPainter.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph2DPainter.html:8175,error,error,8175,root/html530/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html530/TGraph2DPainter.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2DPainter.html:8175,error,error,8175,root/html532/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html532/TGraph2DPainter.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2015-03-14 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph2DPainter.html:8194,error,error,8194,root/html534/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html534/TGraph2DPainter.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2015-06-02 16:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGraph2DPainter.html:8655,error,error,8655,root/html604/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html604/TGraph2DPainter.html,1,['error'],['error']
Availability,"r. This function; finds them and returns them in a graphs' list. void Paint(Option_t* option); Paint a TGraphDelaunay according to the value of ""option"":. ""TRI"" : The Delaunay triangles are drawn using filled area.; An hidden surface drawing technique is used. The surface is; painted with the current fill area color. The edges of each; triangles are painted with the current line color.; ""TRIW"" : The Delaunay triangles are drawn as wire frame; ""TRI1"" : The Delaunay triangles are painted with color levels. The edges; of each triangles are painted with the current line color.; ""TRI2"" : the Delaunay triangles are painted with color levels.; ""P"" : Draw a marker at each vertex; ""P0"" : Draw a circle at each vertex. Each circle background is white.; ""PCOL"" : Draw a marker at each vertex. The color of each marker is; defined according to its Z position.; ""CONT"" : Draw contours; ""LINE"" : Draw a 3D polyline. void PaintContour(Option_t* option); Paints the 2D graph as a contour plot. Delaunay triangles are used; to compute the contours. void PaintErrors(Option_t* option); Paints the 2D graph as error bars. void PaintLevels(Int_t* T, Double_t* x, Double_t* y, Int_t nblev = 0, Double_t* glev = 0); Paints one triangle.; nblev = 0 : paint the color levels; nblev != 0 : paint the grid. void PaintPolyMarker(Option_t* option); Paints the 2D graph as PaintPolyMarker. void PaintPolyLine(Option_t* option); Paints the 2D graph as PaintPolyLine. void PaintPolyMarker0(Int_t n, Double_t* x, Double_t* y); Paints a circle at each vertex. Each circle background is white. void PaintTriangles(Option_t* option); Paints the 2D graph as triangles. TGraph2DPainter(). » Author: Olivier Couet » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/histpainter:$Id: TGraph2DPainter.h,v 1.00 » Last generated: 2015-06-30 15:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraph2DPainter.html:8655,error,error,8655,root/html602/TGraph2DPainter.html,https://root.cern,https://root.cern/root/html602/TGraph2DPainter.html,1,['error'],['error']
Availability,r. private . ! Optimization cache ; Definition at line 586 of file RooVectorDataStore.h. ◆ _cacheOwner. RooAbsArg* RooVectorDataStore::_cacheOwner = nullptr. private . ! Cache owner ; Definition at line 587 of file RooVectorDataStore.h. ◆ _catStoreList. std::vector<CatVector*> RooVectorDataStore::_catStoreList. private . Definition at line 572 of file RooVectorDataStore.h. ◆ _currentWeightIndex. ULong64_t RooVectorDataStore::_currentWeightIndex {0}. mutableprivate . Definition at line 584 of file RooVectorDataStore.h. ◆ _extSumW2Array. const double* RooVectorDataStore::_extSumW2Array = nullptr. private . ! External sum of weights array ; Definition at line 582 of file RooVectorDataStore.h. ◆ _extWgtArray. const double* RooVectorDataStore::_extWgtArray = nullptr. private . ! External weight array ; Definition at line 579 of file RooVectorDataStore.h. ◆ _extWgtErrHiArray. const double* RooVectorDataStore::_extWgtErrHiArray = nullptr. private . ! External weight array - high error ; Definition at line 581 of file RooVectorDataStore.h. ◆ _extWgtErrLoArray. const double* RooVectorDataStore::_extWgtErrLoArray = nullptr. private . ! External weight array - low error ; Definition at line 580 of file RooVectorDataStore.h. ◆ _forcedUpdate. bool RooVectorDataStore::_forcedUpdate = false. private . ! Request for forced cache update ; Definition at line 589 of file RooVectorDataStore.h. ◆ _realfStoreList. std::vector<RealFullVector*> RooVectorDataStore::_realfStoreList. private . Definition at line 571 of file RooVectorDataStore.h. ◆ _realStoreList. std::vector<RealVector*> RooVectorDataStore::_realStoreList. private . Definition at line 570 of file RooVectorDataStore.h. ◆ _sumWeight. double RooVectorDataStore::_sumWeight = 0.0. private . Definition at line 576 of file RooVectorDataStore.h. ◆ _sumWeightCarry. double RooVectorDataStore::_sumWeightCarry = 0.0. private . Definition at line 577 of file RooVectorDataStore.h. ◆ _varsww. RooArgSet RooVectorDataStore::_varsww. private .,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooVectorDataStore.html:40773,error,error,40773,doc/master/classRooVectorDataStore.html,https://root.cern,https://root.cern/doc/master/classRooVectorDataStore.html,1,['error'],['error']
Availability,"r. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a wrapper around TFile::Cp.; *** Please use TProofMgr::UploadFiles. Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:87972,recover,recovered,87972,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['recover'],['recovered']
Availability,"r. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* dataset, TList* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Upload a set of files and save the list of files by name dataSetName.; The 'files' argument is a list of TFileInfo objects describing the files; as first url.; The mask 'opt' is a combination of EUploadOpt:; kAppend (0x1) if set true files will be appended to; the dataset existing by given name; kOverwriteDataSet (0x2) if dataset with given name exited it; would be overwritten; kNoOverwriteDataSet (0x4) do not overwirte if the dataset exists; kOverwriteAllFiles (0x8) overwrite all files that may exist; kOverwriteNoFiles (0x10) overwrite none; kAskUser (0x0) ask user before overwriteng dataset/files; The default value is kAskUser.; The user will be asked to confirm overwriting dataset or files unless; specified opt provides the answer!; If kOverwriteNoFiles is set, then a pointer to TList must be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:77187,recover,recovered,77187,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['recover'],['recovered']
Availability,"r.; Definition at line 7410 of file TCling.cxx. ◆ DisplayIncludePath(). int TCling::DisplayIncludePath ; (; FILE * ; fout); const. finalvirtual . Interface to cling function. ; Reimplemented from TInterpreter.; Definition at line 7419 of file TCling.cxx. ◆ EndOfLineAction(). void TCling::EndOfLineAction ; (; ). finalvirtual . It calls a ""fantom"" method to synchronize user keyboard input and ROOT prompt line. ; Implements TInterpreter.; Definition at line 3121 of file TCling.cxx. ◆ Evaluate(). int TCling::Evaluate ; (; const char * ; code, . TInterpreterValue & ; value . ). finalvirtual . Get the interpreter value corresponding to the statement. ; Reimplemented from TInterpreter.; Definition at line 7678 of file TCling.cxx. ◆ Execute() [1/5]. void TCling::Execute ; (; const char * ; function, . const char * ; params, . int * ; error = nullptr . ). finalvirtual . Execute a global function with arguments params. ; FIXME: The cint-based version of this code does not check if the SetFunc() call works, and does not do any real checking for errors from the Exec() call. It did fetch the most recent cint security error and return that in error, but this does not really translate well to cling/clang. We should enhance these interfaces so that we can report compilation and runtime errors properly. ; Implements TInterpreter.; Definition at line 5233 of file TCling.cxx. ◆ Execute() [2/5]. void TCling::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). inlinefinalprivatevirtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Implements TInterpreter.; Definition at line 628 of file TCling.h. ◆ Execute() [3/5]. void TCling::Execute ; (; TObject * ; obj, . TClass * ; cl, . const char * ; method, . const char * ; pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:84024,error,errors,84024,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['error'],['errors']
Availability,"r.; Sum$(formula ) : return the sum of the value of the elements of the formula given as a parameter. For example the mean for all the elements in one entry can be calculated with: Sum$(formula )/Length$(formula ); Min$(formula ) : return the minimum (within one TTree entry) of the value of the elements of the formula given as a parameter.; Max$(formula ) : return the maximum (within one TTree entry) of the value of the elements of the formula given as a parameter.; MinIf$(formula,condition); MaxIf$(formula,condition) : return the minimum (maximum) (within one TTree entry) of the value of the elements of the formula given as a parameter if they match the condition. If no element matches the condition, the result is zero. To avoid the resulting peak at zero, use the pattern: tree->Draw(""MinIf$(formula,condition)"",""condition"");; which will avoid calculation MinIf$ for the entries that have no match for the condition.; Alt$(primary,alternate) : return the value of ""primary"" if it is available for the current iteration otherwise return the value of ""alternate"". For example, with arr1[3] and arr2[2] tree->Draw(""arr1+Alt$(arr2,0)"");; will draw arr1[0]+arr2[0] ; arr1[1]+arr2[1] and arr1[2]+0 Or with a variable size array arr3 tree->Draw(""Alt$(arr3[0],0)+Alt$(arr3[1],0)+Alt$(arr3[2],0)"");; will draw the sum arr3 for the index 0 to min(2,actual_size_of_arr3-1) As a comparison tree->Draw(""arr3[0]+arr3[1]+arr3[2]"");; will draw the sum arr3 for the index 0 to 2 only if the actual_size_of_arr3 is greater or equal to 3. Note that the array in 'primary' is flattened/linearized thus using Alt$ with multi-dimensional arrays of different dimensions in unlikely to yield the expected results. To visualize a bit more what elements would be matched by TTree::Draw, TTree::Scan can be used: tree->Scan(""arr1:Alt$(arr2,0)"");; will print on one line the value of arr1 and (arr2,0) that will be matched by tree->Draw(""arr1-Alt$(arr2,0)"");; The ternary operator is not directly supported in TTree::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTree.html:125916,avail,available,125916,doc/v632/classTTree.html,https://root.cern,https://root.cern/doc/v632/classTTree.html,2,['avail'],['available']
Availability,"r.; the return pointer will be valid after fitting and as long a new fit will not be done.; For keeping a minimizer pointer the method ReCreateMinimizer() could eventually be used. bool Scan(unsigned int ipar, TGraph* gr, double xmin = 0, double xmax = 0); scan parameter ipar between value of xmin and xmax; a graph must be given which will be on return filled with the scan resul; If the graph size is zero, a default size n = 40 will be used; *. bool Contour(unsigned int ipar, unsigned int jpar, TGraph* gr, double confLevel = 0.683); create a 2D contour around the minimum for the parameter ipar and jpar; if a minimum does not exist or is invalid it will return false; on exit a TGraph is filled with the contour points; the number of contur points is determined by the size of the TGraph.; if the size is zero a default number of points = 20 is used; pass optionally the confidence level, default is 0.683; it is assumed that ErrorDef() defines the right error definition; (i.e 1 sigma error for one parameter). If not the confidence level are scaled to new level. TBackCompFitter(). void SetMethodCall(TMethodCall* m); for using interpreted function passed by the user. { fMethodCall = m; }. ROOT::Fit::FitConfig & GetFitConfig(); !!!! new method (of this interface); get reference to Fit configuration (NOTE: it will be invalid when class is deleted). { return fFitter->Config(); }. const ROOT::Fit::FitResult & GetFitResult() const; get reference to Fit Result object (NOTE: it will be invalid when class is deleted). { return fFitter->Result(); }. const ROOT::Fit::FitData & GetFitData() const; get reference to Fit Data object (NOTE: it will be invalid when class is deleted). { return *fFitData; }. » Author: L. Moneta 08/2008 » Copyright (c) 2008 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/minuit2:$Id: TBackCompFitter.h 31873 2009-12-14 10:05:39Z brun $ » Last generated: 2009-12-14 11:53; This page has been automatically generated. For comments or suggestions regarding the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBackCompFitter.html:18614,error,error,18614,root/html526/TBackCompFitter.html,https://root.cern,https://root.cern/root/html526/TBackCompFitter.html,1,['error'],['error']
Availability,"r.Next()) {; // Get the data from the current TTree entry by getting; // the value from the connected reader (eventSize):; totalSize += *eventSize;; }. Accessing the Analysis Result; At the end of the loop, print the sum of all event sizes. This sum shows you the real power of a TTree: even though you can analyze large amounts of data (our example tree with 22MB is tiny!) ROOT needs just a few MB of your RAM, no matter how many events you analyze. Imagine what it would be like if you had to load all data into memory, e.g. using a simple vector!; ... Int_t sizeInMB = totalSize/1024/1024;; printf(""Total size of all events: %d MB\n"", sizeInMB);; }. Running the Macro; To run this macro, simply type .x AnalyzeTree.C and ROOT will execute it. If it finds an error it might be wise to quit ROOT (.q) and try again!; If, for any reason, you don't manage to get it working, you can download a working macro file here: CountEvents.C; Here again, if you are using ROOT via ssh, you have to download the file with wget from your remote directory:; wget http://root-mirror.github.io/training/intro/CountEvents.C; . ‹ TTree and Its Data; up; Histogramming ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sour",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-macro-read-ttree.html:5577,down,download,5577,d/using-macro-read-ttree.html,https://root.cern,https://root.cern/d/using-macro-read-ttree.html,1,['down'],['download']
Availability,"r.h:157; TMVA::Reader::GetNamevirtual const char * GetName() constReturns name of object.Definition Reader.h:113; TMVA::Reader::EvaluateMVADouble_t EvaluateMVA(const std::vector< Float_t > &, const TString &methodTag, Double_t aux=0)Evaluate a std::vector<float> of input data for a given method The parameter aux is obligatory for th...Definition Reader.cxx:468; TMVA::Reader::GetRarityDouble_t GetRarity(const TString &methodTag, Double_t mvaVal=-9999999)evaluates the MVA's rarityDefinition Reader.cxx:737; TMVA::Reader::FindMVAIMethod * FindMVA(const TString &methodTag)return pointer to method with tag ""methodTag""Definition Reader.cxx:695; TMVA::Reader::Initvoid Init(void)default initialisation (no member variables)Definition Reader.cxx:292; TMVA::Reader::GetProbaDouble_t GetProba(const TString &methodTag, Double_t ap_sig=0.5, Double_t mvaVal=-9999999)evaluates probability of MVA for given set of input variablesDefinition Reader.cxx:706; TMVA::Reader::fMvaEventErrorUpperDouble_t fMvaEventErrorUpperper-event error returned by MVADefinition Reader.h:155; TMVA::Reader::SetVerbosevoid SetVerbose(Bool_t v)Definition Reader.h:115; TMVA::Reader::GetMethodTypeFromFileTString GetMethodTypeFromFile(const TString &filename)read the method type from the fileDefinition Reader.cxx:337; TMVA::Reader::fDataSetManagerDataSetManager * fDataSetManagerDefinition Reader.h:128; TMVA::Reader::fColorBool_t fColorcolor modeDefinition Reader.h:151; TMVA::Reader::fDataSetInfoDataSetInfo fDataSetInfoDefinition Reader.h:136; TMVA::Reader::fVerboseBool_t fVerboseverbosityDefinition Reader.h:149; TMVA::Reader::fCalculateErrorBool_t fCalculateErrorerror calculation modeDefinition Reader.h:152; TMVA::Reader::VerboseBool_t Verbose(void) constDefinition Reader.h:114; TMVA::Reader::fMvaEventErrorDouble_t fMvaEventErrorper-event error returned by MVADefinition Reader.h:154; TMVA::Reader::fTmpEvalVecstd::vector< Float_t > fTmpEvalVectemporary evaluation vector (if user input is v<double>)Definition Reader.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8h_source.html:9885,error,error,9885,doc/master/Reader_8h_source.html,https://root.cern,https://root.cern/doc/master/Reader_8h_source.html,1,['error'],['error']
Availability,"r.h>. Inheritance diagram for ROOT::Math::GeneticMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticMinimizer(). ROOT::Math::GeneticMinimizer::GeneticMinimizer ; (; int ; i = 0). Definition at line 99 of file GeneticMinimizer.cxx. ◆ ~GeneticMinimizer(). ROOT::Math::GeneticMinimizer::~GeneticMinimizer ; (; ). override . Definition at line 117 of file GeneticMinimizer.cxx. Member Function Documentation. ◆ Clear(). void ROOT::Math::GeneticMinimizer::Clear ; (; ). overridevirtual . reset for consecutive minimization - implement if needed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 126 of file GeneticMinimizer.cxx. ◆ CovMatrix(). double ROOT::Math::GeneticMinimizer::CovMatrix ; (; unsigned int ; ivar, . unsigned int ; jvar . ); const. overridevirtual . return covariance matrices element for variables ivar,jvar if the variable is fixed the return value is zero The ordering of the variables is the same as in the parameter and errors vectors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 368 of file GeneticMinimizer.cxx. ◆ Edm(). double ROOT::Math::GeneticMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum (re-implement if minimizer provides it ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 367 of file GeneticMinimizer.cxx. ◆ Errors(). const double * ROOT::Math::GeneticMinimizer::Errors ; (; ); const. overridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 366 of file GeneticMinimizer.cxx. ◆ GetGeneticOptions(). void ROOT::Math::GeneticMinimizer::GetGeneticOptions ; (; ROOT::Math::MinimizerOptions & ; opt); const. protected . Definition at line 191 of file GeneticMinimizer.cxx. ◆ MinGradient(). const double * ROOT::Math::GeneticMinimizer::MinGradient ; (; ); const. overridevirtual . return pointer to gradient values a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:11896,error,errors,11896,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['error'],['errors']
Availability,"r.hxx;  ; file  RNTupleProcessor.cxx;  ; file  RNTupleProcessor.hxx;  ; file  RNTupleReader.cxx;  ; file  RNTupleReader.hxx;  ; file  RNTupleReadOptions.hxx;  ; file  RNTupleSerialize.cxx;  ; file  RNTupleSerialize.hxx;  ; file  RNTupleUtil.cxx;  ; file  RNTupleUtil.hxx;  ; file  RNTupleView.cxx;  ; file  RNTupleView.hxx;  ; file  RNTupleWriteOptions.cxx;  ; file  RNTupleWriteOptions.hxx;  ; file  RNTupleWriteOptionsDaos.hxx;  ; file  RNTupleWriter.hxx;  ; file  RNTupleZip.hxx;  ; file  RPage.cxx;  ; file  RPage.hxx;  ; file  RPageAllocator.cxx;  ; file  RPageAllocator.hxx;  ; file  RPageNullSink.hxx;  ; file  RPagePool.cxx;  ; file  RPagePool.hxx;  ; file  RPageSinkBuf.cxx;  ; file  RPageSinkBuf.hxx;  ; file  RPageSourceFriends.cxx;  ; file  RPageSourceFriends.hxx;  ; file  RPageStorage.cxx;  ; file  RPageStorage.hxx;  ; file  RPageStorageDaos.cxx;  ; file  RPageStorageDaos.hxx;  ; file  RPageStorageFile.cxx;  ; file  RPageStorageFile.hxx;  . Classes; class  EColumnType;  The available trivial, native content types of a column. More...;  ; class  ROOT::Experimental::RArrayAsRVecField;  Additional classes related to sequence containers. More...;  ; class  ROOT::Experimental::Internal::RCluster;  An in-memory subset of the packed and compressed pages of a cluster. More...;  ; class  ROOT::Experimental::RClusterDescriptor;  Meta-data for a set of ntuple clusters. More...;  ; class  ROOT::Experimental::Internal::RClusterDescriptorBuilder;  A helper class for piece-wise construction of an RClusterDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescriptor::RClusterDescriptorIterable;  Used to loop over all the clusters of an ntuple (in unspecified order) More...;  ; class  ROOT::Experimental::RClusterGroupDescriptor;  Clusters are bundled in cluster groups. More...;  ; class  ROOT::Experimental::Internal::RClusterGroupDescriptorBuilder;  A helper class for piece-wise construction of an RClusterGroupDescriptor. More...;  ; class  ROOT::Experimental::RNTupleDescri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__NTuple.html:2422,avail,available,2422,doc/master/group__NTuple.html,https://root.cern,https://root.cern/doc/master/group__NTuple.html,1,['avail'],['available']
Availability,"r/overflow; Reallocate bin contents array. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the buffer size in units of 8 bytes (double). void SetErrorOption(Option_t* option = """"); -*Set option to compute profile errors; *-* =====================================. The computation of the bin errors is based on the parameter option:; option:; ' ' (Default) The bin errors are the standard error on the mean of the bin profiled values (Y),; i.e. the standard error of the bin contents.; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Y is 0 and the number of bin entries is > 0. 's' The bin errors are the standard deviations of the Y bin values; Note that if TProfile::Approximate() is called, an approximation is used when; the spread in Y is 0 and the number of bin entries is > 0. 'i' Errors are as in default case (standard errors of the bin contents); The only difference is for the case when the spread in Y is zero.; In this case for N > 0 the error is 1./SQRT(12.*N). 'g' Errors are 1./SQRT(W) for W not equal to 0 and 0 for W = 0.; W is the sum in the bin of the weights of the profile.; This option is for combining measurements y +/- dy,; and the profile is filled with values y and weights w = 1/dy**2. See TProfile::BuildOptions for a detailed explanation of all options. void Streamer(TBuffer& ); Stream an object of class TProfile. void Sumw2(Bool_t flag = kTRUE); Create/delete structure to store sum of squares of weights per bin *-*-*-*-*-*-*-*; This is needed to compute the correct statistical quantities; of a profile filled with weights. This function is automatically called when the histogram is created; if the static function TH1::SetDefaultSumw2 has been called before.; If flag is false the structure is deleted. Int_t BufferFill(Double_t , Double_t ); {return -2;}. void SetBins(const Int_t* nbins, const Double_t* range); helper methods for the Merge unification in TProfileHelper. { SetBins(nbins[0], range[0], ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile.html:45987,error,error,45987,root/html534/TProfile.html,https://root.cern,https://root.cern/root/html534/TProfile.html,3,['error'],['error']
Availability,"r1"");; gr1->SetTitle(""graph 1"");; gr1->SetMarkerStyle(21);; gr1->SetDrawOption(""AP"");; gr1->SetLineColor(2);; gr1->SetLineWidth(4);; gr1->SetFillStyle(0);; ; auto gr2 = new TGraph( size, px, py2 );; gr2->SetName(""gr2"");; gr2->SetTitle(""graph 2"");; gr2->SetMarkerStyle(22);; gr2->SetMarkerColor(2);; gr2->SetDrawOption(""P"");; gr2->SetLineColor(3);; gr2->SetLineWidth(4);; gr2->SetFillStyle(0);; ; auto gr3 = new TGraph( size, px, py3 );; gr3->SetName(""gr3"");; gr3->SetTitle(""graph 3"");; gr3->SetMarkerStyle(23);; gr3->SetLineColor(4);; gr3->SetLineWidth(4);; gr3->SetFillStyle(0);; ; mg->Add( gr1 );; mg->Add( gr2 );; ; gr3->Draw(""ALP"");; mg->Draw(""LP"");; c3->BuildLegend();; }; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; int; c3return c3Definition legend3.C:15. Automatic coloring; Automatic coloring according to the current palette is available as shown in the following example:; ; void multigraphpalettecolor(); {; auto mg = new TMultiGraph();; ; auto gr1 = new TGraph(); gr1->SetMarkerStyle(20);; auto gr2 = new TGraph(); gr2->SetMarkerStyle(21);; auto gr3 = new TGraph(); gr3->SetMarkerStyle(23);; auto gr4 = new TGraph(); gr4->SetMarkerStyle(24);; ; Double_t dx = 6.28/100;; Double_t x = -3.14;; ; for (int i=0; i<=100; i++) {; x = x+dx;; gr1->SetPoint(i,x,2.*TMath::Sin(x));; gr2->SetPoint(i,x,TMath::Cos(x));; gr3->SetPoint(i,x,TMath::Cos(x*x));; gr4->SetPoint(i,x,TMath::Cos(x*x*x));; }; ; mg->Add(gr4,""PL"");; mg->Add(gr3,""PL"");; mg->Add(gr2,""*L"");; mg->Add(gr1,""PL"");; ; mg->Draw(""A pmc plc"");; }; . Reverse axis; SinceROOT version 6.19/02; When a TMultiGraph is drawn, the X-axis is drawn with increasing values from left to right and the Y-axis from bottom to top. The two options RX and RY allow to change this order. The option RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; aut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiGraph.html:5426,avail,available,5426,doc/master/classTMultiGraph.html,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html,1,['avail'],['available']
Availability,"r1D &&)=delete;  ;  GSLMinimizer1D (Minim1D::Type type=Minim1D::kBRENT);  Construct the minimizer passing the minimizer type using the Minim1D::Algorithm enumeration. ;  ;  ~GSLMinimizer1D () override;  Destructor: free allocated resources. ;  ; double FValLower () const override;  Return function value at current lower bound of the minimization interval. ;  ; double FValMinimum () const override;  Return function value at current estimate of the minimum. ;  ; double FValUpper () const override;  Return function value at current upper bound of the minimization interval. ;  ; int Iterate ();  Perform a minimizer iteration and if an unexpected problem occurs then an error code will be returned. ;  ; int Iterations () const override;  Return number of iteration used to find minimum. ;  ; bool Minimize (int maxIter, double absTol, double relTol) override;  Find minimum position iterating until convergence specified by the absolute and relative tolerance or the maximum number of iteration is reached Return true is result is successful @param maxIter maximum number of iteration @param absTol desired absolute error in the minimum position @param absTol desired relative error in the minimum position. ;  ; const char * Name () const override;  Return name of minimization algorithm. ;  ; GSLMinimizer1D & operator= (const GSLMinimizer1D &)=delete;  ; GSLMinimizer1D & operator= (GSLMinimizer1D &&)=delete;  ; template<class UserFunc > ; void SetFunction (const UserFunc &f, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; void SetFunction (GSLFuncPointer f, void *params, double xmin, double xlow, double xup);  Set, or reset, minimizer to use the function f and the initial search interval [xlow, xup], with a guess for the location of the minimum xmin. ;  ; int Status () const override;  Return status of last minimization. ;  ; double XLower () c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html:1973,toler,tolerance,1973,doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMinimizer1D.html,3,"['error', 'toler']","['error', 'tolerance']"
Availability,"r::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLEmbeddedViewer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 53 of file TGLEmbeddedViewer.h. ◆ CreateFrames(). void TGLEmbeddedViewer::CreateFrames ; (; ). private . Internal frames creation. ; Definition at line 84 of file TGLEmbeddedViewer.cxx. ◆ CreateGLWidget(). void TGLEmbeddedViewer::CreateGLWidget ; (; ). overridevirtual . Create a GLwidget, it is an error if it is already created. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 100 of file TGLEmbeddedViewer.cxx. ◆ DeclFileName(). static const char * TGLEmbeddedViewer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file TGLEmbeddedViewer.h. ◆ DestroyGLWidget(). void TGLEmbeddedViewer::DestroyGLWidget ; (; ). overridevirtual . Destroy the GLwidget, it is an error if it does not exist. ; This is needed for frame-swapping on mac. ; Reimplemented from TGLViewer.; Definition at line 121 of file TGLEmbeddedViewer.cxx. ◆ GetFrame(). TGCompositeFrame * TGLEmbeddedViewer::GetFrame ; (; ); const. inline . Definition at line 46 of file TGLEmbeddedViewer.h. ◆ GetName(). const char * TGLEmbeddedViewer::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 44 of file TGLEmbeddedViewer.h. ◆ GetOrthoXOYCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoXOYCamera ; (; ). inline . Definition at line 48 of file TGLEmbeddedViewer.h. ◆ GetOrthoXOZCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoXOZCamera ; (; ). inline . Definition at line 49 of file TGLEmbeddedViewer.h. ◆ GetOrthoZOXCamera(). TGLOrthoCamera * TGLEmbeddedViewer::GetOrthoZOXCamera ; (; ). inline . Definition at",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:40801,error,error,40801,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,1,['error'],['error']
Availability,"r::EScanType::kTwoPasses;; 4852 ; 4853 RScanner scan(selectionRules,; 4854 scanType,; 4855 interp,; 4856 normCtxt,; 4857 scannerVerbLevel);; 4858 ; 4859 // If needed initialize the autoloading hook; 4860 if (!gOptLibListPrefix.empty()) {; 4861 LoadLibraryMap(gOptLibListPrefix + "".in"", gAutoloads);; 4862 scan.SetRecordDeclCallback(RecordDeclCallback);; 4863 }; 4864 ; 4865 scan.Scan(CI->getASTContext());; 4866 ; 4867 bool has_input_error = false;; 4868 ; 4869 if (genreflex::verbose); 4870 selectionRules.PrintSelectionRules();; 4871 ; 4872 if (ROOT::TMetaUtils::GetErrorIgnoreLevel() != ROOT::TMetaUtils::kFatal &&; 4873 !gOptGeneratePCH &&; 4874 !dictSelRulesPresent &&; 4875 !selectionRules.AreAllSelectionRulesUsed()) {; 4876 ROOT::TMetaUtils::Warning(nullptr, ""Not all selection rules are used!\n"");; 4877 }; 4878 ; 4879 if (!gOptGeneratePCH){; 4880 rootclingRetCode += CheckForUnsupportedClasses(scan.fSelectedClasses);; 4881 if (rootclingRetCode) return rootclingRetCode;; 4882 }; 4883 ; 4884 // SELECTION LOOP; 4885 // Check for error in the class layout before doing anything else.; 4886 for (auto const & annRcd : scan.fSelectedClasses) {; 4887 if (ROOT::TMetaUtils::ClassInfo__HasMethod(annRcd, ""Streamer"", interp)) {; 4888 if (annRcd.RequestNoInputOperator()) {; 4889 int version = ROOT::TMetaUtils::GetClassVersion(annRcd, interp);; 4890 if (version != 0) {; 4891 // Only Check for input operator is the object is I/O has; 4892 // been requested.; 4893 has_input_error |= CheckInputOperator(annRcd, interp);; 4894 }; 4895 }; 4896 }; 4897 has_input_error |= !CheckClassDef(*annRcd, interp);; 4898 }; 4899 ; 4900 if (has_input_error) {; 4901 // Be a little bit makefile friendly and remove the dictionary in case of error.; 4902 // We could add an option -k to keep the file even in case of error.; 4903 exit(1);; 4904 }; 4905 ; 4906 //---------------------------------------------------------------------------; 4907 // Write all the necessary #include; 4908 ////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootcling__impl_8cxx_source.html:199522,error,error,199522,doc/master/rootcling__impl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/rootcling__impl_8cxx_source.html,1,['error'],['error']
Availability,"r::FindMVA( const TString& methodTag ); 696{; 697 std::map<TString, IMethod*>::iterator it = fMethodMap.find( methodTag );; 698 if (it != fMethodMap.end()) return it->second;; 699 Log() << kERROR << ""Method "" << methodTag << "" not found!"" << Endl;; 700 return 0;; 701}; 702 ; 703////////////////////////////////////////////////////////////////////////////////; 704/// evaluates probability of MVA for given set of input variables; 705 ; 706Double_t TMVA::Reader::GetProba( const TString& methodTag, Double_t ap_sig, Double_t mvaVal ); 707{; 708 IMethod* method = 0;; 709 std::map<TString, IMethod*>::iterator it = fMethodMap.find( methodTag );; 710 if (it == fMethodMap.end()) {; 711 for (it = fMethodMap.begin(); it!=fMethodMap.end(); ++it) Log() << ""M"" << it->first << Endl;; 712 Log() << kFATAL << ""<EvaluateMVA> unknown classifier in map: "" << method << ""; ""; 713 << ""you looked for "" << methodTag<< "" while the available methods are : "" << Endl;; 714 }; 715 else method = it->second;; 716 ; 717 MethodBase* kl = dynamic_cast<MethodBase*>(method);; 718 if(kl==0) return -1;; 719 // check for NaN in event data: (note: in the factory, this check was done already at the creation of the datasets, hence; 720 // it is not again checked in each of these subsequent calls..; 721 const Event* ev = kl->GetEvent();; 722 for (UInt_t i=0; i<ev->GetNVariables(); i++){; 723 if (TMath::IsNaN(ev->GetValue(i))) {; 724 Log() << kERROR << i << ""-th variable of the event is NaN --> return MVA value -999, \n that's all I can do, please fix or remove this event."" << Endl;; 725 return -999;; 726 }; 727 }; 728 ; 729 if (mvaVal == -9999999) mvaVal = kl->GetMvaValue();; 730 ; 731 return kl->GetProba( mvaVal, ap_sig );; 732}; 733 ; 734////////////////////////////////////////////////////////////////////////////////; 735/// evaluates the MVA's rarity; 736 ; 737Double_t TMVA::Reader::GetRarity( const TString& methodTag, Double_t mvaVal ); 738{; 739 IMethod* method = 0;; 740 std::map<TString, IMethod*>::iterato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Reader_8cxx_source.html:28034,avail,available,28034,doc/master/Reader_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Reader_8cxx_source.html,1,['avail'],['available']
Availability,"r::fActBrowserActual (active) browser imp; TGCompositeFrame*TRootBrowser::fActMenuBarActual (active) menu bar; Pixel_tTGFrame::fBackgroundframe background color; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TBrowser*TBrowserImp::fBrowserTBrowser associated with this implementation; TListTRootBrowser::fBrowsersList of (sub)browsers; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; Int_tTRootBrowser::fCrTab[3]Actual (active) tab elements (for each Tab); Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCompositeFrame*TRootBrowser::fEditFrameFrame in ""Edit"" mode; Int_tTRootBrowser::fEditPosId of tab in ""Edit"" mode; Int_tTRootBrowser::fEditSubPosId of subtab in ""Edit"" mode; TGTab*TRootBrowser::fEditTabTab in ""Edit"" mode; TGPopupMenu*fEvePopup; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGFileBrowser*fFileBrowser; TGHorizontalFrame*TRootBrowser::fH1Horizontal frame; TGHorizontalFrame*TRootBrowser::fH2Horizontal frame; TGHSplitter*TRootBrowser::fHSplitterHorizontal splitter; UInt_tTGFrame::fHeightframe height; TGHorizontalFrame*TRootBrowser::fHfHorizontal frame; TGPopupMenu*fHilPopup; TStringTGMainFrame::fIconNameicon name; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLayoutHints*TRootBrowser::fLH0; TGLayoutHints*TRootBrowser::fLH1; TGLayoutHints*TRootBrowser::fLH2; TGLayoutHints*TRootBrowser::fLH3Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH4; TGLayoutHints*TRootBrowser::fLH5; TGLayoutHints*TRootBrowser::fLH6; TGLayoutHints*TRootBrowser::fLH7Layout hints, part 2; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveBrowser.html:21848,mask,mask,21848,root/html528/TEveBrowser.html,https://root.cern,https://root.cern/root/html528/TEveBrowser.html,3,['mask'],['mask']
Availability,"r::fActBrowserActual (active) browser imp; TGCompositeFrame*TRootBrowser::fActMenuBarActual (active) menu bar; Pixel_tTGFrame::fBackgroundframe background color; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TBrowser*TBrowserImp::fBrowserTBrowser associated with this implementation; TListTRootBrowser::fBrowsersList of (sub)browsers; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; Int_tTRootBrowser::fCrTab[3]Actual (active) tab elements (for each Tab); Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCompositeFrame*TRootBrowser::fEditFrameFrame in ""Edit"" mode; Int_tTRootBrowser::fEditPosId of tab in ""Edit"" mode; Int_tTRootBrowser::fEditSubPosId of subtab in ""Edit"" mode; TGTab*TRootBrowser::fEditTabTab in ""Edit"" mode; TGPopupMenu*fEvePopup; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGFileBrowser*fFileBrowser; TGHorizontalFrame*TRootBrowser::fH1Horizontal frame; TGHorizontalFrame*TRootBrowser::fH2Horizontal frame; TGHSplitter*TRootBrowser::fHSplitterHorizontal splitter; UInt_tTGFrame::fHeightframe height; TGHorizontalFrame*TRootBrowser::fHfHorizontal frame; TGPopupMenu*fHilPopup; TStringTGMainFrame::fIconNameicon name; const TGPicture*TRootBrowser::fIconPicicon picture; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLayoutHints*TRootBrowser::fLH0; TGLayoutHints*TRootBrowser::fLH1; TGLayoutHints*TRootBrowser::fLH2; TGLayoutHints*TRootBrowser::fLH3Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH4; TGLayoutHints*TRootBrowser::fLH5; TGLayoutHints*TRootBrowser::fLH6; TGLayoutHints*TRootBrowser::fLH7Layout hints, part 2; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBrowser.html:22506,mask,mask,22506,root/html534/TEveBrowser.html,https://root.cern,https://root.cern/root/html534/TEveBrowser.html,1,['mask'],['mask']
Availability,"r::fActBrowserActual (active) browser imp; TGCompositeFrame*TRootBrowser::fActMenuBarActual (active) menu bar; Pixel_tTGFrame::fBackgroundframe background color; TList*TGMainFrame::fBindListlist with key bindings; Int_tTGFrame::fBorderWidthframe border width; TBrowser*TBrowserImp::fBrowserTBrowser associated with this implementation; TListTRootBrowser::fBrowsersList of (sub)browsers; TStringTGMainFrame::fClassNameWM class name; TGClient*TGObject::fClientConnection to display server; Int_tTRootBrowser::fCrTab[3]Actual (active) tab elements (for each Tab); Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*TGMainFrame::fDNDTypeListhandles DND types; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGCompositeFrame*TRootBrowser::fEditFrameFrame in ""Edit"" mode; Int_tTRootBrowser::fEditPosId of tab in ""Edit"" mode; Int_tTRootBrowser::fEditSubPosId of subtab in ""Edit"" mode; TGTab*TRootBrowser::fEditTabTab in ""Edit"" mode; TGPopupMenu*fEvePopup; UInt_tTGFrame::fEventMaskcurrenty active event mask; TGFrameElement*TGFrame::fFEpointer to frame element; TGFileBrowser*fFileBrowser; TGHorizontalFrame*TRootBrowser::fH1Horizontal frame; TGHorizontalFrame*TRootBrowser::fH2Horizontal frame; TGHSplitter*TRootBrowser::fHSplitterHorizontal splitter; UInt_tTGFrame::fHeightframe height; TGHorizontalFrame*TRootBrowser::fHfHorizontal frame; TGPopupMenu*fHilPopup; TStringTGMainFrame::fIconNameicon name; const TGPicture*TRootBrowser::fIconPicicon picture; TStringTGMainFrame::fIconPixmapicon pixmap name; Handle_tTGObject::fIdX11/Win32 Window identifier; TGLayoutHints*TRootBrowser::fLH0Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH1Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH2Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH3Layout hints, part 1; TGLayoutHints*TRootBrowser::fLH4Layout hints, part 2; TGLayoutHints*TRootBrowser::fLH5Layout hints, part 2; TGLayoutHints*TRootBrowser::fLH6Layout hints, part 2; TGLayoutHints*TRootBrowser::fLH7Layout hints, part 2; Bool_tTGCompositeF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBrowser.html:24311,mask,mask,24311,root/html602/TEveBrowser.html,https://root.cern,https://root.cern/root/html602/TEveBrowser.html,2,['mask'],['mask']
Availability,"r::~MisClassificationError ; (; ). inlinevirtual . Definition at line 57 of file MisClassificationError.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MisClassificationError::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MisClassificationError::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MisClassificationError::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 63 of file MisClassificationError.h. ◆ DeclFileName(). static const char * TMVA::MisClassificationError::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 63 of file MisClassificationError.h. ◆ GetSeparationIndex(). Double_t TMVA::MisClassificationError::GetSeparationIndex ; (; const Double_t ; s, . const Double_t ; b . ). virtual . Misclassification error criterion: 1-max(p, 1-p) (p: purity= s/(s+b)) ; Implements TMVA::SeparationBase.; Definition at line 43 of file MisClassificationError.cxx. ◆ IsA(). virtual TClass * TMVA::MisClassificationError::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::SeparationBase.; Definition at line 63 of file MisClassificationError.h. ◆ Streamer(). virtual void TMVA::MisClassificationError::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::SeparationBase. ◆ StreamerNVirtual(). void TMVA::MisClassificationError::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file MisClassificationError.h. Libraries for TMVA::MisClassificationError:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/MisClassificationError.h; tmva/tmva/src/MisClassificationError.cxx. TMVAMisClassificationError. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:38 (GVA Time) using Doxyge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html:3569,error,error,3569,doc/master/classTMVA_1_1MisClassificationError.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MisClassificationError.html,1,['error'],['error']
Availability,"r; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-02 16:11; This page has been automat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THnSparseArrayChunk.html:6750,error,errors,6750,root/html604/THnSparseArrayChunk.html,https://root.cern,https://root.cern/root/html604/THnSparseArrayChunk.html,1,['error'],['errors']
Availability,"r; Int_tfCoordinatesSizesize of the bin coordinate buffer; Int_tfSingleCoordinateSizesize of a single bin coordinate; TArrayD*fSumw2bin errors; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; THnSparseArrayChunk(Int_t coordsize, bool errors, TArray* cont); (Default) initialize a chunk. Takes ownership of cont (~THnSparseArrayChunk deletes it),; and create an ArrayF for errors if ""errors"" is true. ~THnSparseArrayChunk(); Destructor. void AddBin(Int_t idx, const Char_t* idxbuf); Create a new bin in this chunk. void Sumw2(); Turn on support of errors. THnSparseArrayChunk(const THnSparseArrayChunk& ). THnSparseArrayChunk& operator=(const THnSparseArrayChunk& ). THnSparseArrayChunk(); {}. void AddBinContent(Int_t idx, Double_t v = 1.). Int_t GetEntries() const; { return fCoordinatesSize / fSingleCoordinateSize; }. Bool_t Matches(Int_t idx, const Char_t* idxbuf) const; Check whether bin at idx batches idxbuf.; If we don't store indexes we trust the caller that it does match,; see comment in THnSparseCompactBinCoord::GetHash(). » Author: Axel Naumann (2007-09-11) » Copyright (C) 1995-2012, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id$ » Last generated: 2015-06-30 15:11; This page has been automat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparseArrayChunk.html:6750,error,errors,6750,root/html602/THnSparseArrayChunk.html,https://root.cern,https://root.cern/root/html602/THnSparseArrayChunk.html,1,['error'],['errors']
Availability,"r; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraph2DErrors.html:13500,error,errors,13500,root/html530/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html530/TGraph2DErrors.html,1,['error'],['errors']
Availability,"r; the arrays are preset to zero. TGraph2DErrors(Int_t n, Double_t* x, Double_t* y, Double_t* z, Double_t* ex = 0, Double_t* ey = 0, Double_t* ez = 0, Option_t* option = """"); TGraph2DErrors constructor with doubles vectors as input. ~TGraph2DErrors(); TGraph2DErrors destructor. Double_t GetErrorX(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorY(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetErrorZ(Int_t bin) const; This function is called by Graph2DFitChisquare.; It returns the error along X at point i. Double_t GetXmaxE() const; Returns the X maximum with errors. Double_t GetXminE() const; Returns the X minimum with errors. Double_t GetYmaxE() const; Returns the Y maximum with errors. Double_t GetYminE() const; Returns the Y minimum with errors. Double_t GetZmaxE() const; Returns the Z maximum with errors. Double_t GetZminE() const; Returns the Z minimum with errors. void Set(Int_t n); Set number of points in the 2D graph.; Existing coordinates are preserved.; New coordinates above fNpoints are preset to 0. void SetPoint(Int_t i, Double_t x, Double_t y, Double_t z); Set x, y and z values for point number i. void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez); Set ex, ey and ez values for point number i. void Streamer(TBuffer& b); Stream an object of class TGraphErrors. TGraph2DErrors(const TGraph2DErrors& ). TGraph2DErrors& operator=(const TGraph2DErrors& ). Double_t * GetEX() const; {return fEX;}. Double_t * GetEY() const; {return fEY;}. Double_t * GetEZ() const; {return fEZ;}. » Author: Olivier Couet 26/11/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TGraph2DErrors.h,v 1.00 » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGraph2DErrors.html:13500,error,errors,13500,root/html532/TGraph2DErrors.html,https://root.cern,https://root.cern/root/html532/TGraph2DErrors.html,1,['error'],['errors']
Availability,"r;  CLikelihoodAux;  CLikelihoodAux< double >;  CBasicFCNBasicFCN class: base class for the objective functions used in the fits It has a reference to the data and th emodel function used in the fit ;  CBinDataClass describing the binned data sets : vectors of x coordinates, y values and optionally error on y values and error on coordinates The dimension of the coordinate is free There are 4 different options: ;  CChi2FCNChi2FCN class for binnned fits using the least square methods ;  CDataOptionsDataOptions : simple structure holding the options on how the data are filled ;  CDataRangeClass describing the range in the coordinates it supports multiple range in a coordinate ;  CDummyDeleter;  CFcnAdapter;  CFitConfigClass describing the configuration of the fit, options and parameter settings using the ROOT::Fit::ParameterSettings class ;  CFitDataBase class for all the fit data types: Stores the coordinates and the DataOptions ;  CFitResultClass containg the result of the fit and all the related information (fitted parameter values, error, covariance matrix and minimizer result information) Contains a pointer also to the fitted (model) function, modified with the fit parameter values ;  CFitterFitter class, entry point for performing all type of fits ;  CLogLikelihoodFCNLogLikelihoodFCN class for likelihood fits ;  CParameterSettingsClass, describing value, limits and step size of the parameters Provides functionality also to set/retrieve values, step sizes, limits and fix the parameters ;  CPoissonLikelihoodFCNClass evaluating the log likelihood for binned Poisson likelihood fits it is template to distinguish gradient and non-gradient case ;  CSparseData;  CUnBinDataClass describing the unbinned data sets (just x coordinates values) of any dimensions ;  ►NInternal;  ►NExecutorUtils;  CResultCaster;  CResultCaster< TObject *, F >;  ►NRDF;  ►NGraphDrawing;  CGraphCreatorHelper;  CGraphNode;  CDisplayHelper;  CPassAsVecHelper;  CPassAsVecHelper< std::index_sequence< N.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:26313,error,error,26313,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,1,['error'],['error']
Availability,"r;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with assymetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2D;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobStatus;  CTGridJobStatusList;  CTGridResult;  CTGroupButtonA specia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:131065,error,error,131065,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['error'],['error']
Availability,"r;  CTGMdiMainFrame;  CTGMdiMenuBar;  CTGMdiTitleBar;  CTGMdiTitleIcon;  CTGMdiVerticalWinResizer;  CTGMdiWinResizer;  CTGMenuBar;  CTGMenuEntry;  CTGMenuTitle;  CTGMime;  CTGMimeTypes;  CTGMsgBox;  CTGNumberEntry;  CTGNumberEntryField;  CTGNumberEntryLayout;  CTGNumberFormat;  CTGObject;  CTGondzioSolver;  CTGOSXGLManager;  CTGPack;  CTGPasswdDialog;  CTGPicture;  CTGPictureButton;  CTGPicturePool;  CTGPopupMenu;  CTGPosition;  CTGPrintDialog;  CTGProgressBar;  CTGQuartzThis is non-GUI part of TVirtualX interface, implemented for MacOS X, using CoreGraphics (Quartz) ;  CTGRadioButton;  CTGraphA Graph is a graphics object made of two arrays X and Y with npoints each ;  CTGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each ;  CTGraph2DErrorsGraph 2D class with errors ;  CTGraph2DPainterThe TGraphDelaunay painting class ;  CTGraphAsymmErrorsTGraph with asymmetric error bars ;  CTGraphBentErrorsA TGraphBentErrors is a TGraph with bent, assymetric error bars ;  CTGraphDelaunayTGraphDelaunay generates a Delaunay triangulation of a TGraph2D ;  CTGraphDelaunay2DTGraphDelaunay2D generates a Delaunay triangulation of a TGraph2D ;  CTGraphEdgeAn edge object connecting two nodes which can be added in a TGraphStruct ;  CTGraphEditor;  CTGraphErrorsA TGraphErrors is a TGraph with error bars ;  CTGraphNodeA graph node object which can be added in a TGraphStruct ;  CTGraphPainterThe graph painter class ;  CTGraphPolarTo draw a polar graph ;  CTGraphPolargramTo draw polar axis ;  CTGraphQQThis class allows to draw quantile-quantile plots ;  CTGraphSmoothA helper class to smooth TGraph ;  CTGraphStructThe Graph Structure is an interface to the graphviz package ;  CTGraphTimeTGraphTime is used to draw a set of objects evolving with nsteps in time between tmin and tmax ;  CTGRecorder;  CTGRectangle;  CTGRectMap;  CTGRedirectOutputGuard;  CTGRegion;  CTGRegionWithId;  CTGResourcePool;  CTGrid;  CTGridCollection;  CTGridJDL;  CTGridJob;  CTGridJobS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:157596,error,error,157596,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,5,['error'],['error']
Availability,"r;; 249}; 250 ; 251////////////////////////////////////////////////////////////////////////////////; 252/// Return system error string.; 253 ; 254const char *TSystem::GetError(); 255{; 256 if (GetErrno() == 0 && !GetLastErrorString().IsNull()); 257 return GetLastErrorString().Data();; 258 return Form(""errno: %d"", GetErrno());; 259}; 260 ; 261////////////////////////////////////////////////////////////////////////////////; 262/// Return cryptographic random number; 263/// Fill provided buffer with random values; 264/// Returns number of bytes written to buffer or -1 in case of error; 265 ; 266Int_t TSystem::GetCryptoRandom(void * /* buf */, Int_t /* len */); 267{; 268 Error(""GetCryptoRandom"", ""Not implemented"");; 269 return -1;; 270}; 271 ; 272 ; 273////////////////////////////////////////////////////////////////////////////////; 274/// Static function returning system error number.; 275 ; 276Int_t TSystem::GetErrno(); 277{; 278 return errno;; 279}; 280 ; 281////////////////////////////////////////////////////////////////////////////////; 282/// Static function resetting system error number.; 283 ; 284void TSystem::ResetErrno(); 285{; 286 errno = 0;; 287}; 288 ; 289////////////////////////////////////////////////////////////////////////////////; 290/// Objects that should be deleted on exit of the OS interface.; 291 ; 292void TSystem::RemoveOnExit(TObject *obj); 293{; 294 if (!fOnExitList); 295 fOnExitList = new TOrdCollection;; 296 if (!fOnExitList->FindObject(obj)); 297 fOnExitList->Add(obj);; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// Return the system's host name.; 302 ; 303const char *TSystem::HostName(); 304{; 305 return ""Local host"";; 306}; 307 ; 308////////////////////////////////////////////////////////////////////////////////; 309/// Hook to tell TSystem that the TApplication object has been created.; 310 ; 311void TSystem::NotifyApplicationCreated(); 312{; 313 // Currently needed only for WinNT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:8577,error,error,8577,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['error'],['error']
Availability,"r<TMVA::Event*>&); virtual voidTObject::Print(Option_t* option = """") const; virtual voidPrintTransformation(ostream&); virtual Int_tTObject::Read(const char* name); virtual voidReadFromXML(void* trfnode); virtual voidReadTransformationFromStream(istream& istr, const TString& classname = """"); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSelectInput(const TString& inputVariables, Bool_t putIntoVariables = kFALSE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnabled(Bool_t e); voidSetNormalise(Bool_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; voidSetOutputDataSetInfo(TMVA::DataSetInfo* outputDsi); voidSetTMVAVersion(TMVA::TMVAVersion_t v); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseSignalTransform(Bool_t e = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; const vector<TMVA::VariableInfo>&Spectators() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const vector<TMVA::VariableInfo>&Targets() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidToggleInputSortOrder(Bool_t sortOrder); virtual const TMVA::Event*Transform(const TMVA::Event*const, Int_t cls) const; virtual voidTObject::UseCurrentStyle(); Bool_tUseSignalTransform() const; const vector<TMVA::VariableInfo>&Variables() const; TMVA::VariableTransformBaseVariableTransformBase(const TMVA::VariableTransformBa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__VariableTransformBase.html:5361,mask,mask,5361,root/html602/TMVA__VariableTransformBase.html,https://root.cern,https://root.cern/root/html602/TMVA__VariableTransformBase.html,2,['mask'],['mask']
Availability,"r<double>(const char* name, const double& val, char mergemode); virtual~TParameter<double>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const double&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParameter_double_.html:1624,error,error,1624,root/html532/TParameter_double_.html,https://root.cern,https://root.cern/root/html532/TParameter_double_.html,2,['error'],['error']
Availability,"r<double>fTestStat_bvector of results for B-only toy-MC; doublefTestStat_dataresults (test statistics) evaluated for data; vector<double>fTestStat_sbvector of results for S+B toy-MC. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridResult(const char* name = 0); HybridResult default constructor (with name ). HybridResult(const char* name, const vector<double>& testStat_sb_vals, const vector<double>& testStat_b_vals, bool sumLargerValues = true); HybridResult constructor (with name, title and vectors of S+B and B values). ~HybridResult(); HybridResult destructor. void SetDataTestStatistics(double testStat_data_val); set the value of the test statistics on data. double NullPValue() const; return 1-CL_b : the B p-value. double AlternatePValue() const; return CL_s+b : the S+B p-value. Double_t CLbError() const; Returns an estimate of the error on CLb assuming a binomial error on; CLb:. Double_t CLsplusbError() const; Returns an estimate of the error on CLsplusb assuming a binomial; error on CLsplusb:. Double_t CLsError() const; Returns an estimate of the error on CLs through combination of the; errors on CLb and CLsplusb:. void Add(RooStats::HybridResult* other); add additional toy-MC experiments to the current results; use the data test statistics of the added object if none is already present (otherwise, ignore the new one). HybridPlot* GetPlot(const char* name, const char* title, int n_bins); prepare a plot showing a result and return a pointer to a HybridPlot object; the needed arguments are: an object name, a title and the number of bins in the plot. void PrintMore(const char* options); Print out some information about the results. explicit HybridResult(const char* name = 0); Default constructor. std::vector<double> GetTestStat_sb(); Get test statistics values for the sb model. {return fTestStat_sb;}. std::vector<double> GetTestStat_b(); Get test statistics values for the b model. {return fTestStat_b;}. double GetTestS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridResult.html:9833,error,error,9833,root/html528/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridResult.html,12,['error'],['error']
Availability,"r<int>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const int&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParameter_int_.html:1672,error,error,1672,root/html532/TParameter_int_.html,https://root.cern,https://root.cern/root/html532/TParameter_int_.html,4,['error'],['error']
Availability,"r<int>(const char* name, const int& val, char mergemode); virtual~TParameter<int>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const int&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParameter_int_.html:1597,error,error,1597,root/html530/TParameter_int_.html,https://root.cern,https://root.cern/root/html530/TParameter_int_.html,1,['error'],['error']
Availability,"rClassName() const; virtual voidTXMLParser::InitializeContext(); voidTObject::MakeZombie(); virtual voidTXMLParser::OnValidateError(const TString& message); virtual voidTXMLParser::OnValidateWarning(const TString& message); virtual voidTXMLParser::SetParseCode(Int_t code). private:. TDOMParser(const TDOMParser&); TDOMParser&operator=(const TDOMParser&); Int_tParseContext(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. _xmlParserCtxt*TXMLParser::fContextparse the xml file; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTXMLParser::fParseCodeto keep track of the errorcodes; Bool_tTXMLParser::fReplaceEntitiesreplace entities; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tTXMLParser::fStopErrorstop when parse error occurs; Bool_tTXMLParser::fValidateto validate the parse context; TStringTXMLParser::fValidateErrorparse error; TStringTXMLParser::fValidateWarningparse warning; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. private:. TXMLDocument*fTXMLDocxmlDoc. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TDOMParser(); TDOMParser constructor. ~TDOMParser(); TDOMParser destructor, it calls ReleaseUnderlying(). void ReleaseUnderlying(); Release any existing document. Int_t ParseFile(const char* filename); Parse the XML file where filename is the XML file name.; It will create a TXMLDocument if the file is parsed without; any error. It returns parse code error in case of parse error,; see TXMLParser. Int_t ParseBuffer(const char* buffer, Int_t len); It parses a buffer, much like ParseFile(). Int_t ParseContext(); Creates a XML docu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TDOMParser.html:9831,error,errorcodes,9831,root/html526/TDOMParser.html,https://root.cern,https://root.cern/root/html526/TDOMParser.html,15,['error'],"['error', 'errorcodes']"
Availability,"rD *tvEyL, const TVectorD *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of doubles in input and multiple y error dimensions A grapherrors is built with the X coordinates taken from tvX the Y coordinates from tvY and the errors from vectors tvExL, tvExH and tvEyL/H[yErrorDimension]. ;  ;  TGraphMultiErrors (Int_t ne, const TVectorF &tvX, const TVectorF &tvY, const TVectorF &tvExL, const TVectorF &tvExH, const TVectorF *tvEyL, const TVectorF *tvEyH, Int_t m=kOnlyFirst);  Constructor with multiple vectors of floats in input and multiple y error dimension. ;  ;  TGraphMultiErrors (Int_t np, const Double_t *x, const Double_t *y, const Double_t *exL=nullptr, const Double_t *exH=nullptr, const Double_t *eyL=nullptr, const Double_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, const Float_t *x, const Float_t *y, const Float_t *exL=nullptr, const Float_t *exH=nullptr, const Float_t *eyL=nullptr, const Float_t *eyH=nullptr, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and a single y-error. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< std::vector< Double_t > > eyL, std::vector< std::vector< Double_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Double_t *x, const Double_t *y, const Double_t *exL, const Double_t *exH, std::vector< TArrayD > eyL, std::vector< TArrayD > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and ne y-errors. ;  ;  TGraphMultiErrors (Int_t np, Int_t ne, const Float_t *x, const Float_t *y, const Float_t *exL, const Float_t *exH, std::vector< std::vector< Float_t > > eyL, std::vector< std::vector< Float_t > > eyH, Int_t m=kOnlyFirst);  TGraphMultiErrors normal constructor with np points and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:8153,error,error,8153,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"rDraw.cxx. ◆ IsA(). TClass * TSelectorDraw::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TSelector.; Definition at line 121 of file TSelectorDraw.h. ◆ Notify(). bool TSelectorDraw::Notify ; (; ). overridevirtual . This function is called at the first entry of a new tree in a chain. ; Reimplemented from TSelector.; Definition at line 1154 of file TSelectorDraw.cxx. ◆ operator=(). TSelectorDraw & TSelectorDraw::operator= ; (; const TSelectorDraw & ; ). private . ◆ Process(). bool TSelectorDraw::Process ; (; Long64_t ; ). inlineoverridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector.; Definition at line 111 of file TSelectorDraw.h. ◆ ProcessFill(). void TSelectorDraw::ProcessFill ; (; Long64_t ; entry). overridevirtual . Called in the entry loop for all entries accepted by Select. ; Reimplemented from TSelector.; Definition at line 1169 of file TSelectorDraw.cxx. ◆",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorDraw.html:24558,avail,available,24558,doc/master/classTSelectorDraw.html,https://root.cern,https://root.cern/doc/master/classTSelectorDraw.html,1,['avail'],['available']
Availability,"rErrorHandlerFunc_t SetErrorHandler(ErrorHandlerFunc_t newhandler)Set an errorhandler function. Returns the old handler.Definition TError.cxx:90; gPrintViaErrorHandlerBool_t gPrintViaErrorHandlerDefinition TError.cxx:33; TError.h; kErrorconstexpr Int_t kErrorDefinition TError.h:47; kFatalconstexpr Int_t kFatalDefinition TError.h:50; kWarningconstexpr Int_t kWarningDefinition TError.h:46; ErrorHandlerFunc_tvoid(* ErrorHandlerFunc_t)(int level, Bool_t abort, const char *location, const char *msg)Definition TError.h:71; kBreakconstexpr Int_t kBreakDefinition TError.h:48; kInfoconstexpr Int_t kInfoDefinition TError.h:45; gErrorIgnoreLevelInt_t gErrorIgnoreLevelError handling routines.Definition TError.cxx:31; kSysErrorconstexpr Int_t kSysErrorDefinition TError.h:49; kUnsetconstexpr Int_t kUnsetDefinition TError.h:43; va_copy#define va_copy(x, y)Definition civetweb.c:1000; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::ErrorSystemMsgHandlerFunc_tstd::function< const char *()> ErrorSystemMsgHandlerFunc_tRetrieves the error string associated with the last system error.Definition TError.h:60; ROOT::Internal::MinimalErrorHandlervoid MinimalErrorHandler(int level, Bool_t abort, const char *location, const char *msg)A very simple error handler that is usually replaced by the TROOT default error handler.Definition TError.cxx:67; ROOT::Internal::SetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t SetErrorSystemMsgHandler(ErrorSystemMsgHandlerFunc_t h)Returns the previous system error message handler.Definition TError.cxx:56; ROOT::Internal::GetErrorSystemMsgHandlerErrorSystemMsgHandlerFunc_t GetErrorSystemMsgHandler()Definition TError.cxx:51; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. corefoundationsrcTError.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TError_8cxx_source.html:11879,error,error,11879,doc/master/TError_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TError_8cxx_source.html,2,['error'],['error']
Availability,"rExtPrefetch(). Int_t TFileCacheRead::ReadBufferExtPrefetch ; (; char * ; buf, . Long64_t ; pos, . Int_t ; len, . Int_t & ; loc . ). virtual . prefetch the first block ; Definition at line 394 of file TFileCacheRead.cxx. ◆ SecondPrefetch(). void TFileCacheRead::SecondPrefetch ; (; Long64_t ; pos, . Int_t ; len . ). virtual . Definition at line 259 of file TFileCacheRead.cxx. ◆ SecondSort(). void TFileCacheRead::SecondSort ; (; ). virtual . Sort buffers to be prefetched in increasing order of positions. ; Merge consecutive blocks if necessary. ; Definition at line 630 of file TFileCacheRead.cxx. ◆ SetBufferSize(). Int_t TFileCacheRead::SetBufferSize ; (; Long64_t ; buffersize). virtual . Sets the buffer size. ; If the current prefetch list is too large to fit in the new buffer some or all of the prefetch blocks are dropped. The requested buffersize must be greater than zero. It will be automatically clamped to minimum 100000 (if <= 10000) and maximum INT_MAX Return values:; 0 if the prefetch block lists remain unchanged; 1 if some or all blocks have been removed from the prefetch list; -1 on error . Reimplemented in TTreeCache, and TTreeCacheUnzip.; Definition at line 711 of file TFileCacheRead.cxx. ◆ SetEnablePrefetching(). void TFileCacheRead::SetEnablePrefetching ; (; Bool_t ; setPrefetching = kFALSE). virtual . Set the prefetching mode of this file. ; If 'setPrefetching', enable the asynchronous prefetching (using TFilePrefetch) and if the gEnv and rootrc variable Cache.Directory is set, also enable the local caching of the prefetched blocks. if 'setPrefetching', the old prefetcher is enabled is the gEnv and rootrc variable is TFile.AsyncReading ; Definition at line 774 of file TFileCacheRead.cxx. ◆ SetEnablePrefetchingImpl(). void TFileCacheRead::SetEnablePrefetchingImpl ; (; Bool_t ; setPrefetching = kFALSE). protected . TFileCacheRead implementation of SetEnablePrefetching. ; This function is called from the constructor and should not be virtual. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFileCacheRead.html:23758,error,error,23758,doc/master/classTFileCacheRead.html,https://root.cern,https://root.cern/doc/master/classTFileCacheRead.html,1,['error'],['error']
Availability,"rFile::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDataSetManager.; Definition at line 100 of file TDataSetManagerFile.h. ◆ NotifyUpdate(). Int_t TDataSetManagerFile::NotifyUpdate ; (; const char * ; group, . const char * ; user, . const char * ; dsName, . Long_t ; mtime, . const char * ; checksum = 0 . ). overridevirtual . Save into the <datasetdir>/kDataSet_DataSetList file the name of the updated or created or modified dataset. ; For still existing datasets, fill the modification date in seconds anf the checksum. Returns 0 on success, -1 on error ; Reimplemented from TDataSetManager.; Definition at line 382 of file TDataSetManagerFile.cxx. ◆ ParseInitOpts(). void TDataSetManagerFile::ParseInitOpts ; (; const char * ; ins). overridevirtual . Parse the input string and set the init bits accordingly Format is dir:<datasetdir> [mss:<mss-url>] [opt:<base-options>] The <datasetdir> is mandatory. ; See TDataSetManager::ParseInitOpts for the available base options. The base options are already initialized by the base constructor ; Reimplemented from TDataSetManager.; Definition at line 317 of file TDataSetManagerFile.cxx. ◆ RegisterDataSet(). Int_t TDataSetManagerFile::RegisterDataSet ; (; const char * ; uri, . TFileCollection * ; newDataSet, . const char * ; opts . ). overridevirtual . Register a dataset, perfoming quota checkings and verification, if required. ; If a dataset with the same name already exists the action fails unless 'opts' contains 'O', in which case the old dataset is overwritten, or contains 'U', in which case 'newDataSet' is added to the existing dataset (duplications are ignored, if any). If 'opts' contains 'V' the dataset files are also verified (if the dataset manager is configured to allow so). By default the dataset is not verified. If 'opts' contains 'T' the in the dataset object (status bits, meta,...) is trusted, i.e. not reset (if the dataset manager is configured to allow so). Retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManagerFile.html:31067,avail,available,31067,doc/master/classTDataSetManagerFile.html,https://root.cern,https://root.cern/doc/master/classTDataSetManagerFile.html,1,['avail'],['available']
Availability,"rIf<; 3114 std::is_same<DefineType, RDFDetail::ExtraArgsForDefine::Slot>::value, ArgTypes_t>::type;; 3115 using ColTypes_t = typename RDFInternal::RemoveFirstTwoParametersIf<; 3116 std::is_same<DefineType, RDFDetail::ExtraArgsForDefine::SlotAndEntry>::value, ColTypesTmp_t>::type;; 3117 ; 3118 constexpr auto nColumns = ColTypes_t::list_size;; 3119 ; 3120 const auto validColumnNames = GetValidatedColumnNames(nColumns, columns);; 3121 CheckAndFillDSColumns(validColumnNames, ColTypes_t());; 3122 ; 3123 // Declare return type to the interpreter, for future use by jitted actions; 3124 auto retTypeName = RDFInternal::TypeID2TypeName(typeid(RetType));; 3125 if (retTypeName.empty()) {; 3126 // The type is not known to the interpreter.; 3127 // We must not error out here, but if/when this column is used in jitted code; 3128 const auto demangledType = RDFInternal::DemangleTypeIdName(typeid(RetType));; 3129 retTypeName = ""CLING_UNKNOWN_TYPE_"" + demangledType;; 3130 }; 3131 ; 3132 using NewCol_t = RDFDetail::RDefine<F, DefineType>;; 3133 auto newColumn = std::make_shared<NewCol_t>(name, retTypeName, std::forward<F>(expression), validColumnNames,; 3134 fColRegister, *fLoopManager);; 3135 ; 3136 RDFInternal::RColumnRegister newCols(fColRegister);; 3137 newCols.AddDefine(std::move(newColumn));; 3138 ; 3139 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 3140 ; 3141 return newInterface;; 3142 }; 3143 ; 3144 // This overload is chosen when the callable passed to Define or DefineSlot returns void.; 3145 // It simply fires a compile-time error. This is preferable to a static_assert in the main `Define` overload because; 3146 // this way compilation of `Define` has no way to continue after throwing the error.; 3147 template <typename F, typename DefineType, typename RetType = typename TTraits::CallableTraits<F>::ret_type,; 3148 bool IsFStringConv = std::is_convertible<F, std::string>::value,; 3149 bool IsRetTypeDefConstr = std::is_default_constructible<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:177933,error,error,177933,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['error'],['error']
Availability,"rIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char* appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char* dest, const char* localName, const char* appendage = 0, const char* fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char* defaultPath) const; [private]. TString ExtendPath(const char* originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(const char* className) const; [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a class.; user must delete.; returns 0 in case of error. TClass * TryMakeClassFromClassName(const char* className) const; Same as above but does not print the error message. TClass * MakeClassFromVarName(const char* varName, TTabCom::EContext_t& context, int iter = 0); [private]; (does some specific error handling that makes the function unsuitable for general use.); returns a new'd TClass given the name of a variable.; user must delete.; returns 0 in case of error.; if user has operator.() or operator->() backwards, will modify: context, *fpLoc and fBuf.; context sensitive behavior. void SetPattern(TTabCom::EContext_t handle, const char* regexp); [private]. int ParseReverse(const char* var_str, int start). Returns the place in the string where to put the \0, starting the search; from ""start"". TTabCom(). TTabCom& operator=(const TTabCom& ). EContext_t DetermineContext() const. » Author: Christian Lacunza 27/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/rint:$Id$ » Last generated: 2015-03-14 16:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTabCom.html:12232,error,error,12232,root/html534/TTabCom.html,https://root.cern,https://root.cern/root/html534/TTabCom.html,2,['error'],['error']
Availability,"rInfo ; (; TVirtualStreamerInfo * ; info). overridevirtual . Remember that the StreamerInfo is being used in writing. ; When support for schema evolution is enabled the list of TStreamerInfo used to stream this object is kept in fInfos. This information is used by TSocket::Send that sends this list through the socket. This list is in turn used by TSocket::Recv to store the TStreamerInfo objects in the relevant TClass in case the TClass does not know yet about a particular class version. This feature is implemented to support clients and servers with either different ROOT versions or different user classes versions. ; Reimplemented from TBufferIO.; Definition at line 168 of file TMessage.cxx. ◆ TestBitNumber(). Bool_t TMessage::TestBitNumber ; (; UInt_t ; bitnumber); const. inlineprivate . Definition at line 59 of file TMessage.h. ◆ Uncompress(). Int_t TMessage::Uncompress ; (; ). Uncompress the message. ; The message will only be uncompressed when kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. ; Definition at line 389 of file TMessage.cxx. ◆ UsesSchemaEvolution(). Bool_t TMessage::UsesSchemaEvolution ; (; ); const. inline . Definition at line 79 of file TMessage.h. ◆ UsesSchemaEvolutionForAll(). Bool_t TMessage::UsesSchemaEvolutionForAll ; (; ). static . Static function returning status of global schema evolution. ; Definition at line 124 of file TMessage.cxx. ◆ What(). UInt_t TMessage::What ; (; ); const. inline . Definition at line 75 of file TMessage.h. ◆ WriteProcessID(). UShort_t TMessage::WriteProcessID ; (; TProcessID * ; pid). overridevirtual . Check if the ProcessID pid is already in the message. ; If not, then:; mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; mark bit uid+1 where uid id the uid of the ProcessID . Reimplemented from TBufferIO.; Definition at line 438 of file TMessage.cxx. Friends And Related Symbol Documentation. ◆ TAuthenticate. friend class TAuthenticate. friend . Definition at line 35 of file TMessage.h.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMessage.html:47328,error,error,47328,doc/master/classTMessage.html,https://root.cern,https://root.cern/doc/master/classTMessage.html,1,['error'],['error']
Availability,"rInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual Int_tDeleteVariable(const char* name); virtual intDisplayClass(FILE* fout, char* name, int base, int start) const; virtual intDisplayIncludePath(FILE* fout) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static void*FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); virtual void*FindSym(const char* entry) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char* error) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:7968,error,error,7968,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['error'],['error']
Availability,"rInfo_ValidArrayIndex(DataMemberInfo_t* dminfo) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual intDisplayClass(FILE* fout, char* name, int base, int start) const; virtual intDisplayIncludePath(FILE* fout) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEnableWrappers(bool value = true); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static void*FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); virtual void*FindSym(const char* entry) const; virtual voidGenericError(const char* error) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGetgvp() const; virtual const char*TObject::GetIconName() const; virtual const char*GetIncludePath(); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCint.html:7948,error,error,7948,root/html526/TCint.html,https://root.cern,https://root.cern/root/html526/TCint.html,1,['error'],['error']
Availability,"rInfo_t*) const; virtual intDataMemberInfo_TypeSize(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_TypeTrueName(DataMemberInfo_t*) const; virtual const char*DataMemberInfo_ValidArrayIndex(DataMemberInfo_t*) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDeleteGlobal(void* obj); virtual intDisplayClass(FILE*, char*, int, int) const; virtual intDisplayIncludePath(FILE*) const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidEnableAutoLoading(); virtual voidEndOfLineAction(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidExecute(const char* function, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, const char* method, const char* params, int* error = 0); virtual voidExecute(TObject* obj, TClass* cl, TMethod* method, TObjArray* params, int* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Long_tExecuteMacro(const char* filename, TInterpreter::EErrorCode* error = 0); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual void*FindSym(const char*) const; virtual Int_tGenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0); virtual voidGenericError(const char*) const; virtual const char*GetClassSharedLibs(const char* cls); virtual const char*GetCurrentMacroName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Long_tGetExecByteCode() const; virtual Int_tGetExitCode() const; virtual Long_tGetgvp() const; virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInterpreter.html:7082,error,error,7082,root/html528/TInterpreter.html,https://root.cern,https://root.cern/root/html528/TInterpreter.html,3,['error'],['error']
Availability,"rLimit(unsigned int ivar, double lower); virtual boolROOT::Math::Minimizer::SetVariableStepSize(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableUpperLimit(unsigned int ivar, double upper); virtual boolROOT::Math::Minimizer::SetVariableValue(unsigned int ivar, double value); virtual boolROOT::Math::Minimizer::SetVariableValues(const double* x); intROOT::Math::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0). ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step); It does nothing! As there is no variable if it has no limits!. bool SetFixedVariable(unsigned int ivar, const string& name, double val); set a fixed variable. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). ROOT::Math::MinimizerOptions Options() const. void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const; get the genetic options of the class and return them in the M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html:5418,error,errors,5418,root/html602/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GeneticMinimizer.html,2,['error'],['errors']
Availability,rLo. double RooTreeDataStore::_curWgtErrLo = 0.0. mutableprivate . Weight of current event. ; Definition at line 175 of file RooTreeDataStore.h. ◆ _defCtor. bool RooTreeDataStore::_defCtor = false. mutableprivate . Object owning cache contents. ; Definition at line 163 of file RooTreeDataStore.h. ◆ _defTreeBufSize. Int_t RooTreeDataStore::_defTreeBufSize = 10*1024*1024. staticprivate . Definition at line 157 of file RooTreeDataStore.h. ◆ _extSumW2Array. const double* RooTreeDataStore::_extSumW2Array {nullptr}. private . ! External sum of weights array ; Definition at line 171 of file RooTreeDataStore.h. ◆ _extWgtArray. const double* RooTreeDataStore::_extWgtArray {nullptr}. private . ! External weight array ; Definition at line 168 of file RooTreeDataStore.h. ◆ _extWgtErrHiArray. const double* RooTreeDataStore::_extWgtErrHiArray {nullptr}. private . ! External weight array - high error ; Definition at line 170 of file RooTreeDataStore.h. ◆ _extWgtErrLoArray. const double* RooTreeDataStore::_extWgtErrLoArray {nullptr}. private . ! External weight array - low error ; Definition at line 169 of file RooTreeDataStore.h. ◆ _tree. TTree* RooTreeDataStore::_tree = nullptr. private . Definition at line 160 of file RooTreeDataStore.h. ◆ _varsww. RooArgSet RooTreeDataStore::_varsww. private . Was object constructed with default ctor? ; Definition at line 165 of file RooTreeDataStore.h. ◆ _weightBuffer. std::unique_ptr<std::vector<double> > RooTreeDataStore::_weightBuffer. mutableprivate . Definition at line 172 of file RooTreeDataStore.h. ◆ _wgtVar. RooRealVar* RooTreeDataStore::_wgtVar = nullptr. private . Definition at line 166 of file RooTreeDataStore.h. Libraries for RooTreeDataStore:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooTreeDataStore.h; roofit/roofitcore/src/RooTreeDataStore.cxx. RooTreeDataStore. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTreeDataStore.html:42042,error,error,42042,doc/master/classRooTreeDataStore.html,https://root.cern,https://root.cern/doc/master/classRooTreeDataStore.html,1,['error'],['error']
Availability,rModekSysErrModeRelative; static TUnfoldSys::ESysErrModekSysErrModeShift; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMatrixDSparse*TUnfold::fAInput: matrix; TMatrixD*fAoutsideInput: underflow/overflow bins; TMap*fBgrErrScaleInInput: background sources correlated error; TMap*fBgrErrUncorrInSqInput: uncorr error squared from bgr sources; TMap*fBgrInInput: size of background sources; Double_tTUnfold::fBiasScaleInput: scale factor for the bias; TUnfold::EConstraintTUnfold::fConstraintInput: type of constraint to use; TMatrixD*fDAinColRelSqInput: normalized column err.sq. (inp.matr.); TMatrixDSparse*fDAinRelSqInput: normalized errors from input matrix; TMap*fDeltaCorrAxResult: syst.shift from fSysIn on fAx; TMap*fDeltaCorrXResult: syst.shift from fSysIn on fX; TMatrixDSparse*fDeltaSysTauResult: systematic shift from tau; Double_tfDtauInput: error on tau; TMatrixDSparse*fEmatUncorrAxResult: syst.error from fDA2 on fAx; TMatrixDSparse*fEmatUncorrXResult: syst.error from fDA2 on fX; TArrayITUnfold::fHistToXInput: histogram bins -> matrix indices; TMatrixDSparse*TUnfold::fLInput: regularisation conditions; TUnfold::ERegModeTUnfold::fRegModeInput: type of regularisation; TArrayDTUnfold::fSumOverYInput: sum of all columns; TMap*fSysInInput: correlated errors; Double_tTUnfold::fTauSquaredInput: regularisation parameter; TMatrixDSparse*TUnfold::fVyyInput: covariance matrix for y; TMatrixDSparse*fVyyDataInput: error on fY prior to bgr subtraction; TMatrixD*TUnfold::fX0Input: x0; TArrayITUnfold::fXToHistInput: matrix indices -> histogram bins; TMatrixD*TUnfold::fYInput: y; TMatrixD*fYDataInput: fY prior to bgr subtraction. Class Charts. Inheritance Chart:. TObject. ←; TUnfold. ←; TUnfoldSys. ←. TUnfoldDensity. Function documentation; TUnfoldSys(const TUnfoldSys& ); set all pointers to zero. void DoBackgroundSubtraction(void); performs background subtraction; fY = fYData - fBgrIn; fVyy = fVyyData + fBgrErrUncorr^2 + f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TUnfoldSys.html:16778,error,error,16778,root/html602/TUnfoldSys.html,https://root.cern,https://root.cern/root/html602/TUnfoldSys.html,2,['error'],['error']
Availability,"rNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static const char * GetBestFormat (Double_t v, Double_t e, const char *f);  This function returns the best format to print the error value (e) knowing the parameter value (v) and the format (f) used to print it. ;  ; static void PaintSpecialObjects (const TObject *obj, Option_t *option);  Static function to paint special objects like vectors and matrices. ;  ; static Int_t ProjectAitoff2xy (Double_t l, Double_t b, Double_t &Al, Double_t &Ab);  Static function. ;  ; static Int_t ProjectMercator2xy (Double_t l, Double_t b, Double_t &Al, Double_t &Ab);  Static function. ;  ; static Int_t ProjectMollweide2xy (Double_t l, Double_t b, Double_t &Al, Double_t &Ab);  Static function. ;  ; static Int_t ProjectParabolic2xy (Double_t l, Double_t b, Double_t &Al, Double_t &Ab);  Static function code for parabolic projection from Ernst-Jan Buis. ;  ; static Int_t ProjectSinusoidal2xy (Double_t l, Double_t b, Double_t &Al, Double_t &Ab);  Static function code for sinusoidal projection from Ernst-Jan Buis Source ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:146719,error,error,146719,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['error'],['error']
Availability,"rNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. Double_tfDEDw! the derivative of the total error wrt the synapse weight; TNeuron*fpostthe neuron after the synapse; TNeuron*fprethe neuron before the synapse; Double_tfweightthe weight of the synapse. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSynapse(); Default constructor. TSynapse(TNeuron* , TNeuron* , Double_t w = 1); Constructor that connects two neurons. void SetPre(TNeuron* pre); Sets the pre-neuron. void SetPost(TNeuron* post); Sets the post-neuron. Double_t GetValue() const; Returns the value: weithted input. Double_t GetDeDw() const; Computes the derivative of the error wrt the synapse weight. void SetWeight(Double_t w); Sets the weight of the synapse.; This weight is the multiplying factor applied on the; output of a neuron in the linear combination given as input; of another neuron. void SetDEDw(Double_t in); Sets the derivative of the total error wrt the synapse weight. TSynapse(). virtual ~TSynapse(); {}. TNeuron* GetPre() const; { return fpre; }. TNeuron* GetPost() const; { return fpost; }. Double_t GetWeight() const; { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSynapse.html:5524,error,error,5524,root/html528/TSynapse.html,https://root.cern,https://root.cern/root/html528/TSynapse.html,3,['error'],['error']
Availability,"rOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const vector<Double_t>&GetSampleWeights() const; const vector<Double_t>&GetSamplingDistribution() const; Int_tGetSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const TStringGetVarName() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tIntegral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Double_tIntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Double_tInverseCDF(Double_t pvalue); Double_tInverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); Double_tInverseCDFInterpolate(Double_t pvalue); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__SamplingDistribution.html:3174,error,error,3174,root/html530/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html530/RooStats__SamplingDistribution.html,3,['error'],['error']
Availability,"rOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const vector<Double_t>&GetSampleWeights() const; const vector<Double_t>&GetSamplingDistribution() const; Int_tGetSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const TStringGetVarName() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; Double_tIntegral(Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Double_tIntegralAndError(Double_t& error, Double_t low, Double_t high, Bool_t normalize = kTRUE, Bool_t lowClosed = kTRUE, Bool_t highClosed = kFALSE) const; Double_tInverseCDF(Double_t pvalue); Double_tInverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); Double_tInverseCDFInterpolate(Double_t pvalue); voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__SamplingDistribution.html:3174,error,error,3174,root/html602/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html602/RooStats__SamplingDistribution.html,2,['error'],['error']
Availability,"rOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id$ » Last generated: 2015-09-08 16:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html:1872,toler,tolerance,1872,root/html534/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__BaseIntegratorOptions.html,1,['toler'],['tolerance']
Availability,"rOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2010-11-20 20:44; This page has been automatically generated. For comments or su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html:1870,toler,tolerance,1870,root/html528/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__BaseIntegratorOptions.html,1,['toler'],['tolerance']
Availability,"rOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html:1872,toler,tolerance,1872,root/html530/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__BaseIntegratorOptions.html,1,['toler'],['tolerance']
Availability,"rOptions&operator=(const ROOT::Math::BaseIntegratorOptions& opt); doubleRelTolerance() const; voidSetAbsTolerance(double tol); voidSetExtraOptions(const ROOT::Math::IOptions& opt); voidSetRelTolerance(double tol); voidSetWKSize(unsigned int size); unsigned intWKSize() const. protected:. voidClearExtra(). Data Members; protected:. doublefAbsToleranceabsolute tolerance ; ROOT::Math::IOptions*fExtraOptionsextra options ; intfIntegTypeIntegrator type (value converted from enum); unsigned intfNCalls(max) funxtion calls; doublefRelTolerancerelative tolerance ; unsigned intfWKSizeworkspace size. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseIntegratorOptions & operator=(const ROOT::Math::BaseIntegratorOptions& opt); assignment operators. virtual ~BaseIntegratorOptions(); protected constructor to avoid user creating this class. { ClearExtra(); }. std::string Integrator() const; name of 1D integrator. double AbsTolerance() const; non-static methods for retrivieng options ; absolute tolerance. { return fAbsTolerance; }. double RelTolerance() const; absolute tolerance. { return fRelTolerance; }. unsigned int WKSize() const; size of the workspace. { return fWKSize; }. IOptions * ExtraOptions() const; return extra options. { return fExtraOptions; }. void SetAbsTolerance(double tol); non-static methods for setting options ; set the abs tolerance. { fAbsTolerance = tol; }. void SetRelTolerance(double tol); set the relative tolerance. { fRelTolerance = tol; }. void SetWKSize(unsigned int size); set workspace size. { fWKSize = size; }. void SetExtraOptions(const ROOT::Math::IOptions& opt); set extra options (in this case pointer is cloned). void ClearExtra(). » Author: L. Moneta Fri Aug 15 2008 » Copyright (c) 2008 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: IntegratorOptions.h 36806 2010-11-20 11:09:14Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html:1872,toler,tolerance,1872,root/html532/ROOT__Math__BaseIntegratorOptions.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BaseIntegratorOptions.html,1,['toler'],['tolerance']
Availability,"rParameters upar;; upar.add(""mean"", mean, 0.1);; upar.add(""sigma"", rms, 0.1);; upar.add(""area"", area, 0.1);. // create Migrad minimizer; MnMigrad migrad(theFCN, upar);. // minimize; FunctionMinimum min = migrad();. // create MINOS error factory; MnMinos minos(theFCN, min);. {; // 1-sigma MINOS errors; std::pair<double,double> e0 = minos(0);; std::pair<double,double> e1 = minos(1);; std::pair<double,double> e2 = minos(2);. // output; std::cout<<""1-sigma minos errors: ""<<std::endl;; std::cout<<""par0: ""; <<min.userState().value(""mean"")<<"" ""; <<e0.first<<"" ""<<e0.second<<std::endl;; std::cout<<""par1: ""; <<min.userState().value(1)<<"" ""; <<e1.first<<"" ""<<e1.second<<std::endl;; std::cout<<""par2: ""<<min.userState().value(""area""); <<"" ""<<e2.first<<"" ""; <<e2.second<<std::endl;; }. {; // 2-sigma MINOS errors; theFCN.setErrorDef(4.);; std::pair<double,double> e0 = minos(0);; std::pair<double,double> e1 = minos(1);; std::pair<double,double> e2 = minos(2);. // output; std::cout<<""2-sigma minos errors: ""<<std::endl;; std::cout<<""par0: ""; <<min.userState().value(""mean""); <<"" ""<<e0.first<<"" ""<<e0.second<<std::endl;; std::cout<<""par1: ""; <<min.userState().value(1); <<"" ""<<e1.first<<"" ""<<e1.second<<std::endl;; std::cout<<""par2: ""; <<min.userState().value(""area""); <<"" ""<<e2.first<<"" ""<<e2.second<<std::endl;; }; }. {; // demonstrate how to use the CONTOURs. // create Minuit parameters with names; MnUserParameters upar;; upar.add(""mean"", mean, 0.1);; upar.add(""sigma"", rms, 0.1);; upar.add(""area"", area, 0.1);. // create Migrad minimizer; MnMigrad migrad(theFCN, upar);. // minimize; FunctionMinimum min = migrad();. // create contours factory with FCN and minimum; MnContours contours(theFCN, min);. // 70% confidence level for 2 parameters contour; // around the minimum; theFCN.setErrorDef(2.41);; std::vector<std::pair<double,double> > cont =; contours(0, 1, 20);. // 95% confidence level for 2 parameters contour; theFCN.setErrorDef(5.99);; std::vector<std::pair<double,double> > cont4 =; conto",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:87113,error,errors,87113,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['errors']
Availability,"rProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; RooRealProxy mean;  ; RooRealProxy sigmaL;  ; RooRealProxy sigmaR;  ; RooRealProxy x;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:67370,error,errors,67370,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['error'],['errors']
Availability,"rROOT::Minuit2::FunctionMinimizer::FunctionMinimizer(const ROOT::Minuit2::FunctionMinimizer&); virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.10000000000000001) const; virtual ROOT::Min",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html:2106,toler,toler,2106,root/html602/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__CombinedMinimizer.html,8,['toler'],['toler']
Availability,"rSqUnchecked(bin);; 2269 Double_t e2sq = h2->GetBinErrorSqUnchecked(bin);; 2270 ; 2271 if (e1sq > 0) cnt1 = TMath::Floor(cnt1 * cnt1 / e1sq + 0.5); // avoid rounding errors; 2272 else cnt1 = 0;; 2273 ; 2274 if (e2sq > 0) cnt2 = TMath::Floor(cnt2 * cnt2 / e2sq + 0.5); // avoid rounding errors; 2275 else cnt2 = 0;; 2276 }; 2277 ; 2278 if (Int_t(cnt1) == 0 && Int_t(cnt2) == 0) --ndf; // no data means one degree of freedom less; 2279 else {; 2280 ; 2281 Double_t cntsum = cnt1 + cnt2;; 2282 Double_t nexp1 = cntsum * sum1 / sum;; 2283 //Double_t nexp2 = binsum*sum2/sum;; 2284 ; 2285 if (res) res[i - i_start] = (cnt1 - nexp1) / TMath::Sqrt(nexp1);; 2286 ; 2287 if (cnt1 < 1) ++m;; 2288 if (cnt2 < 1) ++n;; 2289 ; 2290 //Habermann correction for residuals; 2291 Double_t correc = (1. - sum1 / sum) * (1. - cntsum / sum);; 2292 if (res) res[i - i_start] /= TMath::Sqrt(correc);; 2293 ; 2294 Double_t delta = sum2 * cnt1 - sum1 * cnt2;; 2295 chi2 += delta * delta / cntsum;; 2296 }; 2297 }; 2298 }; 2299 }; 2300 chi2 /= sum1 * sum2;; 2301 ; 2302 // flag error only when of the two histogram is zero; 2303 if (m) {; 2304 igood += 1;; 2305 Info(""Chi2TestX"",""There is a bin in h1 with less than 1 event.\n"");; 2306 }; 2307 if (n) {; 2308 igood += 2;; 2309 Info(""Chi2TestX"",""There is a bin in h2 with less than 1 event.\n"");; 2310 }; 2311 ; 2312 Double_t prob = TMath::Prob(chi2,ndf);; 2313 return prob;; 2314 ; 2315 }; 2316 ; 2317 // unweighted - weighted comparison; 2318 // case of error = 0 and content not zero is treated without problems by excluding second chi2 sum; 2319 // and can be considered as a data-theory comparison; 2320 if ( comparisonUW ) {; 2321 for (Int_t i = i_start; i <= i_end; ++i) {; 2322 for (Int_t j = j_start; j <= j_end; ++j) {; 2323 for (Int_t k = k_start; k <= k_end; ++k) {; 2324 ; 2325 Int_t bin = GetBin(i, j, k);; 2326 ; 2327 Double_t cnt1 = RetrieveBinContent(bin);; 2328 Double_t cnt2 = h2->RetrieveBinContent(bin);; 2329 Double_t e2sq = h2->GetBinErrorSqUnchecked(bin)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:92443,error,error,92443,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['error'],['error']
Availability,"rType etype = Poisson) const; Return the error on current weight. Double_t interpolateDim(RooRealVar& dim, const RooAbsBinning* binning, Double_t xval, Int_t intOrder, Bool_t correctForBinSize, Bool_t cdfBoundaries); Perform boundary safe 'intOrder'-th interpolation of weights in dimension 'dim'; at current value 'xval'. void add(const RooArgSet& row, Double_t wgt, Double_t sumw2); Increment the weight of the bin enclosing the coordinates given; by 'row' by the specified amount. Add the sum of weights squared; for the bin by 'sumw2' rather than wgt^2. void set(const RooArgSet& row, Double_t weight, Double_t wgtErrLo, Double_t wgtErrHi); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void set(const RooArgSet& row, Double_t weight, Double_t wgtErr = -1); Increment the weight of the bin enclosing the coordinates; given by 'row' by the specified amount. Associate errors; [wgtErrLo,wgtErrHi] with the event weight on this bin. void add(const RooAbsData& dset, const char* cut, Double_t wgt); Add all data points contained in 'dset' to this data set with given weight.; Optional cut string expression selects the data points to be added and can; reference any variable contained in this data set. void add(const RooAbsData& dset, const RooFormulaVar* cutVar, Double_t wgt); Add all data points contained in 'dset' to this data set with given weight.; Optional RooFormulaVar pointer selects the data points to be added. Double_t sum(Bool_t correctForBinSize) const; Return the sum of the weights of all hist bins. If correctForBinSize is specified, the sum of weights; is multiplied by the N-dimensional bin volume,; making the return value the inte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataHist.html:28014,error,errors,28014,root/html526/RooDataHist.html,https://root.cern,https://root.cern/root/html526/RooDataHist.html,1,['error'],['errors']
Availability,"rXlow(). Double_t TGraphMultiErrors::GetErrorXlow ; (; Int_t ; i); const. overridevirtual . Get low error on x coordinate for point i. ; Reimplemented from TGraph.; Definition at line 1481 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [1/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i); const. overridevirtual . Get error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. In case of asymmetric errors the mean of the square sum is returned ; Reimplemented from TGraph.; Definition at line 1454 of file TGraphMultiErrors.cxx. ◆ GetErrorY() [2/2]. Double_t TGraphMultiErrors::GetErrorY ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get error e on y coordinate for point i. ; In case of asymmetric errors the mean of the square sum is returned ; Definition at line 1468 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [1/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i); const. overridevirtual . Get high error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1530 of file TGraphMultiErrors.cxx. ◆ GetErrorYhigh() [2/2]. Double_t TGraphMultiErrors::GetErrorYhigh ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get high error e on y coordinate for point i. ; Definition at line 1566 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [1/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i); const. overridevirtual . Get low error on y coordinate for point i. ; The multiple errors of the dimensions are summed according to fSumErrorsMode. ; Reimplemented from TGraph.; Definition at line 1504 of file TGraphMultiErrors.cxx. ◆ GetErrorYlow() [2/2]. Double_t TGraphMultiErrors::GetErrorYlow ; (; Int_t ; i, . Int_t ; e . ); const. virtual . Get low error e on y coordinate for point i. ; Definition at line 1555 of file TGraphMultiErrors.cxx. ◆ GetEXhigh(). Double_t * TGraphMultiErrors::GetEXhigh ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:63325,error,error,63325,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['error']
Availability,"r[0]) / par[0];; sum += fland * TMath::Gaus(x[0],xx,par[3]);; }; ; return (par[2] * step * sum * invsq2pi / par[3]);; }; ; ; ; TF1 *langaufit(TH1F *his, double *fitrange, double *startvalues, double *parlimitslo, double *parlimitshi, double *fitparams, double *fiterrors, double *ChiSqr, int *NDF); {; // Once again, here are the Landau * Gaussian parameters:; // par[0]=Width (scale) parameter of Landau density; // par[1]=Most Probable (MP, location) parameter of Landau density; // par[2]=Total area (integral -inf to inf, normalization constant); // par[3]=Width (sigma) of convoluted Gaussian function; //; // Variables for langaufit call:; // his histogram to fit; // fitrange[2] lo and hi boundaries of fit range; // startvalues[4] reasonable start values for the fit; // parlimitslo[4] lower parameter limits; // parlimitshi[4] upper parameter limits; // fitparams[4] returns the final fit parameters; // fiterrors[4] returns the final fit errors; // ChiSqr returns the chi square; // NDF returns ndf; ; int i;; char FunName[100];; ; sprintf(FunName,""Fitfcn_%s"",his->GetName());; ; TF1 *ffitold = (TF1*)gROOT->GetListOfFunctions()->FindObject(FunName);; if (ffitold) delete ffitold;; ; TF1 *ffit = new TF1(FunName,langaufun,fitrange[0],fitrange[1],4);; ffit->SetParameters(startvalues);; ffit->SetParNames(""Width"",""MP"",""Area"",""GSigma"");; ; for (i=0; i<4; i++) {; ffit->SetParLimits(i, parlimitslo[i], parlimitshi[i]);; }; ; his->Fit(FunName,""RB0""); // fit within specified range, use ParLimits, do not plot; ; ffit->GetParameters(fitparams); // obtain fit parameters; for (i=0; i<4; i++) {; fiterrors[i] = ffit->GetParError(i); // obtain fit parameter errors; }; ChiSqr[0] = ffit->GetChisquare(); // obtain chi^2; NDF[0] = ffit->GetNDF(); // obtain ndf; ; return (ffit); // return fit function; ; }; ; ; int langaupro(double *params, double &maxx, double &FWHM) {; ; // Searches for the location (x value) at the maximum of the; // Landau-Gaussian convolute and its full width at half-maximum.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/langaus_8C.html:3993,error,errors,3993,doc/master/langaus_8C.html,https://root.cern,https://root.cern/doc/master/langaus_8C.html,1,['error'],['errors']
Availability,"r_a0_a1.Draw(""box""); c.cd(7); ROOT.gPad.SetLeftMargin(0.15); corrHist000.GetYaxis().SetTitleOffset(1.4); corrHist000.Draw(""colz""); c.cd(8); ROOT.gPad.SetLeftMargin(0.15); corrHist127.GetYaxis().SetTitleOffset(1.4); corrHist127.Draw(""colz""); c.cd(9); ROOT.gPad.SetLeftMargin(0.15); corrHist953.GetYaxis().SetTitleOffset(1.4); corrHist953.Draw(""colz""); ; c.SaveAs(""rf801_mcstudy.png""); ; # Make ROOT.RooMCStudy object available on command line after; # macro finishes; ROOT.gDirectory.Add(mcstudy); [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 990; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 980; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 970; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 960; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 950; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-797.721) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.716236 a1=-0.675686 mean=5.04367 nbkg=115.661 nsig=155.327 sig1frac=0.880121; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 940; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 930; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-867.289) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.907715 a1=-0.26012 mean=4.95881 nbkg=147.451 nsig=156.366 sig1frac=0.890535; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 920; [#0] PROGRESS:Generation -- RooMCStud",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8py.html:5467,error,error,5467,doc/master/rf801__mcstudy_8py.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8py.html,1,['error'],['error']
Availability,"r_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual voidDisconnect(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; TEveProjectable::ProjList_iTEveProjectable::EndProjecteds(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveElement::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveElement::FindItem(TGLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewerList.html:4902,error,error,4902,root/html528/TEveViewerList.html,https://root.cern,https://root.cern/root/html528/TEveViewerList.html,6,['error'],['error']
Availability,"r_t * ; title, . Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< std::vector< Double_t > > ; eyL, . std::vector< std::vector< Double_t > > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of std::vectors. ; Definition at line 300 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [13/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 315 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [14/23]. TGraphMultiErrors::TGraphMultiErrors ; (; const Char_t * ; name, . const Char_t * ; title, . Int_t ; np, . Int_t ; ne, . const Float_t * ; x, . const Float_t * ; y, . const Float_t * ; exL, . const Float_t * ; exH, . std::vector< TArrayF > ; eyL, . std::vector< TArrayF > ; eyH, . Int_t ; m = kOnlyFirst . ). TGraphMultiErrors normal constructor with name, title, np points and ne y-errors. ; If exL,exH are NULL, the corresponding values are preset to zero. The multiple y-errors are passed as std::vectors of TArrayF objects. ; Definition at line 353 of file TGraphMultiErrors.cxx. ◆ TGraphMultiErrors() [15/23]. TGraphMultiErrors::TGraphMultiErrors ; (; Int_t ; np, . Int_t ; ne, . const Double_t * ; x, . const Double_t * ; y, . const Double_t * ; exL, . const Double_t * ; exH, . std::vector< TArrayD > ; eyL, . std::vector< TArrayD > ; eyH, . Int_t ; m = kOnlyFirst . ). T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphMultiErrors.html:51095,error,errors,51095,doc/master/classTGraphMultiErrors.html,https://root.cern,https://root.cern/doc/master/classTGraphMultiErrors.html,1,['error'],['errors']
Availability,"r_tunsigned char UChar_tDefinition RtypesCore.h:38; Ssiz_tint Ssiz_tDefinition RtypesCore.h:67; kBitsPerByteconstexpr ULong_t kBitsPerByteDefinition RtypesCore.h:116; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; ULongptr_tunsigned long ULongptr_tDefinition RtypesCore.h:76; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; kNPOSconstexpr Ssiz_t kNPOSDefinition RtypesCore.h:117; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; kTRUEconstexpr Bool_t kTRUEDefinition RtypesCore.h:93; ClassImp#define ClassImp(name)Definition Rtypes.h:382; operator<<TBuffer & operator<<(TBuffer &buf, const Tmpl *obj)Definition TBuffer.h:397; TBuffer.h; TClass.h; TError.h; R__ASSERT#define R__ASSERT(e)Checks condition e and reports a fatal error if it's false.Definition TError.h:125; ErrorHandlervoid ErrorHandler(int level, const char *location, const char *fmt, std::va_list va)General error handler function. It calls the user set error handler.Definition TError.cxx:109; Errorvoid Error(const char *location, const char *msgfmt,...)Use this function in case an error occurred.Definition TError.cxx:185; kPrintconstexpr Int_t kPrintDefinition TError.h:44; Obsoletevoid Obsolete(const char *function, const char *asOfVers, const char *removedFromVers)Use this function to declare a function obsolete.Definition TError.cxx:177; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; Fatalvoid Fatal(const char *location, const char *msgfmt,...)Use this function in case of a fatal error. It will abort the program.Definition TError.cxx:244; gPrintViaErrorHandlerBool_t gPrintViaErrorHandlerDefinition TError.cxx:33; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; directwinID h directDefinition TGWin32VirtualGLProxy.cxx:43; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:87170,error,error,87170,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['error'],['error']
Availability,"rableTMVA::Configurable::Configurable(const TString& theOption = """"); virtual voidTObject::Copy(TObject& object) const; virtual const TMVA::Ranking*CreateRanking(); TMVA::DataSet*TMVA::MethodBase::Data() const; TMVA::DataSetInfo&TMVA::MethodBase::DataInfo() const; Bool_tDebug() const; virtual voidTMVA::MethodBase::DeclareCompatibilityOptions(); virtual voidDeclareOptions(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTMVA::MethodBase::DisableWriting(Bool_t setter); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); Bool_tTMVA::MethodBase::DoMulticlass() const; Bool_tTMVA::MethodBase::DoRegression() const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TMVA::Types::EAnalysisTypeTMVA::MethodBase::GetAnalysisType() const; const char*TMVA::Configurable::GetConfigDescription() const; const char*TMVA::Configurable::GetConfigName() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Double_tTMVA::MethodBase::GetEfficiency(const TString&, TMVA::Types::ETreeType, Double_t& err); const TMVA::Event*TMVA::MethodBase::GetEvent() const; const TMVA::Event*TMVA::MethodBase::GetEvent(const TMVA::Event* ev) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt) const; const TMVA::Event*TMVA::MethodBase::GetEvent(Long64_t ievt, TMVA::Types",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodANNBase.html:2333,error,error,2333,root/html528/TMVA__MethodANNBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodANNBase.html,4,['error'],['error']
Availability,"rack = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms of CPU time.; Without entering into technical details, TClonesArray allows you to ""reuse"" the same portion of memory for new/delete avoiding memory fragmentation and memory growth and improving the performance by orders of magnitude. Every time the memory of the TClonesArray has to be reused, the Clear() method is used. To provide its benefits, each TClonesArray must be allocated once per process and disposed of (deleted) only when not needed any more.; So a job should see only one deletion for each TClonesArray, which should be Clear()ed during the job several times. Deleting a TClonesArray is a double waste. Not only you do not avoid memory fragmentation, but you worsen it because the TClonesArray itself is a rather heavy structure, and there is quite some code in the destructor, so you have more memory fragmentatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:2824,error,errors,2824,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['error'],['errors']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); Int_tBroadcast(); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TMutex*GetMutex() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCondition.html:1592,error,error,1592,root/html526/TCondition.html,https://root.cern,https://root.cern/root/html526/TCondition.html,7,['error'],['error']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TFoamCell*, TFoamCell*, TFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TFoamCell*GetDau0() const; TFoamCell*GetDau1() const; virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); voidGetHcub(TFoamVect&, TFoamVect&) const; voidGetHSize(TFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TFoamCell*GetPare() const; Double_tGetPrim() const; Int_tGetSerial() const; Int_tGetStat() const; virtual const char*TObject::GetTitle() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFoamCell.html:1662,error,error,1662,root/html528/TFoamCell.html,https://root.cern,https://root.cern/root/html528/TFoamCell.html,6,['error'],['error']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); voidCalcVolume(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Int_t, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*, TMVA::PDEFoamCell*); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tGetBest() const; TMVA::PDEFoamCell*GetDau0() const; TMVA::PDEFoamCell*GetDau1() const; UInt_tGetDepth(); virtual Option_t*TObject::GetDrawOption() const; Double_tGetDriv() const; static Long_tTObject::GetDtorOnly(); TObject*GetElement() const; voidGetHcub(TMVA::PDEFoamVect&, TMVA::PDEFoamVect&) const; voidGetHSize(TMVA::PDEFoamVect&) const; virtual const char*TObject::GetIconName() const; Double_tGetIntg() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TMVA::PDEFoamCell*GetPare() const;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoamCell.html:1378,error,error,1378,root/html528/TMVA__PDEFoamCell.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoamCell.html,6,['error'],['error']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMethodBrowsable.html:3289,error,error,3289,root/html528/TMethodBrowsable.html,https://root.cern,https://root.cern/root/html528/TMethodBrowsable.html,6,['error'],['error']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TMethodBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCollectionMethodBrowsable.html:3342,error,error,3342,root/html526/TCollectionMethodBrowsable.html,https://root.cern,https://root.cern/root/html526/TCollectionMethodBrowsable.html,7,['error'],['error']
Availability,"ractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualBranchBrowsable::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); static Int_tTVirtualBranchBrowsable::FillListOfBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const TBranch*TVirtualBranchBrowsable::GetBranch() const; static Int_tGetBrowsables(TList& list, const TBranch* branch, const TVirtualBranchBrowsable* parent = 0); TClass*TVirtualBranchBrowsable::GetClassType() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TVirtualBranchBrowsable::GetIconName() const; TList*TVirtualBranchBrowsable::GetLeaves() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TNonSplitBrowsable.html:3301,error,error,3301,root/html528/TNonSplitBrowsable.html,https://root.cern,https://root.cern/root/html528/TNonSplitBrowsable.html,6,['error'],['error']
Availability,"radFunction*>(fObjFunction.get());; 880 if (fcn) ncalls = fcn->NCalls();; 881 }; 882 return ncalls;; 883}; 884 ; 885 ; 886bool Fitter::ApplyWeightCorrection(const ROOT::Math::IMultiGenFunction & loglw2, bool minimizeW2L) {; 887 // apply correction for weight square; 888 // Compute Hessian of the loglikelihood function using the sum of the weight squared; 889 // This method assumes:; 890 // - a fit has been done before and a covariance matrix exists; 891 // - the objective function is a likelihood function and Likelihood::UseSumOfWeightSquare(); 892 // has been called before; 893 ; 894 if (fMinimizer == nullptr) {; 895 MATH_ERROR_MSG(""Fitter::ApplyWeightCorrection"",""Must perform first a fit before applying the correction"");; 896 return false;; 897 }; 898 ; 899 unsigned int n = loglw2.NDim();; 900 // correct errors for weight squared; 901 std::vector<double> cov(n*n);; 902 bool ret = fMinimizer->GetCovMatrix(&cov[0] );; 903 if (!ret) {; 904 MATH_ERROR_MSG(""Fitter::ApplyWeightCorrection"",""Previous fit has no valid Covariance matrix"");; 905 return false;; 906 }; 907 // need to use new obj function computed with weight-square; 908 std::shared_ptr<ROOT::Math::IMultiGenFunction> objFunc(loglw2.Clone());; 909 fObjFunction.swap( objFunc );; 910 ; 911 // need to re-initialize the minimizer for the changes applied in the; 912 // objective functions; 913 if (!DoInitMinimizer()) return false;; 914 ; 915 //std::cout << ""Running Hesse ..."" << std::endl;; 916 ; 917 // run eventually before a minimization; 918 // ignore its error; 919 if (minimizeW2L) fMinimizer->Minimize();; 920 // run Hesse on the log-likelihood build using sum of weight squared; 921 ret = fMinimizer->Hesse();; 922 if (!ret) {; 923 MATH_ERROR_MSG(""Fitter::ApplyWeightCorrection"",""Error running Hesse on weight2 likelihood - cannot compute errors"");; 924 return false;; 925 }; 926 ; 927 if (fMinimizer->CovMatrixStatus() != 3) {; 928 MATH_WARN_MSG(""Fitter::ApplyWeightCorrection"",""Covariance matrix for weighted likeliho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8cxx_source.html:35226,error,errors,35226,doc/master/Fitter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8cxx_source.html,1,['error'],['errors']
Availability,"radFunction IGradModelFunction_v;  ; typedef ROOT::Math::IParamFunction IModel1DFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction;  ; typedef ROOT::Math::IParamMultiFunction IModelFunction_v;  ; template<class T > ; using IModelFunctionTempl = ROOT::Math::IParamMultiFunctionTempl< T >;  ; typedef void(* MinuitFCN_t) (int &npar, double *gin, double &f, double *u, int flag);  fit using user provided FCN with Minuit-like interface If npar = 0 it is assumed that the parameters are specified in the parameter settings created before For the options same consideration as in the previous method ;  . Public Member Functions;  Fitter ();  Default constructor. ;  ;  Fitter (const Fitter &)=delete;  Copy constructor (disabled, class is not copyable) ;  ;  Fitter (const std::shared_ptr< FitResult > &result);  Constructor from a result. ;  ; virtual ~Fitter ();  Destructor. ;  ; bool ApplyWeightCorrection (const ROOT::Math::IMultiGenFunction &loglw2, bool minimizeW2L=false);  apply correction in the error matrix for the weights for likelihood fits This method can be called only after a fit. ;  ; bool CalculateHessErrors ();  perform an error analysis on the result using the Hessian Errors are obtained from the inverse of the Hessian matrix To be called only after fitting and when a minimizer supporting the Hessian calculations is used otherwise an error (false) is returned. ;  ; bool CalculateMinosErrors ();  perform an error analysis on the result using MINOS To be called only after fitting and when a minimizer supporting MINOS is used otherwise an error (false) is returned. ;  ; FitConfig & Config ();  access to the configuration (non const method) ;  ; const FitConfig & Config () const;  access to the fit configuration (const method) ;  ; bool EvalFCN ();  Perform a simple FCN evaluation. ;  ; bool Fit (const BinData &data, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential);  Fit a binned data set using a least square fit. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:2381,error,error,2381,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['error'],['error']
Availability,"radientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameterState&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html:2282,toler,toler,2282,root/html526/ROOT__Minuit2__CombinedMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__CombinedMinimizer.html,20,['toler'],['toler']
Availability,"radientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. This class is also known as (typedefs to this class)ROOT::Math::GradFunctor1D::Impl, ROOT::Math::IGradFunction, ROOT::Math::IParametricGradFunctionOneDim::BaseGradFunc. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__IGradientFunctionOneDim.html:1313,avail,available,1313,root/html526/ROOT__Math__IGradientFunctionOneDim.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__IGradientFunctionOneDim.html,2,['avail'],['available']
Availability,"radientFunctionOneDim: public ROOT::Math::IBaseFunctionOneDim, public ROOT::Math::IGradientOneDim. Documentation for the abstract class IBaseFunctionMultiDim.; Interface (abstract class) for generic functions objects of multi-dimension; Provides a method to evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. This class is also known as (typedefs to this class)ROOT::Math::IParametricGradFunctionOneDim::BaseGradFunc, ROOT::Math::IGradFunction, ROOT::Math::GradFunctor1D::Impl. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IGradientFunctionOneDim(); virtual ROOT::Math::IBaseFunctionOneDim*ROOT::Math::IBaseFunctionOneDim::Clone() const; doubleROOT::Math::IGradientOneDim::Derivative(double x) const; doubleROOT::Math::IGradientOneDim::Derivative(const double* x) const; virtual voidFdF(double x, double& f, double& df) const; voidROOT::Math::IGradientOneDim::Gradient(const double* x, double* g) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(double x) const; doubleROOT::Math::IBaseFunctionOneDim::operator()(const double* x) const; ROOT::Math::IGradientFunctionOneDim&operator=(const ROOT::Math::IGradientFunctionOneDim&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void FdF(double x, double& f, double& df) const. Optimized method to evaluate at the same time the function value and derivative at a point x.; Often both value and derivatives are needed and it is often more efficient to compute them at the same ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__IGradientFunctionOneDim.html:1313,avail,available,1313,root/html528/ROOT__Math__IGradientFunctionOneDim.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__IGradientFunctionOneDim.html,2,['avail'],['available']
Availability,"radually sneak into the ROOT sources, in the namespace ROOT::Experimental for those parts that are not yet cast in stone, and in the namespace ROOT for those that are.; We will use standard C++ types, standard interface behavior (e.g. with respect to ownership and thread safety), good documentation and tests: we are trying to be nice!; Feedback; The main point of the meeting and this page is to solicit your feedback. Most of it has been taken care of in the code already.; Building ROOT 7; Pre-requisites; Support for the c++14 standard is required. Usage of g++ >= 5 or clang >= 3.4 is recommended.; Relevant cmake variables; The CMAKE_CXX_STANDARD cmake variables must be set to at least 14.; Building from source would look similar to this:; $ mkdir root7_build; $ cd root7_build; $ cmake -DCMAKE_CXX_STANDARD=14 path/to/root/source; $ cmake --build . -- -j4. Examples; See the relevant tutorials, for instance for drawing and styling the new histograms.; The new interfaces are not about shortening your code - but about robustness. Here are a few examples of what can go wrong with the ROOT6 interfaces:; ROOT6 interfaces, showing what can go wrong.; #include ""TFile.h""#include ""TH2.h""#include ""TTreeReader.h""#include ""TTreeReaderArray.h""#include ""TTree.h"" // Another function. Who knows what it does in a month from now.void someOtherFunction(); void fill(TTree* tree) { // Create the file before so it can own the histograms. TFile* file = TFile::Open(""jetmuontag.root"", ""RECRAETE"");  // Create the histograms (cannot mix fixed and variable size bins) const double muonPtBins[] = {0., 1., 10., 100.}; // The axis titles might have been changed. Impossible to see. TH2* hMuPtTag = new TH2F(""hMuPtTag"", ""muon pT versus tag value;tag value;muon pT [GeV]"", 4, muonPtBins, 10, 0., 1.); TH1* hJetEt = new TH1F(""hJetEt"", ""jet ET versus tag value;jet ET [GeV];tag value"", 10, 0., 1000.);  // Set up reading from the TTree TTreeReader reader(tree); TTreeReaderArray<float> jetEt(reader, ""jet.ET""); T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:3303,robust,robustness,3303,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,1,['robust'],['robustness']
Availability,"ral returned; 361/// by RooAbsReal::analyticalIntegral(). The passthrough scenario (code=0) is also changed; 362/// to return a normalized answer.; 363 ; 364double RooAbsPdf::analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName) const; 365{; 366 cxcoutD(Eval) << ""RooAbsPdf::analyticalIntegralWN("" << GetName() << "") code = "" << code << "" normset = "" << (normSet?*normSet:RooArgSet()) << endl ;; 367 ; 368 ; 369 if (code==0) return getVal(normSet) ;; 370 if (normSet) {; 371 return analyticalIntegral(code,rangeName) / getNorm(normSet) ;; 372 } else {; 373 return analyticalIntegral(code,rangeName) ;; 374 }; 375}; 376 ; 377 ; 378 ; 379////////////////////////////////////////////////////////////////////////////////; 380/// Check that passed value is positive and not 'not-a-number'. If; 381/// not, print an error, until the error counter reaches its set; 382/// maximum.; 383 ; 384bool RooAbsPdf::traceEvalPdf(double value) const; 385{; 386 // check for a math error or negative value; 387 bool error(false) ;; 388 if (TMath::IsNaN(value)) {; 389 logEvalError(Form(""p.d.f value is Not-a-Number (%f), forcing value to zero"",value)) ;; 390 error=true ;; 391 }; 392 if (value<0) {; 393 logEvalError(Form(""p.d.f value is less than zero (%f), forcing value to zero"",value)) ;; 394 error=true ;; 395 }; 396 ; 397 // do nothing if we are no longer tracing evaluations and there was no error; 398 if(!error) return error ;; 399 ; 400 // otherwise, print out this evaluations input values and result; 401 if(++_errorCount <= 10) {; 402 cxcoutD(Tracing) << ""*** Evaluation Error "" << _errorCount << "" "";; 403 if(_errorCount == 10) cxcoutD(Tracing) << ""(no more will be printed) "";; 404 }; 405 else {; 406 return error ;; 407 }; 408 ; 409 Print() ;; 410 return error ;; 411}; 412 ; 413 ; 414////////////////////////////////////////////////////////////////////////////////; 415/// Get normalisation term needed to normalise the raw values returned by; 416/// getVal(). Note that `g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:14416,error,error,14416,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,2,['error'],['error']
Availability,"ral, but; becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude),; and correlations are also large. In any case, whether the; non-positive-definiteness is real or only numerical is largely irrelevant,; since in both cases the error matrix will be unreliable and the minimum; suspicious. An ill-posed problem:. For questions of parameter dependence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical roundoff:. Be especially careful of exponential and factorial functions which get big; very quickly and lose accuracy. Starting too far from the solution:. The function may have unphysical local minima, especially at infinity in; some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors; on parameters. It does not apply to the errors reported from Minos, which; are in general asymmetric. The symmetric errors reported by Minuit are always calculated from; the covariance matrix, assuming that this matrix has been calculated,; usually as the result of a Migrad minimization or a direct; calculation by Hesse which inverts the second derivative matrix. When there are no limits on the parameter in question, the error reported; by Minuit should therefore be exactly equal to the square root of the; corresponding diagonal element of the error matrix reported by Minuit. However, when there are limits on the parameter, there is a transformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:11959,error,errors,11959,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,2,['error'],['errors']
Availability,"ram TH1* h with:. h->SetStats(0). and activate it again with:. h->SetStats(1). Labels used in the statistics box (""Mean"", ""Std Dev"", ...) can be changed from; $ROOTSYS/etc/system.rootrc or; .rootrc; (look for the string ""Hist.Stats.""). Fit Statistics; The type of information about fit parameters printed in the histogram statistics; box can be selected via the parameter mode. The parameter mode can be; = pcev (default = 0111). p = 1; print Probability; c = 1; print Chisquare/Number of degrees of freedom; e = 1; print errors (if e=1, v must be 1); v = 1; print name/values of parameters. Example:. gStyle->SetOptFit(1011);. print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are; shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent; to gStyle->SetOptFit(111); The error bars options. ""E""; Default. Shows only the error bars, not a marker. ""E1""; Small lines are drawn at the end of the error bars. ""E2""; Error rectangles are drawn. ""E3""; A filled area is drawn through the end points of the vertical error bars. ""E4""; A smoothed filled area is drawn through the end points of the vertical error; bars. ""E0""; Draw also bins with null contents. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,400);; TH1F *he = new TH1F(""he"",""Distribution drawn with error bars (option E1) "",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) he->Fill(gRandom->Gaus(0,1));; gStyle->SetEndErrorSize(3);; gStyle->SetErrorX(1.);; he->SetMarkerStyle(20);; he->Draw(""E1"");; return c1;; }; The options ""E3"" and ""E4"" draw an error band through the end points of the; vertical error bars. With ""E4"" the error band is smoothed. Because of the; smoothing algorithm used some artefacts may appear at the end of the band; like in the following example. In such cases ""E3"" should be used instead; of ""E4"". Picture; Source. {; TCanvas *ce4 = new TCanvas(""ce4"",""ce4"",600,400);; ce4->Divide(2,1);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/THistPainter.html:20095,error,error,20095,root/html604/THistPainter.html,https://root.cern,https://root.cern/root/html604/THistPainter.html,1,['error'],['error']
Availability,"ram buffer: a pointer to a buffer big enough to hold the data; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffer(char* buffer, Long64_t position, Int_t length); Read a data chunk of the given size, starting from the given offset. param buffer: a pointer to a buffer big enough to hold the data; param position: offset from the beginning of the file; param length: number of bytes to be read; returns: kTRUE in case of failure. Bool_t ReadBuffers(char* buffer, Long64_t* position, Int_t* length, Int_t nbuffs); Read scattered data chunks in one operation. param buffer: a pointer to a buffer big enough to hold all of the; requested data; param position: position[i] is the seek position of chunk i of len; length[i]; param length: length[i] is the length of the chunk at offset; position[i]; param nbuffs: number of chunks; returns: kTRUE in case of failure. Bool_t WriteBuffer(const char* buffer, Int_t length); Write a data chunk. param buffer: the data to be written; param length: the size of the buffer; returns: kTRUE in case of failure. void Flush(). void Seek(Long64_t offset, TFile::ERelativeTo position = kBeg); Set the position within the file. param offset: the new offset relative to position; param position: the relative position, either kBeg, kCur or kEnd. Bool_t IsUseable() const; Check the file is open and isn't a zombie. Bool_t GetVectorReadLimits(); Find the server-specific readv config params. Returns kFALSE in case of; error, kTRUE otherwise. void SetEnv(); Map ROOT and xrootd environment variables. TNetXNGFile(); {}. TNetXNGFile(const char* url, Option_t* mode = """", const char* title = """", Int_t compress = 1, Int_t netopt = 0, Bool_t parallelopen = kFALSE). TString GetNewUrl(); { return fNewUrl; }. » Last changed: root/netxng:$Id$ » Last generated: 2015-06-16 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TNetXNGFile.html:25396,failure,failure,25396,root/html534/TNetXNGFile.html,https://root.cern,https://root.cern/root/html534/TNetXNGFile.html,2,"['error', 'failure']","['error', 'failure']"
Availability,"ram classes. ; Profile Histogram. ; Profile histograms are used to display the mean value of Y and its error for each bin in X. The displayed error is by default the standard error on the mean (i.e. the standard deviation divided by the sqrt(n) ). Profile histograms are in many cases an elegant replacement of two-dimensional histograms. The inter-relation of two measured quantities X and Y can always be visualized by a two-dimensional histogram or scatter plot, but if Y is an unknown (but single-valued) approximate function of X, this function is displayed by a profile histogram with much better precision than by a scatter plot.; The following formulae show the cumulated contents (capital letters) and the values displayed by the printing or plotting routines (small letters) of the elements for bin j. ; \[; \begin{align}; H(j) &= \sum w \cdot Y \\; E(j) &= \sum w \cdot Y^2 \\; W(j) &= \sum w & &\text{if weights different from 1, the number of bin effective entries is used} \\; h(j) &= H(j) / W(j) & &\text{mean of Y,} \\; s(j) &= \sqrt{E(j)/W(j)- h(j)^2} & &\text{standard deviation of Y} \\; e(j) &= s(j)/\sqrt{W(j)} & &\text{standard error on the mean} \\; \end{align}; \]. The bin content is always the mean of the Y values, but errors change depending on options: ; \[; \begin{align}; \text{GetBinContent}(j) &= h(j) \\; \text{GetBinError}(j) &=; \begin{cases}; e(j) &\text{if option="""" (default). Error of the mean of all y values.} \\; s(j) &\text{if option=""s"". Standard deviation of all y values.} \\; \begin{cases} e(j) &\text{if } h(j) \ne 0 \\ 1/\sqrt{12 N} &\text{if } h(j)=0 \end{cases} &\text{if option=""i"". This is useful for storing integers such as ADC counts.} \\; 1/\sqrt{W(j)} &\text{if option=""g"". Error of a weighted mean for combining measurements with variances of } w. \\; \end{cases}; \end{align}; \]. In the special case where s(j) is zero (eg, case of 1 entry only in one bin) the bin error e(j) is computed from the average of the s(j) for all bins if the s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile.html:1545,error,error,1545,doc/master/classTProfile.html,https://root.cern,https://root.cern/doc/master/classTProfile.html,1,['error'],['error']
Availability,"ram for RooMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ PrintLevel. enum RooMinimizer::PrintLevel. EnumeratorNone ; Reduced ; Normal ; ExtraForProblem ; Maximum . Definition at line 137 of file RooMinimizer.h. ◆ Strategy. enum RooMinimizer::Strategy. EnumeratorSpeed ; Balance ; Robustness . Definition at line 136 of file RooMinimizer.h. Constructor & Destructor Documentation. ◆ RooMinimizer(). RooMinimizer::RooMinimizer ; (; RooAbsReal & ; function, . Config const & ; cfg = {} . ). explicit . Construct MINUIT interface to given function. ; Function can be anything, but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2 (implemented by RooChi2Var). Other frequent use cases are a RooAddition of a RooNLLVar plus a penalty or constraint term. This class propagates all RooFit information (floating parameters, their values and errors) to MINUIT before each MINUIT call and propagates all MINUIT information back to the RooFit object at the end of each call (updated parameter values, their (asymmetric errors) etc. The default MINUIT error level for HESSE and MINOS error analysis is taken from the defaultErrorLevel() value of the input function. Constructor that accepts all configuration in struct with RooAbsReal likelihood ; Definition at line 86 of file RooMinimizer.cxx. ◆ ~RooMinimizer(). RooMinimizer::~RooMinimizer ; (; ). overridedefault . Destructor. . Member Function Documentation. ◆ addParamsToProcessTimer(). void RooMinimizer::addParamsToProcessTimer ; (; ). private . Add parameters in metadata field to process timer. ; Definition at line 678 of file RooMinimizer.cxx. ◆ applyCovarianceMatrix(). void RooMinimizer::applyCovarianceMatrix ; (; TMatrixDSym const & ; V). Apply results of given external covariance matrix. ; i.e. propagate its errors to all RRV parameter representations and give this matrix instead of the HESSE matrix at the next save() call ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:16804,error,errors,16804,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,2,['error'],['errors']
Availability,"ram hnew. Bool_t FindNewAxisLimits(const TAxis* axis, const Double_t point, Double_t& newMin, Double_t& newMax); finds new limits for the axis so that *point* is within the range and; the limits are compatible with the previous ones (see TH1::Merge).; new limits are put into *newMin* and *newMax* variables.; axis - axis whose limits are to be recomputed; point - point that should fit within the new axis limits; newMin - new minimum will be stored here; newMax - new maximum will be stored here.; false if failed (e.g. if the initial axis limits are wrong; or the new range is more than 2^64 times the old one). void ExtendAxis(Double_t x, TAxis* axis); Histogram is resized along axis such that x is in the axis range.; The new axis limits are recomputed by doubling iteratively; the current axis range until the specified value x is within the limits.; The algorithm makes a copy of the histogram, then loops on all bins; of the old histogram to fill the extended histogram.; Takes into account errors (Sumw2) if any.; The algorithm works for 1-d, 2-D and 3-D histograms.; The axis must be extendable before invoking this function.; Ex: h->GetXaxis()->SetCanExtend(kTRUE);. void RecursiveRemove(TObject* obj); Recursively remove object from the list of functions. void Scale(Double_t c1 = 1, Option_t* option = """"); Multiply this histogram by a constant c1. this = c1*this. Note that both contents and errors(if any) are scaled.; This function uses the services of TH1::Add. IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Scale. One can scale an histogram such that the bins integral is equal to; the normalization parameter via TH1::Scale(Double_t norm), where norm; is the desired normalization divided by the integral of the histogram. If option contains ""width"" the bin contents and errors are divided; by the bin width. Bool_t CanExtendAllAxes()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:105601,error,errors,105601,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['errors']
Availability,"ram title.; Fit Parameters: toggles the display of the histogram or graph fit parameters.; Can Edit Histogram: enables/disables the possibility to edit histogram bin contents. 2.3.1.5 Inspect Menu. ROOT: inspects the top-level gROOT object (in a new canvas).; Start Browser: starts a new object browser (in a separate window).; GUI Builder: starts the GUI builder application (in a separate window). 2.3.1.6 Help Menu. Canvas: help on canvas as a whiteboard area for drawing.; Menus: help on canvas menus.; Graphics Editor: help on primitives’ drawing and objects’ editor.; Browser: help on the ROOT objects’ and files’ browser.; Objects: help on DrawClass, Inspect and Dump context menu items.; PostScript: help on how to print a canvas to a PostScript file format.; About ROOT: pops up the ROOT Logo with the version number. 2.3.1.7 Classes Menu. Classes: starts the ClassTree viewer that draws inheritance tree for a list of classes. 2.3.1.8 Toolbar; The following menu shortcuts and utilities are available from the toolbar:; Create a new canvas window.; Popup the Open File dialog.; Popup the Save As… dialog.; Popup the Print dialog.; Interrupts the current drawing process.; Redraw the canvas.; Inspect the gROOT object.; Create a new objects’ browser.; You can create the following graphical objects using the toolbar buttons for primitive drawing. Tool tips are provided for helping your choice.; An Arc or circle: Click on the center of the arc, and then move the mouse. A rubber band circle is shown. Click again with the left button to freeze the arc.; A Line: Click with the left button at the point where you want to start the line, then move the mouse and click again with the left button to freeze the line.; An Arrow:Click with the left button at the point where you want to start the arrow, then move the mouse and click again with the left button to freeze the arrow.; A Diamond: Click with the left button and freeze again with the left button. The editor draws a rubber band box ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:41261,avail,available,41261,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['avail'],['available']
Availability,"ram with h2,; where the asymmetry is defined as:. Asymmetry = (h1 - h2)/(h1 + h2) where h1 = this. works for 1D, 2D, etc. histograms; c2 is an optional argument that gives a relative weight between the two; histograms, and dc2 is the error on this weight. This is useful, for example,; when forming an asymmetry between two histograms from 2 different data sets that; need to be normalized to each other in some way. The function calculates; the errors asumming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)). example: assuming 'h1' and 'h2' are already filled. h3 = h1->GetAsymmetry(h2). then 'h3' is created and filled with the asymmetry between 'h1' and 'h2';; h1 and h2 are left intact. Note that it is the user's responsibility to manage the created histogram.; The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2. code proposed by Jason Seely (seely@mit.edu) and adapted by R.Brun. clone the histograms so top and bottom will have the; correct dimensions:; Sumw2 just makes sure the errors will be computed properly; when we form sums and ratios below. Int_t GetDefaultBufferSize(); static function; return the default buffer size for automatic histograms; the parameter fgBufferSize may be changed via SetDefaultBufferSize. Bool_t GetDefaultSumw2(); static function; return kTRUE if TH1::Sumw2 must be called when creating new histograms.; see TH1::SetDefaultSumw2. Double_t GetEntries() const; return the current number of entries. Double_t GetEffectiveEntries() const; number of effective entries of the histogram,; neff = (Sum of weights )^2 / (Sum of weight^2 ); In case of an unweighted histogram this number is equivalent to the; number of entries of the histogram.; For a weighted histogram, this number corresponds to the hypotetical number of unweighted entries; a histogram would need to have the same statistical power as this weighted histogram.; Note: The underflow/overflow are included if one has set the TH1::StatOverFlows flag; and if the statistics",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TH1.html:91201,error,errors,91201,root/html602/TH1.html,https://root.cern,https://root.cern/root/html602/TH1.html,2,['error'],['errors']
Availability,"ram); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEmptyAll(); virtual voidTGContainer::End(Bool_t select = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; const char*Ex(); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); TTVLVEntry*ExpressionItem(Int_t index); TList*ExpressionList(); const char*Ey(); const char*Ez(); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGContainer::FindFrame(Int_t x, Int_t y, Bool_t exclude = kTRUE); virtual TGFrame*TGContainer::FindFrameByName(const char* name); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual void*TGContainer::FindItem(const TString& name, Bool_t direction = kTRUE, Bool_t caseSensitive = kTRUE, Bool_t subString = kFALSE); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGCanvas*TGContainer::GetCanvas() const; TGClient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVContainer.html:5135,error,error,5135,root/html530/TTVLVContainer.html,https://root.cern,https://root.cern/root/html530/TTVLVContainer.html,3,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidEnd(Bool_t mark = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; ETextJustificationGetAlignment() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGTextBuffer*GetBuffer() const; TGClient*TGObject::GetClient() const; const char*TGWidget::GetCommand() const; static Int_tTGWindow::GetCounter(); Int_tGetCursorPosition() const; static FontStruct_tGetDefaultFontStruct(); static Pixel_tTGFrame::GetDefaultFrameBackground(); static const TGGC&GetDefaultGC(); virtual UInt_tTGFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGFrame:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGTextEntry.html:8716,error,error,8716,root/html528/TGTextEntry.html,https://root.cern,https://root.cern/root/html528/TGTextEntry.html,4,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidEraseStatusBar(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual TGFrame*ExecuteAction(); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; TGMdiFrame*FindEditableMdiFrame(const TGWindow* win); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGuiBldAction*TGuiBuilder::GetAction() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static ULong_tGetBgnd(); static TGGC*GetBgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootGuiBuilder.html:7321,error,error,7321,root/html602/TRootGuiBuilder.html,https://root.cern,https://root.cern/root/html602/TRootGuiBuilder.html,2,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidEnableItem(const char* name, Bool_t on = kTRUE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionGetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGShutter.html:4452,error,error,4452,root/html528/TGShutter.html,https://root.cern,https://root.cern/root/html528/TGShutter.html,4,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidExcludeClassEditor(TClass* cl, Bool_t recurse = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTVirtualPadEditor::FillAttributes(Int_t, Int_t); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TCanvas*GetCanvas() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGedEditor.html:6571,error,error,6571,root/html528/TGedEditor.html,https://root.cern,https://root.cern/root/html528/TGedEditor.html,4,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; voidEveMenu(Int_t id); voidTRootBrowser::EventInfo(Int_t event, Int_t px, Int_t py, TObject* selected); virtual Long_tTRootBrowser::ExecPlugin(const char* name = 0, const char* fname = 0, const char* cmd = 0, Int_t pos = kRight, Int_t subpos = -1); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTRootBrowser::ExecuteDefaultAction(TObject* obj)SIGNAL ; virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TGFrame*TRootBrowser::GetActFrame() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; virtual TBrowser*TBrowserImp::GetBrowser() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGComposi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBrowser.html:5187,error,error,5187,root/html602/TEveBrowser.html,https://root.cern,https://root.cern/root/html602/TEveBrowser.html,2,['error'],['error']
Availability,"ram); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); Int_tEnablePackage(const char* package, Bool_t notOnClient = kFALSE); Int_tEnablePackage(const char* package, const char* loadopts, Bool_t notOnClient = kFALSE); Int_tEnablePackage(const char* package, TList* loadopts, Bool_t notOnClient = kFALSE); virtual voidTObject::Error(const char* method, const char* msgfmt) const; Int_tExec(const char* cmd, Bool_t plusMaster = kFALSE); virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual Bool_tExistsDataSet(const char* dataset); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs)SIGNAL ; virtual voidTNamed::FillBuffer(char*& buffer); Long64_tFinalize(Int_t query = -1, Bool_t force = kFALSE); Long64_tFinalize(const char* queryref, Bool_t force = kFALSE); TList*FindDataSets(const char* searchString, const char* optStr = """"); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Long64_tGetBytesRead() const; Int_tGetClientProtocol() const; const char*GetConfDir() const; const char*GetConfFile() const; Float_tGetCpuTime() const; const char*GetDataPoolUrl() const; virtual TFileCollection*GetDataSet(const char* dataset, const char* optStr = """"); TMap*GetDataSetQuota(const char* optStr = """"); virtual TMap*GetDataSets(const char* uri = """", const char* optStr = """"); virtual Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:5965,error,error,5965,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['error'],['error']
Availability,rame * ; frame = nullptr). virtual . Virtual method that is called on any change in the dependent frames. ; This implementation simply calls fPad Modified()/Update(). ; Reimplemented in TEveGedEditor.; Definition at line 173 of file TGedEditor.cxx. Member Data Documentation. ◆ fCan. TGCanvas* TGedEditor::fCan. protected . provides scroll bars ; Definition at line 41 of file TGedEditor.h. ◆ fCanvas. TCanvas* TGedEditor::fCanvas. protected . canvas related to the editor ; Definition at line 50 of file TGedEditor.h. ◆ fClass. TClass* TGedEditor::fClass. protected . class of the selected object ; Definition at line 51 of file TGedEditor.h. ◆ fCreatedTabs. TList TGedEditor::fCreatedTabs. protected . list of created tabs ; Definition at line 44 of file TGedEditor.h. ◆ fExclMap. TMap TGedEditor::fExclMap. protected . map of excluded editors for selected model ; Definition at line 38 of file TGedEditor.h. ◆ fFrameMap. TMap TGedEditor::fFrameMap. protected . global map of available frames ; Definition at line 37 of file TGedEditor.h. ◆ fGedFrames. TList TGedEditor::fGedFrames. protected . list visible of frames ; Definition at line 39 of file TGedEditor.h. ◆ fgFrameCreator. TGedEditor * TGedEditor::fgFrameCreator = 0. staticprotected . Definition at line 58 of file TGedEditor.h. ◆ fGlobal. Bool_t TGedEditor::fGlobal. protected . true if editor is global ; Definition at line 52 of file TGedEditor.h. ◆ fModel. TObject* TGedEditor::fModel. protected . selected object ; Definition at line 48 of file TGedEditor.h. ◆ fPad. TVirtualPad* TGedEditor::fPad. protected . selected pad ; Definition at line 49 of file TGedEditor.h. ◆ fTab. TGTab* TGedEditor::fTab. protected . tab widget holding the editor ; Definition at line 42 of file TGedEditor.h. ◆ fTabContainer. TGCompositeFrame* TGedEditor::fTabContainer. protected . main tab container ; Definition at line 46 of file TGedEditor.h. ◆ fVisibleTabs. TList TGedEditor::fVisibleTabs. protected . list ofcurrently used tabs ; Definition at li,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:48890,avail,available,48890,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['avail'],['available']
Availability,"rame border width; TBufferFile*fBufbuffer used for Drag and Drop; TGCanvas*TGContainer::fCanvaspointer to canvas; TGListTree::ECheckModefCheckModehow to propagate check properties through the tree; TGClient*TGObject::fClientConnection to display server; GContext_tfColorGCdrawing context for main item color; TGListTree::EColorMarkupModefColorModeif/how to render item's main color; TGListTreeItem*fCurrentpointer to current item in list; TDNDDatafDNDDataDrag and Drop data; Int_tTGFrame::fDNDStateEDNDFlags; Atom_t*fDNDTypeListhandles DND types; UInt_tfDefhdefault list height; UInt_tfDefwdefault list width; Bool_tfDisableOpendisable branch opening on double-clicks; Bool_tTGContainer::fDraggingtrue if in dragging mode; GContext_tfDrawGCicon drawing context; TGListTreeItem*fDropItemitem on which DND is over; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; Bool_tfEventHandledflag used from user code to bypass standard event handling; UInt_tTGFrame::fEventMaskcurrenty active event mask; Int_tfExposeBottombottom y position of visible region; Int_tfExposeToptop y postion of visible region; TGRectangleTGContainer::fExposedRegionexposed area; TGFrameElement*TGFrame::fFEpointer to frame element; TGListTreeItem*fFirstpointer to first item in list; FontStruct_tfFontfont used to draw item text; Pixel_tfGrayPixelgray draw color; UInt_tTGFrame::fHeightframe height; GContext_tfHighlightGChighlighted icon drawing context; Int_tfHspacinghorizontal spacing between items; Handle_tTGObject::fIdX11/Win32 Window identifier; Int_tfIndentnumber of pixels indentation; TStringTGContainer::fKeyInputkeyboard input (buffer); TTimer*TGContainer::fKeyTimerkeyboard timer; Bool_tTGContainer::fKeyTimerActivekTRUE - keyboard timer is active; TGListTreeItem*fLastpointer to last item in list; TGFrameElement*TGContainer::fLastActiveEllast active item; Bool_tTGContainer::fLastCasecase sensetivity of last search; Bool_tTGContainer::fLastDirdirection of last search; UInt_tfLastEventStatemodifier state",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:25971,mask,mask,25971,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,6,['mask'],['mask']
Availability,rame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tfPoslogical current position; Int_tfPsizelogical page size of scrollbar; Int_tfRangelogical upper range of scrollbar; TTimer*fRepeatrepeat rate timer (when mouse stays pressed); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGScrollBarElement*fSliderslider; Int_tfSliderRangelogical slider range; Int_tfSliderSizelogical slider size; Int_tfSmallIncSmall Increment in the sliding algorithm; Window_tfSubwsub window in which mouse is pressed; TGScrollBarElement*fTailtail button of scrollbar; const TGPicture*fTailPicpicture in tail (down or right arrow); Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tfX0; Int_tfXp; Int_tTGFrame::fYframe y position; Int_tfY0current slider position in pixels; Int_tfYpprevious slider position in pixels; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static Pixmap_tfgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGScrollBar.html:18167,down,down,18167,root/html528/TGScrollBar.html,https://root.cern,https://root.cern/root/html528/TGScrollBar.html,4,['down'],['down']
Availability,rame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; const TGWindow*TGWidget::fMsgWindowwindow which handles widget events; TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedrawkTRUE if window needs to be redrawn; UInt_tTGFrame::fOptionsframe options; const TGWindow*TGWindow::fParentParent window; Int_tfPoslogical current position; Int_tfPsizelogical page size of scrollbar; Int_tfRangelogical upper range of scrollbar; TTimer*fRepeatrepeat rate timer (when mouse stays pressed); Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TGScrollBarElement*fSliderslider; Int_tfSliderRangelogical slider range; Int_tfSliderSizelogical slider size; Int_tfSmallIncSmall Increment in the sliding algorithm; Window_tfSubwsub window in which mouse is pressed; TGScrollBarElement*fTailtail button of scrollbar; const TGPicture*fTailPicpicture in tail (down or right arrow); Int_tTGWidget::fWidgetFlagswidget status flags (OR of EWidgetStatus); Int_tTGWidget::fWidgetIdthe widget id (used for event processing); UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tfX0current slider position in pixels; Int_tfXpprevious slider position in pixels; Int_tTGFrame::fYframe y position; Int_tfY0current slider position in pixels; Int_tfYpprevious slider position in pixels; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static Pixmap_tfgBckgndPixmap; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; stati,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGScrollBar.html:19326,down,down,19326,root/html602/TGScrollBar.html,https://root.cern,https://root.cern/root/html602/TGScrollBar.html,2,['down'],['down']
Availability,"rameNumber, fEXlow);; 1250 auto fElYName = SaveArray(out, ""fely"", frameNumber, fEYlow);; 1251 auto fEhXName = SaveArray(out, ""fehx"", frameNumber, fEXhigh);; 1252 auto fEhYName = SaveArray(out, ""fehy"", frameNumber, fEYhigh);; 1253 ; 1254 if (gROOT->ClassSaved(TGraphAsymmErrors::Class())); 1255 out<<"" "";; 1256 else; 1257 out << "" TGraphAsymmErrors *"";; 1258 out << ""grae = new TGraphAsymmErrors(""<< fNpoints << "",""; 1259 << fXName << "","" << fYName << "",""; 1260 << fElXName << "","" << fEhXName << "",""; 1261 << fElYName << "","" << fEhYName << "");""; 1262 << std::endl;; 1263 ; 1264 SaveHistogramAndFunctions(out, ""grae"", frameNumber, option);; 1265}; 1266 ; 1267////////////////////////////////////////////////////////////////////////////////; 1268/// Multiply the values and errors of a TGraphAsymmErrors by a constant c1.; 1269///; 1270/// If option contains ""x"" the x values and errors are scaled; 1271/// If option contains ""y"" the y values and errors are scaled; 1272/// If option contains ""xy"" both x and y values and errors are scaled; 1273 ; 1274void TGraphAsymmErrors::Scale(Double_t c1, Option_t *option); 1275{; 1276 TGraph::Scale(c1, option);; 1277 TString opt = option; opt.ToLower();; 1278 if (opt.Contains(""x"") && GetEXlow()) {; 1279 for (Int_t i=0; i<GetN(); i++); 1280 GetEXlow()[i] *= c1;; 1281 }; 1282 if (opt.Contains(""x"") && GetEXhigh()) {; 1283 for (Int_t i=0; i<GetN(); i++); 1284 GetEXhigh()[i] *= c1;; 1285 }; 1286 if (opt.Contains(""y"") && GetEYlow()) {; 1287 for (Int_t i=0; i<GetN(); i++); 1288 GetEYlow()[i] *= c1;; 1289 }; 1290 if (opt.Contains(""y"") && GetEYhigh()) {; 1291 for (Int_t i=0; i<GetN(); i++); 1292 GetEYhigh()[i] *= c1;; 1293 }; 1294}; 1295 ; 1296////////////////////////////////////////////////////////////////////////////////; 1297/// Set ex and ey values for point pointed by the mouse.; 1298 ; 1299void TGraphAsymmErrors::SetPointError(Double_t exl, Double_t exh, Double_t eyl, Double_t eyh); 1300{; 1301 if (!gPad) {; 1302 Error(""SetPointError"", ""Cannot be u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html:44057,error,errors,44057,doc/master/TGraphAsymmErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphAsymmErrors_8cxx_source.html,3,['error'],['errors']
Availability,"rameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments. If no frame specifications are given, the AutoRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* plotPull(const RooRealVar& param, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Plot the distribution of pull values for the specified parameter on a newly created frame. If asymmetric; errors are calculated in the fit (by MINOS) those will be used in the pull calculation. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments; FitGauss(Bool_t flag) -- Add a gaussian fit to the frame. If no frame specifications are given, the AutoSymRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:24596,error,errors,24596,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,7,['error'],['errors']
Availability,"rameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:12758,error,error,12758,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,2,['error'],['error']
Availability,rameter ivar and jvar around the minimum; The contour will be find for value of the function = Min + ErrorUp();. void PrintResults(); return reference to the objective function; virtual const ROOT::Math::IGenFunction & Function() const = 0;; print the result according to set level (implemented for TMinuit for mantaining Minuit-style printing). {}. std::string VariableName(unsigned int ivar) const; get name of variables (override if minimizer support storing of variable names); return an empty string if variable is not found. int VariableIndex(const string& name) const; get index of variable given a variable given a name; return -1 if variable is not found. int PrintLevel() const; minimizer configuration parameters ; set print level. { return fOptions.PrintLevel(); }. unsigned int MaxFunctionCalls() const; max number of function calls. { return fOptions.MaxFunctionCalls(); }. unsigned int MaxIterations() const; max iterations. { return fOptions.MaxIterations(); }. double Tolerance() const; absolute tolerance. { return fOptions.Tolerance(); }. double Precision() const; precision of minimizer in the evaluation of the objective function; ( a value <=0 corresponds to the let the minimizer choose its default one). { return fOptions.Precision(); }. int Strategy() const; strategy. { return fOptions.Strategy(); }. int Status() const; status code of minimizer. { return fStatus; }. double ErrorDef() const; return the statistical scale used for calculate the error; is typically 1 for Chi2 and 0.5 for likelihood minimization. { return fOptions.ErrorDef(); }. bool IsValidError() const; return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit). { return fValidError; }. void SetPrintLevel(int level); set print level. { fOptions.SetPrintLevel(level); }. void SetMaxFunctionCalls(unsigned int maxfcn); set maximum of function calls. { if (maxfcn > 0) fOptions.SetMaxFunctionCalls(maxfcn); }. void SetMaxIterations(unsigned int maxiter); set maximum it,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__Minimizer.html:12212,toler,tolerance,12212,root/html534/ROOT__Math__Minimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__Minimizer.html,3,['toler'],['tolerance']
Availability,"rameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooMinuit(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { _doEvalErrorWall = flag ; }. void setPrintEvalErrors(Int_t numEvalErrors); { _printEvalErrors = numEvalErrors ; }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. void setMaxEvalMultiplier(Int_t n); { _maxEvalMult = n ; }. Int_t evalCounter() const; { return _evalCounter ; }. void zeroEvalCount(); { _evalCounter = 0 ; }. Int_t getNPar() const; { return _nPar ; }. ofstream* logfile() const; { return _logfile ; }. Double_t& maxFCN(); { return _maxFCN ; }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. » Last changed: Fri Dec 2 14:26:52 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please sen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:13820,error,errors,13820,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['error'],['errors']
Availability,"rameter vector); TStringTNamed::fNameobject identifier; unsigned intROOT::Fit::FitResult::fNdfnumber of degree of freedom; boolROOT::Fit::FitResult::fNormalizedflag for indicating is errors are normalized; vector<string>ROOT::Fit::FitResult::fParNamesparameter names (only with FCN only fits, when fFitFunc=0); vector<pair<double,double> >ROOT::Fit::FitResult::fParamBoundsparameter bounds; vector<double>ROOT::Fit::FitResult::fParamsparameter values. Size is total number of parameters; intROOT::Fit::FitResult::fStatusminimizer status code; TStringTNamed::fTitleobject title; doubleROOT::Fit::FitResult::fValminimum function value; boolROOT::Fit::FitResult::fValidflag for indicating valid fit. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TFitResult(const ROOT::Fit::FitResult& f); constructor from an IFitResult; copy the contained TF1 pointer function if it is. void Print(Option_t* option = """") const; print result of the fit, by default chi2, parameter values and errors; if option ""V"" is given print also error matrix and correlation. TMatrixDSym GetCovarianceMatrix() const; Return the covariance matrix from fit; The matrix is a symmetric matrix with a size N equal to; the total number of parameters considered in the fit including the fixed ones; The matrix row and columns corresponding to the fixed parameters will contain only zero's. TMatrixDSym GetCorrelationMatrix() const; Return the correlation matrix from fit.; The matrix is a symmetric matrix with a size N equal to; the total number of parameters considered in the fit including the fixed ones; The matrix row and columns corresponding to the fixed parameters will contain only zero's. TFitResult(int status = 0); Default constructor for I/O. TFitResult(const ROOT::Fit::FitResult& f); constructor from an IFitResult. virtual ~TFitResult(); {}. double Error(unsigned int i) const; need to re-implement to solve conflict with TObject::Error. » Author: David Gonzalez Maline Tue Nov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFitResult.html:11491,error,errors,11491,root/html602/TFitResult.html,https://root.cern,https://root.cern/root/html602/TFitResult.html,2,['error'],"['error', 'errors']"
Availability,"rameter...; migrad.release(""mean"");. // ... and fix another one; migrad.fix(1);. // and minimize again; FunctionMinimum min1 = migrad();. // output; std::cout<<""minimum1: ""<<min1<<std::endl;. // release the parameter...; migrad.release(1);. // ... and minimize with all three parameters; // (still with limits!); FunctionMinimum min2 = migrad();. // output; std::cout<<""minimum2: ""<<min2<<std::endl;. // remove all limits on parameters...; migrad.removeLimits(""mean"");; migrad.removeLimits(""sigma"");. // ... and minimize again with all three parameters; // (now without limits!); FunctionMinimum min3 = migrad();. // output; std::cout<<""minimum3: ""<<min3<<std::endl;; }. {; // demonstrate MINOS error analysis. // create Minuit parameters with names; MnUserParameters upar;; upar.add(""mean"", mean, 0.1);; upar.add(""sigma"", rms, 0.1);; upar.add(""area"", area, 0.1);. // create Migrad minimizer; MnMigrad migrad(theFCN, upar);. // minimize; FunctionMinimum min = migrad();. // create MINOS error factory; MnMinos minos(theFCN, min);. {; // 1-sigma MINOS errors; std::pair<double,double> e0 = minos(0);; std::pair<double,double> e1 = minos(1);; std::pair<double,double> e2 = minos(2);. // output; std::cout<<""1-sigma minos errors: ""<<std::endl;; std::cout<<""par0: ""; <<min.userState().value(""mean"")<<"" ""; <<e0.first<<"" ""<<e0.second<<std::endl;; std::cout<<""par1: ""; <<min.userState().value(1)<<"" ""; <<e1.first<<"" ""<<e1.second<<std::endl;; std::cout<<""par2: ""<<min.userState().value(""area""); <<"" ""<<e2.first<<"" ""; <<e2.second<<std::endl;; }. {; // 2-sigma MINOS errors; theFCN.setErrorDef(4.);; std::pair<double,double> e0 = minos(0);; std::pair<double,double> e1 = minos(1);; std::pair<double,double> e2 = minos(2);. // output; std::cout<<""2-sigma minos errors: ""<<std::endl;; std::cout<<""par0: ""; <<min.userState().value(""mean""); <<"" ""<<e0.first<<"" ""<<e0.second<<std::endl;; std::cout<<""par1: ""; <<min.userState().value(1); <<"" ""<<e1.first<<"" ""<<e1.second<<std::endl;; std::cout<<""par2: ""; <<min.userSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:86350,error,error,86350,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,2,['error'],['error']
Availability,"rameter<bool>(const char* name, const bool& val, char mergemode); virtual~TParameter<bool>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const bool&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParameter_bool_.html:1600,error,error,1600,root/html532/TParameter_bool_.html,https://root.cern,https://root.cern/root/html532/TParameter_bool_.html,2,['error'],['error']
Availability,"rameter<long>(const char* name, const long& val, char mergemode); virtual~TParameter<long>(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const long&GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tHash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* class",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TParameter_long_.html:1600,error,error,1600,root/html532/TParameter_long_.html,https://root.cern,https://root.cern/root/html532/TParameter_long_.html,2,['error'],['error']
Availability,"rameters from section 'Section3' of file. Mark all; # variables that were processed with the ""READ"" attribute; params.readFromFile(configFile, ""READ"", ""Section3""); ; # Print the list of parameters that were not read from Section3; print(""The following parameters of the were _not_ read from Section3: "", params.selectByAttrib(""READ"", False)); ; # Read parameters from section 'Section4' of file, contains; # 'include file' statement of rf505_asciicfg_example.txt; # so that we effective read the same; params.readFromFile(configFile, """", ""Section4""); params.Print(""v""); [#0] WARNING:InputArguments -- The parameter 's' with range [-10, 10] of the RooGaussian 'g' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; 1) 0x803b610 RooRealVar:: f = 0.50733 +/- 0.020971 L(0 - 1) ""f""; 2) 0x79b4c50 RooRealVar:: m = 0.0064018 +/- 0.053686 L(-10 - 10) ""m""; 3) 0x7f83920 RooRealVar:: p0 = 0.0073509 +/- 0.0078312 L(0 - 1) ""p0""; 4) 0x47c4aa0 RooRealVar:: s = 0.96516 +/- 0.047052 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing include file rf505_asciicfg_example.txt; 1) 0x803b610 RooRealVar:: f = 0.45 +/- 0.03 L(0 - 1) ""f""; 2) 0x79b4c50 RooRealVar:: m = 0.025 +/- 0.02 L(-10 - 10) ""m""; 3) 0x7f83920 RooRealVar:: p0 = 0.0022 +/- 0.0001 L(0 - 1) ""p0""; 4) 0x47c4aa0 RooRealVar:: s = 0.98 +/- 0.03 L(-10 - 10) ""s""; [#1] INFO:InputArguments -- RooArgSet::readFromStream(parameters): processing include file rf505_asciicfg_example.txt; [",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf505__asciicfg_8py.html:2723,error,error,2723,doc/master/rf505__asciicfg_8py.html,https://root.cern,https://root.cern/doc/master/rf505__asciicfg_8py.html,1,['error'],['error']
Availability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html:3447,toler,toler,3447,root/html526/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html526/ROOT__Minuit2__ScanMinimizer.html,1,['toler'],['toler']
Availability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2010-09-23 19:57; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Minuit2__ScanMinimizer.html:3447,toler,toler,3447,root/html528/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html528/ROOT__Minuit2__ScanMinimizer.html,1,['toler'],['toler']
Availability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-07-04 15:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Minuit2__ScanMinimizer.html:3449,toler,toler,3449,root/html530/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html530/ROOT__Minuit2__ScanMinimizer.html,1,['toler'],['toler']
Availability,"rameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const ROOT::Minuit2::MnUserParameters&, const ROOT::Minuit2::MnUserCovariance&, const ROOT::Minuit2::MnStrategy&, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::MnFcn&, const ROOT::Minuit2::GradientCalculator&, const ROOT::Minuit2::MinimumSeed&, const ROOT::Minuit2::MnStrategy&, unsigned int, double) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; virtual ROOT::Minuit2::FunctionMinimumROOT::Minuit2::ModularFunctionMinimizer::Minimize(const ROOT::Minuit2::FCNGradientBase&, const vector<double>&, unsigned int, const vector<double>&, unsigned int stra = 1, unsigned int maxfcn = 0, double toler = 0.1) const; ROOT::Minuit2::ScanMinimizer&operator=(const ROOT::Minuit2::ScanMinimizer&); ROOT::Minuit2::ScanMinimizerScanMinimizer(); ROOT::Minuit2::ScanMinimizerScanMinimizer(const ROOT::Minuit2::ScanMinimizer&); virtual const ROOT::Minuit2::MinimumSeedGenerator&SeedGenerator() const. Data Members; private:. ROOT::Minuit2::ScanBuilderfBuilder; ROOT::Minuit2::SimplexSeedGeneratorfSeedGenerator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ScanMinimizer(); {}. ~ScanMinimizer(); {}. » Last changed: root/minuit2:$Id: ScanMinimizer.h 21530 2007-12-20 11:14:35Z moneta $ » Last generated: 2011-11-03 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Minuit2__ScanMinimizer.html:3449,toler,toler,3449,root/html532/ROOT__Minuit2__ScanMinimizer.html,https://root.cern,https://root.cern/root/html532/ROOT__Minuit2__ScanMinimizer.html,1,['toler'],['toler']
Availability,"rameters() const; parameter values (return std::vector). { return fParams; }. const double * GetParams() const; parameter values (return const pointer). { return &fParams.front(); }. double Value(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Parameter(unsigned int i) const; parameter value by index. { return fParams[i]; }. double Error(unsigned int i) const; parameter error by index; (NOTE: this due to conflict with TObject::Error cannot used in derived class which; inherits from TObject. Use instead ParError (or Errors()[i] ). double ParError(unsigned int i) const; parameter error by index. std::string ParName(unsigned int i) const; name of the parameter. void SetMinosError(unsigned int i, double elow, double eup); set the Minos errors for parameter i (called by the Fitter class when running Minos). double LowerError(unsigned int i) const; lower Minos error. If Minos has not run for parameter i return the parabolic error. double UpperError(unsigned int i) const; upper Minos error. If Minos has not run for parameter i return the parabolic error. double GlobalCC(unsigned int i) const; parameter global correlation coefficient. double CovMatrix(unsigned int i, unsigned int j) const; retrieve covariance matrix element. double Correlation(unsigned int i, unsigned int j) const; retrieve correlation elements. void GetCovarianceMatrix(TMatrixTSym<double>& mat) const; fill covariance matrix elements using a generic matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetCorrelationMatrix(TMatrixTSym<double>& mat) const; fill a correlation matrix elements using a generic symmetric matrix class implementing operator(i,j); the matrix must be previously allocates with right size (npar * npar). void GetConfidenceIntervals(unsigned int n, unsigned int stride1, unsigned int stride2, const double* x, double* ci, double cl = 0.95, bool norm = true) const. get confidence intervals for an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Fit__FitResult.html:8277,error,error,8277,root/html528/ROOT__Fit__FitResult.html,https://root.cern,https://root.cern/root/html528/ROOT__Fit__FitResult.html,1,['error'],['error']
Availability,"rameters(const RooArgSet&); voidSetParameterPointsToTest(RooAbsData& pointsToTest); virtual voidSetParameters(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); voidSetTestStatSampler(RooStats::TestStatSampler& sampler); virtual voidShowMembers(TMemberInspector&); virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseAdaptiveSampling(bool flag = true). Data Members; private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Double_tfLeftSideFraction; RooStats::ModelConfig&fModel; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); default constructor; fWS = new RooWorkspace();; fOwnsWorkspace = true;; fDataName = """";; fPdfName = """";. ~NeymanConstruction(); default constructor; if(fOwnsWorkspace && fWS) delete fWS;; if(fConfBelt) delete fConfBelt;. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::SetInterval. NeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); NeymanConstruction();. void SetTestStatSampler(RooStats::TestStatSampler& sampler); in addition to interface we also need:; Set the TestStatSampler (eg. ToyMC or FFT, includes choice of TestStatistic). {fTestStatSampler = &sampler;}. void SetLeftSideTailFraction(Double_t leftSideFraction = 0.); fLeftSideTailFraction*fSize defines lower edge of acceptance region.; Unified limits use 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__NeymanConstruction.html:4316,error,error,4316,root/html534/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html534/RooStats__NeymanConstruction.html,1,['error'],['error']
Availability,"rametricFunctionOneDim;  Specialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is a derived class from ROOT::Math::IBaseFunctionOneDim and ROOT::Math::IBaseParam. More...;  ; class  IParametricGradFunctionMultiDimTempl;  Interface (abstract class) for parametric gradient multi-dimensional functions providing in addition to function evaluation with respect to the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IParametricGradFunctionOneDim;  Interface (abstract class) for parametric one-dimensional gradient functions providing in addition to function evaluation with respect the coordinates also the gradient with respect to the parameters, via the method ParameterGradient. More...;  ; class  IRootFinderMethod;  Interface for finding function roots of one-dimensional functions. More...;  ; class  KahanSum;  The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors when adding a sequence of finite-precision floating point numbers. More...;  ; class  KDTree;  ; class  LCGEngine;  ; class  LocalCoordinateSystemTag;  Tag for identifying vectors based on a local coordinate system. More...;  ; class  LorentzRotation;  Lorentz transformation class with the (4D) transformation represented by a 4x4 orthosymplectic matrix. More...;  ; class  LorentzVector;  Class describing a generic LorentzVector in the 4D space-time, using the specified coordinate system for the spatial vector part. More...;  ; class  LSResidualFunc;  LSResidualFunc class description. More...;  ; class  MathMoreLib;  ; class  MatRepStd;  Expression wrapper class for Matrix objects. More...;  ; class  MatRepSym;  MatRepSym Matrix storage representation for a symmetric matrix of dimension NxN This class is a template on the contained type and on the symmetric matrix size, N. More...;  ; class  MatrixMulOp;  Class for Matrix-Matrix multiplication. More...;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math.html:19307,error,errors,19307,doc/master/namespaceROOT_1_1Math.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math.html,2,['error'],['errors']
Availability,"rams, and dc2 is the error on this weight. This is useful, for example, when forming an asymmetry between two histograms from 2 different data sets that need to be normalized to each other in some way. The function calculates the errors assuming Poisson statistics on h1 and h2 (that is, dh = sqrt(h)).; example: assuming 'h1' and 'h2' are already filled; h3 = h1->GetAsymmetry(h2); TH1::GetAsymmetryTH1 * GetAsymmetry(TH1 *h2, Double_t c2=1, Double_t dc2=0)Return a histogram containing the asymmetry of this histogram with h2, where the asymmetry is defined...Definition TH1.cxx:4339; then 'h3' is created and filled with the asymmetry between 'h1' and 'h2'; h1 and h2 are left intact.; Note that it is the user's responsibility to manage the created histogram. The name of the returned histogram will be Asymmetry_nameOfh1-nameOfh2; code proposed by Jason Seely (seely.nosp@m.@mit.nosp@m..edu) and adapted by R.Brun; clone the histograms so top and bottom will have the correct dimensions: Sumw2 just makes sure the errors will be computed properly when we form sums and ratios below. ; Definition at line 4339 of file TH1.cxx. ◆ GetAxisColor(). Color_t TH1::GetAxisColor ; (; Option_t * ; axis = ""X""); const. virtual . Return the number of divisions for ""axis"". ; Definition at line 40 of file Haxis.cxx. ◆ GetAxisLabelStatus(). UInt_t TH1::GetAxisLabelStatus ; (; ); const. protected . Internal function used in TH1::Fill to see which axis is full alphanumeric, i.e. ; can be extended and is alphanumeric ; Definition at line 6675 of file TH1.cxx. ◆ GetBarOffset(). virtual Float_t TH1::GetBarOffset ; (; ); const. inlinevirtual . Definition at line 256 of file TH1.h. ◆ GetBarWidth(). virtual Float_t TH1::GetBarWidth ; (; ); const. inlinevirtual . Definition at line 257 of file TH1.h. ◆ GetBin(). Int_t TH1::GetBin ; (; Int_t ; binx, . Int_t ; biny = 0, . Int_t ; binz = 0 . ); const. virtual . Return Global bin number corresponding to binx,y,z. ; 2-D and 3-D histograms are represented with ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:145863,error,errors,145863,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['error'],['errors']
Availability,"ramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatSampler.h 34109 2010-06-24 15:00:16Z moneta $ » Last generated: 2010-09-23 20:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__TestStatSampler.html:3309,error,error,3309,root/html528/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html528/RooStats__TestStatSampler.html,1,['error'],['error']
Availability,"ramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatSampler.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__TestStatSampler.html:3311,error,error,3311,root/html530/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html530/RooStats__TestStatSampler.html,1,['error'],['error']
Availability,"ramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). void SetTestStatistic(RooStats::TestStatistic* testStatistic); Set the TestStatistic (want the argument to be a function of the data & parameter points. void SetSamplingDistName(const char* name); Set the name of the sampling distribution used for plotting. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: TestStatSampler.h 39391 2011-05-26 09:51:59Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__TestStatSampler.html:3311,error,error,3311,root/html532/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html532/RooStats__TestStatSampler.html,1,['error'],['error']
Availability,"rams{pdf.getParameters(nullptr)};; Also some virtual RooFit functions like RooAbsReal::createIntegral() are returning a different type conditional on ROOFIT_MEMORY_SAFE_INTERFACES. If you are overriding such a function, you need to use the RooFit::OwningPtr return type, which is an alias for std::unique_ptr in memory-safe mode or an alias for a raw pointer otherwise.; RooFit::OwningPtr<RooAbsReal> RooAbsReal::createIntegral(...) const override; {; std::unique_ptr<RooAbsReal> integral;; // Prepare a std::unique_ptr as the return value; ...; // Use the RooFit::makeOwningPtr<T>() helper to translate the; // std::unique_ptr to the actual return type (either std::unique_ptr<T> or T*).; return RooFit::makeOwningPtr<RooAbsReal>(std::move(integral));; }; The biggest application of the memory-safe interfaces is to spot memory leaks in RooFit-based frameworks. If you make sure that your framework compiles both with and without ROOFIT_MEMORY_SAFE_INTERFACES, you can get rid of all memory leaks related to RooFit user error! After making the necessary changes, you can remove the marco definition again to keep backwards compatibility.; Note that the memory-safe interfaces might become the default at some point, so doing this backwards-compatible migration early is strongly encouraged and appreciated.; Removal of some memory-unsafe interfaces. The final bool takeOwnership parameter of the RooAddition and RooStats::HistFactory::PiecewiseInterpolation constructors was removed. This is to avoid situations where ownership is not clear to the compiler. Now, ownership of the input RooAbsArgs is never passed in the constructor. If you want the pass input ownership to the created object, please use addOwnedComponents. If you want to be extra safe, make sure the inputs are in an owning collection and then std::move the collection, so that the ownership is always clear.; Example:; RooArgList sumSet;; sumSet.add(*(new RooRealVar(""var1"", ""var1"", 1.0)));; sumSet.add(*(new RooRealVar(""var2"", ""v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:10933,error,error,10933,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['error'],['error']
Availability,"rance ;  ; double fResult;  last integration result ;  ; unsigned int fSize;  max size of working array (explode with dimension) ;  ; int fStatus;  status of algorithm (error if not zero) ;  . #include <Math/AdaptiveIntegratorMultiDim.h>. Inheritance diagram for ROOT::Math::AdaptiveIntegratorMultiDim:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AdaptiveIntegratorMultiDim() [1/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxpts = 100000, . unsigned int ; size = 0 . ). explicit . Construct given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; The integration will stop when the absolute error is less than the absolute tolerance OR when the relative error is less than the relative tolerance. The absolute tolerance by default is not used (it is equal to zero). The size of working array represents the number of sub-division used for calculating the integral. Higher the dimension, larger sizes are required for getting the same accuracy. The size must be larger than \( (2n + 3) (1 + maxpts/(2^n + 2n(n + 1) + 1))/2) \). For smaller value passed, the minimum allowed will be used ; Definition at line 17 of file AdaptiveIntegratorMultiDim.cxx. ◆ AdaptiveIntegratorMultiDim() [2/2]. ROOT::Math::AdaptiveIntegratorMultiDim::AdaptiveIntegratorMultiDim ; (; const IMultiGenFunction & ; f, . double ; absTol = 0.0, . double ; relTol = 1E-9, . unsigned int ; maxcall = 100000, . unsigned int ; size = 0 . ). explicit . Construct with a reference to the integrand function and given optionally tolerance (absolute and relative), maximum number of function evaluation (maxpts) and size of the working array. ; Definition at line 37 of file AdaptiveIntegratorMultiDim.cxx. ◆ ~AdaptiveIntegratorMultiDim(). ROOT::Math::AdaptiveIntegrat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html:6843,toler,tolerance,6843,doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1AdaptiveIntegratorMultiDim.html,1,['toler'],['tolerance']
Availability,"rance()Definition MinimizerOptions.cxx:92; ROOT::Math::MinimizerOptions::fMaxIterint fMaxItermaximum number of iterationsDefinition MinimizerOptions.h:244; ROOT::Math::MinimizerOptions::ErrorDefdouble ErrorDef() consterror definitionDefinition MinimizerOptions.h:192; ROOT::Math::MinimizerOptions::SetDefaultExtraOptionsstatic void SetDefaultExtraOptions(const IOptions *extraoptions)Set additional minimizer options as pair of (string,value).Definition MinimizerOptions.cxx:79; ROOT::Math::MinimizerOptions::DefaultExtraOptionsstatic IOptions * DefaultExtraOptions()Definition MinimizerOptions.cxx:98; ROOT::Math::MinimizerOptions::fAlgoTypestd::string fAlgoTypeMinimizer algorithmic specification (Migrad, Minimize, ...)Definition MinimizerOptions.h:250; ROOT::Math::MinimizerOptions::SetDefaultMaxIterationsstatic void SetDefaultMaxIterations(int maxiter)Set the maximum number of iterations.Definition MinimizerOptions.cxx:67; ROOT::Math::MinimizerOptions::SetDefaultErrorDefstatic void SetDefaultErrorDef(double up)Set the default level for computing the parameter errors.Definition MinimizerOptions.cxx:51; ROOT::Math::MinimizerOptions::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)Set the default Minimizer type and corresponding algorithms.Definition MinimizerOptions.cxx:43; ROOT::Math::MinimizerOptions::SetDefaultStrategystatic void SetDefaultStrategy(int strat)Set the default strategy.Definition MinimizerOptions.cxx:71; ROOT::Math::MinimizerOptions::SetDefaultPrecisionstatic void SetDefaultPrecision(double prec)Set the default Minimizer precision.Definition MinimizerOptions.cxx:59; ROOT::Math::MinimizerOptions::DefaultMinimizerTypestatic const std::string & DefaultMinimizerType()Definition MinimizerOptions.cxx:100; ROOT::Math::MinimizerOptions::fTolerancedouble fToleranceminimize tolerance to reach solutionDefinition MinimizerOptions.h:247; ROOT::Math::MinimizerOptions::SetExtraOptionsvoid SetExtraOptions(const IOptions &opt)se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MinimizerOptions_8h_source.html:15592,error,errors,15592,doc/master/MinimizerOptions_8h_source.html,https://root.cern,https://root.cern/doc/master/MinimizerOptions_8h_source.html,1,['error'],['errors']
Availability,"ranch is prefixed to the sub-branches'; 8508/// name (by adding a dot ('.') at the end of the Branch creation and use the; 8509/// corresponding bname.; 8510///; 8511/// I.e If your Tree has been created in split mode with a parent branch ""parent.""; 8512/// (note the trailing dot).; 8513/// ~~~ {.cpp}; 8514/// T.SetBranchStatus(""parent"",1);; 8515/// ~~~; 8516/// will not activate the sub-branches of ""parent"". You should do:; 8517/// ~~~ {.cpp}; 8518/// T.SetBranchStatus(""parent*"",1);; 8519/// ~~~; 8520/// Without the trailing dot in the branch creation you have no choice but to; 8521/// call SetBranchStatus explicitly for each of the sub branches.; 8522///; 8523/// An alternative to this function is to read directly and only; 8524/// the interesting branches. Example:; 8525/// ~~~ {.cpp}; 8526/// TBranch *brc = T.GetBranch(""c"");; 8527/// TBranch *bre = T.GetBranch(""e"");; 8528/// brc->GetEntry(i);; 8529/// bre->GetEntry(i);; 8530/// ~~~; 8531/// If found is not 0, the number of branch(es) found matching the regular; 8532/// expression is returned in *found AND the error message 'unknown branch'; 8533/// is suppressed.; 8534 ; 8535void TTree::SetBranchStatus(const char* bname, bool status, UInt_t* found); 8536{; 8537 // We already have been visited while recursively looking; 8538 // through the friends tree, let return; 8539 if (kSetBranchStatus & fFriendLockStatus) {; 8540 return;; 8541 }; 8542 ; 8543 if (!bname || !*bname) {; 8544 Error(""SetBranchStatus"", ""Input regexp is an empty string: no match against branch names will be attempted."");; 8545 return;; 8546 }; 8547 ; 8548 TBranch *branch, *bcount, *bson;; 8549 TLeaf *leaf, *leafcount;; 8550 ; 8551 Int_t i,j;; 8552 Int_t nleaves = fLeaves.GetEntriesFast();; 8553 TRegexp re(bname,true);; 8554 Int_t nb = 0;; 8555 ; 8556 // first pass, loop on all branches; 8557 // for leafcount branches activate/deactivate in function of status; 8558 for (i=0;i<nleaves;i++) {; 8559 leaf = (TLeaf*)fLeaves.UncheckedAt(i);; 8560 branch =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:333245,error,error,333245,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['error'],['error']
Availability,"ranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEfficiency() const; Double_tGetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TTree*GetOwner() const; Long64_tTFileCacheRead::GetPrefetchedBlocks() const; virtual TFilePrefetch*TFileCacheRead::GetPrefetchObj(); virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:10239,error,error,10239,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,1,['error'],['error']
Availability,"ranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tGetEfficiency() const; Double_tGetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tGetLearnEntries(); virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TTree*GetOwner() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTFileCacheRead::GetUnzipBuffer(char**, Long64_t, Int_t, Bool_t*); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCache.html:10239,error,error,10239,root/html528/TTreeCache.html,https://root.cern,https://root.cern/root/html528/TTreeCache.html,1,['error'],['error']
Availability,"ranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTTreeCache::GetEfficiency() const; Double_tTTreeCache::GetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tTTreeCache::GetLearnEntries(); virtual const char*TObject::GetName() const; Int_tGetNFound(); Int_tGetNMissed(); Int_tGetNUnzip(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TTree*TTreeCache::GetOwner() const; static TTreeCacheUnzip::EParUnzipModeGetParallelUnzip(); Int_tGetRecordHeader(char* buf, Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeCacheUnzip.html:2409,error,error,2409,root/html528/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html528/TTreeCacheUnzip.html,1,['error'],['error']
Availability,"ranch(const char* branch, Bool_t subbranches = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual Bool_tFillBuffer(); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Int_tTFileCacheRead::GetBufferSize() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Double_tTTreeCache::GetEfficiency() const; Double_tTTreeCache::GetEfficiencyRel() const; virtual const char*TObject::GetIconName() const; static Int_tTTreeCache::GetLearnEntries(); virtual const char*TObject::GetName() const; Int_tGetNFound(); Int_tGetNMissed(); Int_tGetNUnzip(); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; TTree*TTreeCache::GetOwner() const; static TTreeCacheUnzip::EParUnzipModeGetParallelUnzip(); Long64_tTFileCacheRead::GetPrefetchedB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCacheUnzip.html:2409,error,error,2409,root/html530/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html530/TTreeCacheUnzip.html,1,['error'],['error']
Availability,"ranches ; RooIntegralMorph::MorphCacheElem*_cacheCurrent morph cache element in use; Bool_t_cacheAlphaIf true, both (x,alpha) are cached; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:45387,error,errors,45387,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,1,['error'],['errors']
Availability,"ranches ; RooIntegralMorph::MorphCacheElem*_cacheCurrent morph cache element in use; Bool_t_cacheAlphaIf true, both (x,alpha) are cached; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooObjCacheManagerRooAbsCachedPdf::_cacheMgrThe cache manager ; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Int_tRooAbsCachedPdf::_ipOrderInterpolation order for cache histograms ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooIntegralMorph.html:41764,error,errors,41764,root/html526/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html526/RooIntegralMorph.html,4,['error'],['errors']
Availability,"ranches, like the number of particles, the X position of each particle PosX[nparticles], and the absolute momentum of each particle Momentum[nparticles].; Now quit and restart ROOT (to make sure everybody starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. Adding a Data Member; Just like for the sum of event sizes, you need to add a data member to the class. As in Histogramming, we want to histogram the particles' fPosX; the type of the data member should thus be TH1F*. Don't forget to initialize the histogram pointer to 0 in the constructor, again just like for the event size sum.; Creating the Histogram; You then create the object with new TH1F(""hPosX"", ""Position in X"", 20, -5, 5);; check the documentation of TSelector to learn in which of your selector's functions to create the histogram object.; Associate error bars with this histogram (see TH1F::Sumw2()); Filling the Histogram; Like in the Histogramming chapter, fill the histogram with the value of fPosX from the tree for all particles with a momentum > 40.; Just like before, the per-event analysis happens in Process(). Here again, you need to get the tree entry before you can access the corresponding data members of your selector.; Fitting and Drawing the Histogram; Here again, once the histogram is filled, fit it with a pol2 using TH1::Fit(""pol2"").; See the documentation of TSelector on where to do the fitting, i.e. which function of your selector gets called after the whole tree has been processed. You should first fit and then draw, to see the fit together with the histogram.; At the end, you should get the same result than the figure 6 in Histogramming; If, for any reason, you don't manage to get it working, you can download the working selector file here: FullEventDataSelector.C (or; wget http://root-mirror.github.io/training/intro/FullEventDataSelector.C); Note: You will have to use it that way:; EventTree->Process(""FullEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:3206,error,error,3206,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,1,['error'],['error']
Availability,"random numbers"",""f"");  ; gr Draw (""P"");  ; f1 Draw (""same"");  ; h1 Draw ();  ; h1 FillRandom (""gaus"", 30000);  ;  for (Int_t i=0;i< n;i++);  ; h1 SetFillColor (kGreen);  ; h1 SetFillStyle (3003);  ; leg SetHeader (""The Legend Title"");  ; f1 SetLineColor (kBlue);  ; gr SetLineColor (kRed);  ; gr SetLineWidth (2);  ; f1 SetLineWidth (4);  ; gr SetMarkerColor (7);  ; gr SetMarkerSize (1.3);  ; gr SetMarkerStyle (21);  ; gr SetName (""gr"");  ; gStyle SetOptStat (0);  . Variables; return c1;  ; Double_t ex [n];  ; Double_t ey [n];  ; TF1 * f1 =new TF1(""f1"",""1000*TMath::Abs(sin(x)/x)"",-10,10);  ; TGraphErrors * gr = new TGraphErrors(n,x,y,ex,ey);  ; TH1F * h1 = new TH1F(""h1"",""TLegend Example"",200,-10,10);  ;  leg = new TLegend(0.1,0.7,0.48,0.9);  ; const Int_t n = 20;  ; Double_t x [n];  ; Double_t y [n];  . Function Documentation. ◆ AddEntry() [1/3]. leg AddEntry ; (; ""f1"" ; , . ""Function abs(#frac{sin(x)}{x})"" ; , . ""l"" ;  . ). ◆ AddEntry() [2/3]. leg AddEntry ; (; ""gr"" ; , . ""Graph with error bars"" ; , . ""lep"" ;  . ). ◆ AddEntry() [3/3]. leg AddEntry ; (; h1 ; , . ""Histogram filled with random numbers"" ; , . ""f"" ;  . ). ◆ Draw() [1/3]. gr Draw ; (; ""P"" ; ). ◆ Draw() [2/3]. f1 Draw ; (; ""same"" ; ). ◆ Draw() [3/3]. h1 Draw ; (; ). ◆ FillRandom(). h1 FillRandom ; (; ""gaus"" ; , . 30000 ;  . ). ◆ for(). for ; (; ). Definition at line 18 of file legend1.C. ◆ SetFillColor(). h1 SetFillColor ; (; kGreen ; ). ◆ SetFillStyle(). h1 SetFillStyle ; (; 3003 ; ). ◆ SetHeader(). leg SetHeader ; (; ""The Legend Title"" ; ). ◆ SetLineColor() [1/2]. f1 SetLineColor ; (; kBlue ; ). ◆ SetLineColor() [2/2]. gr SetLineColor ; (; kRed ; ). ◆ SetLineWidth() [1/2]. gr SetLineWidth ; (; 2 ; ). ◆ SetLineWidth() [2/2]. f1 SetLineWidth ; (; 4 ; ). ◆ SetMarkerColor(). gr SetMarkerColor ; (; 7 ; ). ◆ SetMarkerSize(). gr SetMarkerSize ; (; 1. ; 3). ◆ SetMarkerStyle(). gr SetMarkerStyle ; (; 21 ; ). ◆ SetName(). gr SetName ; (; ""gr"" ; ). ◆ SetOptStat(). gStyle SetOptStat ; (; 0 ; ). Variable Documentation",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/legend1_8C.html:1353,error,error,1353,doc/master/legend1_8C.html,https://root.cern,https://root.cern/doc/master/legend1_8C.html,2,['error'],['error']
Availability,"range in the coordinates it supports multiple range in a coordinate.Definition DataRange.h:35; ROOT::Fit::FitResultclass containing the result of the fit and all the related information (fitted parameter values,...Definition FitResult.h:47; ROOT::Fit::SparseDataSparseData class representing the data of a THNSparse histogram The data needs to be converted to a B...Definition SparseData.h:35; ROOT::Fit::UnBinDataClass describing the un-binned data sets (just x coordinates values) of any dimensions.Definition UnBinData.h:46; ROOT::Math::MinimizerOptionsMinimizer options.Definition MinimizerOptions.h:40; TF11-Dim function classDefinition TF1.h:233; TF2A 2-Dim function with parameters.Definition TF2.h:29; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TGraph2DGraphics object made of three arrays X, Y and Z with the same number of points each.Definition TGraph2D.h:41; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; THnBaseMultidimensional histogram base.Definition THnBase.h:43; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; grTGraphErrors * grDefinition legend1.C:25; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; MathNamespace for new Math classes and functions.; ROOT::Fit::FitObjectTFitResultPtr FitObject(TH1 *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)fitting function for a TH1 (called from TH1::Fit)Definition HFitImpl.cxx:972; ROOT::Fit::Chisquaredouble Chisquare(const TH1 &h1, TF1 &f1, bool useRange, EChisquareType type)compute the chi2 value for an histogram given a function (see TH1::Chisquare for the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8h_source.html:9328,error,error,9328,doc/master/HFitInterface_8h_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8h_source.html,1,['error'],['error']
Availability,"ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) only plotting range 'fit_nll_extmodel_modelData_RIGHT'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(extmodel) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_extmodel_modelData_LEFT,fit_nll_extmodel_modelData_RIGHT'; [#0] WARNING:InputArguments -- The parameter 'width' with range [-inf, inf] of the RooGaussian 'sig' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Minimization -- p.d.f. provides expected number of events, including extended term in likelihood.; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_modelsum_modelData_LEFT' created with bounds [10,20]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_modelsum_modelData_RIGHT' created with bounds [60,100]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(modelsum) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_modelsum_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: -19036.9, estimated distance to minimum: 5.53181e-08; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; Nbkg 9.9878e+03 +/- 1.50e+02; Nsig 1.2239e-03 +/- 1.97e+03; alpha -3.9975e-02 +/- 5.60e-04; ; [#1] INFO:Plotting -- RooAbsPdf::plotOn(modelsum) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explici",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html:21786,error,error,21786,doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,https://root.cern,https://root.cern/doc/master/rf204b__extendedLikelihood__rangedFit_8C.html,2,['error'],['error']
Availability,"ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Double_tfAdaBoostBetaADA boost parameter, default is 1 ; vector<TH1*>fBTrainBgdMVAHist; vector<TH1*>fBTrainSigMVAHist; Double_tfBaggedSampleFractionrel.Size of bagged sample; UInt_tfBoostNumNumber of times the classifier is boosted; TStringfBoostTypestring specifying the boost type ; Double_tfBoostWeightthe weight used to boost the next classifier ; TStringfBoostedMethodNamedetails of the boosted classifier; TStringfBoostedMethodOptionsoptions; TStringfBoostedMethodTitletitle ; TMVA::DataSetManager*fDataSetManagerDSMTEST; Bool_tfDetailedMonitoringproduce detailed monitoring histograms (boost-wise); Bool_tfHistoricBoolOptionhistoric variable, only needed for ""CompatibilityOptions"" ; TStringfHistoricOptionhistoric variable, only needed for ""CompatibilityOptions"" ; vector<Float_t>*fMVAvaluesmva values for the last trained method; Double_tfMethodErrorestimation of the level error of the classifier ; Bool_tfMonitorBoostedMethodmonitor the MVA response of every classifier; TTree*fMonitorTreetree to monitor values during the boosting ; Double_tfOverlap_integral; Double_tfROC_trainingroc integral of last trained method (on training sample); UInt_tfRandomSeedseed for random number generator used for bagging; vector<TH1*>fTestBgdMVAHist; vector<TH1*>fTestSigMVAHist; vector<TH1*>fTrainBgdMVAHist; vector<TH1*>fTrainSigMVAHist; TStringfTransformStringmin and max values for the classifier response . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodBoost(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = """", TDirectory* theTargetDir = NULL). MethodBoost(TMVA::DataSetInfo& dsi, const TString& theWeightFile, TDirectory* theTargetDir = NULL). ~MethodBoost( void ); d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBoost.html:18628,error,error,18628,root/html534/TMVA__MethodBoost.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBoost.html,1,['error'],['error']
Availability,"rans(); virtual voidTEveElement::DestroyOrWarn(); voidTEveElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); virtual voidExpandIntoListTrees(); virtual voidExpandIntoListTreesRecursively(); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls = 0); virtual TEveElement::sLTI_iTEveEl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoNode.html:4373,error,error,4373,root/html528/TEveGeoNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoNode.html,6,['error'],['error']
Availability,"rans(); virtual voidTEveElement::DestroyOrWarn(); voidTEveElement::DisableListElements(Bool_t rnr_self = kFALSE, Bool_t rnr_children = kFALSE)MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidTEveElement::DumpSourceObject() constMENU ; virtual voidTEveElement::ElementChanged(Bool_t update_scenes = kTRUE, Bool_t redraw = kFALSE); voidTEveElement::EnableListElements(Bool_t rnr_self = kTRUE, Bool_t rnr_children = kTRUE)MENU ; TEveElement::List_iTEveElement::EndChildren(); TEveElement::List_ciTEveElement::EndChildren() const; TEveElement::List_iTEveElement::EndParents(); TEveElement::List_ciTEveElement::EndParents() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTEveGeoNode::ExpandIntoListTree(TGListTree* ltree, TGListTreeItem* parent); virtual voidTEveGeoNode::ExpandIntoListTrees(); virtual voidTEveGeoNode::ExpandIntoListTreesRecursively(); voidTEveElement::ExportSourceObjectToCINT(char* var_name) constMENU ; virtual voidTEveElement::ExportToCINT(char* var_name)MENU ; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTEveElement::FillImpliedSelectedSet(TEveElement::Set_t& impSelSet); TEveElement*TEveElement::FindChild(const TString& name, const TClass* cls = 0); TEveElement*TEveElement::FindChild(TPRegexp& regexp, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, const TString& name, const TClass* cls = 0); Int_tTEveElement::FindChildren(TEveElement::List_t& matches, TPRegexp& regexp, const TClass* cls ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoTopNode.html:4674,error,error,4674,root/html528/TEveGeoTopNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoTopNode.html,6,['error'],['error']
Availability,"ransformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearization of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. Function Members (Methods); public:. TMinuit(); TMinuit(Int_t maxpar); virtual~TMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:13637,error,errors,13637,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,4,['error'],['errors']
Availability,"ransformation; between the internal parameter values seen by Minuit (which are unbounded); and the external parameter values seen by the user in FCN (which remain; inside the desired limits). Therefore the internal error matrix kept by; Minuit must be transformed to an external error matrix for the user.; This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J),; where DEXDIN is the derivative of the external value with respect to the; internal value at the minimum. This is a linearization of the; transformation, and is the only way to produce an error matrix in external; coordinates meaningful to the user. But when reporting the individual; parabolic errors for limited parameters, Minuit can do a little better, so; it does. In this case, Minuit actually transforms the ends of the; internal ""error bar"" to external coordinates and reports the length of; this transformed interval. Strictly speaking, it is now asymmetric, but; since the origin of the asymmetry is only an artificial transformation it; does not make much sense, so the transformed errors are symmetrized. The result of all the above is that for parameters with limits, the error; reported by Minuit is not exactly equal to the square root of the diagonal; element of the error matrix. The difference is a measure of how much the; limits deform the problem. If possible, it is suggested not to use limits; on parameters, and the problem goes away. If for some reason limits are; necessary, and you are sensitive to the difference between the two ways of; calculating the errors, it is suggested to use Minos errors which take; into account the non-linearities much more precisely. Function Members (Methods); public:. virtual~TMinuit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidBuildArrays(Int_t maxpar = 15); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuit.html:13635,error,errors,13635,root/html602/TMinuit.html,https://root.cern,https://root.cern/root/html602/TMinuit.html,2,['error'],['errors']
Availability,"ransient! Transient boolean attributes (not copied in ctor); UChar_tRooAbsReal::_byteValue! Transient cache for byte values from tree branches ; static Bool_tRooAbsReal::_cacheCheckIf true, always validate contents of clean which outcome of evaluate(); deque<RooAbsCache*>RooAbsArg::_cacheListlist of caches; RooRefCountListRooAbsArg::_clientListlist of client objects; RooRefCountListRooAbsArg::_clientListShapesubset of clients that requested shape dirty flag propagation; RooRefCountListRooAbsArg::_clientListValuesubset of clients that requested value dirty flag propagation; TIterator*RooAbsArg::_clientShapeIter! Iterator over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooNumConvolution*_conv! Actual convolution calculation; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Int_tRooAbsPdf::_errorCountNumber of errors remaining to print; static Bool_tRooAbsPdf::_evalError; static Bool_tRooAbsArg::_flipACleanStatic flag controlling flipping status of all AClean nodes to ADirty ;; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! do not persist; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Int_tRooAbsPdf::_minDimNormValueCacheMinimum number of numerically integrated dimensions to activate normalization value caching; static Int_tRooPrintable::_nameLength; Int_tRooAbsPdf::_negCountNumber of negative probablities remaining to print; RooAbsReal*RooAbsPdf::_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:39044,error,errors,39044,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,4,['error'],['errors']
Availability,"raph2D.; Definition at line 65 of file TGraph2DAsymmErrors.h. ◆ GetXmaxE(). Double_t TGraph2DAsymmErrors::GetXmaxE ; (; ); const. overridevirtual . Returns the X maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 349 of file TGraph2DAsymmErrors.cxx. ◆ GetXminE(). Double_t TGraph2DAsymmErrors::GetXminE ; (; ); const. overridevirtual . Returns the X minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 360 of file TGraph2DAsymmErrors.cxx. ◆ GetYmaxE(). Double_t TGraph2DAsymmErrors::GetYmaxE ; (; ); const. overridevirtual . Returns the Y maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 371 of file TGraph2DAsymmErrors.cxx. ◆ GetYminE(). Double_t TGraph2DAsymmErrors::GetYminE ; (; ); const. overridevirtual . Returns the Y minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 382 of file TGraph2DAsymmErrors.cxx. ◆ GetZmaxE(). Double_t TGraph2DAsymmErrors::GetZmaxE ; (; ); const. overridevirtual . Returns the Z maximum with errors. ; Reimplemented from TGraph2D.; Definition at line 393 of file TGraph2DAsymmErrors.cxx. ◆ GetZminE(). Double_t TGraph2DAsymmErrors::GetZminE ; (; ); const. overridevirtual . Returns the Z minimum with errors. ; Reimplemented from TGraph2D.; Definition at line 404 of file TGraph2DAsymmErrors.cxx. ◆ IsA(). TClass * TGraph2DAsymmErrors::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGraph2D.; Definition at line 80 of file TGraph2DAsymmErrors.h. ◆ operator=(). TGraph2DAsymmErrors & TGraph2DAsymmErrors::operator= ; (; const TGraph2DAsymmErrors & ; g). Assignment operator Copy everything except list of functions. ; Definition at line 197 of file TGraph2DAsymmErrors.cxx. ◆ Print(). void TGraph2DAsymmErrors::Print ; (; Option_t * ; chopt = """"); const. overridevirtual . Print 2D graph and errors values. ; Reimplemented from TGraph2D.; Definition at line 415 of file TGraph2DAsymmErrors.cxx. ◆ RemovePoint(). Int_t TGraph2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:35935,error,errors,35935,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,1,['error'],['errors']
Availability,"raph2DFitChisquare. ;  ; Double_t * GetEX () const override;  ; Double_t * GetEY () const override;  ; Double_t * GetEZ () const override;  ; Double_t GetXmaxE () const override;  Returns the X maximum with errors. ;  ; Double_t GetXminE () const override;  Returns the X minimum with errors. ;  ; Double_t GetYmaxE () const override;  Returns the Y maximum with errors. ;  ; Double_t GetYminE () const override;  Returns the Y minimum with errors. ;  ; Double_t GetZmaxE () const override;  Returns the Z maximum with errors. ;  ; Double_t GetZminE () const override;  Returns the Z minimum with errors. ;  ; TClass * IsA () const override;  ; TGraph2DErrors & operator= (const TGraph2DErrors &);  Assignment operator Copy everything except list of functions. ;  ; void Print (Option_t *chopt="""") const override;  Print 2D graph and errors values. ;  ; Int_t RemovePoint (Int_t ipoint);  Deletes point number ipoint. ;  ; void Scale (Double_t c1=1., Option_t *option=""z"") override;  Multiply the values and errors of a TGraph2DErrors by a constant c1. ;  ; void Set (Int_t n) override;  Set number of points in the 2D graph. ;  ; void SetPoint (Int_t i, Double_t x, Double_t y, Double_t z) override;  Set x, y and z values for point number i. ;  ; virtual void SetPointError (Int_t i, Double_t ex, Double_t ey, Double_t ez);  Set ex, ey and ez values for point number i. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph2DErrors. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGraph2D;  TGraph2D ();  Graph2D default constructor. ;  ;  TGraph2D (const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""");  Graph2D constructor reading input from filename filename is assumed to contain at least three columns of numbers. ;  ;  TGraph2D (const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z);  Graph2D constructor with name, title and three vectors of doubles as ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors.html:4843,error,errors,4843,doc/master/classTGraph2DErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors.html,1,['error'],['errors']
Availability,"raphErrors or TGraphAsymErrors do not consider errors in the coordinate; = ""ROB"" In case of linear fitting, compute the LTS regression; coefficients (robust (resistant) regression), using; the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using; 0.x as a fraction of good points; = ""S"" The result of the fit is returned in the TFitResultPtr; (see below Access to the Fit Result). When the fit is drawn (by default), the parameter goption may be used; to specify a list of graphics options. See TGraphPainter for a complete; list of these options. In order to use the Range option, one must first create a function; with the expression to be fitted. For example, if your graph; has a defined range between -4 and 4 and you want to fit a gaussian; only in the interval 1 to 3, you can do:; TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");. Who is calling this function:. Note that this function is called when calling TGraphErrors::Fit; or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit; See the discussion below on error calulation. Linear fitting:. When the fitting function is linear (contains the ""++"" sign) or the fitting; function is a polynomial, a linear fitter is initialised.; To create a linear function, use the following syntax: linear parts; separated by ""++"" sign.; Example: to fit the parameters of ""[0]*x + [1]*sin(x)"", create a; TF1 *f1=new TF1(""f1"", ""x++sin(x)"", xmin, xmax);; For such a TF1 you don't have to set the initial conditions.; Going via the linear fitter for functions, linear in parameters, gives a; considerable advantage in speed. Setting initial conditions:. Parameters must be initialized before invoking the Fit function.; The setting of the parameter initial values is automatic for the; predefined functions : poln, expo, gaus, landau. One can however disable; this automatic computation by specifying the option ""B"".; You can specify boundary limits for some or all parameters via; f1->SetParLimits(p_number, pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:24504,error,error,24504,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,3,['error'],['error']
Availability,"raphErrors::fEYDouble_t * fEY[fNpoints] array of Y errorsDefinition TGraphErrors.h:30; TGraphErrors::~TGraphErrors~TGraphErrors() overrideTGraphErrors default destructor.Definition TGraphErrors.cxx:368; TGraphErrors::Classstatic TClass * Class(); TGraphErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphErrors by a constant c1.Definition TGraphErrors.cxx:752; TGraphErrors::CalculateScanfFieldsstatic Int_t CalculateScanfFields(const char *fmt)Calculate scan fields.Definition TGraphErrors.cxx:449; TGraphErrors::Streamervoid Streamer(TBuffer &) overrideStream an object of class TGraphErrors.Definition TGraphErrors.cxx:817; TGraphErrors::FillZerovoid FillZero(Int_t begin, Int_t end, Bool_t from_ctor=kTRUE) overrideSet zero values for point arrays in the range [begin, end].Definition TGraphErrors.cxx:598; TGraphErrors::AddPointErrorvirtual void AddPointError(Double_t x, Double_t y, Double_t ex=0., Double_t ey=0.)Add a point with errorbars to the graph.Definition TGraphErrors.cxx:377; TGraphErrors::fEXDouble_t * fEX[fNpoints] array of X errorsDefinition TGraphErrors.h:29; TGraphErrors::Printvoid Print(Option_t *chopt="""") const overridePrint graph and errors values.Definition TGraphErrors.cxx:711; TGraphErrors::SetPointErrorvirtual void SetPointError(Double_t ex, Double_t ey)Set ex and ey values for point pointed by the mouse.Definition TGraphErrors.cxx:769; TGraphErrors::DoMergeBool_t DoMerge(const TGraph *g) overrideProtected function to perform the merge operation of a graph with errors.Definition TGraphErrors.cxx:573; TGraphErrors::GetEYDouble_t * GetEY() const overrideDefinition TGraphErrors.h:70; TGraphErrors::SwapPointsvoid SwapPoints(Int_t pos1, Int_t pos2) overrideSwap points.Definition TGraphErrors.cxx:856; TGraphErrors::ApplyXvirtual void ApplyX(TF1 *f)Apply function to all the data points .Definition TGraphErrors.cxx:426; TGraphErrors::GetErrorXhighDouble_t GetErrorXhigh(Int_t bin) const overrideIt retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphErrors_8cxx_source.html:33821,error,errorbars,33821,doc/master/TGraphErrors_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphErrors_8cxx_source.html,1,['error'],['errorbars']
Availability,"raphMultiErrors.h:38; TGraphMultiErrors::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TGraphMultiErrors::SetPointEXvirtual void SetPointEX(Int_t i, Double_t exL, Double_t exH)Set ex values for point i.Definition TGraphMultiErrors.cxx:1844; TGraphMultiErrors::SetPointEYlowvirtual void SetPointEYlow(Int_t i, Int_t ne, const Double_t *eyL)Set eyL values for point i.Definition TGraphMultiErrors.cxx:1894; TGraphMultiErrors::Scalevoid Scale(Double_t c1=1., Option_t *option=""y"") overrideMultiply the values and errors of a TGraphMultiErrors by a constant c1.Definition TGraphMultiErrors.cxx:1766; TGraphMultiErrors::SetLineColorAlphavirtual void SetLineColorAlpha(Int_t e, Color_t lcolor, Float_t lalpha)Set Line Color and Alpha of error e (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2084; TGraphMultiErrors::GetEXlowDouble_t * GetEXlow() const overrideDefinition TGraphMultiErrors.h:141; TGraphMultiErrors::CalcYErrorsSumvoid CalcYErrorsSum() constRecalculates the summed y error arrays.Definition TGraphMultiErrors.cxx:822; TGraphMultiErrors::~TGraphMultiErrors~TGraphMultiErrors() overrideTGraphMultiErrors default destructor.Definition TGraphMultiErrors.cxx:697; TGraphMultiErrors::SetAttLinevirtual void SetAttLine(Int_t e, TAttLine *tal)Set TAttLine parameters of error e by copying from another TAttLine (-1 = Global and x errors).Definition TGraphMultiErrors.cxx:2029; TGraphMultiErrors::fEyHSumDouble_t * fEyHSum! Array of summed Y high errors for fittingDefinition TGraphMultiErrors.h:40; TGraphMultiErrors::GetEYlowDouble_t * GetEYlow() const overrideGet all low errors on y coordinates as an array summed according to fSumErrorsMode.Definition TGraphMultiErrors.cxx:1577; TGraphMultiErrors::DeleteYErrorvirtual void DeleteYError(Int_t e)Deletes the y error with the index e.Definition TGraphMultiErrors.cxx:1422; TGraphMultiErrors::Applyvoid Apply(TF1 *f) overrideApply a function to all data points .Definition TGraphMulti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html:21939,error,error,21939,doc/master/TGraphMultiErrors_8h_source.html,https://root.cern,https://root.cern/doc/master/TGraphMultiErrors_8h_source.html,1,['error'],['error']
Availability,"raphNode* n2); voidAddNode(TGraphNode* node); TGraphNode*AddNode(const char* name, const char* title = """"); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidDumpAsDotFile(const char* filename); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*GetListOfEdges() const; TList*GetListOfNodes() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphStruct.html:3622,error,error,3622,root/html528/TGraphStruct.html,https://root.cern,https://root.cern/root/html528/TGraphStruct.html,6,['error'],['error']
Availability,"raphPainter::PaintGraphMultiErrors ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphMultiErrors with its current attributes. ; Definition at line 2720 of file TGraphPainter.cxx. ◆ PaintGraphPolar(). void TGraphPainter::PaintGraphPolar ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this TGraphPolar with its current attributes. ; Definition at line 3789 of file TGraphPainter.cxx. ◆ PaintGraphQQ(). void TGraphPainter::PaintGraphQQ ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint this graphQQ. No options for the time being. ; Definition at line 4084 of file TGraphPainter.cxx. ◆ PaintGraphReverse(). void TGraphPainter::PaintGraphReverse ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint theGraph reverting values along X and/or Y axis. a new graph is created. ; Definition at line 4144 of file TGraphPainter.cxx. ◆ PaintGraphSimple(). void TGraphPainter::PaintGraphSimple ; (; TGraph * ; theGraph, . Option_t * ; option . ). Paint a simple graph, without errors bars. ; Definition at line 4584 of file TGraphPainter.cxx. ◆ PaintHelper(). void TGraphPainter::PaintHelper ; (; TGraph * ; theGraph, . Option_t * ; option . ). overridevirtual . Paint a any kind of TGraph. ; Implements TVirtualGraphPainter.; Definition at line 1211 of file TGraphPainter.cxx. ◆ PaintHighlightPoint(). void TGraphPainter::PaintHighlightPoint ; (; TGraph * ; theGraph, . Option_t * ; option . ). virtual . Paint highlight point as TMarker object (open circle) ; Definition at line 1165 of file TGraphPainter.cxx. ◆ PaintPolyLineHatches(). void TGraphPainter::PaintPolyLineHatches ; (; TGraph * ; theGraph, . Int_t ; n, . const Double_t * ; x, . const Double_t * ; y . ). Paint a polyline with hatches on one side showing an exclusion zone. ; x and y are the vectors holding the polyline and n the number of points in the polyline and w the width of the hatches. w can be negative. This method is not meant to be used directly. It is called automatically according to t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphPainter.html:48675,error,errors,48675,doc/master/classTGraphPainter.html,https://root.cern,https://root.cern/doc/master/classTGraphPainter.html,1,['error'],['errors']
Availability,"raphicsLibs(); Bool_tTApplication::NoLogoOpt() const; Bool_tTApplication::NoLogOpt() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; virtual voidTApplication::Open(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Long_tTApplication::ProcessFile(const char* file, Int_t* error = 0, Bool_t keep = kFALSE); virtual Long_tProcessLine(const char* line, Bool_t = kFALSE, Int_t* error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); Int_tSendFile(const char* file, Int_t opt = kAscii, const char* rfile = 0); Int_tSendObject(const TObject* obj); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationRemote.html:8038,error,error,8038,root/html526/TApplicationRemote.html,https://root.cern,https://root.cern/root/html526/TApplicationRemote.html,2,['error'],['error']
Availability,"rary maps. Entries for the loaded; shared libraries are unloaded first. This can be useful after reseting; the dynamic path through TSystem::SetDynamicPath(); In case of error -1 is returned, 0 otherwise. Int_t ReloadAllSharedLibraryMaps(); Reload the library map entries coming from all the loaded shared libraries,; after first unloading the current ones.; In case of error -1 is returned, 0 otherwise. Int_t UnloadAllSharedLibraryMaps(); Unload the library map entries coming from all the loaded shared libraries.; Returns 0 if successful. Int_t UnloadLibraryMap(const char* library); Unload library map entries coming from the specified library.; Returns -1 in case no entries for the specified library were found,; 0 otherwise. Int_t SetClassSharedLibs(const char* cls, const char* libs); Register the autoloading information for a class.; libs is a space separated list of libraries. Int_t AutoLoad(const char* classname); Load library containing the specified class. Returns 0 in case of error; and 1 in case if success. Int_t AutoLoadCallback(const char* cls, const char* lib); Load library containing specified class. Returns 0 in case of error; and 1 in case if success. void * FindSpecialObject(const char* name, Cint::G__ClassInfo* type, void** prevObj, void** assocPtr); Static function called by CINT when it finds an un-indentified object.; This function tries to find the UO in the ROOT files, directories, etc.; This functions has been registered by the TCint ctor. void UpdateClassInfo(char* name, Long_t tagnum); Static function called by CINT when it changes the tagnum for; a class (e.g. after re-executing the setup function). In such; cases we have to update the tagnum in the G__ClassInfo used by; the TClass for class ""item"". void UpdateClassInfoWork(const char* name, Long_t tagnum); This does the actual work of UpdateClassInfo. void UpdateAllCanvases(); Update all canvases at end the terminal input command. const char* GetSharedLibs(); Return the list of shared librarie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:30351,error,error,30351,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['error'],['error']
Availability,"rat < 1) {; 5339 if (fISW[4] >= 0) {; 5340 Printf("" MIGRAD FAILS WITH STRATEGY=0. WILL TRY WITH STRATEGY=1."");; 5341 }; 5342 fIstrat = 1;; 5343 }; 5344 goto L1;; 5345// fails to converge; 5346L230:; 5347 if (iswtr >= 0) {; 5348 Printf("" MIGRAD TERMINATED WITHOUT CONVERGENCE."");; 5349 }; 5350 if (fISW[1] == 3) fISW[1] = 1;; 5351 fISW[3] = -1;; 5352 goto L400;; 5353// apparent convergence; 5354L300:; 5355 if (iswtr >= 0) {; 5356 Printf("" MIGRAD MINIMIZATION HAS CONVERGED."");; 5357 }; 5358 if (fItaur == 0) {; 5359 if (fIstrat >= 2 || (fIstrat == 1 && fISW[1] < 3)) {; 5360 if (fISW[4] >= 0) {; 5361 Printf("" MIGRAD WILL VERIFY CONVERGENCE AND ERROR MATRIX."");; 5362 }; 5363 mnhess();; 5364 mnwerr();; 5365 npsdf = 0;; 5366 if (fEDM > rhotol) goto L10;; 5367 }; 5368 }; 5369 fCstatu = ""CONVERGED "";; 5370 fISW[3] = 1;; 5371// come here in any case; 5372L400:; 5373 fCfrom = ""MIGRAD "";; 5374 fNfcnfr = nfcnmg;; 5375 mninex(fX);; 5376 mnwerr();; 5377 if (iswtr >= 0) mnprin(3, fAmin);; 5378 if (iswtr >= 1) mnmatu(1);; 5379}; 5380 ; 5381////////////////////////////////////////////////////////////////////////////////; 5382/// Performs a MINOS error analysis; 5383///; 5384/// Performs a MINOS error analysis on those parameters for; 5385/// which it is requested on the MINOS command by calling; 5386/// MNMNOT for each parameter requested.; 5387 ; 5388void TMinuit::mnmnos(); 5389{; 5390 /* Local variables */; 5391 Double_t val2mi, val2pl;; 5392 Int_t nbad, ilax, ilax2, ngood, nfcnmi, iin, knt;; 5393 ; 5394 if (fNpar <= 0) goto L700;; 5395 ngood = 0;; 5396 nbad = 0;; 5397 nfcnmi = fNfcn;; 5398// loop over parameters requested; 5399 for (knt = 1; knt <= fNpar; ++knt) {; 5400 if (Int_t(fWord7[1]) == 0) {; 5401 ilax = fNexofi[knt-1];; 5402 } else {; 5403 if (knt >= 7) break;; 5404 ilax = Int_t(fWord7[knt]);; 5405 if (ilax == 0) break;; 5406 if (ilax > 0 && ilax <= fNu) {; 5407 if (fNiofex[ilax-1] > 0) goto L565;; 5408 }; 5409 Printf("" PARAMETER NUMBER %3d NOT A VARIABLE. IGNORED."",ilax);; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:176130,error,error,176130,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['error'],['error']
Availability,"rate file. The input file was generated by running the program in; $ROOTSYS/test/Event in this way:. ./Event 1000 1 1 1. copytree3. Example macro to copy a subset of a tree to a new tree. Only selected entries are copied to the new tree.; NOTE that only the active branches are copied. TBasket* CreateBasket(TBranch* ); Create a basket for this tree and given branch. void Delete(Option_t* option = """"); Delete this tree from memory or/and disk. if option == ""all"" delete Tree object from memory AND from disk; all baskets on disk are deleted. All keys with same name; are deleted.; if option =="""" only Tree object in memory is deleted. void DirectoryAutoAdd(TDirectory* ); Called by TKey and TObject::Clone to automatically add us to a directory; when we are read from a file. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; ntuple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; - ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1"" versus ""e2""; - ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3""; - ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" and ""e4"" mapped on the color number.; (to create histograms in the 2, 3, and 4 dimesional case, see section ""Saving; the result of Draw to an histogram""). Example:; varexp = x simpl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:61745,error,error,61745,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,3,['error'],['error']
Availability,"rate file. The input file was generated by running the program in; $ROOTSYS/test/Event in this way:. ./Event 1000 1 1 1. copytree3. Example macro to copy a subset of a tree to a new tree. Only selected entries are copied to the new tree.; NOTE that only the active branches are copied. TBasket* CreateBasket(TBranch* ); Create a basket for this tree and given branch. void Delete(Option_t* option = """"); Delete this tree from memory or/and disk. if option == ""all"" delete Tree object from memory AND from disk; all baskets on disk are deleted. All keys with same name; are deleted.; if option =="""" only Tree object in memory is deleted. void DirectoryAutoAdd(TDirectory* ); Called by TKey and TObject::Clone to automatically add us to a directory; when we are read from a file. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. This function accepts TCut objects as arguments.; Useful to use the string operator +; example:; ntuple.Draw(""x"",cut1+cut2+cut3);. Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. varexp is an expression of the general form; - ""e1"" produces a 1-d histogram (TH1F) of expression ""e1""; - ""e1:e2"" produces an unbinned 2-d scatter-plot (TGraph) of ""e1""; on the y-axis versus ""e2"" on the x-axis; - ""e1:e2:e3"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" on the x-, y-, z-axis, respectively.; - ""e1:e2:e3:e4"" produces an unbinned 3-d scatter-plot (TPolyMarker3D) of ""e1""; versus ""e2"" versus ""e3"" and ""e4"" mapped on the color number.; (to create histograms in the 2, 3, and 4 dimensional case, see section ""Savin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTree.html:66697,error,error,66697,root/html534/TTree.html,https://root.cern,https://root.cern/root/html534/TTree.html,3,['error'],['error']
Availability,"rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1.; ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions; AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plotting control. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is blue; LineWidth(Int_t width) -- Select line with in pixels, default is 3; FillStyle(Int_t style) -- Select fill style, default is not filled. If a filled style is selected, also use VLines(); to add vertical downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code; Range(const char* name) -- Only draw curve in range defined by given name; Range(double lo, double hi) -- Only draw curve in specified range; VLines() -- Add vertical lines to y=0 at end points of curve; Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points; A negative precision value will disable adaptive point spacing and restrict sampling to; the grid point of points defined by the binning of the plotted observabled (recommended for; expensive functions such as profile likelihoods); Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). RooPlot* plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; Plot oneself on 'frame'. In addition to features detailed in RooAbsReal::plotOn(),; the scale factor for a PDF can be interpreted in three different ways. The interpretation; is controlled by ScaleType. Relative - Scale factor is applied on top of PDF normalization sc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf.html:77955,down,downward,77955,root/html534/RooAbsPdf.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf.html,3,['down'],['downward']
Availability,"rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1.; ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions; AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plotting control. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is blue; LineWidth(Int_t width) -- Select line with in pixels, default is 3; FillStyle(Int_t style) -- Select fill style, default is not filled. If a filled style is selected, also use VLines(); to add vertical downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code; Range(const char* name) -- Only draw curve in range defined by given name; Range(double lo, double hi) -- Only draw curve in specified range; VLines() -- Add vertical lines to y=0 at end points of curve; Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points; Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). void plotOnCompSelect(RooArgSet* selNodes) const; Helper function for plotting of composite p.d.fs. Given; a set of selected components that should be plotted,; find all nodes that (in)directly depend on these selected; nodes. Mark all directly and indirecty selected nodes; as 'selected' using the selectComp() method. RooPlot* plotOn(RooPlot *frame, PlotOpt o); Plot oneself on 'frame'. In addition to features detailed in RooAbsReal::plotOn(),; the scale factor for a PDF can be interpreted in three different ways. The interpretation; is controlled by ScaleT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:69266,down,downward,69266,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['down'],['downward']
Availability,"rather than; the PDF projection. Category must have two states with indices -1 and +1 or three states with; indeces -1,0 and +1.; ShiftToZero(Bool_t flag) -- Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when; plotting -log(L) or chi^2 distributions; AddTo(const char* name, -- Add constructed projection to already existing curve with given name and relative weight factors; double_t wgtSelf, double_t wgtOther). Plotting control. LineStyle(Int_t style) -- Select line style by ROOT line style code, default is solid; LineColor(Int_t color) -- Select line color by ROOT color code, default is blue; LineWidth(Int_t width) -- Select line with in pixels, default is 3; FillStyle(Int_t style) -- Select fill style, default is not filled. If a filled style is selected, also use VLines(); to add vertical downward lines at end of curve to ensure proper closure; FillColor(Int_t color) -- Select fill color by ROOT color code; Range(const char* name) -- Only draw curve in range defined by given name; Range(double lo, double hi) -- Only draw curve in specified range; VLines() -- Add vertical lines to y=0 at end points of curve; Precision(Double_t eps) -- Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision; will result in more and more densely spaced curve points; Invisble(Bool_t flag) -- Add curve to frame, but do not display. Useful in combination AddTo(). void plotOnCompSelect(RooArgSet* selNodes) const; Helper function for plotting of composite p.d.fs. Given; a set of selected components that should be plotted,; find all nodes that (in)directly depend on these selected; nodes. Mark all directly and indirecty selected nodes; as 'selected' using the selectComp() method. RooPlot* plotOn(RooPlot* frame, RooAbsReal::PlotOpt o) const; Plot oneself on 'frame'. In addition to features detailed in RooAbsReal::plotOn(),; the scale factor for a PDF can be interpreted in three different ways. The interpretation; is co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:70455,down,downward,70455,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,3,['down'],['downward']
Availability,ration ; : 128 | 10738.5 9736.79 0.020043 0.00181097 43878.8 0; : 129 Minimum Test error found - save the configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26397,error,error,26397,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ration ; : 150 | 8953.47 7974.78 0.0200512 0.00180093 43835 0; : 151 Minimum Test error found - save the configuration ; : 151 | 8880.6 7901.79 0.0200576 0.00180346 43825.6 0; : 152 Minimum Test error found - save the configuration ; : 152 | 8806.61 7831.08 0.0200492 0.00180366 43846.4 0; : 153 Minimum Test error found - save the configuration ; : 153 | 8736.73 7757.21 0.0200718 0.00180708 43800.2 0; : 154 Minimum Test error found - save the configuration ; : 154 | 8663.76 7685.97 0.0200413 0.00179705 43849.5 0; : 155 Minimum Test error found - save the configuration ; : 155 | 8592.21 7616.06 0.0200532 0.00180372 43837 0; : 156 Minimum Test error found - save the configuration ; : 156 | 8521.8 7546.54 0.0202528 0.00182096 43403 0; : 157 Minimum Test error found - save the configuration ; : 157 | 8451.39 7478.5 0.0200697 0.00181123 43815.3 0; : 158 Minimum Test error found - save the configuration ; : 158 | 8382.56 7410.24 0.020077 0.00181311 43802.4 0; : 159 Minimum Test error found - save the configuration ; : 159 | 8315.02 7340.56 0.020041 0.00180956 43880.3 0; : 160 Minimum Test error found - save the configuration ; : 160 | 8246.43 7272.24 0.0202099 0.0018629 43603.8 0; : 161 Minimum Test error found - save the configuration ; : 161 | 8177.63 7206.25 0.0206118 0.00188237 42713.4 0; : 162 Minimum Test error found - save the configuration ; : 162 | 8110.93 7140.22 0.0205527 0.00185442 42784.7 0; : 163 Minimum Test error found - save the configuration ; : 163 | 8044.58 7074.62 0.0205803 0.00184203 42693.3 0; : 164 Minimum Test error found - save the configuration ; : 164 | 7979.59 7008.2 0.0205615 0.00181915 42684 0; : 165 Minimum Test error found - save the configuration ; : 165 | 7913.46 6943.53 0.0204022 0.00180585 43019.2 0; : 166 Minimum Test error found - save the configuration ; : 166 | 7848.36 6879.88 0.0204674 0.00182719 42918 0; : 167 Minimum Test error found - save the configuration ; : 167 | 7784.6 6815.88 0.0200635 0.00180544 43816.2 0; : 168 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:28884,error,error,28884,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ration ; : 170 | 7595.66 6626.52 0.0200669 0.00181066 43820.7 0; : 171 Minimum Test error found - save the configuration ; : 171 | 7532.11 6565.9 0.0201114 0.00182063 43737.9 0; : 172 Minimum Test error found - save the configuration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum T,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31146,error,error,31146,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ration ; : 172 | 7471.23 6504.71 0.0200897 0.00182205 43793.2 0; : 173 Minimum Test error found - save the configuration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31373,error,error,31373,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ration ; : 173 | 7410.53 6443.41 0.0204177 0.00187787 43150.4 0; : 174 Minimum Test error found - save the configuration ; : 174 | 7349.1 6383.77 0.0200981 0.00181163 43748.3 0; : 175 Minimum Test error found - save the configuration ; : 175 | 7289.39 6324 0.0200682 0.0018131 43823.4 0; : 176 Minimum Test error found - save the configuration ; : 176 | 7230 6264.47 0.0200687 0.00181285 43821.5 0; : 177 Minimum Test error found - save the configuration ; : 177 | 7171.82 6204.18 0.0200767 0.00181262 43801.8 0; : 178 Minimum Test error found - save the configuration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Tes,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:31487,error,error,31487,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
Availability,ration ; : 178 | 7111.03 6147.7 0.0200764 0.00181324 43803.9 0; : 179 Minimum Test error found - save the configuration ; : 179 | 7053.87 6090.24 0.0200835 0.0018163 43794.3 0; : 180 Minimum Test error found - save the configuration ; : 180 | 6997.03 6032.07 0.0204217 0.00180691 42976.5 0; : 181 Minimum Test error found - save the configuration ; : 181 | 6939.07 5975.45 0.0200798 0.00180145 43767.5 0; : 182 Minimum Test error found - save the configuration ; : 182 | 6882.6 5919.11 0.0200699 0.00180792 43806.8 0; : 183 Minimum Test error found - save the configuration ; : 183 | 6826.1 5863.62 0.0200838 0.00180862 43775.3 0; : 184 Minimum Test error found - save the configuration ; : 184 | 6771.06 5807.61 0.0200991 0.00181199 43746.7 0; : 185 Minimum Test error found - save the configuration ; : 185 | 6714.64 5753.86 0.0200873 0.00180851 43766.7 0; : 186 Minimum Test error found - save the configuration ; : 186 | 6660.45 5699.55 0.0200713 0.00180648 43800 0; : 187 Minimum Test error found - save the configuration ; : 187 | 6606 5645.81 0.0200891 0.00180584 43755.9 0; : 188 Minimum Test error found - save the configuration ; : 188 | 6552.47 5592.04 0.0200898 0.00181079 43766 0; : 189 Minimum Test error found - save the configuration ; : 189 | 6500.15 5537.2 0.0201183 0.00181031 43696.6 0; : 190 Minimum Test error found - save the configuration ; : 190 | 6444.37 5487.05 0.0200871 0.00180586 43760.7 0; : 191 Minimum Test error found - save the configuration ; : 191 | 6394.21 5433.57 0.0200994 0.00180152 43720.8 0; : 192 Minimum Test error found - save the configuration ; : 192 | 6340.82 5382.29 0.0201748 0.00181779 43580.1 0; : 193 Minimum Test error found - save the configuration ; : 193 | 6289.73 5330.56 0.0202017 0.00183095 43547.4 0; : 194 Minimum Test error found - save the configuration ; : 194 | 6238.01 5279.82 0.0201002 0.00180964 43738.5 0; : 195 Minimum Test error found - save the configuration ; : 195 | 6186.17 5231.06 0.0200801 0.00180696 43780.1 0; : 196 Min,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:32053,error,error,32053,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['error'],['error']
