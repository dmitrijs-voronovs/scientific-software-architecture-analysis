quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Energy Efficiency,"ction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0000000 (a.u.), 0.0000000 (eV); Non-iterative: 0.0454606 (a.u.), 1.2370470 (eV); Occ Vir Coefficient; ---------------------------------------------. Converged in 2 iteration.; Squared norm of the S component: 1.0000000; The S vector is rotated up to 90.000 (deg.); #WARNING: Strongly rotated from the CIS state!. -> Corresponding GS total energy (a.u.) = -909.00717671283519. Module time:; user time = 13203.86 seconds = 220.06 minutes; system time = 4785.08 seconds = 79.75 minutes; total time = 17996 seconds = 299.93 minutes; Total time:; user time = 13569.80 seconds = 226.16 minutes; system time = 5014.77 seconds = 83.58 minutes; total time = 18567 seconds = 309.45 minutes. ∩==; (: 3)))== kskkskkskksk BOOOoooooOOOON!; ∪==. Psi4 stopped on: Thursday, 11 April 2019 04:20PM; Psi4 wall time for execution: 5:09:26.20. *** Psi4 exiting successfully. Buy a developer a beer!; ```. The calculation ran, but there is a warning. Does anybody have any good ideas for checking this? I'm sure other codes can compute ADC, but it's not something I've played with before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:3052,energy,energy,3052,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859,1,['energy'],['energy']
Energy Efficiency,"ction object is now returnable for all psi4 methods. This Wavefunction object can be passed to other codes or directly manipulated; - Driver has been refactored into a new recursive scheme (as opposed to the previous nested scheme) to better facilitate more complex calls; - The MOLDEN writer now accepts density matrices for writing natural orbitals; - Added command-line arguments -l to specify PSIDATADIR (for developers) and -s to specify location of scratch directories (overrides PSI_SCRATCH); - Internal upgrades to the direct product decomposition library, libdpd, especially regarding density fitting; - All code improvements now go through a review process on `github.com/psi4/psi4` in addition to a continuous integration server to ensure code quality; ## New methods; - Added quadratic convergence algorithms for RHF, UHF, ROHF; - Added DF-CCSD gradients (RHF references); - Added conventional and DF RASSCF and CASSCF energies; - Added X2C scalar relativistic corrections; - Added QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:2413,charge,charges,2413,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['charge'],['charges']
Energy Efficiency,"ctron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5667771440329830; Two-Electron Energy = 66.1914406060751901; DFT Exchange-Correlation Energy = -12.4177135760969506; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total ti",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:7317,Energy,Energy,7317,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"cts the `basis_relativistic` basis, which is used internally by x2c to solve the Dirac equation. This is the recommended procedure for basis sets like cc-pVXZ-DK. This table should help:. | `basis` | `basis_relativistic ` | Procedure | Good idea? |; | ------------- | ------------------- | ------------------------------------------------- |------------------- |; | cc-pVDZ-DK | | solve Dirac eq in cc-pVDZ-DK-decon basis/recontract to cc-pVDZ-DK| Yes, default |; | cc-pVDZ-DK | cc-pVDZ-DK-decon | Same as above | Option above is preferred |; | cc-pVDZ-DK | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK basis| No, need to solve Dirac eq in decon basis to get accurate results |; | cc-pVDZ-DK-decon | | solve Dirac eq in cc-pVDZ-DK-decon basis/return Hx2c in cc-pVDZ-DK-decon basis| Yes, if you need high accuracy. Very expensive |; | cc-pVDZ-DK-decon | cc-pVDZ-DK-decon | Same as above| Option above is preferred |; | cc-pVDZ-DK-decon | cc-pVDZ-DK | solve Dirac eq in cc-pVDZ-DK basis/return Hx2c in cc-pVDZ-DK-decon basis| No, need to solve Dirac eq in decon basis to get accurate results |. My student Sam recently posted about this issue. This input should run:. ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```; but fails on the python side. This is equivalent to this other input (which should also run):; ```; molecule {; H; F 1 0.92; }. set {; basis cc-pvdz-dk-decon; basis_relativistic cc-pvdz-dk-decon; relativistic x2c; }. energy('hf'); ```. @loriab ""That said, the answer in the docs for the x2c example is known wrong"". I have the fix, the example should read:; ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'); ```. @jevandezande: If you are **not** interested in explicitly decontracting the basis the recommended way to run this input is:. ```; molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz-dk; relativistic x2c; }. energy('hf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/662#issuecomment-288839929:1441,energy,energy,1441,https://psicode.org,https://github.com/psi4/psi4/issues/662#issuecomment-288839929,4,['energy'],['energy']
Energy Efficiency,"d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x2149a3); #36 0x561a735e2da0 in PyRun_FileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214da0); #37 0x561a735e2fa3 in PyRun_SimpleFileExFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:187; #5 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:138; #6 0x7f28e2c07ef9 in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9536,allocate,allocate,9536,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocate']
Energy Efficiency,d 1.70 sec; Start 382: psi4numpy-dfmp2; 358/412 Test #8: castup1 .......................... Passed 1.72 sec; Start 331: scf-bs; 359/412 Test #289: psimrcc-ccsd_t-2 ................. Passed 2.32 sec; Start 299: pubchem2; 360/412 Test #97: cisd-h2o-clpse ................... Passed 1.62 sec; Start 404: json-schema-1-gradient; 361/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 288: psimrcc-ccsd_t-1; 362/412 Test #334: scf2 ............................. Passed 1.76 sec; Start 223: mints10; 363/412 Test #189: fci-tdm .......................... Passed 1.78 sec; Start 391: python-mints9; 364/412 Test #161: dft-grac ......................... Passed 1.88 sec; Start 222: mints9; 365/412 Test #362: x2c2 ............................. Passed 2.13 sec; Start 396: python-mints13; 366/412 Test #357: scf-response1 .................... Passed 2.24 sec; Start 411: skeletonsointegrals; 367/412 Test #211: mcscf2 ........................... Passed 1.93 sec; Start 354: tu1-h2o-energy; 368/412 Test #353: stability2 ....................... Passed 1.90 sec; Start 103: decontract; 369/412 Test #331: scf-bs ........................... Passed 1.66 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:34568,energy,energy,34568,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,d 4.45 sec; Start 389: python-curve; 322/412 Test #311: rasci-c2-active .................. Passed 7.52 sec; Start 236: mp2-property; 323/412 Test #226: mom .............................. Passed 4.69 sec; Start 312: rasci-h2o; 324/412 Test #378: pywrap-align-chiral .............. Passed 3.44 sec; Start 294: psimrcc-pt2; 325/412 Test #235: mp3-grad2 ........................ Passed 5.64 sec; Start 119: dfcasscf-fzc-sp; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.82 sec; Start 258: omp3-1; 327/412 Test #344: stability1 ....................... Passed 3.58 sec; Start 352: dft-reference; 328/412 Test #312: rasci-h2o ........................ Passed 2.09 sec; Start 364: zaptn-nh2; 329/412 Test #398: json-v11-energy .................. Passed 3.22 sec; Start 412: skeletonwavefunction; 330/412 Test #294: psimrcc-pt2 ...................... Passed 1.99 sec; Start 328: scf-guess-read1; 331/412 Test #345: dfep2-1 .......................... Passed 3.72 sec; Start 131: dfmp2-2; 332/412 Test #400: json-schema-1-energy ............. Passed 4.20 sec; Start 333: scf-occ; 333/412 Test #266: opt1 ............................. Passed 5.44 sec; Start 385: psi4numpy-rhf-hessian; 334/412 Test #389: python-curve ..................... Passed 3.42 sec; Start 392: python-mints2; 335/412 Test #236: mp2-property ..................... Passed 3.47 sec; Start 402: json-schema-1-orient; 336/412 Test #295: psimrcc-sp1 ...................... Passed 4.98 sec; Start 315: sad1; 337/412 Test #192: fcidump .......................... Passed 5.16 sec; Start 214: mints2; 338/412 Test #412: skeletonwavefunction ............. Passed 1.49 sec; Start 329: scf-upcast-custom-basis; 339/412 Test #119: dfcasscf-fzc-sp .................. Passed 3.11 sec; Start 346: dfep2-2; 340/412 Test #258: omp3-1 ........................... Passed 3.09 sec; Start 290: psimrcc-ccsd_t-3; 341/412 Test #328: scf-guess-read1 .................. Passed 2.07 sec; Start 350: sapt-sf1; 342/412 Test #352: dft-reference .........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:31174,energy,energy,31174,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,d 6.79 sec; Start 236: mp2-property; 322/412 Test #356: tu3-h2o-opt ...................... Passed 5.64 sec; Start 398: json-v11-energy; 323/412 Test #400: json-schema-1-energy ............. Passed 4.36 sec; Start 119: dfcasscf-fzc-sp; 324/412 Test #295: psimrcc-sp1 ...................... Passed 5.67 sec; Start 258: omp3-1; 325/412 Test #226: mom .............................. Passed 6.16 sec; Start 352: dft-reference; 326/412 Test #272: opt5 ............................. Passed 6.07 sec; Start 385: psi4numpy-rhf-hessian; 327/412 Test #230: mp2-grad2 ........................ Passed 7.17 sec; Start 364: zaptn-nh2; 328/412 Test #122: dfccdl1 .......................... Passed 6.15 sec; Start 312: rasci-h2o; 329/412 Test #266: opt1 ............................. Passed 8.11 sec; Start 294: psimrcc-pt2; 330/412 Test #344: stability1 ....................... Passed 4.56 sec; Start 392: python-mints2; 331/412 Test #345: dfep2-1 .......................... Passed 4.20 sec; Start 131: dfmp2-2; 332/412 Test #398: json-v11-energy .................. Passed 2.33 sec; Start 214: mints2; 333/412 Test #192: fcidump .......................... Passed 7.02 sec; Start 333: scf-occ; 334/412 Test #312: rasci-h2o ........................ Passed 1.99 sec; Start 315: sad1; 335/412 Test #236: mp2-property ..................... Passed 3.18 sec; Start 328: scf-guess-read1; 336/412 Test #389: python-curve ..................... Passed 3.54 sec; Start 329: scf-upcast-custom-basis; 337/412 Test #294: psimrcc-pt2 ...................... Passed 1.77 sec; Start 346: dfep2-2; 338/412 Test #364: zaptn-nh2 ........................ Passed 2.70 sec; Start 402: json-schema-1-orient; 339/412 Test #258: omp3-1 ........................... Passed 2.96 sec; Start 412: skeletonwavefunction; 340/412 Test #119: dfcasscf-fzc-sp .................. Passed 3.02 sec; Start 290: psimrcc-ccsd_t-3; 341/412 Test #131: dfmp2-2 .......................... Passed 1.98 sec; Start 289: psimrcc-ccsd_t-2; 342/412 Test #392: python-mint,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:31179,energy,energy,31179,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"d Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data saved to CF_PEC_1_data.csv; Plot saved as CF_PEC_Psi4_1.png. And here's the script I ran to see the available methods and options: ; import psi4. # Test common methods to see if they are available; methods_to_test = ['scf', 'mp2', 'ccsd', 'eom-ccsd', 'td-dft']; available_methods = []. for method in methods_to_test:; try:; psi4.energy(method); available_methods.append(method); except Exception:; pass. print(""Available Methods:""); print(available_methods). # List available options; options = psi4.core.get_global_option_list(); print(""\nAvailable Options:""); print(options). # Check specific option; print(""\nIs 'tdscf_type' available?"", 'tdscf_type' in options). And here's the result I got when I ran the script:; (psi4_env) -bash-4.2# python3 CF_PEC_Project.py. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/. Scratch directory: /tmp/; Avail",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:5292,energy,energy,5292,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"d are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option, not a run-time option https://github.com/evaleev/libint/issues/190 That is, no single build of libint2 could work for all the downstreams on c-f that want to use it. (It could be worse -- in integral package land, there's also commonly source-generation-time options :-); * the production-level Linux libint2 package has 26k source files, takes way more than 6h to build running on 12 cores, and needs `ulimit` reset on the building computer to complete; * Windows libint2 package has only ever been built on @andysim 's laptop. I worry that between the careful choice of compiler he had to make and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1807,adapt,adapted,1807,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,2,['adapt'],['adapted']
Energy Efficiency,"d be to disable this. A cursory looks shows the best way to accomplish this is to call RASSCF while specifying a CASSCF wavefunction. > On Sep 25, 2017, at 9:42 AM, David Sherrill <notifications@github.com> wrote:; > ; > Maybe @dgasmith can clarify exactly how the orbitals are generated in cases; > like this for CASSCF. Are they CAS NO's? Perhaps the most important; > determinants are printed prior to the natural orbital procedure (in which; > case there would be a mismatch between the orbitals and the determinant; > printout)? Or, alternatively, I wonder if we enforce any kind of phase; > convention in our MOLDEN writer that the CASSCF code is unaware of?; > ; > David; > ; > On Mon, Sep 25, 2017 at 9:09 AM, Vladimir <notifications@github.com> wrote:; > ; > > Hello Francesco.; > > I don't quite understand you. The only matrix determine orbital; > > coefficients is [MO] section data of the MOLDEN file and different; > > determinants have only different occupation numbers of there orbitals.; > > I only sort MO orbitals by energy if required before feed it into CASINO.; > >; > > I will upload MOLDEN outputs for CASSCF and ROHF cases approximately in 2; > > hours when I will have access to the server.; > >; > > But you can also create these files easily from my inputs or you can talk; > > about some other matrices.; > >; > > Best, Vladimir.; > >; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/796#issuecomment-331875695>, or mute; > > the thread; > > <https://github.com/notifications/unsubscribe-auth/AC9QdmmLQf_1IbwlTRBWBbjSYBFKBN2eks5sl6YbgaJpZM4PK23n>; > > .; > >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/796#issuecomment-331884804>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ABsBcVnVaDTdIjAAgctHtOFPT0ldszOGks5sl63AgaJpZM4PK23n>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331891537:1378,energy,energy,1378,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331891537,1,['energy'],['energy']
Energy Efficiency,"d state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting optio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3843,Energy,Energy,3843,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"d to a state ~20 hartrees below the def2-TZVP result. I think the def2-TZVP is the ""correct"" state as it converges to this state in vacuum and with PCMSolver using def2-TZVPPD, as well as using ddX with def2-TZVPP. . I tried changing the guess to Huckel which seems to have resolved the issue for this particular case. I also tried changing the convergence algorithm (e.g. using damping, not using ADIIS, etc), as well as other guesses, but only the Huckel guess was able to converge to the same state as the def2-TZVP. . I would think that the specific solution isn't necessarily transferrable to all other systems, but that fiddling with the convergence/guess settings may help in general. Result:; ```; MBIS Charges: (a.u.); Center Symbol Z Pop. Charge; 1 C 6 6.139025 -0.139025; 2 C 6 6.133511 -0.133511; 3 C 6 6.122876 -0.122876; 4 C 6 6.070789 -0.070789; 5 C 6 6.122873 -0.122873; 6 C 6 6.133418 -0.133418; 7 I 25 25.053866 -0.053866; 8 H 1 0.850991 0.149009; 9 H 1 0.849569 0.150431; 10 H 1 0.836862 0.163138; 11 H 1 0.836785 0.163215; 12 H 1 0.849450 0.150550; ```. Input:; ```; molecule test {; 0 1; C -2.770566610000 0.138041700000 0.070178320000; C -1.574766790000 -2.182402580000 0.041630990000; C 1.033304570000 -2.323434390000 -0.024422900000; C 2.435037490000 -0.121299970000 -0.061679550000; C 1.259017560000 2.209348470000 -0.033641890000; C -1.350150920000 2.328080550000 0.032456990000; I 6.389923580000 -0.318582790000 -0.161855610000; H -4.794725900000 0.238941070000 0.121450260000; H -2.664958600000 -3.891956620000 0.070604800000; H 1.951364020000 -4.127647160000 -0.046322210000; H 2.351710440000 3.913369620000 -0.062674850000; H -2.265188840000 4.137542080000 0.054275640000; units bohr; no_com; no_reorient; }. set {; basis def2-TZVPPD; ddx true; ddx_model pcm; ddx_solvent_epsilon 4.0; guess huckel; }. energy('pbe0'); properties('pbe0',properties= [""mbis_charges"",""quadrupole"",""mulliken_charges"",""dipole"",""lowdin_charges"",""wiberg_lowdin_indices"",""mayer_indices"", ]); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/issues/3135#issuecomment-2349712230,1,['energy'],['energy']
Energy Efficiency,"d.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 67 (A) A 70 (A) A 0.6385; 67 (A) A 73 (A) A 0.1036; ---------------------------------------------------------; ----------------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4962,energy,energy,4962,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190,2,['energy'],['energy']
Energy Efficiency,d1; 303/415 Test #228: mom .............................. Passed 7.35 sec; Start 237: mp3-grad2; 304/415 Test #207: frac-ip-fitting .................. Passed 55.28 sec; Start 240: nbody-he-cluster; 305/415 Test #231: mp2-grad1 ........................ Passed 6.35 sec; Start 241: nbody-intermediates; 306/415 Test #232: mp2-grad2 ........................ Passed 11.81 sec; Start 242: nbody-nocp-gradient; 307/415 Test #237: mp3-grad2 ........................ Passed 9.82 sec; Start 243: nbody-cp-gradient; 308/415 Test #236: mp3-grad1 ........................ Passed 10.08 sec; Start 244: nbody-vmfc-gradient; 309/415 Test #235: mp2p5-grad2 ...................... Passed 11.14 sec; Start 246: nbody-freq; 310/415 Test #229: mp2-1 ............................ Passed 24.07 sec; Start 247: nbody-multi-level; 311/415 Test #241: nbody-intermediates .............. Passed 26.74 sec; Start 249: ocepa-freq1; 312/415 Test #242: nbody-nocp-gradient .............. Passed 21.71 sec; Start 250: ocepa-grad1; 313/415 Test #195: fd-freq-energy ................... Passed 115.82 sec; Start 253: ocepa2; 314/415 Test #250: ocepa-grad1 ...................... Passed 17.00 sec; Start 254: ocepa3; 315/415 Test #243: nbody-cp-gradient ................ Passed 39.06 sec; Start 255: omp2-1; 316/415 Test #244: nbody-vmfc-gradient .............. Passed 45.13 sec; Start 257: omp2-3; 317/415 Test #255: omp2-1 ........................... Passed 9.46 sec; Start 258: omp2-4; 318/415 Test #240: nbody-he-cluster ................. Passed 65.04 sec; Start 259: omp2-5; 319/415 Test #230: mp2-def2 ......................... Passed 92.05 sec; Start 261: omp2-grad2; 320/415 Test #257: omp2-3 ........................... Passed 36.70 sec; Start 262: omp2p5-1; 321/415 Test #262: omp2p5-1 ......................... Passed 8.70 sec; Start 264: omp2p5-grad1; 322/415 Test #247: nbody-multi-level ................ Passed 85.90 sec; Start 265: omp2p5-grad2; 323/415 Test #254: ocepa3 ........................... Passed 68.79 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:29450,energy,energy,29450,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,d2 ...................... Passed 3.41 sec; Start 234: mp3-grad2; 315/411 Test #395: python-mints13 ................... Passed 1.71 sec; Start 361: x2c2; 316/411 Test #397: json-v11-energy .................. Passed 2.95 sec; Start 362: x2c3; 317/411 Test #191: fcidump .......................... Passed 3.66 sec; Start 223: molden1; 318/411 Test #232: mp2p5-grad2 ...................... Passed 3.51 sec; Start 119: dfcasscf-sp; 319/411 Test #271: opt5 ............................. Passed 3.06 sec; Start 399: json-schema-1-energy; 320/411 Test #361: x2c2 ............................. Passed 1.96 sec; Start 224: molden2; 321/411 Test #362: x2c3 ............................. Passed 2.32 sec; Start 130: dfmp2-2; 322/411 Test #4: casscf-semi ...................... Passed 4.96 sec; Start 228: mp2-grad1; 323/411 Test #234: mp3-grad2 ........................ Passed 3.56 sec; Start 136: dfmp2-grad3; 324/411 Test #119: dfcasscf-sp ...................... Passed 4.30 sec; Start 118: dfcasscf-fzc-sp; 325/411 Test #399: json-schema-1-energy ............. Passed 3.59 sec; Start 262: omp3-grad1; 326/411 Test #130: dfmp2-2 .......................... Passed 2.96 sec; Start 255: omp2p5-grad1; 327/411 Test #223: molden1 .......................... Passed 5.46 sec; Start 190: fci-coverage; 328/411 Test #228: mp2-grad1 ........................ Passed 3.17 sec; Start 134: dfmp2-grad1; 329/411 Test #199: fnocc1 ........................... Passed 8.69 sec; Start 88: cepa2; 330/411 Test #224: molden2 .......................... Passed 4.34 sec; Start 203: frac; 331/411 Test #136: dfmp2-grad3 ...................... Passed 3.01 sec; Start 157: dft-grac; 332/411 Test #118: dfcasscf-fzc-sp .................. Passed 1.94 sec; Start 403: json-schema-1-gradient; 333/411 Test #262: omp3-grad1 ....................... Passed 1.90 sec; Start 229: mp2-grad2; 334/411 Test #157: dft-grac ......................... Passed 1.69 sec; Start 246: omp2-1; 335/411 Test #203: frac ............................. Passed 1.98,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:30371,energy,energy,30371,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"da3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; __________________________________________________________________ test_psi4_cc __________________________________________________________________. def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule; ; h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""); ; psi4.set_options({""basis"": '6-31G**'}); ; > psi4.optimize('ccsd'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:63: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:1050: in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:697: in gradient; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:752: in select_ccsd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4a59eb8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:28942,energy,energy,28942,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > super",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5081,energy,energy,5081,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"dded QM/MM computations with MM point charges: energies and gradients; - Added UHF/UHF stability analysis for non-PK integrals; - Added density cumulant functional theory methods DC-12, ODC-12, and ODC-13; - Added UHF DF-MP2 gradients and DF-MP3 energies; - Added CCD treatment of dispersion in SAPT; - Added DF orbital-optimized MP2.5 energies and gradients; - Added GUESS_MIX keyword to UHF/UKS to generate broken-symmetry guesses; - Added STO-3G, 3-21G, and def2 basis sets through radon; - Added DF (O)MP2/2.5/3 energies and gradients; ## Geometry optimization; - Improved support for frozen coordinates and fixed coordinates; - Dynamic level algorithm tries increasingly robust optimization approaches for difficult systems; - Added Cartesian coordinate optimizations; - Ability to freeze selected Cartesian coordinates; - Added iterative, restricted-step method to RFO geometry optimizations; - Added delocalized internal coordinate optimizations; ## External features; - Added EFP energies added via libEFP; - Added PCM implicit solvent added for SCF; - Added interface to DMRG-CI and DMRG-SCF code in CheMPS2; - Added code to do potential energy scans via the WebMO interface; ## Performance optimization; - Sped up integrals computation by optimizing lib mints layer; - The PK JK builder has received significant performance improvements; - SAD guess has been improved dramatically, now default for all RHF computations; ## Bug fixes; - Various bug fixes and improvements to optimizer and IRC code; - Fixed a bug with DF-K in systems with only one occupied orbital; - Fixed an integer overflow bug in DF-CCSD(T); - Fixed modules that crashed when not finding full integral files available (because DF-HF was run instead of conventional HF); - Fixed problem with double hybrid DFT total energies not being printed; - Fixed crash caused by changing number of MO's during optimization (changes in number of MO's dropped due to linear dependencies); - Innumerable additional bug fixes and tweaks",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/367:3522,energy,energy,3522,https://psicode.org,https://github.com/psi4/psi4/issues/367,1,['energy'],['energy']
Energy Efficiency,"ddress)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6135,ENERGY,ENERGY,6135,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"detci is the odd one out for all-electron, too. `detci`:; ```; ==> Starting MPn CI Computation <==. CalcInfo_->escf = -25.943614318544544; CalcInfo_->e0 = -20.206929918475634; CalcInfo_->enuc = 4.919538206883576; CalcInfo_->e1 = -10.656222606952486. n Corr. Energy E(MPn) n Corr. Energy E(MPn). 0 0.000000000000000 -15.287391711592058; 1 -10.656222606952486 -25.943614318544544; 1 -10.656222606954266 -25.943614318546324; 2 -0.062024390690629 -26.005638709235175 2 -0.062024390690629 -26.005638709235175; 3 -0.014835841878215 -26.020474551113388. MP2 energy saved. EMPn = -26.0056387092352. ==> Energetics <==. SCF energy = -25.943614318544544; Total MP energy = -26.005638709235175; ```. `CFOUR` (semicanonical default):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001912085148 a.u.\n'; ' E2(BB) = -0.000092824531 a.u.\n'; ' E2(AB) = -0.057779155613 a.u.\n'; ' E2(SINGLE) = -0.000694049865 a.u.\n'; ' E2(TOT) = -0.059784065292 a.u.\n'; ' Total MP2 energy = -26.004092433703 a.u.\n'; ' ------------------------------------------------\n'; ```. `CFOUR` (forced standard orbitals):; ```; ' ------------------------------------------------\n'; ' E(SCF) = -25.943614318546 a.u.\n'; ' E2(AA) = -0.001908947129 a.u.\n'; ' E2(BB) = -0.000092848566 a.u.\n'; ' E2(AB) = -0.057404620910 a.u.\n'; ' E2(SINGLE) = -0.000687431838 a.u.\n'; ' E2(TOT) = -0.059406416605 a.u.\n'; ' Total MP2 energy = -26.003708166988 a.u.\n'; ' ------------------------------------------------\n'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311#issuecomment-597662949:258,Energy,Energy,258,https://psicode.org,https://github.com/psi4/psi4/issues/311#issuecomment-597662949,7,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"did you happen to try something like below? iirc, `""detci""` is intended to trigger the specify-everything-by-detci-keyword mode that makes detci behave like psi3. ```; set detci ex_level 5. energy(""detci""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2282#issuecomment-904248802:190,energy,energy,190,https://psicode.org,https://github.com/psi4/psi4/issues/2282#issuecomment-904248802,1,['energy'],['energy']
Energy Efficiency,dy ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3 ........................... Passed 27.97 sec; Start 258: omp2p5-grad2; 92/413 Test #153: df,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7844,energy,energy,7844,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,"e 21 file /home/filip/software/psi4-1.4rc/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 7; Number of basis function: 11; Number of Cartesian functions: 11; Spherical Harmonics?: false; Max angular momentum: 1. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs ; atoms 2 entry H line 23 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:1913,Charge,Charge,1913,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Charge'],['Charge']
Energy Efficiency,"e 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3282,Charge,Charge,3282,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Charge'],['Charge']
Energy Efficiency,"e bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:1281,energy,energy,1281,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['energy'],['energy']
Energy Efficiency,"e compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.3",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1112,energy,energy,1112,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"e issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein random energies would result from the calculation. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_plan",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:2082,energy,energy,2082,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"e let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1298,ENERGY,ENERGY,1298,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"e orientations. It's not corruption associated; # with wavefunction pass, as I've tested an older version. It's not a local ; # minimum as the total gradient wouldn't be so large. It's not too distorted a ; # starting structure, as q-chem and molpro converge to the real minimum promptly. It's not; # symmetry constrained, as it's c1. I'm at a loss. # for oddz; # start; # 25.7790013416; # -139.174980786; # 0.0581560524872; # Optimizer: Optimization complete!; # opt; # 33.8382916197; # -139.301327453; # 0.0422103431176; #gradient = [; # [ -0.01135649578523, -0.02871892445843, -0.05475995417434],; # [ 0.00216387360216, 0.04113784938512, 0.07821983299617],; # [ 0.00215642675781, 0.04114952366672, 0.07824201651882],; # [ 0.00563414370780, -0.03413386327141, -0.06481576207381],; # [ 0.00140205171291, -0.01943458532669, -0.03688613326736]]. # --------------------------------------------------------------------------------------------------------------- ~; # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; # --------------------------------------------------------------------------------------------------------------- ~; # 1 -139.174980785934 -139.174980785934 0.08977532 0.06906505 0.39164409 0.25000003 ~; # 2 -139.237253751032 -0.062272965098 0.08963832 0.05551392 0.44053120 0.25000000 ~; # 3 -139.282037341604 -0.044783590572 0.06072927 0.03180855 0.57480436 0.30215430 ~; # 4 -139.291415380240 -0.009378038636 0.07020602 0.04747338 0.40870734 0.23074492 ~; # 5 -139.289103767764 0.002311612476 0.06272061 0.03636254 0.31265835 0.16807142 ~; # 6 -139.299937489944 -0.010833722180 0.02206926 0.01444069 0.08604223 0.05017704 ~; # 7 -139.301130513523 -0.001193023579 0.00601199 0.00414213 0.03851787 0.02297290 ~; # 8 -139.301272108227 -0.000141594704 0.00392137 0.00273882 0.01100483 0.00820114 ~; # 9 -139.301322123849 -0.000050015621 0.00099031 0.00070170 0.00667642 0.00454418 ~; # 10 -139.301327446273 -0.000005322424 0.00004217 0.00002303 0.00027466 0.00017580 ~; #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:7840,Energy,Energy,7840,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"e some other packages. Any idea what this is about?. ```sh. raised unexpected: TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1081,adapt,adapter,1081,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapter']
Energy Efficiency,"e the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.5333500 0.7007130; SP 2 1.00; 3.6649800 -0.3958970 0.2364600; 0.7705450 1.2158400 0.8606190; SP 1 1.00; 0.1958570 1.0000000 1.0000000; ****; [DZ]; spherical; ****; H 0 ; S 3 1.00; 19.2406000 0.0328280 ; 2.8992000 0.2312080 ; 0.6534000 0.8172380 ; S 1 1.00; 0.1776000 1.0000000 ; ****; """"""). psi4.set_options({; 'd_convergence': 11,; 'e_convergence': 11,; 'scf_type': 'pk'}); ; bz.update_geometry(); bz.print_out(); psi4.compare_strings(""c2v"", bz.schoenflies_symbol(), ""Point group"") #TEST; psi4.compare_values(refnuc, bz.nuclear_repulsion_energy(), 10, ""Nuclear repulsion energy"") #TEST; ```. ## Questions; - [ ] I've no immediate thoughts of merging this. Just wanted it to be available to others and off my computer. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:3867,energy,energy,3867,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['energy'],['energy']
Energy Efficiency,"e with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1080,ENERGY,ENERGY,1080,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"e). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), the pairwise dispersion analysis returned by executable/classic/psi4-channel `dftd3` was scaled differently from that by `s-dftd3` and `dftd4` (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and `Empirical_Disp.dat` file generated in the course of `energy(""fisapt0-d"")` by this PR or later Psi4 (approx. v1.7.0 Psi4) and script `fsapt.py` released with Psi4 v1.7.0 or later. This is semi-enforced since v1.7 requires v0.26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this capability. `run_gcp` will use classic `gcp` or `mctc-gcp` interchangeably, whichever you have available. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:2347,energy,energy,2347,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['energy'],['energy']
Energy Efficiency,"e, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01845040 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. -------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:4121,ENERGY,ENERGY,4121,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,e-02 1.10466e-03 ADIIS/DIIS; @DF-RKS iter 4: -43.39730753466733 -9.96916e-03 3.77682e-04 ADIIS/DIIS; @DF-RKS iter 5: -43.39937943728395 -2.07190e-03 2.05445e-04 ADIIS/DIIS; @DF-RKS iter 6: -43.40044782166130 -1.06838e-03 1.11750e-04 ADIIS/DIIS; @DF-RKS iter 7: -43.40150886235944 -1.06104e-03 1.08271e-04 ADIIS/DIIS; @DF-RKS iter 8: -43.40259319327883 -1.08433e-03 1.03266e-04 ADIIS/DIIS; @DF-RKS iter 9: -43.40562867052822 -3.03548e-03 8.61300e-05 DIIS; @DF-RKS iter 10: -43.40705815490672 -1.42948e-03 4.81672e-05 DIIS; @DF-RKS iter 11: -43.40726807149662 -2.09917e-04 3.05961e-05 DIIS; @DF-RKS iter 12: -43.40746692997944 -1.98858e-04 1.72184e-05 DIIS; @DF-RKS iter 13: -43.40747472236222 -7.79238e-06 6.59771e-06 DIIS; @DF-RKS iter 14: -43.40748116314034 -6.44078e-06 3.82428e-06 DIIS; @DF-RKS iter 15: -43.40748185746369 -6.94323e-07 1.86119e-06 DIIS; @DF-RKS iter 16: -43.40748201260618 -1.55142e-07 1.54127e-06 DIIS; @DF-RKS iter 17: -43.40748214051649 -1.27910e-07 7.09491e-07 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 32.0000039846 ; deviation = 3.985e-06 . Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -1.094498 2A -1.062498 3A -1.041834 ; 4A -1.016695 5A -0.963137 6A -0.898331 ; 7A -0.834072 8A -0.703197 9A -0.700832 ; 10A -0.661618 11A -0.660116 12A -0.605235 ; 13A -0.596357 14A -0.526703 15A -0.507419 ; 16A -0.419207 . Virtual: . 17A -0.218606 18A -0.112811 19A -0.091525 ; 20A 0.037195 21A 0.048637 22A 0.051338 ; 23A 0.054059 24A 0.105612 25A 0.106004 ; 26A 0.174431 27A 0.193680 28A 0.196900 ; 29A 0.211551 30A 0.216394 31A 0.278756 ; 32A 0.285132 33A 0.285433 34A 0.307461 ; 35A 0.324830 36A 0.340649 37A 0.340734 ; 38A 0.350696 39A 0.410719 40A 0.411116 ; 41A 0.412113 42A 0.412296 43A 0.475230 ; 44A 0.475508 45A 0.504350 46A 0.504767 ; 47A 0.605740 48A 0.607010 49A 0.653648 ; 50A 0.665432 51A 0.712798 52A 0.728207 ; 53A 0.728722 54A 0.731604 55A 0.750409 ; 56A 0.785076 57A 0.814891 58A ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:11879,Energy,Energy,11879,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module time:; user time = 23.90 seconds = 0.40 minutes; system time = 1.02 seconds = 0.02 minutes; total time",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:8028,Energy,Energy,8028,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"e-04 4.06200e-04 DIIS; 401: @DF-RHF iter 5: -75.98014095901934 -1.92525e-05 8.89529e-05 DIIS; 401: @DF-RHF iter 6: -75.98014186620988 -9.07191e-07 9.85581e-06 DIIS; 401: @DF-RHF iter 7: -75.98014187224302 -6.03315e-09 1.00607e-06 DIIS; 401: @DF-RHF iter 8: -75.98014187231389 -7.08695e-11 1.20203e-07 DIIS; 401: ; 401: ==> Post-Iterations <==; 401: ; 401: Orbital Energies [Eh]; 401: ---------------------; 401: ; 401: Doubly Occupied: ; 401: ; 401: 1A1 -20.568888 2A1 -1.334711 1B2 -0.686874 ; 401: 3A1 -0.554298 1B1 -0.499284 ; 401: ; 401: Virtual: ; 401: ; 401: 4A1 0.193417 2B2 0.287599 3B2 1.041506 ; 401: 5A1 1.130379 2B1 1.164432 6A1 1.220999 ; 401: 4B2 1.368964 7A1 1.693510 ; 401: ; 401: Final Occupation by Irrep:; 401: A1 A2 B1 B2 ; 401: DOCC [ 3, 0, 1, 1 ]; 401: ; 401: Energy converged.; 401: ; 401: @DF-RHF Final Energy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:6528,Energy,Energy,6528,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Energy'],['Energy']
Energy Efficiency,"e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 6.464 GiB; user supplied 6.464 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90916690803959 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -306.98727406041530 -7.81072e-02 1.83756e-03 DIIS; @DF-RKS iter 2: -307.13667252428678 -1.49398e-01 1.47236e-03 DIIS; @DF-RKS iter 3: -307.32880507487312 -1.92133e-01 1.25216e-04 DIIS; @DF-RKS iter 4: -307.32990958370664 -1.10451e-03 7.65745e-05 DIIS; @DF-RKS iter 5: -307.33036354773054 -4.53964e-04 1.70705e-05 DIIS; @DF-RKS iter 6: -307.33039129462924 -2.77469e-05 5.09682e-06 DIIS; @DF-RKS iter 7: -307.33039390006070 -2.60543e-06 1.20852e-06 DIIS; @DF-RKS iter 8: -307.33039428809019 -3.88029e-07 4.42881e-07 DIIS; Energy and wave function converged.; ```. Both jobs were run with 8 threads and 29337MB of memory, on the same machine (An `Intel(R) Xeon(R) Gold 6126 CPU @ 2.60GHz`). As my be relevant, other settings are:; ```set {; guess sad; fail_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; ```. Should I have expected cherry-picking 9163cbd08865d26129cfbaf5c302fc14f870f30f into 1.4 to have resolved this discrepancy? Or should I be making `set wcombine false` a standard part of my scripts for now?. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:2783,Energy,Energy,2783,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182,1,['Energy'],['Energy']
Energy Efficiency,"e-06 0.0042 y n ; 41 10 1 1.649e-06 3.299e-06 0.0042 y n ; 42 11 1 1.116e-06 2.232e-06 0.0042 y n ; 43 12 1 7.351e-07 1.470e-06 0.0042 y n ; 44 13 2 4.965e-07 9.931e-07 0.0042 y y Converged.; --------------------------------------------------------------------------------; Davidson Summary: ; ------------------------------------------------------------; State 0: excitation energy = 0.0042 a.u. (converged); State 1: excitation energy = 0.0607 a.u. (converged); ------------------------------------------------------------. --------------------------------------------------------------------------------; Excited State Summary; --------------------------------------------------------------------------------; --------------------------------------------------------------------------------. Excited state 1 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 2 (1) A R^2 = 4.36142e-13. Total energy: -908.4624177856 a.u.; Excitation energy: 0.113938 eV. Osc. strength: 0.006302; Trans. dip. moment [a.u.]: [ 0.022562, -1.502315, -0.006471]; <i|r^2|0> [a.u.]: [ 0.119363, -0.062262, 0.001507]. V1^2 = 0.8818, V2^2 = 0.1182. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; 69 (A) A 70 (A) A -0.6410; 69 (A) A 73 (A) A -0.1086; ---------------------------------------------------------; ----------------------------------------------------------------------------. Excited state 2 (singlet, A) [converged]; ----------------------------------------------------------------------------; Term symbol: 3 (1) A R^2 = 9.93080e-07. Total energy: -908.4058618791 a.u.; Excitation energy: 1.652903 eV. Osc. strength: 0.003742; Trans. dip. moment [a.u.]: [ -0.000934, -0.303942, -0.005679]; <i|r^2|0> [a.u.]: [ 0.050382, -0.071767, 0.005428]. V1^2 = 0.8715, V2^2 = 0.1285. Important amplitudes:; occ i occ j vir a vir b v ; ---------------------------------------------------------; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190:4305,energy,energy,4305,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482557190,1,['energy'],['energy']
Energy Efficiency,"e-06 ; 3 -75.7907190240 -1.60e-05 4.26e-04 1.69e-03 5.72e-07 ; 4 -75.7907244154 -5.39e-06 2.25e-04 1.39e-03 2.96e-07 ; 5 -75.7907266815 -2.27e-06 1.20e-04 1.13e-03 1.64e-07 ; 6 -75.7907291572 -2.48e-06 9.37e-05 4.54e-04 2.34e-07 ; 7 -75.7907295719 -4.15e-07 2.53e-05 2.18e-04 7.57e-08 . ============================================================================== ; ======================== DF-OMP2.5 ITERATIONS ARE CONVERGED ================== ; ============================================================================== . Computing DF-MP2.5 energy using optimized MOs... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; SCF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; Alpha-Alpha Contribution (a.u.) : -0.02415964277065; Alpha-Beta Contribution (a.u.) : -0.12430830985037; Beta-Beta Contribution (a.u.) : -0.01107306313769; DF-MP3 Correlation Energy (a.u.) : -0.16666563305500; DF-MP3 Total Energy (a.u.) : -75.79855149249789; DF-MP2.5 Correlation Energy (a.u.) : -0.15954101575872; DF-MP2.5 Total Energy (a.u.) : -75.79072957315965; ======================================================================= . ======================================================================= ; ================ DF-OMP2.5 FINAL RESULTS ============================== ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 9.18738645758982; DF-HF Energy (a.u.) : -75.63188585944289; REF Energy (a.u.) : -75.63118855740093; DF-OMP2.5 Correlation Energy (a.u.): -0.15884371245450; Edfomp2.5 - Eref (a.u.) : -0.15954101449645; DF-OMP2.5 Total Energy (a.u.) : -75.79072957189739; ======================================================================= ; ```. The Lagrangian energy and the final energy now agree perfectly, despite only a tiny change in the Lagrangian energy. However, the key is to note that the lines; ```; 	Orbitals are optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1509:2299,Energy,Energy,2299,https://psicode.org,https://github.com/psi4/psi4/issues/1509,1,['Energy'],['Energy']
Energy Efficiency,"e-spin and opposite-spin terms, b/c those terms; refer to the doubles, and singles are held out as separate (; https://aip.scitation.org/doi/10.1063/1.2883974 ). On Thu, Aug 15, 2019 at 5:50 PM Lori A. Burns <notifications@github.com>; wrote:. > Note this is only a psivars issue -- printed energies are fine.; >; > singles contributions to UHF & ROHF CCSD (; > https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/energy.cc#L132-L137); > and below) aren't getting stored in psivars. in consequence, CCSD; > SAME-SPIN CORRELATION ENERGY and CCSD OPPOSITE-SPIN CORRELATION ENERGY; > don't sum to CCSD CORRELATION ENERGY.; >; > - for the CC people out there -- speak up if the CCSD analogs of the; > following definitions offend. they're what qcschema is using; > <https://github.com/MolSSI/QCSchema/blob/a4329e626903ec0391d21179f0754bdc65e6831b/qcschema/dev/properties/cc_properties.py#L7-L38>; >; > qcvardefs['MP2 SAME-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from same-spin or triplet doubles correlations.; >; > canonical_corl(os_scale=1, ss_scale=1) = singles + os_scale * (tot_corl - ss_corl) + ss_scale * ss_corl; > :math:`E_{\text{SS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 OPPOSITE-SPIN CORRELATION ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The unscaled portion of the MP2 correlation energy; > from opposite-spin or singlet doubles correlations.; > :math:`E_{\text{OS}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 SINGLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The singles portion of the MP2 correlation energy.; > Zero except in ROHF.; > :math:`E_{\text{S}}` in Eq. :eq:`MP2corl`.; > """"""}; >; > qcvardefs['MP2 DOUBLES ENERGY'] = {; > 'units': 'Eh',; > 'glossary': r""""""; > The doubles portion of the MP2 correlation energy; > including same-spin and opposite-spin correlations.; > :math:`E_{\text{D}}` in Eq. :eq:`MP2corl`.; > """"""}; >; >; > - let",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517:1051,ENERGY,ENERGY,1051,https://psicode.org,https://github.com/psi4/psi4/issues/1702#issuecomment-522097517,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"e. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _now deprecated_. Psi4 won't pay the least attention to the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:1053,adapt,adapted,1053,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['adapt'],['adapted']
Energy Efficiency,"e/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - MP3/cc-pVDZ & MP4/cc-pVDZ: *FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:10358,energy,energy,10358,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,e; 375/412 Test #386: psi4numpy-fci .................... Passed 9.39 sec; Start 390: python-pubchem; 376/412 Test #375: dft-custom-gga ................... Passed 34.06 sec; Start 391: python-mints9; 377/412 Test #389: python-curve ..................... Passed 4.70 sec; Start 392: python-mints2; 378/412 Test #391: python-mints9 .................... Passed 2.13 sec; Start 393: python-cc54; 379/412 Test #392: python-mints2 .................... Passed 3.94 sec; Start 394: python-3-index-transforms; 380/412 Test #321: sapt6 ............................ Passed 171.44 sec; Start 396: python-mints13; 381/412 Test #396: python-mints13 ................... Passed 1.98 sec; Start 397: python-memdfjk; 382/412 Test #397: python-memdfjk ................... Passed 1.74 sec; Start 398: json-v11-energy; 383/412 Test #394: python-3-index-transforms ........ Passed 12.36 sec; Start 399: json-v11-gradient; 384/412 Test #399: json-v11-gradient ................ Passed 1.56 sec; Start 400: json-schema-1-energy; 385/412 Test #398: json-v11-energy .................. Passed 4.06 sec; Start 401: json-schema-1-ghost; 386/412 Test #401: json-schema-1-ghost .............. Passed 1.76 sec; Start 402: json-schema-1-orient; 387/412 Test #402: json-schema-1-orient ............. Passed 2.50 sec; Start 403: json-schema-1-throws; 388/412 Test #400: json-schema-1-energy ............. Passed 5.58 sec; Start 404: json-schema-1-gradient; 389/412 Test #403: json-schema-1-throws ............. Passed 0.67 sec; Start 405: json-schema-1-properties; 390/412 Test #404: json-schema-1-gradient ........... Passed 2.22 sec; Start 406: skeleton; 391/412 Test #405: json-schema-1-properties ......... Passed 1.81 sec; Start 407: skeletonaointegrals; 392/412 Test #407: skeletonaointegrals .............. Passed 3.33 sec; Start 408: skeletondfmp2; 393/412 Test #406: skeleton ......................... Passed 3.87 sec; Start 409: skeletonmointegrals; 394/412 Test #393: python-cc54 ...................... Passed 28.49 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:36082,energy,energy,36082,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,2,['energy'],['energy']
Energy Efficiency,e; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.08 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.29 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.22 sec; Start 409,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:36892,energy,energy,36892,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,e; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.90 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Start 407: skeletondfmp2; 407/411 Test #407: skeletondfmp2 .................... Passed 1.33 sec; Start 408: skeletonmointegrals; 408/411 Test #408: skeletonmointegrals .............. Passed 1.07 sec; Start 409,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:36921,energy,energy,36921,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,e; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1276,energy,energy,1276,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,e; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1278,energy,energy,1278,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,"ear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.29114",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1000,ENERGY,ENERGY,1000,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['ENERGY'],['ENERGY']
Energy Efficiency,"easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are taking a step down in energy. At variance, the first step in DIIS is usually up in energy, and it takes you a few steps to recover from. I'm sure there is always a use for the real second-order methods, but - when properly preconditioned - the gradient descent methods work really well, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:4707,energy,energy,4707,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,3,['energy'],['energy']
Energy Efficiency,"eavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ----------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3571,ENERGY,ENERGY,3571,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ec 2, 2019 at 10:21 AM Jonathon Misiewicz <notifications@github.com>; wrote:. > According to the documentation; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330>; > of sotoao(), the function is supposed to return the inverse of; > PetiteList.aotoso(). This matrix is not guaranteed to be invertible. If; > the matrix is *not* invertible, multiplying sotoao() and aotoso(); > together does not yield the identity matrix.; >; > The problem is that aotoso() isn't even guaranteed to be square. The SO; > space will always be the number of basis functions; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639>.; > The AO space will be the number of basis functions or the number of; > atomic orbitals; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620>,; > depending on whether include_pure_transform_ is set. In other words, you; > may be transforming from either Cartesian or pure angular momentum; > functions to symmetry-adapted pure angular momentum functions. If d or; > higher angular momentum functions are present, then choosing to transform; > from Cartesian functions means you have more atomic orbitals than basis; > functions, so the row and column dimensions don't match. The transformation; > isn't even square, let alone invertible, so of course sotoao() returns; > nonsense.; >; > The following input file almost demonstrates the problem. You'll need to; > PyBind the PetiteList initializer over as well for it to run.; >; > molecule mol {; > 0 3; > symmetry c1; > C 0.0000000000 0.0000000000 -0.5928430915; > H -0.0000000000 0.9469373770 -1.1509808737; > H 0.0000000000 -0.9469373770 -1.1509808737; > }; >; > basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); > factory = core.IntegralFactory(basis); >; > # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses.; >; > # We have a problem!; > petite = core.PetiteList(basis, fa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475:1216,adapt,adapted,1216,https://psicode.org,https://github.com/psi4/psi4/issues/1763#issuecomment-560454475,1,['adapt'],['adapted']
Energy Efficiency,"ec(content); E File ""<string>"", line 29, in <module>; E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; E return qcel.testing.compare_values(expected, computed, **kwargs); E File ""/psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py"", line 178, in compare_values; E return return_handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:8431,energy,energy,8431,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['energy'],['energy']
Energy Efficiency,ec; Start 324: scf-upcast-custom-basis; 335/401 Test #381: psi4numpy-rhf-hessian ............ Passed 3.32 sec; Start 323: scf-guess-read1; 336/401 Test #209: mints2 ........................... Passed 3.21 sec; Start 351: scf-response1; 337/401 Test #125: dfccsd-t-grad1 ................... Passed 38.87 sec; Start 212: mints5; 338/401 Test #310: sad1 ............................. Passed 3.89 sec; Start 8: castup1; 339/401 Test #33: cc18 ............................. Passed 43.81 sec; Start 400: json-schema_0_gradient; 340/401 Test #387: python-mints9 .................... Passed 2.08 sec; Start 378: psi4numpy-dfmp2; 341/401 Test #304: pywrap-db3 ....................... Passed 1.13 sec; Start 171: docs-dft; 342/401 Test #138: dfomp2-1 ......................... Passed 17.53 sec; Start 393: python-memdfjk; 343/401 Test #341: dfep2-2 .......................... Passed 2.51 sec; Start 347: stability2; 344/401 Test #187: fcidump .......................... Passed 6.32 sec; Start 348: tu1-h2o-energy; 345/401 Test #119: dfccd1 ........................... Passed 3.69 sec; Start 170: docs-bases; 346/401 Test #92: cisd-h2o+-0 ...................... Passed 3.19 sec; Start 326: scf-bs; 347/401 Test #207: mcscf3 ........................... Passed 1.36 sec; Start 399: json-schema_0_throws; 348/401 Test #212: mints5 ........................... Passed 1.05 sec; Start 305: pywrap-molecule; 349/401 Test #394: json-v11_energy .................. Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 .............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:32666,energy,energy,32666,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,ec; Start 410: skeletonsointegrals; 373/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 398: json-v11-gradient; 374/411 Test #411: skeletonwavefunction ............. Passed 0.99 sec; Start 210: mcscf2; 375/411 Test #333: scf2 ............................. Passed 1.33 sec; Start 330: scf-bs; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy ................... Passed 0.84 sec; Start 378: mints12; 384/411 Test #188: fci-tdm .......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:35845,energy,energy,35845,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"ection without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHE",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1618,ENERGY,ENERGY,1618,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ecule {; H; H 1 0.60; }. set basis cc-pVDZ; set docc [ 1, 0, 0, 0, 0, 0, 0, 0 ]; # STO-3G active space; set active [1, 0, 0, 0, 0, 1, 0, 0 ]; energy('casscf'); ```; fails with the up-to-date master branch with the error message; ```; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/proc.py"", line 5483, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/work/psi4/install/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 153, in mcscf_solver; nci_iter = ciwfn.diag_h(abs(ediff) * 1.e-2, orb_grad_rms * 1.e-3). RuntimeError: ; Fatal Error: DSYEV diagonalizer failed in DETCI SEM!; Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""cc-pVDZ""); core.set_global_option(""DOCC"", [ 1, 0, 0, 0, 0, 0, 0, 0 ]); core.set_global_option(""ACTIVE"", [1, 0, 0, 0, 0, 1, 0, 0 ]); --> energy('casscf'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: DSYEV diagonalizer failed in DETCI SEM! !; ! Error occurred in file: /home/work/psi4/psi4/src/psi4/detci/sem.cc on line: 561 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! !; !----------------------------------------------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3096:1488,energy,energy,1488,https://psicode.org,https://github.com/psi4/psi4/issues/3096,1,['energy'],['energy']
Energy Efficiency,ed 15.43 sec; Start 399: json-v11-gradient; 385/412 Test #381: psi4numpy-cphf ................... Passed 14.94 sec; Start 401: json-schema-1-ghost; 386/412 Test #384: psi4numpy-rhf-gradient ........... Passed 14.67 sec; Start 379: mints12; 387/412 Test #355: tu2-ch2-energy ................... Passed 14.64 sec; Start 310: pywrap-molecule; 388/412 Test #397: python-memdfjk ................... Passed 14.35 sec; Start 388: python-energy; 389/412 Test #405: json-schema-1-properties ......... Passed 14.49 sec; Start 335: scf3; 390/412 Test #215: mints3 ........................... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37114,energy,energy,37114,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,ed 22.50 sec; Start 397: python-memdfjk; 369/412 Test #396: python-mints13 ................... Passed 23.34 sec; Start 215: mints3; 370/412 Test #404: json-schema-1-gradient ........... Passed 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35822,energy,energy,35822,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,"ed here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of electrons to exchange between A and B. **Nonapproximated**, **Nonexpanded**, and **beyond-S^2** are all formally more correct names than S^infinity. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:2125,energy,energy,2125,https://psicode.org,https://github.com/psi4/psi4/pull/2314,2,"['energy', 'power']","['energy', 'power']"
Energy Efficiency,"ed: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current input is correct to reproduce it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:3138,Energy,Energy,3138,https://psicode.org,https://github.com/psi4/psi4/issues/1975,8,['Energy'],['Energy']
Energy Efficiency,"ed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0.013096; 4A 0.031501 5A 0.060513 6A 0.060513; 7A 0.069525 8A 0.095086 9A 0.095086; 10A 0.137869 11A 0.165536 12A 0.208043; 13A 0.433342 14A 0.433342 15A 0.441856; 16A 0.441856 17A 0.448174 18A 0.472941; 19A 1.496359 20A 1.532476 21A 2.670316; 22A 2.670316 23A 2.674872 24A 2.674872; 25A 2.681167 26A 2.694559. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @UHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594355422; Two-Electron Energy = 1.0674974882236108; Total Energy = -4.3332496681624875. ```; **output ROHF**; ```; ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. Singly Occupied:. 1A -1.100095 2A -1.099427 3A -0.089533; 4A -0.038589. Virtual:. 5A 0.029531 6A 0.035908 7A 0.035908; 8A 0.073244 9A 0.073244 10A 0.106854; 11A 0.112697 12A 0.153001 13A 0.409470; 14A 0.409470 15A 0.418444 16A 0.418444; 17A 0.422709 18A 0.447857 19A 1.338927; 20A 1.377853 21A 2.585893 22A 2.585893; 23A 2.590572 24A 2.590572 25A 2.596665; 26A 2.610180. Final Occupation by Irrep:; A; DOCC [ 0 ]; SOCC [ 4 ]. @ROHF Final Energy: -4.33324966816249. => Energetics <=. Nuclear Repulsion Energy = 0.5479443030494435; One-Electron Energy = -5.9486914594321973; Two-Electron Energy = 1.0674974882202668; Total Energy = -4.3332496681624875; ```. EDIT: there was a typo in SAPT0(ROHF) E20exch-ind comparision, current inp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:3096,Energy,Energy,3096,https://psicode.org,https://github.com/psi4/psi4/issues/1975,1,['Energy'],['Energy']
Energy Efficiency,"edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1566,ENERGY,ENERGY,1566,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"eference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, superfunc). RuntimeError:; Fatal Error: Input DOCC array ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1199,ENERGY,ENERGY,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"elta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; Iter=39 L=17 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 2.70e-10 8.97e-07 Y; 2 0.3285655295 -6.61e-11 3.51e-06 N; Iter=40 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016049 1.54e-09 8.13e-07 Y; 2 0.3285655298 2.62e-10 3.34e-06 N; Iter=41 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 1.05e-10 7.91e-07 Y; 2 0.3285655298 -2.41e-11 3.31e-06 N; Iter=42 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016056 5.33e-10 7.73e-07 Y; 2 0.3285655297 -9.36e-11 3.26e-06 N; Iter=43 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016050 -5.70e-10 7.66e-07 Y; 2 0.3285655297 1.62e-11 3.26e-06 N; Iter=44 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016043 -7.30e-10 7.68e-07 Y; 2 0.3285655297 -2.33e-11 3.26e-06 N; Iter=45 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016047 4.83e-10 7.73e-07 Y; 2 0.3285655297 -1.39e-12 3.26e-06 N; Collapsing to only 2 vector(s). Procedure converged for 1 root(s). Algorithm failure: No vectors could be added, though not all roots converged!. EOM CCSD R0 for root 0 = 0.00000000000. Final Energetic Summary for Converged Roots of Irrep B1g; Excitation",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:2277,Energy,Energy,2277,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,elta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Iter=38 L=16 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016031 4.09e-10 9.77e-07 Y; 2 0.3285655296 -2.10e-10 3.48e-06 N; It,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1136,Energy,Energy,1136,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,"ema(conformer=0); psi4.set_num_threads(4); psi4.set_memory(5e+9). xtb_opt = xtb_ff_opt(qc_mol=qc_mol); opt_molecule = Molecule.from_qcschema(xtb_opt); conformer_Ang = opt_molecule.conformers[0].to(unit.angstrom).m. #Generate Grid to calculate properties to; grid = generate_grid(molecule = molecule, ; conformer= opt_molecule.conformers[0].to(unit.bohr), ; grid_settings=grid_settings); grid = grid.to(unit.angstrom).m; numpy.savetxt(""grid.dat"", grid, delimiter="" "", fmt=""%16.10f""). psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT_EPSILON"": 70.84,; ""DDX_RADII_SET"": ""uff"",; ""DDX_MODEL"": ""PCM""}). conformer_Ang_string = ""nocom\nnoreorient\n""; for index, atom in enumerate(opt_molecule.atoms):; conformer_Ang_string += f""{SYMBOLS[atom.atomic_number]}\t{conformer_Ang[index, 0]}\t{conformer_Ang[index, 1]}\t{conformer_Ang[index, 2]}\n"". molecule_psi4 = psi4.geometry(conformer_Ang_string.strip()); print(molecule_psi4); molecule_psi4.set_units(GeometryUnits.Angstrom). E, wfn = psi4.energy('PBE0-D3BJ/def2-TZVPPD', molecule = molecule_psi4, return_wfn = True); psi4.oeprop(wfn,""GRID_ESP"",""GRID_FIELD"",""MULLIKEN_CHARGES"", ""LOWDIN_CHARGES"", ""DIPOLE"",""QUADRUPOLE"", ""MBIS_CHARGES""); print( wfn.variable(""MULLIKEN_CHARGES"")); log_memory_usage(); #very basic error handling; except Exception as e:; continue. if __name__ == ""__main__"":; main(); ```. For the minimal example above, memory usage slowly rises too (I have checked the QCEngine tools and this is not occurring here):. ```; Memory Usage: 484.4296875 MB; Memory Usage: 632.46875 MB; Memory Usage: 634.3203125 MB; Memory Usage: 635.75390625 MB; Memory Usage: 636.6015625 MB; Memory Usage: 676.36328125 MB; Memory Usage: 676.7109375 MB; Memory Usage: 676.7421875 MB; Memory Usage: 676.77734375 MB; Memory Usage: 676.8046875 MB; Memory Usage: 676.890625 MB; Memory Usage: 676.921875 MB; Memory Usage: 676.98828125 MB; Memory Usage: 677.015625 MB; Memory Usage: 677.03125 MB; ```. Apologies for the long post but I wanted to add as much info as possible!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3146:8309,energy,energy,8309,https://psicode.org,https://github.com/psi4/psi4/issues/3146,1,['energy'],['energy']
Energy Efficiency,"en a while that I looked into this. I managed to write post-SCF natural orbitals to a molden file, but there is still a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` functio",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1029,Charge,Charges,1029,https://psicode.org,https://github.com/psi4/psi4/issues/1485,1,['Charge'],['Charges']
Energy Efficiency,"en using H+ as the compound in a SAPT calculation it crashes with a divide by zero error:. ```; File ""/var/spool/slurm/d/job333055/slurm_script"", line 21, in <module>; myener = psi4.energy(""sapt2+(ccd)dmp2""); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4581, in run_sapt; monomerA_wfn = scf_helper('RHF', molecule=monomerA, **kwargs); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1887, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 99, in scf_compute_energy; scf_energy = self.finalize_energy(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 692, in scf_finalize_energy; self.print_energies(); File ""/home/spoel/miniconda3/lib/python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 804, in scf_print_energies; self.set_variable(""HF VIRIAL RATIO"", - potential / ke) # P::e SCF; ZeroDivisionError: float division by zero; ```. The script to reproduce this is below. ```; #!/usr/bin/env python3; import os; import numpy as np; import psi4 as psi4; psi4.core.set_num_threads(4); psi4.set_options({""cachelevel"": 1, ""print"": 1}); psi4.set_memory(12000000000); psi4_io = psi4.core.IOManager.shared_object(); psi4.core.set_output_file('hcl-sapt.log', False); geometry= """"""; 1 1; H -0.0 0.0 -1.36; --; -1 1; Cl 0.0 0.0 1; """"""; geom = psi4.geometry(geometry); psi4.basis_helper(""""""; assign aug-cc-pvtz; """"""); myener = psi4.energy(""sapt2+(ccd)dmp2""); for ener in [ 'SAPT ELST ENERGY', 'SAPT EXCH ENERGY', 'SAPT IND ENERGY', 'SAPT DISP ENERGY', 'SAPT TOTAL ENERGY' ]:; print(""%s %g"" % ( ener, psi4.variable(ener) )); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156:1807,energy,energy,1807,https://psicode.org,https://github.com/psi4/psi4/issues/3156,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"en. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result with our analytic gradient.; > ; > ## Here is the G09 result:; > ; > Center Atomic Forces (Hartrees/Bohr); > ; > ## Number Number X Y Z; > ; > 1 1 0.000000000 0.00",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1862,energy,energy,1862,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['energy'],['energy']
Energy Efficiency,"en. I was wondering if there is a current work around? I tried some simple experiments to see if it was still producing the incorrect output:; `> psi4 --version`; `1.7`; input file contents:; ```; mol = psi4.geometry(""""""; H 0.000 0.000 0.000; H 0.000 0.000 0.740; Symmetry c1; """"""); psi4.set_options({'basis': 'sto-3g'}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); print(""MO coefficients""); print(wfn.Ca().to_array()); print(""Fock in the AO basis""); print(wfn.Fa_subset(""AO"").to_array()); print(""Fock in the MO basis""); print(wfn.Fa_subset(""MO"").to_array()); ```; this gives the following output:; ```; MO coefficients ; [[ 0.54884228 1.21245192]; [ 0.54884228 -1.21245192]]; Fock in the AO basis; [[-0.36607883 -0.59428702]; [-0.59428702 -0.36607883]]; Fock in the MO basis; [[-1.59408547e+00 8.04278118e-16]; [ 7.39285035e-16 7.76197397e-02]]; ```; and in the output file; ```; Orbital Energies [Eh]; ---------------------; Doubly Occupied: ; 1A -0.578578 ; Virtual: ; 2A 0.670950 ; @DF-RHF Final Energy: -1.11678331788308; ```; the orbital energies in the output file are correct, which should be the diagonal elements of the Fock matrix in the MO basis, but these are different. . I check the AO and MO coefficients produced by two other QM programs (pyscf is below) to see where the inconsistency might be, they both produced the ""correct"" Fock matrix (i.e. the diagnoal elements in the MO basis are the orbital energies) with the following MO coefficients:; pyscf input; ```; import numpy; from pyscf import gto, scf, lo. geometry = '''; H 0.000 0.000 0.000; H 0.000 0.000 0.740; ''' . mol = gto.M(atom=geometry,; basis='STO-3G') ; mf = scf.RHF(mol); mf.kernel(); print(mf.kernel()); Fao = mf.get_fock(); print(""MO coefficients""); print(mf.mo_coeff); print(""Fock in AO basis""); print(Fao); Fmo = mf.mo_coeff.T @ Fao @ mf.mo_coeff; print(""Fock in MO basis""); print(Fmo); ```; ```; converged SCF energy = -1.11675930739643; -1.1167593073964255; MO coefficients; [[ 0.54884228 -1.21245192];",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699:1049,Energy,Energy,1049,https://psicode.org,https://github.com/psi4/psi4/issues/1989#issuecomment-1533272699,1,['Energy'],['Energy']
Energy Efficiency,"ence actually has some; influence. (Usually, we say that the HF is ""irrelevant"" in a CASSCF; computation). The issue is that the code can't determine what irrep; your target wavefunction is supposed to be, because you haven't given it; information about the orbital occupancy of the reference HF wavefunction.; I think if you specified docc [] and socc [] arrays for the reference; high-spin triplet, the code would have a much better chance to figure out; what you want. On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; wrote:. > I'm hoping to do atomic MCHF calculations with Psi4, which amount to small; > CASSCF calculations. However, I can't get DETCI to run the calculations for; > me.; >; > Take the oxygen atom for example. The 3P state has 4 electrons on the P; > shell. DETCI correctly determines that there is 1 alpha string (since the; > shell is fully occupied) and 3 beta strings, but then it says that the CI; > space only has a single determinant and crashes.; >; > Example inputs; >; > molecule {; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; > set active [0, 0, 0, 0, 0, 1, 1, 1]; > energy('casscf'); >; > or a lower symmetry; >; > molecule {; > symmetry c2h; > 0 3; > O; > }; >; > set basis cc-pVDZ; > set reference rohf; > set restricted_docc [2, 0, 0, 0]; > set active [0, 0, 1, 2]; > energy('casscf'); >; > I guess the problem is that DETCI can't find a proper symmetry? Is there a; > way to circumvent this issue? @CDSherrill <https://github.com/CDSherrill>; > ?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572203700,2,['energy'],['energy']
Energy Efficiency,"ence': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available option",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3616,energy,energy,3616,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ence, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting reference.; > > ; > > Lori; > > ; > > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > > wrote:; > > > ; > > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > > That sounds ok to me (then reference just has to be defined properly).; > > > ; > > > What about DFT, do we define functional properly and do energy('dft'),; > > > etc.?; > > > ; > > > David; > > > ; > > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > > ; > > > wrote:; > > > ; > > > > Fixed by 6f6d3aa; > > > > <; > > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > > ; > > > > though I rather think now that defining; > > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > > itself).; > > > > Nevertheless, as this ticket points out, having defined these names; > > > > only; > > > > for energy() confounds the driver logic. These convenience names are; > > > > now in; > > > > place for gradient() and property().; > > > > ; > > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > > prop() if othe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:4171,energy,energy,4171,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['energy'],['energy']
Energy Efficiency,"end = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4b93fc0>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:11624,energy,energy,11624,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wf",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:2029,Energy,Energy,2029,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,energy('lccd') calls fnocc's CEPA(0) (without singles). You can get an equivalent energy (for closed shells) for. set reference uhf; set ao_basis none; set dcft_functional cepa0; set algorithm twostep; print energy('dcft'),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/714#issuecomment-302571941:0,energy,energy,0,https://psicode.org,https://github.com/psi4/psi4/issues/714#issuecomment-302571941,3,['energy'],['energy']
Energy Efficiency,energy; 373/411 Test #387: python-energy .................... Passed 1.23 sec; Start 388: python-curve; 374/411 Test #385: psi4numpy-fci .................... Passed 5.25 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 2.96 sec; Start 390: python-mints9; 376/411 Test #390: python-mints9 .................... Passed 1.96 sec; Start 391: python-mints2; 377/411 Test #391: python-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:35875,energy,energy,35875,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"ent but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd-ccd E; - [x] uhf cd-ccsd E; - [x] uhf cd-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized); - [x] uhf cd a-ccsd(t) E (present but experimental (require `set qc_module occ`) until further optimized). ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] pick over canonical methods and run some basic timings tests; - [x] TODO: kill `new` pass; - [x] TODO: there might be UHF CCD in there, too.; - [x] TODO: merge #2731 first. it has a lot of stdsuite changes that I don't want to rebase through. nevertheless, stdsuite on the new methods is working fine locally. the azure errors are that uhf cc methods are running rather than throwing NYI as it expects.; - [x] TODO: df ccsd(t) gradients need to be marked experimental and semi-hidden until optimization. REVISED 25 Oct; ```; Module comparison timings [s] for CCSD & CCSD(T) energy & gradient; * Benzene, C6H6; * Either aug-cc-pVDZ (192 nbf) or cc-pVDZ (119 nbf); all-electron; * Same singlet system run as RHF & UHF; * CC converged to 1e-7; * 20 GiB, 8 threads. GRADIENT ENERGY; symm c1 symm c1; ---- ---- ---- ----; <<< CCSD/aug-cc-pVDZ >>>. cfour (vcc) rhf conv 132 1650 52 1202 ; ccenergy rhf conv 266 2037 92 1099; dfocc rhf df n/a 420 n/a 230; fnocc rhf df n/a 149. cfour uhf conv 225 3473 90 2413 ; ccenergy uhf conv 463 5196 222 2576; dfocc uhf df n/a 1545 n/a 826. cfour u/r ratio 1.7 2.1 1.7 2.0 ; ccenergy u/r ratio 1.7 2.5 2.4 2.3; dfocc u/r ratio n/a 3.7 n/a 3.6; ```. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2739:1813,energy,energy,1813,https://psicode.org,https://github.com/psi4/psi4/pull/2739,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ent vec, rotation mat, and atom map to get best Kabsch overlap (@dsirianni code) between two molecules. Uses Hungarian algorithm+ for atom shuffling. In that case, required `hungarian` and `networkx` add'l packages. Handles shuffled atoms up to at least benzene trimer and more if haven't too many symmetry-equivalent atoms. Really good for perfect matches, fine but untuned for imperfect matches. Also provides functions that use that return set to properly manipulate list, vec, mol, grad, hess (hess untested). Upon request, also tests mirror-image alignment.; - Remove everything beyond constructing the Cartesian Hessian from findif, including VIBRATION class; - Remove the c-side thermo module ; - Adds extensive vib test on HOOH-TS, CO2, ethene, H2CO, methane that checks freqs _and_ normco of each mol vs. Cfour output for following conditions; - Cfour Hessian (tests harmonic analysis machinery); - Psi freq by grad; - Psi freq by energy; - Psi freq by analytic ~(only methane and ammonia pass)~ All pass now, thanks to @andysim ; - [x] fix the embarrassing bug (I'll do you a coding favor if you spot it, but I'm not admitting it otherwise); - [x] better handle non-stationary. probably need an option to force-rot-space-inclusion but by default, `frequency()` does a gradient to determine if rotational projection is safe, then another flag to query external field and company to see if even translational projection is appropriate. ; - [x] more testing of isotopic, partial, non-stationary, etc., particularly wrt normco not just freq; - Add `compare_dicts` and `compare_molrecs` comparison functions. Former uses `deepdiff` module and does recursive comparison (sensitive to types). Can exempt fields with `forgive` arg. Latter makes use of former and also allows geoms to change if warranted by fix_com/orientation (checks via aligner).; - convert qcdb test suite from GnuMake (yes, that old) to pytest. switch compare_* fns to raise `TestComparisonError`, not `sys.exit(1)`.; - have to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834:11323,energy,energy,11323,https://psicode.org,https://github.com/psi4/psi4/pull/834,1,['energy'],['energy']
Energy Efficiency,"ential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9240,energy,energy,9240,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"enylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2616,energy,energy,2616,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,eq1 ...................... Passed 240.27 sec; Start 77: cc7; 17/412 Test #196: fd-freq-gradient-large ........... Passed 290.96 sec; Start 159: dfscf-bz2; 18/412 Test #182: fsapt-allterms ................... Passed 603.67 sec; Start 98: cisd-opt-fd; 19/412 Test #112: dcft5 ............................ Passed 195.44 sec; Start 115: dcft8; 20/412 Test #374: dft-custom-mgga .................. Passed 190.44 sec; Start 306: pywrap-checkrun-rohf; 21/412 Test #113: dcft6 ............................ Passed 168.02 sec; Start 348: sapt-dft2; 22/412 Test #159: dfscf-bz2 ........................ Passed 147.69 sec; Start 30: cc14; 23/412 Test #321: sapt6 ............................ Passed 169.03 sec; Start 184: isapt2; 24/412 Test #146: dfomp2-grad3 ..................... Passed 348.19 sec; Start 13: cbs-xtpl-alpha; 25/412 Test #43: cc27 ............................. Passed 216.94 sec; Start 26: cc13a; 26/412 Test #98: cisd-opt-fd ...................... Passed 132.73 sec; Start 114: dcft7; 27/412 Test #194: fd-freq-energy-large ............. Passed 520.95 sec; Start 206: frac-traverse; 28/412 Test #77: cc7 .............................. Passed 226.39 sec; Start 317: sapt2; 29/412 Test #348: sapt-dft2 ........................ Passed 124.46 sec; Start 319: sapt4; 30/412 Test #307: pywrap-checkrun-uhf .............. Passed 393.60 sec; Start 326: scf-bz2; 31/412 Test #395: python-vibanalysis ............... Passed 825.22 sec; Start 155: dft-grad-lr2; 32/412 Test #184: isapt2 ........................... Passed 120.44 sec; Start 25: cc13; 33/412 Test #305: pywrap-checkrun-rhf .............. Passed 413.09 sec; Start 169: dft1; 34/412 Test #30: cc14 ............................. Passed 145.98 sec; Start 282: opt-irc-2; 35/412 Test #115: dcft8 ............................ Passed 187.59 sec; Start 45: cc29; 36/412 Test #306: pywrap-checkrun-rohf ............. Passed 207.51 sec; Start 360: tu6-cp-ne2; 37/412 Test #13: cbs-xtpl-alpha ................... Passed 176.77 sec; Start 380: cc-mod,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:2912,energy,energy-large,2912,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy-large']
Energy Efficiency,"equency calculations becoming exceedingly slow and I wonder what is the reason if there is something wrong with my setup. . **Question 1**. The molecule I am working with is private but I have provided a z-matrix of methanol as a test:. ```python. methanol = """"""\; O11; H11 O11 0.9316; C11 O11 1.4349 H11 107.5890; H12 C11 1.1029 O11 111.8699 H11 0.0000; H13 C11 1.1029 O11 111.8699 H11 122.9683; H14 C11 1.1029 O11 111.8699 H11 -118.5158; """"""; ```. Picture:. <img width=""413"" alt=""Screenshot 2024-01-23 at 4 48 12 PM"" src=""https://github.com/psi4/psi4/assets/11812946/0b006708-ebaf-45f4-af19-bb5c9f80b513"">. Here's the full script:. ```python. import psi4; import numpy as np. psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_loose',; 'freeze_core': 'true',; 'reference': 'rhf',; 'save_jk': True,; 'geom_maxiter': 50,; }). psi4.set_output_file('free_energy_run.out'); psi4.set_num_threads(8); psi4.set_memory('8 GB'). universe = psi4.geometry(methanol); universe.update_geometry(); universe.print_in_input_format(). energy, wave_function = psi4.freq(; 'hf/6-31G*',; return_wfn=True,; molecule=universe,; dertype='gradient'; ). ```. So this calculation happens pretty rapidly with methanol but as I get to a system of 50ish atoms and 193 displacements needed it takes more than 24 hours so I was thinking there was a convergence problem somewhere or perhaps it's taking a really long time for those calculations? . **Analysis**. I was looking at the time for the calculations of the gradient. ```python. Module time:; user time = 0.37 seconds = 0.01 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; ```. it's pretty fast for a small system. However, for my system it's pretty slow per iteration. ```python. Module time:; 	user time = 738.22 seconds = 12.30 minutes; 	system time = 17.29 seconds = 0.29 minutes; 	total time = 99 seconds = 1.65 minutes. ```. This is probably why it's taking so long, any thoughts as to that other than it's bigger?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125:1158,energy,energy,1158,https://psicode.org,https://github.com/psi4/psi4/issues/3125,1,['energy'],['energy']
Energy Efficiency,"er 1: -122.97213766263802 -1.22972e+02 5.13141e-01; @RKS iter 2: -124.26578841108680 -1.29365e+00 6.24312e-01 DIIS; @RKS iter 3: -128.75874780675335 -4.49296e+00 6.03176e-02 DIIS; @RKS iter 4: -128.79292051117602 -3.41727e-02 3.60017e-03 DIIS; @RKS iter 5: -128.79304881103522 -1.28300e-04 3.68316e-04 DIIS; @RKS iter 6: -128.79305011369129 -1.30266e-06 6.11487e-06 DIIS; @RKS iter 7: -128.79305011405475 -3.63457e-10 1.42312e-08 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.472472 2Ag -1.291608 1B2u -0.442005; 1B3u -0.442005 1B1u -0.442005. Virtual:. 2B1u 1.309754 2B3u 1.309754 2B2u 1.309754; 3Ag 1.759040 4Ag 4.620812 1B1g 4.620812; 1B2g 4.620812 1B3g 4.620812 5Ag 4.620812. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.79305011405475. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5667771440329830; Two-Electron Energy = 66.1914406060751901; DFT Exchange-Correlation Energy = -12.4177135760969506; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.7930501140547506. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:27 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.03 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Ne: PBE............................................",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:7404,Energy,Energy,7404,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"er 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; ---------------------------------------------------------------------	 |	 @DF-RHF iter 40: -74.81783048435938 1.10608e+",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10299,Energy,Energy,10299,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"er.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1540,ENERGY,ENERGY,1540,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"er_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4113,energy,energy,4113,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['energy'],['energy']
Energy Efficiency,"erally the high symmetry wavefunction is the one; that is actually desired, although it depends on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:1625,energy,energy,1625,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"erence; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.000000000000 -0.698854518800 0.053554843883 15.994914619560; H 0.000000000000 -0.980353033500 -0.849954236217 1.007825032070. Running in c2v symmetry. Rotational constants: A = 10.89064 B = 0.95995 C = 0.88219 [cm^-1]; Rotational constants: A = 326493.09066 B = 28778.51563 C = 26447.33310 [MHz]; Nuclear repulsion = 37.887601626303692. Charge = 0; Multiplicity = 1; Electrons = 18; Nalpha = 9; Nbeta = 9. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: DZP; Number of shells: 20; Number of basis function: 42; Number of Cartesian functions: 42; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 16 16 0 0 0 0; A2 5 5 0 0 0 0; B1 5 5 0 0 0 0; B2 16 16 0 0 0 0; -------------------------------------------------------; Total 42 42 9 9 9 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 62; Number of basis function: 226; Number ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:3525,Energy,Energy,3525,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"ergies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:2998,energy,energy,2998,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,"ergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:3184,charge,charge,3184,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['charge'],['charge']
Energy Efficiency,"ergy = energy('scf'); ```. A simple expansion of the final COSX grid compared to default. This calculation breaks upon entering the final SCF iteration (where the tight grid is used) with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!; ```. The following input, an expansion of both the initial and final grids, also fails:; ```; molecule mol {; 0 1; O; H 1 0.96; H 1 0.96 2 104.5; symmetry c1; no_reorient; no_com; }. set {; scf_type cosx; df_scf_guess false; basis aug-cc-pVDZ; e_convergence 1.0e-10; incfock true; incfock_full_fock_every 4; ints_tolerance 1.0e-12; cosx_spherical_points_initial 146 ; cosx_radial_point_initial 50 ; cosx_spherical_points_final 302; cosx_radial_points_final 75 ; cosx_pruning_scheme robust; }. energy = energy('scf'); ```. This one fails in the SAD-guess iteration, with the following error:; ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::diagonalize: DSYEV failed! !; ! Error occurred in file: !; ! /theoryfs2/ds/dpoole34/Documents/Codes/psi4/psi4/src/psi4/libmints/matrix.cc !; ! on line: 1715 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::diagonalize(psi::Matrix&, psi::Vector&, psi::diagonalize_order) !; ! !; !----------------------------------------------------------------------------------!; ```. Various things can be switched, with equally varying effects:; * Switching the COSX_PRUNING_SCHEME from ROBUST to TREUTLER fixes these calculations.; * Switching from 146 spherical points to either 110 or 170 fixes these calculations.; * Switching from 50 radial points to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890:1702,energy,energy,1702,https://psicode.org,https://github.com/psi4/psi4/issues/2890,2,['energy'],['energy']
Energy Efficiency,"erhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with ne",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:1654,energy,energy,1654,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['energy'],['energy']
Energy Efficiency,erties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 174: docs-bases; 402/411 Test #216: mints5 ........................... Passed 0.57 sec; Start 402: json-schema-1-throws; 403/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #215: mints4 ........................... Passed 0.54 sec; 406/411 Test #174: docs-bases ....................... Passed 0.52 sec; 407/411 Test #212: mints1 ........................... Passed 0.55 sec; 408/411 Test #402: json-schema-1-throws ............. Passed 0.52 sec; 409/411 Test #409: skeletonscf ...................... Passed 0.61 sec; 410/411 Test #87,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:37288,energy,energy,37288,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"es(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: PBE <=. PBE GGA Exchang",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:4053,charge,charge,4053,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['charge'],['charge']
Energy Efficiency,"es; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 14; Integrals threads: 14; Memory [MiB]: 337; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 372; Number of basis functions: 1116; Number of Cartesian functions: 1308; Spherical Harmonics?: true; Max angular momentum: 4. Cached 0.1% of DFT collocation blocks in 0.036 [GiB]. Minimum eigenvalue in the overlap matrix is 7.2890634209E-11.; Reciprocal condition number of the overlap matrix is 1.8442944048E-12.; Using canonical orthogonalization.; Overall, 27 of 648 possible MOs eliminated. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 648 621 ; -------------------------; Total 648 621; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -212.57868470845432 -2.12579e+02 0.00000e+00 ; @DF-RKS iter 1: -74.64880419187541 1.37930e+02 2.89342e-02 DIIS/ADIIS; @DF-RKS iter 2: -104.73618075758787 -3.00874e+01 2.89040e-02 DIIS/ADIIS. Traceback (most recent call last):; File ""[REMOVED BASE DIRECTORY]/bin/psi4"", line 347, in <module>; exec(content); File ""<string>"", line 66, in <module>; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File [REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/p",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:11089,Energy,Energy,11089,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['Energy'],['Energy']
Energy Efficiency,"es\psi4\driver\p4util\util.py"", line 37, in <module>; from psi4.driver.procrouting import *; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\__init__.py"", line 29, in <module>; from .proc_table import procedures, hooks, energy_only_methods, integrated_basis_methods; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc_table.py"", line 32, in <module>; from . import sapt; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\__init__.py"", line 29, in <module>; from .sapt_proc import run_sapt_dft, sapt_dft, run_sf_sapt; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\sapt_proc.py"", line 36, in <module>; from psi4.driver.procrouting.proc import scf_helper; File ""Pathpsi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc.py"", line 55, in <module>; from . import proc_util; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\proc_util.py"", line 38, in <module>; from psi4.driver.procrouting.sapt import fisapt_proc; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\sapt\fisapt_proc.py"", line 34, in <module>; from .. import empirical_dispersion; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\procrouting\empirical_dispersion.py"", line 38, in <module>; from psi4.driver import driver_findif; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\driver_findif.py"", line 153, in <module>; from psi4.driver.task_base import AtomicComputer, BaseComputer, EnergyGradientHessianWfnReturn; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\task_base.py"", line 67, in <module>; class AtomicComputer(BaseComputer):; File ""Path\psi4conda\envs\psi16\lib\site-packages\psi4\driver\task_base.py"", line 75, in AtomicComputer; keywords: Dict[str, Any] = Field(default_factory=dict, description=""The keywords to use in the computation.""); TypeError: Field() missing 1 required positional argument: 'default'",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2614:2890,Energy,EnergyGradientHessianWfnReturn,2890,https://psicode.org,https://github.com/psi4/psi4/issues/2614,1,['Energy'],['EnergyGradientHessianWfnReturn']
Energy Efficiency,"esolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/psi4/files/13431543/output_dav.txt) and [RSP](https://github.com/psi4/psi4/files/13431545/output_rsp.txt) schemes, as well as [GAMESS](https://github.com/psi4/psi4/files/13431555/output_gms.txt).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2512,ENERGY,ENERGY,2512,https://psicode.org,https://github.com/psi4/psi4/issues/3083,4,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5988982401030682; Two-Electron Energy = 66.2281289694592061; DFT Exchange-Correlation Energy = -12.5240868800087686; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:12257,Energy,Energy,12257,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,est #27: cc13b ............................ Passed 69.13 sec; Start 280: opt14; 55/412 Test #194: fd-freq-energy-large ............. Passed 573.09 sec; Start 231: mp2-module; 56/412 Test #145: dfomp2-grad2 ..................... Passed 68.95 sec; Start 17: cbs-xtpl-opt; 57/412 Test #372: dft-custom-dhdf .................. Passed 105.99 sec; Start 76: cc6; 58/412 Test #260: omp3-3 ........................... Passed 88.45 sec; Start 318: sapt3; 59/412 Test #326: scf-bz2 .......................... Passed 141.14 sec; Start 70: cc51; 60/412 Test #182: fsapt-allterms ................... Passed 606.28 sec; Start 320: sapt5; 61/412 Test #281: opt-irc-1 ........................ Passed 101.38 sec; Start 262: omp3-5; 62/412 Test #206: frac-traverse .................... Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:6390,energy,energy,6390,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,est #280: opt-irc-1 ........................ Passed 47.52 sec; Start 260: omp3-4; 58/404 Test #97: cisd-opt-fd ...................... Passed 42.85 sec; Start 144: dfomp2-grad2; 59/404 Test #227: mp2-def2 ......................... Passed 90.23 sec; Start 261: omp3-5; 60/404 Test #230: mp2-module ....................... Passed 40.59 sec; Start 259: omp3-3; 61/404 Test #75: cc6 .............................. Passed 39.54 sec; Start 2: adc2; 62/404 Test #279: opt14 ............................ Passed 73.42 sec; Start 373: dft-custom-mgga; 63/404 Test #115: dcft9 ............................ Passed 25.38 sec; Start 320: sapt6; 64/404 Test #61: cc44 ............................. Passed 50.15 sec; Start 299: pywrap-alias; 65/404 Test #144: dfomp2-grad2 ..................... Passed 30.14 sec; Start 149: dfomp3-grad2; 66/404 Test #2: adc2 ............................. Passed 37.17 sec; Start 59: cc42; 67/404 Test #260: omp3-4 ........................... Passed 50.35 sec; Start 11: cbs-delta-energy; 68/404 Test #261: omp3-5 ........................... Passed 51.18 sec; Start 17: cbs-xtpl-opt; 69/404 Test #259: omp3-3 ........................... Passed 51.49 sec; Start 57: cc40; 70/404 Test #149: dfomp3-grad2 ..................... Passed 28.08 sec; Start 204: frac-ip-fitting; 71/404 Test #299: pywrap-alias ..................... Passed 36.56 sec; Start 250: omp2-5; 72/404 Test #59: cc42 ............................. Passed 20.06 sec; Start 242: ocepa-grad2; 73/404 Test #373: dft-custom-mgga .................. Passed 57.03 sec; Start 183: isapt2; 74/404 Test #320: sapt6 ............................ Passed 55.07 sec; Start 244: ocepa2; 75/404 Test #57: cc40 ............................. Passed 21.98 sec; Start 153: dfomp2p5-grad2; 76/404 Test #250: omp2-5 ........................... Passed 25.71 sec; Start 249: omp2-4; 77/404 Test #242: ocepa-grad2 ...................... Passed 26.85 sec; Start 263: omp3-grad2; 78/404 Test #153: dfomp2p5-grad2 ................... Passed 20.54 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:6406,energy,energy,6406,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,est #284: opt-freeze-coords ................ Passed 6.63 sec; Start 332: scf1; 307/412 Test #172: dft2 ............................. Passed 6.11 sec; Start 204: frac; 308/412 Test #94: cisd-h2o+-0 ...................... Passed 5.56 sec; Start 122: dfccdl1; 309/412 Test #371: scf-coverage ..................... Passed 9.20 sec; Start 272: opt5; 310/412 Test #229: mp2-grad1 ........................ Passed 4.37 sec; Start 235: mp3-grad2; 311/412 Test #95: cisd-h2o+-1 ...................... Passed 5.16 sec; Start 226: mom; 312/412 Test #121: dfccd1 ........................... Passed 5.30 sec; Start 356: tu3-h2o-opt; 313/412 Test #232: mp2p5-grad1 ...................... Passed 5.44 sec; Start 378: pywrap-align-chiral; 314/412 Test #180: fsapt2 ........................... Passed 5.69 sec; Start 266: opt1; 315/412 Test #377: pywrap-align ..................... Passed 6.95 sec; Start 344: stability1; 316/412 Test #332: scf1 ............................. Passed 5.49 sec; Start 400: json-schema-1-energy; 317/412 Test #204: frac ............................. Passed 5.38 sec; Start 295: psimrcc-sp1; 318/412 Test #285: props1 ........................... Passed 6.21 sec; Start 192: fcidump; 319/412 Test #340: scf-property ..................... Passed 6.13 sec; Start 345: dfep2-1; 320/412 Test #122: dfccdl1 .......................... Passed 4.43 sec; Start 398: json-v11-energy; 321/412 Test #272: opt5 ............................. Passed 4.45 sec; Start 389: python-curve; 322/412 Test #311: rasci-c2-active .................. Passed 7.52 sec; Start 236: mp2-property; 323/412 Test #226: mom .............................. Passed 4.69 sec; Start 312: rasci-h2o; 324/412 Test #378: pywrap-align-chiral .............. Passed 3.44 sec; Start 294: psimrcc-pt2; 325/412 Test #235: mp3-grad2 ........................ Passed 5.64 sec; Start 119: dfcasscf-fzc-sp; 326/412 Test #356: tu3-h2o-opt ...................... Passed 4.82 sec; Start 258: omp3-1; 327/412 Test #344: stability1 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:29704,energy,energy,29704,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,est #3: casscf-fzc-sp .................... Passed 11.82 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 4.34 sec; Start 5: casscf-sa-sp; 12/411 Test #5: casscf-sa-sp ..................... Passed 18.34 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.45 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 5.43 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2141,energy,energy,2141,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy']
Energy Efficiency,est #40: cc24 ............................. Passed 560.40 sec; Start 29: cc13d; 17/412 Test #115: dcft8 ............................ Passed 391.75 sec; Start 112: dcft5; 18/412 Test #25: cc13 ............................. Passed 308.71 sec; Start 228: mp2-def2; 19/412 Test #30: cc14 ............................. Passed 283.21 sec; Start 360: tu6-cp-ne2; 20/412 Test #13: cbs-xtpl-alpha ................... Passed 280.85 sec; Start 179: fsapt1; 21/412 Test #36: cc2 .............................. Passed 443.73 sec; Start 387: cookbook-rohf-orb-rot; 22/412 Test #29: cc13d ............................ Passed 66.58 sec; Start 380: cc-module; 23/412 Test #360: tu6-cp-ne2 ....................... Passed 75.72 sec; Start 45: cc29; 24/412 Test #387: cookbook-rohf-orb-rot ............ Passed 66.55 sec; Start 183: isapt1; 25/412 Test #380: cc-module ........................ Passed 44.91 sec; Start 32: cc16; 26/412 Test #112: dcft5 ............................ Passed 141.21 sec; Start 11: cbs-delta-energy; 27/412 Test #45: cc29 ............................. Passed 106.00 sec; Start 71: cc52; 28/412 Test #32: cc16 ............................. Passed 96.05 sec; Start 282: opt-irc-2; 29/412 Test #11: cbs-delta-energy ................. Passed 76.41 sec; Start 113: dcft6; 30/412 Test #71: cc52 ............................. Passed 78.85 sec; Start 18: cbs-xtpl-func; 31/412 Test #282: opt-irc-2 ........................ Passed 104.33 sec; Start 182: fsapt-allterms; 32/412 Test #113: dcft6 ............................ Passed 130.50 sec; Start 194: fd-freq-energy-large; 33/412 Test #395: python-vibanalysis ............... Passed 734.63 sec; Start 196: fd-freq-gradient-large; 34/412 Test #156: dft-grad-lr3 ..................... Passed 451.76 sec; Start 279: opt13; 35/412 Test #228: mp2-def2 ......................... Passed 428.14 sec; Start 374: dft-custom-mgga; 36/412 Test #183: isapt1 ........................... Passed 433.43 sec; Start 321: sapt6; 37/412 Test #374: dft-custom-mgga .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:2681,energy,energy,2681,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"est_dertype.py` and was never run. This unused fn and its testing was removed and replaced by the ddd version.; - [x] the new `negotiate_derivative_type` function probes managed methods earlier than before, so it happens that the exact error names (not the text) expected by stdsuite change.; - [x] the new `negotiate_derivative_type` function is called early, so it now handles the methodname typo helper (""Did you mean?"") that FAE added. The independent `_method_exists()` fn removed.; - [x] the former function `_set_convergence_criterion` where you passed in 5 integers for the different E/D_CONVERGENCE values has been rewritten as `negotiate_convergence_criterion` where you pass in a tuple of the case (e.g., `(2, 1)` is Hessian by findif of gradients). In actual `driver.py`, the function calls have been switched out. The values set are the same, but the arguments like `(1, 0)` aren't necessarily appropriate in this non-ddd driver code routing.; - [x] the former function `_find_derivative_type` has been replaced by three functions headed up by `negotiate_derivative_type`. For both, the goal is to take a method name, the target derivative, and any user modifications and return the appropriate analytic or findif strategy or produce a helpful error. sounds simple, but managed methods and cbs specs complicate things. In ddd, this function is called early, not piecemeal throughout the driver, so more probing has been consolidated into the new function. In actual `driver.py`, the function calls have been switched out, but it's only using half the info due to differences in non-ddd driver code routing. To mirror ddd behavior, the function is called even for energy() and properties(), mostly to take the place of `_method_exists()`. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2536:2205,energy,energy,2205,https://psicode.org,https://github.com/psi4/psi4/pull/2536,1,['energy'],['energy']
Energy Efficiency,est_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6507,Adapt,Adapted,6507,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Energy Efficiency,"et to 256.000 MB; ```. ==> Input File <==. ---; # Finding of 30 higher roots(i.e excited states) and then finding transition dipole moment from ground state to these excited states; # for Graphyne using basis cc-pvdz. psi4_io.set_default_path('./'). memory 5000 mb. molecule Graphyne {; 0 1; C 1.396 0.000 0.000; C 0.698 1.209 0.000; C -0.698 1.209 0.000; C -1.396 0.000 0.000; C -0.698 -1.209 0.000; C 0.698 -1.209 0.000; H 1.240 2.147 0.000; H -1.240 2.147 0.000; H -2.479 0.000 0.000; H -1.240 -2.147 0.000; H 1.240 -2.147 0.000; C 2.798 0.000 0.000; C 4.020 0.000 0.000; C 5.422 0.000 0.000; C 8.214 0.000 0.000; C 7.516 1.209 0.000; C 6.120 1.209 0.000; C 6.120 -1.209 0.000; C 7.516 -1.209 0.000; H 8.058 2.147 0.000; H 5.578 2.147 0.000; H 9.297 0.000 0.000; H 5.578 -2.147 0.000; H 8.058 -2.147 0.000. symmetry c1; units angstrom; }. set globals {; reference rhf; basis cc-pvdz ; freeze_core true; scf_type out_of_core; dipmom true; num_roots 10; }. set scf d_convergence 10; set detci e_convergence 8; ## thisenergy = energy('detci'). Memory set to 5.000 GiB by Python script. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:06:57 2014. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 5000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: c1; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ; ------------ ----------------- ----------------- -----------------; C -2.013000000000 0.000000000000 0.000000000000; C -2.711000000000 1.209000000000 0.000000000000; C -4.107000000000 1.209000000000 0.000000000000; C -4.805000000000 0.000000000000 0.000000000000; C -4.107000000000 -1.209000000000 0.000000000000; C -2.711000000000 -1.209000000000 0.000000000000; H -2.169000000000 2.147000000000 0.000000000000; H -4.649000000000 2.147000000000 0.000000000000; H -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:2089,energy,energy,2089,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"et {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybuild_basis; psibasis = core.BasisSet.construct_from_pydict(mol, basisdict, puream). RuntimeError: ; Fatal Error: CoordEntry::basisset: Basisset not set for O and type of DF_BASIS_CC; Error occurred in file: /Users/jonathonmisiewicz/psi4/psi4/src/psi4/libmints/coordentry.cc on line: 134; ```; My own investigations have partially uncovered the cause of this. During basis set construction, [basis set labels are set on all atoms](https://github.com/psi4/psi4/blob/master/psi4/src/export_mints.cc#L101). This occurs by [iterating over all atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:1457,energy,energy,1457,https://psicode.org,https://github.com/psi4/psi4/issues/1093,2,['energy'],['energy']
Energy Efficiency,"eta Ndocc Nsocc; -------------------------------------------------------; A 73 73 0 0 0 0; -------------------------------------------------------; Total 73 73 17 17 17 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 5; Number of AO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 7298102 doubles for integral storage.; We computed 235045 shell quartets total.; Whereas there are 247456 unique shell quartets.; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1; Minimum eigenvalue in the overlap matrix is 1.5687182609E-03.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -802.88132998346850 -8.02881e+02 1.33370e-02 ; @RHF iter 1: -787.60962084475932 1.52717e+01 5.31297e-03 ; @RHF iter 2: -784.61065630353232 2.99896e+00 2.74010e-02 DIIS; @RHF iter 3: -787.81386527066320 -3.20321e+00 1.99984e-03 DIIS; @RHF iter 4: -787.84423605872018 -3.03708e-02 3.17913e-04 DIIS; @RHF iter 5: -787.84661751791953 -2.38146e-03 1.61048e-04 DIIS; @RHF iter 6: -787.84753550465541 -9.17987e-04 8.58328e-05 DIIS; @RHF iter 7: -787.84773333581302 -1.97831e-04 4.22806e-05 DIIS; @RHF iter 8: -787.84780097425346 -6.76384e-05 1.42899e-05 DIIS; @RHF iter 9: -787.84781537788342 -1.44036e-05 9.60906e-06 DIIS; @RHF iter 10: -787.84782410513617 -8.72725e-06 5.16659e-06 DIIS; @RHF iter 11: -787.84782705514579 -2.95001e-06 2.70301e-06 DIIS; @RHF iter 12: -787.84782764529461 -5.90149e-07 1.01248e-06 DIIS; @RHF iter 13: -787.84782771441280 -6.91182e-08 4.44180e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:4528,Energy,Energy,4528,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Energy'],['Energy']
Energy Efficiency,"eta Virtual: . 1Ag 0.016098 2Ag 0.109076 1B2u 0.211108 ; 1B1u 0.211108 1B3u 0.211108 3Ag 0.385413 ; 2B1u 0.802773 2B2u 0.802773 2B3u 0.802773 ; 4Ag 0.900610 1B3g 0.900610 1B2g 0.900610 ; 1B1g 0.900610 5Ag 0.900610 6Ag 1.071716 ; 3B1u 2.265097 3B3u 2.265097 3B2u 2.265097 ; 7Ag 2.575158 8Ag 2.953058 2B2g 2.953058 ; 2B3g 2.953058 2B1g 2.953058 9Ag 2.953058 ; 4B1u 4.243456 4B3u 4.243456 4B2u 4.243456 ; 5B1u 4.243456 1Au 4.243456 5B3u 4.243456 ; 5B2u 4.243456 10Ag 5.042050 6B3u 5.416218 ; 6B1u 5.416218 6B2u 5.416218 11Ag 8.101653 ; 12Ag 8.311198 3B3g 8.311198 3B2g 8.311198 ; 3B1g 8.311198 13Ag 8.311198 7B3u 11.838258 ; 7B2u 11.838258 7B1u 11.838258 14Ag 14.727369 ; 15Ag 34.174361 . Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; SOCC [ 1, 0, 0, 0, 0, 0, 0, 0 ]. @UHF Final Energy: -0.49999200764259. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4999920076425929; Two-Electron Energy = 0.0000000000000002; Total Energy = -0.4999920076425927. UHF NO Occupations:; HONO-0 : 1 Ag 1.0000000; LUNO+0 : 2 Ag 0.0000000; LUNO+1 : 3 Ag 0.0000000; LUNO+2 : 4 Ag 0.0000000; LUNO+3 : 5 Ag 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on psinet at Mon Apr 29 11:26:27 2019; Module time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 0.87 seconds = 0.01 minutes; 	system time = 0.02 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes. Psi4 stopped on: Monday, 29 April 2019 11:26AM; Psi4 wall time for execution: 0:0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:7708,Energy,Energy,7708,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"etci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/detci/params.cc on line: 949; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); ```. Please could you go through it and see if you would find what's still wrong with it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1959,energy,energy,1959,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,3,['energy'],['energy']
Energy Efficiency,"ethionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hart",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2529,energy,energy,2529,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,ex integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2784. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.157303195170. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 3320,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:1749,Energy,Energy,1749,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['Energy'],['Energy']
Energy Efficiency,"export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; import numpy as np; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Decane_C10H22.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis=",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:3807,energy,energy,3807,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['energy'],['energy']
Energy Efficiency,"extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1736,charge,charge,1736,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,"extern1 test fails for me (Arch Linux, gcc (GCC) 6.3.1, native BLAS/LAPACK):; ```; Output:; ----------------------------------------------------------; Performing finite difference calculations; 19 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19; Finite difference (3-pt.) vs. analytic gradient to 10^-5..........PASSED; Finite difference energy..........................................PASSED; Analytic energy...................................................PASSED; Exit Status: infile ( -6 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.12 sec; ----------------------------------------------------------; Test Failed.; ""extern1"" end time: Jan 30 20:51 CET; ""extern1"" time elapsed: 00:00:29; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276186318:364,energy,energy,364,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276186318,2,['energy'],['energy']
Energy Efficiency,external charge field interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1541:9,charge,charge,9,https://psicode.org,https://github.com/psi4/psi4/issues/1541,1,['charge'],['charge']
Energy Efficiency,"extra open parenthesis in `energy('MP2/cc-pV([TQ]Z + D:CCSD(T)/cc-pVDZ')` above?. Yay, I'll have to try out the alternate syntax in pywrap-all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374#issuecomment-217932178:27,energy,energy,27,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217932178,1,['energy'],['energy']
Energy Efficiency,"ey. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050244575 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973838037 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227745933 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925370471 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208625948809 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139866705314 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682110801427 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483791718110 -1.68017e-01 1.17738e-03 DIIS; @DF-RHF iter 9: -535.96873759197706 -5.38997e-02 3.40983e-04 DIIS; @DF-RHF iter 10: -535.97325006729534 -4.51248e-03 1.04940e-04 DIIS; @DF-RHF iter 11: -535.97364955471517 -3.99487e-04 1.97794e-05 DIIS; @DF-RHF iter 12: -535.97366979229014 -2.02376e-05 5.39642e-06 DIIS; @DF-RHF iter 13: -535.97367245741657 -2.66513e-06 2.45749e-06 DIIS; @DF-RHF iter 14: -535.97367296799007 -5.10573e-07 1.28273e-06 DIIS; @DF-RHF iter 15: -535.97367316735676 -1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:5614,Energy,Energy,5614,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Energy'],['Energy']
Energy Efficiency,"ey. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02 ; @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1.17738e-03 DIIS; @DF-RHF iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; @DF-RHF iter 15: -535.97367316705004 -2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:6987,Energy,Energy,6987,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Energy'],['Energy']
Energy Efficiency,"e{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:24840,energy,energy,24840,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,f ............. Passed 2.63 sec; Start 419: scf-property; 125/185 Test #419: scf-property ..................... Passed 8.65 sec; Start 420: soscf-large; 126/185 Test #420: soscf-large ...................... Passed 42.04 sec; Start 423: stability1; 127/185 Test #423: stability1 ....................... Passed 4.41 sec; Start 424: dfep2-1; 128/185 Test #424: dfep2-1 .......................... Passed 5.74 sec; Start 425: dfep2-2; 129/185 Test #425: dfep2-2 .......................... Passed 5.25 sec; Start 426: sapt-dft1; 130/185 Test #426: sapt-dft1 ........................ Passed 952.16 sec; Start 428: sapt-compare; 131/185 Test #428: sapt-compare ..................... Passed 74.02 sec; Start 429: sapt-sf1; 132/185 Test #429: sapt-sf1 ......................... Passed 2.74 sec; Start 432: stability2; 133/185 Test #432: stability2 ....................... Passed 2.32 sec; Start 433: stability3; 134/185 Test #433: stability3 ....................... Passed 7.49 sec; Start 434: tu1-h2o-energy; 135/185 Test #434: tu1-h2o-energy ................... Passed 2.56 sec; Start 435: tu2-ch2-energy; 136/185 Test #435: tu2-ch2-energy ................... Passed 2.67 sec; Start 436: tu3-h2o-opt; 137/185 Test #436: tu3-h2o-opt ...................... Passed 5.54 sec; Start 437: scf-response1; 138/185 Test #437: scf-response1 .................... Passed 3.56 sec; Start 438: scf-response2; 139/185 Test #438: scf-response2 .................... Passed 15.29 sec; Start 439: scf-response3; 140/185 Test #439: scf-response3 .................... Passed 3.31 sec; Start 440: scf-cholesky-basis; 141/185 Test #440: scf-cholesky-basis ............... Passed 1123.82 sec; Start 442: tu4-h2o-freq; 142/185 Test #442: tu4-h2o-freq ..................... Passed 13.30 sec; Start 445: x2c1; 143/185 Test #445: x2c1 ............................. Passed 11.75 sec; Start 446: x2c2; 144/185 Test #446: x2c2 ............................. Passed 7.26 sec; Start 447: x2c3; 145/185 Test #447: x2c3 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:12568,energy,energy,12568,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"f FSAPT and ISAPT ...; off the top of my head, I think there may be some additional places; (induction) where the external potential needs to go. Maybe also the; dressing on the two-electron integrals. Best,; David. On Fri, Apr 26, 2019 at 11:29 AM chapincavender <notifications@github.com>; wrote:. > Description; >; > Include external potentials in the FISAPT module; > Todos; >; > Notable points (developer or user-interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > --------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1328,energy,energy,1328,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"f mtd_type == 'CONV':; if module == 'DETCI':; func = run_detci; elif module in ['', 'OCC']:; func = run_occ; elif mtd_type == 'DF':; if module == 'OCC':; func = run_dfocc; elif module in ['', 'DFMP2']:; func = run_dfmp2; elif mtd_type == 'CD':; if module in ['', 'OCC']:; func = run_dfocc; elif reference in ['RKS', 'UKS']:; if mtd_type == 'DF':; if module in ['', 'DFMP2']:; func = run_dfmp2; ; if func is None:; > raise ManagedMethodError(['select_mp2', name, 'MP2_TYPE', mtd_type, reference, module]); E psi4.driver.p4util.exceptions.ManagedMethodError: select_mp2: Method 'mp2' with MP2_TYPE 'DF' and REFERENCE 'RHF' not directable to QC_MODULE 'DETCI'. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:121: ManagedMethodError; _________________________________________________________________ test_psi4_sapt _________________________________________________________________. def test_psi4_sapt():; """"""sapt1""""""; #! SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF; #! and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates.; ; Eref = [ 85.189064196429101, -0.00359915058, 0.00362911158,; -0.00083137117, -0.00150542374, -0.00230683391 ]; ; ethene_ethyne = psi4.geometry(""""""; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; units angstrom; """"""); ; # this molecule will crash test if molecule passing broken; barrier = psi4.geometry(""""""; 0 1; He; """"""); ; psi4.set_options({; ""basis"": ""cc-pvdz"",; ""guess"": ""sad"",; ""scf_type"": ""df"",; ""sad_print"": 2,; ""d_convergence"": 11,; ""puream"": True,; ""print"": 1}); ; > psi4.energy('sapt0', molecule=ethene_ethyne). /home/joao/miniconda3/lib/python3.6/site-packa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,f the iterations. . ```; 0 0 1 82301976411.2597808838 82301976411.2597808838 180071.6863671333 79; 1 1 1 -11765764147947413438464.0000000000 -11765764148029716168704.0000000000 5189755552069629.0000000000 1039; 2 2 1 18577504081805034984135645462528.0000000000 18577504093570799348831936839680.0000000000 13953090784875981570048.0000000000 1042; 3 3 1 -10975754574997206597632.0000000000 -18577504092780789161197672857600.0000000000 2850375421929338594918400.0000000000 1058; ```. ```; memory 120 GB; molecule {; 0 1; C 3.269671140 0.262382661 0.000000000; C -1.638988443 0.201021220 2.834237354; C -1.638988443 0.201021220 -2.834237354; H 3.645686428 1.289803000 0.000000000; H -1.846170088 1.221151217 3.170972567; C 1.219967165 -0.666672220 0.713456211; C 0.020624067 -0.681664789 1.405951372; C 0.020624067 -0.681664789 -1.405951372; C 1.219967165 -0.666672220 -0.713456211; C -1.215021798 -0.697111167 -0.692495161; C -1.215021798 -0.697111167 0.692495161; C 2.350712693 -0.010518009 1.202305693; C -0.133462307 -0.041571814 2.636656855; C -0.133462307 -0.041571814 -2.636656855; C 2.350712693 -0.010518009 -1.202305693; C -2.215754163 -0.067601818 -1.434351162; C -2.215754163 -0.067601818 1.434351162; C 2.253218542 0.518128480 2.489250128; C 1.019790334 0.502709825 3.201425874; C 1.019790334 0.502709825 -3.201425874; C 2.253218542 0.518128480 -2.489250128; C -3.291380529 0.448817382 -0.712175746; C -3.291380529 0.448817382 0.712175746; H 3.077229877 1.077986926 2.924280546; H 0.974199492 1.051697677 4.138560570; H 0.974199492 1.051697677 -4.138560570; H 3.077229877 1.077986926 -2.924280546; H -4.090407292 0.988386795 -1.214280023; H -4.090407292 0.988386795 1.214280023; H 4.154760170 -0.387272435 0.000000000; H -2.069145762 -0.465075312 3.593654516; H -2.069145762 -0.465075312 -3.593654516; H -1.846170088 1.221151217 -3.170972567; }. set {; basis aug-cc-pvdz; guess sad; reference rhf; scf_type DF; cc_type DF; freeze_core true; OCC_TOLERANCE 1.0e-5; }. energy('fno-ccsd(t)'); ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545:2277,energy,energy,2277,https://psicode.org,https://github.com/psi4/psi4/issues/1545,1,['energy'],['energy']
Energy Efficiency,"f"", ; ""guess"": ""SADNO"",; ""e_convergence"": 12,; ""basis"": ""cc-pvdz"",; ""guess_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.9987213510449",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1061,energy,energy,1061,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676,1,['energy'],['energy']
Energy Efficiency,f-fzc-sp .................... Passed 55.64 sec; Start 256: omp2-2; 40/415 Test #210: gibbs ............................ Passed 51.08 sec; Start 403: python-cc54; 41/415 Test #136: dfmp2-ecp ........................ Passed 32.87 sec; Start 323: rasscf-sp; 42/415 Test #149: dfomp3-1 ......................... Passed 52.09 sec; Start 14: cbs-xtpl-energy; 43/415 Test #346: scf5 ............................. Passed 46.11 sec; Start 5: casscf-sa-sp; 44/415 Test #317: pywrap-db1 ....................... Passed 41.80 sec; Start 85: cdomp2-1; 45/415 Test #263: omp2p5-2 ......................... Passed 30.33 sec; Start 179: extern1; 46/415 Test #102: ci-property ...................... Passed 28.56 sec; Start 386: pywrap-bfs; 47/415 Test #256: omp2-2 ........................... Passed 32.02 sec; Start 127: dfccsdl1; 48/415 Test #371: x2c1 ............................. Passed 130.82 sec; Start 4: casscf-semi; 49/415 Test #5: casscf-sa-sp ..................... Passed 14.54 sec; Start 205: fnocc4; 50/415 Test #14: cbs-xtpl-energy .................. Passed 17.93 sec; Start 377: dft-smoke; 51/415 Test #85: cdomp2-1 ......................... Passed 16.80 sec; Start 126: dfccsd1; 52/415 Test #116: dcft7 ............................ Passed 408.77 sec; Start 132: dfmp2-1; 53/415 Test #4: casscf-semi ...................... Passed 15.25 sec; Start 252: ocepa1; 54/415 Test #179: extern1 .......................... Passed 22.42 sec; Start 6: ao-casscf-sp; 55/415 Test #127: dfccsdl1 ......................... Passed 19.45 sec; Start 172: dft-vv10; 56/415 Test #126: dfccsd1 .......................... Passed 16.21 sec; Start 142: dfomp2-1; 57/415 Test #403: python-cc54 ...................... Passed 49.72 sec; Start 260: omp2-grad1; 58/415 Test #386: pywrap-bfs ....................... Passed 24.47 sec; Start 368: tu4-h2o-freq; 59/415 Test #323: rasscf-sp ........................ Passed 37.57 sec; Start 103: cubeprop; 60/415 Test #205: fnocc4 ........................... Passed 22.18 sec; Start 293: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:5033,energy,energy,5033,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,f-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/41,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1560,energy,energy,1560,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,"f-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3875,ENERGY,ENERGY,3875,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,f-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.80 sec; Start 399: json-schema-1-energy; 392/411 Test #399: json-schema-1-energy ............. Passed 6.76 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 2.03 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 3.12 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 396/411 Test #403: json-schema-1-gradient ........... Passed 2.54 sec; Start 404: json-schema-1-properties; 397/411 Test #404: json-schema-1-properties ......... Passed 3.37 sec; Start 405: skeleton; 398/411 Test #405: skeleton ......................... Passed 4.85 sec; Start 406: skeletonaointegrals; 399/411 Test #406: skeletonaointegrals .............. Passed 5.08 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:36380,energy,energy,36380,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy']
Energy Efficiency,"f69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turbomole ""B3LYP_Gaussian""); ### #-76.46290355576 (psi4 energy('b3lyp')); ### #-76.46290344335 (nwchem default vnw-1-rpa); ### #VNW-1-rpa in nwchem seems to be VWN3 in Turbomole/Gaussian; ### ; ### e = energy('b3lyp5'); ### compare_values(-76.42582290565, e, 5, 'b3lyp5 vs Turbomole'); ### #and VWN5; ### #-76.42582290565 (Turbomole default ); ### #-76.42582303608 (psi4 energy('b3lyp5') with VWN5_C not VWN5RPA_C , needs to be changed!); ### #-76.42582292329 (nwchem VWN_5); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2604,energy,energy,2604,https://psicode.org,https://github.com/psi4/psi4/pull/339,5,['energy'],['energy']
Energy Efficiency,f[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6874,Adapt,Adapted,6874,https://psicode.org,https://github.com/psi4/psi4/pull/1349,4,['Adapt'],['Adapted']
Energy Efficiency,"failure. Based on how _early_ minimization is failing, this looks like something other than numerical finickiness of the underlying numpy algorithm. The ADIIS problem is either 1-by-1 or 2-by-2 (I'd need to check which), and surely we can handle a 2D constrained optimization. ```; memory 5 gb. molecule dimer {; O -2.37598501 -5.25644515 4.84543259; H -2.38171765 -4.38257907 4.44628561; H -2.48821382 -4.94837176 5.80344789; --; @Br 2.24215713 -6.77867982 5.71107037; @Br 0.05511550 -6.05660413 5.30313985; units angstrom; }. set {; basis aug-cc-pvdz; scf_type pk ; sapt_dft_grac_shift_a 0.05731; sapt_dft_grac_shift_b 0.01680; SAPT_DFT_FUNCTIONAL REVSCAN; }. energy('revscan'); ```. ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 113 113; -------------------------; Total 113 113; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter SAD: -76.04124004396280 -7.60412e+01 0.00000e+00. Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin//psi4"", line 338, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""/Users/jonathonmisiewicz/psi4/objdir/stage/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", l",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2609:1095,Energy,Energy,1095,https://psicode.org,https://github.com/psi4/psi4/issues/2609,1,['Energy'],['Energy']
Energy Efficiency,fci-dipole ....................... Passed 10.91 sec; Start 30: cc15; 203/411 Test #186: fci-h2o-2 ........................ Passed 9.39 sec; Start 15: cbs-xtpl-freq; 204/411 Test #63: cc46 ............................. Passed 139.50 sec; Start 376: pywrap-align; 205/411 Test #335: scf4 ............................. Passed 14.54 sec; Start 151: dfomp2p5-2; 206/411 Test #149: dfomp3-grad2 ..................... Passed 250.21 sec; Start 185: fci-h2o; 207/411 Test #71: cc53 ............................. Passed 97.98 sec; Start 252: omp2-grad2; 208/411 Test #376: pywrap-align ..................... Passed 4.72 sec; Start 107: dcft1; 209/411 Test #15: cbs-xtpl-freq .................... Passed 7.87 sec; Start 248: omp2-3; 210/411 Test #185: fci-h2o .......................... Passed 5.91 sec; Start 89: cepa3; 211/411 Test #20: cc1 .............................. Passed 198.16 sec; Start 147: dfomp3-2; 212/411 Test #89: cepa3 ............................ Passed 11.07 sec; Start 192: fd-freq-energy; 213/411 Test #144: dfomp2-grad2 ..................... Passed 87.37 sec; Start 37: cc22; 214/411 Test #248: omp2-3 ........................... Passed 19.53 sec; Start 341: soscf-ref; 215/411 Test #252: omp2-grad2 ....................... Passed 24.12 sec; Start 360: x2c1; 216/411 Test #151: dfomp2p5-2 ....................... Passed 29.24 sec; Start 81: cc9; 217/411 Test #192: fd-freq-energy ................... Passed 9.41 sec; Start 73: cc55; 218/411 Test #30: cc15 ............................. Passed 38.58 sec; Start 179: fsapt2; 219/411 Test #179: fsapt2 ........................... Passed 5.20 sec; Start 82: cc9a; 220/411 Test #341: soscf-ref ........................ Passed 9.34 sec; Start 10: castup3; 221/411 Test #37: cc22 ............................. Passed 22.33 sec; Start 77: cc8; 222/411 Test #10: castup3 .......................... Passed 20.61 sec; Start 80: cc8c; 223/411 Test #107: dcft1 ............................ Passed 58.98 sec; Start 171: dft2; 224/411 Test #171: dft2 .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:19973,energy,energy,19973,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"fear not, we've got a sol'n for item 1 -- `AtomicInput.keywords[""function_kwargs""]` https://github.com/psi4/psi4/blob/master/psi4/driver/schema_wrapper.py#L534 . psi passes these on to the e.g., `energy()` call rather than to `psi4.set_options()`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-870054471:196,energy,energy,196,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-870054471,1,['energy'],['energy']
Energy Efficiency,"few comments:. It's the ia32 (32bit) build, the x86_64 one is here:; https://buildd.debian.org/status/fetch.php?pkg=psi4&arch=amd64&ver=1%3A1.2.1-1&stamp=1546603567&raw=0. > * no need for boost at all (`libboost-atomic1.67-dev libboost-atomic1.67.0 libboost-chrono-dev`). Thanks, I thought I had removed them already. > * psi 1.2 won't work with py < 3.5 (`Get:19 http://debian.csail.mit.edu/debian unstable/main i386 python2.7 i386 2.7.15-5 [299 kB]`). It is using python3, this must be some indirect dependency which I can do nothing about.; ; > * production needs at least AM6 (`-DMAX_AM_ERI=4`) and preferably 7 or 8. OK, I will look into that. > * I think you were the one who wanted to be able to use a default theme rather than the psi custom one. this is available now (`-- Setting (unspecified) option SPHINX_THEME: sphinx_psi_theme`). Hrm right, I will take another look at building the manual, thanks for pointing that out. > * threaded blas that's not mkl can go wrong (`CMake Warning at external/common/lapack/CMakeLists.txt:50 (message):`) and unfortunately the test suite in single thread mode can't catch it. would be good to test it, perhaps with this script https://github.com/psi4/psi4/blob/master/psi4/share/psi4/scripts/test_threading.py#L270. Ok, I'll try to run that during bulid as well. > * Unfortunately solutions to test failures aren't leaping to mind. Some are very strange for a consistent codebase (`TypeError: set_memory_bytes(): incompatible function arguments. The following argument types are supported:`). That one is likely due to 32bit: `tests/options1/input.dat` tried to allocate more than 4 GB in the last two attempts in the `check set_memory() wrapper` test; the same applies to `json-v11-energy` and `json_data[""memory""] = ""5GB""`. . So those are accounted for, the ones which are weird are the . ```; Exit Status: infile ( -11 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```; failures. I've updated the packaging and am running a new build/test.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762:1825,allocate,allocate,1825,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451519762,2,"['allocate', 'energy']","['allocate', 'energy']"
Energy Efficiency,"ff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transformed integrals.; 	First half integral transformation complete.; 	Starting second half-transformation.; 	Two-electron integral transformation complete. ==> Build MP2 amplitudes, OPDM, and NOs <==. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -0.285737252704. Cutoff for significant NO occupancy: 1.000e-06. No. virtuals per irrep (original): [ 56 ]; No. virtuals per irrep (truncated): [ 56 ]. Retaining 56 of 56 virtual orbitals. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:41 2017; Module time:; 	user time = 0.68 seconds = 0.01 minutes; 	system time = 0.14 seconds = 0.00 minutes; 	total time = 1 seconds = 0.02 minutes; Total time:; 	user time = 3.48 seconds = 0.06 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 4 seconds = 0.07 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:41 2017. ==> Transform all two-electron integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transformation.; 	Sorting half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:9162,energy,energy,9162,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1-2 entry HE line 39 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/def2-svp-jkfit.gbs . ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Den",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:2239,Charge,Charge,2239,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Charge'],['Charge']
Energy Efficiency,"first 2 questions:; Can try - this was my first psi4 optimization. 3:; ""exception"" related definitively to ""new linear angles"": . ```; Energy change for the previous step:; Projected : -0.0009583389; Actual : -0.0004424593. Performing BFGS update.; Previous computed or guess Hessian on step 1.; Steps to be used in Hessian update: 24 23; Taking RFO optimization step.; Going to follow RFO solution 1.; Using RFO vector 1.; Norm of target step-size 0.47532; Projected energy change by RFO approximation: -0.0041167176; Newly linear bends that need to be incoporated into the internal coordinates: 1 3 11; 2 9 13; The INTCO_EXCEPTion handler:; New linear angles; Dynamic level is 0.; exc.g_really_quit() is 0.; New linear angles; ```. There are 1825 geometries in the output.dat file (it is about 22mb in size).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/153#issuecomment-124906121:135,Energy,Energy,135,https://psicode.org,https://github.com/psi4/psi4/issues/153#issuecomment-124906121,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEPT {; -> 1393	 _LIBCPP_ASSERT_VALID_ELEMENT_ACCESS(__n < size(), ""vector[] index out of bounds"");; 1394	 return this->__begin_[__n];; 1395	}; 1396	; Target 0: (python) stopped.; (lldb) bt; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); * frame #0: 0x00000001181",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:1321,energy,energy,1321,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['energy'],['energy']
Energy Efficiency,fix failing test case fd-freq-energy-large,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/123:30,energy,energy-large,30,https://psicode.org,https://github.com/psi4/psi4/issues/123,1,['energy'],['energy-large']
Energy Efficiency,"fnocc::CoupledCluster::compute_energy() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x1330A20: psi::fnocc::fnocc(psi::Options&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA5D569: py_psi_fnocc() (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0xA8C2AD: boost::python::objects::caller_py_function_impl<boost::python::detail::caller<double (*)(), boost::python::default_call_policies, boost::mpl::vector1<double> > >::operator()(_object*, _object*) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4D9D: boost::python::objects::function::call(_object*, _object*) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55C4AD4: boost::detail::function::void_function_ref_invoker0<boost::python::objects::(anonymous namespace)::bind_return, void>::invoke(boost::detail::function::function_buffer&) (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== by 0x55CFDCC: boost::python::detail::exception_handler::operator()(boost::function0<void> const&) const (in /scratch/cdsgroup/conda-builds/work/build/bin/psi4); ==14111== ; ==14111== HEAP SUMMARY:; ==14111== in use at exit: 22,890,520 bytes in 26,750 blocks; ==14111== total heap usage: 806,896 allocs, 780,146 frees, 145,885,736 bytes allocated; ==14111== ; ==14111== LEAK SUMMARY:; ==14111== definitely lost: 27,876 bytes in 493 blocks; ==14111== indirectly lost: 5,344 bytes in 40 blocks; ==14111== possibly lost: 13,024,793 bytes in 10,784 blocks; ==14111== still reachable: 9,832,507 bytes in 15,433 blocks; ==14111== suppressed: 0 bytes in 0 blocks; ==14111== Rerun with --leak-check=full to see details of leaked memory; ==14111== ; ==14111== For counts of detected and suppressed errors, rerun with: -v; ==14111== Use --track-origins=yes to see where uninitialised values come from; ==14111== ERROR SUMMARY: 692778 errors from 1000 contexts (suppressed: 1311 from 53); Segmentation fault (core dumped); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/121#issuecomment-123755185:2533,allocate,allocated,2533,https://psicode.org,https://github.com/psi4/psi4/issues/121#issuecomment-123755185,1,['allocate'],['allocated']
Energy Efficiency,"for df-mp2, these are the cases:; uhf energy: good, this is is Rob's code (we're pretty sure; test); rohf energy: we think this may be in Rob's code, but not verified vs other codes ; uhf grad: we think this may be in Rob's code, but not verified vs other codes ; rohf grad: no good. Ugur doesn't support rohf scf being fed into his omp2 w/o subsequent opt. ticket task: verify the above with the code and with the authors. if needed, re-route in driver (see mp2_type as example in `proc.py`. If anything looks to hard or want to defer, create a new ticket for it, and do all you can to close out this one. After discussion below, consolidated tasks:; - [x] re-route uhf grad through Ugur's code; - [x] make rohf grad fail gracefully; - [x] test all four cases; - [x] for uhf, make sure findif of Rob == Ugur; - [ ] comment `dfmp2/corr_grad.cc` stubs according to below",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/107:38,energy,energy,38,https://psicode.org,https://github.com/psi4/psi4/issues/107,2,['energy'],['energy']
Energy Efficiency,formation.; > > Two-electron integral transformation complete.; > > (OV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (OV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OO)...; > > Starting first half-transformation.; > > Sorting half-transformed integrals.; > > First half integral transformation complete.; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|OV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > (VV|VV)...; > > Starting second half-transformation.; > > Two-electron integral transformation complete.; > > Frozen core energy = 0.00000000000000; > > ; > > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > > Total: 0.043 (MW) / 0.341 (MB); > > ; > > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > > Total: 0.011 (MW) / 0.086 (MB); > > ; > > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > > Total: 0.003 (MW) / 0.022 (MB); > > Output from running coupled cluster test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178205078:2803,energy,energy,2803,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178205078,1,['energy'],['energy']
Energy Efficiency,forum requested feature: http://forum.psicode.org/t/print-out-virial-ratio/1398. * print out the virial ratio and kinetic and potential energy components for all wave functions.; * write the virial ratio to the fchk file in this format: `Virial Ratio R 2.000693879856458E+00`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1653:136,energy,energy,136,https://psicode.org,https://github.com/psi4/psi4/issues/1653,1,['energy'],['energy']
Energy Efficiency,"found an issue when using DETCI to compute roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1022,ENERGY,ENERGY,1022,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,freq-gradient-large ........... Passed 286.40 sec; Start 278: opt13; 11/411 Test #145: dfomp2-grad3 ..................... Passed 1015.18 sec; Start 11: cbs-delta-energy; 12/411 Test #76: cc7 .............................. Passed 587.31 sec; Start 373: dft-custom-mgga; 13/411 Test #306: pywrap-checkrun-uhf .............. Passed 1029.41 sec; Start 320: sapt6; 14/411 Test #45: cc3 .............................. Passed 1036.97 sec; Start 111: dcft5; 15/411 Test #240: ocepa-freq1 ...................... Passed 625.43 sec; Start 41: cc26; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1061.37 sec; Start 155: dfscf-bz2; 17/411 Test #35: cc2 .............................. Passed 641.50 sec; Start 42: cc27; 18/411 Test #300: pywrap-all ....................... Passed 1079.44 sec; Start 183: isapt2; 19/411 Test #103: dcft-grad1 ....................... Passed 1109.73 sec; Start 112: dcft6; 20/411 Test #110: dcft4 ............................ Passed 1118.85 sec; Start 347: sapt-dft2; 21/411 Test #11: cbs-delta-energy ................. Passed 162.34 sec; Start 305: pywrap-checkrun-rohf; 22/411 Test #320: sapt6 ............................ Passed 167.87 sec; Start 302: pywrap-cbs1; 23/411 Test #155: dfscf-bz2 ........................ Passed 147.41 sec; Start 97: cisd-opt-fd; 24/411 Test #373: dft-custom-mgga .................. Passed 186.86 sec; Start 281: opt-irc-2; 25/411 Test #183: isapt2 ........................... Passed 139.93 sec; Start 25: cc13a; 26/411 Test #193: fd-freq-energy-large ............. Passed 507.44 sec; Start 113: dcft7; 27/411 Test #347: sapt-dft2 ........................ Passed 128.04 sec; Start 205: frac-traverse; 28/411 Test #394: python-vibanalysis ............... Passed 1264.60 sec; Start 316: sapt2; 29/411 Test #181: fsapt-allterms ................... Passed 586.19 sec; Start 318: sapt4; 30/411 Test #111: dcft5 ............................ Passed 259.90 sec; Start 325: scf-bz2; 31/411 Test #112: dcft6 ............................ Passed 192.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:2340,energy,energy,2340,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,ft-grad1 ....................... Passed 361.43 sec; Start 36: cc21; 10/411 Test #38: cc23 ............................. Passed 142.28 sec; Start 305: pywrap-checkrun-rohf; 11/411 Test #35: cc2 .............................. Passed 153.53 sec; Start 41: cc26; 12/411 Test #162: dft-grad-lr3 ..................... Passed 443.69 sec; Start 182: isapt1; 13/411 Test #45: cc3 .............................. Passed 236.97 sec; Start 145: dfomp2-grad3; 14/411 Test #36: cc21 ............................. Passed 148.51 sec; Start 42: cc27; 15/411 Test #305: pywrap-checkrun-rohf ............. Passed 140.52 sec; Start 29: cc14; 16/411 Test #41: cc26 ............................. Passed 135.18 sec; Start 111: dcft5; 17/411 Test #42: cc27 ............................. Passed 101.05 sec; Start 18: cbs-xtpl-func; 18/411 Test #29: cc14 ............................. Passed 87.25 sec; Start 181: fsapt-allterms; 19/411 Test #145: dfomp2-grad3 ..................... Passed 173.53 sec; Start 193: fd-freq-energy-large; 20/411 Test #111: dcft5 ............................ Passed 108.27 sec; Start 195: fd-freq-gradient-large; 21/411 Test #394: python-vibanalysis ............... Passed 717.15 sec; Start 278: opt13; 22/411 Test #227: mp2-def2 ......................... Passed 425.85 sec; Start 240: ocepa-freq1; 23/411 Test #240: ocepa-freq1 ...................... Passed 62.06 sec; Start 359: tu6-cp-ne2; 24/411 Test #359: tu6-cp-ne2 ....................... Passed 29.96 sec; Start 76: cc7; 25/411 Test #182: isapt1 ........................... Passed 448.19 sec; Start 24: cc13; 26/411 Test #195: fd-freq-gradient-large ........... Passed 273.70 sec; Start 373: dft-custom-mgga; 27/411 Test #76: cc7 .............................. Passed 57.56 sec; Start 112: dcft6; 28/411 Test #24: cc13 ............................. Passed 44.47 sec; Start 302: pywrap-cbs1; 29/411 Test #302: pywrap-cbs1 ...................... Passed 22.59 sec; Start 13: cbs-xtpl-alpha; 30/411 Test #18: cbs-xtpl-func .................... ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:2044,energy,energy-large,2044,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy-large']
Energy Efficiency,"fting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3489,energy,energy,3489,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1559,energy,energy,1559,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,2,['energy'],['energy']
Energy Efficiency,"g <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11538,energy,energy,11538,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,"g in-core AOs. ==> MemDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: No; wK tasked: No; OpenMP threads: 8; Memory [MiB]: 85706; Algorithm: Core; Schwarz Cutoff: 1E-12; Mask sparsity (%): 0.0000; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: DEF2-UNIVERSAL-JFIT; Blend: DEF2-UNIVERSAL-JFIT; Number of shells: 60; Number of basis functions: 194; Number of Cartesian functions: 194; Spherical Harmonics?: false; Max angular momentum: 4. Cached 100.0% of DFT collocation blocks in 0.121 [GiB]. Minimum eigenvalue in the overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS; @DF-RKS iter 7: -79.32647565991985 -3.93676e-09 7.27369e-08 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 18.0000006848 ; deviation = 6.848e-07. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:6813,Energy,Energy,6813,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"g things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF gradients, on the order of E-5. That is _also_ on my to-fix list, but given some other papers I need to write, I don't expect to get to that until Winter 2020. The other potential dealbreaker is that method _also_ lacks frozen core support, DF or not. Fixing that is a Spring 2021 target.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:1497,energy,energy,1497,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,2,['energy'],['energy']
Energy Efficiency,"g-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:1396,ENERGY,ENERGY,1396,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"g; > whether one is easier to check than the other regarding whether the; > gradient is available. We need to know on a functional-by-functional basis; > whether we have analytic gradients or not. If that's much easier to handle; > with one style vs the other, that would be an argument for doing it that; > way. Then we can decide what to do with the HF cases to make them play; > nicely with our desired solution for the DFT ones.; > ; > David; > ; > On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. F",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:1998,energy,energy,1998,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,9,['energy'],['energy']
Energy Efficiency,"ge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ; - The tests do not use symmetry because with these small systems the savings due to PG symmetry are negligible and finding roots that transform as different irrep require multiple passes through the solver. So turning symmetry on makes each test take abou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1761,adapt,adapted,1761,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Energy Efficiency,ge; Start 195: fd-freq-gradient-large; Start 278: opt13; Start 25: cc13a; Start 113: dcft7; Start 205: frac-traverse; Start 316: sapt2; Start 318: sapt4; Start 325: scf-bz2; Start 1: adc1; Start 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1275,energy,energy,1275,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"ger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access today) I tentatively think psi4 can use those packages directly from c-f for Mac/Linux, and the psi4 recipes can be abandoned. (Caveats: Windows, adapting qcengine for any miniscule changes in interface btwn venerable and rewritten versions, performance from multiarch?)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:2143,adapt,adapting,2143,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['adapt'],['adapting']
Energy Efficiency,gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/411 Test #320: sapt6 ............................ Passed 163.49 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.11 sec; Start 400: json-schema-1-ghost; 385/411 Test #397: json-v11-energy .................. Passed 3.25 sec; Start 401: json-schema-1-orient; 386/411 Test #400: json-schema-1-ghost .............. Passed 1.15 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.58 sec; Start 403: json-schema-1-gradient; 388/411 Test #393: python-3-index-transforms ........ Passed 10.07 sec; Start 404: json-schema-1-properties; 389/411 Test #399: json-schema-1-energy ............. Passed 3.30 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.63 sec; Start 406: skeletonaointegrals; 391/411 Test #401: json-schema-1-orient ............. Passed 3.44 sec; Start 407: skeletondfmp2; 392/411 Test #404: json-schema-1-properties ......... Passed 1.53 sec; Start 408: skeletonmointegrals; 393/411 Test #405: skeleton ......................... Passed 1.87 sec; Start 409: skeletonscf; 394/411 Test #406: skeletonaointegrals .............. Passed 1.86 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 3.51 sec; 397/411 Test #408: skeletonmointegrals .............. Passed 4.21 sec; 398/411 Test #410: skeletonsointegrals .............. Passed 4.63 sec; 399/411 Test #411: skeletonwavefunction ............. Passed 4.43 sec; 400/411 Test #392,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:36578,energy,energy,36578,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,"gh the diff, I don't think I can answer close questioning on all the pieces. So I'm going to try to pick off some topics for coherent discussion. This is No. 1 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] New `psi4.set_output_file` function to both set up a logger and call `psi4.core.set_output_file`; - [x] Added some brief logging in the driver. This doesn't look much like DDD, but it's something to work with.; - [x] output file naming has been changed up. outputs may have double extension (e.g., myfile.log.out) to cope with the oddity of two extensions. Mostly, something.in creates something.out and something.log.; - [x] docs. Below is an example of output set at DEBUG with an extra `gradient()` call added to tu1; `>>> psi4 ../tests/tu1-h2o-energy/input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1048,energy,energy,1048,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['energy'],['energy']
Energy Efficiency,"ghest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3693,ENERGY,ENERGY,3693,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"gies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7161,Energy,Energy,7161,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,gn-chiral; 363/411 Test #372: dft-custom-hybrid ................ Passed 11.01 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.20 sec; Start 379: cc-module; 365/411 Test #376: pywrap-align ..................... Passed 4.55 sec; Start 380: psi4numpy-cphf; 366/411 Test #377: pywrap-align-chiral .............. Passed 3.66 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.91 sec; Start 382: psi4numpy-rhf; 368/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #382: psi4numpy-rhf .................... Passed 0.93 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.17 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.93 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.28 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.39 sec; Start 388: python-curve; 374/411 Test #388: python-curve ..................... Passed 3.19 sec; Start 389: python-pubchem; 375/411 Test #375: pywrap-bfs ....................... Passed 25.67 sec; Start 390: python-mints9; 376/411 Test #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:34881,energy,energy,34881,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,2,['energy'],['energy']
Energy Efficiency,"gth in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_1683815705191/work/psi4/src/psi4/liboptions/liboptions.h on line: 55\nThe most recent 5 function calls were:\n\npsi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int)\n'))}; Potential energy data ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4283,Energy,Energy,4283,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,gy ................... Passed 1.13 sec; Start 209: mcscf1; 383/411 Test #404: json-schema-1-properties ......... Passed 1.20 sec; Start 382: psi4numpy-rhf; 384/411 Test #293: psimrcc-pt2 ...................... Passed 1.09 sec; Start 212: mints1; 385/411 Test #411: skeletonwavefunction ............. Passed 1.06 sec; Start 211: mcscf3; 386/411 Test #214: mints3 ........................... Passed 1.15 sec; Start 239: numpy-array-interface; 387/411 Test #188: fci-tdm .......................... Passed 1.07 sec; Start 409: skeletonscf; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 174: docs-bases; 389/411 Test #410: skeletonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Test #396: python-memdfjk ................... Passed 1.06 sec; 399/411 Test #212: mints1 ........................... Passed 0.85 sec; 400/411 Test #409: skeletonscf ...................... Passed 0.69 sec; 401/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; 402/411 Test #174: docs-bases ....................... Passed 0.62 sec; 403/411 Test #175: docs-dft ......................... Passed 0.68 sec; 404/411 Test #215: mints4 ........................... Passed 0.63 sec; 405/411 Test #208: matrix1 .......................... Passed 0.56 sec; 406/411 Te,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:36998,energy,energy,36998,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy']
Energy Efficiency,"gy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:2803,energy,energy,2803,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"gy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -7259.17972994142656 -2.96200e-02 3.74973e-03 DIIS; @DF-RHF iter 3: -7259.18676197489549 -7.032",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1856,energy,energy,1856,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"gy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ---------------------------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:3069,energy,energy,3069,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,['energy'],['energy']
Energy Efficiency,"h them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1422,ENERGY,ENERGY,1422,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"handler(allclose, label, message, return_message, quiet); E File ""/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/driver/p4util/testing.py"", line 195, in _psi4_true_raise_handler; E raise TestComparisonError(message); E ; E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; E ; E Printing out the relevant lines from the Psithon --> Python processed input file:; E H 1 0.96 2 104.5; E """""",""h2o""); E core.IO.set_default_namespace(""h2o""); E core.set_global_option(""BASIS"", ""cc-pVDZ""); E energy('scf'); E --> compare_values(-176.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') ; E ; E ; E !----------------------------------------------------------------------------------!; E ! !; E ! SCF energy: computed value (-76.02663274) does not match (-176.02663273) !; E ! to atol=1e-06 by difference (100.00000000). !; E ! !; E !----------------------------------------------------------------------------------!. stage/lib/psi4/tests/addons.py:197: AssertionError; ========================================================================================================== short test summary info ==========================================================================================================; FAILED stage/lib/psi4/tests/test_psi4.py::test_psi4_basic - psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).; FAILED stage/lib/psi4/tests/tu1-h2o-energy/test_input.py::test_tu1_h2o_energy - AssertionError: SCF energy............................................................................FAILED; =============================================================================================== 2 failed, 1 passed, 3504 deselected in 6.20s ================================================================================================; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:9275,energy,energy,9275,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,3,['energy'],['energy']
Energy Efficiency,"har> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constant",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9216,energy,energy,9216,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"hare/psi4/basis/def2-tzvppd.gbs ; atoms 34-89 entry H line 14 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 90-101 entry N line 181 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs ; atoms 102-106 entry O line 218 file /aerosol/users/njzjz/anaconda3/envs/p4env/share/psi4/basis/def2-tzvppd.gbs . => WB97M-D3BJ: Empirical Dispersion <=. Grimme's -D3 (BJ-damping) Dispersion Correction; Grimme S.; Ehrlich S.; Goerigk L. (2011), J. Comput. Chem., 32: 1456; Parametrisation from: A. Najib, L. Goerigk, J. Comput. Theory Chem.,14, 5725, 2018. s6 = 1.000000; s8 = 0.390800; a1 = 0.566000; a2 = 3.128000. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 4 Threads, 7629 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; C -3.986536731580 -1.858264338730 0.058762714511 12.000000000000; C 0.798074669820 0.990515156370 -3.875762257089 12.000000000000; C 0.017832511920 -3.811459520430 -1.287345979189 12.000000000000; C 0.173626034620 2.867679137670 -2.668652350389 12.000000000000; C 1.516908962420 -3.483999515230 -1.216553356289 12.000000000000; C 5.992839611420 -1.026305827230 -0.727874868189 12.000000000000; C 3.017409895220 -3.046872095730 0.725792373811 12.000000000000; C -1.125684508680 2.202468723670 -2.198266685089 12.000000000000; C 3.752417747320 -2.017670362830 -0.145942986389 12.000000000000; C 2.625927257520 -0.162195960130 1.108527837311 12.000000000000; C 2.049668656220 1.018254628770 0.683856523611 12.000000000000; C 1.406278426320 2.114882744470 1.477238232711 12.000000000000; C -0.252334991380 -4.016660671530 1.099960464211 12.000000000000; C 2.325525208620",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970:2829,charge,charge,2829,https://psicode.org,https://github.com/psi4/psi4/issues/2970,1,['charge'],['charge']
Energy Efficiency,"hare/psi4/basis/sto-3g.gbs; atoms 2-3 entry H line 19 file /opt/conda/share/psi4/basis/sto-3g.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: STO-3G; Blend: STO-3G; Number of shells: 5; Number of basis functions: 7; Number of Cartesian functions: 7; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (STO-3G AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry O line 318 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-3 entry H line 18 file /opt/conda/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I add `mp.set_start_method('spawn', force=True)`, I can get this to work - or I can run this script on macOS, for which `mp` uses `spawn` by default. This code also runs if I uncomment `proc.run()`, which runs the function in the same process instead of creating a new process. . Any advice he",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189:1941,Charge,Charge,1941,https://psicode.org,https://github.com/psi4/psi4/issues/3189,1,['Charge'],['Charge']
Energy Efficiency,"harges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.335417355952",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:6936,Energy,Energy,6936,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"he I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1238,ENERGY,ENERGY,1238,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"he SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/875>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlmJNWz39F1kSptiR8vFq7913CBnks5s9aN8gaJpZM4Q25IB>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:2567,energy,energy,2567,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"he X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193 3B2g 8.272193 3B1g 8.272193 ; 13Ag 8.272193 7B3u 11.798691 7B2u 11.798691 ; 7B1u 11.798691 14Ag 14.696251 15Ag 34.149342 . Beta Occupied: . . Beta Vir",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5699,Energy,Energy,5699,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"he associated data required to interpret it (basis set ordering,; exponents, contractions). Of course, even then, some assumptions/standards; have to be in place, like normalization conventions for the basis; functions, etc. Indeed, we already had a discussion about normalization; conventions in https://github.com/psi4/psi4/issues/60 . One would also in; principle have to assume some standard for how to define the pure angular; momentum functions from the Cartesian functions, etc. Still, with some; choices made and documented to set a convention for all this (which is; presumably available), Molden format could be ok to pass along; self-contained one-electron properties between programs that might have; different conventions. On the other hand, I think it remains useful to be able to get at; this/similar info without having to literally write out a Molden file.; Perhaps the example from @dgasmith will work or could be built upon. On Mon, Nov 14, 2016 at 10:49 AM, Daniel Smith notifications@github.com; wrote:. > Try out the following:; > ; > molecule mol {; > He; > He 1 3.0; > symmetry c1; > }; > ; > scf_e, scf_wfn = energy('SCF/sto-3g', return_wfn=True); > ; > scf_wfn.Da().print_out(); > scf_wfn.basisset().print_detail_out(); > ; > # Accessors for Daprint scf_wfn.Da().get(0, 0) # Python to C++ accessorprint scf_wfn.Da().np # Numpy accessor; > ; > Using C1 so that we get the AO basis set, SO->AO transformations are; > pretty simple as well. You can also run python-based help on a BasisSet; > object (help(scf_wfn.basisset())) to get a better idea of how to access; > it. The docs are pretty limited, but hopefully that function names are; > somewhat self explanatory.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/504#issuecomment-260372655, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdrifPw4c7cEJjFh2lsYONTY7LiR6ks5q-IMngaJpZM4KrBng; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-260397625:1281,energy,energy,1281,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-260397625,1,['energy'],['energy']
Energy Efficiency,"he lowest energy root of desired spin. So one should be; > careful about this issue.; > ; > Best wishes,; > ; > Alexander.; > ; > On Thu, Jan 14, 2016 at 9:38 AM, Alexander Sokolov <; > alexander.y.sokolov@gmail.com> wrote:; > ; > > I would add that lately we have seen a lot of problems with UHF and ROHF; > > converging on a wrong state for open-shells in Psi4. Although new; > > stability; > > analysis code helps a lot in fixing some of the problems (for UHF), for; > > many of these systems finding the lowest root is quite non-trivial and is; > > accompanied by many SCF convergence issues, as well as symmetry-breaking; > > issues (UHF). Things get a lot worse for transition metal compounds (even; > > simple ones, like Fe(CO)5). The most helpful solution is to start with; > > basis set projection from a small basis, but this strategy doesn't always; > > work. Sometimes, combining stability analysis root search and basis set; > > projection helps.; > > ; > > Indeed, other codes (particularly, MOLPRO) sometimes do better job in; > > finding lowest-energy solutions for systems of this type. Usually, after; > > investing some time, it is possible to find the necessary solution for; > > these non-trivial cases with Psi4, but it may be worth investigating some; > > of these systems for possible improvements in the code.; > > ; > > Best wishes,; > > ; > > Alexander.; > > ; > > On Thu, Jan 14, 2016 at 9:25 AM, jgonthier notifications@github.com; > > wrote:; > > ; > > > @lothian https://github.com/lothian I guess these other codes are; > > > using some other convergence accelerator than Psi4 ? I would not be; > > > surprised if SOSCF with a core guess would converge on the right; > > > solution.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211#issuecomment-171656770.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171660919.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171662622:1868,energy,energy,1868,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171662622,1,['energy'],['energy']
Energy Efficiency,"he most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9066,energy,energy,9066,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"he potential energy curve for the CF molecule and I got this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packag",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1012,energy,energy,1012,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['energy'],['energy']
Energy Efficiency,"he scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1158,ENERGY,ENERGY,1158,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"hells: 81; Number of basis functions: 336						 Number of basis functions: 336; Number of Cartesian functions: 336						 Number of Cartesian functions: 336; Spherical Harmonics?: false							 Spherical Harmonics?: false; Max angular momentum: 4							 Max angular momentum: 4; 									 >; Minimum eigenvalue in the overlap matrix is 3.6155256748E-02.			 Minimum eigenvalue in the overlap matrix is 3.6155256748E-02.; Reciprocal condition number of the overlap matrix is 1.1026908875E-0		 Reciprocal condition number of the overlap matrix is 1.1026908875E-0; Using symmetric orthogonalization.						 Using symmetric orthogonalization.; 									 >; ==> Pre-Iterations <==							 ==> Pre-Iterations <==; 									 >; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic U		 SCF Guess: Superposition of Atomic Densities via on-the-fly atomic U; 									 >; -------------------------							 -------------------------; Irrep Nso Nmo								 Irrep Nso Nmo; -------------------------							 -------------------------; A 25 25							 A 25 25; -------------------------							 -------------------------; Total 25 25							 Total 25 25; -------------------------							 -------------------------; 									 >; ==> Iterations <==								 ==> Iterations <==; 									 >; Total Energy Delta E MAX |[F,P]|		 Total Energy Delta E MAX |[F,P]|; @DF-RHF iter SAD: -36.21394595952589 -3.62139e+01 0.00000e+00	 |; @DF-RHF iter 1: -35.60922177916374 6.04724e-01 1.68980e-02	 |	 @DF-RHF iter SAD: -57.13350802568045 -5.71335e+01 0.00000e+00; @DF-RHF iter 2: -35.61045354738020 -1.23177e-03 1.67646e-03	 |	 @DF-RHF iter 1: -53.28609137605913 3.84742e+00 7.61225e+00; @DF-RHF iter 3: -35.61046745904237 -1.39117e-05 7.33996e-05	 |	 @DF-RHF iter 2: -28.24435069753500 2.50417e+01 7.83254e+00; @DF-RHF iter 4: -35.61046747456783 -1.55255e-08 1.52836e-06	 |	 @DF-RHF iter 3: -62.28763326354083 -3.40433e+01 4.30703e+00; @DF-RHF iter 5: -35.61046747457986 -1.20366e-11 1.13726e-07	 |	 @DF-RHF iter 4: 445.8713966",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:6849,Energy,Energy,6849,https://psicode.org,https://github.com/psi4/psi4/issues/3072,2,['Energy'],['Energy']
Energy Efficiency,"hen once I include a method that could get the PEC for the excited state I kept getting an error. Then I wrote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1093,energy,energy,1093,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,here's a minimal input for debugging. ```; molecule {; efp c6h6 0.0 0.0 0.0 0.0 0.0 0.0; --; O 4.0 0.0 0.0; H 4.7 0.7 0.0; H 3.3 -0.7 0.0; --; efp h2o -4.0 0.0 0.0 0.0 0.0 0.0; }. set basis cc-pvdz; energy('scf'); ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/115#issuecomment-122486808:199,energy,energy,199,https://psicode.org,https://github.com/psi4/psi4/issues/115#issuecomment-122486808,1,['energy'],['energy']
Energy Efficiency,here's some changes to Grimme-distributed dftd3 that do what we need:; https://github.com/loriab/dftd3/compare/v3.2.0...master. * more decimals for ABC energy (and [Eh] printing); * separate gradient for ABC gradient; * CMake build system (so Windows can build it); * corrects header and prints version with `dftd3 -version`; * bumps to 3.2.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1407#issuecomment-456884685:152,energy,energy,152,https://psicode.org,https://github.com/psi4/psi4/issues/1407#issuecomment-456884685,1,['energy'],['energy']
Energy Efficiency,"hey all! I don't think at all think this is fundamentally an issue with the SCF converging to the wrong state, even if the stability analysis is showing a negative eigenvalue. IMO, there could be an issue with the basis set projection. . For this electronic state in this system, it is indeed difficult to converge to the appropriate state. However, the multireference character results in low-lying LUMOs. So if PSI4 was populating the wrong orbitals, we would see the energy of the larger basis set ROHF increasing by (this is all back-of-the-envelope, btw) 5 mEh. We know that the smaller basis set (cc-pwCVDZ-DK, which is explicitly defined in the input file because that basis set is not in the PSI4 library for iron) is converging to the right state. . If DZ->TZ projection is going wrong by 3 Hartrees, then there is something totally haywire with PSI4. Molpro's SCF guess from atomic densities sucks, but I have never seen it crap the bed with incorrect states on the order of Hartrees! . Try this test: run the ROHF energy calculation using just the TZ set, with no DZ step and no ""set scf guess read""; When I do this, I get ; @ROHF Final Energy: -1271.65162910275285. HERE is where PSI4 has the incorrect state. I haven't run an orbital stability analysis, but I can tell by looking at the MO coefficients (thanks Yukio!) --- 10A1 (doubly occupied d2+) needs to be swapped with 14A1 (singly occupied d0) to change the excited Phi state to the correct Pi state. Another clue that leads me to believe there's an actual bug somewhere: look at the SCF orbital energies for the initial DZ guess versus the screwed up TZ projection. The only significant difference is; DZ ROHF:; 1A1 -263.972182; and; TZ ROHF:; 1A1 -261.966897. Since 1A1 is doubly occupied, there's your 4 Hartrees worth of error. ; Looking at the MO coefficients; DZ ROHF:; FE1 s0 0.9825555 (duh, first orbital should be iron 1s). TZ ROHF:; 1 FE1 s0 0.8531471 0.3343274 0.0000000 0.0000000 0.0003960; 2 FE1 s0 -0.5169916 1.410880",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899#issuecomment-360370142:470,energy,energy,470,https://psicode.org,https://github.com/psi4/psi4/issues/899#issuecomment-360370142,1,['energy'],['energy']
Energy Efficiency,hf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.28 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.39 sec; Start 388: python-curve; 374/411 Test #388: python-curve ..................... Passed 3.19 sec; Start 389: python-pubchem; 375/411 Test #375: pywrap-bfs ....................... Passed 25.67 sec; Start 390: python-mints9; 376/411 Test #305: pywrap-checkrun-rohf ............. Passed 171.95 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 2.08 sec; Start 392: python-cc54; 378/411 Test #374: dft-custom-gga ................... Passed 29.34 sec; Start 393: python-3-index-transforms; 379/411 Test #391: python-mints2 .................... Passed 3.28 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.88 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 397: json-v11-energy; 382/411 Test #397: json-v11-energy .................. Passed 3.85 sec; Start 398: json-v11-gradient; 383/411 Test #393: python-3-index-transforms ........ Passed 10.30 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 3.98 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.26 sec; Start 401: json-schema-1-orient; 386/411 Test #399: json-schema-1-energy ............. Passed 3.33 sec; Start 402: json-schema-1-throws; 387/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.05 sec; Start 404: json-schema-1-properties; 389/411 Test #392: python-cc54 ...................... Passed 17.13 sec; Start 405: skeleton; 390/411 Test #403: json-schema-1-gradient ........... Passed 1.61 sec; Start 406: skeletonaointegrals; 391/411 Test #404: json-schema-1-properties ......... Passed 1.34 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:35772,energy,energy,35772,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,2,['energy'],['energy']
Energy Efficiency,"home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filename(basgbs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 1396, in make_filename; basisname = basisname.lower(). AttributeError: 'NoneType' object has no attribute 'lower'. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""BASIS"", ""ano-rcc""); core.set_global_option(""RELATIVISTIC"", ""x2c""); core.set_global_option(""REFERENCE"", ""uhf""); --> energy('hf'). Psi4 stopped on: Monday, 29 April 2019 07:36PM; Psi4 wall time for execution: 0:00:00.18. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:5431,energy,energy,5431,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['energy'],['energy']
Energy Efficiency,hon-cc54 ...................... Passed 12.99 sec; Start 6: ao-casscf-sp; 240/411 Test #48: cc32 ............................. Passed 10.33 sec; Start 186: fci-h2o-2; 241/411 Test #197: freq-isotope1 .................... Passed 14.33 sec; Start 198: freq-isotope2; 242/411 Test #6: ao-casscf-sp ..................... Passed 2.88 sec; Start 21: cc10; 243/411 Test #357: tu4-h2o-freq ..................... Passed 12.92 sec; Start 254: omp2p5-2; 244/411 Test #367: scf-hess1 ........................ Passed 6.11 sec; Start 335: scf4; 245/411 Test #198: freq-isotope2 .................... Passed 3.61 sec; Start 10: castup3; 246/411 Test #184: fci-dipole ....................... Passed 6.13 sec; Start 128: dfccsdat1; 247/411 Test #185: fci-h2o .......................... Passed 6.11 sec; Start 117: dfcasscf-sa-sp; 248/411 Test #186: fci-h2o-2 ........................ Passed 6.45 sec; Start 154: dfrasscf-sp; 249/411 Test #21: cc10 ............................. Passed 4.59 sec; Start 192: fd-freq-energy; 250/411 Test #254: omp2p5-2 ......................... Passed 5.70 sec; Start 109: dcft3; 251/411 Test #128: dfccsdat1 ........................ Passed 3.87 sec; Start 341: soscf-ref; 252/411 Test #154: dfrasscf-sp ...................... Passed 2.76 sec; Start 143: dfomp2-grad1; 253/411 Test #117: dfcasscf-sa-sp ................... Passed 4.38 sec; Start 9: castup2; 254/411 Test #10: castup3 .......................... Passed 5.12 sec; Start 86: cepa0-grad2; 255/411 Test #335: scf4 ............................. Passed 7.46 sec; Start 179: fsapt2; 256/411 Test #109: dcft3 ............................ Passed 4.45 sec; Start 122: dfccd-grad1; 257/411 Test #192: fd-freq-energy ................... Passed 6.62 sec; Start 90: cepa1; 258/411 Test #143: dfomp2-grad1 ..................... Passed 4.96 sec; Start 171: dft2; 259/411 Test #86: cepa0-grad2 ...................... Passed 4.15 sec; Start 132: dfmp2-4; 260/411 Test #179: fsapt2 ........................... Passed 4.61 sec; Start 22: cc11;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:23247,energy,energy,23247,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,how to get the gradient of external point charges,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2244:42,charge,charges,42,https://psicode.org,https://github.com/psi4/psi4/issues/2244,1,['charge'],['charges']
Energy Efficiency,"http://forum.psicode.org/t/scf-problems-please-help/765/14. ```; First ROHF (DZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; @ROHF Final Energy: -1271.85284181863290. Second ROHF (pwCVTZ):; Computing 2-order Douglas-Kroll-Hess integrals.; Adding Douglas-Kroll-Hess corrections to the potential integrals.; …; SCF Guess: Orbitals guess was supplied from a previous computation.; @ROHF Final Energy: -1267.93014988281766; ```. Even though converged docc and socc are the same, we get a difference of 4 Hartrees in the initial versus final ROHF. . Below is a simpler input that shows the problem. ```; molecule {; 0 4; Fe; H 1 1.566665; }. set {; reference rohf; docc [7, 0, 3, 2]; socc [1, 1, 0, 1]; scf_type pk; relativistic dkh; dkh_order 2; print_mos true; maxiter=500; freeze_core false; }. basis mine2{; spherical; ****; Fe 0; S 20 1.00; 4.316265E+06 8.048803E-06; 6.463424E+05 6.258306E-05; 1.470897E+05 3.290239E-04; 4.166152E+04 1.387355E-03; 1.359077E+04 5.023256E-03; 4.905750E+03 1.610140E-02; 1.912746E+03 4.590034E-02; 7.926043E+02 1.136154E-01; 3.448065E+02 2.283869E-01; 1.558999E+02 3.221159E-01; 7.223091E+01 2.383661E-01; 3.272506E+01 7.404667E-02; 1.566762E+01 9.214197E-02; 7.503483E+00 9.339790E-02; 3.312223E+00 1.573965E-02; 1.558471E+00 -4.186682E-04; 6.839140E-01 5.376318E-05; 1.467570E-01 -3.816654E-05; 7.058300E-02 4.319603E-05; 3.144900E-02 -3.401019E-06; S 20 1.00; 4.316265E+06 -4.155954E-06; 6.463424E+05 -3.231401E-05; 1.470897E+05 -1.699525E-04; 4.166152E+04 -7.171369E-04; 1.359077E+04 -2.603625E-03; 4.905750E+03 -8.399109E-03; 1.912746E+03 -2.434109E-02; 7.926043E+02 -6.251948E-02; 3.448065E+02 -1.365929E-01; 1.558999E+02 -2.312707E-01; 7.223091E+01 -2.383734E-01; 3.272506E+01 3.123837E-02; 1.566762E+01 5.086818E-01; 7.503483E+00 4.987695E-01; 3.312223E+00 9.033552E-02; 1.558471E+00 -6.005337E-03; 6.839140E-01 2.312454E-04; 1.467570E-01 -5.643680E-04; 7.058300E-02 4.992260E-04; 3.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/899:214,Energy,Energy,214,https://psicode.org,https://github.com/psi4/psi4/issues/899,2,['Energy'],['Energy']
Energy Efficiency,"http://psicode.org/psi4manual/master/build_obtaining.html#what-is-the-suggested-github-workflow for future reference. Yes, problem is when you try to push and it's rejected, `git` suggests pulling, and that's fatal. As the last green lines at end of link above shows, `git push -f` is actually the right move. Nearly everyone I know (including myself) has been bitten. (Fortunately, it's a memorable bite, so one rarely does it again.). If you created a new branch before rebasing, you can restore from old. Otherwise, taking a clean branch and cherry-picking may be best remedy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1460#issuecomment-452421558:228,green,green,228,https://psicode.org,https://github.com/psi4/psi4/pull/1460#issuecomment-452421558,1,['green'],['green']
Energy Efficiency,"http://sirius.chem.vt.edu/psi4manual/latest/basissets_byelement.html#apdx-basiselement. my molecule complex have 'I' atom, ; the complex was optimized by g09 at MP2/AUG-CC-PVDZ,and the 'I' (AUG-CC-PVDZ-PP),. NOW I want to decompose the interact energy by the psi4 software,but it didn't have basis set support the 'I' element. can you give me some suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/76:245,energy,energy,245,https://psicode.org,https://github.com/psi4/psi4/issues/76,1,['energy'],['energy']
Energy Efficiency,"https://github.com/psi4/psi4/pull/760/files#diff-aac3b6c47032ba056103b4f355643ca7R3113 makes a lot of sense and eliminates a pit that's easy to fall into. But need to revisit its impact on properties of charged molecules. Basically, props2 is currently broken, and need to figure out if the recent PR was too aggressive in `no_reorient`ing or if `props2` has been falling into the aforementioned pit all along.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/782:203,charge,charged,203,https://psicode.org,https://github.com/psi4/psi4/issues/782,1,['charge'],['charged']
Energy Efficiency,"https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Geometry optimizations in the TRIC coordinate system. # First Time Contributors; - Peter Kraus (@PeterKraus) - #949, #937, #922, #904; - Holger Kruse (@hokru) - #877, #912, #914 ; - Shannon Houk(@shannonhouck) - #850, #876 ; - Johnathan Waldrop (@jwaldrop107) - #921; - Marvin Lechner (@mhlechner) - #698; - Jonathon Misiewicz (@JonathonMisiewicz) - #895, #882, #873, #849, #825 ; - Adam Abbott (@adabbott) - #761; - Thomas Sexton (@tsexton) - #780 ; - Tianyuan Zhang (@tyzhang1993) - #743 ; - Dom Sirianni (@dsirianni) - #776, #952; - Asim Alenaizan (@alenaizan) - #956 . # Performance Optimizations; - Density Fitted 3-index AO->MO transformation significantly improved.; - MemDFJK module up to 2x as fast as original DFJK for in-core operations.; - DFT XC kenels threaded with a more efficient vectorization.; - DFT collocation matrix generation vectorized and exploits cache-level localization.; - All matrix and vector operations threaded for MIC and large Xeon/EPYC nodes to avoid bottlenecks. # Psi Developer Upgrade Guide; * The driver method `property(...)` has moved to`properties(...)` to avoid python namespace conflicts.; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectabili",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:2786,efficient,efficient,2786,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['efficient'],['efficient']
Energy Efficiency,"i have an update, i found this open PR (which hasn't been merged since 2018) on `psi4numpy` https://github.com/psi4/psi4numpy/pull/36/files . and adapted the code, and it works, though I couldn't specify the `dft_functional = ""WB97X-D""` parameter, but I believe it doesn't matter for the initial guess. . ```python; mol = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_g",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:146,adapt,adapted,146,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['adapt'],['adapted']
Energy Efficiency,"i/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:8029,energy,energy,8029,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"i4.energy('ccsd', return_wfn=True); t2 = wfn.T2(); ```; At the time when the python bound function is called and the code for `CCEenergyWavefunction::T2()` is executed the `global_dpd_` the dpd object that the `global_dpd_` points to has been deleted out from under it (you can see [here](https://github.com/psi4/psi4/blob/3fdf17415282884ec86e78ba34087ddd6c3645e8/psi4/src/psi4/libdpd/init.cc#L59) that `dpd_set_default` will assign the `global_dpd_` pointer to `dpd_list[0]`, and below it is the code for `dpd_close` that will delete the object. I see two possible solutions. . - The easiest to implement would be to have the getters/setters check that `global_dpd_` is not `nullptr`, and if it is construct the dpd. Before doing the geting/setting. The function would also have to free the dpd object as well as other modules will assume that `global_dpd_` is null until they initialize it and `dpd_init` will throw when they try to create it. - The other option is to simply start phasing out the `global_dpd_` entirely. A data member can be added to the `CCEnergyWavefunction` and the member functions of the class can be modified to use that data member instead of the `global_dpd_`. The initialization of the data member is moved into the construtor and the dpd will be valid until the wavefunction is destroyed. The same would need to be done for the cclambda wavefunction as well. . The constructing the dpd object is far from trival as it allocates memory for and computes index translations for all possible pairs and quartets of the orbital subspaces provided, since this is only done once at the beginning of each module using a DPD I haven't looked into how significan the overhead is but it may be an issue for the first option. The second option is better for code quality, and I once played around with this idea in a plugin years ago, but I never got to the point where I could test if there were any unforeseen consequences down the pipeline (subsequent calls to other CC* modules).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978:2170,allocate,allocates,2170,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-415107978,1,['allocate'],['allocates']
Energy Efficiency,"i4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = scf_helper(name, **kwargs). # Call the Psi4 plugin; # Please note that setting the reference wavefunction in this way is ONLY for plugins; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn). return dmrg_wfn. # Integration with driver routines; procedures['energy']['dmrg'] = run_dmrg. def exampleFN():; # Your Python code goes here; pass; ```. As you can see it calls. ```; dmrg_wfn = psi4.plugin('dmrg.so', ref_wfn); ```. instead of. ```; returnvalue = psi4.plugin('dmrg.so'); ```. So have you generated the files **init**.py, pymodule.py etcetera with the right version of psi4 (psi4-0.5)? It doesn't suffice to run the plugin with the right version of psi4, you also need to do. ```; psi4 --new-plugin dmrg; ```. with the right version of psi4. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:3399,energy,energy,3399,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['energy'],['energy']
Energy Efficiency,"i4/driver/procrouting/proc.py:1289: in scf_helper; old_wfn = core.Wavefunction.from_file(read_filename); miniconda3/envs/psi/lib/python3.6/site-packages/psi4/driver/p4util/python_helpers.py:156: in _core_wavefunction_from_file; wfn_data = np.load(wfn_data).item(); miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/npyio.py:447: in load; pickle_kwargs=pickle_kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. fp = <_io.BufferedReader name='/tmp/pytest_output.default.14086.180.npy'>, allow_pickle = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; ```. Just a report.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:6335,reduce,reduce,6335,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['reduce'],['reduce']
Energy Efficiency,"ian will be computed in the X2C Basis. Comparing only 15 out of 17 elements of H_Dirac. The 1-norm of |H_X2C - H_Dirac| is: 9.762433630521. WARNING: The X2C and Dirac Hamiltonians have substatially different eigenvalues!; This is probably caused by the recontraction of the basis set. Using in-core PK algorithm.; Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of primitives: 74; Number of atomic orbitals: 46; Number of basis functions: 46. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 1169642 doubles for integral storage.; We computed 5565 shell quartets total.; Whereas there are 5565 unique shell quartets. ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory [MiB]: 375; Schwarz Cutoff: 1E-12. OpenMP threads: 1. Minimum eigenvalue in the overlap matrix is 1.6573405367E-05.; Using Symmetric Orthogonalization. SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @UHF iter 1: -0.49999200764265 -4.99992e-01 2.73366e-14 DIIS; @UHF iter 2: -0.49999200764259 5.80092e-14 1.96206e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1Ag -0.499992 . Alpha Virtual: . 2Ag 0.054719 1B1u 0.189699 1B3u 0.189699 ; 1B2u 0.189699 3Ag 0.302215 2B3u 0.741625 ; 2B2u 0.741625 2B1u 0.741625 4Ag 0.880345 ; 1B2g 0.880345 1B3g 0.880345 1B1g 0.880345 ; 5Ag 0.880345 6Ag 0.985424 3B2u 2.200372 ; 3B3u 2.200372 3B1u 2.200372 7Ag 2.508422 ; 8Ag 2.916076 2B1g 2.916076 2B3g 2.916076 ; 2B2g 2.916076 9Ag 2.916076 4B3u 4.215041 ; 4B1u 4.215041 4B2u 4.215041 5B1u 4.215041 ; 1Au 4.215041 5B3u 4.215041 5B2u 4.215041 ; 10Ag 5.006734 6B3u 5.367541 6B2u 5.367541 ; 6B1u 5.367541 11Ag 8.068526 12Ag 8.272193 ; 3B3g 8.272193",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:5548,Energy,Energy,5548,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,"ibrary is badly formed, so it's `coreNone`. When I add a symlink to a proper name, it works just fine. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) ll stage/lib/psi4/; total 25704; lrwxrwxrwx. 1 psilocaluser psilocaluser 8 Nov 1 15:57 core.cpython-311-x86_64-linux-gnu.so -> coreNone; -rwxr-xr-x. 1 psilocaluser psilocaluser 26286096 Nov 1 16:14 coreNone; drwxr-xr-x. 7 psilocaluser psilocaluser 4096 Nov 1 15:58 driver; -rw-r--r--. 1 psilocaluser psilocaluser 5898 Nov 1 15:08 extras.py; -rw-r--r--. 1 psilocaluser psilocaluser 2934 Nov 1 14:50 header.py; -rw-r--r--. 1 psilocaluser psilocaluser 3693 Nov 1 15:08 __init__.py; -rw-r--r--. 1 psilocaluser psilocaluser 1144 Nov 1 16:14 metadata.py; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 16:14 __pycache__; drwxrwxr-x. 2 psilocaluser psilocaluser 4096 Nov 1 15:20 tests; ```; ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) stage/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; 	SCF energy........................................................PASSED; ```. Full conda env is this:. ```; (py311cf_L1) psilocaluser@bash:psinet:/psi/gits/hrw-v132/objdir_py311cf_L1: (1.3.x) conda list; # packages in environment at /psi/toolchainconda/envs/py311cf_L1:; #; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 2_kmp_llvm conda-forge; binutils_impl_linux-64 2.39 h6ceecb4_0 conda-forge; binutils_linux-64 2.39 h5fc0e48_11 conda-forge; blas 2.116 mkl conda-forge; blas-devel 3.9.0 16_linux64_mkl conda-forge; bzip2 1.0.8 h7f98852_4 conda-forge; c-ares 1.18.1 h7f98852_0 conda-forge; ca-certificates 2022.9.24 ha878542_0 conda-forge; cmake 3.24.2 h5432695_0 conda-forge; deepdiff 6.2.1 pyhd8ed1ab_0 conda-forge; expat 2.5.0 h27087fc_0 conda-forge; gcc_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gcc_linux-64 12.2.0 h4798a0e_11 conda-forge; gxx_impl_linux-64 12.2.0 hcc96c02_19 conda-forge; gxx_linux-64 12.2.0 hb41e900_11 c",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719:1758,energy,energy,1758,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1299103719,1,['energy'],['energy']
Energy Efficiency,"ic Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]; Translational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6774,energy,energy,6774,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['energy'],['energy']
Energy Efficiency,"ide addons from projects that aren't released cleanly; * psi4 users have grown accustomed to `-c psi4` and `-c psi4/label/dev`; * we like packages to be least restrictive so that devs can use conda like a package manager and build with their own tooling. That said, many of those blockers have receded, and Windows psi4 is, in fact, c-f -based.; * mkl is in for several years; * c-f gcc is plenty ahead of where psi needs it; * intel is becoming more integral and _maybe_ we could still user multiarch instead of the uniform c-f flag set; * gau2grid and libxc dependencies are now good wrt upstream and are packaged on c-f for L/M/W. (for gau2grid, the c-f Linux package had to have an optimization turned off, weirdly.) (for libxc, I think the only Linux downgrade was the multiarch, but I don't remember exactly); * a lot of the psi4 addons aren't fast-moving anymore, so they can be pressed into minting a stable version. or we can patch in the recipe.; * users can adapt to -c c-f for releases and -c psi4 for nightly builds and dev helpers. Moving psi4 releases to c-f has been a low-simmering goal of mine for a while, so you'll only get technical objections from me :-). That said, there's a lot of work involved. About 24 of these recipes are active, https://github.com/psi4/psi4meta/tree/master/conda-recipes . They're not all required to get a minimal psi4 package, but most would be needed to complete the migration. But that's just work :-); The big, multidimensional technical hurdle is libint2, a required dependency.; * I adapted their buildsys for cmake, then the developer adapted that further, but then I was busy and haven't re-reconciled it with psi4. There has never been a release or even a commit on master that works with psi4.; * There is already a libint2 package on c-f, but it has only plain integrals, not derivative ints, and is built with autotools.; * Psi uses a different integral ordering than every other open-source QC package, and this is a *compile-time* option,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624:1239,adapt,adapt,1239,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-926939624,1,['adapt'],['adapt']
Energy Efficiency,"idson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other rout",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1830,ENERGY,ENERGY,1830,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"idth}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000). stage/lib/psi4/driver/p4util/testing.py:195: TestComparisonError; ----------------------------------------------------------------------------------------------------------- Captured stdout call ------------------------------------------------------------------------------------------------------------; SCF energy............................................................................FAILED; ____________________________________________________________________________________________________________ test_tu1_h2o_energy ____________________________________________________________________________________________________________. @ctest_labeler(""tutorial;quick;smoke""); def test_tu1_h2o_energy():; > ctest_runner(__file__). stage/lib/psi4/tests/tu1-h2o-energy/test_input.py:5: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. inputdatloc = '/psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4/tests/tu1-h2o-energy/test_input.py', extra_infiles = None, outfiles = None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:4706,energy,energy,4706,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['energy'],['energy']
Energy Efficiency,"ields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). s2 = pd.DataFrame(data[""sticks""]); sticks = alt.Chart(s2).mark_bar(size=2, opacity=0.2, color=""red"").encode(; x=""poles:Q"",; y=""residues:Q"",; ). # Put the layers into a chart and bind the data; plot = alt.layer(; lines, points, tooltips, sticks,; ).properties(; title=title,; ). return plot. # get poles and residues to plot OPA and ECD spectra; poles = [r[""EXCITATION ENERGY""] for r in res]; opa_residues = [np.linalg.norm(r[""LENGTH-GAUGE ELECTRIC DIPOLE TRANSITION MOMENT""])**2 for r in res]; ecd_residues = [r[""LENGTH-GAUGE ROTATORY STRENGTH""] for r in res]. opa_spectrum = spectrum(poles=poles, residues=opa_residues, gamma=0.01, out_units=""nm""); opa_plot = plot_spectrum(opa_spectrum,; title=""OPA (Gaussian broadening)"",; x_title=(""λ"", ""nm"")). ecd_spectrum = spectrum(poles=poles, residues=ecd_residues, kind=""ECD"", gamma=0.01, out_units=""nm""); ecd_plot = plot_spectrum(ecd_spectrum,; title=""ECD (Gaussian broadening)"",; x_title=(""λ"", ""nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:3186,ENERGY,ENERGY,3186,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['ENERGY'],['ENERGY']
Energy Efficiency,ies ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec; 398/412 Test #365: options1 ......................... Passed 0.66 sec; 399/412 Test #335: scf3 ............................. Passed 1.37 sec; 400/412 Test #176: docs-dft ......................... Passed 0.77 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 0.79 sec; 402/412 Test #189: fci-tdm .......................... Passed 1.52 sec; 403/412 Test #213: mints1 ........................... Passed 0.95 sec; 404/412 Test #407: skeletonaointegrals .............. Passed 1.98 sec; 405/412 Test #410: skeletonscf ...................... Passed 0.71 sec; 406/412 Test #175: docs-bases ....................... Passed 0.64 sec; 407/412 Test #209: matrix1 .......................... Passed 0.60 sec; 408/412 Test #403: json-schema-1-throws ............. Passed 0.61 sec; 409/412 Test #216: mints4 ........................... Passed 0.69 sec; 410/412 Test #88: cepa1 ............................ Passed 3.82 sec; 411/412 Test,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:37361,energy,energy,37361,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,"ies will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0.30082 0.00000 0.39836; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: Lowdin Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.29726 4.29726 0.00000 -0.59451; 401: 2 H 0.35137 0.35137 0.00000 0.29726; 401: 3 H 0.35137 0.35137 0.00000 0.29726; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: ; 401: Mayer Bond Indices:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.80206409286279 0.80206409286279; 401: 2 0.80206409286279 0.00000000000000 0.00302003360260; 401: 3 0.80206409286279 0.00302003360260 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wiberg Bond Indices using Orthogonal Lowdin Orbitals:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.92373852221608 0.92373852221608; 401: 2 0.92373852221608 0.00000000000000 0.00699264970980; 401: 3 0.92373852221608 0.00699264970980 0.0000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:7640,Charge,Charges,7640,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charges']
Energy Efficiency,"ifferent answer when the unused molecules are commented out (not only molecules, but irrelevant keywords can cause the problem, too). The problem shows up in the final output as correlation energy has wrong sign and not matching sum of aa, ab, bb contributions. At first I though it was because you're setting `EcorlL` but printing `Ecorl`, @bozkaya , but that turns out to be innocent. I've got a valgrind if that'll help. ```; molecule methane {; C 0.0000000 0.0000000 3.0826195; H 0.5868776 0.8381742 3.4463772; H -1.0193189 0.0891638 3.4463772; H 0.0000000 0.0000000 1.9966697; H 0.4324413 -0.9273380 3.4463772; }. molecule hf {; H; F 1 0.917; }. molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type df; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7. set reference uhf; set mp2_type cd; energy('mp2'); print_variables(). compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST. ```. ```; Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 4.91953818754669; CD-HF Energy (a.u.) : -25.94513055914741; REF Energy (a.u.) : -25.94513055914741; Alpha-Alpha Contribution (a.u.) : -0.00171224403804; Alpha-Beta Contribution (a.u.) : -0.05664223456972; Beta-Beta Contribution (a.u.) : -0.00005535856885; Scaled_SS Correlation Energy (a.u.): -0.00058920086896; Scaled_OS Correlation Energy (a.u.): -0.06797068148366; CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; CD-MP2 Total Energy (a.u.) : -25.92160535570154; ======================================================================= ; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:1240,energy,energy,1240,https://psicode.org,https://github.com/psi4/psi4/issues/244,12,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"iirc, @jeffschriber is going to take up bridging between psiapi tddft by @robertodr (atop QC guts by various) and ~`energy(""tddft"")` for users.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1836:116,energy,energy,116,https://psicode.org,https://github.com/psi4/psi4/issues/1836,1,['energy'],['energy']
Energy Efficiency,"il_on_maxiter false; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; dft_vv10_postscf False; wcombine False; }; molecule mol {; 0 1; C 0.9314972462818318 9.553873448534286 1.4618215727211896; C 0.407816021141855 8.469506309378442 2.18786320317928; C 0.8158282265296265 7.159078273321417 1.778073368593668; C 1.6705486753474763 6.941146237307343 0.7209312466052733; C 2.2362488662446047 8.008509869086277 0.003971742160492786; C 1.911850027633602 9.341079539288122 0.4146901215657727; H 0.614495362639488 10.566900793575911 1.4754165926364617; H -0.36704844148631577 8.614110059906363 3.04421928826377; H 0.4567894628980789 6.157197048912012 2.369426098541459; H 1.8364925212621395 5.872552432013023 0.3910028702339573; H 2.9471948988553818 7.873466587177986 -0.782748863606265; H 2.4659886000145983 10.188822366489614 -0.03294075189628659; units angstrom; no_reorient; no_com; symmetry c1; }; energy('pbe'); ```. And below is the full file that is an example of one I ran into the hang with (note that if I run it again, it usually runs just fine... I have only noticed this horrible hang behavior because I am running a _very large_ number of calcs on a daily basis, and eventually get unlucky!). Note that when things hang, they hang on the very first step of the first SCF run and _only_ there. I think that is because if you aren't unlucky and `lebedev_mapping_` gets successfully populated, there's no more hangs that can happen. (Sorry the below is LONG, I wanted to reproduce exactly all settings that went into a run, in case they are important. It is hard to figure out the ""minimal example"" as the crashes are rare _enough_ to make it very hard to reproduce them ""in captivity""). ```; np.set_printoptions(threshold=sys.maxsize); set DF_INTS_NUM_THREADS = 16; set freeze_core 1; set {; basis def2-tzvppd; guess sad; fail_on_maxiter false; dft_nuclear_scheme ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2735:4387,energy,energy,4387,https://psicode.org,https://github.com/psi4/psi4/issues/2735,1,['energy'],['energy']
Energy Efficiency,"ill a problem with documentation (http://www.psicode.org/psi4manual/1.2/molden.html):. This is a fully working example:. ```; molecule {; 0 1; O 1.01646 0.05097 0.09714; H 1.98435 0.06069 0.05173; H 0.73761 0.24513 -0.81034; }; set basis cc-pVTZ. E, wfn = properties('ccsd', properties=['dipole'], return_wfn=True); nmopi = wfn.nmopi(); Da_so = wfn.Da(); Ca_inv = core.Matrix(""CA inv"", nmopi, nmopi); Ca_inv.copy(wfn.Ca()); Ca_inv.general_invert(); Da_mo = Matrix.triplet(Ca_inv, Da_so, Ca_inv, False, False, True); # Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False) # line from documentation; molden(wfn, 'ccsd_no.molden', density_a=Da_mo); ```. Loading this into Molden gives normals results:. ```. COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -0.4661; H 0.2332; H 0.2332; ```. When following the documentation, I got:. ```; COORDINATES; used for orbitals/density. X Y Z. 1 O -0.103043 0.072862 0.000000; 2 H -0.015287 -1.756185 0.000000; 3 H 1.650657 0.599812 0.000000; ; Mulliken Charges; ================; ; O -94.4305; H -12.0740; H -12.0736; ; Sum of Mulliken Charges: ********; ```. (FYI: my actual intention is not to visualize in Molden, but this is just an easy check.). Besides the documentation, there are some additional minor issues. I'll make a list here:. - [ ] Fix docs.; - [ ] When running the input for a second time, the new output is appended to the existing molden file, which is never useful.; - [ ] The current approach is not the most efficient, nor convenient: the user first has to compute a pseudo-inverse and then in the `molden` function a matrix is diagonalized. This can be done in one step by performing a generalized eigenvalue decomposition. This could happen inside the `molden` function, but then the API would need to change, because that would require the density matrix in the AO basis as input.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1485:1298,Charge,Charges,1298,https://psicode.org,https://github.com/psi4/psi4/issues/1485,3,"['Charge', 'efficient']","['Charges', 'efficient']"
Energy Efficiency,"ils; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Unused function `MOInfoBase::correlate` is removed; - [x] The only thing the `MOInfoBase` dtor does is call `MOInfoBase::cleanup()`, an empty function. Removed both.; - [x] Moved the contents of `MOInfo::free_memory()` into its only caller, the `MOInfo` dtor; - [x] Added a lot of new machine-readable docstrings, moved some existing ones; - [x] Some ""obsolete code"", commented out a long time ago is deleted from `moinfo_mappings.cc`; - [x] Moved the `double** scf` MO array and the `get_scf_mos()` getter from `MOInfoBase` to `MOInfo` and made the array private; - [x] Moved the contents of `MOInfoBase::startup()` into its only caller, the `MOInfoBase` ctor; - [x] Moved `MOInfoBase::nmo` to `MOInfo` and made it private; - [x] Made the molecular charge `const` and private in `MOInfoBase`; - [x] Made `MOInfoBase::sopi` private, added a protected getter fn to give access in derived classes; - [x] Made `MOInfoBase::nso`, `MOInfoBase::nuclear_energy` and `MOInfoBase::irr_labs` private; - [x] All functions in `MOInfoBase` that have previously returned copies of `std::vector` members now return `const&` to the vector in the object, avoiding a potential copy.; - [x] Since `MOInfoBase::silent` is only used in the ctor of `MOInfo,`, I removed it from `MOInfoBase` and `MOInfoSCF`; - [x] Inlined `MOInfo::get_actv(size_t i)` and `MOInfo::get_docc(size_t i)` as both were only called once. Since these overloads are now gone from `MOInfo`, it can now just use `get_docc()` and `get_actv()` from `MOInfoBase` instead of having to reimplement or explicitly inherit them. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing; - [x] Errors in the full test suite appear to be unrelated to `libmoinfo`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3155:2392,charge,charge,2392,https://psicode.org,https://github.com/psi4/psi4/pull/3155,1,['charge'],['charge']
Energy Efficiency,ime = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; * DF-CCSD *; * Density-fitted CCSD *; * *; * Eugene DePrince *; * *; *******************************************************. ==> 3-index integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2797. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -4.017895394144. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 706; Number of virtual orbitals in truncated space: 662. ==> Memory <==. Total memory requirements: 84579.55 mb; 3-index integrals: 11059.10 mb; CCSD intermediates: 73520.46 mb. memory requirements for CCSD(T): 463642.28 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 24; Number of active occupied orbitals: 74; Number of active virtual orbitals: 662; Number of frozen virtual orbitals: 44. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 705. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -2.981564397886; SS MP2 FNO correction: -1.036330996258; MP2 F,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:5925,energy,energy,5925,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"ime = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER = 12 FREEZE CORE = yes; NUM ROOTS = 10 ICORE = 1; PRINT = 1 FCI = no; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14440,energy,energy,14440,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"ime taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1799,energy,energy,1799,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,implement adaptable reference for closed/open-shell,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118:10,adapt,adaptable,10,https://psicode.org,https://github.com/psi4/psi4/issues/118,1,['adapt'],['adaptable']
Energy Efficiency,"in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 0.49 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.1998551539 -0.3267843769 0.1994563594 0; 1 1 1 -0.1953653583 0.0044897956 0.0261066660 0; 2 2 1 -0.1998807440 -0.0045153857 0.0092191040 0; 3 3 1 -0.2002563980 -0.0003756540 0.0033933116 0; 4 4 1 -0.2003267260 -0.0000703281 0.0005902038 0; 5 5 1 -0.2003284394 -0.0000017134 0.0001874109 0; 6 6 1 -0.2003286037 -0.0000001643 0.0000507167 0; 7 7 1 -0.2003286166 -0.0000000128 0.0000118947 0; 8 8 1 -0.2003286173 -0.0000000007 0.0000025104 0; 9 8 2 -0.2003286173 -0.0000000000 0.0000005766 0; 10 8 3 -0.2003286173 -0.0000000000 0.0000001177 0; 11 8 4 -0.2003286173 -0.0000000000 0.0000000230 0. CISD iterations converged!. CISD variational energy: -0.200328617292; CISD transition energy: -0.200328617850. OS SCS-MP2 correlation energy: -0.179813193864; SS SCS-MP2 correlation energy: -0.016670275217; SCS-MP2 correlation energy: -0.196483469081; * SCS-MP2 total energy: -76.213780024364. OS MP2 correlation energy: -0.149844328220; SS MP2 correlation energy: -0.050010825651; MP2 correlation energy: -0.199855153871; * MP2 total energy: -76.217151709154. OS CISD correlation energy: -0.158048399059; SS CISD correlation energy: -0.042280218791; CISD correlation energy: -0.200328617292; * CISD total energy: -76.217625172575. Total time for CISD iterations: 0.06 s (user); 0.11 s (system); 0 s (total). Time per iteration: 0.01 s (user); 0.01 s (system); 0.00 s (total). *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.06 seconds = 0.00 minutes; 	system time = 0.11 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.52 seconds = 0.01 minutes; 	system time = 0.20 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes. *** Psi4 exiting succe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:11634,energy,energy,11634,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,inconsistent cd-mp2 energy,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244:20,energy,energy,20,https://psicode.org,https://github.com/psi4/psi4/issues/244,1,['energy'],['energy']
Energy Efficiency,"indow computer to debug, since it's likely a scratch/PSIO issue; * the answers in sapt-ecp test are probably themselves wrong b/c of #1968 ; * further implications for sapt probably need to be thought through like for frozen core, esp for Ca2+ type monomers; * any fixes should be rolled out to all three SAPT codes -- I bet the FC is only for Ed's, too. mac vs win here; ```; ---------------------------------------------------------		 ---------------------------------------------------------; SCF						 SCF; by Justin Turney, Rob Parrish, Andy Simmonett			 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith				 and Daniel G. A. Smith; RHF Reference					 RHF Reference; 1 Threads, 500 MiB Core				 1 Threads, 500 MiB Core; ---------------------------------------------------------		 ---------------------------------------------------------; 									 >; ==> Geometry <==								 ==> Geometry <==; 									 >; Molecular point group: c1							 Molecular point group: c1; Full point group: C1							 Full point group: C1; 									 >; Geometry (in Angstrom), charge = 2, multiplicity = 1:			 Geometry (in Angstrom), charge = 2, multiplicity = 1:; 									 >; Center X Y Z 		 Center X Y Z ; ------------ ----------------- ----------------- -------------		 ------------ ----------------- ----------------- -------------; Gh(H) -2.335920635844 1.120167395493 0.00039069		 Gh(H) -2.335920635844 1.120167395493 0.00039069; Gh(H) -2.452373635844 -1.068291604507 0.00055169		 Gh(H) -2.452373635844 -1.068291604507 0.00055169; Gh(O) -1.568456635844 -0.046200604507 0.00024869		 Gh(O) -1.568456635844 -0.046200604507 0.00024869; CA 0.748527364156 0.017183395493 -0.00012330		 CA 0.748527364156 0.017183395493 -0.00012330; 									 >; Running in c1 symmetry.							 Running in c1 symmetry.; 									 >; Rotational constants: A = 6.96289 B = 0.22986 C = 0		 Rotational constants: A = 6.96289 B = 0.22986 C = 0; Rotational constants: A = 208742.34059 B = 6890.97828 C = 6670		 Rotational ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:1580,charge,charge,1580,https://psicode.org,https://github.com/psi4/psi4/issues/3072,2,['charge'],['charge']
Energy Efficiency,"ine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2795,energy,energy,2795,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"ine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2881,energy,energy,2881,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"ine in the code). PKJK has some amount of control over which subalgorithm is utilized already - the `PK_ALGO` keyword specifies whether the Reorder or Yoshimine out-of-core algorithm is to be used, if an out-of-core algorithm is used; while the `PK_NO_INCORE` keyword disables the InCore PK algorithm and forces one of the out-of-core algorithms to be used. If the functionality of `PK_NO_INCORE` seems familiar, that's because it is - it is effectively the _exact_ same thing as `SCF_SUBTYPE=OUT_OF_CORE` for MemDFJK (in https://github.com/psi4/psi4/pull/2848) and DiskDFJK (in https://github.com/psi4/psi4/pull/2924). The goal of this PR is to clean that up; `PK_NO_INCORE` is replaced by `SCF_SUBTYPE` for PKJK. `SCF_SUBTYPE=OUT_OF_CORE` has the exact same effect that `PK_NO_INCORE=TRUE` had previously. `SCF_SUBTYPE=AUTO` has PKJK select in-core or out-of-core by default, as per usual. Finally, `SCF_SUBTYPE=INCORE` allows PKJK to force-execute its in-core algorithm, a new functionality for PKJK as far as I am aware. As usual with `SCF_SUBTYPE`, setting it to `INCORE` without allocating sufficient memory to Psi4 will throw an exception. ## User API & Changelog headlines; - [X] The `PK_NO_INCORE` keyword has been removed.; - [X] The `SCF_SUBTYPE` keyword has been added for PKJK. `SCF_SUBTYPE=AUTO` has PKJK select the subalgorithm by default. `SCF_SUBTYPE=OUT_OF_CORE` forces PKJK to use one of the two out-of-core algorithms (equivalent to `PK_NO_INCORE=TRUE` previously). `SCF_SUBTYPE=INCORE` forces PKJK to use its in-core algorithm, and throws an exception if insufficient memory is allocated. ## Dev notes & details; - [X] The `PK_NO_INCORE` keyword for PKJK has been replaced with the new `SCF_SUBTYPE` keyword. ## Questions; -N/A. ## Checklist; - [X] Tests added for any. new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926:2221,allocate,allocated,2221,https://psicode.org,https://github.com/psi4/psi4/pull/2926,1,['allocate'],['allocated']
Energy Efficiency,"ing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level_shift` and `do_level_shift` keywords have been removed. Contact the developers if you've found a case where the new convergence is worse than old!. ## Checklist; - [x] [Quick tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3590,energy,energy,3590,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,"ing to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - [x] any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - [x] extrapolation functions for composite need to be registered with register_xtpl_function; - [x] CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:3265,energy,energy,3265,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['energy'],['energy']
Energy Efficiency,"inmodule.c.h:283; #38 0x7fb0e963efed in _PyCFunction_FastCallDict Objects/methodobject.c:234; #39 0x7fb0e96d8499 in call_function Python/ceval.c:4830; #40 0x7fb0e96dc71b in _PyEval_EvalFrameDefault Python/ceval.c:3328; #41 0x7fb0e96d809d in _PyEval_EvalCodeWithName Python/ceval.c:4159; #42 0x7fb0e96d86cc in PyEval_EvalCodeEx Python/ceval.c:4180; #43 0x7fb0e96d871a in PyEval_EvalCode Python/ceval.c:731; #44 0x7fb0e97140a1 in run_mod Python/pythonrun.c:1025; #45 0x7fb0e97140a1 in PyRun_FileExFlags Python/pythonrun.c:978; #46 0x7fb0e9714206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #47 0x7fb0e97306fc in run_file Modules/main.c:340; #48 0x7fb0e97306fc in Py_Main Modules/main.c:810; #49 0x400bbb in main Programs/python.c:69; #50 0x7fb0e869b444 in __libc_start_main (/lib64/libc.so.6+0x22444); #51 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x61800027ffa0 is located 0 bytes to the right of 800-byte region [0x61800027fc80,0x61800027ffa0); allocated by thread T0 here:; #0 0x7fb0e9b6149f in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_malloc_linux.cc:86; #1 0x7fb0ddb0c841 in psi::Matrix::matrix(int, int) /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:247; #2 0x7fb0ddb1201a in psi::Matrix::alloc() /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:486; #3 0x7fb0ddb0827d in psi::Matrix::Matrix(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int const*, int const*, int) /home/raimis/psi4.git/psi4/src/psi4/libmints/matrix.cc:129; #4 0x7fb0ddb50910 in void __gnu_cxx::new_allocator<psi::Matrix>::construct<psi::Matrix, char const (&) [1], int&, psi::Dimension const&, psi::Dimension&>(psi::Matrix*, char const (&) [1], int&, psi::Dimension const&, psi::Dimension&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:136; #5 0x7fb0ddb50269 i",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861:6643,allocate,allocated,6643,https://psicode.org,https://github.com/psi4/psi4/pull/1469#issuecomment-452722861,1,['allocate'],['allocated']
Energy Efficiency,"input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2432,reduce,reduce,2432,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduce']
Energy Efficiency,"input.dat --loglevel=10 && cat ../tests/tu1-h2o-energy/input.log`; ```; 2022-03-28:21:06:46,635 INFO [psi4.driver.driver:603] Compute energy(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:46,644 DEBUG [psi4.driver.driver:604] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:1917,energy,energy,1917,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['energy'],['energy']
Energy Efficiency,"interest) that this PR has or will; > accomplish.; >; > - Add interaction of external potential with nuclei to nuclear; > repulsion; > - Add interaction of external potential with basis functions to; > one-electron Hamiltonian for SCF calculations and calculation of HF; > interaction energy; > - Fixed minor typo in proc_util.py; >; > Questions; >; > - I added a method to the Wavefunction class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1648,energy,energy,1648,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2615,allocate,allocates,2615,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['allocate'],['allocates']
Energy Efficiency,ints9 .................... Passed 2.21 sec; Start 296: psimrcc-sp1; 300/413 Test #400: json-v11-gradient ................ Passed 1.40 sec; Start 403: json-schema-1-orient; 301/413 Test #100: cisd-sp-2 ........................ Passed 4.98 sec; Start 226: molden2; 302/413 Test #397: python-mints13 ................... Passed 2.19 sec; Start 312: rasci-c2-active; 303/413 Test #238: mpn-bh ........................... Passed 3.26 sec; Start 205: frac; 304/413 Test #95: cisd-h2o+-1 ...................... Passed 4.61 sec; Start 398: python-memdfjk; 305/413 Test #96: cisd-h2o+-2 ...................... Passed 5.04 sec; Start 259: omp3-1; 306/413 Test #189: fci-h2o-fzcv ..................... Passed 4.96 sec; Start 333: scf1; 307/413 Test #94: cisd-h2o+-0 ...................... Passed 4.41 sec; Start 389: python-energy; 308/413 Test #188: fci-h2o-2 ........................ Passed 6.48 sec; Start 273: opt5; 309/413 Test #398: python-memdfjk ................... Passed 1.04 sec; Start 271: opt3; 310/413 Test #389: python-energy .................... Passed 1.00 sec; Start 231: mp2-grad2; 311/413 Test #248: omp2-1 ........................... Passed 2.94 sec; Start 119: dfcasscf-sa-sp; 312/413 Test #233: mp2p5-grad1 ...................... Passed 2.39 sec; Start 402: json-schema-1-ghost; 313/413 Test #255: omp2p5-1 ......................... Passed 2.99 sec; Start 341: scf-property; 314/413 Test #205: frac ............................. Passed 2.48 sec; Start 181: fsapt2; 315/413 Test #259: omp3-1 ........................... Passed 2.37 sec; Start 138: dfmp2-grad3; 316/413 Test #273: opt5 ............................. Passed 2.08 sec; Start 6: ao-casscf-sp; 317/413 Test #231: mp2-grad2 ........................ Passed 2.00 sec; Start 407: skeleton; 318/413 Test #226: molden2 .......................... Passed 4.08 sec; Start 405: json-schema-1-gradient; 319/413 Test #312: rasci-c2-active .................. Passed 4.10 sec; Start 409: skeletondfmp2; 320/413 Test #296: psimrcc-sp1 ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:29065,energy,energy,29065,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,"inutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:12645,Allocate,Allocate,12645,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Allocate'],['Allocate']
Energy Efficiency,"ion 6 energy: -320.87957561560631 -0.00035297476529 0.00008011419372; @Atomic UHF iteration 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1676,energy,energy,1676,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"ion by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 7, 2, 2, 2, 0, 5, 4, 5 ] . @DF-RHF iter 2: -5.42420113211885 6.17113e+01 6.71875e-01 DIIS; @DF-RHF iter 3: -208.00917694080209 -2.02585e+02 3.53265e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 8, 2, 2, 3, 0, 4, 4, 4 ] . @DF-RHF iter 4: -213.73836050769307 -5.72918e+00 3.05852e-01 DIIS; @DF-RHF iter 5: -229.29046486569237 -1.55521e+01 1.60752e-01 DIIS; @DF-RHF iter 6: -231.83352362698204 -2.54306e+00 8.54643e-02 DIIS; @DF-RHF iter 7: -233.14739556085581 -1.31387e+00 1.00459e-02 DIIS; @DF-RHF iter 8: -233.26115993293257 -1.13764e-01 6.01984e-03 DIIS; @DF-RHF iter 9: -233.30679760470645 -4.56377e-02 2.25206e-03 DIIS; @DF-RHF iter 10: -233.31593146369286 -9.13386e-03 6.80191e-04 DIIS; @DF-RHF iter 11: -233.31660737631540 -6.75913e-04 2.28951e-04 DIIS; @DF-RHF iter 12: -233.31678610778147 -1.78731e-04 1.58902e-04 DIIS; @DF-RHF iter 13: -233.31696020659965 -1.74099e-04 1.02174e-04 DIIS; @DF-RHF iter 14: -233.31707462571032 -1.14419e-04 1.37466e-05 DIIS; @DF-RHF iter 15: -233.31707485378129 -2.28071e-07 3.16438e-06 DIIS; @DF-RHF iter 16: -233.31707486465362 -1.08723e-08 5.35650e-07 DIIS; Energy converged.; ```. (Are ECP electrons supposed to be included in DOCC?). The listed doubly occupied orbitals are; ```; Doubly Occupied:. 1Ag -1.892135 1B1u 0.256341 1B3u 0.256341; 1B2u 0.256341 2B1u 2.685551 2B3u 2.685551; 2B2u 2.685551 2Ag 3.556568 1B3g 3.556568; 1B2g 3.561885 3Ag 3.561885 1B1g 3.561885; 4Ag 3.830228 5Ag 3.956522 2B2g 3.956522; 2B1g 3.956522 2B3g 3.967605 6Ag 3.967605; 3B1u 4.573133 3B3u 4.573133 3B2u 4.573133; 7Ag 4.839905 4B1u 5.327348 4B3u 5.327348; 4B2u 5.327348 8Ag 5.637776 3B3g 5.637776; ```. (Surely ECP electrons shouldn't be included here?). Switching out the ECP-containing basis for a manually defined Pople basis set resolved all strangeness. Needless to say, basis guess and ECP really don't play nicely. I'll leave it to the people working on ECPs to decide what the right fix is.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439:1839,Energy,Energy,1839,https://psicode.org,https://github.com/psi4/psi4/issues/1439,1,['Energy'],['Energy']
Energy Efficiency,"ion); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1718,energy,energy,1718,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"ional debug printout is; ```; ============================================================================== ; ================ Performing DF-OREMP iterations... =========================== ; ============================================================================== ; Minimizing DF-REMP-L Functional ; ------------------------------ ; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2 ; ---- --------------- ---------- ----------- ----------- ---------- ; 1 -2211.6030242185 -2.21e+03 1.77e-04 4.91e-03 2.60e-06 ; 2 -2211.6180646887 -1.50e-02 9.31e-05 3.61e-03 1.12e-06 ; Matrix::vector_dot: Size of vector 1: 124357188 ; Matrix::vector_dot: Size of vector 2: 4419324484 . Traceback (most recent call last):; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 81, in <module>; File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/driver.py"", line 548, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 685, in select_lccd; return func(name, **kwargs); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/proc.py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 func",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:1121,energy,energy,1121,https://psicode.org,https://github.com/psi4/psi4/issues/2591,2,['energy'],['energy']
Energy Efficiency,"ions <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter 0: -76.25426884215133 -7.62543e+01 8.25166e-02 ; @DF-RKS iter 1: -76.28225054480332 -2.79817e-02 2.00561e-02 ; @DF-RKS iter 2: -76.24994640870842 3.23041e-02 2.57661e-02 DIIS; @DF-RKS iter 3: -76.33537346510494 -8.54271e-02 5.64978e-04 DIIS; @DF-RKS iter 4: -76.33541666733151 -4.32022e-05 7.02182e-05 DIIS; @DF-RKS iter 5: -76.33541734518556 -6.77854e-07 7.73497e-06 DIIS; @DF-RKS iter 6: -76.33541735566205 -1.04765e-08 1.19390e-06 DIIS; @DF-RKS iter 7: -76.33541735595242 -2.90370e-10 2.40194e-07 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A -19.184718 2A -1.000452 3A -0.509499 ; 4A -0.360493 5A -0.281933 . Virtual: . 6A 0.113651 7A 0.212439 8A 0.827371 ; 9A 0.915633 10A 0.937398 11A 0.938267 ; 12A 1.123156 13A 1.234184 14A 1.763048 ; 15A 1.774444 16A 1.811716 17A 2.329295 ; 18A 2.632599 19A 3.611500 . Final Occupation by Irrep:; A ; DOCC [ 5 ]. Energy converged. @DF-RKS Final Energy: -76.33541735595242. => Energetics <=. Nuclear Repulsion Energy = 8.9272515369995578; One-Electron Energy = -122.8414514085261118; Two-Electron Energy = 44.6070248999700425; DFT Exchange-Correlation Energy = -7.0282423843959076; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -76.3354173559524156. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 14.2834 Y: 0.0000 Z: -23.5602. Electronic Dipole Moment: (a.u.); X: -15.1523 Y: -0.0000 Z: 23.6231. Dipole Moment: (a.u.); X: -0.8689 Y: -0.0000 Z: 0.0628 Total: 0.8712. Dipole Moment: (Debye); X: -2.2085 Y: -0.0000 Z: 0.1597 Total: 2.2143. Saving occupied orbitals to File 180. *** tstop() called on machtiani1 at Wed Feb 10 19:35:42 2016; Module tim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:7922,Energy,Energy,7922,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Energy'],['Energy']
Energy Efficiency,"ions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVXZ-PP` issue can certainly wait. The user can combine their own basis sets into user-supplied `.gbs`'s (which is what I was doing for my systems anyway) and the CBS function will happily use them, as long as they match the regex.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:1241,power,power,1241,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,2,['power'],['power']
Energy Efficiency,"ir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4574,energy,energy,4574,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,irtual orbitals in original space: 678; Number of virtual orbitals in truncated space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *************************,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2055,energy,energy,2055,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"is is a draft of the DLPNO-CCSD PR that will be coming in the next few months. The purpose of this is for the developers and research groups to be able to run and test DLPNO-CCSD before it is officially part of the code. . Credit to @JoseMadriaga for the derivations ; [LocalCCSD1to10.pdf](https://github.com/psi4/psi4/files/11114337/LocalCCSD1to10.pdf). Useful References:; [Original DLPNO-CCSD Paper](https://aip.scitation.org/doi/full/10.1063/1.47735); [Sparse Maps II Paper](https://aip.scitation.org/doi/10.1063/1.4939030). Example Input File; ```; memory 20 GB. molecule mol {; 0 1; O 0.705 0.744 0.16; H -0.071 0.264 0.45; H 1.356 0.064 -0.014; symmetry c1; }. set {; basis cc-pVDZ; scf_type df; freeze_core true; pno_convergence normal; }; energy('dlpno-ccsd'); ```. ### Results (Waterclusters in TZ); [Speedups, relative to DF-CCSD]; ![wc_tz_speedups](https://user-images.githubusercontent.com/60559795/228892229-c3269bf9-3386-4861-8660-92a6dcc3685e.jpeg). [Percent Correlation Energy Recovered, relative to DF-CCSD, all >= 99.9%]; ![wc_tz_percent_corr_recovered](https://user-images.githubusercontent.com/60559795/228892322-7c968c62-f874-496c-84e3-06b65c84803d.jpeg). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Implement the DLPNO-CCSD algorithm. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feel free to use this code, it is not fully tested yet, but preliminary tests show encouraging results, and is MUCH faster than conventional CCSD; - [ ] If you benchmark my code, please post results in the thread. ## Questions; - [ ] Question1. ## Checklist; - [ ] Add documentation; - [ ] Add references to terms and equations; - [ ] Tests added for any new features; - [ ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2915:1019,Energy,Energy,1019,https://psicode.org,https://github.com/psi4/psi4/pull/2915,1,['Energy'],['Energy']
Energy Efficiency,"is sets that did not work, it will raise the RuntimeError shown below. I have tried placing inside the loop all combinations of `psi4.core.clean()`, `psi4.core.clean_variables()`, and `psi4.core.clean_options()`, but it still does not work. I believe my installation to be fine, as I can manually restart the kernel and obtain all the basis sets required, albeit only after restarting the kernel each time. #### Version; `psi4.__version__`: '1.4a2.dev313'. ```python; --------------------------------------------------------------------; RuntimeError Traceback (most recent call last); <ipython-input-7-95f03e942086> in <module>; 9 ; 10 psi4.set_options({'reference': 'uhf','basis': basis_set}); ---> 11 e, wfn = psi4.energy('hf',return_wfn=True); 12 ; 13 print(""energy ="",e,"" and number of basis functions ="", wfn.basisset().nbf()). /usr/local/psi4/lib/psi4/driver/driver.py in energy(name, **kwargs); 568 shutil.copy(item, targetfile); 569 ; --> 570 wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); 571 ; 572 for postcallback in hooks['energy']['post']:. /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in run_scf(name, **kwargs); 2180 ; 2181 ; -> 2182 scf_wfn = scf_helper(name, post_scf=False, **kwargs); 2183 returnvalue = scf_wfn.energy(); 2184 . /usr/local/psi4/lib/psi4/driver/procrouting/proc.py in scf_helper(name, post_scf, **kwargs); 1511 ); 1512 ; -> 1513 e_scf = scf_wfn.compute_energy(); 1514 for obj in [core, scf_wfn]:; 1515 for pv in [""SCF TOTAL ENERGY"", ""CURRENT ENERGY"", ""CURRENT REFERENCE ENERGY""]:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_compute_energy(self); 81 self.initialize_jk(self.memory_jk_); 82 else:; ---> 83 self.initialize(); 84 ; 85 try:. /usr/local/psi4/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py in scf_initialize(self); 195 mints.set_rel_basisset(self.get_basisset('BASIS_RELATIVISTIC')); 196 ; --> 197 mints.one_electron_integrals(); 198 self.initialize_jk(self.memory_jk_, jk=jk);",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1794:1694,energy,energy,1694,https://psicode.org,https://github.com/psi4/psi4/issues/1794,2,['energy'],['energy']
Energy Efficiency,"it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 DIIS/INCFOCK; @RHF iter 5: -235.38297663987922 -6.19818e-05 1.50376e-05 DIIS/INCFOCK; @RHF iter 6: -235.38298211805841 -5.47818e-06 2.18669e-06 DIIS; @RHF iter 7: -235.38298224217732 -1.24119e-07 6.25234e-07 DIIS; Energy and wave function converged with early screening.; Performing final iteration with tighter screening. @RHF iter 8: -235.38489215328417 -1.90991e-03 8.02480e-05 DIIS; Energy and wave function converged.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:1628,Energy,Energy,1628,https://psicode.org,https://github.com/psi4/psi4/pull/2682,3,['Energy'],['Energy']
Energy Efficiency,"iter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; *******************************************************************; *******************************************************************. As you can see, there is typically the same kind of sign for some determinants sharing a similar coefficient. For example, for the groundstate we have : 0.691216 ( 0, 1) 7AX 8AA 9AB and 0.691216 ( 1, 0) 7AX 8AB 9AA. However, in the context of a singlet spin symmetry, these determinants should present opposite signs. To check this, I used a personal code to build up from scratch the frozen core Hamiltonian ass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1816,energy,energy,1816,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"ith this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; Ite",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:1010,Energy,Energy,1010,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,1,['Energy'],['Energy']
Energy Efficiency,jk ................... Passed 1.05 sec; Start 73: cc54; 195/413 Test #328: scf-ecp .......................... Passed 32.66 sec; Start 174: dft3; 196/413 Test #390: python-curve ..................... Passed 4.05 sec; Start 179: extern2; 197/413 Test #256: omp2p5-2 ......................... Passed 37.38 sec; Start 360: tu5-sapt; 198/413 Test #201: fnocc1 ........................... Passed 37.85 sec; Start 260: omp3-2; 199/413 Test #240: nbody-intermediates .............. Passed 25.85 sec; Start 191: fci-tdm-2; 200/413 Test #145: dfomp2-grad1 ..................... Passed 26.84 sec; Start 348: sapt-dft1; 201/413 Test #24: cc12 ............................. Passed 50.83 sec; Start 249: omp2-2; 202/413 Test #394: python-cc54 ...................... Passed 56.05 sec; Start 401: json-schema-1-energy; 203/413 Test #174: dft3 ............................. Passed 25.44 sec; Start 324: sapt-dft-lrc; 204/413 Test #360: tu5-sapt ......................... Passed 20.54 sec; Start 243: ocepa-grad1; 205/413 Test #401: json-schema-1-energy ............. Passed 5.82 sec; Start 90: cepa3; 206/413 Test #179: extern2 .......................... Passed 31.66 sec; Start 389: python-energy; 207/413 Test #389: python-energy .................... Passed 1.70 sec; Start 166: dft-grad1; 208/413 Test #191: fci-tdm-2 ........................ Passed 20.28 sec; Start 292: psimrcc-ccsd_t-4; 209/413 Test #72: cc53 ............................. Passed 85.96 sec; Start 141: dfomp2-1; 210/413 Test #324: sapt-dft-lrc ..................... Passed 19.90 sec; Start 403: json-schema-1-orient; 211/413 Test #73: cc54 ............................. Passed 48.53 sec; Start 209: gibbs; 212/413 Test #348: sapt-dft1 ........................ Passed 24.61 sec; Start 167: dft-grad2; 213/413 Test #260: omp3-2 ........................... Passed 35.02 sec; Start 402: json-schema-1-ghost; 214/413 Test #166: dft-grad1 ........................ Passed 14.49 sec; Start 277: opt9; 215/413 Test #403: json-schema-1-orient ............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:19337,energy,energy,19337,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['energy'],['energy']
Energy Efficiency,"k (most recent call last):; File ""/home/gytibor/orca_bcc/../p4debug/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 192, in <module>; File ""/home/gytibor/p4debug/lib/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/gytibor/p4debug/lib/psi4/driver/procrouting/proc.py"", line 2820, in run_bccd; sort_func(ref_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on line: 113; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::PSIO::wt_toclen(unsigned long, unsigned long); psi::PSIO::write(unsigned long, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int). Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""REFERENCE"", ""RHF""); core.set_global_option(""SCF_TYPE"", ""PK""); core.set_global_option(""INTS_TOLERANCE"", 1.0E-14); core.set_global_option(""E_CONVERGENCE"", 1.0E-10); core.set_global_option(""D_CONVERGENCE"", 1.0E-10); --> energy('BCCD'). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO Error !; ! Error occurred in file: /home/gytibor/psi4/psi4/src/psi4/libpsio/toclen.cc on !; ! line: 113 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::PSIO::wt_toclen(unsigned long, unsigned long) !; ! psi::PSIO::write(unsigned long, char const*, char*, unsigned long, !; ! psi::psio_address, psi::psio_address*) !; ! psi::DPD::file4_mat_irrep_wrt(psi::dpdfile4*, int) !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204:3489,energy,energy,3489,https://psicode.org,https://github.com/psi4/psi4/issues/2261#issuecomment-1226239204,1,['energy'],['energy']
Energy Efficiency,"k and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1040,ENERGY,ENERGY,1040,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"k behind the scene by running the 3 SCF and handling all relevant files. If you want to feed orbitals into the SCF, you need to do all of that directly in the input file. That is not really pretty, and right now we are changing some things in Psi4 infrastructure, which means the same input file might need tweaking in future versions. Below is an example with the molecule you had above. The symmetry c1, no_reorient and no_com options _must_ be there, I also assumed you had the orbital files at hand already. molecule dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; symmetry c1; no_reorient; no_com; }. set {; basis jun-cc-pvdz; scf_type df; e_convergence 10; guess read; }. dimer = psi4.get_active_molecule(); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SCF', 'SAPT', '2-dimer'); psi4.set_global_option('DF_INTS_IO', 'SAVE'). energy('scf',restart_file='./psi.15065.dimer.180'). psi4.set_global_option('DF_INTS_IO', 'LOAD'). monomerA = dimer.extract_subsets(1, 2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_A'). energy('scf',restart_file='./psi.15065.monomerA.180'). monomerB = dimer.extract_subsets(2, 1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); psi4.set_local_option('SCF', 'SAPT', '2-monomer_B'). energy('scf',restart_file='./psi.15065.monomerB.180'). psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERA, 'monomerA', 'dimer'); psi4.IO.change_file_namespace(p4const.PSIF_SAPT_MONOMERB, 'monomerB', 'dimer'). activate(dimer); psi4.IO.set_default_namespace('dimer'); psi4.set_local_option('SAPT', 'E_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'D_CONVERGENCE', 10e-10); psi4.set_local_option('SAPT', 'SAPT_LEVEL', 'SAPT0'). psi4.sapt()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-180678000:1062,energy,energy,1062,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-180678000,3,['energy'],['energy']
Energy Efficiency,"k if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1116,ENERGY,ENERGY,1116,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1714,energy,energy,1714,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"ks as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 510: dftd3-energy; 1/5 Test #510: dftd3-energy ..................... Passed 24.64 sec; Start 511: dftd3-grad; 2/5 Test #511: dftd3-grad ....................... Passed 11.33 sec; Start 512: dftd3-psithon2; 3/5 Test #512: dftd3-psithon2 ................... Passed 13.39 sec; Start 513: dftd3-version; 4/5 Test #513: dftd3-version .................... Passed 27.06 sec; Start 514: dftd3-nbody-cp-gradient; 5/5 Test #514: dftd3-nbody-cp-gradient ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:1499,energy,energy,1499,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['energy'],['energy']
Energy Efficiency,"l = psi4_geo. # cant specify 'dft_functional': ""WB97X-D"", not valid; psi4.set_options({'basis': 'def2-svp',; 'scf__reference': 'rhf',; # 'scf__dft_functional': ""WB97X-D"",; 'e_convergence': 1e-8}). # Integral generation from Psi4's MintsHelper; wfn = psi4.core.Wavefunction.build(mol, psi4.core.get_global_option('BASIS')); # t = time.time(); mints = psi4.core.MintsHelper(wfn.basisset()); S = np.asarray(mints.ao_overlap()). # Get nbf and ndocc for closed shell molecules; nbf = S.shape[0]; ndocc = wfn.nalpha(). print('\nNumber of occupied orbitals: %d' % ndocc); print('Number of basis functions: %d' % nbf). # Set SAD basis sets; nbeta = wfn.nbeta(); psi4.core.prepare_options_for_module(""SCF""); sad_basis_list = psi4.core.BasisSet.build(wfn.molecule(), ""ORBITAL"",; psi4.core.get_global_option(""BASIS""), puream=wfn.basisset().has_puream(),; return_atomlist=True). sad_fitting_list = psi4.core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SAD"",; psi4.core.get_option(""SCF"", ""DF_BASIS_SAD""), puream=wfn.basisset().has_puream(),; return_atomlist=True). # Use Psi4 SADGuess object to build the SAD Guess; SAD = psi4.core.SADGuess.build_SAD(wfn.basisset(), sad_basis_list) # , ndocc, nbeta; SAD.set_atomic_fit_bases(sad_fitting_list); SAD.compute_guess();; D = SAD.Da(); sad_guess_manual = D.to_array(); ```. however, when I compare this `sad_guess_manual` with the density matrix from the full SCF with `maxiter = 0`, they are not close :( ; ```python; # run full SCF but limit maxiter to 0; psi4.set_options(; {; ""scf__reference"": ""rhf"",; ""scf__maxiter"": 0,; ""scf__fail_on_maxiter"": False; }; ); energy_sad, wfn_sad = psi4.energy('scf/def2-svp', dft_functional=""WB97X-D"", molecule=psi4_geo, return_wfn=True); density_mat_0iters = wfn_sad.Da().to_array(). np.isclose(sad_guess_manual, density_mat_0iters, atol=1e-5).sum() / (density_mat_0iters.shape[0] ** 2); >> 0.08549818 # should be close to 1.00 but no :/ ; ```. i think this must mean that even setting `maxiter = 0` already evolves the initial guess",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397:1937,energy,energy,1937,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1467592397,1,['energy'],['energy']
Energy Efficiency,"l Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:7977,Energy,Energy,7977,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"l Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.83568850042064. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8642104942204210; Two-Electron Energy = 1.0285219937997820; Total Energy = -2.8356885004206389. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: JUN-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 46 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/jun-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:4906,Energy,Energy,4906,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"l bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:1529,charge,charge,1529,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['charge'],['charge']
Energy Efficiency,"l). That module can write psi4 header files, which are what's copied here. #### stages; - [x] c-side `physconst.h` updated here CODATA 2010 (Andy c.2012) --> CODATA 2014; - [x] py-side `psi4.driver.constants.physconst.py` updated here, through autogeneration from c-side; - [x] qcdb-side `psi4.driver.qcdb.physconst.py` updated here, through copying and prefixing from py-side; - [x] c-side `masses.h` updated here from undated NIST document (that includes through element 117, so it can't be too old). changing this alone has no effect on the tests.; - [ ] py-side `psi4.driver.qcdb.periodictable` NOT updated here. (so effectively masses are unchanged in this PR.) Later, py-side psi4 will import this new module to get its periodictable data.; - [x] Implications to the test suite:; - [x] lots of nuclear repulsion energies wanted changing. I took them at their word; - [x] wherever we tested SCF or SCF+ to 9+ decimals, comparisons failed. I've copied in the new values. energy figures tended to be good beyond 6 decimals. #### PT changes; * Main major change is to Krypton, where the generic (non-isotope) element had been assigned to the wrong isotope. Then there's lots of unstable elements that had the same thing wrong, so the below generic elements differ by 1–13 [u]. Only other element to differ by > 1.e-5 is Darmstadtium.; ```; Checking z2el vs. Psi4 ... Checking el2z vs. Psi4 ... Checking (1e-05) el2mass vs. Psi4 ...; Element Kr differs by 1.99911300: 83.9114977282 (this) vs 85.910610729 (psi); Element Tc differs by 0.99904235: 97.9072124 (this) vs 98.906254747 (psi); Element At differs by 1.00034837: 209.9871479 (this) vs 210.987496271 (psi); Element Fr differs by 1.00218427: 223.0197360 (this) vs 222.01755173 (psi); Element Ra differs by 2.00565999: 226.0254103 (this) vs 228.031070292 (psi); Element Pu differs by 2.00546269: 244.0642053 (this) vs 242.058742611 (psi); Element No differs by 4.00778887: 259.10103 (this) vs 255.093241131 (psi); Element Lr differs by 6.014326",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1213:1602,energy,energy,1602,https://psicode.org,https://github.com/psi4/psi4/pull/1213,1,['energy'],['energy']
Energy Efficiency,l-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ................... Passed 415.31 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 89.67 sec; Start 33: cc18; 38/411 Test #33: cc18 ............................. Passed 59.67 sec; Start 34: cc19; 39/411 Test #30: cc15 ............................. Passed 175.79 sec; Start 35: cc2; 40/411 Test #34: cc19 ............................. Passed 88.82 sec; Start 36: cc21; 41/411 Test #24: cc13 ............................. Passed 491.05 sec; Start 37: cc22; 42/411 Test #28: cc13d ............................ Passed 425.47 sec; Start 38: cc23; 43/411 Test #37: cc22 ............................. Passed 49.53 sec; Start 39: cc24; 44/411 Test #31: cc16 ............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:3256,energy,energy,3256,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,"l. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds the molecule used, orbitals; # Fock matrices, and more; print('Attention! This SCF is density-fitted.'); ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:2126,energy,energy,2126,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['energy'],['energy']
Energy Efficiency,"ld be a conventional mp2 calculation afaik; ```; //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // DFMP2 //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: (HEAVY-AUG-CC-PV(D+D)Z AUX); Role: RIFIT; Keyword: DF_BASIS_MP2; atoms 1-2 entry O line 208 file /opt/psi/4/master/share/psi4/basis/heavy-aug-cc-pvdz-ri.gbs. --------------------------------------------------------; DF-MP2; 2nd-Order Density-Fitted Moller-Plesset Theory; ROHF-MBPT(2) Wavefunction, 4 Threads. Rob Parrish, Justin Turney, Andy Simmonett,; Ed Hohenstein, and C. David Sherrill; --------------------------------------------------------. --------------------------------------------------------; NBF = 46, NAUX = 144; --------------------------------------------------------; CLASS FOCC OCC AOCC AVIR VIR FVIR; ALPHA 2 9 7 37 37 0; BETA 2 7 5 39 39 0; --------------------------------------------------------. -----------------------------------------------------------; ==================> DF-MP2 Energies <====================; -----------------------------------------------------------; Reference Energy = -149.6217688382015183 [Eh]; Singles Energy = -0.0130981432734322 [Eh]; Same-Spin Energy = -0.1180463523157988 [Eh]; Opposite-Spin Energy = -0.2655370704826780 [Eh]; Correlation Energy = -0.3966815660719090 [Eh]; Total Energy = -150.0184504042734375 [Eh]; -----------------------------------------------------------; ================> DF-SCS-MP2 Energies <==================; -----------------------------------------------------------; SCS Same-Spin Scale = 0.3333333333333333 [-]; SCS Opposite-Spin Scale = 1.2000000000000000 [-]; SCS Same-Spin Energy = -0.0393487841052663 [Eh]; SCS Opposite-Spin Energy = -0.3186444845792136 [Eh]; SCS Correlation Energy = -0.3710914119579120 [Eh]; SCS Total Energy = -149.9928602501594241 [Eh]; -----------------------------------------------------------; ```. I haven't run any other CBS hessians to see if the issue appears where psi4 might have analytic gradient",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:7271,Energy,Energy,7271,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Energy'],['Energy']
Energy Efficiency,"ld do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1118,ENERGY,ENERGY,1118,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"le = False; pickle_kwargs = {'encoding': 'ASCII', 'fix_imports': True}. def read_array(fp, allow_pickle=False, pickle_kwargs=None):; """"""; Read an array from an NPY file. Parameters; ----------; fp : file_like object; If this is not a real file object, then this may take extra memory; and time.; allow_pickle : bool, optional; Whether to allow writing pickled data. Default: False. .. versionchanged:: 1.16.3; Made default False in response to CVE-2019-6446. pickle_kwargs : dict; Additional keyword arguments to pass to pickle.load. These are only; useful when loading object arrays saved on Python 2 when using; Python 3. Returns; -------; array : ndarray; The array from the data on disk. Raises; ------; ValueError; If the data is invalid, or allow_pickle=False and the file contains; an object array. """"""; version = read_magic(fp); _check_version(version); shape, fortran_order, dtype = _read_array_header(fp, version); if len(shape) == 0:; count = 1; else:; count = numpy.multiply.reduce(shape, dtype=numpy.int64). # Now read the actual data.; if dtype.hasobject:; # The array contained Python objects. We need to unpickle the data.; if not allow_pickle:; > raise ValueError(""Object arrays cannot be loaded when ""; ""allow_pickle=False""); E ValueError: Object arrays cannot be loaded when allow_pickle=False. miniconda3/envs/psi/lib/python3.6/site-packages/numpy/lib/format.py:692: ValueError; _____________________________________________________ test_psi4_cc _____________________________________________________. @pytest.mark.smoke; def test_psi4_cc():; """"""cc1""""""; #! RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psi4.core.clean(); h2o = psi4.geometry(""""""; O; H 1 0.97; H 1 0.97 2 103.0; """"""). psi4.set_options({""basis"": '6-31G**'}). > psi4.optimize('ccsd'). miniconda3/envs/psi/lib/python3.6/site-packages/psi4/tests/test_psi4.py:39:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; miniconda3/envs/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1611:2935,reduce,reduce,2935,https://psicode.org,https://github.com/psi4/psi4/issues/1611,1,['reduce'],['reduce']
Energy Efficiency,"le. I am particularly interested by the determinant decomposition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.84",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1878,energy,energy,1878,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['energy'],['energy']
Energy Efficiency,"le; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', col",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3154,ENERGY,ENERGY,3154,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['ENERGY'],['ENERGY']
Energy Efficiency,lear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 75; Spherical Points = 302; Total Points = 65565; Total Blocks = 69; Max Points = 4576; Max Functions = 19. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 19 19 0 0 0 0; -------------------------------------------------------; Total 19 19 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 8; Integrals threads: 8; Memory (MB): 183; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: ; Number of shells: 42; Number of basis function: 131; Number of Cartesian functions: 131; Spherical Harmonics?: false; Max angular momentum: 3. => External Potential Field: <= . > Charges [a.u.] < . Z x y z; -1.30623 -0.64897 0.00000 1.10730; 0.35181 -0.75342 -0.00000 1.26252; 0.86636 -0.77880 0.13229 1.13268; -1.30623 -0.90864 -0.00000 1.15806; 0.10177 -0.80418 0.00000 1.00285; 0.86636 -0.77880 -0.13229 1.13268; 0.51285 -0.79652 0.76410 1.73167; -1.74409 -0.67784 0.64529 1.64918; 0.85696 -0.68947 0.82229 1.58969; 0.51285 -0.53684 0.76410 1.68091; -0.59896 -0.65552 0.88291 1.76340; 0.67348 -0.64389 0.70591 1.82290; 0.51285 -0.79652 -0.76410 1.73167; -0.59896 -0.65552 -0.88291 1.76340; 0.85696 -0.68947 -0.82229 1.58969; 0.51285 -0.53684 -0.76410 1.68091; -1.74409 -0.67784 -0.64529 1.64918; 0.67348 -0.64389 -0.70591 1.82289. Old nuclear repulsion = 9.147558094236395; Additional nuclear repulsion = -0.220306557236836; Total nuclear repulsion = 8.927251536999558. Minimum eigenvalue in the overlap matrix is 2.2467595935E-02.; Using Symmetric Orthogonalization.; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:5945,Charge,Charges,5945,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['Charge'],['Charges']
Energy Efficiency,"least when there is no post HF; module that wants the conventional ints)? Probably should until / unless; we get efficient conventional SCF, and arguably even then. David. On Sunday, March 6, 2016, Ugur Bozkaya notifications@github.com wrote:. > Hi Lori,; > ; > Let us start with your first question for the HF molecule. I run your job,; > and it terminates ""normally"". Since it is a gradient job I do not simply; > grab integrals from SCF, but I compute both JKFIT and RI basis DF; > integrals. Hence, it does not matter to start with the conventional; > integrals the df-mp2 code proceeds. However, the gradient is not correct; > because the MO coefficients are from conventional SCF, but it should be; > from DF-SCF. I think in the case df-mp2 gradients, if user set the; > conventional SCF, then we should throw an error. Alternatively we may; > change the reference to DF-SCF and throw a warning for user to explain what; > we did. Both solutions are okay for me.; > ; > DFOCC uses frozen cores properly in energy and gradients. I did not add; > the froze virtuals yet. But I will add them soon for FNO-DF-CCSD gradients.; > However, OCC does not use frozen cores in the energy and gradients. In case; > of OCC the problem is that you need to define different MO class with; > libtrans, which is not obvious how to do it. I know it is possible now.; > Andy explained it for me. As a result, there is no plan for OCC module.; > However, frozen virtuals will be added to DFOCC. In fact, I am waiting for; > RC1 release, then I will implement add it to Psi4.; > ; > For the final question, your reference gradient is wrong (mp2tot_vals).; > This is a very good example how 3-point numeric gradients are unreliable; > for challenging systems. I reproduce problem with your input. However, if I; > use ""points 5"", all numeric gradient computations give the same result with; > the analytic gradients. I also run the same job with gausssian 09 with; > analytic gradients, which gives the same result wi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192920861:1698,energy,energy,1698,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192920861,1,['energy'],['energy']
Energy Efficiency,"led); 	263 - omp2-3 (Failed); 	274 - omp3-3 (Failed); ```. The error message for `pywrap-checkrun-rhf` is also consistent with convergence issues:; ```; 45 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.01e-15; 46 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.73e-15; 47 -75.0144633211 -1.42e-14 1.85e-05 1.42e-04 9.95e-16; 48 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 5.65e-16; 49 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 3.27e-16; 50 -75.0144633211 0.00e+00 1.85e-05 1.42e-04 1.88e-16; ======================== OCEPA IS NOT CONVERGED IN 50 ITERATIONS ============; Traceback (most recent call last):; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 54, in <module>; File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/driver.py"", line 711, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 752, in select_olccd_gradient; return func(name, **kwargs); File ""/Users/fevange/Source/psi4/objdir-Debug/stage/lib/psi4/driver/procrouting/proc.py"", line 2147, in run_occ_gradient; occ_wfn = core.occ(ref_wfn); RuntimeError:; Fatal Error: OCC iterations did not converge; Error occurred in file: /Users/fevange/Source/psi4/psi4/src/psi4/occ/occ_iterations.cc on line: 363; The most recent 5 function calls were:; Printing out the relevant lines from the Psithon --> Python processed input file:; for method in Earray:; water.reset_point_group(sym); water.fix_orientation(True); water.update_geometry(); banner('Testing %s' % (method)); --> G, wfn = gradient(method, return_wfn=True); ans = wfn.energy(); print('%16s\t%s\t%s\t%s' % (method, water.schoenflies_symbol(), variable('CURRENT ENERGY') - ans, ans)); clean(); print(' Checking gradient methods (excited state) ...'); Earray = [; Psi4 stopped on: Friday, 31 January 2020 05:10PM; Psi4 wall time for execution: 0:00:06.47; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793:2203,energy,energy,2203,https://psicode.org,https://github.com/psi4/psi4/issues/1793,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"les and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```. PSIO error (from stderr). ```; PSIO_ERROR: unit = 260, errval = 18; PSIO_ERROR: 18 (Incorrect block end address); Traceback (most recent call last):; File ""<string>"", line 77, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2289, in run_fnodfcc; psi4.fnocc(); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 1p; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:3432,energy,energy,3432,https://psicode.org,https://github.com/psi4/psi4/issues/34,2,['energy'],['energy']
Energy Efficiency,"lete 2nd definition as done in this PR?; - [x] minor ?: why is `bp86d1` building upon b3lyp as [here](https://github.com/psi4/psi4/pull/339/commits/cfcbf085305c8033186fb3c68c1b96f19688a939#diff-9e8e3243e87430585c59e5a407f6bf69R2114)? Ok to make it build upon bp86 as done in this PR?; ## Status; - [x] Ready to go. B3LYP3/5 test input. You'll need [this](https://raw.githubusercontent.com/drhaney/psi4/master/share/basis/6-31g_2df_p_.gbs) basis set. ```; # all non-psi4 references from http://forum.psicode.org/t/b3lyp-defect-compatibility-with-gamess-and-gaussian/193. # @jamont conditions. molecule {; 0 1; O; H 1 rOH; H 1 rOH 2 aHOH. rOH = 0.9622; aHOH = 103.84; }. set basis 6-311g(d); set scf_type pk; set e_convergence 9. e = energy('b3lyp'); compare_values(-76.4338100903, e, 7, 'b3lyp3 vs Gaussian'); compare_values(-76.4338100577, e, 7, 'b3lyp3 vs Gamess'). clean(). # @drhaney conditions. set basis 6-31G(2df,p); #set dft_spherical_points 590; #set dft_radial_points 99. e = energy('b3lyp'); compare_values(-76.4293315991, e, 5, 'b3lyp3 vs Gamess'); # GAMESS-VWNrpa_1 -76.4293 3159 91; # Psi4-VWNrpa_3 -76.4293 5426 98; # Gaussian-09 -76.4256 2566 74; # LAB psi4 -76.4293 4111 93 # large grid VWN3RPA_C VWN5RPA_C. e = energy('b3lyp5'); compare_values(-76.39221287, e, 5, 'b3lyp5 vs NWChem'); # GAMESS-VWN_5 -76.3922 0295 70; # Nchem-VWN_3 -76.3922 1287 ; # Psi4-VWN_3 -76.3922 2551 29; # LAB psi4 -76.3922 1237 09 # large grid VWN3_C VWN5_C. clean(). # @hokru conditions. molecule {; O -1.769142 -0.076181 0.000000; H -2.065745 0.837492 0.000000; H -0.809034 0.001317 0.000000; }. ### e = energy('b3lyp'); ### compare_values(-76.46290368244, e, 5, 'b3lyp3 vs Turbomole'); ### #For VWN3 (same as Gaussian) I get; ### #-76.46290368244 (Turbomole ""B3LYP_Gaussian""); ### #-76.46290355576 (psi4 energy('b3lyp')); ### #-76.46290344335 (nwchem default vnw-1-rpa); ### #VNW-1-rpa in nwchem seems to be VWN3 in Turbomole/Gaussian; ### ; ### e = energy('b3lyp5'); ### compare_values(-76.42582290565, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/339:2361,energy,energy,2361,https://psicode.org,https://github.com/psi4/psi4/pull/339,1,['energy'],['energy']
Energy Efficiency,letonsointegrals; 364/412 Test #8: castup1 .......................... Passed 23.16 sec; Start 355: tu2-ch2-energy; 365/412 Test #391: python-mints9 .................... Passed 24.17 sec; Start 381: psi4numpy-cphf; 366/412 Test #189: fci-tdm .......................... Passed 23.11 sec; Start 401: json-schema-1-ghost; 367/412 Test #211: mcscf2 ........................... Passed 23.47 sec; Start 384: psi4numpy-rhf-gradient; 368/412 Test #350: sapt-sf1 ......................... Passed 22.50 sec; Start 397: python-memdfjk; 369/412 Test #396: python-mints13 ................... Passed 23.34 sec; Start 215: mints3; 370/412 Test #404: json-schema-1-gradient ........... Passed 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35311,energy,energy,35311,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,"level set to 256.000 MB; > ; > ## ==> Input File <==; > ; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > thisenergy = energy('fci'); > ; > Memory set to 5.000 GiB by Python script.; > ; > **\* tstart() called on shukla-pc.localdomain; > **\* at Thu Oct 9 10:39:34 2014; > ; > ```; > ---------------------------------------------------------; > SCF; > by Justin Turney, Rob Parrish, and Andy Simmonett; > RHF Reference; > 1 Threads, 5000 MiB Core; > ---------------------------------------------------------; > ```; > ; > ==> Geometry <==; > ; > Molecular point group: c1; > Full point group: D2h; > ; > Geometry (in Angstrom), charge = 0, multiplicity = 1:; > ; > Center X Y Z; > ; > ---; > ; > ```; > C -2.013000000000 0.000000000000 0.000000000000; > C -2.711000000000 1.209000000000 0.000000000000; > C -4.107000000000 1.209000000000 0.000000000000; > C -4.805000000000 0.000000000000 0.000000000000; > C -4.107000000000 -1.209000000000 0.000000000000; > C -2.711000000000 -1.209000000000 0.000000000000; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:4054,energy,energy,4054,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['energy'],['energy']
Energy Efficiency,"libpsiutil and libparallel2 may be compiled as dynamic libraries. Attached patch solves the issue. diff -up psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt.staticlib psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt; --- psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt.staticlib 2015-08-05 10:37:14.000000000 -0700; +++ psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libparallel2/CMakeLists.txt 2015-09-08 13:11:35.454250886 -0700; @@ -14,7 +14,7 @@ add_subdirectory(CommEnvGuts); add_subdirectory(Schedulers); add_subdirectory(TaskJobGuts); add_subdirectory(Util); -add_library(parallel2 ${LPSRC} ${CEGSRC} ${SSRC} ${TJGSRC} ${UTILSRC}); +add_library(parallel2 STATIC ${LPSRC} ${CEGSRC} ${SSRC} ${TJGSRC} ${UTILSRC}); set_property(GLOBAL APPEND PROPERTY LIBLIST parallel2); if(BUILD_CUSTOM_BOOST); add_dependencies(parallel2 custom_boost); diff -up psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt.staticlib psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt; --- psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt.staticlib 2015-08-05 10:37:14.000000000 -0700; +++ psi4public-1881450f30d3bd2ac91dbc4fc6a4eaa5c9f03ae5/src/lib/libPsiUtil/CMakeLists.txt 2015-09-08 13:11:06.531702529 -0700; @@ -16,7 +16,7 @@ set(SRC ProgressBar.h; Implementations/ProgressBar.cc; Implementations/Exception2.cc; ); -add_library(PsiUtil ${SRC}); +add_library(PsiUtil STATIC ${SRC}); add_dependencies(PsiUtil parallel2); include_directories(libparallel2); set_property(GLOBAL APPEND PROPERTY LIBLIST PsiUtil)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/178:629,Schedul,Schedulers,629,https://psicode.org,https://github.com/psi4/psi4/issues/178,1,['Schedul'],['Schedulers']
Energy Efficiency,"ling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-d",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1380,ENERGY,ENERGY,1380,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"lip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(LI) 0.000000000000 0.000000000000 -1.000000000000 7.016003436600; H 0.000000000000 0.000000000000 1.000000000000 1.007825032230. Running in c1 symmetry. Rotational constants: A = ************ B = 2.10095 C = 2.10095 [cm^-1]; Rotational constants: A = ************ B = 62984.77227 C = 62984.77227 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is MEM_DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVDZ; Blend: AUG-CC-PVDZ; Number of shells: 14; Number of basis function: 32; Number of Cartesian functions: 34; Spherical Harmonics?: true; Max angular momentum: 2. => Loading Basis Set <=. Name: (AUG-CC-PVDZ AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1 entry LI line 59 file /home/filip/software/psi4-1.4rc/share/psi4/basis/def2-qzvpp-jkfit.gbs ; atoms 2 entry H line 70 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz-jkfit.gbs . Computing basis projection from 3-21G to AUG-CC-PVDZ. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 32 32 0 0 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:6674,Charge,Charge,6674,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Charge'],['Charge']
Energy Efficiency,"lowing total energies, where _opt refers to the neutral GS RHF molecule and +_homo-i refers to the UHF cation, on the GS RHF geometry, with the hole in the homo-ith MO. [psi4_11.tar.gz](https://github.com/psi4/psi4/files/3469634/psi4_11.tar.gz). (PSI4 1.1); water_opt -7.606667516613838e+01; water+_homo -7.566072290801020e+01; water+_homo-1 -7.558091679634278e+01; water+_homo-2 -7.541230326047109e+01; water+_homo-3 -7.423771580655676e+01; water+_homo-4 -5.571830715553878e+01. Noticeably, pulling an electron from the homo-3 and homo-4 require some crafty work, but **I have managed to converge this calculations with several basis sets and in DFT, too, using damping and other tricks, all in PSI4 1.1. Energies are qualitatively the same alway**s. All the output files are attached, in psython mode (I could not make MOM to work from python). Now then, I wanted to check some things, so I printed the density matrices from .fchk files and plugged them to PySCF, projecting them properly and so on, just to evaluate the energy with UHF on top of those density matrices. I get the same energies for the neutral molecule and the homo, homo-1 and homo-2 cations. I get VERY different energies from the homo-3 and homo-4 states. Now thats weird, because the energies above make sense. So I assumed, okay, maybe there's something odd with the .fchk writer module. I've seen its been updated, so lets try a newer version of PSI4. So I got the 1.4a2.dev78 and tried to run my calculations using the newest available dev release, from scratch. I get exactly the same energies, except for the homo-4 state, for which I get some very funky results:. [psi4_14.tar.gz](https://github.com/psi4/psi4/files/3469641/psi4_14.tar.gz). (Psi4 1.4a2...); water_opt -7.606667516615393e+01; water+_homo -7.566072290809453e+01; water+_homo-1 -7.558091679647397e+01; water+_homo-2 -7.541230326053801e+01; water+_homo-3 -7.423771580754870e+01; water+_homo-4 **9.360901611130924e+00**. And that's the story! I would try to r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1692:1350,energy,energy,1350,https://psicode.org,https://github.com/psi4/psi4/issues/1692,1,['energy'],['energy']
Energy Efficiency,lper; 368/412 Test #391: python-mints9 .................... Passed 1.96 sec; Start 384: psi4numpy-rhf-gradient; 369/412 Test #362: x2c2 ............................. Passed 3.13 sec; Start 354: tu1-h2o-energy; 370/412 Test #331: scf-bs ........................... Passed 2.33 sec; Start 103: decontract; 371/412 Test #355: tu2-ch2-energy ................... Passed 1.51 sec; Start 288: psimrcc-ccsd_t-1; 372/412 Test #353: stability2 ....................... Passed 2.45 sec; Start 381: psi4numpy-cphf; 373/412 Test #224: molden1 .......................... Passed 14.30 sec; Start 405: json-schema-1-properties; 374/412 Test #222: mints9 ........................... Passed 1.97 sec; Start 401: json-schema-1-ghost; 375/412 Test #211: mcscf2 ........................... Passed 2.51 sec; Start 397: python-memdfjk; 376/412 Test #411: skeletonsointegrals .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:35573,energy,energy,35573,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['energy'],['energy']
Energy Efficiency,lr3 ..................... Passed 428.34 sec; Start 29: cc13d; 11/412 Test #307: pywrap-checkrun-uhf .............. Passed 1529.35 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #305: pywrap-checkrun-rhf .............. Passed 1560.06 sec; Start 360: tu6-cp-ne2; 13/412 Test #146: dfomp2-grad3 ..................... Passed 1580.99 sec; Start 183: isapt1; 14/412 Test #46: cc3 .............................. Passed 1614.45 sec; Start 387: cookbook-rohf-orb-rot; 15/412 Test #301: pywrap-all ....................... Passed 1620.63 sec; Start 45: cc29; 16/412 Test #104: dcft-grad1 ....................... Passed 1653.03 sec; Start 380: cc-module; 17/412 Test #228: mp2-def2 ......................... Passed 409.78 sec; Start 71: cc52; 18/412 Test #25: cc13 ............................. Passed 772.82 sec; Start 32: cc16; 19/412 Test #112: dcft5 ............................ Passed 535.41 sec; Start 282: opt-irc-2; 20/412 Test #30: cc14 ............................. Passed 624.07 sec; Start 11: cbs-delta-energy; 21/412 Test #42: cc26 ............................. Passed 1000.31 sec; Start 113: dcft6; 22/412 Test #71: cc52 ............................. Passed 310.04 sec; Start 18: cbs-xtpl-func; 23/412 Test #183: isapt1 ........................... Passed 405.79 sec; Start 182: fsapt-allterms; 24/412 Test #45: cc29 ............................. Passed 367.98 sec; Start 194: fd-freq-energy-large; 25/412 Test #115: dcft8 ............................ Passed 1028.74 sec; Start 196: fd-freq-gradient-large; 26/412 Test #29: cc13d ............................ Passed 605.10 sec; Start 279: opt13; 27/412 Test #360: tu6-cp-ne2 ....................... Passed 631.78 sec; Start 374: dft-custom-mgga; 28/412 Test #36: cc2 .............................. Passed 1118.56 sec; Start 321: sapt6; 29/412 Test #380: cc-module ........................ Passed 544.21 sec; Start 48: cc31; 30/412 Test #113: dcft6 ............................ Passed 264.36 sec; Start 98: cisd-opt-fd; 31/412 Test #282: opt-irc-2 .......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:2309,energy,energy,2309,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"ls = psi4.core.Vector(""evals"", rdim); evecs = psi4.core.Matrix(""evecs"", rdim, rdim). S.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Descending); shalf_inv = psi4.core.Matrix(""s^(-1/2)"", rdim, rdim); for h in range(nirrep):; for i in range(rdim[h]):; shalf_inv.set(h, i, i, evals.get(h, i) ** -0.5). X = psi4.core.Matrix.doublet(evecs, shalf_inv, False, False); return X. """"""; This function semicanonicalize the orbitals; Fso: SO Fock matrix at geometry 2; C: molecular orbitals that transforms Fso to Fmo; return: unitary matrix that transforms orbitals to semicanonical orbitals; """"""; def semicanonicalize(Fso, C):; # transform SO Fock to MO Fock; Fmo = psi4.core.Matrix.triplet(C, Fso, C, True, False, False). offsets = psi4.core.Dimension.from_list([0 * i for i in range(nirrep)]). U = psi4.core.Matrix(""U to semi"", nmopi, nmopi). # diagonalize each blcok of Fmo; for block in [nrdoccpi,nactvpi,nruoccpi]:; F = psi4.core.Matrix(""Fock"",block,block); for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; F.set(h, i, j, Fmo.get(h, i + offset, j + offset)); ; evals = psi4.core.Vector(""F Evals"", block); evecs = psi4.core.Matrix(""F Evecs"", block, block); F.diagonalize(evecs, evals, psi4.core.DiagonalizeOrder.Ascending); ; for h in range(nirrep):; offset = offsets[h]; for i in range(block[h]):; for j in range(block[h]):; U.set(h, i + offset, j + offset, evecs.get(h, i, j)); offsets[h] += block[h] ### important ###. return U. ```. To use it, you can put the following to the input:; ```; h2o.R = old; Ecas, wfn = energy('casscf', return_wfn=True). h2o.R = new; Escf, wfnSCF = energy('scf', return_wfn=True). # import the script <== Change HERE; sys.path.insert(0, '......'); from ...... import ortho_orbs. wfnSCF.Ca().copy(ortho_orbs(wfn,wfnSCF)); Ecas, wfn = energy('casscf', ref_wfn=wfnSCF, return_wfn=True); ```. I do not worry about efficiency usually, but you can probably make it faster using slicing when filling in the data to matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:6049,energy,energy,6049,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,3,['energy'],['energy']
Energy Efficiency,"lse,; ""guess"": ""sap"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":302,; ""dft_radial_points"" :75,; ""diis_max_vecs"" : 6,; #""DFT_NUCLEAR_SCHEME"":""becke"",; ""E_CONVERGENCE"":1e-7,; }; ); energy_psi4, wfn = psi4.energy(name=""scf"",dft_functional=""svwn"", molecule=psi4_geo, return_wfn=True); basis = wfn.basisset(). # Generate grid points; functional = psi4.driver.dft.build_superfunctional(""svwn"", True)[0] # True states that we're working with a restricted system; Vpot = psi4.core.VBase.build(basis, functional, ""RV"") # This object contains different methods associated with DFT methods and the grid.; # ""RV"" states that this is a restricted system consistent with 'functional'; Vpot.initialize() # We initialize the object. # The grid (and weights) can then be extracted from Vpot.; x, y, z, weights_psi4 = Vpot.get_np_xyzw(); Vpot = 0; #print(x.shape); #print(y.shape); #print(z.shape); #print(weights_psi4.shape); # Combine the arrays into a single 2D array; points = np.column_stack((x, y, z)); print(points.shape). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, # just removing the last line that was only for psi4; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ). mf = dft.rks.RKS(mol, xc=""LDA,VWNRPA"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; # mf.grids.level = 5; mf.verbose = 4; mf.grids.prune = None; mf.grids.atom_grid = (75, 302); mf.grids.becke_scheme = dft.gen_grid.stratmann; mf.small_rho_cutoff = 1e-15; mf.grids.build(); mf.grids.coords = points; print(mf.grids.coords.shape); mf.grids.weights = weights_psi4; print(mf.grids.weights.shape); mf.conv_tol = 1e-7; energy_pyscf = mf.kernel(); print(mf.grids.coords.shape); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); print(abs(energy_psi4-energy_pyscf)). ```. Not entirely sure if pyscf indeed was using psi4 grids here though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:5360,energy,energy,5360,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,2,['energy'],['energy']
Energy Efficiency,"lt_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = core.Matrix.from_array(jobrec.extras['qcvars']['DISPERSION CORRECTION GRADIENT']); if wfn is not None:; @@ -296,7 +296,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); gcp_part = core.Matrix.from_array(jobrec.return_result); dashd_part.add(gcp_part); ; ```. your script needed a couple tweaks, so here's a working version:; ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:3412,charge,charge,3412,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['charge'],['charge']
Energy Efficiency,"ltiout_16 |	 atoms 1 entry O line 107 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/; atoms 2 entry H line 12 file /scratch/psilocaluser/conda-builds/psi4-multiout_16 |	 atoms 2 entry H line 12 file /psi/gits/hrw-testgcc/objdir36-75/stage/share/psi4/. ---------------------------------------------------------					 ---------------------------------------------------------; SCF									 SCF; by Justin Turney, Rob Parrish, Andy Simmonett						 by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith							 and Daniel G. A. Smith; UHF Reference								 UHF Reference; 1 Threads, 500 MiB Core							 1 Threads, 500 MiB Core; ---------------------------------------------------------					 ---------------------------------------------------------. ==> Geometry <==											 ==> Geometry <==. Molecular point group: c2v										 Molecular point group: c2v; Full point group: C_inf_v										 Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:						 Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass 		 Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------		 ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570		 O 0.000000000000 0.000000000000 -0.057517917037 15.994914619570; H 0.000000000000 0.000000000000 0.912851082963 1.007825032230		 H 0.000000000000 0.000000000000 0.912851082963 1.007825032230. Running in c2v symmetry.										 Running in c2v symmetry. Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]			 Rotational constants: A = ************ B = 18.88315 C = 18.88315 [cm^-1]; Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]			 Rotational constants: A = ************ B = 566102.67788 C = 566102.67788 [MHz]; Nuclear repulsion = 4.362688508557055								 Nuclear repulsion = 4.362688508557055. Charge = 0			",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284:9018,charge,charge,9018,https://psicode.org,https://github.com/psi4/psi4/pull/2264#issuecomment-890681284,2,['charge'],['charge']
Energy Efficiency,"luser/conda-builds/psi4-multiout_1557940846948/work/psi4/src/psi4/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PSIO::rw(unsigned long, char*, psi::psio_address, unsigned long, int); psi::PSIO::write_entry(unsigned long, char const*, char*, unsigned long); ```. and here is the script:. ```; import os; import numpy as np; psi4.set_memory(int(2e9)). # Conical intersection in Formaldimine; pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; psi4.core.set_output_file(""formaldimine.txt"", False); # sto-3g : 13 orbitals, cc-pVDZ: 43, cc-pVTZ: 102. Nelec: 16. def get_energies_formaldimine(alpha,phi):; #name = ""formaldimine_alpha"" + str(alpha) + "".txt""; #psi4.core.set_output_file(name, False); psi4.core.clean(); variables = pes_origin[:] + [alpha, phi]; psi4.geometry(; """"""0 1; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables)); psi4.set_options({'basis': 'cc-pVDZ',; 'reference': 'rhf',; 'scf_type': 'pk', # set e_convergence and d_convergence to 1e-8 instead of 1e-6; 'num_roots': 2,; #'frozen_docc':[2],; 'active':[16]}); E0_casci = psi4.energy('fci'); E1_casci = psi4.variable('CI ROOT 1 TOTAL ENERGY'); return E0_casci, E1_casci. output = open(""formaldimine_CASCI-16e-16o.dat"", ""w""). phi = 90; start_angle = 90; end_angle = 160; number_of_steps = abs(end_angle - start_angle) + 1; print(""{:10s} {:10s} {:10s}"".format(""alpha"",""E0"",""E1""), file = output); for alpha in np.linspace(start_angle,end_angle,number_of_steps):; en0_casci,en1_casci = get_energies_formaldimine(alpha,phi); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci)); print(""{:10.6f} {:10.6f} {:10.6f}"".format(alpha,en0_casci,en1_casci), file = output); ```. does anyone understand the error ? Again, replacing active = 16 by active = 14 works just fine, so I first assumed that it was a memory issue but the error does not mention anything about memory. Note that I ask for 16gb memory on the cluster for this calculation.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959:2109,energy,energy,2109,https://psicode.org,https://github.com/psi4/psi4/issues/1959,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"m the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent, but its effects on COM, inertial frame, symmetry, etc. would need to be probed. Or maybe our moments of inertia are even now wrong in the presence of ghosts. Summary: I would love a rationalization pass through the Mol accessor fns.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:1246,charge,charge,1246,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['charge'],['charge']
Energy Efficiency,"m trying to use the orbitals from one SCF as the guess for computations on similar structures. I'm trying to follow this procedure: [https://psicode.org/psi4manual/master/scf.html#restarting-the-scf](https://psicode.org/psi4manual/master/scf.html#restarting-the-scf). I'm using Psi4 1.5 e9f4d6d on windows subsystem linux. The input file for the initial energy is:; ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True); wfn.to_file(""test_restart""); ```. This creates a ""test_restart.npy"" file. I then try to compute the energy for the same molecule using this test_restart.npy file and a different input file:. ```py; set_num_threads(8); basis {; assign def2-SVP; }. molecule {; 0 1; C 1.13408 -0.39513 0.82671; C 0.24384 -0.10727 1.77918; C 1.25947 0.48184 -0.37564; C -1.70320 -0.60897 -0.07371; C -1.08313 0.35853 -0.75350; O 0.15798 0.21455 -1.28105; H 1.61155 -1.37871 0.79725; H -0.00411 -0.81057 2.57479; H -0.26633 0.85763 1.80344; H 2.16195 0.28247 -0.96305; H 1.24281 1.54792 -0.09693; H -1.24645 -1.58985 0.04960; H -2.69979 -0.44218 0.33707; H -1.53347 1.35513 -0.87676; }. nrg, wfn = energy('M06-2X', return_wfn=True, restart_file=""test_restart""); ```. However, I get the following error :. ```; Traceback (most recent call last):; File ""/home/tony/psi4conda/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/home/tony/psi4conda/lib//python3.8/site-packages/psi4/driver/driver.py"", line 599, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kw",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571:989,energy,energy,989,https://psicode.org,https://github.com/psi4/psi4/issues/2571,1,['energy'],['energy']
Energy Efficiency,m-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3 ........................... Passed 27.97 sec; Start 258: omp2p5-grad2; 92/413 Test #153: dfomp2p5-2 ....................... Passed 28.23 sec; Start 56: cc39; 93/413 Test #109: dcft1 ............................ Passed 30.12 sec; Start 206: frac-ip-fitting; 94/413 Test #7,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:8022,energy,energy-large,8022,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy-large']
Energy Efficiency,ma-1-ghost; 371/412 Test #350: sapt-sf1 ......................... Passed 1.19 sec; Start 399: json-v11-gradient; 372/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.78 sec; Start 405: json-schema-1-properties; 373/412 Test #221: mints-helper ..................... Passed 1.34 sec; Start 412: skeletonwavefunction; 374/412 Test #381: psi4numpy-cphf ................... Passed 1.38 sec; Start 397: python-memdfjk; 375/412 Test #354: tu1-h2o-energy ................... Passed 1.35 sec; Start 294: psimrcc-pt2; 376/412 Test #409: skeletonmointegrals .............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Test #310: pywrap-molecule .................. Passed 1.44 sec; Start 355: tu2-ch2-energy; 381/412 Test #411: skeletonsointegrals .............. Passed 1.57 sec; Start 212: mcscf3; 382/412 Test #401: json-schema-1-ghost .............. Passed 1.49 sec; Start 383: psi4numpy-rhf; 383/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.69 sec; Start 189: fci-tdm; 384/412 Test #353: stability2 ....................... Passed 1.68 sec; Start 210: mcscf1; 385/412 Test #399: json-v11-gradient ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:35835,energy,energy,35835,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['energy'],['energy']
Energy Efficiency,"mal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [Eh]; Total G, Gibbs energy at 298.15 [K] -76.02161759 [Eh]; *** Absolute Gibbs energy, not a free energy of formation ***; ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Vibrational analysis printing is overhauled for clarity. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] These changes should fend off some problems seen by users. Feel free to suggest edits based on problems that have come your way. ## Checklist; - [x] ~Tests added for any new features~ It's only printing; - [x] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:2119,energy,energy,2119,https://psicode.org,https://github.com/psi4/psi4/pull/2969,3,['energy'],['energy']
Energy Efficiency,"mar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. in press (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 09:00PM. Process ID: 25797; PSIDATADIR: /usr/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; -1 1; Sc -1.7965316343 1.5540711104 0.6577410753; Li -3.8411511549 1.3293390591 3.1887862983; Li 0.7306020220 3.4504713202 1.4667051175; Li -0.7149951920 -1.4193774032 -0.1334886497; Li -3.3605940408 2.8558659134 -1.8910238414; }. set basis aug-pcseg-0; set reference rhf; set ci_maxiter 100; set scf_type pk; set nat_orbs true. scf_e, scf_wfn = energy('scf', return_wfn = True); ci_e, ci_wfn = energy('cisd', ref_wfn = scf_wfn, return_wfn = True); --------------------------------------------------------------------------. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:37 2017. => Loading Basis Set <=. Name: AUG-PCSEG-0; Role: ORBITAL; Keyword: BASIS; atoms 1 entry SC line 478 file /usr/share/psi4/basis/aug-pcseg-0.gbs ; atoms 2-5 entry LI line 30 file /usr/share/psi4/basis/aug-pcseg-0.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; SC 0.000001136523 -0.000001388204 -0.000001405076 44.955911909000; LI -2.044618384077 -0.224733439504 2.531043817924 7.016004548000; LI 2.527134792823 1.8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:1476,energy,energy,1476,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,2,['energy'],['energy']
Energy Efficiency,"may have found a memory allocation/usage bug. What kind of; computation is this?. Unfortunately we don't really have a way to estimate scratch usage at; present. It's a feature we'd like to add, but it needs to be added for; every module separately, so is a somewhat daunting task. In principle, can; be known ahead of time based on number of basis functions, number of atoms,; etc., but is different for every method (and sometimes depends on the; particular algorithm used within that method). On Mon, Aug 24, 2020 at 5:55 PM David Slochower <notifications@github.com>; wrote:. > I see memory usage significantly above psi4.set_memory() limit. I do see; > the note in the documentation that memory usage might be *slightly*; > higher, but if I even request within 20% of a node's total memory; > (requesting 300 out of ~376 GB), I risk crashing the entire node. Even now,; > running with psi4.set_memory(""200 GB""), I see persistent VIRT usage of; > 259 GB and RES 256 GB. I know that determining the *actual* amount of memory; > consumed by a process is tricky; > <https://stackoverflow.com/questions/131303/how-to-measure-actual-memory-usage-of-an-application-or-process>,; > but this is important to me to prevent the scheduler from killing my jobs.; > After some troubleshooting, I am requesting 300 GB from the scheduler, but; > 200 GB from psi4, and end up with ~260 GB used. Is this expected?; >; > Relatedly, but separate, is there a way to estimate what the scratch file; > size may be? I was planning to use node-local storage until I found out my; > scratch files are 1.5+ TB. Any rule of thumb way of estimating this ahead; > of time (number of atoms × level of theory × some magic thing?); >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1985>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AAXVA5WFYJDHW36AZTXMGCDSCLOVDANCNFSM4QJ6TFCA>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520:1226,schedul,scheduler,1226,https://psicode.org,https://github.com/psi4/psi4/issues/1985#issuecomment-679397520,2,['schedul'],['scheduler']
Energy Efficiency,"me taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1886,energy,energy,1886,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"metry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1473,ENERGY,ENERGY,1473,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['ENERGY'],['ENERGY']
Energy Efficiency,"mic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 111 111 ; -------------------------; Total 111 111; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -40.20742626722070 -4.02074e+01 0.00000e+00 ; @DF-RKS iter 1: -41.85372076056422 -1.64629e+00 4.64946e-03 DIIS/ADIIS; @DF-RKS iter 2: -42.00985523463992 -1.56134e-01 2.18407e-03 DIIS/ADIIS; @DF-RKS iter 3: -42.04248981983608 -3.26346e-02 7.08822e-04 DIIS/ADIIS; @DF-RKS iter 4: -42.04528563064348 -2.79581e-03 3.01721e-04 DIIS/ADIIS; @DF-RKS iter 5: -42.04589556301210 -6.09932e-04 8.40052e-05 DIIS; @DF-RKS iter 6: -42.04594641312401 -5.08501e-05 2.29544e-05 DIIS; @DF-RKS iter 7: -42.04595101061475 -4.59749e-06 8.73466e-06 DIIS; @DF-RKS iter 8: -42.04595193846246 -9.27848e-07 1.83903e-06 DIIS; @DF-RKS iter 9: -42.04595197043621 -3.19738e-08 1.16291e-06 DIIS; @DF-RKS iter 10: -42.04595197988089 -9.44468e-09 3.03360e-07 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 31.9999968368 ; deviation = -3.163e-06 . Orbital Energies [Eh]; ---------------------. Doubly Occupied: . 1A -0.966068 2A -0.941808 3A -0.903357 ; 4A -0.853002 5A -0.775302 6A -0.704610 ; 7A -0.641487 8A -0.595780 9A -0.563657 ; 10A -0.563636 11A -0.491248 12A -0.491246 ; 13A -0.424650 14A -0.424646 15A -0.331443 ; 16A -0.331440 . Virtual: . 17A 0.011949 18A 0.011950 19A 0.074448 ; 20A 0.093735 21A 0.124628 22A 0.124636 ; 23A 0.164111 24A 0.164124 25A 0.219904 ; 26A 0.229389 27A 0.270058 28A 0.300970 ; 29A 0.300989 30A 0.319492 31A 0.330008 ; 32A 0.369535 33A 0.369543 34A 0.380424 ; 35A 0.399089 36A 0.423400 37A 0.423423 ; 38A 0.446420 39A 0.446494 40A 0.494266 ; 41A 0.508497 42A 0.508502 43A 0.538949 ; 44A 0.538953 45A 0.610836 46A 0.610855 ; 47A 0.630158 48A 0.718603 49A 0.718620 ; 50A 0.736912 51A 0.819908 52A 0.820049 ; 53A 0.841985 54A 0.842142 55A 0.861839 ; 56A 0.915524 57A 0.915721 58A 0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:23781,Energy,Energy,23781,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['Energy'],['Energy']
Energy Efficiency,"mize()` function. In addition, a dictionary of GeomeTRIC-specific keywords and options (like constraints) may be passed to the optimizer. The `test_h2o_constrained` pytest demonstrates how this is done. . ```; e = optimize(..., engine=`geometric`, optimizer_keywords={...}); ```; Output is consistent with Psi4's default geometry optimization:; <details><summary>Example result </summary>; <p>. ```; >>> grep ""~"" output.dat. ==> GeomeTRIC Optimizer <== ~; Psi4 convergence criteria QCHEM not recognized by GeomeTRIC, switching to GAU_TIGHT ~; Measures of convergence in internal coordinates in au. ~; Criteria marked as inactive (o), active & met (*), and active & unmet ( ). ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 1.50e-05 1.00e-05 6.00e-05 4.00e-05 ~; --------------------------------------------------------------------------------------------- ~; 0 -7.64427364e+01 -------- 5.01e-02 4.03e-02 -------- -------- ~; 1 -7.64446505e+01 -1.91e-03 2.68e-03 1.95e-03 3.06e-02 2.16e-02 ~; 2 -7.64446681e+01 -1.77e-05 5.27e-04 4.17e-04 4.22e-03 3.98e-03 ~; 3 -7.64446684e+01 -3.06e-07 * 2.27e-05 2.03e-05 4.11e-04 2.93e-04 ~; 4 -7.64446684e+01 6.91e-10 * 3.28e-06 * 2.74e-06 * 1.78e-05 * 1.49e-05 * ~; Optimization converged! ~. ```. </p>; </details>. ## Todos; - [x] Working GeomeTRIC interface; - [x] Improved printing and error handling; - [x] Pytest(s); - [x] Constrained optimizations; - [x] Process GeomeTRIC keywords in Psi4 input; - [x] Composite energy calls (CBS, etc.); - [x] Documentation. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813:1919,energy,energy,1919,https://psicode.org,https://github.com/psi4/psi4/pull/1813,1,['energy'],['energy']
Energy Efficiency,"mmetry. Do I understand; correctly that OPDMs are stored all the way back in the AO (not SO) basis?; 2. I looked through the CI and CC output with Lori yesterday. Both outputs; are totally logical for what they are doing, yet they are inconsistent with; each other in terms of numbering roots. For the case of CCEOM, because; excited states are all treated together, it is very logical to number the; EOM states 1, 2, 3, etc. That then means the ground state, if it is in; this same numbering scheme, has to be labeled root 0. For the CI outputs,; everything is lumped together, so it is logical to number the ground state; as 1. If we make things consistent, it is easier to change the CI; numbering to match the CC numbering. This also has the advantage that the; CC numbering will work well for CIS, TDDFT, etc. So that we can easily loop over things, I favor any lists of energies or; dipoles as also including the ground state (state 0). So, we can have. CI/CC ROOT 0 ENERGY [or whatever it's called, I forget]; CI/CC ROOT 1 ENERGY; etc. as well as. CI/CC ROOT 0 DIPOLE x; CI/CC ROOT 1 DIPOLE x. Including ROOT 0 in the lists above will remove unnecessary annoying logic; when looping over roots for processing/printing output. For CI use cases,; we will always want to loop over all roots including ROOT 0. For the ground state only, we can also duplicate the ROOT 0 information; into variable names without the ""ROOT n"" designation, which is what people; will want to grab if they just want g.s. info. CI/CC DIPOLE x. (Actually, strictly speaking, the root number that should go here should; probably be FOLLOW_ROOT, which defaults to ROOT1 (now should be ->; ROOT0)... FOLLOW_ROOT is supposed to allow you to optimize an excited state; instead of the ground state in an MCSCF or geometry opt). The CI code has always assumed numbering starts with 1 in the user; interface, so any input options regarding roots will need to have -1 added; (except the total number of roots, obviously). Best,; D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260126337:1315,ENERGY,ENERGY,1315,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260126337,2,['ENERGY'],['ENERGY']
Energy Efficiency,"mmy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6699,ENERGY,ENERGY,6699,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"module.c.h:283; #36 0x7fa146d8bfed in _PyCFunction_FastCallDict Objects/methodobject.c:234; #37 0x7fa146e25499 in call_function Python/ceval.c:4830; #38 0x7fa146e2971b in _PyEval_EvalFrameDefault Python/ceval.c:3328; #39 0x7fa146e2509d in _PyEval_EvalCodeWithName Python/ceval.c:4159; #40 0x7fa146e256cc in PyEval_EvalCodeEx Python/ceval.c:4180; #41 0x7fa146e2571a in PyEval_EvalCode Python/ceval.c:731; #42 0x7fa146e610a1 in run_mod Python/pythonrun.c:1025; #43 0x7fa146e610a1 in PyRun_FileExFlags Python/pythonrun.c:978; #44 0x7fa146e61206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #45 0x7fa146e7d6fc in run_file Modules/main.c:340; #46 0x7fa146e7d6fc in Py_Main Modules/main.c:810; #47 0x400bbb in main Programs/python.c:69; #48 0x7fa145de8444 in __libc_start_main (/lib64/libc.so.6+0x22444); #49 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x6020004445d8 is located 0 bytes to the right of 8-byte region [0x6020004445d0,0x6020004445d8); allocated by thread T0 here:; #0 0x7fa1472af94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7fa137a9a6f2 in __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7fa137a90c98 in std::allocator_traits<std::allocator<double> >::allocate(std::allocator<double>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7fa137a88909 in std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7fa1392ce272 in std::vector<double, std::allocator<double> >::_M_default_append(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:6392,allocate,allocated,6392,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['allocate'],['allocated']
Energy Efficiency,"mory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot a",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3385,energy,energy,3385,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.00000000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14578,energy,energy,14578,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"mp2 _________________________________________________________________. def test_psi4_dfmp2():; """"""dfmp2-1""""""; #! Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy; #! using automatic counterpoise correction. Monomers are specified using Cartesian coordinates.; ; Enuc = 235.946620315069168; Ecp = -0.0224119246; ; formic_dim = psi4.geometry(""""""; 0 1; C -1.888896 -0.179692 0.000000; O -1.493280 1.073689 0.000000; O -1.170435 -1.166590 0.000000; H -2.979488 -0.258829 0.000000; H -0.498833 1.107195 0.000000; --; 0 1; C 1.888896 0.179692 0.000000; O 1.493280 -1.073689 0.000000; O 1.170435 1.166590 0.000000; H 2.979488 0.258829 0.000000; H 0.498833 -1.107195 0.000000; units angstrom; no_reorient; """"""); ; psi4.set_options({; 'basis': 'cc-pvdz',; 'df_basis_scf': 'cc-pvdz-jkfit',; 'df_basis_mp2': 'cc-pvdz-ri',; # not necessary to specify df_basis* for most basis sets; 'scf_type': 'df',; 'guess': 'sad',; 'd_convergence': 11,; }); ; > e_cp = psi4.energy('mp2', bsse_type='cp'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:112: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:415: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver_nbody.py:303: in nbody_gufunc; ptype_dict[pair] = func(method_string, molecule=current_mol, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . name = 'mp2', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f6fc9d20298>}, reference = 'RHF', mtd",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:32987,energy,energy,32987,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,mplete.; > (OO|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (OV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OO)...; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|OV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > (VV|VV)...; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Frozen core energy = 0.00000000000000; > ; > Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); > Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); > Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); > Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); > Total: 0.043 (MW) / 0.341 (MB); > ; > Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); > Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); > Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); > Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); > Total: 0.011 (MW) / 0.086 (MB); > ; > Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); > Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); > Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); > Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); > Total: 0.003 (MW) / 0.022 (MB); > ```; > ; > Output from running coupled cluster tests:; > ; > ```; > Start 9: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178134633:2431,energy,energy,2431,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178134633,1,['energy'],['energy']
Energy Efficiency,"mpty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicode character width, otherwise the table gets far too wide; layering allowed. Several tables are produced:; - [x] an all-methods, one row per method table for the front page: introduction.rst#capabilities . this table complements the comprehensive hand-written one. [summary](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rs",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:1600,energy,energy,1600,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"mpute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_optio",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1922,Energy,Energy,1922,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,"mpute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3434,Energy,Energy,3434,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,mrcc-ccsd_t-3; 377/411 Test #408: skeletonmointegrals .............. Passed 0.92 sec; Start 220: mints-helper; 378/411 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.40 sec; Start 398: json-v11-gradient; 379/411 Test #333: scf2 ............................. Passed 1.23 sec; Start 411: skeletonwavefunction; 380/411 Test #298: pubchem2 ......................... Passed 1.42 sec; Start 404: json-schema-1-properties; 381/411 Test #410: skeletonsointegrals .............. Passed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.5,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"ms there is a weird bug in Psi4 version 1.6.1 when using multithreading and PK as SCF algorithm, which results in essentially random results. I've attached a minimal example python script that runs the same calculation 10 times and prints the results to console. minimal_example.py:; ```; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); ```. To reproduce the behaviour, run; `python minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Als",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:1011,energy,energy,1011,https://psicode.org,https://github.com/psi4/psi4/issues/2760,1,['energy'],['energy']
Energy Efficiency,"must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:8991,energy,energy,8991,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"n fixed, full tests should be clean again. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] the nbody-vmfc-hessian has one element of value 0.85 above reference by 1.2e-8 caused by adiis. not a big deal, so convcrit loosened from 1e-8 to 2e-8.; - [x] the new molden writer tests are nicely structured, but they use r_convergence=12 a lot for SCF, which doesn't tighten the criteria for SCF. so the new adiis tipped one test over the failure limit. (see below the original (r_conv=12) and tight (e_conv=12) SCF cycles w/ diis and adiis.) I've regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:1128,Energy,Energy,1128,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,"n psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in driver on wfn and P::e; - [x] Newly sets `MP2 SINGLES ENERGY` and `MP2 DOUBLES ENERGY`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:1034,ENERGY,ENERGY,1034,https://psicode.org,https://github.com/psi4/psi4/pull/1850,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"n the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI screening methods. ## Questions; - [x] Would the test in `test_comprehensive_jk_screening.py` be better placed in `test_erisieve.py`? I placed the test in the former because I considered it large enough to warrant not having the quick pytest mark, but I'm ambivalent about where the test goes between those two test modu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:1296,energy,energy,1296,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,['energy'],['energy']
Energy Efficiency,"n(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: ERD; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:26 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:9141,energy,energy,9141,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,n-chiral; 363/411 Test #376: pywrap-align ..................... Passed 3.18 sec; Start 378: mints12; 364/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 379: cc-module; 365/411 Test #377: pywrap-align-chiral .............. Passed 3.11 sec; Start 380: psi4numpy-cphf; 366/411 Test #227: mp2-def2 ......................... Passed 434.72 sec; Start 381: psi4numpy-dfmp2; 367/411 Test #380: psi4numpy-cphf ................... Passed 1.36 sec; Start 382: psi4numpy-rhf; 368/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 383: psi4numpy-rhf-gradient; 369/411 Test #381: psi4numpy-dfmp2 .................. Passed 2.04 sec; Start 384: psi4numpy-rhf-hessian; 370/411 Test #383: psi4numpy-rhf-gradient ........... Passed 2.43 sec; Start 385: psi4numpy-fci; 371/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.52 sec; Start 386: cookbook-rohf-orb-rot; 372/411 Test #385: psi4numpy-fci .................... Passed 4.41 sec; Start 387: python-energy; 373/411 Test #387: python-energy .................... Passed 1.33 sec; Start 388: python-curve; 374/411 Test #240: ocepa-freq1 ...................... Passed 431.50 sec; Start 389: python-pubchem; 375/411 Test #388: python-curve ..................... Passed 3.42 sec; Start 390: python-mints9; 376/411 Test #375: pywrap-bfs ....................... Passed 25.37 sec; Start 391: python-mints2; 377/411 Test #390: python-mints9 .................... Passed 1.87 sec; Start 392: python-cc54; 378/411 Test #391: python-mints2 .................... Passed 2.43 sec; Start 393: python-3-index-transforms; 379/411 Test #374: dft-custom-gga ................... Passed 30.91 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.82 sec; Start 396: python-memdfjk; 381/411 Test #178: fsapt1 ........................... Passed 2162.17 sec; Start 397: json-v11-energy; 382/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 398: json-v11-gradient; 383/4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:34910,energy,energy,34910,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,2,['energy'],['energy']
Energy Efficiency,n-chiral; 371/411 Test #376: pywrap-align ..................... Passed 3.23 sec; Start 378: mints12; 372/411 Test #378: mints12 .......................... Passed 1.18 sec; Start 379: cc-module; 373/411 Test #377: pywrap-align-chiral .............. Passed 2.88 sec; Start 380: psi4numpy-cphf; 374/411 Test #380: psi4numpy-cphf ................... Passed 1.66 sec; Start 381: psi4numpy-dfmp2; 375/411 Test #381: psi4numpy-dfmp2 .................. Passed 3.39 sec; Start 382: psi4numpy-rhf; 376/411 Test #382: psi4numpy-rhf .................... Passed 0.80 sec; Start 383: psi4numpy-rhf-gradient; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.82 sec; Start 384: psi4numpy-rhf-hessian; 378/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.83 sec; Start 385: psi4numpy-fci; 379/411 Test #385: psi4numpy-fci .................... Passed 10.74 sec; Start 386: cookbook-rohf-orb-rot; 380/411 Test #371: dft-custom-dhdf .................. Passed 92.73 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 2.12 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 9.75 sec; Start 389: python-pubchem; 383/411 Test #389: python-pubchem ................... Passed 57.20 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.93 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 3.30 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 177.04 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 10.00 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.96 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.99 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.99 sec; Start 398: json-v11-gradient; 391/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:35489,energy,energy,35489,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['energy'],['energy']
Energy Efficiency,n-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.20 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.19 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 38.08 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi4numpy-cphf ................... Passed 1.21 sec; Start 381: psi4numpy-dfmp2; 382/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 382: psi4numpy-rhf; 383/411 Test #382: psi4numpy-rhf .................... Passed 0.86 sec; Start 383: psi4numpy-rhf-gradient; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.33 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.06 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 3.09 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 33.29 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 1.08 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:35828,energy,energy,35828,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,n-chiral; 378/411 Test #377: pywrap-align-chiral .............. Passed 3.25 sec; Start 378: mints12; 379/411 Test #378: mints12 .......................... Passed 1.27 sec; Start 379: cc-module; 380/411 Test #379: cc-module ........................ Passed 14.70 sec; Start 380: psi4numpy-cphf; 381/411 Test #380: psi4numpy-cphf ................... Passed 1.36 sec; Start 381: psi4numpy-dfmp2; 382/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.55 sec; Start 382: psi4numpy-rhf; 383/411 Test #382: psi4numpy-rhf .................... Passed 0.85 sec; Start 383: psi4numpy-rhf-gradient; 384/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.03 sec; Start 384: psi4numpy-rhf-hessian; 385/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.41 sec; Start 385: psi4numpy-fci; 386/411 Test #385: psi4numpy-fci .................... Passed 2.83 sec; Start 386: cookbook-rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 18.93 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 0.79 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:35799,energy,energy,35799,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,"n/ceval.c:4187; #38 0x556f5236501b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #39 0x556f523e73c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #40 0x556f523e77c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #41 0x556f523e79c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #42 0x556f523eb4b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #43 0x556f523eb4b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #44 0x556f522b402d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #45 0x7f3580127412 in __libc_start_main (/lib64/libc.so.6+0x24412); #46 0x556f52394e0d (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x1c3e0d). 0x603000319fd8 is located 0 bytes to the right of 24-byte region [0x603000319fc0,0x603000319fd8); allocated by thread T0 here:; #0 0x7f35803c0abe in operator new[](unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:93; #1 0x7f356e93c966 in psi::block_matrix(unsigned long, unsigned long, bool) /home/raimis/prj/psi4.git/psi4/src/psi4/libciomr/block_matrix.cc:83; #2 0x7f356cf50fa3 in psi::ccresponse::roa() /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/roa.cc:93; #3 0x7f356cf2a1e3 in psi::ccresponse::ccresponse(std::shared_ptr<psi::Wavefunction>, psi::Options&) /home/raimis/prj/psi4.git/psi4/src/psi4/cc/ccresponse/ccresponse.cc:136; #4 0x7f356cac7528 in py_psi_ccresponse(std::shared_ptr<psi::Wavefunction>) /home/raimis/prj/psi4.git/psi4/src/core.cc:396; #5 0x7f356cb7fe9a in double pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<double, double (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(double (*&)(std::shared_ptr<psi::Wavefunction>)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133:7284,allocate,allocated,7284,https://psicode.org,https://github.com/psi4/psi4/pull/1476#issuecomment-454165133,1,['allocate'],['allocated']
Energy Efficiency,"n: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1629,energy,energy,1629,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"n_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1351: in scf_helper; disp_energy = scf_wfn._disp_functor.compute_energy(scf_wfn.molecule()); ../lib/python3.6/site-packages/psi4/driver/procrouting/empirical_dispersion.py:195: in compute_energy; verbose=1); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19029,energy,energy,19029,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ncies (not publicly available yet, cause it's WIP). I can confirm I'm seeing a crash with the script I have provided. See below:; EDIT: conda pre-built binaries 1.3.2 works fine. Is it my build issue?; ```;  python minimal.py . *** tstart() called on filip-ThinkPad-E495; *** at Sun Aug 25 15:47:40 2019. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // Guess SCF, 3-21G Basis //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: 3-21G; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry HE line 28 file /home/filip/software/psi4-1.4rc-opt/share/psi4/basis/3-21g.gbs . ---------------------------------------------------------; SCF Castup computation ; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; HE 0.000000000000 0.000000000000 -1.481692970000 4.002603254130; Gh(HE) 0.000000000000 0.000000000000 1.481692970000 4.002603254130. Running in c1 symmetry. Rotational constants: A = ************ B = 0.95920 C = 0.95920 [cm^-1]; Rotational constants: A = ************ B = 28755.98304 C = 28755.98304 [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 2; Nalpha = 1; Nbeta = 1. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 3-21G; Blend: 3-21G; Number of shells: 4; Number of basis function: 4; Number of Cartesian functions: 4; Spherical Harmonics?: false; Max angular momentum: 0. => Loading Basis Set <=. Name: (3-21G AU",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:1756,charge,charge,1756,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['charge'],['charge']
Energy Efficiency,"nctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > - DLDF+D09/cc-pVDZ: *GRADIENTS FAILED*; >; > Segmentation fault: 11; >; > - Both disk_DF and mem_DF gradients yield above segfault, no; > message in outfile or message printed to stdout; > - PBE/cc-pVDZ: Passed; > - wPBE/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasiri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:5041,energy,energy,5041,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"nd is the root cause of the issue brought up regarding the PKJK algorithm. To address this issue, the buffer size per thread is always set to have at least a value of 1. When a minimum buffer size is enforced, the issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein rand",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:1891,energy,energy,1891,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"nd routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1250,ENERGY,ENERGY,1250,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ne energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time taken: 182.75560629181564 seconds.; ```; [Local_psi4_outputs.tar.gz](https://github.com",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:3058,energy,energy,3058,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"nergy (a.u.) : -129.54016619495539; =======================================================================. Number of alpha independent-pairs:172; Number of beta independent-pairs :157. ==============================================================================; ================ Performing CD-OMP2 iterations... ============================; ==============================================================================; Minimizing CD-MP2-L Functional; ------------------------------; Iter E_total DE RMS MO Grad MAX MO Grad RMS T2; ---- --------------- ---------- ----------- ----------- ----------; 1 2171897840405125233095316875881590551467307175332860142219670350830780702696283291230457729657914921746891661667264776735054294112163359650172177568018543474023361651834998812756231127668278305330007498940536320077394375160362584676926576578513365418212288803914428069938462720.0000000000 2.17e+276 inf 1.41e+183 8.10e+89; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 40, in <module>. File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/procedures/proc.py"", line 223, in select_omp2; return func(name, **kwargs). File ""/build/psi4-lIOjn9/psi4-1.0~rc/share/python/procedures/proc.py"", line 1308, in run_dfocc; dfocc_wfn = psi4.dfocc(ref_wfn). RuntimeError:; Fatal Error: DF-OCC iterations are diverging; Error occurred in file: /build/psi4-lIOjn9/psi4-1.0~rc/src/bin/dfocc/occ_iterations.cc on line: 263; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::dfoccwave::DFOCC::occ_iterations(); psi::dfoccwave::DFOCC::cd_omp2_manager(); psi::dfoccwave::DFOCC::compute_energy(); psi::dfoccwave::dfoccwave(boost::shared_ptr<psi::Wavefunction>, psi::Options&); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391:1954,energy,energy,1954,https://psicode.org,https://github.com/psi4/psi4/issues/391,2,['energy'],['energy']
Energy Efficiency,"nergy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -7259.17972994142656 -2.96200e-02 3.74973e-03 DIIS; @DF-RHF iter 3: -7259.18676197489549 -7.03203e-03 1.53495e-03 DIIS; @DF-RHF iter 4: -7259.18756584481798 -8.03870e-04 4.30106e-05 DIIS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1947,energy,energy,1947,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:16098,energy,energy,16098,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"neric; QC terms.; dftd3rec : dict; Nested dictionary with input specification and output collection; from DFTD3 in program-specific commands, files, & output capture. Returns; -------; jobrec : dict; Nested dictionary with input specification and output collection; from DFTD3 in generic QC terms. """"""; try:; jobrec['molecule']['real']; jobrec['driver']; jobrec['provenance']; jobrec['options']['fctldash']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(jobrec.keys()))) from err. try:; dftd3rec['stdout']; except KeyError as err:; raise KeyError('Required field ({}) missing from ({})'.format(str(err), list(dftd3rec.keys()))) from err. # amalgamate output; text = dftd3rec['stdout']; text += '\n <<< DFTD3 Results >>>\n'. for fl in ['dftd3_gradient']:; field = 'output_' + fl.lower(); if field in dftd3rec:; text += '\n DFTD3 scratch file {} has been read.\n'.format(fl); text += dftd3rec[field]. # parse energy output (could go further and break into E6, E8, E10 and Cn coeff); real = np.array(jobrec['molecule']['real']); full_nat = real.shape[0]; real_nat = np.sum(real). for ln in dftd3rec['stdout'].splitlines():; if re.search('DFTD3 V', ln):; version = ln.replace('DFTD3', '').replace('|', '').strip().lower(); elif re.match(' Edisp /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; def test_dftd3():; """"""dftd3/energy""""""; #! Exercises the various DFT-D corrections, both through python directly and through c++. ref",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:7261,energy,energy,7261,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ng CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why re",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3684,energy,energy,3684,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,1,['energy'],['energy']
Energy Efficiency,"ng like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1580,ENERGY,ENERGY,1580,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ngly occupied orbitals; 'restricted_docc': [5, 0, 0, 0], # Core orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solve",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1266,energy,energy,1266,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['energy'],['energy']
Energy Efficiency,"niel Crawford; crawdad@vt.edu. On Thu, Jan 14, 2016 at 8:38 AM, jgonthier notifications@github.com wrote:. > Are both solutions stable ? For UHF computations, it seems to me always; > more safe to do a stability analysis. In some cases, it allowed me to; > eliminate the higher energy solution as unstable.; > ; > However, in other cases, both solutions are actually SCF minima... Trying; > with different guesses then seems the only way to find the lowest energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1137,energy,energy,1137,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,1,['energy'],['energy']
Energy Efficiency,"niel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 0 0 8 0; B2u 8 0 0 0 8 0; B3u 8 0 0 0 8 0. DOCC = 2 0 0 0 0 0 0 0; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 0 0 0; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 8 8 8; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -24.23681570008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:9492,energy,energy,9492,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['energy'],['energy']
Energy Efficiency,"niel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = DETCI; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 48000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 8; Number of SOs = 46; Number of MOs = 46; Number of active MOs = 46. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; Ag 11 0 2 0 9 0; B1g 3 0 0 0 3 0; B2g 3 0 0 0 3 0; B3g 3 0 0 0 3 0; Au 2 0 0 0 2 0; B1u 8 0 1 0 7 0; B2u 8 0 1 0 7 0; B3u 8 0 1 0 7 0. DOCC = 2 0 0 0 0 1 1 1; SOCC = 0 0 0 0 0 0 0 0. FROZEN DOCC = 0 0 0 0 0 0 0 0; RESTR DOCC = 0 0 0 0 0 0 0 0; RAS 1 = 2 0 0 0 0 1 1 1; RAS 2 = 0 0 0 0 0 0 0 0; RAS 3 = 9 3 3 3 2 7 7 7; RAS 4 = 0 0 0 0 0 0 0 0; RESTR UOCC = 0 0 0 0 0 0 0 0; FROZEN UOCC = 0 0 0 0 0 0 0 0. Nuclear Rep. energy (chkpt) = 0.00000000000000; SCF energy (chkpt) = -99.45080702230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 1.16 seconds = 0.02 minutes; system time = 0.06 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 11.55 seconds = 0.19 minutes; system time = 0.35 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 10 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 10 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:10309,energy,energy,10309,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['energy'],['energy']
Energy Efficiency,"nm""),; y_title=(""Δε"", ""L⋅mol⁻¹⋅cm⁻¹"")). (opa_plot & ecd_plot).save(""moxy.html""); ```; and obtain these plots:; ![visualization](https://user-images.githubusercontent.com/3708689/82666127-7ba78f80-9c35-11ea-9768-e291b2e69f67.png). The plotting function itself (`plot_spectrum`) is not in Psi4. The `spectrum` function will compute the convolution with the selected lineshape and then with that data any plotting library will work. Here I am using [Altair](https://altair-viz.github.io/). The output file contains the following summary:; ```; ******************************************************************************************; ********** WARNING **********; ********** Length-gauge rotatory strengths are **NOT** gauge-origin invariant **********; ******************************************************************************************. Excitation Energy Total Energy Oscillator Strength Rotatory Strength ; # Sym: GS->ES (Trans) au eV au au (length) au (velocity) au (length) au (velocity) ; ---- -------------------- --------------- --------------- --------------- --------------- --------------- --------------- ---------------; 1 A->A (3 A) 0.29232 7.95436 -191.62963 0.0000 0.0000 0.0000 -0.0000 ; 2 A->A (3 A) 0.32745 8.91025 -191.59450 0.0000 0.0000 0.0000 -0.0000 ; 3 A->A (3 A) 0.33091 9.00446 -191.59104 0.0000 0.0000 0.0000 -0.0000 ; 4 A->A (3 A) 0.34771 9.46180 -191.57423 0.0000 0.0000 0.0000 -0.0000 ; 5 A->A (3 A) 0.36617 9.96389 -191.55578 0.0000 0.0000 0.0000 -0.0000 ; 6 A->A (1 A) 0.36723 9.99278 -191.55472 0.0030 0.0073 -0.0070 -0.0076 ; 7 A->A (3 A) 0.38101 10.36789 -191.54093 0.0000 0.0000 0.0000 -0.0000 ; 8 A->A (3 A) 0.38434 10.45833 -191.53761 0.0000 0.0000 0.0000 -0.0000 ; 9 A->A (1 A) 0.38603 10.50444 -191.53591 0.0057 0.0118 0.0207 0.0211 ; 10 A->A (3 A) 0.39165 10.65733 -191.53030 0.0000 0.0000 0.0000 -0.0000 ; 11 A->A (1 A) 0.39470 10.74043 -191.52724 0.0255 0.0287 0.0509 0.0617 ; 12 A->A (1 A) 0.40636 11.05757 -191.51559 0.1813 0.1877 0.0663 0.0563 ; 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:4615,Energy,Energy,4615,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,2,['Energy'],['Energy']
Energy Efficiency,"nment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 2002, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/procrouting/scf_proc/scf_ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:1419,energy,energy,1419,https://psicode.org,https://github.com/psi4/psi4/issues/3069,2,['energy'],['energy']
Energy Efficiency,"nni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 49",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:9733,energy,energy,9733,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,nocc3 ........................... Passed 24.72 sec; Start 158: dft-ghost; 248/411 Test #270: opt4 ............................. Passed 10.67 sec; Start 241: ocepa-grad1; 249/411 Test #335: scf4 ............................. Passed 18.87 sec; Start 224: molden2; 250/411 Test #365: cubeprop-esp ..................... Passed 9.37 sec; Start 199: fnocc1; 251/411 Test #124: dfccsdl1 ......................... Passed 13.23 sec; Start 243: ocepa1; 252/411 Test #198: freq-isotope2 .................... Passed 13.17 sec; Start 223: molden1; 253/411 Test #123: dfccsd1 .......................... Passed 16.62 sec; Start 226: mp2-1; 254/411 Test #295: psithon1 ......................... Passed 15.24 sec; Start 341: soscf-ref; 255/411 Test #158: dft-ghost ........................ Passed 10.18 sec; Start 185: fci-h2o; 256/411 Test #139: dfomp2-1 ......................... Passed 18.46 sec; Start 184: fci-dipole; 257/411 Test #4: casscf-semi ...................... Passed 14.76 sec; Start 186: fci-h2o-2; 258/411 Test #192: fd-freq-energy ................... Passed 17.45 sec; Start 132: dfmp2-4; 259/411 Test #224: molden2 .......................... Passed 11.80 sec; Start 6: ao-casscf-sp; 260/411 Test #223: molden1 .......................... Passed 9.22 sec; Start 127: dfccsdt1; 261/411 Test #185: fci-h2o .......................... Passed 7.33 sec; Start 90: cepa1; 262/411 Test #243: ocepa1 ........................... Passed 12.67 sec; Start 9: castup2; 263/411 Test #184: fci-dipole ....................... Passed 8.24 sec; Start 265: opt1; 264/411 Test #266: opt1-fd .......................... Passed 21.17 sec; Start 10: castup3; 265/411 Test #186: fci-h2o-2 ........................ Passed 8.30 sec; Start 339: scf-property; 266/411 Test #241: ocepa-grad1 ...................... Passed 22.53 sec; Start 191: fcidump; 267/411 Test #265: opt1 ............................. Passed 8.60 sec; Start 141: dfomp2-3; 268/411 Test #6: ao-casscf-sp ..................... Passed 11.39 sec; Start 117: dfcass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:24218,energy,energy,24218,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - [x] no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass ref_gradient array to test on or `set findif fd_project` T/F explicitly to control.; - [x] `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. json_ret is now an object, so `.` access, not dictionary. The old schema runner uses a schema circa pre-2018 and we've warned it's deprecated for about a year, so I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4358,energy,energy,4358,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['energy'],['energy']
Energy Efficiency,"now looking solely at the third bullet in https://github.com/psi4/psi4/pull/1980#issuecomment-677068760, post-Jonathon's mograd correction. I tried ""healing"" the other rms arithmetic grepped above, but it made no effect on iteration values. Interestingly, the internal array `rms()` fn is also `sqrt(sq) / n` rather than `sqrt(sq / n)`. Below are the 9 olccd r/u/ro ae 3 dz/adz/qz2p tests in occ. ""E"" is the scale for `tol_Eod` from `e_convergence` in `if (rms_wog < tol_grad && biggest_mograd < mograd_max && std::fabs(DE) < (1.0 * tol_Eod)) break;`. ""G"" is the floor (replacing 4.0) for mograd `tol_grad` in. ```; if (options_[""RMS_MOGRAD_CONVERGENCE""].has_changed()) {; tol_grad = options_.get_double(""RMS_MOGRAD_CONVERGENCE"");; } else {; double temp;; temp = (-0.9 * std::log10(tol_Eod)) - 1.6;; if (temp < 4.0) {; temp = 4.0;; }; tol_grad = pow(10.0, -temp);; // tol_grad = 100.0*tol_Eod;; outfile->Printf(""\tFor this energy convergence, default RMS orbital gradient is: %12.2e\n"", tol_grad);; ```. Without interventions (first block below), 2 tests fail. Iterations range is 8-11. This is unchanged from before #1988 because the iterations are E-limited. With my first proposed intervention of meddling with E by 0.1 (middle block below), that heals everything but at a cost of nearly 3 more iterations; range 10-14. Meddling with G instead (third block below) by flooring at 6 fixes everything in avg of 1 more iteration; range 8-12. Plus G is at least all positive, rather than E, which can trigger convergence on small energy _increases_. So I've switched this PR to to the third block case. Note that iteration studies have been looking at olccd only; it may be worth examining # iter for other oo methods that were fine before this PR. E 1.0 G 4 (2 fail) avg 9.6 -- pre PR; ```; iter: abs( 3.92e-07) < 1.00e-06 8.04e-07 < 1.00e-04 8; iter: abs( 8.96e-07) < 1.00e-06 2.11e-06 < 1.00e-04 8; iter: abs( 4.92e-07) < 1.00e-06 2.03e-07 < 1.00e-04 10; iter: abs( 1.04e-09) < 1.00e-06 2.32e-06 < 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-682319508:923,energy,energy,923,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-682319508,1,['energy'],['energy']
Energy Efficiency,"now of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1290,ENERGY,ENERGY,1290,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"nput wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 480",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1173,energy,energy,1173,https://psicode.org,https://github.com/psi4/psi4/issues/1871,2,['energy'],['energy']
Energy Efficiency,"ns in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; # -0.9480, 1.5096, 0.6281])/psi_bohr2angstroms,; # units=""Bohr""); #activate(mol). # above and below equivalent. molecule mol {; units au; H 0.054802057638 -2.116304287900 -2.880509533035; O 1.791649339547 -2.643726849516 -2.567570886660; H 2.715725414895 -1.055978958906 -2.475352251737; --; H 1.906355715362 -2.879942615198 0.961114707408; O 1.929221401480 -2.217026690387",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:1446,charge,charge,1446,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['charge'],['charge']
Energy Efficiency,"ns, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --durations-min 60.0` runs in 25 minutes on a 20-core machine with no individual test over 4m. That's not reasonable for a lapt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11708,energy,energy,11708,https://psicode.org,https://github.com/psi4/psi4/pull/2731,2,['energy'],['energy']
Energy Efficiency,"nstructs `libtrans` on what back-transformations to do directly, or the integral transformation object remains in `deriv.cc`, and the caller code passes information on what back-transformations need to be done. I'm leaning more towards the first option.; * Off-diagonal blocks can be marked as Hermitian, in which case both the AO-transform of the block and the transpose of the AO-transform will be added to the running AO basis density matrix. This, prevents, for example, transforming the `ov` and the `vo` blocks.; * Density-fitted gradients will behave quite similarly to the refactored correlated derivatives. The two particle-density matrix is just replaced with the intermediates from Equation 79 of [Ugur's paper](https://aip.scitation.org/doi/10.1063/1.4896235): the thing you contract against the metric derivative and the thing you contract against the density fitted-integral derivative.; * At present, I envision the caller being responsible for supplying the object contracted against the overlap derivatives: orbital Lagrangian, energy-weighted density matrix, or possibly other names. It's always possible to determine this from the other intermediates needed for gradients. (At least for conventional integrals, and probably for density-fitted as well.) It may be worth coding for the transformation to do this.; * While solving response equations is common to many derivative methods, it's counterproductive to generalize this beyond providing a common conjugate gradient solver (which is outside my role here). For example, consider the orbital response term of MP2 between Ugur's MP2 paper, [Francesco's DSRG (regularized MP2) paper](https://aip.scitation.org/doi/10.1063/1.5100175), and the [DiStasio/Head-Gordon MP2 paper](https://onlinelibrary.wiley.com/doi/full/10.1002/jcc.20604) behind Rob's implementation. All three codes will get the same relaxed PDMs and solve orbital response terms by conjugate gradients, but they do not agree on which terms should be called orbital ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:5920,energy,energy-weighted,5920,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['energy'],['energy-weighted']
Energy Efficiency,"ntain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494087701 -8.58342e+01 1.47308e-01 DIIS; Occupation by irrep:; A ; DOCC [ 5 ]; SOCC [ 0 ]. @UHF iter 2: -86.90714628725982 -1.07296e+00 4.33630e-02 FRAC; @UHF iter 3: -96.04326201435347 -9.13612e+00 5.10365e-02 DIIS/FRAC; @UHF iter 4: -95.69273858723787 3.50523e-01 3.47534e-02 DIIS/FRAC; @UHF iter 5: -98.96468336105178 -3.27194e+00 1.08919e-02 DIIS/FRAC; @UHF iter 6: -99.16143874023540 -1.96755e-01 9.82232e-04 DIIS/FRAC; @UHF iter 7: -99.16448800785139 -3.04927e-03 2.62203e-04 DIIS/FRAC; @UHF iter 8: -99.16466805777382 -1.80050e-04 9.94209e-05 DIIS/FRAC; @UHF iter 9: -99.16470603597492 -3.79782e-05 8.45894e-06 DIIS/FRAC; @UHF iter 10: -99.16470620018562 -1.64211e-07 6.74767e-07 DIIS/FRAC; Energy and wave function converged.; ```; and the final energy is close to my fully numerical value `-99.164711346`. However, if you remove `symmetry c1`, it is not using fractional occupations at all:; ```; ==> Fractionally-Occupied SCF Iterations <==. Alpha orbital 3 will contain 1.000E+00 electron.; Alpha orbital 4 will contain 1.000E+00 electron.; Alpha orbital 5 will contain 1.000E+00 electron.; Beta orbital 3 will contain 6.667E-01 electron.; Beta orbital 4 will contain 6.667E-01 electron.; Beta orbital 5 will contain 6.667E-01 electron. @UHF iter 1: -85.83418494094745 -8.58342e+01 2.89307e-01 DIIS; Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u ; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]. @UHF iter 2: -87.14703249342156 -1.31285e+00 8.61028e-02 FRAC; @UHF iter 3: -94.44949400540921 -7.30246e+00 1.33943e-01 DIIS/FRAC; @UHF iter 4: -88.66303583515608 5.78646e+00 7.46716e-02 DIIS/FRAC; @UHF iter 5: -97.45982782482486 -8.79679e+00 7.49420e-02 DIIS/FRAC; @UHF ite",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1673:3392,Energy,Energy,3392,https://psicode.org,https://github.com/psi4/psi4/issues/1673,1,['Energy'],['Energy']
Energy Efficiency,"ntional integrals written to; disk. Maybe that is getting intercepted correctly. On Mon, May 14, 2018 at 6:14 PM, Lori A. Burns <notifications@github.com>; wrote:. > Posting Dom's very nice summary for easier perusal and searchability.; > Effective scf_type df Testing: mem_df & disk_df; >; > All tests listed below examine calls to both energy() and gradient() when; > employing the scf_type mem_df and scf_type disk_df settings. Each test; > employs a different model chemistry (indicated in the test description); > and the; > Physicists' water molecule, unless otherwise indicated.; >; > 1. Physicists' water, HF/6-31G; > - *TEST FAILED*; > - Error message:; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 30, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:1293,energy,energy,1293,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"ntra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Indirect leak of 648 byte(s) in 1 object(s) allocated from:; #0 0x7f0f92dd6df8 in __interceptor_realloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:75; #1 0x557f1797673c in _PyObject_GC_Resize (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x11373c). SUMMARY: AddressSanitizer: 303271 byte(s) leaked in 149 allocation(s). 0% tests passed, 1 tests failed out of 1. Label Time Summary:; casscf = 27.28 sec*proc (1 test); psi = 27.28 sec*proc (1 test); quicktests = 27.28 sec*proc (1 test). Total Test time (real) = 27.46 sec. The following tests FAILED:; 	 3 - casscf-fzc-sp (Failed); Errors while running CTest; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:18490,allocate,allocated,18490,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,2,['allocate'],['allocated']
Energy Efficiency,nts13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 sec; 398/412 Test #240: numpy-array-interface ............ Passed 1.01 sec; 399/412 Test #217: mints5 ........................... Passed 1.36 sec; 400/412 Test #383: psi4numpy-rhf .................... Passed 1.21 sec; 401/412 Test #213: mints1 ........................... Passed 0.95 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.84 sec; 403/412 Test #20,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36820,energy,energy,36820,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"nts; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::vector_dot(psi::Matrix const*). Printing out the relevant lines from the Psithon --> Python processed input file:; energy('scf',write_orbitals='scf_mos'); Avals=[0.00, 0.05, 0.10, 0.12, 0.15, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !----------------------------------------------------------------------------------!; ```; (the example uses a custom method but the problem should be reproducible with DF-OMP2).; The molecule in question has 86 occupied and 773 virtual correlated orbitals, giving rise to (depending on the storage scheme) ~2.2E9 amplitudes. The root cause of the issue seems to be missing typ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:2765,energy,energy,2765,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['energy'],['energy']
Energy Efficiency,"nts\\qiskit_scripts\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\python38.zip\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\DLLs\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\win32\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\win32\\lib\',\'C:\\Users\\poc\\Anaconda3\\envs\\qiskit-0-27-psi4-jupyter\\lib\\site-packages\\Pythonwin\'] + sys.path\nfrom qiskit_nature.drivers.qmolecule import QMolecule\n_q_molecule = QMolecule(""C:\\Users\\poc\\AppData\\Local\\Temp\\tmpyn_j4sp7.hdf5"")\nimport numpy\ncore.get_active_molecule().fix_com(True)\ncore.get_active_molecule().fix_orientation(True)\ncore.get_active_molecule().reset_point_group(\'c1\')\n_q_hf_energy, _q_hf_wavefn = energy(\'scf\', return_wfn=True)\n_q_mints = MintsHelper(_q_hf_wavefn.basisset())\n_q_mol = _q_hf_wavefn.molecule()\n_has_B = not _q_hf_wavefn.same_a_b_orbs()\n_q_molecule.origin_driver_version = psi4.__version__\n_q_molecule.hf_energy = _q_hf_energy\n_q_molecule.nuclear_repulsion_energy = _q_mol.nuclear_repulsion_energy()\n_q_molecule.num_molecular_orbitals = _q_hf_wavefn.nmo()\n_q_molecule.num_alpha = _q_hf_wavefn.nalpha()\n_q_molecule.num_beta = _q_hf_wavefn.nbeta()\n_q_molecule.mo_coeff = numpy.asarray(_q_hf_wavefn.Ca())\n_q_molecule.mo_coeff_b = numpy.asarray(_q_hf_wavefn.Cb()) if _has_B else None\n_q_molecule.orbital_energies = numpy.asarray(_q_hf_wavefn.epsilon_a())\n_q_molecule.orbital_energies_b = numpy.asarray(_q_hf_wavefn.epsilon_b()) if _has_B else None\n_q_molecule.molecular_charge = _q_mol.molecular_charge()\n_q_molecule.multiplicity = _q_mol.multiplicity()\n_q_molecule.num_atoms = _q_mol.natom()\n_q_molecule.atom_symbol = []\n_q_molecule.atom_xyz = numpy.empty([_q_mol.natom(), ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922:2014,energy,energy,2014,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922,1,['energy'],['energy']
Energy Efficiency,"nutes on a 20-core machine with no individual test over 4m. That's not reasonable for a laptop. Blame the slow-to-converge oo methods, and it's going to get worse with occd and friends.; - [ ] TODO https://github.com/MolSSI/QCEngine/pull/376 and a new version of QCEngine are a prereq.; - [x] https://github.com/qcdb/qcdb/pull/57 is associated QCDB PR (psi4 PR is a prereq to it); - [ ] TODO full stdsuite in the presence of MRCC will have a couple faults of the ""not NYI"" variety after the MRCC defaulting logic switch from Q. I haven't decided how to remedy this, but it's unlikely to be hit, so I'll defer. ## Questions; - [ ] My version of Psi4+MRCC doesn't run CC2. Anyone else see this? (Just curious, not really needed for PR.); - [ ] I don't think the original module authors will find issues, but if you want to look over pertinent docs and capabilities tables, please do so.; - [x] [ADDED from #2737 For methods (or methods in certain circumstances, say reference or conv/df) only available through an external add-on, do we want those opt-in? That is, certainly the external must be (1) installed and detectable. But do we also want to (2) require the user to set qc_module=mrcc|adcc|chemps2 ? CheMPS2 has a long history of not requiring (2). ADCC has a shorter history of being the preferred backend and automatic choice, if present. @maxscheurer prefers not requiring (2). In this PR, I just switched MRCC syntax to yes require (2). That was in keeping with the user opt-ing in via energy(""mrccsd""). I can go either way, and I guess I'm now leaning toward not requiring (2) and adjusting MRCC accordingly. But it seems like something to discuss and settle on a consistent treatment. EDIT: ok, MRCC can be a default. above section edited. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:14203,energy,energy,14203,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"nutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; NUM PRINT = 20; MAXITER",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14301,energy,energy,14301,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"nv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tS",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2076,energy,energy,2076,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['energy'],['energy']
Energy Efficiency,"ny as .3-.4 kJ/mol, depending on the dimer, which is a large percent error. One test case is summarized below:. | Program | Monomer A (H) | Monomer B (H) | Dimer AB (H)| $E_{int}$ (kcal/mol)| ; |---------|-------------|-------------|-----------|-----------|; | Psi4 | -453.84229689692728 | -453.84229689783353 | -907.68447385499462 | 0.075263339533 |; |Orca | -453.842841688023 | -453.842841698644 | -907.685688152560 | -0.002990642998 |. | Program | $E_{int}$ (kJ/mol)| Notes|; |---------|-------------| ----|; | Psi4 | 0.31490181 | |; |Orca | -0.01251285 | |; | Benchmark | -0.00315431 | Focal Point CCSD(T)/CBS with Psi4 |. I have noticed this warning in all of my Psi4 hexamine/PBEh-3c files:; `Warning: Molecule has a spherically-symmetric moment of charge but lacks icosahedral, octahedral, and tetrahedral symmetry.` . CDS figures this has something to do with the grid placement. Any ideas of how to alleviate this warning while keeping the same geometries and/or what the energy difference could be attributed to? I've tried different basis sets, different number of grid points, `symmetry c1`, `molecule.symmetrize(1e-3)`, no pruning scheme (rather than `robust`). The only time I have been able to get the warning to go away is when I use `bsse_type='cp'`, but I really shouldn't be running the calculation with cp correction because that is already included in the PBEh-3c calculation. Output files for the above example are attached, as well as a graph of Psi4 and Orca interaction energies for all dimers tested. . [Psi4-214-int.txt](https://github.com/psi4/psi4/files/9200713/Psi4-214-int.txt); [Orca-214-monA.txt](https://github.com/psi4/psi4/files/9200765/Orca-214-monA.txt); [Orca-214-monB.txt](https://github.com/psi4/psi4/files/9200766/Orca-214-monB.txt); [Orca-214-dimerAB.txt](https://github.com/psi4/psi4/files/9200767/Orca-214-dimerAB.txt). [hexamine-compare.pdf](https://github.com/psi4/psi4/files/9200777/hexamine-compare.pdf); Image of hexamine: ; ![hexamine](https://user-i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2647:1364,energy,energy,1364,https://psicode.org,https://github.com/psi4/psi4/issues/2647,1,['energy'],['energy']
Energy Efficiency,o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; Start 179: fsapt2; 301/404 Test #376: pywrap-align ..................... Passed 3.31 sec; Start 251: omp2-grad1; 302/404 Test #331: scf1 ............................. Passed 3.71 sec; Start 246: omp2-1; 303/404 Test #397: json-v11-energy .................. Passed 1.92 sec; Start 134: dfmp2-grad1; 304/404 Test #360: x2c1 ............................. Passed 6.36 sec; Start 284: props1; 305/404 Test #234: mp3-grad2 ........................ Passed 1.82 sec; Start 344: dfep2-1; 306/404 Test #186: fci-h2o-2 ........................ Passed 4.01 sec; Start 117: dfcasscf-sa-sp; 307/404 Test #251: omp2-grad1 ....................... Passed 1.70 sec; Start 225: mom; 308/404 Test #246: omp2-1 ........................... Passed 1.37 sec; Start 352: stability2; 309/404 Test #134: dfmp2-grad1 ...................... Passed 1.57 sec; Start 355: tu3-h2o-opt; 310/404 Test #217: mints6 ........................... Passed 4.88 sec; Start 377: pywrap-align-chiral; 311/404 Test #179: fsapt2 ........................... Passed 3.03 sec; Start 136: dfmp2-grad3; 312/404 Test #352: stability2 ....................... Passed 1.76 sec; Start 343: stability1; 313/404 Test #344: dfep2-1 .......................... Passed 2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:28104,energy,energy,28104,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"o I went ahead and updated all the tests to the new/current run_qcschema.; - [x] Pre-ddd, CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. With ddd, this is no longer happening, so for occasional string modelchem calcs (that is, `energy|gradient|hessian(""mtd/bas"")` only), you may need to add a clean in the input. A few test cases now sport extra cleans. Signatures of this problem are PSIO errors and, in an obscure case, CC amplitudes being all zeros when called as mtd/bas. An example is shown below, collected by modifying steps 6 & 7 of `cbs-xtpl-energy-conv` test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:4889,energy,energy,4889,https://psicode.org,https://github.com/psi4/psi4/pull/2575,4,['energy'],['energy']
Energy Efficiency,"o request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, then which code is; > supposed to be responsible for it? Leave it to the destructor?; >; > DETC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1215,energy,energy,1215,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['energy'],['energy']
Energy Efficiency,"o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: AUG-CC-PVTZ; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 55; Spherical Harmonics?: true; Max angular momentum: 3. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; Ag 11 11 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 2 2 0 0 0 0; B1u 8 8 0 0 0 0; B2u 8 8 0 0 0 0; B3u 8 8 0 0 0 0; ```. ---. ```; Total 46 46 5 5 5 0; ```. ---. Starting with a DF guess... OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 12; Integrals threads: 12; Memory (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:3583,Charge,Charge,3583,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Charge'],['Charge']
Energy Efficiency,"oElectronInt const&) (eri.h:255); ==2802== by 0x1CC3A0EE: Libint2ErfERI (eri.h:300); ==2802== by 0x1CC3A0EE: psi::Libint2ErfERI::clone() const (eri.h:305); ==2802== by 0x1C740620: psi::DFHelper::prepare_AO_wK_core() (dfhelper.cc:571); ==2802== by 0xD265ED2: __kmp_invoke_microtask (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD228725: __kmp_invoke_task_func (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD22771B: __kmp_launch_thread (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0xD26630A: _INTERNAL_26_______src_z_Linux_util_cpp_20354e55::__kmp_launch_worker(void*) (in /u/andysim/anaconda3/envs/psi4dev/lib/libiomp5.so); ==2802== by 0x4E3EEA4: start_thread (in /usr/lib64/libpthread-2.17.so); ==2802== by 0x51519FC: clone (in /usr/lib64/libc-2.17.so); ==2802== Address 0x2866b120 is 0 bytes after a block of size 73,440 alloc'd; ==2802== at 0x4C2A593: operator new(unsigned long) (vg_replace_malloc.c:344); ==2802== by 0x1CA85F62: allocate (new_allocator.h:104); ==2802== by 0x1CA85F62: allocate (alloc_traits.h:491); ==2802== by 0x1CA85F62: _M_allocate (stl_vector.h:170); ==2802== by 0x1CA85F62: _M_fill_insert (vector.tcc:491); ==2802== by 0x1CA85F62: std::vector<long, std::allocator<long> >::insert(__gnu_cxx::__normal_iterator<long const*, std::vector<long, std::allocator<long> > >, unsigned long, long const&) (stl_vector.h:1054); ==2802== by 0x1CA7E37F: resize (stl_vector.h:696); ==2802== by 0x1CA7E37F: psi::TwoBodyAOInt::create_sieve_pair_info(std::shared_ptr<psi::BasisSet>, std::vector<std::pair<int, int>, std::allocator<std::pair<int, int> > >&, bool) (twobody.cc:244); ```; This is a harmless copy construction of a vector that is well defined. I tried to remove the AVX2 code path using the [MKL options](https://software.intel.com/content/www/us/en/develop/documentation/onemkl-developer-reference-c/top/support-functions/miscellaneous/mkl-enable-instructions.html) but the problem persisted. Finding an old ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207:2746,allocate,allocate,2746,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-904787207,1,['allocate'],['allocate']
Energy Efficiency,"ock to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:21687,energy,energy,21687,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"od, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicate code. added HF Hessian testing, through DF can't be uncommented until refs released in qcng.; - [x] the addition of ccsd iterations qcvar to dfocc could maybe be reverted. ## Questions; - [x] Any critical eye or indep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6835,ENERGY,ENERGY,6835,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"ode can't determine what irrep; >> your target wavefunction is supposed to be, because you haven't given it; >> information about the orbital occupancy of the reference HF wavefunction.; >> I think if you specified docc [] and socc [] arrays for the reference; >> high-spin triplet, the code would have a much better chance to figure out; >> what you want.; >>; >> On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; >> wrote:; >>; >>> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >>> small CASSCF calculations. However, I can't get DETCI to run the; >>> calculations for me.; >>>; >>> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >>> shell. DETCI correctly determines that there is 1 alpha string (since the; >>> shell is fully occupied) and 3 beta strings, but then it says that the CI; >>> space only has a single determinant and crashes.; >>>; >>> Example inputs; >>>; >>> molecule {; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >>> set active [0, 0, 0, 0, 0, 1, 1, 1]; >>> energy('casscf'); >>>; >>> or a lower symmetry; >>>; >>> molecule {; >>> symmetry c2h; >>> 0 3; >>> O; >>> }; >>>; >>> set basis cc-pVDZ; >>> set reference rohf; >>> set restricted_docc [2, 0, 0, 0]; >>> set active [0, 0, 1, 2]; >>> energy('casscf'); >>>; >>> I guess the problem is that DETCI can't find a proper symmetry? Is there; >>> a way to circumvent this issue? @CDSherrill; >>> <https://github.com/CDSherrill> ?; >>>; >>> —; >>> You are receiving this because you were mentioned.; >>> Reply to this email directly, view it on GitHub; >>> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >>> or unsubscribe; >>> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >>> .; >>>; >>",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043:2796,energy,energy,2796,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572253043,2,['energy'],['energy']
Energy Efficiency,"of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or releva",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:981,energy,energy,981,https://psicode.org,https://github.com/psi4/psi4/pull/2132,2,['energy'],['energy']
Energy Efficiency,"of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns. * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1196,ENERGY,ENERGY,1196,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbitals have the same spin. Meanwhile, the DFT V terms are second derivatives of the DFT energy with respect to orbital rotation generators. These are not spin-free.; 3. Now let's combine the two above facts. After performing the spin-integration in the triplet case, you end up with [(α|α) - (α|β) - (β|α) + (β|β)]. Upon exploiting spin-restriction, this reduces to [(α|α) - (α|β)]. For J, the second term is equal to the first, so the two cancel. For K, the second term is zero, so you have the first integral. For V, the two terms are neither equal nor zero. The V term cannot be neglected, even though it's normally added to the J term, which here is zero. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] V is still bundled with J, but the RSCF products now mark that they may need to get a J-like term. This is no longer equivalent to being singlet or not.; - [x] Several methods have be",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:2087,energy,energy,2087,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['energy'],['energy']
Energy Efficiency,"oh, just encountered this for ethene. here is a test case. 2 different irreps not always fail. ; ```; molecule wat {; C 0.6669000000 0.0000000000 0.0000000000; C -0.6669000000 0.0000000000 0.0000000000; H 1.2295200000 0.9222900000 0.0000000000; H -1.2295200000 0.9222900000 0.0000000000; H 1.2295200000 -0.9222900000 0.0000000000; H -1.2295200000 -0.9222900000 0.0000000000; }. set {; basis 3-21G; freeze_core true; roots_per_irrep [0,1,0,0,0,0,0,1] # <-- fails; roots_per_irrep [0,1,0,0,0,1,0,0] # <-- works (?); }; energy('eom-cc3'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/502#issuecomment-437531306:517,energy,energy,517,https://psicode.org,https://github.com/psi4/psi4/issues/502#issuecomment-437531306,1,['energy'],['energy']
Energy Efficiency,"ollected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2170,ENERGY,ENERGY,2170,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ollowing input:; ```; molecule benzene {; C 0.710500000000 0.000000000000 -1.230622098778; C 1.421000000000 0.000000000000 0.000000000000; C 0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 1.230622098778; C -0.710500000000 0.000000000000 -1.230622098778; C -1.421000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 -2.172857738095; H -1.254500000000 0.000000000000 2.172857738095; H 2.509000000000 0.000000000000 0.000000000000; H 1.254500000000 0.000000000000 2.172857738095; H -1.254500000000 0.000000000000 -2.172857738095; H -2.509000000000 0.000000000000 0.000000000000; }. set basis sto-3g. energy('cisd', molecule=benzene); ```; Psi4 returned the following error:; ```; Traceback (most recent call last):; File ""/usr/local/psi4/bin/psi4"", line 248, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/usr/local/psi4/lib/psi4/driver/driver.py"", line 460, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 949, in select_cisd; return func(name, **kwargs); File ""/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 4238, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn). RuntimeError: ; Fatal Error: ndocc must be less than nvirt; Error occurred in file: /home/shouck/psi4/psi4/src/psi4/fnocc/ccsd.cc on line: 142; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::fnocc::CoupledCluster::common_init(); psi::fnocc::CoupledCluster::CoupledCluster(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::CoupledPair::CoupledPair(std::shared_ptr<psi::Wavefunction>, psi::Options&); psi::fnocc::fnocc(std::shared_ptr<psi::Wavefunction>, psi::Options&); ```; The CISDT and CISDTQ methods run with no problems, so it seems like the issue is just in the CISD method. The exception appea",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828:1117,energy,energy,1117,https://psicode.org,https://github.com/psi4/psi4/issues/828,2,['energy'],['energy']
Energy Efficiency,"olved for CASSCF calculations, as I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); Fi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1120,energy,energy,1120,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"om/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_summary.rst); - [x] an all-methods, one row per module per method table for the ""Alternate Implementations"" page: [details](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_details.rst) now contains info on all stdsuite-tested methods, not just those implemented in more than one module; - [x] various tables of specific-module-methods, one row per method for the individual module pages:; - [x] [ccenergy](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_ccenergy.rst) pre-approved by TDC in #2708 ; - [x] [fnocc](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_fnocc.rst) this replaces a hand-generated table, but a broader hand-generated table is also present for (1) method names and (2) FNO functionality (not yet covered by stdsuite). the fnocc table is energy (E) only, whereas most are E/G; - [x] [scf](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_scf.rst) the only E/G/H table. this includes HF and some representative DFTs: LSDA, GGA, Hybrid, LRC, DH; - [x] [occ_nonoo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_nonoo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names and (2) in anticipation of FNO.; - [x] [occ_oo](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_occ_oo.rst) replaces a hand-generated table, but a broader hand-gen table is also present for (1) method names. closes #1863 ; - [x] [dfmp2](https://raw.githubusercontent.com/loriab/psi4/captab_rb2/doc/sphinxman/source/preview_capabilities_dfmp2.rst) pretty simple, so why not; - [x] Other changes to docs contents:; - [x] instead of detailed capabilities getting lost under notes in the ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:3285,energy,energy,3285,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,"omposite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is ex",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2060,energy,energy,2060,https://psicode.org,https://github.com/psi4/psi4/pull/1351,2,['energy'],['energy']
Energy Efficiency,"oms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBR",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2075,energy,energy,2075,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['energy'],['energy']
Energy Efficiency,"on 7 energy: -320.87958210143461 -0.00000648582829 0.00000325221580; @Atomic UHF Final Energy for atom XE: -320.87958210143461; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -324.53314738271274 -3.24533e+02 0.00000e+00 ; @DF-RHF iter 1: -328.19660724674617 -3.66346e+00 2.76741e-02 DIIS; @DF-RHF iter 2: -328.28542700545580 -8.88198e-02 1.26940e-02 DIIS; @DF-RHF iter 3: -328.29832629846925 -1.28993e-02 5.50180e-04 DIIS; @DF-RHF iter 4: -328.29835689704061 -3.05986e-05 4.43928e-05 DIIS; @DF-RHF iter 5: -328.29835733022713 -4.33187e-07 3.97861e-06 DIIS; @DF-RHF iter 6: -328.29835733491979 -4.69265e-09 2.37557e-07 DIIS; Energy converged.; ```; Works as well as in UGBS; ```; Initial Atomic UHF Energy: -5427.3786402080. Total Energy Delta E Density RMS. @Atomic UHF iteration 1 energy: -6483.96999842770038 -1056.59135821971540 1.04255411296391; @Atomic UHF iteration 2 energy: -6453.45541954978944 30.51457887791094 0.40784617759788; @Atomic UHF iteration 3 energy: -7117.90198205644811 -664.44656250665867 0.36315248442566; @Atomic UHF iteration 4 energy: -7267.18887860081304 -149.28689654436494 0.12758818454125; @Atomic UHF iteration 5 energy: -7299.46498016141504 -32.27610156060200 0.01509870939289; @Atomic UHF iteration 6 energy: -7299.96418197356979 -0.49920181215475 0.00107318606111; @Atomic UHF iteration 7 energy: -7299.97095115772936 -0.00676918415957 0.00050931817172; @Atomic UHF iteration 8 energy: -7299.97187492498688 -0.00092376725752 0.00008205774167; @Atomic UHF iteration 9 energy: -7299.97190856036286 -0.00003363537598 0.00000350327835; @Atomic UHF iteration 10 energy: -7299.97190876705281 -0.00000020668995 0.00000049737307; @Atomic UHF Final Energy for atom XE: -7299.97190876705281; Finished UHF Computation!. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -7255.00101065488798 -7.25500e+03 0.00000e+00 ; @DF-RHF iter 1: -7259.15010997926129 -4.14910e+00 1.35868e-02 DIIS; @DF-RHF iter 2: -725",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590:1765,energy,energy,1765,https://psicode.org,https://github.com/psi4/psi4/pull/1458#issuecomment-454279590,1,['energy'],['energy']
Energy Efficiency,"on(""DFT_OMEGA"", 0.6); func_call = energy('SCF', dft_functional=""wPBE""). !----------------------------------------------------------------------------------!; ! !; ! wPBE0 omega=0.4: computed value (-79.03914662) does not match !; ! (-75.27504649) to atol=1e-06 by difference (-3.76410013). !; ! !; !----------------------------------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 16.57 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom"" end time: Jan 05 15:36 EST; ""dft-custom"" time elapsed: 00:00:16; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""ne""); core.set_global_option(""DFT_SPHERICAL_POINTS"", 770); core.set_global_option(""D_CONVERGENCE"", 1e-5); core.set_global_option(""BASIS"", ""cc-pvdz""); activate(ne); --> edft = energy(""ft97""); compare_values(-128.850056371480, edft, 4, ""Ne: FT97""). !-------------------------------------------------------!; ! !; ! Could not converge SCF iterations in 100 iterations. !; ! !; !-------------------------------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.81 sec; ----------------------------------------------------------; Test Failed.; ""dft-custom-gga"" end time: Jan 05 15:36 EST; ""dft-custom-gga"" time elapsed: 00:00:29; ----------------------------------------------------------; ```. ```; Printing out the relevant lines from the Psithon --> Python processed input file:; anl_grad = gradient('scf', dft_functional=func, dertype=1); compare_matrices(func_uks_reference, anl_grad, 6, ""Analytic vs Reference CAM-like UKS Gradients""); compare_matrices(anl_grad, fd_grad, 6, ""Analytic vs FD CAM UKS Gradients""); anl_grad = gradient('scf', dft_functional=""CAM-B3LYP"", dertyp",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620:1765,energy,energy,1765,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754900620,1,['energy'],['energy']
Energy Efficiency,"on) Hamiltonian. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RKS iter 1: -123.05635077157466 -1.23056e+02 5.15651e-01; @RKS iter 2: -123.10132047688978 -4.49697e-02 6.79382e-01 DIIS; @RKS iter 3: -128.77814169956412 -5.67682e+00 1.11592e-01 DIIS; @RKS iter 4: -128.89363525981292 -1.15494e-01 1.11421e-02 DIIS; @RKS iter 5: -128.89481463928649 -1.17938e-03 2.07054e-03 DIIS; @RKS iter 6: -128.89485608871536 -4.14494e-05 8.00321e-05 DIIS; @RKS iter 7: -128.89485614958289 -6.08675e-08 1.05214e-05 DIIS; @RKS iter 8: -128.89485615065263 -1.06974e-09 2.89771e-07 DIIS. ==> Post-Iterations <==. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1Ag -30.509932 2Ag -1.282862 1B3u -0.438441; 1B2u -0.438441 1B1u -0.438441. Virtual:. 2B3u 1.301627 2B2u 1.301627 2B1u 1.301627; 3Ag 1.757418 1B1g 4.636294 1B2g 4.636294; 1B3g 4.636294 4Ag 4.636294 5Ag 4.636294. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]. Energy converged. @RKS Final Energy: -128.89485615065263. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -182.5988982401030682; Two-Electron Energy = 66.2281289694592061; DFT Exchange-Correlation Energy = -12.5240868800087686; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -128.8948561506526289. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. *** tstop() called on scychon-OptiPlex-7010 at Wed Jun 13 11:12:28 2018; Module time:; user time = 0.92 seconds = 0.02 minutes; system time = 0.02 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 1.84 seconds = 0.03 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:12286,Energy,Energy,12286,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"on, why the job fails? What can I do to make it work?. Thank you in advance. Best regards,; Michael Medvedev. ---. The full output:; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 (no tag) Driver. ```; Git: Rev {(no tag)}. J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; M. L. Abrams, N. J. Russ, M. L. Leininger, C. L. Janssen, E. T. Seidl,; W. D. Allen, H. F. Schaefer, R. A. King, E. F. Valeev, C. D. Sherrill,; and T. D. Crawford, WIREs Comput. Mol. Sci. 2, 556-565 (2012); (doi: 10.1002/wcms.93). Additional Contributions by; A. E. DePrince, M. Saitow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett;",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:2013,Energy,Energy,2013,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,on-vibanalysis ............... Passed 1285.91 sec; Start 24: cc13; 13/411 Test #227: mp2-def2 ......................... Passed 371.74 sec; Start 31: cc16; 14/411 Test #29: cc14 ............................. Passed 619.00 sec; Start 28: cc13d; 15/411 Test #145: dfomp2-grad3 ..................... Passed 1456.77 sec; Start 182: isapt1; 16/411 Test #304: pywrap-checkrun-rhf .............. Passed 1461.98 sec; Start 11: cbs-delta-energy; 17/411 Test #111: dcft5 ............................ Passed 505.16 sec; Start 44: cc29; 18/411 Test #306: pywrap-checkrun-uhf .............. Passed 1485.55 sec; Start 47: cc31; 19/411 Test #103: dcft-grad1 ....................... Passed 1518.99 sec; Start 112: dcft6; 20/411 Test #300: pywrap-all ....................... Passed 1524.14 sec; Start 18: cbs-xtpl-func; 21/411 Test #13: cbs-xtpl-alpha ................... Passed 526.82 sec; Start 181: fsapt-allterms; 22/411 Test #114: dcft8 ............................ Passed 687.39 sec; Start 193: fd-freq-energy-large; 23/411 Test #240: ocepa-freq1 ...................... Passed 852.90 sec; Start 195: fd-freq-gradient-large; 24/411 Test #45: cc3 .............................. Passed 1687.06 sec; Start 278: opt13; 25/411 Test #110: dcft4 ............................ Passed 1692.73 sec; Start 91: cepa-module; 26/411 Test #31: cc16 ............................. Passed 395.40 sec; Start 281: opt-irc-2; 27/411 Test #44: cc29 ............................. Passed 233.84 sec; Start 359: tu6-cp-ne2; 28/411 Test #47: cc31 ............................. Passed 213.17 sec; Start 27: cc13c; 29/411 Test #112: dcft6 ............................ Passed 207.94 sec; Start 70: cc52; 30/411 Test #24: cc13 ............................. Passed 461.26 sec; Start 58: cc41; 31/411 Test #28: cc13d ............................ Passed 324.06 sec; Start 104: dcft-grad2; 32/411 Test #182: isapt1 ........................... Passed 402.87 sec; Start 373: dft-custom-mgga; 33/411 Test #11: cbs-delta-energy ................. Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:2477,energy,energy-large,2477,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy-large']
Energy Efficiency,"on_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1871,charge,charge,1871,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,"ond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_en",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1988,Energy,Energy,1988,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['Energy'],['Energy']
Energy Efficiency,"onda3\envs\qiskit-0-27-psi4-jupyter\python38.zip','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\DLLs','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter','','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\win32','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\win32\lib','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\Pythonwin','C:\Users\poc\Anaconda3\envs\qiskit-0-27-psi4-jupyter\lib\site-packages\IPython\extensions','C:\Users\poc\.ipython'] + sys.path; from qiskit_nature.drivers.qmolecule import QMolecule; _q_molecule = QMolecule(""C:\Users\poc\AppData\Local\Temp\tmpa8t4a3xf.hdf5""); import numpy; core.get_active_molecule().fix_com(True); core.get_active_molecule().fix_orientation(True); core.get_active_molecule().reset_point_group('c1'); _q_hf_energy, _q_hf_wavefn = energy('scf', return_wfn=True); _q_mints = MintsHelper(_q_hf_wavefn.basisset()); _q_mol = _q_hf_wavefn.molecule(); _has_B = not _q_hf_wavefn.same_a_b_orbs(); _q_molecule.origin_driver_version = psi4.__version__; _q_molecule.hf_energy = _q_hf_energy; _q_molecule.nuclear_repulsion_energy = _q_mol.nuclear_repulsion_energy(); _q_molecule.num_molecular_orbitals = _q_hf_wavefn.nmo(); _q_molecule.num_alpha = _q_hf_wavefn.nalpha(); _q_molecule.num_beta = _q_hf_wavefn.nbeta(); _q_molecule.mo_coeff = numpy.asarray(_q_hf_wavefn.Ca()); _q_molecule.mo_coeff_b = numpy.asarray(_q_hf_wavefn.Cb()) if _has_B else None; _q_molecule.orbital_energies = numpy.asarray(_q_hf_wavefn.epsilon_a()); _q_molecule.orbital_energies_b = numpy.asarray(_q_hf_wavefn.epsilon_b()) if _has_B else None; _q_molecule.molecular_charge = _q_mol.molecular_charge(); _q_molecule.multiplicity = _q_mol.multiplicity(); _q_molecule.num_atoms = _q_mol.natom(); _q_molecule.atom_symbol = []; _q_molecule.atom_xyz = numpy.empty([_q_mol.natom(), 3]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922:7870,energy,energy,7870,https://psicode.org,https://github.com/psi4/psi4/issues/2228#issuecomment-872891922,1,['energy'],['energy']
Energy Efficiency,"ons <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 11 11 0 0 0 0; -------------------------------------------------------; Total 11 11 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 732; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 23; Number of basis function: 80; Number of Cartesian functions: 80; Spherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF iter 7: -0.49762403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:3679,Energy,Energy,3679,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,ons.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz] xfail [ 80%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz] xfail [ 83%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz] xfail [ 86%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-RPA-cc-pvdz] PASSED [ 90%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-1-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kern,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:5999,Adapt,Adapted,5999,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Energy Efficiency,"ons@github.com wrote:. > Hello,; > One of our users hit a problem last year on our supercomputer with his; > SAPT (energy('sapt2+3-ct')) jobs. Our sysadmins flagged low cpu utilisation; > for his jobs for which we decided that 4 cpus would give him optimum; > efficiency. However, the jobs were large enough as to take > 1000 hours; > (also frowned upon by our sysadmins) so I was asked to look into whether he; > could make better parallel use of the processors. We had some teething; > problems bringing our new supercomputer on line last year so I wanted to; > rule out issues on our side and I think I have now ruled out issues with; > IO, memory and threading (that had affected other programs).; > Furthermore, during the investigations we noticed that ""top"" showed an; > almost equal alternation between one cpu and maximum cpus thus averaging; > above/below 50% use no matter how many cpus were requested. Roger Amos and; > I had a quick look at the SAPT papers and decided there wasn't anything; > intrinsic about the method that wouldn't allow it to parallel or would; > cause this behaviour (note I initially thought it might be a load imbalance; > between monomer basis and dimer basis calculations but it isn't). Also,; > subsequently we were asked to look into the performance of; > energy('fno-df-ccsd(t)') and that doesn't show this serial/parallel; > alternation.; > Do you have any thoughts on this and have suggestions for determining; > optimum number of processors (does it depend on memory?) for this sort of; > calculation?; > Thanks.; > Rika; > PS Do you need an input deck for this? Originally, the smallest case he; > had showing this behaviour took 230 hrs (seemed to be ok for his 60 hr SAPT; > job) but since then I think I have a 48 hr test case that will also display; > this behaviour. I'll need to ask the user for permission to pass it on; > first though.; > ; > —; > Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/57; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/57#issuecomment-41629946:2145,energy,energy,2145,https://psicode.org,https://github.com/psi4/psi4/issues/57#issuecomment-41629946,1,['energy'],['energy']
Energy Efficiency,"ooks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_r",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1718,Energy,Energy,1718,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.57",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1199,energy,energy,1199,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"opy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------; -D correction from Py-side. Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ____________________________________________________ test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:11650,energy,energy,11650,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"or Specific Modules; https://github.com/psi4/psi4/blob/master/codemeta.json; https://github.com/psi4/psi4/graphs/contributors; http://psicode.org/psi4manual/master/introduction.html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Tuesday, 26 September 2023 11:04AM. Process ID: 419; Host: ...; PSIDATADIR: ...; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; set {; freeze_core true; basis def2-tzvppd; guess sad; }; molecule mol {; -1 1; @O -2.9015 2.0339 4.0653; @H -3.02228 2.5785 4.8759; @H -2.16632 1.41862 4.28713; O 0.0 0.0 0.0; C -0.67479 0.41341 -1.01466; O -0.87615 -0.42222 -1.96207; C -1.21823 1.79557 -1.10284; C -0.61745 2.829 -0.07843; H -1.1042 2.21706 -2.12009; H -2.30161 1.7313 -0.88466; H 0.4692 2.99187 -0.17478; H -0.84409 2.57987 0.97189; H -1.13803 3.76616 -0.33793; units angstrom; no_reorient; no_com; symmetry c1; }; energy('wb97m-v'); --------------------------------------------------------------------------. Scratch directory: /tmp/. *** tstart() called on ...; *** at Tue Sep 26 11:04:21 2023. => Loading Basis Set <=. Name: DEF2-TZVPPD; Role: ORBITAL; Keyword: BASIS; atoms 1, 4, 6 entry O line 218 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 2-3, 9-13 entry H line 14 file .../share/psi4/basis/def2-tzvppd.gbs ; atoms 5, 7-8 entry C line 144 file .../share/psi4/basis/def2-tzvppd.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C1. Geometry (in Angstrom), charge = -1, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; Gh(O) -2.901500000000 2.033900000000 4.065300000000 15.994914619570; Gh(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:2904,energy,energy,2904,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['energy'],['energy']
Energy Efficiency,"or with this set up : ; set roots_per_irrep [0,2,0,0,0,0,0,0]. The following result is obtained : . Iter=23 L=18 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016057 2.09e-08 3.54e-05 N; 2 0.3285655293 -3.33e-16 6.43e-07 Y; Iter=24 L=19 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016099 4.24e-09 2.38e-05 N; 2 0.3285655293 5.00e-16 6.43e-07 Y; Iter=25 L=20 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016127 2.80e-09 1.56e-05 N; 2 0.3285655293 -3.89e-16 6.43e-07 Y; Iter=26 L=21 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016234 1.06e-08 9.79e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=27 L=22 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016107 -1.26e-08 5.76e-06 N; 2 0.3285655293 2.78e-16 6.43e-07 Y; Iter=28 L=23 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016097 -1.01e-09 3.48e-06 N; 2 0.3285655293 -1.11e-16 6.43e-07 Y; Iter=29 L=24 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 2.73e-09 3.28e-06 N; 2 0.3285655293 -5.55e-17 6.43e-07 Y; Iter=30 L=4 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016125 8.40e-14 3.28e-06 N; 2 0.3285655291 -2.62e-10 9.81e-06 N; Iter=31 L=6 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243015959 -1.66e-08 3.58e-06 N; 2 0.3285655309 1.79e-09 9.85e-06 N; Iter=32 L=8 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016034 7.49e-09 2.77e-06 N; 2 0.3285655292 -1.67e-09 8.87e-06 N; Iter=33 L=10 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016058 2.42e-09 1.52e-06 N; 2 0.3285655299 6.91e-10 7.75e-06 N; Iter=34 L=12 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016030 -2.78e-09 9.27e-07 Y; 2 0.3285655320 2.15e-09 6.23e-06 N; Iter=35 L=13 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016033 2.53e-10 9.26e-07 Y; 2 0.3285655298 -2.26e-09 4.11e-06 N; Iter=36 L=14 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016026 -6.98e-10 9.41e-07 Y; 2 0.3285655295 -2.30e-10 3.70e-06 N; Iter=37 L=15 Root EOM Energy Delta E Res. Norm Conv?; 1 0.3243016027 1.05e-10 9.64e-07 Y; 2 0.3285655298 2.71e-10 3.50e-06 N; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/603#issuecomment-279097344:122,Energy,Energy,122,https://psicode.org,https://github.com/psi4/psi4/issues/603#issuecomment-279097344,7,['Energy'],['Energy']
Energy Efficiency,orb-rot; 380/411 Test #305: pywrap-checkrun-rohf ............. Passed 589.53 sec; Start 387: python-energy; 381/411 Test #387: python-energy .................... Passed 0.86 sec; Start 388: python-curve; 382/411 Test #388: python-curve ..................... Passed 4.75 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 240.77 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.89 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.96 sec; Start 392: python-cc54; 386/411 Test #389: python-pubchem ................... Passed 50.14 sec; Start 393: python-3-index-transforms; 387/411 Test #373: dft-custom-mgga .................. Passed 175.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.81 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.53 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 10.54 sec; Start 399: json-schema-1-energy; 392/411 Test #398: json-v11-gradient ................ Passed 2.05 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.58 sec; Start 401: json-schema-1-orient; 394/411 Test #399: json-schema-1-energy ............. Passed 4.08 sec; Start 402: json-schema-1-throws; 395/411 Test #401: json-schema-1-orient ............. Passed 2.72 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.76 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.78 sec; Start 406: skeletonaointegrals; 399/411 Test #392: python-cc54 ...................... Passed 25.14 sec; St,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:36396,energy,energy,36396,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['energy'],['energy']
Energy Efficiency,"orbitals; 'active': [0, 0, 2, 0], # Active orbitals; 'MCSCF_MAXITER': 100; }). # Set memory; psi4.set_memory('8000 MB'). # Define CF molecule geometry template; cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". # Define R values for scanning; a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-pac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1369,ENERGY,ENERGY,1369,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['ENERGY'],['ENERGY']
Energy Efficiency,"orl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta1 ccsd(t) / heavy-aug-cc-pv(d+d)z 1 -150.02005663 xtpl_highest_1; delta1 mp2 / heavy-aug-cc-pv(d+d)z -1 -150.01871638 xtpl_highest_1; ---------------------------------------------------------------------------------------------------------. ==> CBS <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:2858,energy,energy,2858,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['energy'],['energy']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:2232,Energy,Energy,2232,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020681 -0.000351118013; @IRC 2 -148.751921813016 -0.001007792335; @IRC 3 -148.753458618767 -0.001536805751; @IRC 4 -148.755338546974 -0.001879928208; @IRC 5 -148.757353153593 -0.002014606618; @IRC 6 -148.759306859284 -0.001953705691; @IRC 7 -148.761045994957 -0.001739135673; @IRC 8 -148.762474848905 -0.001428853949; @IRC 9 -148.763557315936 -0.001082467031; @IRC 10 -148.764306952814 -0.000749636878; @IRC 11 -148.764771570110 -0.000464617296; @IRC 12 -148.765017199687 -0.000245629578; @IRC 13 -148.765113811009 -0.000096611321; @IRC 14 -148.765124130941 -0.000010319932; @IRC 15 -148.765124130672 0.000000000269; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in En,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:3186,Energy,Energy,3186,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,ort ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020851 -0.000351118183; @IRC 2 -148.751921813112 -0.001007792261; @IRC 3 -148.753458618899 -0.001536805787; @IRC 4 -148.755338547024 -0.001879928125; @IRC 5 -148.757353153707 -0.002014606684; @IRC 6 -148.759306859301 -0.001953705594; @IRC 7 -148.761045995024 -0.001739135723; @IRC 8 -148.762474848946 -0.001428853922; @IRC 9 -148.763557315982 -0.001082467035; @IRC 10 -148.764306952597 -0.000749636616; @IRC 11 -148.764771570120 -0.000464617522; @IRC 12 -148.765017199697 -0.000245629578; @IRC 13 -148.765113810944 -0.000096611247; @IRC 14 -148.765124130978 -0.000010320034; @IRC 15 -148.764729734758 0.000394396220; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020605 -0.000351117937; @IRC 2 -148.751921813098 -0.001007792493; @IRC 3 -148.753458618748 -0.001536805651; @IRC 4 -148.755338547153 -0.001879928405; @IRC 5 -148.757353153742 -0.002014606589; @IRC 6 -148.759306859354 -0.001953705612; @IRC 7 -148.761045994942 -0.001739135587; @IRC 8 -148.762474848816 -0.001428853874; @IRC 9 -148.763557315945 -0.001082467129; @IRC 10 -148.764306952816 -0.000749636871; @IRC 11 -148.764771569962 -0.000464617146; @IRC 12 -148.765017199740 -0.000245629777; @IRC 13 -148.765113810834 -0.000096611095; @IRC 14 -148.765124130995 -0.000010320161; @IRC 15 -148.764489218884 0.000634912111; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Ene,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:1278,Energy,Energy,1278,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,"ort dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), the pairwise dispersion analysis returned by executable/classic/psi4-channel `dftd3` was scaled differently from that by `s-dftd3` and `dftd4` (any channel). This has been fixed. However, one must be consistent about QCEngine/Psi4/fsapt.py versions. A consistent set are QCEngine >=0.26.0 and `Empirical_Disp.dat` file generated in the course of `energy(""fisapt0-d"")` by this PR or later Psi4 (approx. v1.7.0 Psi4) and script `fsapt.py` released with Psi4 v1.7.0 or later. This is semi-enforced since v1.7 requires v0.26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:1842,energy,energy,1842,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['energy'],['energy']
Energy Efficiency,"orted during the DFT calculation with dispersion correction and crashes Psi4 if `pytest` is missing. It can be fixed simply by installing the missing module, but I thought that it's worth reporting still in order to patch the packaging. Psi4: v.1.8 from `conda-forge` (installed in a clean env using ` conda install psi4 python=3.10 -c conda-forge/label/libint_dev -c conda-forge `). Code to reproduce:. ```python; molecule {; 0 1; O 0.0 0.5 0.0; H 0.5 0.0 0.0; H -0.5 0.0 0.0. no_reorient; symmetry c1; }. memory 8GB; set_num_threads(2); set freeze_core True. E, wfn = energy('wb97x-d/6-311g**',return_wfn=True); ```. Fails with the following error:. ```; Traceback (most recent call last):; File ""/home/q-posev/miniconda3/envs/psi4-v18/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2574, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1430, in scf_wavefunction_factory; superfunc, _disp_functor = build_functional_and_disp(name, restricted=(reference in [""RKS"", ""RHF""]), **kwargs); File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 1407, in build_functional_and_disp; _disp_functor = empirical_dispersion.EmpiricalDispersion(name_hint=superfunc.name(),; File ""/home/q-posev/miniconda3/envs/psi4-v18/lib/python3.10/sit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3003:979,energy,energy,979,https://psicode.org,https://github.com/psi4/psi4/issues/3003,2,['energy'],['energy']
Energy Efficiency,"oth `frequency()` and `hessian()`. I chose the hessian last night because of this:. https://psicode.org/psi4manual/master/api/psi4.driver.qcdb.vib.harmonic_analysis.html#psi4.driver.qcdb.vib.harmonic_analysis. https://psicode.org/psi4manual/master/freq.html. Where the harmonic analysis is documented showing the IR intensities. The first parameter was a hessian matrix so I went back to go look at how to produce that. Maybe I went down a different rabbit hole. . https://github.com/psi4/psi4/blob/821134f62396ba27f9bcb8fbfa93ea2c370b7616/tests/pytests/test_vibanalysis.py. Line 17-40 I kind of copied your guys test to get the code running. I was actually confused with dipole derivatives and how to produce them and pass them in appropriately. . Ah okay! the frequency has it built in and I can see it. I got confused on the docs. . ```python; theory = 'hf/6-31g*'; ; energy, wave_function = psi4.optimize(; theory,; return_wfn = 'yes',; molecule=universe; ). frequencies = psi4.frequencies(; theory,; ref_gradient=wave_function.gradient(),; molecule=universe. ); ```. Ouput:. ```python; Freq [cm^-1] 1557.5017 4053.2831 4197.9898 ; Irrep A1 A1 B2 ; Reduced mass [u] 1.0830 1.0449 1.0829 ; Force const [mDyne/A] 1.5478 10.1143 11.2435 ; Turning point v=0 [a0] 0.2672 0.1686 0.1627 ; RMS dev v=0 [a0 u^1/2] 0.1966 0.1219 0.1198 ; IR activ [km/mol] 92.6794 13.8599 85.5429 ; Char temp [K] 2240.8982 5831.7720 6039.9727 ; ----------------------------------------------------------------------------------; 1 O 0.00 -0.00 -0.07 0.00 -0.00 0.05 0.00 -0.07 -0.00 ; 2 H -0.00 0.43 0.56 0.00 0.59 -0.39 0.00 0.56 -0.43 ; 3 H 0.00 -0.43 0.56 0.00 -0.59 -0.39 0.00 0.56 0.43 ; ```. So I want to make sure I understand this correctly, the IR active means it is my epsilon in beer-lambert's law and all I would need to do to get absorbance is times it by the path length of my cell, and the concentration of my sample. And then calculate transmittance from how much was absorbed to how much light was emitted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808:1466,Reduce,Reduced,1466,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1227099808,1,['Reduce'],['Reduced']
Energy Efficiency,"out the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1648,ENERGY,ENERGY,1648,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"outing/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4156, in run_cepa; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - MP3/cc-pVDZ & MP4/cc-pVDZ: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; occ_wfn = core.occ(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - CISD/cc-pVDZ via DETCI: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:10829,energy,energy,10829,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"overlap matrix is 4.2926659058E-03.; Reciprocal condition number of the overlap matrix is 5.8671564054E-04.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo; -------------------------; A 60 60; -------------------------; Total 60 60; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -78.86898106418064 -7.88690e+01 0.00000e+00; @DF-RKS iter 1: -78.88636762953359 -1.73866e-02 1.49756e-02 DIIS; @DF-RKS iter 2: -78.27124917688414 6.15118e-01 2.18391e-02 DIIS; @DF-RKS iter 3: -79.32381221986704 -1.05256e+00 1.08985e-03 DIIS; @DF-RKS iter 4: -79.32638959495554 -2.57738e-03 2.16014e-04 DIIS; @DF-RKS iter 5: -79.32647363265359 -8.40377e-05 3.30059e-05 DIIS; @DF-RKS iter 6: -79.32647565598309 -2.02333e-06 1.23652e-06 DIIS; @DF-RKS iter 7: -79.32647565991985 -3.93676e-09 7.27369e-08 DIIS; Energy and wave function converged. ==> Post-Iterations <==. Electrons on quadrature grid:; Ntotal = 18.0000006848 ; deviation = 6.848e-07. Orbital Energies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.2642",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:7365,Energy,Energy,7365,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"ow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git repository has accumulated many large files (mostly boost binaries) that are not currently used; however, they still exists within the repository and are downloaded every time the repository is cloned. This has caused Psi4 to balloon to approximately 650MB, while only about 65MB of that is currently used. In order to reduce the repository size, these files will be removed from history. When this occurs **_all_** current Psi4 clones **_and_** forks will become invalid. These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:2644,Schedul,Schedule,2644,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['Schedul'],['Schedule']
Energy Efficiency,"ow, U. Bozkaya, A. Yu. Sokolov; -----------------------------------------------------------------------. Psi4 started on: Fri Jan 8 13:56:46 2016. Process ID: 11885; PSI4DATADIR: ./lib; Memory level set to 256.000 MB; ```. ==> Input File <==. ---; # ! 6-31G H2O Test FCI Energy Point. memory 48000 mb. molecule h2o {; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; }. set globals {; basis aug-cc-pVTZ; icore 0; }. thisenergy = energy('fci'). ---. Input file to run:; from psi4 import *; from p4const import *; from p4util import *; from molutil import *; from aliases import *; psi4_io = psi4.IOManager.shared_object(); psi4.efp_init(); psi4_io.set_default_path(""/tmp""); geometry(""""""; 0 1; H; H 1 0.74; """""",""blank_molecule_psi4_yo""). psi4.set_memory(48000000000). psi4.efp_init(); h2o = geometry(""""""; -1 1; F .0000000000 .0000000000 -.000000000; units bohr; """""",""h2o""); psi4.IO.set_default_namespace(""h2o""); psi4.set_global_option(""BASIS"", ""aug-cc-pVTZ""); psi4.set_global_option(""ICORE"", 0); thisenergy = energy('fci'). Memory set to 48.000 GiB by Python script. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:53 2016. ```; ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 12 Threads, 48000 MiB Core; ---------------------------------------------------------; ```. ==> Geometry <==. ```; Molecular point group: d2h; Geometry (in Bohr), charge = -1, multiplicity = 1:. Center X Y Z; ------------ ----------------- ----------------- -----------------; F 0.000000000000 0.000000000000 0.000000000000; ```. Running in d2h symmetry. Rotational constants: A = ***********\* B = ***********\* C = ***********\* [cm^-1]; Rotational constants: A = ***********\* B = ***********\* C = ***********\* [MHz]; Nuclear repulsion = 0.000000000000000. Charge = -1; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional oc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:2757,energy,energy,2757,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['energy'],['energy']
Energy Efficiency,p ........................ Passed 28.98 sec; Start 177: docs-bases; 268/415 Test #177: docs-bases ....................... Passed 1.04 sec; Start 178: docs-dft; 269/415 Test #157: dft-grad-lr2 ..................... Passed 88.54 sec; Start 180: extern2; 270/415 Test #178: docs-dft ......................... Passed 0.99 sec; Start 186: isapt2; 271/415 Test #176: dft-omega ........................ Passed 16.81 sec; Start 188: fci-h2o; 272/415 Test #188: fci-h2o .......................... Passed 5.83 sec; Start 189: fci-h2o-2; 273/415 Test #158: dft-grad-lr3 ..................... Passed 99.06 sec; Start 190: fci-h2o-fzcv; 274/415 Test #175: dft3 ............................. Passed 26.67 sec; Start 191: fci-tdm; 275/415 Test #191: fci-tdm .......................... Passed 3.68 sec; Start 192: fci-tdm-2; 276/415 Test #190: fci-h2o-fzcv ..................... Passed 5.27 sec; Start 193: fci-coverage; 277/415 Test #189: fci-h2o-2 ........................ Passed 7.57 sec; Start 195: fd-freq-energy; 278/415 Test #173: dft1-alt ......................... Passed 50.55 sec; Start 197: fd-freq-gradient; 279/415 Test #159: dfomp2p5-grad2 ................... Passed 110.29 sec; Start 199: fd-gradient; 280/415 Test #193: fci-coverage ..................... Passed 20.10 sec; Start 200: freq-isotope1; 281/415 Test #180: extern2 .......................... Passed 38.73 sec; Start 202: fnocc1; 282/415 Test #186: isapt2 ........................... Passed 38.01 sec; Start 204: fnocc3; 283/415 Test #192: fci-tdm-2 ........................ Passed 21.64 sec; Start 206: frac; 284/415 Test #206: frac ............................. Passed 3.96 sec; Start 207: frac-ip-fitting; 285/415 Test #200: freq-isotope1 .................... Passed 33.77 sec; Start 209: ghosts; 286/415 Test #171: dft1 ............................. Passed 99.43 sec; Start 213: mcscf2; 287/415 Test #213: mcscf2 ........................... Passed 2.95 sec; Start 214: mcscf3; 288/415 Test #214: mcscf3 ........................... Passe,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:26098,energy,energy,26098,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,"p /kcal,au', ln):; ene = Decimal(ln.split()[3]); elif re.match(' normal termination of dftd3', ln):; break; else:; if not ((real_nat == 1) and (jobrec['driver'] == 'gradient')):; > raise Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.'); E psi4.driver.qcdb.exceptions.Dftd3Error: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:301: Dftd3Error. The above exception was the direct cause of the following exception:. @pytest.mark.smoke; @using_dftd3; @using_gcp; def test_grimme_3c():. s16di = psi4.geometry(""""""; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; symmetry c1; """"""). > ene = psi4.energy('pbeh3c', bsse_type='nocp'). ../lib/python3.6/site-packages/psi4/tests/test_addons.py:830:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../lib/python3.6/site-packages/psi4/driver/driver.py:494: in energy; return driver_nbody.nbody_gufunc(energy, name, ptype='energy', **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:266: in nbody_gufunc; component_results = compute_nbody_components(func, method_string, metadata); ../lib/python3.6/site-packages/psi4/driver/driver_nbody.py:475: in compute_nbody_components; ptype_dict[pair], wfn = func(method_string, molecule=current_mol, return_wfn=True, **kwargs); ../lib/python3.6/site-packages/psi4/driver/driver.py:556: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2002: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../lib/python3.6/site-packa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:17413,energy,energy,17413,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,p-align ..................... Passed 7.73 sec; Start 139: dfmp2-grad4; 241/413 Test #326: sapt8 ............................ Passed 12.95 sec; Start 359: tu4-h2o-freq; 242/413 Test #102: cubeprop ......................... Passed 10.42 sec; Start 129: dfccsdt1; 243/413 Test #84: cdomp2-1 ......................... Passed 2.74 sec; Start 371: dft-jk; 244/413 Test #228: mp2-1 ............................ Passed 4.43 sec; Start 245: ocepa1; 245/413 Test #126: dfccsdl1 ......................... Passed 4.23 sec; Start 374: dft-custom-hybrid; 246/413 Test #342: soscf-large ...................... Passed 14.81 sec; Start 159: dfrasscf-sp; 247/413 Test #139: dfmp2-grad4 ...................... Passed 4.03 sec; Start 272: opt4; 248/413 Test #129: dfccsdt1 ......................... Passed 3.54 sec; Start 99: cisd-sp; 249/413 Test #245: ocepa1 ........................... Passed 2.46 sec; Start 270: opt2-fd; 250/413 Test #288: props3 ........................... Passed 13.72 sec; Start 337: scf4; 251/413 Test #14: cbs-xtpl-energy .................. Passed 10.06 sec; Start 343: soscf-ref; 252/413 Test #370: scf-freq1 ........................ Passed 9.29 sec; Start 134: dfmp2-4; 253/413 Test #287: props2 ........................... Passed 12.06 sec; Start 89: cepa2; 254/413 Test #159: dfrasscf-sp ...................... Passed 6.55 sec; Start 163: dft-ghost; 255/413 Test #359: tu4-h2o-freq ..................... Passed 9.86 sec; Start 297: psithon1; 256/413 Test #367: cubeprop-esp ..................... Passed 11.53 sec; Start 3: casscf-fzc-sp; 257/413 Test #219: mints6 ........................... Passed 12.37 sec; Start 9: castup2; 258/413 Test #371: dft-jk ........................... Passed 9.89 sec; Start 369: scf-hess1; 259/413 Test #272: opt4 ............................. Passed 8.00 sec; Start 200: freq-isotope2; 260/413 Test #99: cisd-sp .......................... Passed 7.83 sec; Start 390: python-curve; 261/413 Test #374: dft-custom-hybrid ................ Passed 9.30 sec; Start,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:23524,energy,energy,23524,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['energy'],['energy']
Energy Efficiency,p-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 2.04 sec; 392/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 2.10 sec; 393/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 2.22 sec; 394/401 Test #290: psimrcc-sp1 ...................... Passed 3.41 sec; 395/401 Test ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35876,energy,energy,35876,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,p3-grad2 ........................ Passed 1.81 sec; Start 236: mpn-bh; 318/411 Test #262: omp3-grad1 ....................... Passed 1.81 sec; Start 399: json-schema-1-energy; 319/411 Test #384: psi4numpy-rhf-hessian ............ Passed 2.61 sec; Start 355: tu3-h2o-opt; 320/411 Test #198: freq-isotope2 .................... Passed 3.81 sec; Start 269: opt3; 321/411 Test #343: stability1 ....................... Passed 2.03 sec; Start 121: dfccdl1; 322/411 Test #283: opt-freeze-coords ................ Passed 2.68 sec; Start 311: rasci-h2o; 323/411 Test #399: json-schema-1-energy ............. Passed 1.65 sec; Start 344: dfep2-1; 324/411 Test #355: tu3-h2o-opt ...................... Passed 2.01 sec; Start 351: dft-reference; 325/411 Test #121: dfccdl1 .......................... Passed 1.29 sec; Start 224: molden2; 326/411 Test #311: rasci-h2o ........................ Passed 0.99 sec; Start 225: mom; 327/411 Test #236: mpn-bh ........................... Passed 2.74 sec; Start 397: json-v11-energy; 328/411 Test #269: opt3 ............................. Passed 2.44 sec; Start 231: mp2p5-grad1; 329/411 Test #351: dft-reference .................... Passed 2.84 sec; Start 332: scf-occ; 330/411 Test #344: dfep2-1 .......................... Passed 3.55 sec; Start 222: mints10; 331/411 Test #397: json-v11-energy .................. Passed 2.74 sec; Start 130: dfmp2-2; 332/411 Test #231: mp2p5-grad1 ...................... Passed 2.25 sec; Start 391: python-mints2; 333/411 Test #224: molden2 .......................... Passed 3.08 sec; Start 134: dfmp2-grad1; 334/411 Test #225: mom .............................. Passed 3.20 sec; Start 380: psi4numpy-cphf; 335/411 Test #332: scf-occ .......................... Passed 1.46 sec; Start 356: scf-response1; 336/411 Test #222: mints10 .......................... Passed 1.14 sec; Start 381: psi4numpy-dfmp2; 337/411 Test #130: dfmp2-2 .......................... Passed 1.52 sec; Start 271: opt5; 338/411 Test #380: psi4numpy-cphf ...................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:30474,energy,energy,30474,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	188 - mints9 (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 -,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:3163,energy,energy-large,3163,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['energy'],['energy-large']
Energy Efficiency,per (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:1409,energy,energy-large,1409,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['energy'],['energy-large']
Energy Efficiency,perty ..................... Passed 3.08 sec; Start 360: x2c1; 289/404 Test #180: fsapt-terms ...................... Passed 4.85 sec; Start 401: json-schema-1-orient; 290/404 Test #399: json-schema-1-energy ............. Passed 1.59 sec; Start 191: fcidump; 291/404 Test #141: dfomp2-3 ......................... Passed 1.61 sec; Start 121: dfccdl1; 292/404 Test #185: fci-h2o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; Start 179: fsapt2; 301/404 Test #376: pywrap-align ..................... Passed 3.31 sec; Start 251: omp2-grad1; 302/404 Test #331: scf1 ............................. Passed 3.71 sec; Start 246: omp2-1; 303/404 Test #397: json-v11-energy .................. Passed 1.92 sec; Start 134: dfmp2-grad1; 304/404 Test #360: x2c1 ............................. Passed 6.36 sec; Start 284: props1; 305/404 Test #234: mp3-grad2 ........................ Passed 1.82 sec; Start 344: dfep2-1; 306/404 Test #186: fci-h2o-2 ........................ Passed 4.01 sec; Start 117: dfcasscf-sa-sp; 307/404 Test #251: omp2-grad1 ....................... Passed 1.70 sec; Start 225: mom; 308/404 Test #246: omp2-1 ........................... Passed 1.37 sec; Start 352: stability2; 309/404 Test #134: dfmp2-grad1 ...................... Passed 1.57 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:27702,energy,energy,27702,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"phan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 Hartrees, time taken: 190.91649591736495 seconds.; Proline energy: -399.96754183927425 Hartrees, time taken: 141.14360310696065 seconds.; Serine energy: -397.8017752608608 Hartrees, time taken: 112.12268372066319 seconds.; Threonine energy: -437.0180950733486 Hartrees, time taken: 118.3724678363651 seconds.; Tryptophan energy: -684.3217131099059 Hartrees, time taken: 246.40932229347527 seconds.; Tyrosine energy: -628.1734628779933 Hartrees, time taken: 250.7947356943041 seconds.; Valine energy: -401.1469758245755 Hartrees, time",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2969,energy,energy,2969,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"pherical Harmonics?: false; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 1.9324024167E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -0.34299486696379 -3.42995e-01 0.00000e+00 ; @DF-UHF iter 1: -0.48778126858064 -1.44786e-01 7.18202e-03 DIIS; @DF-UHF iter 2: -0.49627418123381 -8.49291e-03 2.58017e-03 DIIS; @DF-UHF iter 3: -0.49762079007351 -1.34661e-03 1.09982e-04 DIIS; @DF-UHF iter 4: -0.49762397190176 -3.18183e-06 1.60614e-05 DIIS; @DF-UHF iter 5: -0.49762403062183 -5.87201e-08 1.47415e-06 DIIS; @DF-UHF iter 6: -0.49762403115935 -5.37526e-10 6.69153e-08 DIIS; @DF-UHF iter 7: -0.49762403116031 -9.60343e-13 2.69685e-09 DIIS; @DF-UHF iter 8: -0.49762403116031 -7.77156e-16 2.10910e-10 DIIS; @DF-UHF iter 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:4421,Energy,Energy,4421,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/bin/python3.7"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/runtest.py"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/tests/sapt-exch-disp-inf/input.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/testresults.log"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work"" ""false"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf/output.dat"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/share/psi4"" ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib/python3.7/site-packages""; Directory: /scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/tests/sapt-exch-disp-inf; ""sapt-exch-disp-inf"" start time: May 10 14:44 EDT; Output:; ----------------------------------------------------------; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR.; SAPT EXCH-DISP20(S^inf) ENERGY........................................................PASSED. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 2 was incorrect on entry to DORGQR. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL. Intel MKL ERROR: Parameter 4 was incorrect on entry to DLASCL.; Traceback (most recent call last):; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/work/build/stage/lib//python3.7/site-package",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:1605,ENERGY,ENERGY,1605,https://psicode.org,https://github.com/psi4/psi4/issues/2178,1,['ENERGY'],['ENERGY']
Energy Efficiency,"plain won't load the basis file. I think some extra checks get turned on during the conda build. Hence [this knowledge](http://psicode.org/psi4manual/master/manage_git.html#how-to-locate-non-ascii-characters-in-the-codebase). Agree that it'd be nice to allow non-ascii. And probably much easier now that we're py3-only. I just haven't investigated the codecs stuff. ```; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 859, in construct; names[index] = parser.load_file(fullfilename); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/work/build/stage/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasissetparser.py"", line 78, in load_file; contents = infile.readlines(); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1543347940767/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.6/encodings/ascii.py"", line 26, in decode; return codecs.ascii_decode(input, self.errors)[0]. UnicodeDecodeError: 'ascii' codec can't decode byte 0xce in position 169: ordinal not in range(128); Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 3.43 sec; ----------------------------------------------------------; Test Failed.; ""cbs-xtpl-energy"" end time: Nov 27 14:59 EST; ""cbs-xtpl-energy"" time elapsed: 00:00:03; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119:1481,energy,energy,1481,https://psicode.org,https://github.com/psi4/psi4/pull/1380#issuecomment-442458119,2,['energy'],['energy']
Energy Efficiency,"pole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embedding with internally calculated Mulliken charges. Charges must now be provided with `embedding_charges` kwarg.; - [x] stdsuite: consolidated the caller fn to remove duplicat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6603,ENERGY,ENERGY,6603,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; > e_scf = scf_wfn.compute_energy(); >; > RuntimeError:; > Fatal Error: DFHelper (MemDFJK): cannot do cartesian auxiliary functions; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libfock/MemDFJK.cc on line: 89; > The most recent 5 function calls were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasiri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:2897,energy,energy,2897,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['energy'],['energy']
Energy Efficiency,"psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1706,energy,energy,1706,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,psi4numpy-rhf-gradient; 373/412 Test #97: cisd-h2o-clpse ................... Passed 5.09 sec; Start 381: psi4numpy-cphf; 374/412 Test #331: scf-bs ........................... Passed 2.43 sec; Start 405: json-schema-1-properties; 375/412 Test #222: mints9 ........................... Passed 2.16 sec; Start 399: json-v11-gradient; 376/412 Test #404: json-schema-1-gradient ........... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36071,energy,energy,36071,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,"psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = ['fEelst', 'fEexch', 'fEindAB', 'fEindBA', 'fEdisp', 'fEedisp', 'fEtot'] #TEST. with open('fsapt.dat', 'r') as fsapt: #TEST; Energies = [float(x) for x in fsapt.readlines()[-2].split()[2:]] #TEST. for pair in zip(fkeys,Energies): #TEST; fEnergies[pair[0]] = pair[1] #TEST. fEref = { #TEST; 'fEelst' : -30.867, #TEST; 'fEexch' : 11.445, #TEST; 'fEindAB': -3.138, #TEST; 'fEindBA': -1.863, #TEST; 'fEdisp' : -1.754, #TEST; 'fEedisp': 0.000, #TEST; 'fEtot' : -26.177} #TEST. for key in fkeys: #TEST; compare_values(fE",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4491,ENERGY,ENERGY,4491,https://psicode.org,https://github.com/psi4/psi4/issues/2330,5,['ENERGY'],['ENERGY']
Energy Efficiency,psithon2 ......................... Passed 19.59 sec; Start 5: casscf-sa-sp; 213/412 Test #170: dft-vv10 ......................... Passed 19.83 sec; Start 90: cepa3; 214/412 Test #154: dft-grad-lr1 ..................... Passed 18.31 sec; Start 341: soscf-large; 215/412 Test #177: extern1 .......................... Passed 20.99 sec; Start 91: cepa1; 216/412 Test #302: pywrap-basis ..................... Passed 19.87 sec; Start 339: scf7; 217/412 Test #325: sapt8 ............................ Passed 17.72 sec; Start 267: opt1-fd; 218/412 Test #202: fnocc3 ........................... Passed 27.34 sec; Start 165: dft-grad1; 219/412 Test #200: fnocc1 ........................... Passed 25.83 sec; Start 367: dft-smoke; 220/412 Test #248: omp2-2 ........................... Passed 27.95 sec; Start 286: props2; 221/412 Test #110: dcft3 ............................ Passed 28.17 sec; Start 351: dft-custom; 222/412 Test #292: psimrcc-fd-freq1 ................. Passed 25.26 sec; Start 14: cbs-xtpl-energy; 223/412 Test #219: mints8 ........................... Passed 17.04 sec; Start 287: props3; 224/412 Test #144: dfomp2-grad1 ..................... Passed 28.18 sec; Start 358: tu4-h2o-freq; 225/412 Test #341: soscf-large ...................... Passed 16.00 sec; Start 342: soscf-ref; 226/412 Test #91: cepa1 ............................ Passed 13.12 sec; Start 242: ocepa-grad1; 227/412 Test #90: cepa3 ............................ Passed 17.62 sec; Start 198: freq-isotope1; 228/412 Test #5: casscf-sa-sp ..................... Passed 18.78 sec; Start 369: scf-freq1; 229/412 Test #267: opt1-fd .......................... Passed 10.29 sec; Start 218: mints6; 230/412 Test #339: scf7 ............................. Passed 13.56 sec; Start 89: cepa2; 231/412 Test #165: dft-grad1 ........................ Passed 14.67 sec; Start 373: dft-custom-hybrid; 232/412 Test #286: props2 ........................... Passed 14.02 sec; Start 269: opt2-fd; 233/412 Test #351: dft-custom ....................... Pa,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:20916,energy,energy,20916,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['energy'],['energy']
Energy Efficiency,"pt there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6245,ENERGY,ENERGY,6245,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,pt2 ........................... Passed 5.43 sec; Start 86: cepa0-grad1; 350/413 Test #363: x2c2 ............................. Passed 3.08 sec; Start 216: mints3; 351/413 Test #259: omp3-1 ........................... Passed 4.13 sec; Start 224: mints10; 352/413 Test #358: scf-response1 .................... Passed 2.49 sec; Start 355: tu1-h2o-energy; 353/413 Test #271: opt3 ............................. Passed 4.85 sec; Start 335: scf2; 354/413 Test #346: dfep2-1 .......................... Passed 4.12 sec; Start 190: fci-tdm; 355/413 Test #353: dft-reference .................... Passed 3.89 sec; Start 223: mints9; 356/413 Test #104: decontract ....................... Passed 1.73 sec; Start 222: mints-helper; 357/413 Test #312: rasci-c2-active .................. Passed 5.46 sec; Start 354: stability2; 358/413 Test #216: mints3 ........................... Passed 1.18 sec; Start 97: cisd-h2o-clpse; 359/413 Test #364: x2c3 ............................. Passed 2.31 sec; Start 173: dft2; 360/413 Test #355: tu1-h2o-energy ................... Passed 1.87 sec; Start 336: scf3; 361/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 2.49 sec; Start 138: dfmp2-grad3; 362/413 Test #224: mints10 .......................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start 345: stability1; 364/413 Test #331: scf-guess-read2 .................. Passed 7.29 sec; Start 351: sapt-sf1; 365/413 Test #223: mints9 ........................... Passed 2.00 sec; Start 121: dfcasscf-sp; 366/413 Test #222: mints-helper ..................... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:33908,energy,energy,33908,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,"pted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,; *,; title: str = """",; x_title: Tuple[str, str] = (""ω"", ""au""),; y_title: Tuple[str, str] = (""ε"", ""L⋅mol⁻¹⋅cm⁻¹""),; offset: int = 0):; hover = alt.selection_single(; fields=[""x""],; nearest=True,; on=""mouseover"",; empty=""none"",; clear=""mouseout""; ). s1 = pd.DataFrame(data[""convolution""]); lines = alt.Chart(s1).mark_line(size=1.5).encode(; x=alt.X(""x"", axis=alt.Axis(title=f""{x_title[0]} [{x_title[1]}]"", offset=offset)),; y=alt.Y(""y"", axis=alt.Axis(title=f""{y_title[0]} [{y_title[1]}]"")),; ). points = lines.transform_filter(hover).mark_circle(). tooltips = alt.Chart(s1).mark_rule().encode(; x='x:Q',; opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),; tooltip=[alt.Tooltip(""x:Q"", format="".4f"", title=f""{x_title[0]}""), alt.Tooltip(""y:Q"", format="".1f"", title=f""{y_title[0]}"")]; ).add_selection(; hover; ). ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:1759,energy,energy,1759,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['energy'],['energy']
Energy Efficiency,"puts.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1369,energy,energy,1369,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"py --num_threads 6 --scf_type PK --element 1 --multiplicity 2`. For me, the output of this is (the exact numbers change on re-runs):; > -0.41204465858903644; -0.18510932345625386; 0.18101301722463536; -0.17603191005094254; -0.1034126028084521; -0.04894812237658419; -0.2577286306987443; -0.3757350049677912; -0.26680604410405556; -0.26680604410405556. Interestingly, the issue is not present when using PK and a single thread,; `python test.py --num_threads 1 --scf_type PK --element 1 --multiplicity 2`. nor when using multiple threads, but DIRECT instead of PK; `python test.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2`. In both of these cases, I always get the same output:; > -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424; -0.46650913902090424. Also, the issue is not present when using PK in multi-threaded environments, but using a different input, e.g.; `python test.py --num_threads 6 --scf_type PK --element 6 --multiplicity 3`; >-37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675; -37.303469175322675. After digging a bit deeper, it seems like the difference between results stems from the entry for TWO ELECTRON ENERGY, which is essentially random (at least for single electron systems). It seems weird to me that this entry is non-zero at all for a single hydrogen atom, even for presumably correct results (i.e. when using DIRECT instead of PK), but I am no DFT expert. Note that when changing the method from PBE0 to HF, the random results problem persists, but correct results will have a TWO ELECTRON ENERGY of zero (as expected), whereas wrong results will have a non-zero entry. . [minimal_example.py.zip](https://github.com/psi4/psi4/files/9867943/minimal_example.py.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2760:2515,ENERGY,ENERGY,2515,https://psicode.org,https://github.com/psi4/psi4/issues/2760,2,['ENERGY'],['ENERGY']
Energy Efficiency,"py as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf_wavefunction_factory; wfn = core.ROHF(ref_wfn, supe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1147,ENERGY,ENERGY,1147,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"py as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3331,energy,energy,3331,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"py"", '; 'line 71, in compute\n'; ' job_inputs = self.build_input(input_model, '; 'config)\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib//python3.8/site-packages/qcengine/programs/cfour/runner.py"", '; 'line 137, in build_input\n'; ' cfourrec[""infiles""][""GENBAS""] = '; 'genbas.read_text()\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1236, in read_text\n'; "" with self.open(mode='r', encoding=encoding, ""; 'errors=errors) as f:\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1222, in open\n'; ' return io.open(self, mode, buffering, '; 'encoding, errors, newline,\n'; ' File '; '""/xstorage/tobias/bin/psi4/lib/python3.8/pathlib.py"", '; 'line 1078, in _opener\n'; ' return self._accessor.open(self, flags, '; 'mode)\n'; 'FileNotFoundError: [Errno 2] No such file or '; 'directory: '; ""'/xstorage/tobias/bin/cfour/basis/GENBAS'\n"",; 'error_type': 'unknown_error',; 'extras': None},; 'extras': None,; 'id': None,; 'input_data': {'driver': 'energy',; 'keywords': {'CC_CONV': 12, 'SCF_CONV': 12},; 'model': {'basis': 'aug-pvqz', 'method': 'ccsd(t)'},; 'molecule': {'atom_labels': ['', '', ''],; 'atomic_numbers': [8, 1, 1],; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragments': [[0, 1, 2]],; 'geometry': [0.0,; 0.0,; -0.12403886030029525,; 0.0,; -1.431430901356359,; 0.9842933627189459,; 0.0,; 1.431430901356359,; 0.9842933627189459],; 'mass_numbers': [16, 1, 1],; 'masses': [15.99491461957,; 1.00782503223,; 1.00782503223],; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'H2O',; 'provenance': {'creator': 'QCElemental',; 'routine': 'qcelemental.molparse.from_string',; 'version': 'v0.24.0'},; 'real': [True, True, True],; 'schema_name': 'qcschema_molecule',; 'schema_version': 2,; 'symbols': ['O', 'H', 'H'],; 'validated': True},; 'provenance': {'cpu': 'Intel(R) Xeon(R) CPU E7-4870 v2 @ '; '2.30GHz',; 'creator': 'QCEngine',; 'hostname': 'nod10',; 'qcengin",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048:2329,energy,energy,2329,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155516048,1,['energy'],['energy']
Energy Efficiency,"py"", line 2095, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 375, in extrapolate; coeffs = self.diis_coefficients(); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 254, in diis_coefficients; B[i, j] = self.get_dot_product(i, j); File ""/home/tu/tu_tu/tu_ctibc01/prog/PSI4/1.5_devel/lib/psi4/driver/procrouting/diis.py"", line 198, in get_dot_product; dot_product += Rix.vector_dot(Rjx). RuntimeError: ; Fatal Error: Matrix::vector_dot: Dimensions do not match!. Error occurred in file: /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on line: 1703; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::Matrix::vector_dot(psi::Matrix const*). Printing out the relevant lines from the Psithon --> Python processed input file:; energy('scf',write_orbitals='scf_mos'); Avals=[0.00, 0.05, 0.10, 0.12, 0.15, 0.20, 0.21, 0.22, 0.23, 0.24, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50, 0.55, 0.60, 0.65, 0.70, 0.75, 0.80, 0.85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !---------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:2456,energy,energy,2456,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['energy'],['energy']
Energy Efficiency,"py"", line 858, in select_ccsd_t_; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; > set_cholesky_from('CC_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; > raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: FNOCC requires SCF_TYPE = DISK_DF; >; > 7. DFOCC (OMP2/cc-pVDZ): *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 40, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; > return func(name, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; > type_val = set_cholesky_from('MP2_TYPE'); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; > raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); >; > ValidationError: DFOCC requires SCF_TYPE = DISK_DF; >; > 8. CI; > - CISD/cc-pVDZ: *ALL FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 28, in <mo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:9139,energy,energy,9139,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsigned long, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >, __gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > >) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:1260; #5 0x7f70036313d9 in std::vector<int, std::allocator<int> >::operator=(std::vector<int, std::allocator<int> > const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11761,allocate,allocate,11761,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocate']
Energy Efficiency,q ......................... Passed 26.06 sec; Start 208: ghosts; 177/413 Test #140: dfmp2-grad5 ...................... Passed 24.69 sec; Start 203: fnocc3; 178/413 Test #66: cc48 ............................. Passed 68.80 sec; Start 175: dft-omega; 179/413 Test #377: pywrap-bfs ....................... Passed 24.36 sec; Start 328: scf-ecp; 180/413 Test #16: cbs-xtpl-gradient ................ Passed 38.52 sec; Start 394: python-cc54; 181/413 Test #84: cdomp2-1 ......................... Passed 18.22 sec; Start 393: python-mints2; 182/413 Test #204: fnocc4 ........................... Passed 31.42 sec; Start 256: omp2p5-2; 183/413 Test #393: python-mints2 .................... Passed 3.14 sec; Start 397: python-mints13; 184/413 Test #274: opt6 ............................. Passed 28.70 sec; Start 24: cc12; 185/413 Test #397: python-mints13 ................... Passed 2.00 sec; Start 201: fnocc1; 186/413 Test #1: adc1 ............................. Passed 26.39 sec; Start 399: json-v11-energy; 187/413 Test #399: json-v11-energy .................. Passed 5.20 sec; Start 381: cc-module; 188/413 Test #130: dfccsdat1 ........................ Passed 40.48 sec; Start 392: python-mints9; 189/413 Test #392: python-mints9 .................... Passed 2.37 sec; Start 400: json-v11-gradient; 190/413 Test #400: json-v11-gradient ................ Passed 2.12 sec; Start 240: nbody-intermediates; 191/413 Test #208: ghosts ........................... Passed 33.10 sec; Start 145: dfomp2-grad1; 192/413 Test #175: dft-omega ........................ Passed 28.98 sec; Start 390: python-curve; 193/413 Test #203: fnocc3 ........................... Passed 33.21 sec; Start 398: python-memdfjk; 194/413 Test #398: python-memdfjk ................... Passed 1.05 sec; Start 73: cc54; 195/413 Test #328: scf-ecp .......................... Passed 32.66 sec; Start 174: dft3; 196/413 Test #390: python-curve ..................... Passed 4.05 sec; Start 179: extern2; 197/413 Test #256: omp2p5-2 .................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:17581,energy,energy,17581,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,2,['energy'],['energy']
Energy Efficiency,"r 14: -2058.71254091207129 -4.36049e-03 2.19998e-04 DIIS; @RHF iter 15: -2058.71333247888015 -7.91567e-04 1.06203e-04 DIIS; @RHF iter 16: -2058.71385812449535 -5.25646e-04 7.34977e-05 DIIS; @RHF iter 17: -2058.71419440133604 -3.36277e-04 6.51060e-05 DIIS; @RHF iter 18: -2058.71480929891686 -6.14898e-04 5.06877e-05 DIIS; @RHF iter 19: -2058.71557380138074 -7.64502e-04 2.56577e-05 DIIS; @RHF iter 20: -2058.71570264423553 -1.28843e-04 1.10771e-05 DIIS; @RHF iter 21: -2058.71571795960836 -1.53154e-05 6.56999e-06 DIIS; @RHF iter 22: -2058.71572010000091 -2.14039e-06 4.19181e-06 DIIS; @RHF iter 23: -2058.71572133933978 -1.23934e-06 2.84272e-06 DIIS; @RHF iter 24: -2058.71572216216646 -8.22827e-07 1.46190e-06 DIIS; @RHF iter 25: -2058.71572235289977 -1.90733e-07 6.37553e-07 DIIS; Energy converged.; ```; After:; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 0: -2027.61462571415450 -2.02761e+03 0.00000e+00 ; @RHF iter 1: -2047.54782267664223 -1.99332e+01 3.19491e-02 ; @RHF iter 2: -1955.99273532148004 9.15551e+01 6.70510e-02 DIIS; @RHF iter 3: -2057.53819937519893 -1.01545e+02 9.02846e-03 DIIS; @RHF iter 4: -2058.54743414181848 -1.00923e+00 4.31560e-03 DIIS; @RHF iter 5: -2058.67427146292175 -1.26837e-01 1.67738e-03 DIIS; @RHF iter 6: -2058.68592550112453 -1.16540e-02 1.96127e-03 DIIS; @RHF iter 7: -2058.71313050125491 -2.72050e-02 2.22231e-04 DIIS; @RHF iter 8: -2058.71421043177043 -1.07993e-03 1.00804e-04 DIIS; @RHF iter 9: -2058.71444510627452 -2.34675e-04 6.14040e-05 DIIS; @RHF iter 10: -2058.71464094420026 -1.95838e-04 5.39836e-05 DIIS; @RHF iter 11: -2058.71503691077487 -3.95967e-04 4.33684e-05 DIIS; @RHF iter 12: -2058.71567587119080 -6.38960e-04 2.33421e-05 DIIS; @RHF iter 13: -2058.71571904189250 -4.31707e-05 1.03865e-05 DIIS; @RHF iter 14: -2058.71572200714991 -2.96526e-06 2.57224e-06 DIIS; @RHF iter 15: -2058.71572223280782 -2.25658e-07 1.24361e-06 DIIS; @RHF iter 16: -2058.71572229988578 -6.70780e-08 7.90670e-07 DIIS; Energy converged.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309:4219,Energy,Energy,4219,https://psicode.org,https://github.com/psi4/psi4/pull/1451#issuecomment-450756309,1,['Energy'],['Energy']
Energy Efficiency,"r 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RHF iter 37: 153.64365441909877 2.29204e+02 6.36152e+01; ---------------------------------------------------------------------	 |	 @DF-RHF iter 38: -73.57749835218766 -2.27221e+02 1.31647e+01; Multipole Electronic (a.u.) Nuclear (a.u.) 	 |	 @DF-RHF iter 39: -85.87858242035303 -1.23011e+01 1.51536e+00; ---------------------------------------------------------------------	 |	 @DF-RHF iter 40: -74.81783048435938 1.10608e+01 4.48340e+00; L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]		 |	 @DF-RHF iter 41: -84.711",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:10401,Energy,Energy,10401,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"r 9: -0.49762403116032 -8.88178e-16 2.91582e-11 DIIS; @DF-UHF iter 10: -0.49762403116032 -6.66134e-16 1.10373e-14 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.497624 . Alpha Virtual: . 2A 0.048719 3A 0.066612 4A 0.066612 ; 5A 0.098792 6A 0.253872 7A 0.387743 ; 8A 0.387743 9A 0.427498 10A 1.213680 ; 11A 3.852115 . Beta Occupied: . . Beta Virtual: . 1A 0.020894 2A 0.058417 3A 0.068354 ; 4A 0.068354 5A 0.183800 6A 0.269157 ; 7A 0.391375 8A 0.391375 9A 0.451441 ; 10A 1.378124 11A 3.853058 . Final Occupation by Irrep:; A ; DOCC [ 0 ]; SOCC [ 1 ]. @DF-UHF Final Energy: -0.49762403116032. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -0.4976240311603163; Two-Electron Energy = 0.0000000000000000; Total Energy = -0.4976240311603163. UHF NO Occupations:; HONO-0 : 1 A 1.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>//; // SCF //; //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<//. => Loading Basis Set <=. Name: AUG-CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry LI line 68 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs ; atoms 2 entry H line 40 file /home/filip/software/psi4-1.4rc/share/psi4/basis/aug-cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 976 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c1; Full point group: C_inf_v. Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ---------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:5307,Energy,Energy,5307,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"r of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using Symmetric Orthogonalization.; > SCF Guess: Core (One-Electron) Hamiltonian.; > ; > ==> Iterations <==; > ; > ```; > Total Energy Delta E RMS |[F,P]|; > ```; > ; > @DF-RHF iter 1: -408.79982050385229 -4.08800e+02 3.62257e-02; > @DF-RHF iter 2: -355.09647973844881 5.37033e+01 4.41837e-02 DIIS; > @DF-RHF iter 3: -503.82195227805050 -1.48725e+02 2.30091e-02 DIIS; > @DF-RHF iter 4: -521.88187925493912 -1.80599e+01 1.74498e-02 DIIS; > @DF-RHF iter 5: -531.29208626043282 -9.41021e+00 8.08186e-03 DIIS; > @DF-RHF iter 6: -532.44139862133784 -1.14931e+00 8.76099e-03 DIIS; > @DF-RHF iter 7: -535.74682106965861 -3.30542e+00 2.34149e-03 DIIS; > @DF-RHF iter 8: -535.91483788818550 -1.68017e-01 1.17738e-03 DIIS; > @DF-RHF iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:7832,Energy,Energy,7832,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Energy'],['Energy']
Energy Efficiency,"r or inconsistent definitions (I think there's even cases where the `Mol.property()` fn differs in behavior from the `Mol.fproperty()` fn (that includes dummy atoms). It would be great to survey the code and hunt these down. My trepidation comes in because Mol is delicate w/the two versions of ghosting (type A (not reversible): `@C`, type B (reversible): `extract_subset(1, 2)`) and I worry that changes would start an avalanche. In fact I definitely recommend _not_ ""fixing"" `Mol.Z()` the way I would like (`C` and `@C` both return 6) because lots of places in the Mol code depend on using that fn as a test for type A ghostedness. > I'm very unfamiliar with how masses and fragment identities are passed around. Is there a case in which having the ghost masses zero would keep you from making a properly-massed all-real-atoms copy of that molecule? That would definitely preclude any option of setting them zero permanently. What happens is that every atom at parse-time gets read into a CoordEntry object that holds Z, ghost, charge, mass, element symbol, coords, etc. If the atom is type-A ghost, then Z, ghost, and charge get set accordingly. There is no other info so type-A is not eligible to return to reality. The fragmentation pattern is also stored at parse-time with all-`Real`. For a trimer, when you `extract_subsets(1, 2)`, the `Mol.fragment_types_` gets reset to `[Real, Ghost, Absent]`. The CoordEntries don't change, but every function in Mol is trained to iterate over the frags, and handle Ghost or Absent differently, so that in the fn output, they _appear_ ghosted (type B) or absent. Because the mass, Z info in the CoordEntry is unchanged, this ghostedness is reversible. So in the type B sense, mass must not be set to 0 permanently b/c then type B would be irreversible. I suppose you're advocating zeroing mass for type A? That'd be more consistent, but its effects on COM, inertial frame, symmetry, etc. would need to be probed. Or maybe our moments of inertia are even n",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363473061:1155,charge,charge,1155,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363473061,1,['charge'],['charge']
Energy Efficiency,"r/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; fnocc_wfn = core.fnocc(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - FNO-DF-CCSD(T)/cc-pVDZ: **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 43, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in ene",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:7458,energy,energy,7458,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,rad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed); 	227 - omp3-grad1 (Failed); 	228 - omp3-grad2 (Failed); 	229 - opt-lindep-change (Failed); 	230 - opt1 (Failed); 	232 - opt2 (Failed); 	233 - opt2-fd (Failed); 	234 - opt3 (Failed); 	235 - opt4 (Failed); 	236 - opt5 (Failed); 	237 - opt6 (Failed); 	238 - opt7 (Failed); 	239 - opt8 (Failed); 	240 - opt9 (Failed); 	241 - opt11 (Failed); 	242 - opt12 (Failed); 	243 - opt13 (Failed); 	244 - opt14 (Failed); 	245 - opt-irc-1 (Failed); 	246 - opt-irc-2 (Failed); 	247 - opt_freeze_coords (Failed); 	261 - pubchem1 (Failed); 	263 - pywrap-alias (Failed); 	264 - pywrap-all (Failed); 	268 - pywrap-checkrun-rhf (Failed); 	269 - pywrap-checkrun-rohf (Failed); 	270 - pywrap-checkrun-uhf (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	301 - scf6 (Failed); 	309 - tu3-h2o-opt (Failed); 	310 - tu4-h2o-freq (Failed); 	322 - cubeprop-esp (Failed); 	335 - dftd3-energy (Failed); 	336 - dftd3-grad (Failed); Errors while running CTest; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:2885,energy,energy,2885,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['energy'],['energy']
Energy Efficiency,rad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: frac-ip-fitting; 74/411 Test #104: dcft-grad2 ....................... Passed 16.24 sec; Start 144: dfomp2-grad2; 75/411 Test #74: cc5a ............................. Passed 46.64 sec; Start 11: cbs-delta-energy; 76/411 Test #144: dfomp2-grad2 ..................... Passed 11.68 sec; Start 26: cc13b; 77/411 Test #167: dft-b3lyp ........................ Passed 64.40 sec; Start 244: ocepa2; 78/411 Test #26: cc13b ............................ Passed 16.81 sec; Start 250: omp2-5; 79/411 Test #317: sapt3 ............................ Passed 72.42 sec; Start 230: mp2-module; 80/411 Test #61: cc44 ............................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:7866,energy,energy,7866,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,rad5 ...................... Passed 9.49 sec; Start 324: sapt8; 207/411 Test #169: dft-vv10 ......................... Passed 13.69 sec; Start 366: dft-smoke; 208/411 Test #282: opt-irc-3 ........................ Passed 14.84 sec; Start 128: dfccsdat1; 209/411 Test #128: dfccsdat1 ........................ Passed 2.98 sec; Start 164: dft-grad1; 210/411 Test #200: fnocc2 ........................... Passed 11.20 sec; Start 340: soscf-large; 211/411 Test #238: nbody-intermediates .............. Passed 11.06 sec; Start 286: props3; 212/411 Test #218: mints8 ........................... Passed 14.21 sec; Start 194: fd-freq-gradient; 213/411 Test #324: sapt8 ............................ Passed 12.21 sec; Start 335: scf4; 214/411 Test #366: dft-smoke ........................ Passed 11.20 sec; Start 207: gibbs; 215/411 Test #164: dft-grad1 ........................ Passed 13.20 sec; Start 5: casscf-sa-sp; 216/411 Test #335: scf4 ............................. Passed 6.98 sec; Start 14: cbs-xtpl-energy; 217/411 Test #286: props3 ........................... Passed 12.80 sec; Start 372: dft-custom-hybrid; 218/411 Test #340: soscf-large ...................... Passed 14.19 sec; Start 275: opt9; 219/411 Test #194: fd-freq-gradient ................. Passed 12.13 sec; Start 133: dfmp2-ecp; 220/411 Test #207: gibbs ............................ Passed 11.18 sec; Start 23: cc12; 221/411 Test #5: casscf-sa-sp ..................... Passed 7.38 sec; Start 217: mints6; 222/411 Test #23: cc12 ............................. Passed 3.81 sec; Start 368: scf-freq1; 223/411 Test #372: dft-custom-hybrid ................ Passed 8.36 sec; Start 369: dft-jk; 224/411 Test #14: cbs-xtpl-energy .................. Passed 8.78 sec; Start 296: psithon2; 225/411 Test #275: opt9 ............................. Passed 9.31 sec; Start 122: dfccd-grad1; 226/411 Test #133: dfmp2-ecp ........................ Passed 10.55 sec; Start 154: dfrasscf-sp; 227/411 Test #122: dfccd-grad1 ...................... Passed 2.71 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:20128,energy,energy,20128,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,"ral major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a densi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:1114,efficient,efficient,1114,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['efficient'],['efficient']
Energy Efficiency,"ran a CASSCF and got its natural orbitals, and then fed those; orbitals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > *",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1185,energy,energy,1185,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,ransformation.; Two-electron integral transformation complete.; (OO|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|OO)...; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|OV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (OV|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|OO)...; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|OV)...; Starting second half-transformation.; Two-electron integral transformation complete.; (VV|VV)...; Starting second half-transformation.; Two-electron integral transformation complete.; Frozen core energy = 0.00000000000000. Size of irrep 0 of <ab|cd> integrals: 0.017 (MW) / 0.135 (MB); Size of irrep 1 of <ab|cd> integrals: 0.005 (MW) / 0.041 (MB); Size of irrep 2 of <ab|cd> integrals: 0.006 (MW) / 0.049 (MB); Size of irrep 3 of <ab|cd> integrals: 0.014 (MW) / 0.115 (MB); Total: 0.043 (MW) / 0.341 (MB). Size of irrep 0 of <ia|bc> integrals: 0.005 (MW) / 0.037 (MB); Size of irrep 1 of <ia|bc> integrals: 0.001 (MW) / 0.009 (MB); Size of irrep 2 of <ia|bc> integrals: 0.002 (MW) / 0.012 (MB); Size of irrep 3 of <ia|bc> integrals: 0.003 (MW) / 0.028 (MB); Total: 0.011 (MW) / 0.086 (MB). Size of irrep 0 of tijab amplitudes: 0.001 (MW) / 0.011 (MB); Size of irrep 1 of tijab amplitudes: 0.000 (MW) / 0.001 (MB); Size of irrep 2 of tijab amplitudes: 0.000 (MW) / 0.004 (MB); Size of irrep 3 of tijab amplitudes: 0.001 (MW) / 0.006 (MB); Total: 0.003 (MW) / 0.022 (MB); ```. Output from running coupled cluster tests:. ```; Start 9: cc1; 1/79 Test #9: cc1 ..............................***Faile,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230:2148,energy,energy,2148,https://psicode.org,https://github.com/psi4/psi4/issues/230,1,['energy'],['energy']
Energy Efficiency,rap-basis ..................... Passed 19.14 sec; Start 341: soscf-large; 222/412 Test #5: casscf-sa-sp ..................... Passed 20.61 sec; Start 90: cepa3; 223/412 Test #325: sapt8 ............................ Passed 26.16 sec; Start 367: dft-smoke; 224/412 Test #166: dft-grad2 ........................ Passed 31.09 sec; Start 339: scf7; 225/412 Test #154: dft-grad-lr1 ..................... Passed 28.99 sec; Start 165: dft-grad1; 226/412 Test #219: mints8 ........................... Passed 25.77 sec; Start 351: dft-custom; 227/412 Test #341: soscf-large ...................... Passed 25.12 sec; Start 287: props3; 228/412 Test #90: cepa3 ............................ Passed 12.62 sec; Start 286: props2; 229/412 Test #339: scf7 ............................. Passed 18.98 sec; Start 198: freq-isotope1; 230/412 Test #367: dft-smoke ........................ Passed 21.68 sec; Start 218: mints6; 231/412 Test #165: dft-grad1 ........................ Passed 25.39 sec; Start 14: cbs-xtpl-energy; 232/412 Test #351: dft-custom ....................... Passed 23.35 sec; Start 358: tu4-h2o-freq; 233/412 Test #286: props2 ........................... Passed 22.38 sec; Start 267: opt1-fd; 234/412 Test #287: props3 ........................... Passed 24.71 sec; Start 373: dft-custom-hybrid; 235/412 Test #198: freq-isotope1 .................... Passed 15.05 sec; Start 369: scf-freq1; 236/412 Test #179: fsapt1 ........................... Passed 2074.68 sec; Start 91: cepa1; 237/412 Test #218: mints6 ........................... Passed 20.79 sec; Start 269: opt2-fd; 238/412 Test #14: cbs-xtpl-energy .................. Passed 21.79 sec; Start 342: soscf-ref; 239/412 Test #267: opt1-fd .......................... Passed 19.24 sec; Start 370: dft-jk; 240/412 Test #358: tu4-h2o-freq ..................... Passed 20.68 sec; Start 394: python-3-index-transforms; 241/412 Test #369: scf-freq1 ........................ Passed 20.20 sec; Start 102: cubeprop; 242/412 Test #373: dft-custom-hybrid ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:21557,energy,energy,21557,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,rap-basis ..................... Passed 21.14 sec; Start 49: cc33; 194/411 Test #303: pywrap-checkrun-convcrit ......... Passed 44.50 sec; Start 164: dft-grad1; 195/411 Test #146: dfomp3-1 ......................... Passed 27.79 sec; Start 248: omp2-3; 196/411 Test #340: soscf-large ...................... Passed 15.12 sec; Start 138: dfmp2-grad5; 197/411 Test #275: opt9 ............................. Passed 29.14 sec; Start 350: dft-custom; 198/411 Test #80: cc8c ............................. Passed 57.00 sec; Start 286: props3; 199/411 Test #366: dft-smoke ........................ Passed 20.42 sec; Start 14: cbs-xtpl-energy; 200/411 Test #54: cc38 ............................. Passed 43.19 sec; Start 258: omp3-2; 201/411 Test #5: casscf-sa-sp ..................... Passed 18.54 sec; Start 53: cc37; 202/411 Test #142: dfomp2-4 ......................... Passed 45.56 sec; Start 357: tu4-h2o-freq; 203/411 Test #148: dfomp3-grad1 ..................... Passed 28.40 sec; Start 133: dfmp2-ecp; 204/411 Test #14: cbs-xtpl-energy .................. Passed 11.68 sec; Start 105: dcft-grad3; 205/411 Test #164: dft-grad1 ........................ Passed 15.73 sec; Start 252: omp2-grad2; 206/411 Test #72: cc54 ............................. Passed 29.77 sec; Start 152: dfomp2p5-grad1; 207/411 Test #51: cc35 ............................. Passed 49.20 sec; Start 285: props2; 208/411 Test #286: props3 ........................... Passed 13.73 sec; Start 21: cc10; 209/411 Test #350: dft-custom ....................... Passed 14.96 sec; Start 217: mints6; 210/411 Test #138: dfmp2-grad5 ...................... Passed 17.05 sec; Start 3: casscf-fzc-sp; 211/411 Test #22: cc11 ............................. Passed 34.28 sec; Start 150: dfomp2p5-1; 212/411 Test #248: omp2-3 ........................... Passed 23.71 sec; Start 23: cc12; 213/411 Test #357: tu4-h2o-freq ..................... Passed 14.43 sec; Start 89: cepa3; 214/411 Test #49: cc33 ............................. Passed 31.01 sec; Start 50:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:19189,energy,energy,19189,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,rasci-h2o; 366/411 Test #214: mints3 ........................... Passed 1.03 sec; Start 209: mcscf1; 367/411 Test #157: dft-grac ......................... Passed 1.79 sec; Start 220: mints-helper; 368/411 Test #222: mints10 .......................... Passed 2.06 sec; Start 405: skeleton; 369/411 Test #293: psimrcc-pt2 ...................... Passed 1.62 sec; Start 398: json-v11-gradient; 370/411 Test #353: tu1-h2o-energy ................... Passed 1.11 sec; Start 400: json-schema-1-ghost; 371/411 Test #406: skeletonaointegrals .............. Passed 1.69 sec; Start 404: json-schema-1-properties; 372/411 Test #298: pubchem2 ......................... Passed 1.36 sec; Start 309: pywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost ..,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:35356,energy,energy,35356,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,"rations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 4 4 0 0 0 0; -------------------------------------------------------; Total 4 4 1 1 1 0; -------------------------------------------------------. ==> Integral Setup <==. ==> DiskDFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (3-21G AUX); Blend: DEF2-SVP-JKFIT; Number of shells: 18; Number of basis function: 50; Number of Cartesian functions: 50; Spherical Harmonics?: false; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 4.0357381281E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter SAD: -2.83568135919461 -2.83568e+00 0.00000e+00 ; @DF-UHF iter 1: -2.83568840083719 -7.04164e-06 9.00011e-05 DIIS; @DF-UHF iter 2: -2.83568849893678 -9.80996e-08 1.09058e-05 DIIS; @DF-UHF iter 3: -2.83568850042063 -1.48385e-09 4.55093e-08 DIIS; @DF-UHF iter 4: -2.83568850042064 -1.28786e-14 1.52740e-10 DIIS; @DF-UHF iter 5: -2.83568850042064 -8.88178e-16 9.96306e-12 DIIS; @DF-UHF iter 6: -2.83568850042064 2.22045e-15 2.48440e-16 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: 4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.903583 . Alpha Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Beta Occupied: . 1A -0.903583 . Beta Virtual: . 2A 0.556192 3A 2.081751 4A 5.330969 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:3906,Energy,Energy,3906,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,rcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: pywrap-checkrun-rhf .............. Passed 972.11 sec; 390/401 Test #289: psimrcc-pt2 ...................... Passed 1.88 sec; 391/401 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35593,energy,energy,35593,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,"rd, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1576,energy,energy,1576,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['energy'],['energy']
Energy Efficiency,"rd; -----------------------------------------------------------------------. Psi4 started on: Mon Aug 22 01:48:05 2016. Process ID: 28503; PSI4DATADIR: /usr/local/psi4/share/psi4; Memory level set to 256.000 MB. ==> Input File <==. --------------------------------------------------------------------------; #! Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. ; # Print; # the path to a trajectory file for visualization; # in Jmol.; # grep '@IRC' on the output to see a nice printout; # of the progress of your IRC computation. molecule h2o2 {; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. # g_convergence needs to be tight for IRCs:; set g_convergence gau_verytight. set {; basis dzp; opt_type irc; geom_maxiter 50; irc_direction backward; }. frequencies('scf'). # Lower point group from C2v to C2; h2o2.reset_point_group('c2'). energy = optimize('scf'). compare_values(-150.8200278868627, energy, 5, ""Energy of last IRC point"") #TEST; --------------------------------------------------------------------------; hessian() will perform analytic frequency computation.; There are an even number of electrons - assuming singlet.; Specify the multiplicity in the molecule input block. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 1 Threads, 256 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H -0.000000000000 0.980353033500 -0.849954236217 1.007825032070; O -0.000000000000 0.698854518800 0.053554843883 15.994914619560; O 0.00000000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:1986,energy,energy,1986,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['energy'],['energy']
Energy Efficiency,"re faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same conditions. The only difference between the two computations is that I've switched the source of the integrals. The only explanation for this behavior I can come up with is that the libint2 library might have some kind of global lock that prevents independent threads (with their own independent `ElectrostaticInt` objects) from computing integrals in parallel. I don't know enough about how libint2 works to justify this idea. I'm very curious to hear other thoughts on this scaling issue. ### Plugin. The plugin (attached) requires adding `PSI_API` to a few classes (DFTGrid, MultipolePotentialInt). The following function is also necessary in `psi4/libmints/electrostatic.cc`:; ```; void ElectrostaticInt::set_origin(const Vector3& _origin) {; origin_ = _origin;; std::vector<std::pair<double, std::array<double",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:3527,schedul,scheduling,3527,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['schedul'],['scheduling']
Energy Efficiency,"re.RHF(ref_wfn, superfunc); E RuntimeError: ; E Fatal Error: You must add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Nuclear repulsion energy..........................................PASSED; =============================================================== 1 tests deselected ===============================================================; =================================== 10 failed, 4 passed, 4 skipped, 1 deselected, 1 xpassed in 193.31 seconds ====================================; ```. I excluded the `test_gdma` there because it's even weirder, as it crashes without output (`pytest -v -k 'test_gdma' /home/joao/current/lib/python3.6/site-packages/psi4/tests/*.py`):. ```; ============================================================== test session starts ===============================================================; platform linux -- Python 3.6.1, pytest-3.1.2, py-1.4.34, pluggy-0.4.0 -- /home/joao/miniconda3/bin/python; cachedir: ../../../../../../.cache; rootdir: /home/joao, inifile:; collected 20 items . ../../../../../../cur",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:43343,energy,energy,43343,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** tstart() called on xxx; *** at Tue Mar 28 17:20:51 2023. => Loading Basis Set <=. Name: DEF2-SVP; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry C line 90 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs; atoms 3-8 entry H line 15 file /home/manas/psi4conda/share/psi4/basis/def2-svp.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RKS Reference; 8 Threads",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:2008,energy,energy,2008,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['energy'],['energy']
Energy Efficiency,"reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3152,allocate,allocates,3152,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['allocate'],['allocates']
Energy Efficiency,"recent 5 function calls were:; ```; 2. HF/cc-pVDZ: Passed; 3. AO DF-CASSCF/cc-pVDZ: Passed; 4. DFT Smoketests; - B2PLYP/cc-pVDZ: Passed; - CAM-B3LYP/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:2845,energy,energy,2845,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,reduce sapt6 test for travis's sake,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/435:0,reduce,reduce,0,https://psicode.org,https://github.com/psi4/psi4/pull/435,1,['reduce'],['reduce']
Energy Efficiency,"ree(!) other experienced Psi developers and borrowing code from a fourth because the assumptions of the `libmints/libtrans` machinery are undocumented and confusing.; * At University of Georgia, the DCT code currently has to go through several contortions to be compatible with the gradient code. It has to [rewrite part of libtrans for RHF gradients](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_sort_mo_tpdm.cc) because the developer could not figure out what to send libtrans otherwise. It has to [convert LibDPD buffers into LibIWL](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L4815) buffers so `libtrans` can [convert those back to LibDPD buffers](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_sort_mo_tpdm.cc), but sorted differently. It also has to [re-index](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3839) its own 1PDM and energy-weighted density matrix, and merge [density matrix blocks into a single density matrix](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dct/dct_gradient_UHF.cc#L3789). These tasks shouldn't be necessary.; * @edeprince3 has also [rewritten parts of libtrans](https://github.com/edeprince3/v2rdm_casscf/blob/master/backtransform_tpdm.cc) to get V2RDM CASSCF gradients. As best as I can tell, the rewrite just changes orbital indexing conventions, but I could be mistaken.; * There is currently no general machinery for density-fitted correlated gradients. There are three(!) different modules with their own correlated gradient procedure: `dfmp2`, `dfocc`, and `dct`. `dfocc` [gradient technology](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/dfgrad.cc) does not make method-specific assumptions but cannot be used by other modules because it [uses](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/tei_grad_corr.cc#L181) [custom tensor machinery](https://github.com/psi4/psi4/blob/master/psi4/src/psi4",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:1686,energy,energy-weighted,1686,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['energy'],['energy-weighted']
Energy Efficiency,"reference RHF; e_convergence 12; }. energy('scf'); ```. ```; ==> Primary Basis <==. Basis Set: 3-21G; Number of shells: 32; Number of basis function: 48; Number of Cartesian functions: 48; Spherical Harmonics?: false; Max angular momentum: 1. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 21 21 8 8 8 0; A2 4 4 1 1 1 0; B1 8 8 2 2 2 0; B2 15 15 5 5 5 0; -------------------------------------------------------; Total 48 48 16 16 16 0; -------------------------------------------------------. ==> Integral Setup <==. Batch 1 pq = [ 0, 397] index = [ 0,79003]; ==> DiskJK: Disk-Based J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 715; Schwarz Cutoff: 1E-12. Minimum eigenvalue in the overlap matrix is 1.5083126009E-02.; Using Symmetric Orthogonalization.; SCF Guess: Generalized Wolfsberg-Helmholtz. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter 1: -187.27391666424671 -1.87274e+02 1.12539e-01; @RHF iter 2: -180.35110679174790 6.92281e+00 1.03058e-01 DIIS; @RHF iter 3: -189.00974758567247 -8.65864e+00 7.17009e-02 DIIS; @RHF iter 4: -190.36715264104453 -1.35741e+00 3.48777e-02 DIIS; @RHF iter 5: -190.83292951413978 -4.65777e-01 9.44992e-03 DIIS; @RHF iter 6: -190.87826214635624 -4.53326e-02 3.45136e-03 DIIS; @RHF iter 7: -190.88536867922011 -7.10653e-03 1.16084e-03 DIIS; @RHF iter 8: -190.88604640793187 -6.77729e-04 4.28749e-04 DIIS; @RHF iter 9: -190.88629946742424 -2.53059e-04 1.44181e-04 DIIS; @RHF iter 10: -190.88631371439720 -1.42470e-05 1.90608e-05 DIIS; @RHF iter 11: -190.88631410792334 -3.93526e-07 2.23723e-06 DIIS; @RHF iter 12: -190.88631411317886 -5.25552e-09 2.76348e-07 DIIS; @RHF iter 13: -190.88631411323206 -5.32054e-11 5.21575e-08 DIIS; @RHF iter 14: -190.88631411323365 -1.59162e-12 7.78940e-09 DIIS; @RHF iter 15: -190.88631411323342 2.27374e-13 9.99506e-10 DIIS. DF guess converged. ==>",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281:1589,Energy,Energy,1589,https://psicode.org,https://github.com/psi4/psi4/issues/281,1,['Energy'],['Energy']
Energy Efficiency,"reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.001458305. --------------------------------------------------------------------; He+Charge (q = -1.0, r = 1.0 Ang.). PSI4 gradient without charges:; 1 0.000000000000 0.000000000000 0.000000000000. Gaussian forces without charges:; 1 2 0.000000000 0.000000000 0.000000000. PSI4 gradient with charg",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1966,Charge,Charges,1966,https://psicode.org,https://github.com/psi4/psi4/issues/184,2,"['Charge', 'charge']","['Charges', 'charges']"
Energy Efficiency,"reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1741,energy,energy,1741,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"regenerated the reference molden.refs with e_convergence 12 and plain diis, then relaxed the convergence for normal running. no trouble with adiis. sound ok, @sgoodlett?; - [ ] @hokru, on the new dft_blocking_schemes test, I'm getting `OCTREE GRID POINTS:: computed value (293260.0) does not match (293259) by difference (1.0).` Is it reasonable to test for 293259 +/- 2 or so?. ```. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; Energy and wave function converged. @RHF iter SAD: -672.15146809832379 -6.72151e+02 0.00000e+00; @RHF iter 1: -672.63084564264716 -4.79378e-01 9.00814e-03 DIIS; @RHF iter 2: -672.71442224758289 -8.35766e-02 5.30043e-03 DIIS; @RHF iter 3: -672.74379684057214 -2.93746e-02 5.52535e-04 DIIS; @RHF iter 4: -672.74452788784220 -7.31047e-04 1.91489e-04 DIIS; @RHF iter 5: -672.74459677446487 -6.88866e-05 5.52833e-05 DIIS; @RHF iter 6: -672.74460689141483 -1.01169e-05 1.01025e-05 DIIS; @RHF iter 7: -672.74460730536885 -4.13954e-07 1.76374e-06 DIIS; @RHF iter 8: -672.74460731378190 -8.41305e-09 7.61045e-07 DIIS; @RHF iter 9: -672.74460731474380 -9.61904e-10 2.09614e-07 DIIS; @RHF iter 10: -672.74460731487704 -1.33241e-10 6.64041e-08 DIIS; @RHF iter 11: -672.74460731489182 -1.47793e-11 1.26692e-08 DIIS; @RHF iter 12: -672.74460731489194 -1.13687e-13 2.66098e-09 DIIS; @RHF iter 13: -672.74460731489341 -1.47793e-12 6.52605e-10 DIIS; @RHF iter 14: -672.74460731489307 3.41061e-13 2.24066e-10 DIIS; @RHF iter 15:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2446:1729,Energy,Energy,1729,https://psicode.org,https://github.com/psi4/psi4/pull/2446,1,['Energy'],['Energy']
Energy Efficiency,requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb; memory requirements = 36451.32 mb. ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2177,energy,energy,2177,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,results of psi4 1.1 is this; ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696.23196743 -6.96e+02 6.60e-04 2.45e-04 o 3.67e-03 1.31e-03 o ~; 2 -696.23202825 -6.08e-05 2.89e-04 * 9.64e-05 o 3.98e-03 1.27e-03 o ~; 3 -696.23204984 -2.16e-05 1.78e-04 * 5.02e-05 o 2.05e-03 7.01e-04 o ~; 4 -696.23205372 -3.88e-06 1.35e-04 * 3.92e-05 o 4.27e-03 1.33e-03 o ~; 5 -696.23205950 -5.79e-06 6.65e-05 * 1.71e-05 o 9.47e-04 * 2.94e-04 o ~; ```; And; results of psi4 1.2 is this; ```; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696.23196742 -6.96e+02 6.43e-02 1.88e-02 o 2.04e-02 6.09e-03 o ~; 2 -696.23181077 1.57e-04 6.10e-02 1.83e-02 o 1.93e-02 6.09e-03 o ~; 3 -696.23126151 5.49e-04 5.77e-02 1.78e-02 o 1.93e-02 6.09e-03 o ~; 4 -696.23034152 9.20e-04 5.45e-02 1.73e-02 o 1.93e-02 6.09e-03 o ~; 	Raising dynamic level to 4. ~; --------------------------------------------------------------------------------------------- ~; Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; --------------------------------------------------------------------------------------------- ~; Convergence Criteria 1.00e-06 * 3.00e-04 * o 1.20e-03 * o ~; --------------------------------------------------------------------------------------------- ~; 1 -696,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1094#issuecomment-405297422:142,Energy,Energy,142,https://psicode.org,https://github.com/psi4/psi4/issues/1094#issuecomment-405297422,2,['Energy'],['Energy']
Energy Efficiency,"rfunc); E MemoryError: std::bad_alloc. /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: MemoryError; _____________________________________________________________ test_psi4_scfproperty ______________________________________________________________. def test_psi4_scfproperty():; """"""scf-property""""""; #! UFH and B3LYP cc-pVQZ properties for the CH2 molecule.; ; with open('grid.dat', 'w') as handle:; handle.write(""""""\; 0.0 0.0 0.0; 1.1 1.3 1.4; """"""); ; ch2 = psi4.geometry(""""""; 0 3; c; h 1 b1; h 1 b1 2 a1; ; b1 = 1.0; a1 = 125.0; """"""); ; # Get a reasonable guess, to save some iterations; psi4.set_options({; ""scf_type"": ""pk"",; ""basis"": ""6-31G**"",; ""e_convergence"": 8,; ""docc"": [2, 0, 0, 1],; ""socc"": [1, 0, 1, 0],; ""reference"": ""uhf""}); ; ch2.update_geometry(); assert psi4.compare_values(6.648418918908746, ch2.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy""); ; props = ['DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES', 'LOWDIN_CHARGES',; 'WIBERG_LOWDIN_INDICES', 'MAYER_INDICES', 'MAYER_INDICES',; 'MO_EXTENTS', 'GRID_FIELD', 'GRID_ESP', 'ESP_AT_NUCLEI',; 'MULTIPOLE(5)', 'NO_OCCUPATIONS']; ; > psi4.property('scf', properties=props). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:211: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:823: in property; wfn = procedures['property'][lowername](lowername, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2370: in run_scf_property; scf_wfn = run_scf(name, scf_do_dipole=False, do_timer=False, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:39957,energy,energy,39957,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"rgies [Eh]; ---------------------. Doubly Occupied:. 1A -9.811979 2A -9.811957 3A -0.686974; 4A -0.549234 5A -0.403737 6A -0.403737; 7A -0.338480 8A -0.310133 9A -0.310133. Virtual:. 10A 0.023031 11A 0.076058 12A 0.080886; 13A 0.080887 14A 0.110657 15A 0.110658; 16A 0.173580 17A 0.360176 18A 0.370157; 19A 0.370158 20A 0.455135 21A 0.455137; 22A 0.543892 23A 0.571369 24A 0.610757; 25A 0.610759 26A 0.613674 27A 0.623635; 28A 0.623637 29A 0.682101 30A 0.875957; 31A 1.031832 32A 1.031833 33A 1.292103; 34A 1.292104 35A 1.442476 36A 1.448632; 37A 1.662612 38A 1.675074 39A 1.675078; 40A 1.685189 41A 1.685192 42A 1.745843; 43A 1.745846 44A 1.748838 45A 1.953626; 46A 1.953628 47A 2.104265 48A 2.256310; 49A 2.256312 50A 2.286838 51A 2.457344; 52A 2.457345 53A 2.522627 54A 2.738613; 55A 2.803606 56A 2.803611 57A 2.896284; 58A 2.896288 59A 5.038202 60A 5.264241. Final Occupation by Irrep:; A; DOCC [ 9 ]; NA [ 9 ]; NB [ 9 ]. @DF-RKS Final Energy: -79.32647565991985. => Energetics <=. Nuclear Repulsion Energy = 42.0362430486042129; One-Electron Energy = -188.7935335064416904; Two-Electron Energy = 79.9597081286466675; DFT Exchange-Correlation Energy = -12.5288933307290371; Empirical Dispersion Energy = 0.0000000000000000; VV10 Nonlocal Energy = 0.0000000000000000; Total Energy = -79.3264756599198506. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. **",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:8520,Energy,Energy,8520,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['Energy'],['Energy']
Energy Efficiency,"rgy: -75.98014187231389; 401: ; 401: => Energetics <=; 401: ; 401: Nuclear Repulsion Energy = 8.8014620606294294; 401: One-Electron Energy = -122.2750929709242769; 401: Two-Electron Energy = 37.4934890379809431; 401: Total Energy = -75.9801418723139079; 401: ; 401: ; 401: ; 401: Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; 401: ; 401: Properties computed using the HF density matrix; 401: ; 401: Nuclear Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0191; 401: ; 401: Electronic Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 0.0213; 401: ; 401: Dipole Moment: [e a0]; 401: X: 0.0000 Y: 0.0000 Z: 1.0404 Total: 1.0404; 401: ; 401: Dipole Moment: [D]; 401: X: 0.0000 Y: 0.0000 Z: 2.6444 Total: 2.6444; 401: ; 401: Quadrupole Moment: [D A]; 401: XX: -7.3007 YY: -4.1363 ZZ: -5.8725; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Traceless Quadrupole Moment: [D A]; 401: XX: -1.5309 YY: 1.6335 ZZ: -0.1027; 401: XY: -0.0000 XZ: 0.0000 YZ: -0.0000; 401: ; 401: Mulliken Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.39836 4.39836 0.00000 -0.79673; 401: 2 H 0.30082 0.30082 0.00000 0.39836; 401: 3 H 0.30082 0.30082 0.00000 0.39836; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: Lowdin Charges: (a.u.); 401: Center Symbol Alpha Beta Spin Total; 401: 1 O 4.29726 4.29726 0.00000 -0.59451; 401: 2 H 0.35137 0.35137 0.00000 0.29726; 401: 3 H 0.35137 0.35137 0.00000 0.29726; 401: ; 401: Total alpha = 5.00000, Total beta = 5.00000, Total charge = 0.00000; 401: ; 401: ; 401: Mayer Bond Indices:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.80206409286279 0.80206409286279; 401: 2 0.80206409286279 0.00000000000000 0.00302003360260; 401: 3 0.80206409286279 0.00302003360260 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:7354,Charge,Charges,7354,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['Charge'],['Charges']
Energy Efficiency,"rgy; 168/185 Test #499: python-energy .................... Passed 2.39 sec; Start 500: python-curve; 169/185 Test #500: python-curve ..................... Passed 3.30 sec; Start 502: python-mints9; 170/185 Test #502: python-mints9 .................... Passed 2.66 sec; Start 503: python-mints2; 171/185 Test #503: python-mints2 .................... Passed 3.51 sec; Start 504: python-cc54; 172/185 Test #504: python-cc54 ...................... Passed 9.24 sec; Start 505: python-3-index-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/185 Test #510: json-schema-1-energy ............. Passed 3.74 sec; Start 514: json-schema-1-gradient; 179/185 Test #514: json-schema-1-gradient ........... Passed 2.98 sec; Start 518: dftd3-energy; 180/185 Test #518: dftd3-energy ..................... Passed 50.87 sec; Start 523: sapt0-d; 181/185 Test #523: sapt0-d .......................... Passed 440.00 sec; Start 524: fsapt-d; 182/185 Test #524: fsapt-d .......................... Passed 542.90 sec; Start 525: fsaptd-terms; 183/185 Test #525: fsaptd-terms .....................***Failed 17.57 sec; Start 526: dftd4-energy; 184/185 Test #526: dftd4-energy ..................... Passed 129.00 sec; Start 527: dftd4-r2scan; 185/185 Test #527: dftd4-r2scan .....................***Failed 9.40 sec. 95% tests passed, 9 tests failed out of 185. Label Time Summary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 77",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:16730,energy,energy,16730,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"rid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground state SCF energy; scf_energy = psi4.energy('scf'). # Compute TD-DFT excited state energies; td_options = {; 'tdscf_type': 'full',; 'roots_per_irrep': [1, 0, 0, 0],; }; psi4.set_options(td_options); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3013,energy,energy,3013,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,['energy'],['energy']
Energy Efficiency,"right now, one gets (wfn) sapt0-inf through sapt(dft). in light of that new addition, plus outright sapt(dft) plus sapt0-d, take a wholistic looks at the arguments to `energy(sapt*)`. EDIT: sf-sapt, too",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1835:168,energy,energy,168,https://psicode.org,https://github.com/psi4/psi4/issues/1835,1,['energy'],['energy']
Energy Efficiency,"ring the HF energy of the first Brueckner iteration as `SCF TOTAL ENERGY` and the quantities from the final B iteration as `CCSD TOTAL ENERGY`, `CCSD(T) TOTAL ENERGY`, and `(T) CORRECTION ENERGY`. In the below, I've reworked it so:; * final B energies get their own qcvars `(BCCD|BCCD(T)) (TOTAL|CORRELATION) ENERGY` in accordance with the principle that `energy(mtd)` should set `mtd TOTAL ENERGY`; * MP2 and CCSD qcvars are now collected from the first B iteration, not the last, so they have canonical values. `SCF TOTAL ENERGY` still from first B iteration.; * `(BCCD|BCCD(T)) CORRELATION ENERGY` now defined as total E of last B iteration minus HF of first B iteration. This is in accordance with the pattern that `mtd CORRELATION ENERGY` = `mtd TOTAL ENERGY` - `SCF TOTAL ENERGY`, but it is admittedly wacky when applied to Brueckner. It is, however, the same way the orbital-optimized methods of occ/dfocc have been handled. The OO methods additionally set a `mtd REFERENCE CORRECTION ENERGY` so that one can recover the ref/corl split of the final OO iteration. That could be added to the BCCD methods. Does the above sound ok, or does it need further reworking? I also tightened up the B r_conv formula a bit because the standard tests (not shown in PR) weren't matching (to 1.e-6) the highly converged values under default conditions (e_conv = 6 --> brueckner_r_conv =4). I've also been on a rampage of late to better (and automatically) document what methods are available under what detailed conditions (e.g., dertype, reference, conv/df/cd type, all-electron/frozen-core). I'd like to add the table snapshotted below to the main [CC docs page](https://psicode.org/psi4manual/master/cc.html). Unfortunately, it doesn't cover excited states or properties, so it can't replace the existing summary table, but it does provide more detail. Does it look ok, and are there any cc* capabilities in the ground-state realm that I've missed?. **Note:** No worries if the CI on this fails. I've copi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708:1111,ENERGY,ENERGY,1111,https://psicode.org,https://github.com/psi4/psi4/pull/2708,1,['ENERGY'],['ENERGY']
Energy Efficiency,"rint(psi4.energy('scf/cc-pvdz')); ```. ### Complete traceback :; ```; /Users/vandanrevanur/anaconda3/envs/psi4_env_36/bin/python /Users/vandanrevanur/personal/codes/chemistry/psi4_stuff/psi4_testing.py . Memory set to 476.837 MiB by Python driver. Scratch directory: /tmp/. Scratch directory: /tmp/. *** tstart() called on Temps-MacBook-Pro.local; *** at Mon Apr 24 13:23:21 2023. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 198 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs ; atoms 2-3 entry H line 22 file /Users/vandanrevanur/anaconda3/envs/psi4_env_36/share/psi4/basis/cc-pvdz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; RHF Reference; 1 Threads, 476 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.065775570547 15.994914619570; H 0.000000000000 -0.759061990794 0.521953018286 1.007825032230; H 0.000000000000 0.759061990794 0.521953018286 1.007825032230. Running in c2v symmetry. Rotational constants: A = 27.26297 B = 14.51533 C = 9.47217 [cm^-1]; Rotational constants: A = 817323.21126 B = 435158.60141 C = 283968.37536 [MHz]; Nuclear repulsion = 9.168193296424349. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 12; Number of basis functions: 24; Number of Cartesian functions: 25; Spherical Harmonics?: true",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2930:1549,charge,charge,1549,https://psicode.org,https://github.com/psi4/psi4/issues/2930,1,['charge'],['charge']
Energy Efficiency,"rminants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:; >; > * 1 -0.887365 ( 0, 0) 7AX 8AX; >; > * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB; >; > * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA; >; > * 4 0.206936 ( 2, 2) 8AX 9AX; >; > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:2022,ENERGY,ENERGY,2022,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,2,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"rn_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /home/conda/feedstock_root/build_artifacts/psi4_16",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:4036,energy,energy,4036,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"rocedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File [REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 2455, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/proc.py"", line 1670, in scf_helper; e_scf = scf_wfn.compute_energy(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 86, in scf_compute_energy; self.iterations(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/scf_iterator.py"", line 412, in scf_iterate; for engine_used in self.diis(Dnorm):; File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/scf_proc/subclass_methods.py"", line 111, in _RHF_diis; return self.diis_manager_.extrapolate(self.Fa(), Dnorm=Dnorm); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.py"", line 407, in extrapolate; coeffs = m * initial_coefficient_function() + (1 - m) * self.diis_coefficients(); File ""[REMOVED BASE DIRECTORY]/lib/psi4/driver/procrouting/diis.py"", line 288, in adiis_coefficients; raise Exception(""ADIIS minimization failed. File a bug, and include your entire input and output files.""). Exception: ADIIS minimization failed. File a bug, and include your entire input and output files. Printing out the relevant lines from the Psithon --> Python processed input file:; no_com; symmetry c1; """""",""mol""); core.IO.set_default_namespace(""mol""); mol.update_geometry(); --> e, wf = energy('wb97m-v',return_wfn=True,). !----------------------------------------------------------------------------------!; ! !; ! ADIIS minimization failed. File a bug, and include your entire input and output !; ! files. !; ! !; !----------------------------------------------------------------------------------!. Psi4 stopped on: Friday, 22 July 2022 01:19PM; Psi4 wall time for execution: 0:02:55.44. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:13051,energy,energy,13051,https://psicode.org,https://github.com/psi4/psi4/issues/2641,1,['energy'],['energy']
Energy Efficiency,rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 18.93 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 0.79 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.18 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 44.97 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 2.10 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.42 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 4.64 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.23 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.73 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 1.03 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 1.88 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 2.00 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.09 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.55 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.65 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.32 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.08 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.10 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 1.17 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370:36687,energy,energy,36687,https://psicode.org,https://github.com/psi4/psi4/pull/1073#issuecomment-406985370,2,['energy'],['energy']
Energy Efficiency,rohf-orb-rot; 387/411 Test #386: cookbook-rohf-orb-rot ............ Passed 33.29 sec; Start 387: python-energy; 388/411 Test #387: python-energy .................... Passed 1.08 sec; Start 388: python-curve; 389/411 Test #388: python-curve ..................... Passed 2.87 sec; Start 389: python-pubchem; 390/411 Test #389: python-pubchem ................... Passed 43.85 sec; Start 390: python-mints9; 391/411 Test #390: python-mints9 .................... Passed 1.78 sec; Start 391: python-mints2; 392/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 393/411 Test #392: python-cc54 ...................... Passed 9.47 sec; Start 393: python-3-index-transforms; 394/411 Test #393: python-3-index-transforms ........ Passed 9.40 sec; Start 395: python-mints13; 395/411 Test #395: python-mints13 ................... Passed 1.93 sec; Start 396: python-memdfjk; 396/411 Test #396: python-memdfjk ................... Passed 0.97 sec; Start 397: json-v11-energy; 397/411 Test #397: json-v11-energy .................. Passed 2.02 sec; Start 398: json-v11-gradient; 398/411 Test #398: json-v11-gradient ................ Passed 1.15 sec; Start 399: json-schema-1-energy; 399/411 Test #399: json-schema-1-energy ............. Passed 1.84 sec; Start 400: json-schema-1-ghost; 400/411 Test #400: json-schema-1-ghost .............. Passed 1.05 sec; Start 401: json-schema-1-orient; 401/411 Test #401: json-schema-1-orient ............. Passed 1.49 sec; Start 402: json-schema-1-throws; 402/411 Test #402: json-schema-1-throws ............. Passed 0.59 sec; Start 403: json-schema-1-gradient; 403/411 Test #403: json-schema-1-gradient ........... Passed 1.45 sec; Start 404: json-schema-1-properties; 404/411 Test #404: json-schema-1-properties ......... Passed 1.90 sec; Start 405: skeleton; 405/411 Test #405: skeleton ......................... Passed 1.11 sec; Start 406: skeletonaointegrals; 406/411 Test #406: skeletonaointegrals .............. Passed 0.98 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:36716,energy,energy,36716,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['energy'],['energy']
Energy Efficiency,"rom full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symmetry in the acenes was that compared to previous work that had ""showed"" it preserves sigma-pi symmetry, the line search implemented in my code actually just went close to the symmetry preserving saddle point solution, and then recovered from it to decrease the energy quite a lot to break the sigma-pi symmetry. There's often enough of numerical noise so that your solution vector picks up some component of the symmetry breaking dimension. In DIIS you can make these problems converge by increasing the DIIS history length, but then you often see that the SCF is actually going up in energy in the later calculation. Increasing the history length from the default (I think mine is 5, 6, or 7 iterations) to something like 15-25 allows the DIIS procedure to find enough linearly independent vectors to enforce that the resulting orbitals are going to belong to an extremal point. However, these points often then turn out to be saddle points, in which you can decrease the energy slightly (or a lot more) by moving some weight from an orbital to another... Then you have the true second-order schemes, like Newton-Raphson SCF and trust region SCF. These are bound to give you a local solution, but they are 1) unreliable and 2) slow in the initial phases of the calculation. It is better to do first some ADIIS/EDIIS to get you to a reasonable solution, and only then start refining it with something fancier. Also GDM is a great solution for the initial phase of the calculation, since as you have a **guarantee** that you are t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:4319,energy,energy,4319,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['energy'],['energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: BLYP <=. BLYP GGA Exchange-Correlation Functional. P.J. Stephens et. al., J. Phys. Chem., 98, 11623-11627, 1994; B. Miehlich et. al., Chem. Phys. Lett., 157(3), 200-206 1989. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_B88. => Correlation Functionals <=. 1.0000 XC_GGA_C_LYP. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. ------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:9591,Energy,Energy,9591,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: FT97 <=. FT97 GGA Exchange-Correlation Functional. M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_FT97_B. => Correlation Functionals <=. 1.0000 XC_GGA_C_FT97. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:14625,Energy,Energy,14625,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RKS Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; NE 0.000000000000 0.000000000000 0.000000000000 19.992440175420. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is DIRECT.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Blend: CC-PVDZ; Number of shells: 6; Number of basis function: 14; Number of Cartesian functions: 15; Spherical Harmonics?: true; Max angular momentum: 2. ==> DFT Potential <==. => Composite Functional: PBE <=. PBE GGA Exchange-Correlation Functional. J.P. Perdew et. al., Phys. Rev. Lett., 77(18), 3865-3868, 1996. Deriv = 1; GGA = TRUE; Meta = FALSE. Exchange Hybrid = FALSE; MP2 Hybrid = FALSE. => Exchange Functionals <=. 1.0000 XC_GGA_X_PBE. => Correlation Functionals <=. 1.0000 XC_GGA_C_PBE. => Molecular Quadrature <=. Radial Scheme = TREUTLER; Pruning Scheme = FLAT; Nuclear Scheme = TREUTLER. BS radius alpha = 1; Pruning alpha = 1; Radial Points = 99; Spherical Points = 770; Total Points = 66220; Total Blocks = 555; Max Points = 253; Max Functions = 14. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Nd",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:4683,Energy,Energy,4683,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['Energy'],['Energy']
Energy Efficiency,"roots of LiCN with CIS/6-31G*, which may have uncovered some deeper problems. the main issue: the lowest-energy solution as predicted by GAMESS (and my own code, which diagonalizes the Hamiltonian by simply calling `np.linalg.eigh`) is completely skipped by Psi4, despite the following roots being the same. GAMESS predicts the following first six excited state energies (the RHF energy matching to 6 decimals):; ```; GAMESS LiCN/6-31G*; CONVERGED STATE 1 ENERGY= -99.5348374214; CONVERGED STATE 2 ENERGY= -99.5315000308; CONVERGED STATE 3 ENERGY= -99.5315000308; CONVERGED STATE 4 ENERGY= -99.5258078193; CONVERGED STATE 5 ENERGY= -99.5258078193; CONVERGED STATE 6 ENERGY= -99.5095744807; ```; while Psi4 predicts:; ```; Psi4 LiCN/6-31G* (symmetry c1, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.5315015582624; CI ROOT 2 TOTAL ENERGY:-99.53150155297872; CI ROOT 3 TOTAL ENERGY:-99.52581092386518; CI ROOT 4 TOTAL ENERGY:-99.52581092379563; CI ROOT 5 TOTAL ENERGY:-99.5096013650753; CI ROOT 6 TOTAL ENERGY:-99.48378441050741; ````; this result doesn't change with or without frozen core, but the results are fine with STO-3G, as well as water with 6-31G*. the results also match GAMESS if I perturb the linear geometry of LiCN, as suggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:1064,ENERGY,ENERGY,1064,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"rote a script that could check the available methods and options for the excited states, I got a return message showing the available options but no available methods was shown. Here's the script I ran to obtain the ground state PEC:. import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1196,Energy,Energy,1196,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,2,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"round state energy at bond length {bond_length}: {str(e)}""); return float('nan'). def compute_energies(bond_length, num_states, methods_to_try):; psi4.core.set_output_file('output.dat', False); ; cf_molecule = psi4.geometry(f""""""; 0 2; C; F 1 {bond_length}; symmetry c1; units angstrom; """"""). psi4.set_options({; 'basis': 'cc-pvtz',; 'reference': 'uhf',; 'scf_type': 'pk',; 'e_convergence': 1e-8,; 'd_convergence': 1e-8,; 'maxiter': 500,; }). energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. try:; scf_e, scf_wfn = psi4.energy('scf', return_wfn=True). for method in methods_to_try:; psi4.set_options({f'{method.lower()}__nroots': num_states}); energy, wfn = psi4.energy(method, return_wfn=True); for state in range(1, num_states + 1):; if energy is not None: # Check if energy calculation was successful; energies[method][state].append(energy[state - 1]); wfns[method][state].append(wfn[state - 1]); else:; energies[method][state].append(float('nan')); wfns[method][state].append(None). except Exception as e:; print(f""Error computing energies at bond length {bond_length}: {str(e)}""); energies = {method: {state: [float('nan')] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [None] for state in range(1, num_states + 1)} for method in methods_to_try}. return energies, wfns. def generate_potential_energy_curves():; bond_lengths = np.arange(1.0, 10.2, 0.2); num_states = 6; methods_to_try = ['EOM-CCSD', 'EOM-CC2', 'EOM-CC3', 'EOM-CCSDT']. energies = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}; wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:1775,energy,energy,1775,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,"route for example `energy('scs-mp3')` through managed method proc routines, otherwise mp3 may route to df and scs-mp3 route to conv.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968:19,energy,energy,19,https://psicode.org,https://github.com/psi4/psi4/issues/1796#issuecomment-683315968,1,['energy'],['energy']
Energy Efficiency,"rrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). -----------------------------------------------------------------------. Psi4 started on: Wednesday, 25 October 2017 01:40PM. Process ID: 40933; PSIDATADIR: /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; #! 6-31G** H2O+ Test CISD Energy Point. refnuc = 8.8046866186391 #TEST; refscf = -75.6213422266812 #TEST; refci = -75.7850671871149 #TEST; refcorr = refci - refscf #TEST. molecule h2o {; 0 1; O; H 1 1.00; H 1 1.00 2 103.1; }. set {; # reference rohf; basis 6-31G**; freeze_core true; # icore 0; }. thisenergy = energy('cisd'). #compare_values(refnuc, h2o.nuclear_repulsion_energy(), 9, ""Nuclear repulsion energy"") #TEST ; #compare_values(refscf, get_variable(""SCF total energy""), 7, ""SCF energy"") #TEST; #compare_values(refci, thisenergy, 7, ""CI energy"") #TEST; #compare_values(refcorr, get_variable(""CI CORRELATION ENERGY""), 7, ""CI correlation energy"") #TEST; --------------------------------------------------------------------------. *** tstart() called on mac-psinet.sherrill.chemistry.gatech.ed; *** at Wed Oct 25 13:40:59 2017. => Loading Basis Set <=. Name: 6-31G**; Role: ORBITAL; Keyword: BASIS; atoms 1 entry O line 149 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs ; atoms 2-3 entry H line 44 file /Users/github/Git/tmppsi/objdir-ompclang3/stage/usr/local/psi4/share/psi4/basis/6-31gss.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ -------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:1670,energy,energy,1670,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,6,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,rt ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020798 -0.000351118130; @IRC 2 -148.751921813074 -0.001007792276; @IRC 3 -148.753458618742 -0.001536805668; @IRC 4 -148.755338547032 -0.001879928290; @IRC 5 -148.757353153648 -0.002014606616; @IRC 6 -148.759306859381 -0.001953705733; @IRC 7 -148.761045995000 -0.001739135620; @IRC 8 -148.762474848907 -0.001428853907; @IRC 9 -148.763557315941 -0.001082467034; @IRC 10 -148.764306952859 -0.000749636918; @IRC 11 -148.764771569930 -0.000464617071; @IRC 12 -148.765017199626 -0.000245629697; @IRC 13 -148.765113810904 -0.000096611278; @IRC 14 -148.765124131311 -0.000010320407; @IRC 15 -148.765124131554 -0.000000000244; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC ----------------------------------------------; @IRC 0 -148.750562902668 -148.750562902668; @IRC 1 -148.750914020614 -0.000351117946; @IRC 2 -148.751921813072 -0.001007792458; @IRC 3 -148.753458618806 -0.001536805734; @IRC 4 -148.755338546954 -0.001879928149; @IRC 5 -148.757353153393 -0.002014606439; @IRC 6 -148.759306859244 -0.001953705851; @IRC 7 -148.761045994807 -0.001739135563; @IRC 8 -148.762474848960 -0.001428854153; @IRC 9 -148.763557315823 -0.001082466863; @IRC 10 -148.764306952777 -0.000749636954; @IRC 11 -148.764771569804 -0.000464617027; @IRC 12 -148.765017199652 -0.000245629848; @IRC 13 -148.765113811017 -0.000096611365; @IRC 14 -148.765113820352 -0.000000009335; @IRC ----------------------------------------------. @IRC ----------------------------------------------; @IRC **** IRC Report ****; @IRC ----------------------------------------------; @IRC Step Energy Change in Energy ; @IRC -------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/860#issuecomment-351195913:4141,Energy,Energy,4141,https://psicode.org,https://github.com/psi4/psi4/issues/860#issuecomment-351195913,2,['Energy'],['Energy']
Energy Efficiency,rt 2: adc2; 1/411 Test #1: adc1 ............................. Passed 24.09 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 2.52 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 3.06 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 41.92 sec; Start 6: ao-casscf-sp; 5/411 Test #5: casscf-sa-sp ..................... Passed 13.45 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 4.76 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 1.92 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:1497,energy,energy,1497,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"rt(normz); > test_zero_grad(normz); > ; > # And behold, the initial gradient matches Q-Chem, the optimization; > ; > # progresses nicely, the RMS Force column goes to zero, and the gradient; > ; > # at the end is zero.; > ; > # start nre.........................................................PASSED; > ; > # start ene.........................................................PASSED; > ; > # start rms grad....................................................PASSED; > ; > # start grad........................................................PASSED; > ; > #Optimizer: Optimization complete!; > ; > # opt nre...........................................................PASSED; > ; > # opt ene...........................................................PASSED; > ; > # opt ZERO grad.....................................................PASSED; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # Step Total Energy Delta E MAX Force RMS Force MAX Disp RMS Disp ~; > ; > # --------------------------------------------------------------------------------------------------------------- ~; > ; > # 1 -139.530718293045 -139.530718293045 0.05695995 0.03625240 0.19767161 0.12159384 ~; > ; > # 2 -139.555614729326 -0.024896436281 0.02341593 0.00968824 0.06857406 0.03977721 ~; > ; > # 3 -139.556998324542 -0.001383595215 0.00950087 0.00516674 0.02878292 0.01662559 ~; > ; > # 4 -139.557349947407 -0.000351622866 0.00371412 0.00163364 0.01005622 0.00527025 ~; > ; > # 5 -139.557391640737 -0.000041693330 0.00051457 0.00018711 0.00138018 0.00067210 ~; > ; > # 6 -139.557392223903 -0.000000583166 0.00004140 0.00002031 0.00028542 0.00012144 ~; > ; > # 7 -139.557392234146 -0.000000010243 0.00001186 0.00000566 0.00004411 0.00002377 ~; > ; > # 8 -139.557392234594 -0.000000000448 0.00000420 0.00000194 0.00001643 0.00000834 ~; > ; > # 9 -139.557392234645 -0.000000000051 0.00000176 0.00000074 0.00000686 0.00000306 ~; > ; > # 10 -139.557392",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-195966638:5197,Energy,Energy,5197,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-195966638,1,['Energy'],['Energy']
Energy Efficiency,"rted on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_R",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:2551,charge,charge,2551,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['charge'],['charge']
Energy Efficiency,rve; 382/411 Test #388: python-curve ..................... Passed 3.62 sec; Start 389: python-pubchem; 383/411 Test #359: tu6-cp-ne2 ....................... Passed 242.76 sec; Start 390: python-mints9; 384/411 Test #390: python-mints9 .................... Passed 1.79 sec; Start 391: python-mints2; 385/411 Test #391: python-mints2 .................... Passed 2.86 sec; Start 392: python-cc54; 386/411 Test #373: dft-custom-mgga .................. Passed 171.61 sec; Start 393: python-3-index-transforms; 387/411 Test #393: python-3-index-transforms ........ Passed 9.10 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.85 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.02 sec; Start 397: json-v11-energy; 390/411 Test #397: json-v11-energy .................. Passed 3.88 sec; Start 398: json-v11-gradient; 391/411 Test #398: json-v11-gradient ................ Passed 1.67 sec; Start 399: json-schema-1-energy; 392/411 Test #392: python-cc54 ...................... Passed 26.83 sec; Start 400: json-schema-1-ghost; 393/411 Test #400: json-schema-1-ghost .............. Passed 1.29 sec; Start 401: json-schema-1-orient; 394/411 Test #401: json-schema-1-orient ............. Passed 2.53 sec; Start 402: json-schema-1-throws; 395/411 Test #399: json-schema-1-energy ............. Passed 4.07 sec; Start 403: json-schema-1-gradient; 396/411 Test #402: json-schema-1-throws ............. Passed 0.62 sec; Start 404: json-schema-1-properties; 397/411 Test #403: json-schema-1-gradient ........... Passed 1.92 sec; Start 405: skeleton; 398/411 Test #404: json-schema-1-properties ......... Passed 1.48 sec; Start 406: skeletonaointegrals; 399/411 Test #405: skeleton ......................... Passed 1.51 sec; Start 407: skeletondfmp2; 400/411 Test #406: skeletonaointegrals .............. Passed 1.67 sec; Start 408: skeletonmointegrals; 401/411 Test #407: skeletondfmp2 .................... Passed 1.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:36585,energy,energy,36585,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,"ry installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion with dipole-dipole polarizabilities at the expansion sites (#1401) ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Int",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:729,energy,energy,729,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,"['charge', 'energy']","['charge', 'energy']"
Energy Efficiency,"s I get the following error when performing a CASSCF calculation with a given input wavefunction. Here is an example:. ```; import psi4; molecule_string = """"""; O 1.56850 0.10589 0.00001; N -1.39559 -0.02156 0.00004; H -1.62981 0.96110 -0.10622; H -1.86277 -0.51254 -0.75597; H -1.83355 -0.33077 0.86231; H 0.60674 -0.03396 -0.00063; H 1.94052 -0.78000 0.00022; """"""; add_input = ""\nsymmetry c1\nno_reorient\nno_com""; mol = psi4.geometry(molecule_string + add_input); N_active = 11 # Define the total number of active MOs.; N_frozen = 4 # Define the number of frozen occupied MO; N_virtual = 30 # Define the total number of virtual MOs that will be discarded; psi4.set_options({ 'ACTIVE' : [ N_active ],\; 'FROZEN_DOCC' : [ N_frozen ],\; 'FROZEN_UOCC' : [ N_virtual],\; 'DIAG_METHOD' : 'DAVIDSON',\; 'CI_MAXITER' : 200\; }). # assuming you have stored you scf_wfn into water-ammonia.npy:; original_wfn = psi4.core.Wavefunction.from_file(""water-ammonia""). print(""HF energy:"",original_wfn.energy()); CASCI_energy = psi4.energy('fci', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASCI energy:"",CASCI_energy); CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); print(""CASSCF :"",CASSCF_energy); ```. This outputs:; ```; HF energy : -130.74589276437956; CASCI energy : -130.7730891288199; ```. and then the error:; ```; ==> Setting up CI strings <==. There are 462 alpha and 462 beta strings; The CI space requires 213444 (2.13E+05) determinants and 1 blocks. ==> Setting up MCSCF integrals <==. Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Gi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1871:1142,energy,energy,1142,https://psicode.org,https://github.com/psi4/psi4/issues/1871,1,['energy'],['energy']
Energy Efficiency,"s a cutoff for small weights. The grid points with small weights are not included in the final grid. Such a cutoff is a standard procedure in many programs. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] expert option `DFT_WEIGHTS_TOLERANCE` keyword (current default `1e-14`).; - [x] small error overview added; - [x] together with pruning ca. 40% faster calculation for C60 compared to `v1.3` :-); - [x] simple test added. ## Questions; - [x] which default value? -> `1e-15` conservative or `1e-14` like in ORCA. ## Checklist; - [x] all `ctest -L dft` pass. ## Status; - [x] Ready for review; - [x] Ready for merge. ------; water dimer (RKS total energy): `PBE/aug-cc-pVTZ (99,520)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 350460 | ; | 1e-30 | 1.36e-12 | 349417 |; | 1e-25 | 1.65e-12 | 348670 |; | 1e-20 | 1.65e-12 | 346918 |; | 1e-18 | 1.68e-12 | 345747 |; | 1e-16 | 1.63e-11 | 340646 |; | 1e-15 | 2.74e-11 | 339647|; | 1e-14 | 5.73e-09 | 335089 |; | 1e-13 | 3.65e-08 | 331285 |; | 1e-12 | 3.18e-07 | 326462 |. c2 sym. C60 isomer (RKS total energy): `PBE/aug-cc-pVDZ (75,302)` econv=1e-10 dconv=1e-8. | tolerance | error | #points |; | --- | --- | ---|; | off | 0.0 | 1359000 | ; | 1e-30 -| 3.17e-10| 1229846|; | 1e-25 | -5.34e-10| 1209622|; | 1e-20 | 5.94e-10 |1183674|; | 1e-18 | 5.41e-10 |1171102|; | 1e-16 | -6.25e-10 |1156776|; | 1e-15 | 2.48e-09| 1131228|; | 1e-14 | 3.54e-09| 1123018|; | 1e-13 | 1.25e-07 |1110668 |; | 1e-12 |1.07e-06 |1085824 |. -----. *further timings*; C60 fullerene (C2h) :PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; comparison to `v1.3.1`; * pruning `ROBUST`=1.33 // `1361880/1953000` grid points // dE=2E-11; * pruning `TREUTLER=1.36`// `1064520/1953000` grid points // dE=-4E-05; * pruning `ROBUST` + `screening(1e-14)` = 1.39; `1070388/1953000` grid points //dE=-2E-09; * pruning `TREUTLER` + `screening(1e-14)` = 1.44; `773028/1953000` grid points //dE=-4E-05",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1581:1267,energy,energy,1267,https://psicode.org,https://github.com/psi4/psi4/pull/1581,1,['energy'],['energy']
Energy Efficiency,"s on the situation whether the; symmetric or non-symmetric solutions will give better predictions of; molecular properties. C2H4 is not a classic ""symmetry breaking molecule"" to my knowledge, so I'm; surprised that there is a symmetry-breaking solution to the SCF equations. On Tue, Dec 5, 2017 at 3:11 PM, Daniel Smith <notifications@github.com>; wrote:. > I believe we have had this problem in the past. Take a symmetric molecule; > who's optimal wavefunction should contain less symmetry:; >; > import numpy as np; >; > mol = psi4.geometry("""""" 0 1C 0.0 0.0 0.673055C 0.0 0.0 -0.673055H 0.0 0.934981 1.246807H 0.0 -0.934981 1.246807H 0.934981 0.0 -1.246807H -0.934981 0.0 -1.246807symmetry c1""""""); > # Set reference and guess.; > psi4.set_options({; > ""reference"": ""rhf"",; > ""guess"": ""sad"",; > ""basis"": ""DZP"",; > ""soscf"": ""true"",# ""sad_frac_occ"": ""true""; > }); >; > energy = energy('scf')if np.allclose(energy, -77.87781349420317):; > print(""Found non-symmetric minima! Success!"")elif np.allclose(energy, -77.84789770426966):; > print(""Found symmetric minima... failure."")else:; > print(""You found something... wrong.""); >; > The -77.847 result should be found when the molecule is constrained to; > symmetry. However, without that constraint there is a lower SCF result to; > be found. The kicker is even without the symmetry restraint (computation in; > c1) we fairly consistently end up with a symmetric wavefunction. Any; > ideas on how to avoid this?; >; > Note 1: The stability analysis is showing that it is indeed finding the; > wrong answer and there are negative eigenvalues present. We should be able; > to follow these once the py-scf iterations are finished.; >; > Note 2: This is not deterministic for which result we land in (whoo!).; >; > Note 3: Moving an atom out of place by 1e-14 or so seems to ensure we find; > the correct energy. Really any noise lets the diagonalizer break out of its; > self-imposed symmetry constraints.; >; > —; > You are receiving this because you are su",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349464469:1719,energy,energy,1719,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349464469,1,['energy'],['energy']
Energy Efficiency,"s over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0; 2 2 1 -0.2579356267 -0.0165261772 0.0652368320 0; 3 3 1 -0.2611541701 -0.0032185434 0.0125293726 1; 4 4 1 -0.2613216972 -0.0001675272 0.0032942797 0; 5 5 1 -0.2613427037 -0.0000210064 0.0012770712 0; 6 6 1 -0.2613456527 -0.0000029491 0.0004335425 1; 7 7 1 -0.2613460204 -0.0000003677 0.0001363866 0; 8 8 1 -0.2613460594 -0.0000000390 0.0000408574 1; 9 8 2 -0.2613460625 -0.0000000031 0.0000130842 0; 10 8 3 -0.2613460628 -0.0000000003 0.0000034499 0; 11 8 4 -0.2613460628 -0.0000000000 0.0000008461 1; 12 8 5 -0.2613460628 -0.0000000000 0.0000002627 0; 13 8 6 -0.2613460628 -0.0000000000 0.0000000942 1. CISD iterations converged!. CISD variational energy: -0.261346062815; CISD transition energy: -0.261346060539. OS MP2 FNO correction: -0.000000000000; SS MP2 FNO correction: -0.000000000000; MP2 FNO correction: -0.000000000000. OS SCS-MP2 correlation energy: -0.251080593983; SS SCS-MP2 correlation energy: -0.025501141462; SCS-MP2 correlation energy: -0.276581735444; * SCS-MP2 total energy: -788.124409449857. OS MP2 correlation energy: -0.209233828319; SS MP2 correlation energy: -0.076503424385; MP2 correlation energy: -0.285737252704; * MP2 total energy: -788.133564967117. OS CISD correlation energy: -0.198332372454; SS CISD correlation energy: -0.063013688085; CISD correlation energy: -0.261346062815; * CISD total energy: -788.109173777228. Total time for CISD iterations: 11.63 s (user); 1.47 s (system); 6 s (total). Time per iteration: 0.89 s (user); 0.11 s (system); 0.46 s (total). *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:49 2017; Module time:; 	user time = 11.63 seconds = 0.19 minutes; 	system time = 1.48 seconds = 0.02 minutes",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:13585,energy,energy,13585,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['energy'],['energy']
Energy Efficiency,"s row/noble atom, -2 does; the next-previous row, etc. .... It seems to me that the only time we ever; want to do -2 is for specific elements, never for all atoms in an entire; molecule). I suppose also providing NUM_FROZEN_DOCC doesn't work because it would need; to be different for fragment A than Fragment B. On Fri, Oct 2, 2020 at 3:13 AM Holger Kruse <notifications@github.com>; wrote:. > The following input, given to me via email, gives a 'bad' dMP2 correction; > for SAPT:; >; > delta HF,r (2) -18.53850185 [mEh] -11.63308554 [kcal/mol] -48.67282991 [kJ/mol]; > delta MP2,r (2) 141.03839795 [mEh] 88.50293088 [kcal/mol] 370.29626281 [kJ/mol]; >; > molecule {; > 0 1; > F 0.00000000 0.00000000 2.96216000; > I 0.00000000 0.00000000 0.96704400; > --; > 0 1; > C 0.00000000 0.00000000 -2.52999200; > N 0.00000000 0.00000000 -1.35165800; > Na 0.00000000 0.00000000 -4.84283500; > units angstrom; > no_reorient; > symmetry c1; > }; > memory 20 GiB; > set {; > basis def2-TZVP; > freeze_core true; > }; > energy('sapt2+dMP2'); > energy('mp2',bsse_type=['nocp']); >; > The issue is reproducible for MP2/CCSD post-SCF methods. It is not; > directly DF nor ghost atom related. (besides a possibly small error due; > to #1968 <https://github.com/psi4/psi4/issues/1968>). And not a module; > specific issue.; >; > Using different ECPs (LANL2DZ) or an all electron basis (x2c-SVPall, no; > rel. effects.) with global FC=on seems to give 'better' results in the; > sense that MP2 interaction energy is negative.; >; > One, and perhaps only, issue is frozen_core.; > Turning FC = off only for the supermolecular MP2 part gives OK results.; > For the NaCN fragment we are freezing 10 electrons, while e.g. ORCA is; > freezing only 3.; > At least for this case, freezing the Ne-shell by default for Na is not a; > good choice.; >; > Tagging @PeterKraus <https://github.com/PeterKraus>.; >; > freeze_core -2 makes the SAPT part crash because sth goes wrong for the IF; > fragment (fragment A):; >; > FOCC A =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354:1569,energy,energy,1569,https://psicode.org,https://github.com/psi4/psi4/issues/2012#issuecomment-702811354,2,['energy'],['energy']
Energy Efficiency,"s true for SAPT(UHF/ROHF). **Observed behavior**: second-order SAPT0 corrections are different for ROHF, although first order and total HF energies for UHF and ROHF are exactly the same. . **Suspicion**: orbital energies in ROHF are not correctly set, thus second-order amplitudes are malformed. One can easily verify that molpro's ROHF gives the same orbital energies as Psi4's UHF. **input**; ```; #! rohf bug (?) with metastable helium dimer. memory 1024 MB. molecule dimer {; 0 3; He 0.000 0.000 +1.9315; --; 0 3; He 0.000 0.000 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:1013,ENERGY,ENERGY,1013,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['ENERGY'],['ENERGY']
Energy Efficiency,"s); td_energy, wfn = psi4.energy('td-dft', return_wfn=True); ; # Extract the first excited state energy; first_excited_energy = wfn.extras['TDDFT ROOT 1 EXCITED STATE ENERGY']. return first_excited_energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_1_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='First Excited State Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule (First Excited State)'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_1.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(). The error I got is: ; Error: option TDSCF_TYPE is not contained in the list of available options. Error: option TDSCF_TYPE is not contained in the list of available options. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Did you mean? SCF_TYPE MCSCF_TYPE SCF_TYPE. Error at bond length 5.000000000000004: Error setting options: {'tdscf_type': ('full', RuntimeError('\nFatal Error: TDSCF_TYPE is not a valid option.\nError occurred in file: /ho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:3979,energy,energy,3979,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,s-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.60 sec; Start 215: mints3; 371/412 Test #363: x2c3 ............................. Passed 2.61 sec; Start 355: tu2-ch2-energy; 372/412 Test #382: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #404: json-schema-1-gradient ........... Passed 1.74 sec; Start 405: json-schema-1-properties; 374/412 Test #223: mints10 .......................... Passed 1.62 sec; Start 381: psi4numpy-cphf; 375/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 1.97 sec; Start 401: json-schema-1-ghost; 376/412 Test #411: skeletonsointegrals .............. Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:35748,energy,energy,35748,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,2,['energy'],['energy']
Energy Efficiency,"s.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); ; ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; ```; - DLDF+D09/cc-pVDZ: **GRADIENTS FAILED**; ```; Segmentation fault: 11; ```; - Both `disk_DF` and `mem_DF` gradients yield above segfault, no message in outfile or message printed to stdout; - PBE/cc-pVDZ: Passed; - wPBE/cc-pVDZ: **FAILED**; ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/l",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:4536,energy,energy,4536,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,1,['energy'],['energy']
Energy Efficiency,"s/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. => Loading Basis Set <=. Name: (ANO-RCC AUX); Role: DECON; Keyword: BASIS_RELATIVISTIC; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs func decontract. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; Ag 15 15 0 0 0 0; B1g 3 3 0 0 0 0; B2g 3 3 0 0 0 0; B3g 3 3 0 0 0 0; Au 1 1 0 0 0 0; B1u 7 7 0 0 0 0; B2u 7 7 0 0 0 0; B3u 7 7 0 0 0 0; -------------------------------------------------------; Total 46 46 1 0 0 1; -------------------------------------------------------. ==> Integral Setup <==. OEINTS: Using relativistic (X2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:3175,Energy,Energy,3175,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['Energy'],['Energy']
Energy Efficiency,s2 .................... Passed 2.70 sec; Start 221: mints9; 344/411 Test #96: cisd-h2o-clpse ................... Passed 1.71 sec; Start 345: dfep2-2; 345/411 Test #401: json-schema-1-orient ............. Passed 1.68 sec; Start 327: scf-guess-read1; 346/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.45 sec; Start 8: castup1; 347/411 Test #397: json-v11-energy .................. Passed 2.46 sec; Start 330: scf-bs; 348/411 Test #233: mp3-grad1 ........................ Passed 1.92 sec; Start 160: dft-grac; 349/411 Test #311: rasci-h2o ........................ Passed 1.24 sec; Start 390: python-mints9; 350/411 Test #352: stability2 ....................... Passed 1.55 sec; Start 288: psimrcc-ccsd_t-2; 351/411 Test #362: x2c3 ............................. Passed 2.02 sec; Start 395: python-mints13; 352/411 Test #361: x2c2 ............................. Passed 1.93 sec; Start 405: skeleton; 353/411 Test #407: skeletondfmp2 .................... Passed 1.57 sec; Start 387: python-energy; 354/411 Test #213: mints2 ........................... Passed 2.49 sec; Start 333: scf2; 355/411 Test #356: scf-response1 .................... Passed 2.51 sec; Start 298: pubchem2; 356/411 Test #381: psi4numpy-dfmp2 .................. Passed 1.78 sec; Start 287: psimrcc-ccsd_t-1; 357/411 Test #330: scf-bs ........................... Passed 1.15 sec; Start 210: mcscf2; 358/411 Test #8: castup1 .......................... Passed 1.48 sec; Start 102: decontract; 359/411 Test #387: python-energy .................... Passed 0.97 sec; Start 380: psi4numpy-cphf; 360/411 Test #221: mints9 ........................... Passed 2.01 sec; Start 383: psi4numpy-rhf-gradient; 361/411 Test #405: skeleton ......................... Passed 1.14 sec; Start 222: mints10; 362/411 Test #327: scf-guess-read1 .................. Passed 1.74 sec; Start 403: json-schema-1-gradient; 363/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.44 sec; Start 406: skeletonaointegrals; 364/411 Test #345: dfep2-2 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:33221,energy,energy,33221,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['energy'],['energy']
Energy Efficiency,s8; 202/411 Test #350: dft-custom ....................... Passed 11.78 sec; Start 7: casscf-sp; 203/411 Test #146: dfomp3-1 ......................... Passed 7.10 sec; Start 122: dfccd-grad1; 204/411 Test #282: opt-irc-3 ........................ Passed 16.36 sec; Start 62: cc45; 205/411 Test #194: fd-freq-gradient ................. Passed 12.91 sec; Start 286: props3; 206/411 Test #122: dfccd-grad1 ...................... Passed 3.71 sec; Start 22: cc11; 207/411 Test #238: nbody-intermediates .............. Passed 13.02 sec; Start 148: dfomp3-grad1; 208/411 Test #62: cc45 ............................. Passed 4.96 sec; Start 53: cc37; 209/411 Test #7: casscf-sp ........................ Passed 7.89 sec; Start 164: dft-grad1; 210/411 Test #301: pywrap-basis ..................... Passed 13.12 sec; Start 338: scf7; 211/411 Test #53: cc37 ............................. Passed 3.24 sec; Start 89: cepa3; 212/411 Test #218: mints8 ........................... Passed 15.41 sec; Start 14: cbs-xtpl-energy; 213/411 Test #22: cc11 ............................. Passed 6.65 sec; Start 366: dft-smoke; 214/411 Test #148: dfomp3-grad1 ..................... Passed 9.29 sec; Start 324: sapt8; 215/411 Test #286: props3 ........................... Passed 12.45 sec; Start 5: casscf-sa-sp; 216/411 Test #338: scf7 ............................. Passed 11.10 sec; Start 357: tu4-h2o-freq; 217/411 Test #89: cepa3 ............................ Passed 8.51 sec; Start 21: cc10; 218/411 Test #164: dft-grad1 ........................ Passed 14.27 sec; Start 275: opt9; 219/411 Test #14: cbs-xtpl-energy .................. Passed 10.47 sec; Start 254: omp2p5-2; 220/411 Test #21: cc10 ............................. Passed 5.53 sec; Start 52: cc36; 221/411 Test #366: dft-smoke ........................ Passed 13.99 sec; Start 133: dfmp2-ecp; 222/411 Test #5: casscf-sa-sp ..................... Passed 9.71 sec; Start 83: cdomp2-1; 223/411 Test #357: tu4-h2o-freq ..................... Passed 9.81 sec; Start 217: mint,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:19835,energy,energy,19835,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"s: 95; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 3.7125823143E-03.; Using Symmetric Orthogonalization. SCF Guess: Orbitals guess was supplied from a previous computation. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -0.49904529387990 -4.99045e-01 5.81466e-04 ; @DF-UHF iter 1: -0.49933835527994 -2.93061e-04 9.46849e-05 DIIS; @DF-UHF iter 2: -0.49935062691594 -1.22716e-05 2.23284e-05 DIIS; @DF-UHF iter 3: -0.49935159814175 -9.71226e-07 4.41164e-06 DIIS; @DF-UHF iter 4: -0.49935164375895 -4.56172e-08 5.33254e-07 DIIS; @DF-UHF iter 5: -0.49935164423349 -4.74539e-10 5.00344e-08 DIIS; @DF-UHF iter 6: -0.49935164423748 -3.99308e-12 6.43193e-09 DIIS; @DF-UHF iter 7: -0.49935164423756 -8.04357e-14 8.07626e-10 DIIS; @DF-UHF iter 8: -0.49935164423756 -5.55112e-16 3.13992e-11 DIIS; @DF-UHF iter 9: -0.49935164423756 -5.55112e-17 4.79952e-12 DIIS; @DF-UHF iter 10: -0.49935164423756 7.21645e-16 2.32387e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 7.500000000E-01; @S^2 Observed: 7.500000000E-01; @S Expected: 5.000000000E-01; @S Observed: 5.000000000E-01. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.499352 . Alpha Virtual: . 2A 0.012936 3A 0.013757 4A 0.013757 ; 5A 0.015378 6A 0.063621 7A 0.068900 ; 8A 0.068900 9A 0.086764 10A 0.103920 ; 11A 0.198954 12A 0.198954 13A 0.208977 ; 14A 0.208977 15A 0.256823 16A 0.270230 ; 17A 0.318044 18A 0.318044 19A 0.402166 ; 20A 0.450346 21A 0.450346 22A 0.540514 ; 23A 0.606544 24A 0.606544 25A 0.613724 ; 26A 0.613724 27A 0.838452 28A 1.281252 ; 29A 1.826605 30A 1.826605 31A 1.850798 ; 32A 4.179388 . Beta Occupied: . . Beta Virtual: . 1A 0.006309 2A 0.013514 3A 0.013821 ; 4A 0.013821 5A 0.037931 6A 0.065570 ; 7A 0.070561 8A 0.070561 9A 0.090473 ; 10A 0.171679 11A 0.207466 12A 0.207466 ; 13A 0.209492 14A 0.209492 15A 0.257933 ; 16A 0.287508 17A 0.331720 18A 0.3317",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1830:9346,Energy,Energy,9346,https://psicode.org,https://github.com/psi4/psi4/issues/1830,1,['Energy'],['Energy']
Energy Efficiency,"s_mix "": True,; }); ```; and got this; ```; ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities' Natural Orbitals via on-the-fly atomic UHF (doi:10.1021/acs.jctc.8b01089). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.82625214180248 -8.26252e-01 1.90467e-03 DIIS; @DF-UHF iter 2: -0.82648067782379 -2.28536e-04 2.30464e-04 DIIS; @DF-UHF iter 3: -0.82648407824247 -3.40042e-06 4.94088e-07 DIIS; @DF-UHF iter 4: -0.82648407827432 -3.18503e-11 3.29102e-08 DIIS; @DF-UHF iter 5: -0.82648407827446 -1.41664e-13 5.92889e-13 DIIS; ```; There seems no mixing operation and the resulting energy is different compared with GWH:; ```; ==> Pre-Iterations <==. SCF Guess: Generalized Wolfsberg-Helmholtz. Mixing alpha HOMO/LUMO orbitals (1,2). -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 10 10 1 1 1 0; -------------------------------------------------------; Total 10 10 1 1 1 0; -------------------------------------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 1: -0.99581369630316 -9.95814e-01 5.27581e-03 DIIS; @DF-UHF iter 2: -0.99858566020747 -2.77196e-03 9.67632e-04 DIIS; @DF-UHF iter 3: -0.99871839991550 -1.32740e-04 1.28446e-04 DIIS; @DF-UHF iter 4: -0.99872134564656 -2.94573e-06 6.44177e-06 DIIS; @DF-UHF iter 5: -0.99872135071512 -5.06856e-09 1.24087e-06 DIIS; @DF-UHF iter 6: -0.99872135104152 -3.26405e-10 1.50846e-07 DIIS; @DF-UHF iter 7: -0.99872135104495 -3.43037e-12 9.72276e-09 DIIS; @DF-UHF iter 8: -0.99872135104496 -1.08802e-14 1.64991e-11 DIIS; Energy and wave function converged. ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676:1545,Energy,Energy,1545,https://psicode.org,https://github.com/psi4/psi4/issues/2410#issuecomment-1016645676,2,['Energy'],['Energy']
Energy Efficiency,sapt8 ............................ Passed 12.21 sec; Start 335: scf4; 214/411 Test #366: dft-smoke ........................ Passed 11.20 sec; Start 207: gibbs; 215/411 Test #164: dft-grad1 ........................ Passed 13.20 sec; Start 5: casscf-sa-sp; 216/411 Test #335: scf4 ............................. Passed 6.98 sec; Start 14: cbs-xtpl-energy; 217/411 Test #286: props3 ........................... Passed 12.80 sec; Start 372: dft-custom-hybrid; 218/411 Test #340: soscf-large ...................... Passed 14.19 sec; Start 275: opt9; 219/411 Test #194: fd-freq-gradient ................. Passed 12.13 sec; Start 133: dfmp2-ecp; 220/411 Test #207: gibbs ............................ Passed 11.18 sec; Start 23: cc12; 221/411 Test #5: casscf-sa-sp ..................... Passed 7.38 sec; Start 217: mints6; 222/411 Test #23: cc12 ............................. Passed 3.81 sec; Start 368: scf-freq1; 223/411 Test #372: dft-custom-hybrid ................ Passed 8.36 sec; Start 369: dft-jk; 224/411 Test #14: cbs-xtpl-energy .................. Passed 8.78 sec; Start 296: psithon2; 225/411 Test #275: opt9 ............................. Passed 9.31 sec; Start 122: dfccd-grad1; 226/411 Test #133: dfmp2-ecp ........................ Passed 10.55 sec; Start 154: dfrasscf-sp; 227/411 Test #122: dfccd-grad1 ...................... Passed 2.71 sec; Start 341: soscf-ref; 228/411 Test #154: dfrasscf-sp ...................... Passed 2.65 sec; Start 177: extern2; 229/411 Test #368: scf-freq1 ........................ Passed 7.99 sec; Start 52: cc36; 230/411 Test #217: mints6 ........................... Passed 11.46 sec; Start 176: extern1; 231/411 Test #369: dft-jk ........................... Passed 9.92 sec; Start 285: props2; 232/411 Test #341: soscf-ref ........................ Passed 6.33 sec; Start 48: cc32; 233/411 Test #296: psithon2 ......................... Passed 11.70 sec; Start 357: tu4-h2o-freq; 234/411 Test #52: cc36 ............................. Passed 5.86 sec; Start 268: opt2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:20806,energy,energy,20806,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['energy'],['energy']
Energy Efficiency,scf-response1 .................... Passed 2.00 sec; Start 390: python-mints9; 300/411 Test #135: dfmp2-grad2 ...................... Passed 4.42 sec; Start 127: dfccsdt1; 301/411 Test #150: dfomp2p5-1 ....................... Passed 12.90 sec; Start 221: mints9; 302/411 Test #52: cc36 ............................. Passed 8.46 sec; Start 345: dfep2-2; 303/411 Test #390: python-mints9 .................... Passed 1.77 sec; Start 83: cdomp2-1; 304/411 Test #141: dfomp2-3 ......................... Passed 3.70 sec; Start 139: dfomp2-1; 305/411 Test #137: dfmp2-grad4 ...................... Passed 4.54 sec; Start 86: cepa0-grad2; 306/411 Test #50: cc34 ............................. Passed 5.92 sec; Start 191: fcidump; 307/411 Test #122: dfccd-grad1 ...................... Passed 4.34 sec; Start 363: zaptn-nh2; 308/411 Test #127: dfccsdt1 ......................... Passed 2.37 sec; Start 232: mp2p5-grad2; 309/411 Test #345: dfep2-2 .......................... Passed 1.82 sec; Start 397: json-v11-energy; 310/411 Test #221: mints9 ........................... Passed 1.93 sec; Start 199: fnocc1; 311/411 Test #83: cdomp2-1 ......................... Passed 2.27 sec; Start 4: casscf-semi; 312/411 Test #139: dfomp2-1 ......................... Passed 2.64 sec; Start 395: python-mints13; 313/411 Test #363: zaptn-nh2 ........................ Passed 1.87 sec; Start 271: opt5; 314/411 Test #86: cepa0-grad2 ...................... Passed 3.41 sec; Start 234: mp3-grad2; 315/411 Test #395: python-mints13 ................... Passed 1.71 sec; Start 361: x2c2; 316/411 Test #397: json-v11-energy .................. Passed 2.95 sec; Start 362: x2c3; 317/411 Test #191: fcidump .......................... Passed 3.66 sec; Start 223: molden1; 318/411 Test #232: mp2p5-grad2 ...................... Passed 3.51 sec; Start 119: dfcasscf-sp; 319/411 Test #271: opt5 ............................. Passed 3.06 sec; Start 399: json-schema-1-energy; 320/411 Test #361: x2c2 ............................. Passed 1.96 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:28937,energy,energy,28937,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); scf_e_B, wfnB = psi4.energy(""SCF"", return_wfn=True, molecule=monomerB). ```; Runned as; ```bash; python minimal.py; ```; the output is; ```python; Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py"", line 34, in <module>; scf_e_A, wfnA = psi4.energy(""SCF"", return_wfn=True, molecule=monomerA); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 2058, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/procrouting/proc.py"", line 1423, in scf_helper; scf_wfn.to_file(write_filename); File ""/home/filip/software/psi4-1.4rc-opt/lib/psi4/driver/p4util/python_helpers.py"", line 303, in _core_wavefunction_to_file; np.save(filename, wfn_data); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py"", line 538, in save; pickle_kwargs=pickle_kwargs); File ""/home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/format.py"", line 637, in write_array; raise ValueError(""Object arrays cannot be saved when ""; ValueError: Object arrays canno",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706:1717,energy,energy,1717,https://psicode.org,https://github.com/psi4/psi4/pull/1706,1,['energy'],['energy']
Energy Efficiency,"screpancies seem to be within 1 Hartree when Summit is compared to local runs. I ran the compairisons for the 20 canonical amino acids (structures from `HF/6-31G*` geometry optimisation outputs). It takes anywhere from 10-30+ times longer on Summit even with the exact same resource request (16 threads and 16GB RAM). I've attached the psi4_outputs.dat for both if there's anything you might be able to notice that might be going wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1026,energy,energy,1026,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"scribed [here](https://www.sciencedirect.com/science/article/pii/S0301010408005089). ### Results. Below are timings of the naive semi-numerical integral loop using both the old psi4 integrals and the new libint2 integrals. This benchmark was performed on a butane molecule in a cc-pVDZ basis set and a standard 302/75 quadrature grid. Wall times are the minimum of five trials. | Cores | Old Integral<br/>Wall Time (s) | Old Integral<br/>Parallel Speedup | New Integral<br/>Wall Time (s) | New Integral<br/>Parallel Speedup |; | :--- | :--- | :--- | :--- | :--- |; | 1 | 191.7 | --- | 105.3 | --- |; | 2 | 96.1 | x2.00 | 72.6 | x1.45 |; | 4 | 48.4 | x3.96 | 71.5 | x1.47 |; | 8 | 24.3 | x7.88 | 74.5 | x1.41 |; | 18 | 11.5 | x16.62 | 72.8 | x1.45 |. Note that with one core, the new libint2 integrals (105.3s) are faster than the old OS integrals (191.7s) by almost a factor of two, which is to be expected. Part of the reason for deprecating the old, hand-coded integral code for the libint2 interface is that libint2 is a specialized library and therefore should have more efficient routines. The integral routine using the old OS code scales almost perfectly all the way through 18 cores. This is also to be expected: the work being done in the integral routine is embarrassingly parallel, and threads don't share any information or intermediates. Surprisingly, when the same integrals are computed with libint2 instead of the old OS code, the parallel scaling suffers drastically. We see no benefit gained from using more than two cores, and even a calculation with two cores only achieves a 1.45x speedup. When I use all 18 cores on my workstation, the new libint2 integrals are nearly 7(!) times slower than the old OS code. What makes this particularly confusing is that none of the usual culprits associated with poor parallel scaling (bad scheduling/work balance, high overhead, etc.) apply here. This is because we see perfect parallel scaling with the old OS code using all of the same cond",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2491:2754,efficient,efficient,2754,https://psicode.org,https://github.com/psi4/psi4/issues/2491,1,['efficient'],['efficient']
Energy Efficiency,"se are separate entries (away from qcng) in `standard_suite_ref_local.py`; * In filling out the capabilities tables for Hessians, I tried to collect CD Hessians for HF and SVWN by FD of energies. They failed the per-element CD result ~= CONV result check. Not surprising since CD thresh is set at 1e-4. I didn't do anything about the failure (ref values deleted and tests are not active), so this is just to bring up that CD threshold is untuned for dertype or E_/D_/R_CONVERGENCE.; * refuted first two thirds of a prominent footnote: `DFT gradients only implemented for SCF type DF. LRC-DFT gradients not implemented yet. DH-DFT gradients not implemented.`; - [x] upgraded stdsuite runner to catch up with qcdb and qcengine last year by (1) implementing per-dertype and abs/rel comparison checks (nothing is actually loosened) and (2) dropping a dict summary of each test to a record file.; - [x] arranged for available `td-{dft}` calls to show up in the energy table, https://psicode.org/psi4manual/master/energy.html; - [x] fixed `energy(""psimrcc_scf"")` to use regular SCF as ref for PSIMRCC and added a test; - [x] rehabilitated `energy(""qchf"")` (which never had its initialism expanded in the whole of the codebase, btw) so it runs. added a test. it probably ought to be better integrated with regular SCF module. Regular SCF has a qchf option that is unused.; - [x] adjusted some qcvars in FNOCC to collect more components from cepa-like methods and to collect different perturbative triples for qcisd.; - [x] collected qcvars correctly in DFOCC for CCD and QCHF. (It was harvesting the CCD method that tipped me into the rabbit-hole that became this PR.). - [x] TODO `pytest -m quick` is still friendly to run (CI finished in reasonable time), but the additions to stdsuite have make ordinary full pytests expensive. I need to manipulate default marks so folks don't inadvertently start hours of tests. `pytest -v ../tests/pytests/test_standard_suite.py -m ""not noci"" -n auto --durations 100 --",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:11682,energy,energy,11682,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy']
Energy Efficiency,sec; Start 404: json-schema-1-properties; 381/411 Test #410: skeletonsointegrals .............. Passed 0.89 sec; Start 400: json-schema-1-ghost; 382/411 Test #288: psimrcc-ccsd_t-2 ................. Passed 1.47 sec; Start 353: tu1-h2o-energy; 383/411 Test #220: mints-helper ..................... Passed 1.12 sec; Start 330: scf-bs; 384/411 Test #411: skeletonwavefunction ............. Passed 0.90 sec; Start 378: mints12; 385/411 Test #398: json-v11-gradient ................ Passed 0.97 sec; Start 349: sapt-sf1; 386/411 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.48 sec; Start 387: python-energy; 387/411 Test #404: json-schema-1-properties ......... Passed 1.01 sec; Start 309: pywrap-molecule; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.03 sec; Start 293: psimrcc-pt2; 389/411 Test #353: tu1-h2o-energy ................... Passed 1.09 sec; Start 396: python-memdfjk; 390/411 Test #330: scf-bs ........................... Passed 0.85 sec; Start 354: tu2-ch2-energy; 391/411 Test #349: sapt-sf1 ......................... Passed 0.93 sec; Start 175: docs-dft; 392/411 Test #387: python-energy .................... Passed 0.82 sec; Start 382: psi4numpy-rhf; 393/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 334: scf3; 394/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 216: mints5; 395/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 208: matrix1; 396/411 Test #396: python-memdfjk ................... Passed 0.89 sec; Start 308: pywrap-db3; 397/411 Test #175: docs-dft ......................... Passed 0.57 sec; Start 364: options1; 398/411 Test #354: tu2-ch2-energy ................... Passed 0.81 sec; Start 215: mints4; 399/411 Test #382: psi4numpy-rhf .................... Passed 0.81 sec; Start 409: skeletonscf; 400/411 Test #208: matrix1 .......................... Passed 0.53 sec; Start 212: mints1; 401/411 Test #334: scf3 ............................. Passed 0.70 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:36609,energy,energy,36609,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['energy'],['energy']
Energy Efficiency,"seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: -510.3043230853464 Hartrees, time taken: 198.31190185248852 seconds.; Cysteine energy: -720.4219957102104 Hartrees, time taken: 151.35190648585558 seconds.; Glutamic_acid energy: -549.4951112606502 Hartrees, time taken: 136.0041107479483 seconds.; Glutamine energy: -530.2261895601027 Hartrees, time taken: 136.45657246001065 seconds.; Glycine energy: -283.5893524874689 Hartrees, time taken: 110.86536369845271 seconds.; Histidine energy: -547.1545219389225 Hartrees, time taken: 190.28457425907254 seconds.; Isoleucine energy: -440.3258760616588 Hartrees, time taken: 176.21623157337308 seconds.; Leucine energy: -440.33076955681287 Hartrees, time taken: 154.9296657089144 seconds.; Lysine energy: -495.8966574116915 Hartrees, time taken: 167.91756228543818 seconds.; Methionine energy: -798.7987813339455 Hartrees, time taken: 157.03161489591002 seconds.; Phenylalanine energy: -553.1290149756642 ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:2437,energy,energy,2437,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,sed 17.53 sec; Start 393: python-memdfjk; 343/401 Test #341: dfep2-2 .......................... Passed 2.51 sec; Start 347: stability2; 344/401 Test #187: fcidump .......................... Passed 6.32 sec; Start 348: tu1-h2o-energy; 345/401 Test #119: dfccd1 ........................... Passed 3.69 sec; Start 170: docs-bases; 346/401 Test #92: cisd-h2o+-0 ...................... Passed 3.19 sec; Start 326: scf-bs; 347/401 Test #207: mcscf3 ........................... Passed 1.36 sec; Start 399: json-schema_0_throws; 348/401 Test #212: mints5 ........................... Passed 1.05 sec; Start 305: pywrap-molecule; 349/401 Test #394: json-v11_energy .................. Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 ........................... Passed 0.73 sec; Start 379: psi4numpy-rhf; 356/401 Test #170: docs-bases ....................... Passed 0.83 sec; Start 205: mcscf1; 357/401 Test #351: scf-response1 .................... Passed 1.97 sec; Start 384: python-energy; 358/401 Test #324: scf-upcast-custom-basis .......... Passed 2.26 sec; Start 204: matrix1; 359/401 Test #323: scf-guess-read1 .................. Passed 2.16 sec; Start 235: numpy-array-interface; 360/401 Test #356: x2c2 ............................. Passed 2.85 sec; Start 359: options1; 361/401 Test #328: scf-occ .......................... Passed 3.01 sec; Start 208: mints1; 362/401 Test #247: omp2-grad1 ....................... Passed 4.60 sec; Start 284: psimrcc-ccsd_t-2; 363/401 Test #400: json-schema_0_gradient ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:33434,energy,energy,33434,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['energy'],['energy']
Energy Efficiency,sed 2.68 sec; Start 331: scf-bs; 361/412 Test #391: python-mints9 .................... Passed 2.06 sec; Start 222: mints9; 362/412 Test #363: x2c3 ............................. Passed 3.28 sec; Start 299: pubchem2; 363/412 Test #334: scf2 ............................. Passed 3.04 sec; Start 404: json-schema-1-gradient; 364/412 Test #382: psi4numpy-dfmp2 .................. Passed 3.35 sec; Start 396: python-mints13; 365/412 Test #211: mcscf2 ........................... Passed 3.25 sec; Start 223: mints10; 366/412 Test #161: dft-grac ......................... Passed 3.59 sec; Start 354: tu1-h2o-energy; 367/412 Test #409: skeletonmointegrals .............. Passed 4.13 sec; Start 103: decontract; 368/412 Test #362: x2c2 ............................. Passed 4.28 sec; Start 411: skeletonsointegrals; 369/412 Test #353: stability2 ....................... Passed 3.95 sec; Start 221: mints-helper; 370/412 Test #299: pubchem2 ......................... Passed 1.69 sec; Start 355: tu2-ch2-energy; 371/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 3.29 sec; Start 215: mints3; 372/412 Test #189: fci-tdm .......................... Passed 3.92 sec; Start 384: psi4numpy-rhf-gradient; 373/412 Test #97: cisd-h2o-clpse ................... Passed 5.09 sec; Start 381: psi4numpy-cphf; 374/412 Test #331: scf-bs ........................... Passed 2.43 sec; Start 405: json-schema-1-properties; 375/412 Test #222: mints9 ........................... Passed 2.16 sec; Start 399: json-v11-gradient; 376/412 Test #404: json-schema-1-gradient ........... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:34868,energy,energy,34868,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['energy'],['energy']
Energy Efficiency,sed 3.08 sec; Start 364: tu1-h2o-energy; 131/415 Test #303: psimrcc-pt2 ...................... Passed 1.68 sec; Start 212: mcscf1; 132/415 Test #414: json-schema-1-gradient ........... Passed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13640,energy,energy,13640,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,"seems the only way to find the lowest energy; solution. 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:. > I have seen this before (for this exact system) - the SAD guess converges; > to the correct root, but Core does not. Not really much more to it than; > that.; > ; > -Rob; > ; > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > notifications@github.com> wrote:; > ; > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > gives very different energies.; > > The following input with the core guess gives a total energy of; > > -75.5488580481183476; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess core; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > while this input with the SAD guess gives a total energy of; > > -75.6330881795159655; > > ; > > memory 250 mb; > > molecule h2o {; > > symmetry c1; > > 1 2; > > O 0.0000000000 0.0000000000 -0.2249058930; > > H 1.4523499293 0.0000000000 0.8996235720; > > H -1.4523499293 0.0000000000 0.8996235720; > > units bohr; > > no_reorient; > > no_com; > > }; > > ; > > set {; > > basis cc-pVDZ; > > scf_type direct; > > guess sad; > > reference uhf; > > e_convergence 7; > > d_convergence 7; > > }; > > ; > > energy_scf1 = energy('scf'); > > ; > > Of course, the initial guess has always a huge impact on the calculation,; > > but is the reported difference reasonable for a system as small as H2O+?; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/211.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/211#issuecomment-171564200.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171646769:1866,energy,energy,1866,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171646769,1,['energy'],['energy']
Energy Efficiency,separate reference from method in energy arguments,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:34,energy,energy,34,https://psicode.org,https://github.com/psi4/psi4/issues/117,1,['energy'],['energy']
Energy Efficiency,"set guess sad. @RHF Final Energy: -107.49356712900621. -Rob. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010136:26,Energy,Energy,26,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010136,5,"['Energy', 'energy']","['Energy', 'energy']"
Energy Efficiency,"shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; ________________________________________________________________ test_psi4_basic _________________________________________________________________. def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); > psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:15: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fc4ccd780>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SCF"", ""DFT_DISPERSION_PARAMETERS""); else:; modified_disp_params = None; ; # Figure out functional; if functional is None:; superfunc, disp_type = dft_f",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:22172,energy,energy,22172,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"shift"" in OCC. ""Level shift"" is a misnomer and actually refers to scaling the diagonal elements of the DIIS B-matrix. When I'm done, the orbital convergence will be so much better that we won't notice it's gone. In the short term, this does cause more test failures. ## Questions; * Because we're losing ""level shifting"", we're losing some keywords. I don't know how to deprecate these. If they're provided as module-level keywords, then I don't know the technical details of how you would raise a warning message. The bigger problem is when they're global keywords. DFOCC still uses ""level shifting"", so I can only raise a warning when I know what module the user is in. Thoughts on how to handle this?; * Should we be losing ""level shifting""? We can add _damping_ to `libdiis` if there's demand for it. I think there are better things to do with my time. ## Quick Test Status; * Switching out the DIIS version caused the `omp2p5-2` test's OMP2.5 energy to fall outside convergence criteria, again emphasizing how unstable orbital convergence in OCC is. We'll find out what the actual value is by the time I'm done.; * Losing ""level shifting"" was enough to break the `ocepa-grad2` test. This test asks for a higher-than-normal convergence from OCC, so that's no surprise. (I imagine Psi ups the energy convergence default when the user requests a gradient.) As a temp fix, I lowered the demanded energy convergence from 8 to 7. Even after that, we're outside the test tolerance, so I changed the value to boot. If anybody is dying to know the correct answer, I can run it on my Python code.; * `omp2-2` encountered oscillatory convergence, and I responded by lowering the convergence we seek. Again, coupling amplitude and orbital DIIS will break the oscillations and render this test hack unnecessary.; * We may have lost other full tests, but we'll get them back at the end. ## So Lori Knows What to Put in Changelog; - [x] Overhauled orbital convergence in the OCC module. As a result, the `level",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1783:3141,energy,energy,3141,https://psicode.org,https://github.com/psi4/psi4/pull/1783,1,['energy'],['energy']
Energy Efficiency,si4numpy-cphf ................... Passed 1.69 sec; Start 353: dft-reference; 343/413 Test #316: sad1 ............................. Passed 3.17 sec; Start 363: x2c2; 344/413 Test #286: props1 ........................... Passed 3.16 sec; Start 9: castup2; 345/413 Test #341: scf-property ..................... Passed 4.55 sec; Start 358: scf-response1; 346/413 Test #230: mp2-grad1 ........................ Passed 3.15 sec; Start 104: decontract; 347/413 Test #87: cepa0-grad2 ...................... Passed 5.30 sec; Start 364: x2c3; 348/413 Test #237: mp2-property ..................... Passed 4.17 sec; Start 291: psimrcc-ccsd_t-3; 349/413 Test #181: fsapt2 ........................... Passed 5.43 sec; Start 86: cepa0-grad1; 350/413 Test #363: x2c2 ............................. Passed 3.08 sec; Start 216: mints3; 351/413 Test #259: omp3-1 ........................... Passed 4.13 sec; Start 224: mints10; 352/413 Test #358: scf-response1 .................... Passed 2.49 sec; Start 355: tu1-h2o-energy; 353/413 Test #271: opt3 ............................. Passed 4.85 sec; Start 335: scf2; 354/413 Test #346: dfep2-1 .......................... Passed 4.12 sec; Start 190: fci-tdm; 355/413 Test #353: dft-reference .................... Passed 3.89 sec; Start 223: mints9; 356/413 Test #104: decontract ....................... Passed 1.73 sec; Start 222: mints-helper; 357/413 Test #312: rasci-c2-active .................. Passed 5.46 sec; Start 354: stability2; 358/413 Test #216: mints3 ........................... Passed 1.18 sec; Start 97: cisd-h2o-clpse; 359/413 Test #364: x2c3 ............................. Passed 2.31 sec; Start 173: dft2; 360/413 Test #355: tu1-h2o-energy ................... Passed 1.87 sec; Start 336: scf3; 361/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 2.49 sec; Start 138: dfmp2-grad3; 362/413 Test #224: mints10 .......................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:33229,energy,energy,33229,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['energy'],['energy']
Energy Efficiency,"sion Method (Block Davidson Method); Attempting to use 1 previous converged vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -111.417799029788 -2.4659E+01 1.1817E+00 ; @CI 1: 0 -112.189379709492 -7.7158E-01 3.5706E-01 ; @CI 2: 0 -112.250278204452 -6.0898E-02 3.1809E-01 ; @CI 3: 0 -112.324883713784 -7.4606E-02 2.2146E-01 ; @CI 4: 0 -112.352310238893 -2.7427E-02 1.2530E-01 ; @CI 5: 0 -112.358631917780 -6.3217E-03 9.7660E-02 ; @CI 6: 0 -112.365095716692 -6.4638E-03 7.3202E-02 ; @CI 7: 0 -112.366948614338 -1.8529E-03 5.3732E-02 ; @CI 8: 0 -112.372824198774 -5.8756E-03 1.1022E-01 ; @CI 9: 0 -112.387582513115 -1.4758E-02 1.8337E-01 ; @CI 10: 0 -112.410692911567 -2.3110E-02 2.3866E-01 ; @CI 11: 0 -112.444565012608 -3.3872E-02 2.3335E-01 ; @CI 12: 0 -112.483195864884 -3.8631E-02 1.9437E-01 . Warning! CI diagonalization did not fully converge!. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.483195864884152; ```. However, with line 371, I get:; ```; @DF-MCSCF 30: -112.523829840588 4.2633e-14 1.05e-10 0.00e+00 12 1 TS, DIIS; @DF-MCSCF 31: -112.523829840588 -2.8422e-14 2.75e-11 0.00e+00 12 1 TS, DIIS. @DF-MCSCF has converged!. @DF-MCSCF Final Energy: -112.523829840588462. Computing CI Semicanonical Orbitals. ==> Starting CI iterations <==. H0 Block Eigenvalue = -112.52382984. Simultaneous Expansion Method (Block Davidson Method); Using 1 initial trial vectors. Iter Root Total Energy Delta E C RMS. @CI 0: 0 -112.523829840638 -2.5765E+01 4.3475E-11 ; Warning: Norm of correction (root 0) is < 1.0E-13; @CI 1: 0 -112.523829840638 0.0000E+00 2.2840E-10 c. ==> Energetics <==. SCF energy = -112.061077881343110; Total MCSCF energy = -112.523829840588462. ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -112.523829840637774; ```. I am not sure why reading the old guess leads to very slow convergence. It seems the old vector is not a good guess anymore: the energy ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785:3805,energy,energy,3805,https://psicode.org,https://github.com/psi4/psi4/pull/2259#issuecomment-934313785,1,['energy'],['energy']
Energy Efficiency,sis $\langle ab|cd \rangle$ ); UHF Reference; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).; @UHF iter SAD: -38.17324740294831 -3.81732e+01 0.00000e+00 ; @UHF iter 1: -38.90234369081286 -7.29096e-01 9.18281e-03 DIIS/ADIIS; @UHF iter 2: -38.91513874101264 -1.27951e-02 2.96594e-03 DIIS/ADIIS; @UHF iter 3: -38.91704192221893 -1.90318e-03 9.12227e-04 DIIS/ADIIS; @UHF iter 4: -38.91728769227936 -2.45770e-04 4.46390e-04 DIIS/ADIIS; @UHF iter 5: -38.91736714064817 -7.94484e-05 1.57015e-04 DIIS/ADIIS; @UHF iter 6: -38.91737800453875 -1.08639e-05 3.99078e-05 DIIS; @UHF iter 7: -38.91737866710707 -6.62568e-07 8.99030e-06 DIIS; @UHF iter 8: -38.91737869146961 -2.43625e-08 1.73779e-06 DIIS; @UHF iter 9: -38.91737869233113 -8.61519e-10 4.12144e-07 DIIS; @UHF iter 10: -38.91737869238197 -5.08393e-11 6.23767e-08 DIIS; @UHF iter 11: -38.91737869238317 -1.20082e-12 1.38186e-08 DIIS; @UHF iter 12: -38.91737869238320 -3.55271e-14 2.41469e-09 DIIS; @UHF Final Energy: -38.91737869238320; UHF NO Occupations:; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; 	Reference = UHF; * CCENERGY *; Reference wfn = UHF; Reference wfn = UHF; ROHF Reference; SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information).; @ROHF iter SAD: -38.17324740294831 -3.81732e+01 0.00000e+00 ; @ROHF iter 1: -38.90234369081286 -7.29096e-01 6.50261e-03 DIIS; @ROHF iter 2: -38.91242369713282 -1.00800e-02 1.83961e-03 DIIS; @ROHF iter 3: -38.91339017288891 -9.66476e-04 2.69689e-04 DIIS; @ROHF iter 4: -38.91341456819070 -2.43953e-05 8.81475e-05 DIIS; @ROHF iter 5: -38.91341661898142 -2.05079e-06 1.51310e-05 DIIS; @ROHF iter 6: -38.91341670674457 -8.77632e-08 3.07520e-06 DIIS; @ROHF iter 7: -38.91341670984617 -3.10160e-09 4.33292e-07 DIIS; @ROHF iter 8: -38.91341670989266 -4.64837e-11 7.04761e-08 DIIS; @ROHF iter 9: -38.91,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504:1649,Energy,Energy,1649,https://psicode.org,https://github.com/psi4/psi4/pull/2708#issuecomment-1243123504,1,['Energy'],['Energy']
Energy Efficiency,"sition of; > the ground and first excited state of the molecule (singlet symmetry).; > However, I think I have noticed a pb concerning the sign of the; > determinants in the output.; >; > First, I give you my INPUT in python :; >; > pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; >; > variables = pes_origin[:] + [90, 90]; >; > psi4.geometry(; >; > """"""; >; > N; >; > C 1 {0}; >; > H 2 {1} 1 {3}; >; > H 2 {1} 1 {3} 3 180; >; > H 1 {2} 2 {4} 3 {5}; >; > symmetry c1"""""".format(*variables) ); >; >; >; > psi4.set_options({ 'basis': 'cc-pvdz',; >; > 'DETCI_FREEZE_CORE' : False,; >; > 'reference': 'RHF',; >; > 'num_roots': 2,; >; > 'frozen_docc':[0],; >; > 'restricted_docc': [6],; >; > 'active': [3],; >; > 'restricted_uocc': [11],; >; > 'frozen_uocc': [23],; >; > 'mcscf_maxiter': 1000,; >; > 'avg_states' : [ 0, 1],; >; > 'avg_weights' : [ 0.5, 0.5 ]; >; > }); >; >; >; > sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); >; > E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); >; > E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY'); >; >; > Then, I give you from the OUTPUT FILE the decomposition I obtain :; > ------------------------------; > ------------------------------; >; > ==> MCSCF root 0 information <==; >; >; >; > MCSCF Root 0 energy = -93.931448649953467; >; >; > Active Space Natural occupation numbers:; >; > A 2.000000 A 1.000000 A 1.000000; >; >; > The 9 most important determinants:; >; > * 1 0.691216 ( 0, 1) 7AX 8AA 9AB; >; > * 2 0.691216 ( 1, 0) 7AX 8AB 9AA; >; > * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX; >; > * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX; >; > * 5 0.000000 ( 0, 0) 7AX 8AX; >; > * 6 0.000000 ( 0, 2) 7AA 8AX 9AB; >; > * 7 0.000000 ( 2, 0) 7AB 8AX 9AA; >; > * 8 -0.000000 ( 2, 2) 8AX 9AX; >; > * 9 -0.000000 ( 1, 1) 7AX 9AX; >; >; > ==> MCSCF root 1 information <==; >; > MCSCF Root 1 energy = -93.902550337672878; >; >; > Active Space Natural occupation numbers:; >; > A 1.999537 A 1.843676 A 0.156787; >; >; > The 9 most important determinants:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345:1962,ENERGY,ENERGY,1962,https://psicode.org,https://github.com/psi4/psi4/issues/2008#issuecomment-693738345,1,['ENERGY'],['ENERGY']
Energy Efficiency,skeleton; 378/411 Test #349: sapt-sf1 ......................... Passed 1.04 sec; Start 406: skeletonaointegrals; 379/411 Test #353: tu1-h2o-energy ................... Passed 1.12 sec; Start 396: python-memdfjk; 380/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.25 sec; Start 411: skeletonwavefunction; 381/411 Test #293: psimrcc-pt2 ...................... Passed 1.38 sec; Start 408: skeletonmointegrals; 382/411 Test #108: dcft2 ............................ Passed 2.92 sec; Start 410: skeletonsointegrals; 383/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 352: stability2; 384/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 354: tu2-ch2-energy; 385/411 Test #396: python-memdfjk ................... Passed 0.93 sec; Start 330: scf-bs; 386/411 Test #398: json-v11-gradient ................ Passed 1.38 sec; Start 382: psi4numpy-rhf; 387/411 Test #406: skeletonaointegrals .............. Passed 1.11 sec; Start 387: python-energy; 388/411 Test #411: skeletonwavefunction ............. Passed 0.91 sec; Start 209: mcscf1; 389/411 Test #408: skeletonmointegrals .............. Passed 0.89 sec; Start 188: fci-tdm; 390/411 Test #354: tu2-ch2-energy ................... Passed 0.76 sec; Start 308: pywrap-db3; 391/411 Test #352: stability2 ....................... Passed 0.85 sec; Start 211: mcscf3; 392/411 Test #410: skeletonsointegrals .............. Passed 0.91 sec; Start 334: scf3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 239: numpy-array-interface; 394/411 Test #330: scf-bs ........................... Passed 0.83 sec; Start 409: skeletonscf; 395/411 Test #387: python-energy .................... Passed 0.72 sec; Start 175: docs-dft; 396/411 Test #209: mcscf1 ........................... Passed 0.65 sec; Start 216: mints5; 397/411 Test #188: fci-tdm .......................... Passed 0.82 sec; Start 208: matrix1; 398/411 Test #308: pywrap-db3 ....................... Passed 0.67 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:36349,energy,energy,36349,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['energy'],['energy']
Energy Efficiency,"slational Cp 4.968 [cal/(mol K)] 20.786 [J/(mol K)] 0.00791703 [mEh/K]; Rotational Cp 2.981 [cal/(mol K)] 12.472 [J/(mol K)] 0.00475022 [mEh/K]; Vibrational Cp 58.770 [cal/(mol K)] 245.894 [J/(mol K)] 0.09365622 [mEh/K]; Total Cp 66.719 [cal/(mol K)] 279.152 [J/(mol K)] 0.10632347 [mEh/K]; Correction Cp 0.000 [cal/(mol K)] 0.000 [J/(mol K)] 0.00000000 [mEh/K]. ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E0; Total E0, Electronic energy at well bottom at 0 [K] -1226.44775184 [Eh]. Zero-point energy, ZPE_vib = Sum_i nu_i / 2; Electronic ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Rotational ZPE 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Vibrational ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Correction ZPE 164.391 [kcal/mol] 687.812 [kJ/mol] 0.26197380 [Eh] 57496.603 [cm^-1]; Total ZPE, Electronic energy at 0 [K] -1226.18577804 [Eh]. Thermal Energy, E (includes ZPE); Electronic E 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational E 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction E 175.804 [kcal/mol] 735.566 [kJ/mol] 0.28016212 [Eh]; Total E, Electronic energy at 298.15 [K] -1226.16758972 [Eh]. Enthalpy, H_trans = E_trans + k_B * T; Electronic H 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational H 174.027 [kcal/mol] 728.129 [kJ/mol] 0.27732956 [Eh]; Correction H 176.397 [kcal/mol] 738.044 [kJ/mol] 0.28110630 [Eh]; Total H, Enthalpy at 298.15 [K] -1226.16664554 [Eh]. Gibbs free energy, G = H - T * S; Electronic G 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational G -11.260 [kcal/mol] -47.112 [kJ/mol] -0.01794389 [Eh]; Rotational G -9.357 [kcal/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079:6819,Energy,Energy,6819,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925160079,1,['Energy'],['Energy']
Energy Efficiency,"solved Issues; - [x] There's certainly room for code cleanup.; - [x] I think `libsapt_solver` is the most logical home for this code and `energy('sapt2+3')` its most logical invocation - after all, this correction forms a part of SAPT2+3 only, not the lower SAPT levels. The E(30)ind correction needs to be calculated beforehand, both for subtracting its value from the total (ind+ex-ind) calculated here, and for generating the third-order induction amplitudes that are reused here. However, unlike most of the stuff in `libsapt_solver`, the code is AO-based and the two-electron integrals enter only via generalized J/K matrices. Therefore, I had to export some additional AO quantities in `libsapt_solver/sapt.h` and I don't know if I did this in an optimal way.; - [x] Note to self: frozen core still needs to be checked. ## Design (Big-Picture) Questions - input from @CDSherrill @dgasmith @loriab and others will be highly beneficial!; - [ ] The three new(ish) beyond-S^2 corrections, E(20)exch-ind, E(20)exch-disp, and E(30)exch-ind cannot be currently calculated by a single SAPT call: the first two require `energy('sapt(dft)')` and the last one `energy('sapt2+3')`. That's quite unfortunate and we need a better workflow, possibly by making the non-S^2 E(20)exch-ind,resp and E(20)exch-disp available as part of `energy('sapt0')`.; - [ ] What should go into aggregate SAPT energy values, S^2 or non-S^2? I made the code pick the non-S^2 value of E(30)exch-ind,resp if available, but I'd be happy to revert it back to picking E(30)exch-ind,resp(S^2). At present, I don't think the non-S^2 values of E(20)exch-ind,resp and E(20)exch-disp are ever included in total SAPT numbers, maybe they should?; - [ ] Finally, the option names such as `do_ind30_exch_sinf` are somewhat unfortunate because they propagate the misconception that you include effects all the way to S^infinity. In reality, the largest power of overlap integral S you ever need is min(NelA,NelB) - after that, you run out of e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2314:1859,energy,energy,1859,https://psicode.org,https://github.com/psi4/psi4/pull/2314,2,['energy'],['energy']
Energy Efficiency,"something like your example was never envisioned,; and if the user wanted the TPDM, they had to request that in the input; before executing DETCI. DETCI can generate an awful lot of intermediate and; bookkeeping data, which is why all that stuff gets blown away after each; energy call. Do you just want the TPDM on disk? If so you could just set the expert; user option 'tpdm' to 'true'. If you somehow need to be able to form it through this kind of API, then I; don't have an immediate answer other than to say it sounds like Daniel or I; would have to dig into the details. The decode matrix itself is not really; so large and so if that's literally the only problem, maybe it could be; kept around. But I suspect that there is other stuff that would be needed; that isn't being kept. On Fri, Feb 14, 2020 at 1:08 PM Jonathon Misiewicz <notifications@github.com>; wrote:. > The following input file segfaults:; >; > molecule {; > symmetry c1; > H; > H 1 1.0; > }; >; > set basis cc-pvdz; > e, wfn = energy('fci', return_wfn=True); > wfn.form_tpdm(); >; > The issue is that the driver cleans up DETCI after every energy call; > <https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L3579>.; > That cleanup frees the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/ciwave.cc#L458>.; > But form_tpdm works by creating a new CI vector; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/tpdm.cc#L56>,; > which is set with the decode matrix; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/civect.cc#L115>,; > which the driver freed, giving rise to a bad access exception.; >; > So which code is supposed to be responsible for DETCI cleanup? If that's; > the responsibility of procrouting, then form_tpdm is always going to; > segfault, so form_tpdm shouldn't be exposed to Python at all, and the; > user should have the TPDM be formed and kept via set tpdm true. If; > cleanup is not the responsibility of procrouting, th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160:1102,energy,energy,1102,https://psicode.org,https://github.com/psi4/psi4/issues/1812#issuecomment-586421160,1,['energy'],['energy']
Energy Efficiency,space: 640. ==> Memory <==. Total memory requirements: 78825.79 mb; 3-index integrals: 10109.75 mb; CCSD intermediates: 68716.04 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 36451.32 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 74; Number of active virtual orbitals: 640; Number of frozen virtual orbitals: 38. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 0.0000000000 0.0000000000 0.0000000000 393. CCSD iterations converged!. T1 diagnostic: 0.000000000000; D1 diagnostic: 0.000000000000. OS MP2 FNO correction: -3.045395864164; SS MP2 FNO correction: -1.111907331006; MP2 FNO correction: -4.157303195170. OS MP2 correlation energy: -3.045395864164; SS MP2 correlation energy: -1.111907331006; MP2 correlation energy: -4.157303195170; * MP2 total energy: -1500.355601695273. OS CCSD correlation energy: -3.045395864164; SS CCSD correlation energy: -1.111907331006; CCSD correlation energy: -4.157303195170; * CCSD total energy: -1500.355601695273. Total time for CCSD iterations: 3404.15 s (user); 270.93 s (system); 607 s (total). Time per iteration: inf s (user); inf s (system); inf s (total). *** tstop() called on r3546 at Mon Feb 10 14:43:17 2014; Module time:; user time = 31046.70 seconds = 517.45 minutes; system time = 945.63 seconds = 15.76 minutes; total time = 5144 seconds = 85.73 minutes; Total time:; user time = 33202.74 seconds = 553.38 minutes; system time = 990.31 seconds = 16.51 minutes; total time = 5317 seconds = 88.62 minutes. *** tstart() called on r3546; *** at Mon Feb 10 14:57:28 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 16; available memory = 83711.64 mb,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34:2140,energy,energy,2140,https://psicode.org,https://github.com/psi4/psi4/issues/34,1,['energy'],['energy']
Energy Efficiency,"spects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1198,ENERGY,ENERGY,1198,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,ssed 1.46 sec; Start 354: tu2-ch2-energy; 377/411 Test #102: decontract ....................... Passed 1.11 sec; Start 406: skeletonaointegrals; 378/411 Test #410: skeletonsointegrals .............. Passed 1.06 sec; Start 222: mints10; 379/411 Test #330: scf-bs ........................... Passed 0.94 sec; Start 188: fci-tdm; 380/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 383: psi4numpy-rhf-gradient; 381/411 Test #298: pubchem2 ......................... Passed 1.60 sec; Start 387: python-energy; 382/411 Test #210: mcscf2 ........................... Passed 1.34 sec; Start 220: mints-helper; 383/411 Test #354: tu2-ch2-energy ................... Passed 0.84 sec; Start 378: mints12; 384/411 Test #188: fci-tdm .......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:36219,energy,energy,36219,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['energy'],['energy']
Energy Efficiency,"ssed 1.50 sec; Start 218: mints10; 171/401 Test #329: scf2 ............................. Passed 2.95 sec; Start 115: ao-dfcasscf-sp; 172/401 Test #117: dfcasscf-fzc-sp .................. Passed 4.07 sec; Start 348: tu1-h2o-energy; 173/401 Test #138: dfomp2-1 ......................... Passed 7.01 sec; Start 305: pywrap-molecule; 174/401 Test #218: mints10 .......................... Passed 3.21 sec; Start 400: json-schema_0_gradient; 175/401 Test #253: omp3-1 ........................... Passed 5.17 sec; Start 122: dfccsd1; 176/401 Test #125: dfccsd-t-grad1 ................... Passed 19.43 sec; Start 393: python-memdfjk; 177/401 Test #220: molden2 .......................... Passed 6.09 sec; Start 123: dfccsdl1; 178/401 Test #305: pywrap-molecule .................. Passed 1.23 sec; Start 347: stability2; 179/401 Test #219: molden1 .......................... Passed 5.30 sec; Start 326: scf-bs; 180/401 Test #227: mp2p5-grad1 ...................... Passed 4.58 sec; Start 349: tu2-ch2-energy; 181/401 Test #348: tu1-h2o-energy ................... Passed 1.49 sec; Start 330: scf3; 182/401 Test #239: ocepa1 ........................... Passed 6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 .............",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:16921,energy,energy,16921,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,2,['energy'],['energy']
Energy Efficiency,ssed 1.69 sec; Start 365: tu2-ch2-energy; 133/415 Test #392: psi4numpy-dfmp2 .................. Passed 1.94 sec; Start 394: psi4numpy-rhf-gradient; 134/415 Test #401: python-mints9 .................... Passed 2.41 sec; Start 344: scf3; 135/415 Test #406: python-mints13 ................... Passed 2.29 sec; Start 319: pywrap-molecule; 136/415 Test #337: scf-guess-read1 .................. Passed 3.82 sec; Start 407: python-memdfjk; 137/415 Test #360: sapt-sf1 ......................... Passed 3.67 sec; Start 393: psi4numpy-rhf; 138/415 Test #398: python-energy .................... Passed 3.51 sec; Start 215: mints1; 139/415 Test #319: pywrap-molecule .................. Passed 1.48 sec; Start 375: options1; 140/415 Test #297: psimrcc-ccsd_t-1 ................. Passed 4.15 sec; Start 248: numpy-array-interface; 141/415 Test #365: tu2-ch2-energy ................... Passed 3.75 sec; Start 211: matrix1; 142/415 Test #212: mcscf1 ........................... Passed 3.86 sec; Start 1: adc1; 143/415 Test #364: tu1-h2o-energy ................... Passed 3.91 sec; Start 2: adc2; 144/415 Test #344: scf3 ............................. Passed 2.32 sec; Start 9: castup2; 145/415 Test #367: scf-response1 .................... Passed 4.22 sec; Start 10: castup3; 146/415 Test #394: psi4numpy-rhf-gradient ........... Passed 3.17 sec; Start 12: cbs-parser; 147/415 Test #375: options1 ......................... Passed 1.05 sec; Start 13: cbs-xtpl-alpha; 148/415 Test #407: python-memdfjk ................... Passed 1.54 sec; Start 17: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:13817,energy,energy,13817,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy']
Energy Efficiency,ssed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ................... Passed 141.24 sec; Start 39: cc22; 163/415 Test #17: cbs-xtpl-opt ..................... Passed 192.06 sec; Start 40: cc23; 164/415 Test #39: cc22 ............................. Passed 61.46 sec; Start 41: cc24; 165/415 Test #36: cc19 ............................. Passed 153.84 sec; Start 42: cc25; 166/415 Test #196: fd-freq-energy-large ............. Passed 970.47 sec; Start 43: cc26; 167/415 Test #29: cc13c ............................ Passed 319.30 sec; Start 44: cc27; 168/415 Test #27: cc13a ............................ Passed 864.99 sec; Start 46: cc29; 169/415 Test #33: cc16 ............................. Passed 369.56 sec; Start 47: cc3; 170/415 Test #13: cbs-xtpl-alpha ................... Passed 464.57 sec; Start 48: cc30; 171/415 Test #405: python-vibanalysis ............... Passed 1198.23 sec; Start 49: cc31; 172/415 Test #31: cc14 ............................. Passed 502.16 sec; Start 51: cc33; 173/415 Test #26: cc13 ............................. Passed 551.27 sec; Start 52: cc34; 174/415 Test #48: cc30 ............................. Passed 124.65 sec; Start 53: cc35; 175/415 Test #51: cc33 ............................. Passed 51.94 sec; Start 54: cc36; 176/415 Test #46: cc29 ............................. Passed 229.97 sec; Start 55: cc37; 177/415 Test #310: pywrap-all ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:15870,energy,energy-large,15870,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['energy'],['energy-large']
Energy Efficiency,ssed 162.14 sec; Start 29: cc14; 14/401 Test #41: cc26 ............................. Passed 100.81 sec; Start 42: cc27; 15/401 Test #189: fd-freq-energy-large ............. Passed 277.33 sec; Start 47: cc31; 16/401 Test #191: fd-freq-gradient-large ........... Passed 278.60 sec; Start 68: cc51; 17/401 Test #178: isapt1 ........................... Passed 294.68 sec; Start 296: pywrap-all; 18/401 Test #61: cc44 ............................. Passed 53.08 sec; Start 73: cc5a; 19/401 Test #68: cc51 ............................. Passed 48.46 sec; Start 24: cc13; 20/401 Test #38: cc23 ............................. Passed 146.07 sec; Start 58: cc41; 21/401 Test #74: cc6 .............................. Passed 64.44 sec; Start 28: cc13d; 22/401 Test #73: cc5a ............................. Passed 46.72 sec; Start 31: cc16; 23/401 Test #47: cc31 ............................. Passed 88.98 sec; Start 60: cc43; 24/401 Test #58: cc41 ............................. Passed 67.08 sec; Start 11: cbs-delta-energy; 25/401 Test #40: cc25 ............................. Passed 185.19 sec; Start 67: cc50; 26/401 Test #174: fsapt1 ........................... Passed 429.49 sec; Start 57: cc40; 27/401 Test #60: cc43 ............................. Passed 63.48 sec; Start 46: cc30; 28/401 Test #29: cc14 ............................. Passed 160.30 sec; Start 27: cc13c; 29/401 Test #28: cc13d ............................ Passed 101.67 sec; Start 64: cc48; 30/401 Test #75: cc7 .............................. Passed 177.91 sec; Start 226: mp2-module; 31/401 Test #36: cc21 ............................. Passed 200.89 sec; Start 34: cc19; 32/401 Test #24: cc13 ............................. Passed 136.55 sec; Start 59: cc42; 33/401 Test #67: cc50 ............................. Passed 44.58 sec; Start 303: pywrap-db1; 34/401 Test #31: cc16 ............................. Passed 127.54 sec; Start 372: pywrap-bfs; 35/401 Test #42: cc27 ............................. Passed 204.66 sec; Start 66: cc4a; 36/401 Test #57:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:2584,energy,energy,2584,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,ssed 5.90 sec; Start 283: opt-freeze-coords; 280/404 Test #6: ao-casscf-sp ..................... Passed 2.75 sec; Start 339: scf-property; 281/404 Test #223: molden1 .......................... Passed 1.19 sec; Start 286: props3; 282/404 Test #224: molden2 .......................... Passed 1.61 sec; Start 400: json-schema-1-ghost; 283/404 Test #190: fci-coverage ..................... Passed 1.78 sec; Start 185: fci-h2o; 284/404 Test #393: python-3-index-transforms ........ Passed 6.24 sec; Start 184: fci-dipole; 285/404 Test #400: json-schema-1-ghost .............. Passed 0.97 sec; Start 340: soscf-large; 286/404 Test #283: opt-freeze-coords ................ Passed 2.80 sec; Start 399: json-schema-1-energy; 287/404 Test #171: dft2 ............................. Passed 4.80 sec; Start 141: dfomp2-3; 288/404 Test #339: scf-property ..................... Passed 3.08 sec; Start 360: x2c1; 289/404 Test #180: fsapt-terms ...................... Passed 4.85 sec; Start 401: json-schema-1-orient; 290/404 Test #399: json-schema-1-energy ............. Passed 1.59 sec; Start 191: fcidump; 291/404 Test #141: dfomp2-3 ......................... Passed 1.61 sec; Start 121: dfccdl1; 292/404 Test #185: fci-h2o .......................... Passed 3.63 sec; Start 376: pywrap-align; 293/404 Test #286: props3 ........................... Passed 4.82 sec; Start 331: scf1; 294/404 Test #184: fci-dipole ....................... Passed 3.85 sec; Start 186: fci-h2o-2; 295/404 Test #401: json-schema-1-orient ............. Passed 1.77 sec; Start 217: mints6; 296/404 Test #121: dfccdl1 .......................... Passed 1.41 sec; Start 85: cepa0-grad1; 297/404 Test #340: soscf-large ...................... Passed 4.47 sec; Start 232: mp2p5-grad2; 298/404 Test #191: fcidump .......................... Passed 3.01 sec; Start 397: json-v11-energy; 299/404 Test #85: cepa0-grad1 ...................... Passed 1.99 sec; Start 234: mp3-grad2; 300/404 Test #232: mp2p5-grad2 ...................... Passed 1.66 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:26906,energy,energy,26906,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,st #100: cubeprop ......................... Passed 8.71 sec; Start 76: cc8; 88/401 Test #298: pywrap-cbs1 ...................... Passed 92.27 sec; Start 172: extern1; 89/401 Test #353: tu5-sapt ......................... Passed 9.35 sec; Start 196: fnocc2; 90/401 Test #91: ci-multi ......................... Passed 17.40 sec; Start 195: fnocc1; 91/401 Test #197: fnocc3 ........................... Passed 9.24 sec; Start 311: sapt1; 92/401 Test #132: dfmp2-ecp ........................ Passed 10.33 sec; Start 148: dfomp3-grad2; 93/401 Test #121: dfccd-grad1 ...................... Passed 6.11 sec; Start 32: cc17; 94/401 Test #83: cdomp2-2 ......................... Passed 16.79 sec; Start 352: tu4-h2o-freq; 95/401 Test #195: fnocc1 ........................... Passed 8.09 sec; Start 390: python-3-index-transforms; 96/401 Test #311: sapt1 ............................ Passed 9.43 sec; Start 106: dcft1; 97/401 Test #238: ocepa-grad2 ...................... Passed 49.33 sec; Start 14: cbs-xtpl-energy; 98/401 Test #172: extern1 .......................... Passed 15.83 sec; Start 362: scf-hess1; 99/401 Test #390: python-3-index-transforms ........ Passed 6.02 sec; Start 126: dfccsdt1; 100/401 Test #352: tu4-h2o-freq ..................... Passed 12.54 sec; Start 33: cc18; 101/401 Test #126: dfccsdt1 ......................... Passed 3.87 sec; Start 7: casscf-sp; 102/401 Test #76: cc8 .............................. Passed 23.26 sec; Start 176: fsapt-terms; 103/401 Test #14: cbs-xtpl-energy .................. Passed 7.95 sec; Start 286: psimrcc-ccsd_t-4; 104/401 Test #362: scf-hess1 ........................ Passed 7.64 sec; Start 120: dfccdl1; 105/401 Test #32: cc17 ............................. Passed 20.79 sec; Start 15: cbs-xtpl-freq; 106/401 Test #120: dfccdl1 .......................... Passed 2.42 sec; Start 336: soscf-large; 107/401 Test #176: fsapt-terms ...................... Passed 4.90 sec; Start 48: cc32; 108/401 Test #196: fnocc2 ........................... Passed 29.15 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:9119,energy,energy,9119,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['energy'],['energy']
Energy Efficiency,st #307: pywrap-db1 ....................... Passed 42.02 sec; Start 312: rasci-ne; 81/411 Test #129: dfmp2-1 .......................... Passed 32.52 sec; Start 206: ghosts; 82/411 Test #230: mp2-module ....................... Passed 61.78 sec; Start 106: dcft-grad4; 83/411 Test #57: cc40 ............................. Passed 28.50 sec; Start 259: omp3-3; 84/411 Test #31: cc16 ............................. Passed 63.68 sec; Start 115: dcft9; 85/411 Test #312: rasci-ne ......................... Passed 35.69 sec; Start 323: sapt7; 86/411 Test #206: ghosts ........................... Passed 32.53 sec; Start 342: soscf-dft; 87/411 Test #386: cookbook-rohf-orb-rot ............ Passed 60.55 sec; Start 237: nbody-he-cluster; 88/411 Test #106: dcft-grad4 ....................... Passed 33.82 sec; Start 66: cc49; 89/411 Test #115: dcft9 ............................ Passed 26.24 sec; Start 359: tu6-cp-ne2; 90/411 Test #259: omp3-3 ........................... Passed 42.02 sec; Start 11: cbs-delta-energy; 91/411 Test #323: sapt7 ............................ Passed 33.21 sec; Start 244: ocepa2; 92/411 Test #342: soscf-dft ........................ Passed 30.10 sec; Start 276: opt11; 93/411 Test #237: nbody-he-cluster ................. Passed 35.76 sec; Start 374: dft-custom-gga; 94/411 Test #66: cc49 ............................. Passed 30.67 sec; Start 68: cc50; 95/411 Test #244: ocepa2 ........................... Passed 36.96 sec; Start 273: opt7; 96/411 Test #374: dft-custom-gga ................... Passed 28.59 sec; Start 59: cc42; 97/411 Test #276: opt11 ............................ Passed 43.58 sec; Start 156: dft-b2plyp; 98/411 Test #68: cc50 ............................. Passed 32.32 sec; Start 1: adc1; 99/411 Test #11: cbs-delta-energy ................. Passed 58.90 sec; Start 264: opt-lindep-change; 100/411 Test #59: cc42 ............................. Passed 20.74 sec; Start 173: dft-omega; 101/411 Test #359: tu6-cp-ne2 ....................... Passed 74.91 sec; Start 375: py,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:8576,energy,energy,8576,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,st #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed 35.89 sec; Start 83: cc9a; 91/412 Test #83: cc9a ............................. Passed 11.86 sec; Start 35: cc19; 92/412 Test #300: pywrap-alias ..................... Passed 25.28 sec; Start 1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7771,energy,energy,7771,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"st add; E ; E 	symmetry c1; E ; E to the molecule{} block to run the PCM code.; E Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsipcm/psipcm.cc on line: 104; E The most recent 5 function calls were:; E ; E psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, m",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14503,energy,energy,14503,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"st energy; > solution.; > ; > 2016-01-14 2:42 GMT-05:00 Rob Parrish notifications@github.com:; > ; > > I have seen this before (for this exact system) - the SAD guess converges; > > to the correct root, but Core does not. Not really much more to it than; > > that.; > > ; > > -Rob; > > ; > > On Wed, Jan 13, 2016 at 11:33 PM, Roberto Di Remigio <; > > notifications@github.com> wrote:; > > ; > > > Choosing a SAD or a core guess for an UHF/cc-pVDZ calculation on H2O+; > > > gives very different energies.; > > > The following input with the core guess gives a total energy of; > > > -75.5488580481183476; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess core; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > while this input with the SAD guess gives a total energy of; > > > -75.6330881795159655; > > > ; > > > memory 250 mb; > > > molecule h2o {; > > > symmetry c1; > > > 1 2; > > > O 0.0000000000 0.0000000000 -0.2249058930; > > > H 1.4523499293 0.0000000000 0.8996235720; > > > H -1.4523499293 0.0000000000 0.8996235720; > > > units bohr; > > > no_reorient; > > > no_com; > > > }; > > > ; > > > set {; > > > basis cc-pVDZ; > > > scf_type direct; > > > guess sad; > > > reference uhf; > > > e_convergence 7; > > > d_convergence 7; > > > }; > > > ; > > > energy_scf1 = energy('scf'); > > > ; > > > Of course, the initial guess has always a huge impact on the; > > > calculation,; > > > but is the reported difference reasonable for a system as small as; > > > H2O+?; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > https://github.com/psi4/psi4public/issues/211.; > > ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/211#issuecomment-171648923:1650,energy,energy,1650,https://psicode.org,https://github.com/psi4/psi4/issues/211#issuecomment-171648923,2,['energy'],['energy']
Energy Efficiency,"stand the problem, it's easiest to work with a toy system. I'm choosing the following:; ```; molecule {; O; H 1 1.0 ; H 1 1.0 2 104.5; }. mtd = ""hf/sto-6g"". set tdscf_tda true; set reference uks ; set tdscf_states [0, 0, 2, 0]. energy(""td-"" + mtd). set reference rks ; set tdscf_states [0, 0, 1, 0]; energy(""td-"" + mtd). set tdscf_triplets only; energy(""td-"" + mtd); ```. Within the TDA approximation, we need to find the roots of a Hermitian matrix. This matrix has the structure J + V + X. J consists of _Coulomb integrals_, V consists of _the exchange correlation second derivative elements_, and X is everything else - it's not relevant for this problem. Because of the spin-properties of the Hamiltonian (and approximate DFT functionals), the matrix becomes block-diagonal upon transforming the basis states (i-a) α and (i-a) β into their normalized plus and minus combinations. The plus eigenvectors correspond to singlets, and the negative eigenvectors to triplets. Matrix elements take the form 1/2 * [(α|α) ± (α|β) ± (β|α) + (β|β)], where parentheses denote a spin-dependent matrix element. Upon exploiting spin-restriction, this reduces to [(α|α) ± (α|β)]. Now, J matrix elements are spinfree, i.e., the Coulomb integral (pq|pq) doesn't care whether the bra and the ket have the same spin-index or not, so long as p and q have the same spinindex. Therefore, the plus spin combination reduces to 2 * (pq|pq), and the minus spin combination reduces to 0. The V matrix elements are not spinfree. Whether you differentiate with respect to an alpha excitation twice or an alpha followed by a beta produces different integrals. The formula [(α|α) ± (α|β)] does not simplify. Unfortunately, Psi combines the V terms into the J terms. Psi currently computes the + case of the V terms with no mechanism to request the - terms. _This_ is why we can't do triplets. This should be fixed, once the code is better organized and commented so it's clear exactly which terms need the freedom to change sign.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2841:1357,reduce,reduces,1357,https://psicode.org,https://github.com/psi4/psi4/issues/2841,3,['reduce'],['reduces']
Energy Efficiency,"stroms). Chrgfield_B = QMMM(); Chrgfield_B.extern.addCharge( 0.417, -2.5628 / psi_bohr2angstroms, -0.8269 / psi_bohr2angstroms, -1.6696 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge(-0.834, -1.7899 / psi_bohr2angstroms, -0.4027 / psi_bohr2angstroms, -1.2768 / psi_bohr2angstroms); Chrgfield_B.extern.addCharge( 0.417, -1.8988 / psi_bohr2angstroms, -0.4993 / psi_bohr2angstroms, -0.3072 / psi_bohr2angstroms). Chrgfield_C = QMMM(); Chrgfield_C.extern.addCharge( 0.417, 1.1270 / psi_bohr2angstroms, 1.5527 / psi_bohr2angstroms, -0.1658 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge(-0.834, 1.9896 / psi_bohr2angstroms, 1.0738 / psi_bohr2angstroms, -0.1673 / psi_bohr2angstroms); Chrgfield_C.extern.addCharge( 0.417, 2.6619 / psi_bohr2angstroms, 1.7546 / psi_bohr2angstroms, -0.2910 / psi_bohr2angstroms). external_potentials = {; 'A': Chrgfield_A,; 'B': Chrgfield_B,; 'C': Chrgfield_C,; }. set {; basis jun-cc-pvdz; scf_type df; guess sad; freeze_core true; }. energy('fisapt0', external_potentials=external_potentials). keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 74.2330370461897, #TEST; 'Eelst' : -0.04919037863747235, #TEST; 'Eexch' : 0.018239207303845935, #TEST; 'Eind' : -0.007969545823122322, #TEST; 'Edisp' : -0.002794948165605119, #TEST; 'Etot' : -0.04171566532235386, #TEST; }. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST. import os; import sys; import subprocess. os.chdir('fsapt'); with open('fA.dat', 'w') as fA: fA.write(""w1 1 2 3""); with open('fB.dat', 'w') as fB: fB.write(""w3 4 5 6""); subprocess.run([sys.executable, os.path.join('..', 'fsapt.py')], check=True). fEnergies = {}; fkeys = [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:4023,energy,energy,4023,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['energy'],['energy']
Energy Efficiency,"sual failure printing (basic is psiapi and tu1 is psithon). Current status has generally been ok since comparison functions are passed through https://github.com/psi4/psi4/blob/master/tests/pytests/utils.py#L37 . I'll have to look into `pytest.register_assert_rewirte`, though, as I haven't met it before. Thanks!. ```; > (gha_eco_rb5) PYTHONPATH=stage/lib/ pytest stage/lib/psi4/tests/ -k ""basic or tu1""; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.10.0, pytest-7.1.0, pluggy-0.13.1; rootdir: /psi/gits/hrw-testgcc/objdir-defenv10/stage/lib/psi4, configfile: pytest.ini; plugins: forked-1.3.0, xdist-2.3.0; collected 3507 items / 3504 deselected / 3 selected . stage/lib/psi4/tests/test_psi4.py F [ 33%]; stage/lib/psi4/tests/test_psi4_qcschema.py . [ 66%]; stage/lib/psi4/tests/tu1-h2o-energy/test_input.py F [100%]. ================================================================================================================= FAILURES ==================================================================================================================; ______________________________________________________________________________________________________________ test_psi4_basic ______________________________________________________________________________________________________________. @pytest.mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:1352,energy,energy,1352,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['energy'],['energy']
Energy Efficiency,"symmetry, switch symmetry off and check if I'm still at a stable solution. However, I find I'm unable to change my molecule for symmetry constraints (or charge/multiplicity for that matter). The following input; ```; molecule sym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set basis STO-3G; energy('scf'). molecule nosym {; 0 1; H 0.459619 0.000000 0.000000; H 0.000000 0.459619 0.000000; }. set scf guess read; energy('scf'); ```; runs the first SCF, but crashes on the second with; ```; RuntimeError: ; Fatal Error: SCF guess was set to SAD, but sad_basissets_ was empty!. Error occurred in file: /home/work/psi4/psi4/psi4/src/psi4/libscf_solver/sad.cc on line: 659; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); psi::scf::HF::compute_SAD_guess(); psi::scf::HF::guess(); psi::scf::HF::initialize(); psi::scf::HF::compute_energy(); ```; Oddly, it appear that while in the second run; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is READ.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00; ```; the initialization uses; ```; ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 375; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12. => Auxiliary Basis Set <=. Basis Set: file /home/work/psi4/install/share/psi4/basis/def2-svp-jkfit.gbs; Number of shells: 12; Number of basis function: 36; Number of Cartesian functions: 40; Spherical Harmonics?: true; Max angular momentum: 2. Minimum eigenvalue in the overlap matrix is 2.8114045453E-01.; Using Symmetric Orthogonalization. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF.; ```; followed by the crash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/586:1361,Energy,Energy,1361,https://psicode.org,https://github.com/psi4/psi4/issues/586,1,['Energy'],['Energy']
Energy Efficiency,t #112: dcft5 ............................ Passed 486.74 sec; Start 113: dcft6; 27/412 Test #13: cbs-xtpl-alpha ................... Passed 538.76 sec; Start 11: cbs-delta-energy; 28/412 Test #111: dcft4 ............................ Passed 1785.19 sec; Start 71: cc52; 29/412 Test #380: cc-module ........................ Passed 446.77 sec; Start 321: sapt6; 30/412 Test #29: cc13d ............................ Passed 499.20 sec; Start 159: dfscf-bz2; 31/412 Test #387: cookbook-rohf-orb-rot ............ Passed 499.71 sec; Start 98: cisd-opt-fd; 32/412 Test #360: tu6-cp-ne2 ....................... Passed 503.92 sec; Start 348: sapt-dft2; 33/412 Test #282: opt-irc-2 ........................ Passed 181.33 sec; Start 48: cc31; 34/412 Test #32: cc16 ............................. Passed 186.69 sec; Start 184: isapt2; 35/412 Test #374: dft-custom-mgga .................. Passed 196.14 sec; Start 59: cc41; 36/412 Test #113: dcft6 ............................ Passed 189.44 sec; Start 169: dft1; 37/412 Test #11: cbs-delta-energy ................. Passed 156.32 sec; Start 155: dft-grad-lr2; 38/412 Test #71: cc52 ............................. Passed 137.50 sec; Start 61: cc43; 39/412 Test #196: fd-freq-gradient-large ........... Passed 312.37 sec; Start 26: cc13a; 40/412 Test #348: sapt-dft2 ........................ Passed 138.78 sec; Start 114: dcft7; 41/412 Test #59: cc41 ............................. Passed 80.57 sec; Start 206: frac-traverse; 42/412 Test #98: cisd-opt-fd ...................... Passed 149.31 sec; Start 317: sapt2; 43/412 Test #159: dfscf-bz2 ........................ Passed 157.81 sec; Start 319: sapt4; 44/412 Test #61: cc43 ............................. Passed 63.98 sec; Start 326: scf-bz2; 45/412 Test #48: cc31 ............................. Passed 101.70 sec; Start 372: dft-custom-dhdf; 46/412 Test #321: sapt6 ............................ Passed 184.79 sec; Start 105: dcft-grad2; 47/412 Test #169: dft1 ............................. Passed 111.64 sec; Start 75: cc,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:3843,energy,energy,3843,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['energy'],['energy']
Energy Efficiency,t 2: adc2; 1/411 Test #1: adc1 ............................. Passed 23.85 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.04 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.66 sec; Start 5: casscf-sa-sp; 4/411 Test #2: adc2 ............................. Passed 42.07 sec; Start 6: ao-casscf-sp; 5/411 Test #6: ao-casscf-sp ..................... Passed 4.18 sec; Start 7: casscf-sp; 6/411 Test #5: casscf-sa-sp ..................... Passed 16.65 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.19 sec; Start 9: castup2; 8/411 Test #9: castup2 .......................... Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:1498,energy,energy,1498,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['energy'],['energy']
Energy Efficiency,t 2: adc2; 1/411 Test #1: adc1 ............................. Passed 40.70 sec; Start 3: casscf-fzc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1500,energy,energy,1500,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['energy'],['energy']
Energy Efficiency,t 389: python-curve; 329/412 Test #235: mp3-grad2 ........................ Passed 16.33 sec; Start 236: mp2-property; 330/412 Test #232: mp2p5-grad1 ...................... Passed 17.17 sec; Start 352: dft-reference; 331/412 Test #400: json-schema-1-energy ............. Passed 17.10 sec; Start 385: psi4numpy-rhf-hessian; 332/412 Test #344: stability1 ....................... Passed 17.94 sec; Start 119: dfcasscf-fzc-sp; 333/412 Test #345: dfep2-1 .......................... Passed 18.02 sec; Start 398: json-v11-energy; 334/412 Test #389: python-curve ..................... Passed 17.89 sec; Start 258: omp3-1; 335/412 Test #236: mp2-property ..................... Passed 20.28 sec; Start 364: zaptn-nh2; 336/412 Test #352: dft-reference .................... Passed 24.29 sec; Start 97: cisd-h2o-clpse; 337/412 Test #385: psi4numpy-rhf-hessian ............ Passed 24.93 sec; Start 328: scf-guess-read1; 338/412 Test #119: dfcasscf-fzc-sp .................. Passed 26.03 sec; Start 214: mints2; 339/412 Test #398: json-v11-energy .................. Passed 31.34 sec; Start 392: python-mints2; 340/412 Test #378: pywrap-align-chiral .............. Passed 53.89 sec; Start 315: sad1; 341/412 Test #258: omp3-1 ........................... Passed 34.04 sec; Start 333: scf-occ; 342/412 Test #364: zaptn-nh2 ........................ Passed 34.64 sec; Start 312: rasci-h2o; 343/412 Test #97: cisd-h2o-clpse ................... Passed 32.86 sec; Start 346: dfep2-2; 344/412 Test #328: scf-guess-read1 .................. Passed 33.40 sec; Start 290: psimrcc-ccsd_t-3; 345/412 Test #214: mints2 ........................... Passed 33.08 sec; Start 329: scf-upcast-custom-basis; 346/412 Test #392: python-mints2 .................... Passed 30.78 sec; Start 362: x2c2; 347/412 Test #315: sad1 ............................. Passed 29.70 sec; Start 402: json-schema-1-orient; 348/412 Test #333: scf-occ .......................... Passed 28.08 sec; Start 294: psimrcc-pt2; 349/412 Test #312: rasci-h2o .............,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:31695,energy,energy,31695,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['energy'],['energy']
Energy Efficiency,"t be empty"" when calling fchk() after the method and basis are defined in the energy() function call.; This problem is found in the latest development version 1.4rc2.dev97.; v1.3.x did not have this problem. ```; molecule {; 0 1; O 3.031916 1.669683 2.276015; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; }; E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); fchk(wfn, ""test4-dma.fchk""); clean(); ```. ```; Traceback (most recent call last):; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/bin/psi4"", line 332, in <module>; exec(content); File ""<string>"", line 69, in <module>; File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1993, in fchk; wfn_ = core.Wavefunction.build(wfn.molecule(), core.get_global_option('BASIS')); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 125, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/p4util/python_helpers.py"", line 90, in _pybuild_basis; return_atomlist=return_atomlist); File ""/home/zj2244/Public/Software/anaconda3/envs/p4dev1/lib//python3.6/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 646, in pyconstruct; raise ValidationError(""""""Orbital basis argument must not be empty.""""""). psi4.driver.qcdb.exceptions.ValidationError: Orbital basis argument must not be empty. Printing out the relevant lines from the Psithon --> Python processed input file:; H 2.818359 1.127467 3.035217; H 2.894980 2.585172 2.519181; """"""); core.IO.set_default_namespace(""""); E, wfn = energy('mp2/6-311G**',properties=['dipole'],return_wfn=True); --> fchk(wfn, ""test4-dma.fchk""); clean(). !--------------------------------------------!; ! !; ! Orbital basis argument must not be empty. !; ! !; !--------------------------------------------!. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177:1790,energy,energy,1790,https://psicode.org,https://github.com/psi4/psi4/issues/2177,1,['energy'],['energy']
Energy Efficiency,"t ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(nre_opt, mol.nuclear_repulsion_energy(), 3, 'opt nre'); compare_values(e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene'); compare_matrices(zerograd, g, 3, 'opt ZERO grad'). def test_odd_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(odd_nre_start, mol.nuclear_repulsion_energy(), 1, 'start nre'); compare_values(odd_e_start, get_variable('CURRENT ENERGY'), 3, 'start ene'); compare_values(odd_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(odd_g_start, g0, 3, 'start grad'). def test_badodd_grad(mol):; e, wfn = optimize('mp2', return_wfn=True, molecule=mol); g = wfn.gradient(); g.print_out(); compare_values(odd_nre_opt, mol.nuclear_repulsion_energy(), 2, 'opt nre nogood'); compare_values(odd_e_opt, get_variable('CURRENT ENERGY'), 5, 'opt ene nogood'); compare_values(odd_rmsg_opt, g.rms(), 4, 'opt grad nogood'). test_norm_start(normz); test_zero_grad(normz). # And behold, the initial gradient matches Q-Chem, the optimization; # progresses nicely, the RMS Force column goes to zero, and the gradient; # at the end is zero. # start nre.........................................................PASSED; # start ene.........................................................PASSED; # start rms grad....................................................PASSED; # start grad........................................................PASSED; #Optimizer: Optimization complete!; # opt nre...........................................................PASSED; # opt ene...........................................................PASSED; # opt ZERO grad.....................................................PASSED. # ------------------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:3166,ENERGY,ENERGY,3166,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['ENERGY'],['ENERGY']
Energy Efficiency,"t parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:13051,charge,charges,13051,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['charge'],['charges']
Energy Efficiency,"t recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1941, in run_occ; occ_wfn = core.occ(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```; - CISD/cc-pVDZ via DETCI: **FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 952, in select_cisd; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3062, in run_detci; ciwfn = core.detci(ref_wfn); ; RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:11916,energy,energy,11916,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,t symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1). # Developer Interests; - Now uses LibXC for DFT XC kernels (#698); - Reworked the building of superfunctionals to use dictionaries (#922); - SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. (#760); - The DFT V Potential object now has Hessian-Vector functionality. (#698); - DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns ,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:4592,efficient,efficient,4592,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['efficient'],['efficient']
Energy Efficiency,"t this error message: . ```; import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). cf_geometry = """"""; 0 2; C; F 1 {0}; symmetry c2v; """""". a_end = 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). ecp = {}. for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). cf = psi4.geometry(cf_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; psi4.core.clean(); ```. The error message I got is:. ```; Traceback (most recent call last):; File ""/home/sanctus/psi4conda/bin/psi4"", line 372, in <module>; exec(content); File ""<string>"", line 46, in <module>; File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5424, in run_detcas; ref_wfn = scf_helper(name, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1769, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1437, in scf",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181:1095,ENERGY,ENERGY,1095,https://psicode.org,https://github.com/psi4/psi4/issues/3181,1,['ENERGY'],['ENERGY']
Energy Efficiency,"t w/o extensive testing and/or it was easier to glide over details. The hand-gen table has been replaced to be more general listing maximum capabilities, the parallelism column has been removed, and the complementary auto-gen summary table has been added; - [x] the main hand-generated capabilities table in introduction.rst and the docstring methods table in driver.py (shows up in https://psicode.org/psi4manual/master/energy.html etc.) have been reconciled with the current state of the procedures table. Devs are now admonished to update all three concurrently :-); - [x] Some investigation and searching of CDS's memory and comparison to GAMESS concluded that for arbitrary-order MPn and ZAPTn through DETCI that the written docs were right (MPn for RHF only and ZAPTn for ROHF only) and what was allowed was wrong (both for both). This has been reworked to match the written docs and various UpgradeHelpers have been positioned. Some tests had to change. Note that ZAPTn reduces to MPn for RHF, and DETCI was producing that correctly. However, DETCI MPn for ROHF wasn't producing anything we had confidence in, so it's good to get that disabled. Ugur's ROHF MP2 matches GAMESS `ospt=rmp` and DETCI's ROHF ZAPT2 matches GAMESS `ospt=zapt`, so I think this puts #311 to rest.; - [x] As reported in #2634, MRCC wasn't playing nicely with distributed driver due to the two-stage call-with-mrmtd then intercept-and-replace-mtd-with-dict. This scheme is replaced by an ordinary method call with MRCC backend indicated by `set qc_program mrcc`, just like intra-psi modules. Psi4 won't just default to MRCC if available; it must be specified. An UpgradeHelper has been deployed. The MRCC definition dictionary has been moved from driver_util.py (in a fn) to a raw dict in procrouting/proc_data.py. Collection of qcvars has been maximized. closes #2634. replaces and closes #2638 EDIT: after discussion below, MRCC _will_ be defaulted to if available. Practically, the only confusion should arise for a-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:5608,reduce,reduces,5608,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['reduce'],['reduces']
Energy Efficiency,"t's a bug in MKL or as temporary in how psi is using MKL. The reason I'm suspicious of MKL is that the answer changes between two values between runs (sometimes have to run 8 times to trigger).; * affects df (both mem and disk) but pk is fine; * affects any basis (currently set as cc-pvdz for efficiency); * nothing to do with SAD guess; * in test suite (run through only once), only the scf-cholesky-basis and an IRC test are affected.; * even by running plain water in df/aqz/uhf, I can't make it act unstable, as the df/dz/uhf benzene doublet does. ```; memory 3 gb. molecule {; -1 2; C 0.00000 0.00000 1.39495; C 0.00000 1.20806 0.69748; C 0.00000 1.20806 -0.69748; C 0.00000 0.00000 -1.39495; C 0.00000 -1.20806 -0.69748; C 0.00000 -1.20806 0.69748; H 0.00000 0.00000 2.47753; H 0.00000 2.14560 1.23877; H 0.00000 2.14560 -1.23877; H 0.00000 0.00000 -2.47753; H 0.00000 -2.14560 -1.23877; H 0.00000 -2.14560 1.23877; }. set basis cc-pVDZ; #set basis aug-cc-pVDZ; #set basis cc-pVTZ; #set basis aug-cc-pVTZ; #set basis cc-pVQZ; #set basis aug-cc-pVQZ; #set scf_type pk; #set scf_type df; set scf_type disk_df; #set scf_type mem_df; set d_convergence 10; set e_convergence 11; set df_scf_guess false; set guess core; #set reference rohf; set reference uhf; e = energy('scf'); print(e). pk_qz_2019 = -76.06462080005818; pk_aqz_2019 = -76.06578901994756; df_qz_2019 = -76.06462015458904; df_aqz_2019 = -76.06578796456354. pk_tz_rohf_2019 = -230.674287472723. pk_dz_uhf_2019 = -230.61792846279093 # passes; pk_adz_uhf_2019 = -230.64203999528007 # passes; pk_tz_uhf_2019 = -230.684552455135 # passes 2019.4, passes 2020.1; df_dz_uhf_2019 = -230.61751709208824 # fails 0.0000 0000 0102; df_adz_uhf_2019 = -230.64167627416992 # fails 0.0000 0000 1137; df_tz_uhf_2019 = -230.68445301909452 # fails -0.0000 0000 0161; df_atz_uhf_2019 = -230.6966011258728 # passes 2019.4, fails 2020.1 -0.0000 0000 2270. ref = df_dz_uhf_2019; compare_values(ref, variable('SCF TOTAL ENERGY'), 10, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122:1490,energy,energy,1490,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633173122,3,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"t. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0) 7AB 8AX 9AA ; * 4 0.206936 ( 2, 2) 8AX 9AX ; * 5 0.015212 ( 1, 1) 7AX 9AX ; * 6 0.000000 ( 1, 0) 7AX 8AB 9AA ; * 7 0.000000 ( 0, 1) 7AX 8AA 9AB ; * 8 -0.000000 ( 1, 2) 7AA 8AB 9AX ; * 9 -0.000000 ( 2, 1) 7AB 8AA 9AX ; ******************************************************",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1320,energy,energy,1320,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['energy'],['energy']
Energy Efficiency,"ta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3633,ENERGY,ENERGY,3633,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,"taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.04432100071995 Hartrees, time taken: 177.1454620063305 seconds.; Aspartic_acid energy: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1537,energy,energy,1537,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,"tal time = 594 seconds = 9.90 minutes; Total time:; user time = 522.41 seconds = 8.71 minutes; system time = 15.59 seconds = 0.26 minutes; total time = 594 seconds = 9.90 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:16:51 2014. ```; **************************************************; * TRANSQT2: Program to transform integrals from *; * the SO basis to the MO basis. *; * *; * Daniel, David, & Justin *; **************************************************. Input parameters:; -----------------; Wave function = SCF; Backtransform = No; Print Level = 1; Print TEIs = No; Reference wfn = RHF; Derivative = None; Delete TEI File = Yes; Memory (Mbytes) = 5000.0; Cache Level = 2; Cache Type = LRU; Chkpt Parameters:; --------------------; Number of irreps = 1; Number of SOs = 246; Number of MOs = 246; Number of active MOs = 246. Label # SOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 246 14 33 0 199 0. Nuclear Rep. energy (chkpt) = 697.11317829643781; SCF energy (chkpt) = -535.97469065986911. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 2; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on shukla-pc.localdomain at Thu Oct 16 11:29:13 2014; Module time:; user time = 259.08 seconds = 4.32 minutes; system time = 51.47 seconds = 0.86 minutes; total time = 742 seconds = 12.37 minutes; Total time:; user time = 781.49 seconds = 13.02 minutes; system time = 67.06 seconds = 1.12 minutes; total time = 1336 seconds = 22.27 minutes. **\* tstart() called on shukla-pc.localdomain; **\* at Thu Oct 16 11:29:13 2014. ---. ```; D E T C I . C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. PARAMETERS: ; EX LEVEL = 2 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLI",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:14260,energy,energy,14260,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['energy'],['energy']
Energy Efficiency,"tals to a CASSCF, you should get exactly the same energy, because the; natural orbitals of a CAS just rotate the active space orbitals amongst; themselves, and the CAS energy is (by definition) invariant to rotations; within the active space. I suppose you could do this if you just wanted to; see how the CI coefficients changed if you used natural orbitals as the; one-particle basis. More typical, if you had trouble converging the CASSCF, would be to run an; initial MP2 or CISD (with no frozen virtuals) and get natural orbitals out; of that, and then do a CAS with those starting orbitals. As Daniel says, we may not have a great mechanism right now to do this with; MP2 NO's (we'll have to work on that). But, if it's a small molecule,; running a CISD initially and getting NO's from that should work. Although,; again, you'd need to be sure to change the keywords ... something like this:. set restricted_uocc [0]; ci_e, ci_wfn = energy('cisd', return_wfn=True). set restricted_uocc [16]; energy('casscf', ref_wfn=ci_wfn). Regarding the original question, though, do you get the same energy out of; the 2nd CASSCF (within convergence criteria)?. On Fri, Jan 27, 2017 at 3:51 AM, Susi Lehtola <notifications@github.com>; wrote:. > I'm a bit puzzled by CAS. The following input; >; > molecule {; > 0 1; > symmetry c1; > C; > C 1 1.0; > }; >; > set basis cc-pVDZ; > set scf_type pk; > set restricted_docc [2]; > set restricted_uocc [16]; > set active [10]; > set wfn detci; > set NUM_DETS_PRINT 40000; > set e_convergence 1e-10; > set r_convergence 1e-10; > set ci_maxiter 1000; > set mcscf_maxiter 100; > set nat_orbs true; >; > cas_e, cas_wfn = energy('casscf', return_wfn=True); >; > energy('casscf', ref_wfn=cas_wfn); >; > should do what you suggest, but when I look at the determinants output; >; > * 1 0.817064 ( 1, 1) 3AX 4AX 5AX 7AX; > * 2 -0.477071 ( 2, 2) 3AX 4AX 6AX 7AX; > * 3 -0.081234 ( 15, 15) 3AX 4AX 5AX 9AX; > * 4 -0.079478 ( 10, 10) 3AX 5AX 7AX 8AX; > * 5 0.075356 ( 3, 9) 3AX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/556#issuecomment-275696618:1244,energy,energy,1244,https://psicode.org,https://github.com/psi4/psi4/issues/556#issuecomment-275696618,1,['energy'],['energy']
Energy Efficiency,"tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a pass. some stuff, notably DFT_DISPERSION_PARAMETERS is out of date. ## Questions; - [ ] This touches a lot of people's code. I'm fairly happy that this is a simplification and a workable design. But it's just a better starting point, and others may have new ideas and improvements. Or see holes in my logic and planning. ## Checklist; - [x] Tests added for any new features; - [x] All full tests run. ## Status; - [x",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:1404,energy,energy,1404,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['energy'],['energy']
Energy Efficiency,tart 325: scf-bz2; 7/411 Test #205: frac-traverse .................... Passed 235.66 sec; Start 1: adc1; 8/411 Test #1: adc1 ............................. Passed 27.11 sec; Start 2: adc2; 9/411 Test #113: dcft7 ............................ Passed 326.30 sec; Start 3: casscf-fzc-sp; 10/411 Test #3: casscf-fzc-sp .................... Passed 13.41 sec; Start 4: casscf-semi; 11/411 Test #4: casscf-semi ...................... Passed 9.02 sec; Start 5: casscf-sa-sp; 12/411 Test #325: scf-bz2 .......................... Passed 127.53 sec; Start 6: ao-casscf-sp; 13/411 Test #2: adc2 ............................. Passed 44.92 sec; Start 7: casscf-sp; 14/411 Test #6: ao-casscf-sp ..................... Passed 6.87 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.39 sec; Start 9: castup2; 16/411 Test #5: casscf-sa-sp ..................... Passed 19.18 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:1853,energy,energy,1853,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['energy'],['energy']
Energy Efficiency,tart 469: cc-module; 158/185 Test #469: cc-module ........................ Passed 23.59 sec; Start 474: tdscf-5; 159/185 Test #474: tdscf-5 .......................... Passed 328.52 sec; Start 475: tdscf-6; 160/185 Test #475: tdscf-6 .......................... Passed 24.27 sec; Start 483: linK-1; 161/185 Test #483: linK-1 ........................... Passed 4.26 sec; Start 486: cbs-xtpl-energy-conv; 162/185 Test #486: cbs-xtpl-energy-conv ............. Passed 17.51 sec; Start 487: ddd-deriv; 163/185 Test #487: ddd-deriv ........................ Passed 17.86 sec; Start 491: psi4numpy-dfmp2; 164/185 Test #491: psi4numpy-dfmp2 .................. Passed 3.86 sec; Start 492: psi4numpy-rhf; 165/185 Test #492: psi4numpy-rhf .................... Passed 2.68 sec; Start 493: psi4numpy-rhf-gradient; 166/185 Test #493: psi4numpy-rhf-gradient ........... Passed 2.37 sec; Start 494: psi4numpy-rhf-hessian; 167/185 Test #494: psi4numpy-rhf-hessian ............ Passed 2.52 sec; Start 499: python-energy; 168/185 Test #499: python-energy .................... Passed 2.39 sec; Start 500: python-curve; 169/185 Test #500: python-curve ..................... Passed 3.30 sec; Start 502: python-mints9; 170/185 Test #502: python-mints9 .................... Passed 2.66 sec; Start 503: python-mints2; 171/185 Test #503: python-mints2 .................... Passed 3.51 sec; Start 504: python-cc54; 172/185 Test #504: python-cc54 ...................... Passed 9.24 sec; Start 505: python-3-index-transforms; 173/185 Test #505: python-3-index-transforms ........ Passed 56.49 sec; Start 506: python-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/1,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:15735,energy,energy,15735,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,"tational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1056, in scf_wavefunction_factory; puream=wfn.basisset().has_puream()); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/p4util/python_helpers.py"", line 80, in _pybuild_basis; mol.to_dict(), key, resolved_target, fitrole, other, return_dict=True, return_atomlist=return_atomlist); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 679, in pyconstruct; verbose=verbose); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 838, in construct; filename = cls.make_filenam",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3848,energy,energy,3848,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,2,['energy'],['energy']
Energy Efficiency,"td::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); E psi::PCM::PCM(psi::Options&, std::shared_ptr<psi::PSIO>, int, std::shared_ptr<psi::BasisSet>); E psi::scf::HF::common_init(); E psi::scf::HF::HF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>, psi::Options&, std::shared_ptr<psi::PSIO>); E psi::scf::RHF::RHF(std::shared_ptr<psi::Wavefunction>, std::shared_ptr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; Case Study Test of all SCF algorithms/spin-degeneracies: Singlet-Triplet O2; -Integral package: SIMINT; -Nuclear Repulsion:; 	Triplet nuclear repulsion energy..................................PASSED; 	Triplet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; 	Singlet nuclear repulsion energy..................................PASSED; -Singlet RHF:. *** tstart() called on computer02.local; *** at Wed Oct 11 20:50:27 2017. => Loading Basis Set <=. Name: CC-PVTZ; Role: ORBITAL; Keyword: BASIS; atoms 1-2 entry O line 247 file /home/joao/miniconda3/share/psi4/basis/cc-pvtz.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, and Andy Simmonett; RHF Reference; 6 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Full point group: D_inf_h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational const",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:14653,energy,energy,14653,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['energy'],['energy']
Energy Efficiency,"te : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; For ADC(1) results, we continue to see no remarkable error. In the ADC(2) results, the HF system's excitation energies calculated by QChem reproduce the results provided in the Trofimov, Stelter, Schirmer paper. However, the energies provided by Psi4 seem to have an inconsistent deviation from the values: for some states, the energies reported are near exact:; ```; Lit: 9.63 eV; Psi4: 9.6455240 eV; QChem: 9.631168 eV; ```; for others, the excitation energy deviates as much as 0.08 eV:; ```; Lit: 15.33 eV; Psi4: 15.2573251 eV; QChem: 15.318842 eV; ```. ### **N2**; In the case of the N2 system, we again saw no errors in the ADC(1) results. QChem continues to be able to reproduce excitation energies for ADC(2) calculations, but in Psi4, for several states in the ADC(2) calculation, we see warnings about a strongly rotated CIS state and zero eigenvalues. ### **Psi4 1.3.2 -- N2 ADC(2) excitation energies**; ```; 1 Ag state : 0.9479767 (a.u.), 25.7957601 (eV); 2 Ag state : 1.0193053 (a.u.), 27.7367101 (eV); #WARNING: Strongly rotated from the CIS state!; 3 Ag state : 1.0706909 (a.u.), 29.1349838 (eV); #WARNING: Strongly rotated from the CIS state!; 4 Ag state : 1.1395201 (a.u.), 31.0079202 (eV). 1B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 2B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #WARNING: Strongly rotated from the CIS state!; 3B1g state : 0.0000000 (a.u.), 0.0000000 (eV); #",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:3480,energy,energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"te-packages/psi4/tests/test_psi4.py::test_psi4_cas PASSED [ 86%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_dfmp2 PASSED [ 90%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_sapt PASSED [ 95%]; ../lib/python3.6/site-packages/psi4/tests/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3196,energy,energy,3196,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['energy'],['energy']
Energy Efficiency,"ted stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing: OO ROHF was printing and setting wrong plain MP2 energies, OMP3 & OMP2.5 wasn't setting right `Wfn.energy_`, stop setting ROHF MP3 and MP2.5 out of caution.; - [x] tightened the min rms_mograd_convergence from 6.0 to 6.5 so that stdsuite (3 mol/basis sets) could reliably compute energies, gradients, and findif gradients to 1e-6. ## Questions; - [x] sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. @behnle, please confirm that this sounds right.; - @behnle, sorry for the long delay and scrambling of your PR. please feel free to comment and PR to this to ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:1742,energy,energy,1742,https://psicode.org,https://github.com/psi4/psi4/pull/2653,2,['energy'],['energy']
Energy Efficiency,"ted to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. Use it experimentally and report back.; - [x] n-body wrapper can no longer do embed",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6429,ENERGY,ENERGY,6429,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"tegrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OO|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|OO) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Transforming (OV|VV) Integrals <==; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ==> Ground State <==; -> MP2 energy = -2.73300898049903; [Squared-norm of MP1 wavefunction = 1.9482925]; PR-MP2 energy = -2.67454645912216; [Squared-norm of PR-MP1 wavefunction = 1.9035300]. ==> CIS/ADC(1) Level <==. 1 A state: 0.0517508 (a.u.), 1.4082107 (eV); ---------------------------------------------; 48 0 0.9604025397; 48 2 0.1503577396; 48 4 0.1179983520; 41 0 0.1104431860; 39 0 0.0512708739. 2 A state: 0.1139962 (a.u.), 3.1019955 (eV); ---------------------------------------------; 47 0 0.9322885266; 45 0 0.2322877190; 47 4 0.1095223496; 47 2 0.1012025144; 43 2 0.0790815566. ==> ADC(2) Computation <==. -> 1 A state : 0.0000632 (a.u.), 0.0017207 (eV); Non-iterative: -0.0001946 (a.u.), -0.0052954 (eV); Occ Vir Coefficient; ---------------------------------------------; 48 0 -0.9643264198; 48 4 -0.1622220253; 48 2 -0.1163186773; 46 0 -0.0845761860; 41 0 -0.0678547535. Converged in 7 iteration.; Squared norm of the S component: 0.9427657; The S vector is rotated up to 0.549 (deg.). -> 2 A state : 0.0",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859:1723,energy,energy,1723,https://psicode.org,https://github.com/psi4/psi4/pull/1599#issuecomment-482414859,1,['energy'],['energy']
Energy Efficiency,"tems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute SCF energy; energy = psi4.energy('scf'); return energy. def generate_potential_energy_curve():; bond_lengths = np.arange(0.7, 5.02, 0.02); energies = []. for bond_length in bond_lengths:; try:; energy = compute_energy(bond_length); energies.append(energy); print(f""Bond length: {bond_length:.2f}, Energy: {energy:.8f}""); except Exception as e:; print(f""Error at bond length {bond_length}: {e}""); energies.append(float('nan')). return bond_lengths, energies. # Generate potential energy curve; bond_lengths, energies = generate_potential_energy_curve(). # Save bond lengths and energies to a text file; data_file = 'CF_PEC_0_data.csv'; with open(data_file, 'w') as file:; file.write(""Bond Length (Angstrom) Energy (Hartree)\n""); for length, energy in zip(bond_lengths, energies):; file.write(f""{length:.6f} {energy:.8f}\n""). print(f""Potential energy data saved to {data_file}""). # Plot the potential energy curve; plt.figure(figsize=(8, 6)); plt.plot(bond_lengths, energies, marker='o', linestyle='-', color='b', label='SCF Energy Curve'); plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curve for CF Molecule'); plt.grid(True); plt.legend(); plt.tight_layout(). # Save the plot as an image file; plot_file = 'CF_PEC_Psi4_0.png'; plt.savefig(plot_file); print(f""Plot saved as {plot_file}""). # Display the plot; plt.show(); ; ,Here's the script I ran for the excited states: ; import numpy as np; import psi4; import matplotlib.pyplot as plt. # Set Psi4 memory; psi4.set_memory('2 GB'). def compute_energy(bond_length):; molecule = psi4.geometry(f""""""; 0 2; C 0.000000000 0.000000000 0.000000000; F 0.000000000 0.000000000 {bond_length:.6f}; """"""). psi4.set_options({; 'basis': 'cc-pVTZ',; 'reference': 'uhf', # Use UHF for open-shell systems; 'scf_type': 'pk',; 'maxiter': 100,; 'e_convergence': 1e-8,; 'd_convergence': 1e-8; }). # Compute ground sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:1798,energy,energy,1798,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['energy'],['energy']
Energy Efficiency,"ter 17: -86.99766298311712 -7.48444e+00 1.95566e+00; 11A -0.145050 12A -0.078975 13A 0.025729	 |	 @DF-RHF iter 18: -67.01020411750814 1.99875e+01 1.12449e+01; 14A 0.109066 15A 0.126537 16A 0.296366	 |	 @DF-RHF iter 19: -88.09037476426056 -2.10802e+01 1.29834e+00; 17A 0.348237 18A 1.842526 19A 1.911753	 |	 @DF-RHF iter 20: -87.74745909582182 3.42916e-01 1.57938e+00; 20A 2.235682 21A 2.639750 22A 4.068870	 |	 @DF-RHF iter 21: -49.76413449146133 3.79833e+01 2.29697e+01; 23A 4.230928 24A 4.338550 25A 32.834338	 |	 @DF-RHF iter 22: -77.94619510085352 -2.81821e+01 6.69706e+00; Final Occupation by Irrep:						 |	 @DF-RHF iter 23: -80.45392024701042 -2.50773e+00 4.59655e+00; A								 |	 @DF-RHF iter 24: -76.07267063391218 4.38125e+00 9.18998e+00; DOCC [ 4 ]							 |	 @DF-RHF iter 25: -61.85382425940151 1.42188e+01 1.05928e+01; NA [ 4 ]							 |	 @DF-RHF iter 26: -86.77218963929283 -2.49184e+01 2.75808e+00; NB [ 4 ]							 |	 @DF-RHF iter 27: -77.43543931232399 9.33675e+00 3.96819e+00; @DF-RHF Final Energy: -35.61046747457991				 |	 @DF-RHF iter 28: -83.24663680738689 -5.81120e+00 3.02602e+00; => Energetics <=							 |	 @DF-RHF iter 29: -84.59007629023938 -1.34344e+00 2.49302e+00; Nuclear Repulsion Energy = 0.0000000000000000		 |	 @DF-RHF iter 30: -86.14724570488455 -1.55717e+00 1.56145e+00; One-Electron Energy = -54.3510785737621944		 |	 @DF-RHF iter 31: -78.57013959925717 7.57711e+00 2.04327e+00; Two-Electron Energy = 18.7406110991822779		 |	 @DF-RHF iter 32: -85.83622153869187 -7.26608e+00 3.17187e+00; Total Energy = -35.6104674745799201		 |	 @DF-RHF iter 33: -87.27348788185634 -1.43727e+00 1.46175e+00; Computation Completed							 |	 @DF-RHF iter 34: -76.35072049818045 1.09228e+01 3.97637e+00; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0	 |	 @DF-RHF iter 35: -70.56903511141743 5.78169e+00 1.24567e+01; Properties computed using the SCF density matrix			 |	 @DF-RHF iter 36: -75.56024107699382 -4.99121e+00 7.54313e+00; Multipole Moments:							 |	 @DF-RH",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3072:9879,Energy,Energy,9879,https://psicode.org,https://github.com/psi4/psi4/issues/3072,1,['Energy'],['Energy']
Energy Efficiency,"ter 4: -2.85520042768697 -8.19389e-12 7.59854e-09 DIIS; @DF-UHF iter 5: -2.85520042768698 -6.66134e-15 1.13220e-11 DIIS; @DF-UHF iter 6: -2.85520042768698 -4.44089e-16 7.51303e-13 DIIS; Energy and wave function converged. ==> Post-Iterations <==. @Spin Contamination Metric: -4.440892099E-16; @S^2 Expected: 0.000000000E+00; @S^2 Observed: -4.440892099E-16; @S Expected: 0.000000000E+00; @S Observed: 0.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied: . 1A -0.914188 . Alpha Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Beta Occupied: . 1A -0.914188 . Beta Virtual: . 2A 0.431249 3A 1.399267 4A 2.524088 ; 5A 2.524090 6A 2.524090 7A 3.187532 ; 8A 3.187532 9A 3.187564 10A 4.214194 . Final Occupation by Irrep:; A ; DOCC [ 1 ]; SOCC [ 0 ]. @DF-UHF Final Energy: -2.85520042768698. => Energetics <=. Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -3.8820241745672806; Two-Electron Energy = 1.0268237468803001; Total Energy = -2.8552004276869805. UHF NO Occupations:; HONO-0 : 1 A 2.0000000; LUNO+0 : 2 A 0.0000000; LUNO+1 : 3 A 0.0000000; LUNO+2 : 4 A 0.0000000; LUNO+3 : 5 A 0.0000000. Computation Completed. Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -5.6000. Electronic Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: 5.5998. Dipole Moment: [e a0]; X: -0.0000 Y: -0.0000 Z: -0.0002 Total: 0.0002. Dipole Moment: [D]; X: -0.0000 Y: -0.0000 Z: -0.0005 Total: 0.0005. /home/filip/software/intel-parallel/intelpython3/lib/python3.6/site-packages/numpy/lib/npyio.py:538: FutureWarning: Object arrays will not be saved by default in the future because `allow_pickle` will default to False. You should add `allow_pickle=True` explicitly to elminate this warning.; pickle_kwargs=pickle_kwargs); Traceback (most recent call last):; File ""minimal.py""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282:9462,Energy,Energy,9462,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524633282,1,['Energy'],['Energy']
Energy Efficiency,"ter 6: -76.01729647642517 -3.47816e-06 1.57456e-05 DIIS; @RHF iter 7: -76.01729655361160 -7.71864e-08 2.57884e-06 DIIS; @RHF iter 8: -76.01729655525962 -1.64802e-09 3.36940e-07 DIIS; @RHF iter 9: -76.01729655528302 -2.34053e-11 2.79546e-08 DIIS; @RHF iter 10: -76.01729655528305 -2.84217e-14 2.79199e-09 DIIS. ==> Post-Iterations <==. Orbital Energies (a.u.); -----------------------. Doubly Occupied: . 1A1 -20.569000 2A1 -1.320609 1B2 -0.678724 ; 3A1 -0.563930 1B1 -0.495004 . Virtual: . 4A1 0.202466 2B2 0.292719 3B2 0.981164 ; 5A1 1.056318 6A1 1.129179 2B1 1.168639 ; 4B2 1.294985 7A1 1.413596 1A2 1.802875 ; 8A1 1.806916 3B1 1.918871 9A1 2.513248 ; 5B2 2.537822 6B2 2.713577 2A2 2.921065 ; 4B1 2.947486 10A1 3.291755 11A1 3.620730 ; 7B2 3.874917 12A1 4.077740 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 3, 0, 1, 1 ]. Energy converged. @RHF Final Energy: -76.01729655528305. => Energetics <=. Nuclear Repulsion Energy = 8.8046866186390567; One-Electron Energy = -122.3894315902240919; Two-Electron Energy = 37.5674484163019855; PCM Polarization Energy = 0.0000000000000000; Total Energy = -76.0172965552830533. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 1.0351. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: -0.1532. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.8819 Total: 0.8819. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 2.2414 Total: 2.2414. *** tstop() called on mac-psinet.sherrill.chemistry.gatech.ed at Wed Oct 25 13:40:59 2017; Module time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 0.39 seconds = 0.01 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 0 seconds = 0.00 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:6319,Energy,Energy,6319,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Energy'],['Energy']
Energy Efficiency,"tern.addCharge(0.417,0.544757019107,0.0,-3.799961446760); Chrgfield.extern.addCharge(0.417,0.544757019107,0.0,-0.912085762652); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. 2) A helium atom with a point charge (q=-1) 1 Angstrom away. ```; memory 1 gb; set reference rks; set basis 6-31G*; set guess sad; set scf_type df. molecule QMregion {; 0 1; He 0.0 0.0 0.0; symmetry c1; no_reorient; no_com; }. gradient(""PBE0""). Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1,0.0,0.0,1.8897261245650618); psi4.set_global_option_python('EXTERN',Chrgfield.extern). gradient(""PBE0""); ```. For test 1, the gradient from the water and the water+charges are different, but they do not agree with the forces returned by an equivalent calculation with Gaussian. The isolated water molecule has gradients that agree with the Gaussian forces, but once the charges are added the Gaussian and PSI4 calculations return different results. For test 2, the PSI4 gradient is zero for the for the helium with and without the point charge. The charge has no effect on the results. When I repeated the calculation with Gaussian, there was a finite force on the helium atom when a charge was included. Here are the gradient results I pulled from the output files:. ```; Water+Charges (TIP3P charges: O->-0.834, H->0.417). PSI4 gradient without charges:; 1 -0.000345685156 -0.000000503248 -0.001768512746; 2 0.000171019827 0.000099064969 0.000874930893; 3 0.000170945942 -0.000098562011 0.000874553581. Gaussian forces without charges:; 1 8 0.000342119 0.000000502 0.001755656; 2 1 -0.000171096 -0.000103970 -0.000878017; 3 1 -0.000171022 0.000103468 -0.000877640. PSI4 gradient with charges:; 1 0.001872262723 -0.000000506498 -0.002344911788; 2 -0.000937982580 -0.003306842432 0.001163140925; 3 -0.000938055973 0.003307348640 0.001162761678. Gaussian forces with charges:; 1 8 0.002079660 0.000000498 -0.002984605; 2 1 0.000413259 0.000612887 -0.001458686; 3 1 0.000413331 -0.000613388 -0.0014",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/184:1724,charge,charge,1724,https://psicode.org,https://github.com/psi4/psi4/issues/184,1,['charge'],['charge']
Energy Efficiency,"test using ctest.; I have one test ""dft-custom-gga"" failed. And I wonder how I can do to pass. I upload the log file below:. ```; 373/405 Testing: dft-custom-gga; 373/405 Test: dft-custom-gga; Command: ""/usr/bin/python2.7"" ""/root/psi4/tests/runtest.py"" ""/root/psi4/tests/dft-custom-gga/input.dat"" ""/root/psi4/build/testresults.log"" ""false"" ""/root/psi4"" ""false"" ""/root/psi4/build/tests/dft-custom-gga/output.dat"" ""/root/psi4/build/stage/share/psi4/bin/psi4"" ""/root/psi4/build/stage/share/psi4/share/psi4"" ""/root/psi4/build/stage/share/psi4/lib/""; Directory: /root/psi4/build/tests/dft-custom-gga; ""dft-custom-gga"" start time: Jun 09 20:39 CDT; Output:; ----------------------------------------------------------; Ne: PBE...........................................................PASSED; Ne: BLYP..........................................................PASSED; Traceback (most recent call last):; File ""/root/psi4/build/stage/share/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 44, in <module>; File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 2009, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/root/psi4/build/stage/share/psi4/lib//psi4/driver/procrouting/proc.py"", line 1363, in scf_helper; e_scf = scf_wfn.compute_energy(). RuntimeError:; Fatal Error: Iterations did not converge.; Error occurred in file: /root/psi4/psi4/src/psi4/libpsi4util/process.cc on line: 112; The most recent 5 function calls were:; psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int). Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 23.66 sec; ----------------------------------------------------------; Test Failed.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038:1212,energy,energy,1212,https://psicode.org,https://github.com/psi4/psi4/issues/1038,2,['energy'],['energy']
Energy Efficiency,"thanks, @konpat, this is mostly waiting on v1.3 tag before merge. what's hooked up at present is enough to collect sinf info for runs en masse, and I think that's the plan. Then use best-ways-to-sum-together findings to decide what `energy('sapt???')` should be defined (though I agree that something like `energy('sapt0-sinf')` is almost certainly wanted). would you want to add a paragraph about the sinf methods to https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/sapt.rst ? `.. include:: autodir_options_c/sapt__aio_cphf.rst` is how to auto-inject the read_options.cc blurb into the narrative docs. feel free to put any papers in the introduction.rst sections.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629:233,energy,energy,233,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465341629,2,['energy'],['energy']
Energy Efficiency,"the CP IE gradient is correct from 3 SP gradients, right? and nothing labeled CP total gradient or CP total energy is printed from line 6. so I'd think line 6 would be ok without altering the defaults. if the user was interested in total energies/gradients, he'd add `return_total_data=True` for line 5 and get the 5 SP gradients and correct CP total gradient and CP total energy. maybe I'm supposing incorrectly that users easily notice when IE vs tot_E returned is not what they intended.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864:108,energy,energy,108,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869969864,2,['energy'],['energy']
Energy Efficiency,"the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed the EMBPOT functionality in `HF::form_H()` by removing AO to SO transformation and supplying an appropriately sized vector to the `BasisSet::compute_phi()` call.; - [x] Added function `MintsHelper::embpot_grad()` to calculate the component of the gradient from the EMBPOT perturbation. ## Checklist; - [x] Added test `embpot1` to compare energies and gradients computed by including embedded point charges analytically, through the `external_potentials` keyword, and numerically, through the EMBPOT functionality.; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:2583,charge,charges,2583,https://psicode.org,https://github.com/psi4/psi4/pull/3239,1,['charge'],['charges']
Energy Efficiency,"the above. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ## Notes; - Iterative Diagonalization methods have been generalized to work with an `engine` which is an object that must provide a particular API (documented). The `engine` provides the relevant Matrix x trial vector functions and a series of methods that allow the engine to perform standard operations on the trial vectors without needing to know what data structure is used for a trial vector. ; - Two engines have been implemented that provide the products required for TDHF/TDDFT. A flag passed to the engines `__init__` method will determine if they are configured to perform Ax products (for TDA/CIS) or both (A+B)x and (A-B)x products for Full TDDFT/TDHF. ; - The Restricted reference engine `TDRSCFEngine` also expects a flag to determine if products are spin adapted for singlet or triplet excitations.; - It appears as best as I can tell that the `UV::compute_Vx` method is not implemented correctly for GGA functionals so UKS excitations are only correct for LDA functionals and pure HF; - It also appears that the `RV::compute_Vx` provides the singlet spin adapted product as RKS singlet excitations are correct for LDA/GGA Hybrids and LRC, but not for the triplet. Looking in the literature and at the implementation in pyscf I am pretty sure that for the triplet product a spin polarized XC kernel is required with some of the terms dropped. See [this paper](https://ac.els-cdn.com/000926149600440X/1-s2.0-000926149600440X-main.pdf?_tid=7899ff46-2714-433b-ba61-196b62ca0e51&acdnat=1547482655_c87a35aa638ca9a2423c76a904b200e5) for spin adapted expressions.; - I have implemented tests for All combinations of [Restricted(singlet/triplet)/Unrestricted-RPA/TDA-LDA/GGA/Hybrids/LRC/HF] and marked the cases for known failures. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:1460,adapt,adapted,1460,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['adapt'],['adapted']
Energy Efficiency,"the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1606,ENERGY,ENERGY,1606,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"the snsmp2 plugin (https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/wavefunctioncache.py) is a big user of the npz format for file 180 before wavefunction serialization to a npy file. (Probably the only external user.) Moreover, they both use them and write out new ones for consumption. They also modify and store `Ca_occ` in their exchange files. (Looks like npz did this: https://github.com/psi4/psi4/commit/e5b12a40c8c2d65a5e59f758df871407afdc544c#diff-dbf22cd80d16f6d8ef8250145a6d91bf) For those from a psi4 run, the Ca_occ can just be extracted by API from the deserialized wfn. But is there any facility for storing extra items in the npy?. There's some lengthy workarounds for issues since resolved (custom cast-up) but the guess of dimer from stack of monomer isn't in psi4 and the plugin isn't being actively developed (to my knowledge), so I suggest a minimal patch-up rather than thorough update. The way to run this is to build an up-to-date psi, edit it to apply #1508, then clone the snsmp2 repo (above), navigate to `<sns-mp2-repo>/tests/` and run an input with `PYTHONPATH=../ <path-to-psi4-objdir>/stage/bin/psi4 simple.in`. If this doesn't get taken up, we'll tackle it next Wednesday the @CDSherrill group programming. In the meantime, snsmp2 is getting dropped from `psi4-rt`. FYI @rmcgibbo",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514:287,consumption,consumption,287,https://psicode.org,https://github.com/psi4/psi4/issues/1514,1,['consumption'],['consumption']
Energy Efficiency,"ther PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1959,energy,energy,1959,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['energy'],['energy']
Energy Efficiency,"thods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig('potential_energy_curve_CF.png'). # Displaying the plot; plt.show(). Here's one of the error I got after several modifications. Please I need serious help on this right now.; Error computing energies at bond length 1.0: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.2: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.4: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.5999999999999999: 'NoneType' object has no attribute 'group'; ^CTraceback (most recent call last):",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:3856,Energy,Energy,3856,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,2,['Energy'],['Energy']
Energy Efficiency,"thon-mints13; 174/185 Test #506: python-mints13 ................... Passed 2.17 sec; Start 507: python-mints14; 175/185 Test #507: python-mints14 ................... Passed 2.67 sec; Start 508: python-cc-amps; 176/185 Test #508: python-cc-amps ................... Passed 31.08 sec; Start 509: python-databases; 177/185 Test #509: python-databases ................. Passed 50.67 sec; Start 510: json-schema-1-energy; 178/185 Test #510: json-schema-1-energy ............. Passed 3.74 sec; Start 514: json-schema-1-gradient; 179/185 Test #514: json-schema-1-gradient ........... Passed 2.98 sec; Start 518: dftd3-energy; 180/185 Test #518: dftd3-energy ..................... Passed 50.87 sec; Start 523: sapt0-d; 181/185 Test #523: sapt0-d .......................... Passed 440.00 sec; Start 524: fsapt-d; 182/185 Test #524: fsapt-d .......................... Passed 542.90 sec; Start 525: fsaptd-terms; 183/185 Test #525: fsaptd-terms .....................***Failed 17.57 sec; Start 526: dftd4-energy; 184/185 Test #526: dftd4-energy ..................... Passed 129.00 sec; Start 527: dftd4-r2scan; 185/185 Test #527: dftd4-r2scan .....................***Failed 9.40 sec. 95% tests passed, 9 tests failed out of 185. Label Time Summary:; addon = 189.28 sec*proc (3 tests); cart = 2407.47 sec*proc (55 tests); cas = 138.78 sec*proc (1 test); casscf = 84.46 sec*proc (11 tests); cbs = 262.77 sec*proc (9 tests); cc = 775.63 sec*proc (13 tests); cdomp2 = 41.72 sec*proc (2 tests); ci = 147.62 sec*proc (2 tests); cisd = 6.82 sec*proc (1 test); cubeprop = 28.89 sec*proc (2 tests); d2ints = 58.89 sec*proc (7 tests); dct = 22.51 sec*proc (3 tests); df = 324.56 sec*proc (15 tests); dfccd = 5.11 sec*proc (1 test); dfccsd = 7.31 sec*proc (1 test); dfccsd-grad = 14.46 sec*proc (1 test); dfccsd-t-grad = 13.06 sec*proc (1 test); dfccsdl = 7.10 sec*proc (1 test); dfep2 = 10.99 sec*proc (2 tests); dfmp2 = 198.00 sec*proc (6 tests); dfomp2 = 6.63 sec*proc (1 test); dfomp3 = 66.77 sec*proc (2 tests); dft = 1",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930:17314,energy,energy,17314,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2373056930,2,['energy'],['energy']
Energy Efficiency,thon-mints2 .................... Passed 2.41 sec; Start 392: python-cc54; 378/411 Test #320: sapt6 ............................ Passed 164.21 sec; Start 393: python-3-index-transforms; 379/411 Test #162: dft-grad-lr3 ..................... Passed 463.80 sec; Start 395: python-mints13; 380/411 Test #395: python-mints13 ................... Passed 1.91 sec; Start 396: python-memdfjk; 381/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 397: json-v11-energy; 382/411 Test #393: python-3-index-transforms ........ Passed 10.61 sec; Start 398: json-v11-gradient; 383/411 Test #397: json-v11-energy .................. Passed 3.63 sec; Start 399: json-schema-1-energy; 384/411 Test #398: json-v11-gradient ................ Passed 2.08 sec; Start 400: json-schema-1-ghost; 385/411 Test #400: json-schema-1-ghost .............. Passed 1.34 sec; Start 401: json-schema-1-orient; 386/411 Test #392: python-cc54 ...................... Passed 22.48 sec; Start 402: json-schema-1-throws; 387/411 Test #399: json-schema-1-energy ............. Passed 3.15 sec; Start 403: json-schema-1-gradient; 388/411 Test #401: json-schema-1-orient ............. Passed 2.07 sec; Start 404: json-schema-1-properties; 389/411 Test #402: json-schema-1-throws ............. Passed 0.60 sec; Start 405: skeleton; 390/411 Test #404: json-schema-1-properties ......... Passed 1.09 sec; Start 406: skeletonaointegrals; 391/411 Test #403: json-schema-1-gradient ........... Passed 1.66 sec; Start 407: skeletondfmp2; 392/411 Test #405: skeleton ......................... Passed 1.22 sec; Start 408: skeletonmointegrals; 393/411 Test #406: skeletonaointegrals .............. Passed 1.35 sec; Start 409: skeletonscf; 394/411 Test #408: skeletonmointegrals .............. Passed 1.63 sec; Start 410: skeletonsointegrals; 395/411 Test #409: skeletonscf ...................... Passed 0.67 sec; Start 411: skeletonwavefunction; 396/411 Test #407: skeletondfmp2 .................... Passed 1.86 sec; 397/411 Test #410:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:36296,energy,energy,36296,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['energy'],['energy']
Energy Efficiency,"tin Turney, Rob Parrish, Andy Simmonett; and Daniel Smith; RHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.069592187390 15.994914619560; H 0.000000000000 -0.783151105291 0.552239257844 1.007825032070; H 0.000000000000 0.783151105291 0.552239257844 1.007825032070. Running in c2v symmetry. Rotational constants: A = 24.35462 B = 13.63610 C = 8.74166 [cm^-1]; Rotational constants: A = 730133.20983 B = 408800.03934 C = 262068.46197 [MHz]; Nuclear repulsion = 8.804686618639057. Charge = 0; Multiplicity = 1; Electrons = 10; Nalpha = 5; Nbeta = 5. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-08; Density threshold = 1.00e-08; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: 6-31G**; Blend: 6-31G**; Number of shells: 12; Number of basis function: 25; Number of Cartesian functions: 25; Spherical Harmonics?: false; Max angular momentum: 2. ==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A1 12 12 0 0 0 0; A2 2 2 0 0 0 0; B1 4 4 0 0 0 0; B2 7 7 0 0 0 0; -------------------------------------------------------; Total 25 25 5 5 5 0; -------------------------------------------------------. ==> Integral Setup <==. Using in-core PK algorithm.; Calculation information:; Number of atoms: 3; Number of AO shells: 12; Number of primitives: 25; Number of atomic orbitals: 25; Number of basis functions: 25. Integral cutoff 1.00e-12; Number of threads: 1. Performing in-core PK; Using 105950 doubles for integral storage.; We computed 30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339412812:3480,Energy,Energy,3480,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339412812,1,['Energy'],['Energy']
Energy Efficiency,"ting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location. This will allow all current Psi4 input files to be run normally. **History rewrite:**; Over time the Psi4 git reposit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:1104,reduce,reduce,1104,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['reduce'],['reduce']
Energy Efficiency,"tion class to access the protected; > external_pot_ object. Was there some other way I could have accessed this; > object?; > - Adding the external potential directly to the one-electron potential; > matrices for each fragment leads to this potential being double-counted in; > some terms used to calculate the HF interaction energy. So I stored the; > external potential as an additional matrix, matrices_[""VE""], that is then; > added to the one-electron potential for the monomer SCF calculations and; > the HF term. Is there a better way to handle this problem that doesn't; > require storing an additional matrix?; > - I compared total SAPT0 energy for a 2-fragment F-SAPT calculation to; > the SAPT module. Is there a good way to check a 3-fragment I-SAPT energy; > with the SAPT module?; >; > Checklist; >; > - For a 2-fragment system, total SAPT0 energies with and without an; > external potential in FISAPT module agree with SAPT module; > - For a 3-fragment system, total SAPT0 energies with and without an; > external potential give reasonable energies; > - Passed included smoke and sapt tests; >; > Status; >; > - Ready for review; > - Ready for merge; >; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/psi4/psi4/pull/1608; > Commit Summary; >; > - Added external potential to FISAPT one-electron potential; > - Fixed double counting external interaction in one-electron potential; >; > File Changes; >; > - *M* psi4/driver/procrouting/proc_util.py; > <https://github.com/psi4/psi4/pull/1608/files#diff-0> (2); > - *M* psi4/src/psi4/fisapt/fisapt.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-1> (68); > - *M* psi4/src/psi4/libmints/wavefunction.cc; > <https://github.com/psi4/psi4/pull/1608/files#diff-2> (2); > - *M* psi4/src/psi4/libmints/wavefunction.h; > <https://github.com/psi4/psi4/pull/1608/files#diff-3> (3); >; > Patch Links:; >; > - https://github.com/psi4/psi4/pull/1608.patch; > - http",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275:1763,energy,energy,1763,https://psicode.org,https://github.com/psi4/psi4/pull/1608#issuecomment-487221275,1,['energy'],['energy']
Energy Efficiency,"tions with the aug-cc-PV5Z bases set for the interaction between helium gas and ammonia. However, getting the error describe below. Memory set to 26.077 GiB by Python driver.; Threads set to 12 by Python driver. QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 5 for key JKFIT among:; Shell Entries: ['HE']; Basis Sets: [('aug-cc-pv5z-jkfit', 'aug-cc-pv5z-jkfit', None)]; File Path: /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/Desktop/teste_He-aug-cc-pv5z, /home/sandro/miniconda3/envs/venv_psi4/share/psi4/basis; Input Blocks: . Traceback (most recent call last):; File ""run_GN_NH3_inter_var.py"", line 402, in <module>; eel = calcula_energia(metodo, base, dimero, fator_conv)[0]; File ""run_GN_NH3_inter_var.py"", line 73, in calcula_energia; psi4.energy(f'{metodo}/{base}'); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/driver.py"", line 501, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 4394, in run_sapt; dimer_wfn = scf_helper('RHF', molecule=sapt_dimer, **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1576, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 1231, in scf_wavefunction_factory; aux_basis = core.BasisSet.build(wfn.molecule(), ""DF_BASIS_SCF"",; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/p4util/python_helpers.py"", line 85, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(mol.to_dict(),; File ""/home/sandro/miniconda3/envs/venv_psi4/lib/python3.8/site-packages/psi4/driver/qcdb/libmintsbasisset.py"", line 696, in pyconstruct; bs,",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2989:971,energy,energy,971,https://psicode.org,https://github.com/psi4/psi4/issues/2989,2,['energy'],['energy']
Energy Efficiency,"to a missing ECP projector:. ```; !----------------------------------------------------------------------; ! Basis Set Exchange; ! Version v0.9.1+53.gf8c059b.dirty; ! https://www.basissetexchange.org; !----------------------------------------------------------------------; ! Basis set: vDZP; ! Description: Small basis set used in wB97X-3c method; ! Role: orbital; ! Version: 1 (); ! From SuppMat of https://doi.org/10.1063/5.0133026; ! then converted with https://github.com/MolSSI-BSE/basis_set_exchange-historical/commit/f84314b31bc0e30e5a29c274684d6e9ff612466a#diff-7686a8c951e2392d87a59f8d89e5c75f18d2d35c60683ed5b52910076840569c; ! then removed Fluorine b/c the ECP lacks a projector; ! then added with basis_set_exchange.curate.add_basis(name=""vDZP"") to a local repo; ! then converted with `bse get-basis vDZP psi4`; !----------------------------------------------------------------------; ```. Marcel Muller (@marcelmbn), the original author of the wB97X-3c paper, wrote in [an analogous PySCF issue](https://github.com/pyscf/pyscf/pull/2085#issuecomment-1951321264) (pyscf/pyscf#2085) that this issue can be resolved:. > There are two ways to solve this problem (at least as far as I can see):; > Add a ""dummy"" d-type projector with coefficient 0.0, so that the ascending order of projectors up to f can be retained.; > Just remove the f projector as it has a 0.0 coefficient. IMHO, this would be the correct option, as a projector with a coefficient of 0.0 is only a technical remnant from the development process.; > I quickly tested both approaches with both TURBOMOLEv7.7.1 and ORCAv5.0.4 and in all cases, the same single-point energy and properties resulted for a simple F_2 molecule. Would it be possible to update the wB97X-3c basis set included in Psi4 to allow F-containing molecules to run? I'm happy to make the PR myself if that would be useful. For reference, here's my HF structure:; ```; 2; title; F 0.48776591 0.00000000 0.00000000; H -0.48776591 0.00000000 0.00000000; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3205:2351,energy,energy,2351,https://psicode.org,https://github.com/psi4/psi4/issues/3205,1,['energy'],['energy']
Energy Efficiency,tom-hybrid ................ Passed 8.63 sec; Start 201: fnocc3; 233/404 Test #341: soscf-ref ........................ Passed 5.39 sec; Start 270: opt4; 234/404 Test #164: dft-grad1 ........................ Passed 9.34 sec; Start 290: psimrcc-ccsd_t-4; 235/404 Test #201: fnocc3 ........................... Passed 2.69 sec; Start 132: dfmp2-4; 236/404 Test #9: castup2 .......................... Passed 4.06 sec; Start 165: dft-grad2; 237/404 Test #197: freq-isotope1 .................... Passed 7.54 sec; Start 321: sapt-dft-api; 238/404 Test #315: sapt1 ............................ Passed 7.66 sec; Start 133: dfmp2-ecp; 239/404 Test #219: mints-benchmark .................. Passed 8.79 sec; Start 101: cubeprop; 240/404 Test #132: dfmp2-4 .......................... Passed 4.10 sec; Start 3: casscf-fzc-sp; 241/404 Test #270: opt4 ............................. Passed 7.71 sec; Start 5: casscf-sa-sp; 242/404 Test #358: tu5-sapt ......................... Passed 8.52 sec; Start 192: fd-freq-energy; 243/404 Test #3: casscf-fzc-sp .................... Passed 1.83 sec; Start 370: scf-coverage; 244/404 Test #290: psimrcc-ccsd_t-4 ................. Passed 9.60 sec; Start 135: dfmp2-grad2; 245/404 Test #5: casscf-sa-sp ..................... Passed 3.49 sec; Start 369: dft-jk; 246/404 Test #370: scf-coverage ..................... Passed 3.11 sec; Start 241: ocepa-grad1; 247/404 Test #165: dft-grad2 ........................ Passed 9.14 sec; Start 127: dfccsdt1; 248/404 Test #321: sapt-dft-api ..................... Passed 8.99 sec; Start 226: mp2-1; 249/404 Test #133: dfmp2-ecp ........................ Passed 8.06 sec; Start 285: props2; 250/404 Test #135: dfmp2-grad2 ...................... Passed 1.84 sec; Start 253: omp2p5-1; 251/404 Test #192: fd-freq-energy ................... Passed 5.20 sec; Start 255: omp2p5-grad1; 252/404 Test #101: cubeprop ......................... Passed 9.11 sec; Start 86: cepa0-grad2; 253/404 Test #127: dfccsdt1 ......................... Passed 2.46 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:22471,energy,energy,22471,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['energy'],['energy']
Energy Efficiency,"tr(ncores) # export VECLIB_MAXIMUM_THREADS=4; os.environ[""NUMEXPR_NUM_THREADS""] = str(ncores) # export NUMEXPR_NUM_THREADS=4; # Set the max memory for PySCF; os.environ[""PYSCF_MAX_MEMORY""] = str(120000). import psi4; psi4.set_memory(int(120000*1e6)); numpy_memory = 40; import pyscf; from pyscf import dft; # pyscf.lib.misc.num_threads(n=8). xyzFilename = 'Ethane.xyz'. #psi4_geo = psi4.geometry(geo_txt); with open(xyzFilename,""r"") as f:; xyz_string = f.read(). psi4_geo = psi4.core.Molecule.from_string(xyz_string, dtype='xyz',fix_symmetry='c1', fix_orientation=True,fix_com=True). # run psi4 calculation ; psi4.core.set_num_threads(ncores); psi4.set_options(; {; ""scf__reference"": ""rks"",; ""scf_type"": ""df"",; ""scf__maxiter"": 50,; ""basis"": 'def2-svp',; ""df_basis_scf"": 'def2-universal-jfit',; ""puream"":False,; ""guess"": ""sad"",; ""SCF_INITIAL_ACCELERATOR"":""none"",; ""dft_spherical_points"":434, ; ""dft_radial_points"" :88, ; ""diis_max_vecs"" : 6; }; ); energy = psi4.energy(name=""scf"", dft_functional=""svwn"", molecule=psi4_geo, return_wfn=False). # run PySCF calculation; mol = pyscf.M(; atom=xyzFilename, ; basis=""def2-svp"",; symmetry=False,; verbose=4,; cart=True,; ); # mol.max_memory = 10_000; mf = dft.rks.RKS(mol, xc=""svwn"").density_fit(auxbasis='def2-universal-jfit'); mf.init_guess = 'vsap'; mf.grids.level = 7; mf.conv_tol = 1e-7; mf.kernel(); print('Nuc-Nuc PySCF= ', mol.energy_nuc()); print('One electron integrals energy',mf.scf_summary['e1']); print('Coulomb energy ',mf.scf_summary['coul']); print('EXC ',mf.scf_summary['exc']); ```; The XYZ file for ethane is here; ```; 8; Ethane; C -0.759130 0.027045 -0.000000; C 0.759130 -0.027045 -0.000000; H -1.125990 0.306235 1.010150; H -1.171340 -0.966695 -0.274750; H -1.109050 0.781825 -0.735390; H 1.109040 -0.781815 0.735390; H 1.171340 0.966695 0.274760; H 1.125990 -0.306235 -1.010150; ```; The following is my output:; Psi4; ```; Memory set to 111.759 GiB by Python driver.; Threads set to 8 by Python driver. Scratch directory: /tmp/. *** t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:1502,energy,energy,1502,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['energy'],['energy']
Energy Efficiency,"tr<psi::SuperFunctional>). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1008: RuntimeError; _________________________________________________________________ test_psi4_cas __________________________________________________________________. def test_psi4_cas():; """"""casscf-sp""""""; #! CASSCF/6-31G** energy point; ; geom = psi4.geometry(""""""; O; H 1 1.00; H 1 1.00 2 103.1; """"""); ; psi4.set_options({; ""basis"" : '6-31G**',; ""reference"" : 'rhf',; ""scf_type"" : 'pk',; ""mcscf_algorithm"" : 'ah',; ""qc_module"" : 'detci',; ""nat_orbs"" : True}); ; > cisd_energy, cisd_wfn = psi4.energy(""CISD"", return_wfn=True). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_psi4.py:38: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:947: in select_cisd; return func(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:2953: in run_detci; ref_wfn = scf_helper(name, **kwargs) # C1 certified; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_wfn = scf_wavefunction_factory(core.get_option('SCF', 'REFERENCE'), base_wfn); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . reference = 'RHF', ref_wfn = <psi4.core.Wavefunction object at 0x7f6fef0343b8>, functional = None. def scf_wavefunction_factory(reference, ref_wfn, functional=None):; """"""Builds the correct wavefunction from the provided information; """"""; ; if core.has_option_changed(""SCF"", ""DFT_DISPERSION_PARAMETERS""):; modified_disp_params = core.get_option(""SC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:25451,energy,energy,25451,https://psicode.org,https://github.com/psi4/psi4/issues/820,2,['energy'],['energy']
Energy Efficiency,"trapolated Fock matrix `F_DIIS = \sum_i c_i F_i`. If I remember correctly, there's a paper that shows that ADIIS and EDIIS are the same method, assuming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are physical issues with the wave function, like e.g. with flat angular surfaces of the energy, where rotating the orbitals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to converge, and the convergence rate is often quite rapid. If you program ADIIS and/or EDIIS, one can tie them with C2-DIIS with linear interpolation. For instance, when the DIIS error is greater than `1e-2`, the DIIS extrapolation will be crap and might take you far up in energy. In this case it is better to use the ADIIS/EDIIS energy functional, which is just an **interpolation** between the current and previous iterations' Fock matrices. ADIIS/EDIIS takes you very quickly to the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:2645,energy,energy,2645,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['energy'],['energy']
Energy Efficiency,"trib to E beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction E 16.219 [kcal/mol] 67.859 [kJ/mol] 0.02584628 [Eh]; Total E, Thermal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [Eh]; Total G, Gibbs energy at 298.15 [K] -76.02161759 [Eh]; *** Absolute Gibbs energy, not a free energy of formation ***; ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Vibrational analysis printing is overhauled for clarity. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] These changes should fend off",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:1702,energy,energy,1702,https://psicode.org,https://github.com/psi4/psi4/pull/2969,1,['energy'],['energy']
Energy Efficiency,"triplet B2 (qchem example), def2-SVP; ```; QCHEM_HF -0.0923 -0.3325; PSI4_HF -0.04614 -0.1663 # factor of 2! --> -0.09228 -0.3326; QCHEM_SVWN3 0.0406 0.0406 -0.0364; ```. ```; molecule bb {; 0 3; b; b 1 R; R = 1.587553; symmetry c1; }. set {; reference uhf; basis def2-svp; STABILITY_ANALYSIS check; SOLVER_N_GUESS 4; solver_n_root 2; scf_type pk; }. energy('hf'); # energy('svwn') ; ev=variable('SCF STABILITY EIGENVALUES').np; print_out(f""All eigenvalues: {ev} \n""); print(f""All eigenvalues: {ev} \n""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239:351,energy,energy,351,https://psicode.org,https://github.com/psi4/psi4/pull/2766#issuecomment-1304809239,2,['energy'],['energy']
Energy Efficiency,"troduction.html#citing-psifour. -----------------------------------------------------------------------. Psi4 started on: Monday, 16 September 2024 10:17PM. Process ID: 23320; Host: agincourt.lan; PSIDATADIR: /Users/cwagen/.../.pixi/envs/dev/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; C -2.556271805455 -0.181690364655 -0.026620796492 ; C -1.282011805455 -0.085620364655 -0.016410796492 ; C -0.000441805455 0.006819635345 -0.003870796492 ; C 1.281348194545 0.095909635345 0.010599203508 ; C 2.556298194545 0.180969635345 0.026599203508 ; C 3.872538194545 0.268679635345 0.044049203508 ; H 4.487898194545 -0.251640364655 -0.694370796492 ; H 4.393828194545 0.864729635345 0.797449203508; C -3.871661805455 -0.281870364655 -0.036170796492 ; H -4.492551805455 0.418709635345 -0.600540796492 ; H -4.386761805455 -1.069870364655 0.519199203508 ; }. energy(""wb97x-3c""); --------------------------------------------------------------------------. Scratch directory: /tmp/; => Libint2 <=. Primary basis highest AM E, G, H: 6, 6, 3; Auxiliary basis highest AM E, G, H: 7, 7, 4; Onebody basis highest AM E, G, H: -, -, -; Solid Harmonics ordering: Gaussian. *** tstart() called on agincourt.lan; *** at Mon Sep 16 22:17:28 2024. => Loading Basis Set <=. Name: VDZP; Role: ORBITAL; Keyword: BASIS; atoms 1-6, 9 entry C line 117 (ECP: line 2345) file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs ; atoms 7-8, 10-11 entry H line 22 file /Users/cwagen/.../.pixi/envs/dev/share/psi4/basis/vdzp.gbs . !!! WARNING: ECP capability is in beta. Please check occupations closely. !!!. => WB97X3C: Empirical Dispersion <=. Grimme's -D4 (BJ-damping) Dispersion Correction with ATM; Caldeweyher, E.; Ehlert, S.; Hansen, A.; Neugebauer, H.; Spicher, S.; Bannwarth, C.; Grimmme, S., J. Chem. Phys. 150, 154122 (2019). a1 = 0.246400; a2 = 4.737000; alp = 16.000000; s6 = 1.000000; s8 = 0.000000; s9 = 1.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3221:5108,energy,energy,5108,https://psicode.org,https://github.com/psi4/psi4/issues/3221,1,['energy'],['energy']
Energy Efficiency,"ts bohr are behaving sensibly:. ```; molecule mol {; 0 1; H 0.0 0.0 0.0; H 0.0 0.0 1.0; units angstrom; symmetry c1; no_reorient; no_com; }. set basis 3-21G. embedding_charges = [; [1.0, [0.0, 0.0, 3.77945]],; ]. energy(""SCF"", embedding_charges=embedding_charges); ```. ```; >>> diff toon1.out toon2.out ; 40,41c40,41; < H 0.0 0.0 1.0; < units angstrom; ---; > H 0.0 0.0 1.889725; > units bohr; 85c85; < Geometry (in Angstrom), charge = 0, multiplicity = 1:; ---; > Geometry (in Bohr), charge = 0, multiplicity = 1:; 90c90; < H 0.000000000000 0.000000000000 1.000000000000 1.007825032230; ---; > H 0.000000000000 0.000000000000 1.889725000000 1.007825032230; 94,96c94,96; < Rotational constants: A = ************ B = 16.72674 C = 16.72674 [cm^-1]; < Rotational constants: A = ************ B = 501455.10648 C = 501455.10648 [MHz]; < Nuclear repulsion = 0.529177210670000; ---; > Rotational constants: A = ************ B = 16.72676 C = 16.72676 [cm^-1]; > Rotational constants: A = ************ B = 501455.70378 C = 501455.70378 [MHz]; > Nuclear repulsion = 0.529177525830478; 165,167c165,167; < Old nuclear repulsion = 0.529177210670000; < Additional nuclear repulsion = 0.793766603906570; < Total nuclear repulsion = 1.322943814576570; ---; > Old nuclear repulsion = 0.529177525830478; > Additional nuclear repulsion = 0.793766288745717; > Total nuclear repulsion = 1.322943814576195 ; 215c215; < @DF-RHF Final Energy: -1.12042760680024; ---; > @DF-RHF Final Energy: -1.12042770344228; 219,222c219,222; < Nuclear Repulsion Energy = 1.3229438145765702; < One-Electron Energy = -3.0366720199640036; < Two-Electron Energy = 0.5933005985871914; < Total Energy = -1.1204276068002419; ---; > Nuclear Repulsion Energy = 1.3229438145761949; > One-Electron Energy = -3.0366721911846972; > Two-Electron Energy = 0.5933006731662177; > Total Energy = -1.1204277034422847; ```. Bad news is current master does indeed seem wrong. Since the DDD fix is waiting, can you work with your case 2 setup in master for now?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115:1580,Energy,Energy,1580,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625260115,10,['Energy'],['Energy']
Energy Efficiency,"tted J/K Matrices <==. J tasked: Yes; K tasked: Yes; wK tasked: Yes; Omega: 3.000E-01; OpenMP threads: 1; Integrals threads: 1; Memory [MiB]: 243; Algorithm: Disk; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-10. => Auxiliary Basis Set <=. Basis Set: (DEF2-TZVPPD AUX); Blend: DEF2-UNIVERSAL-JKFIT; Number of shells: 192; Number of basis functions: 582; Number of Cartesian functions: 686; Spherical Harmonics?: true; Max angular momentum: 4. Cached 2.7% of DFT collocation blocks in 0.139 [GiB]. Minimum eigenvalue in the overlap matrix is 7.9030311415E-06.; Reciprocal condition number of the overlap matrix is 5.7126628552E-07.; Using symmetric orthogonalization. ==> Pre-Iterations <==. SCF Guess: Superposition of Atomic Densities via on-the-fly atomic UHF (no occupation information). -------------------------; Irrep Nso Nmo ; -------------------------; A 350 350 ; -------------------------; Total 350 350; -------------------------. ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RKS iter SAD: -266.76788027937141 -2.66768e+02 0.00000e+00 ; @DF-RKS iter 1: -267.44459096234198 -6.76711e-01 2.70804e-03 DIIS/ADIIS; @DF-RKS iter 2: -266.62712078236223 8.17470e-01 4.29888e-03 DIIS/ADIIS; @DF-RKS iter 3: 222.21931934020711 4.88846e+02 3.68763e-02 DIIS/ADIIS; @DF-RKS iter 4: -220.14524491052583 -4.42365e+02 1.39645e-02 DIIS/ADIIS; @DF-RKS iter 5: 105.97080762091727 3.26116e+02 3.43637e-02 DIIS/ADIIS; @DF-RKS iter 6: -197.93937468185686 -3.03910e+02 1.64483e-02 DIIS/ADIIS; @DF-RKS iter 7: 56.14560413977465 2.54085e+02 3.25972e-02 DIIS/ADIIS; @DF-RKS iter 8: -171.65878493154480 -2.27804e+02 1.92639e-02 DIIS/ADIIS; @DF-RKS iter 9: 53.90807327580846 2.25567e+02 3.33501e-02 DIIS/ADIIS; @DF-RKS iter 10: -172.20635649564989 -2.26114e+02 1.94991e-02 DIIS/ADIIS. Traceback (most recent call last):; File "".../bin/psi4"", line 349, in <module>; exec(content); File ""<string>"", line 42, in <module>; File "".../lib/psi4/driver/driver.py"", line 526, in energy; wfn ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051:7853,Energy,Energy,7853,https://psicode.org,https://github.com/psi4/psi4/issues/3051,1,['Energy'],['Energy']
Energy Efficiency,"ttings.ddx_model,; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing.; else:; print('ddx solvent option'); psi4.set_options({""ddx"": ""true"",; ""DDX_SOLVENT"": settings.ddx_settings.solvent,; ""DDX_RADII_SET"": settings.ddx_settings.radii_set,; ""DDX_MODEL"": settings.ddx_settings.ddx_model}); ```; However, when I run a testcase when inspecting the output file, the solvent_epsilon is printed out as 78.3553 not the test value 4 which I used in my test run. . It appears the issue lies in the if else statement in psi4/driver/procrouting/solvent/ddx.py, where the if statement core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON"") is not assigned as true (I added print statements to validate this):; ```; solvent = core.get_option(""DDX"", ""DDX_SOLVENT"").lower(); print(f'solvent option chosen is {solvent}') ; if core.has_option_changed(""DDX"", ""DDX_SOLVENT_EPSILON""): #this given as false; solvent_epsilon = core.get_option(""DDX"", ""DDX_SOLVENT_EPSILON""); print(f'epsilon option {solvent_epsilon}'); elif solvent == """":; raise ValidationError(""Required option 'DDX_SOLVENT' is missing.""); elif solvent not in pyddx.data.solvent_epsilon:; raise ValidationError(""Unknown solvent {solvent}.""); else:; solvent_epsilon = pyddx.data.solvent_epsilon[solvent]; ```; I have built a minimal worked example of the problem below where the issue is again replicated where the solvent_epsilon is set to that of water, and the DDX_SOLVENT_EPSILON option is ignored: ; ```; import psi4. h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""). psi4.set_options({""ddx"": ""true"", #supply a solvent here to see if epsilon then gets picked up; ""DDX_SOLVENT_EPSILON"":'5',; ""DDX_RADII_SET"": 'uff',; ""DDX_MODEL"": 'PCM',; ""DDX_SOLVENT"":""water""}) #without this calculation fails with psi4.driver.p4util.exceptions.ValidationError: Required option 'DDX_SOLVENT' is missing. psi4.set_memory('500mb'). psi4.energy('scf/sto-3g'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3119:3046,energy,energy,3046,https://psicode.org,https://github.com/psi4/psi4/issues/3119,1,['energy'],['energy']
Energy Efficiency,"ty. The new output for tu4 is below. ; ``` ; ==> Thermochemistry Energy Analysis <==. Raw electronic energy, E_e; Total E_e, Electronic energy at well bottom -76.02703273 [Eh]. Zero-point vibrational energy, ZPVE = Sum_i omega_i / 2, E_0 = E_e + ZPVE; Vibrational ZPVE 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301219 [Eh] 5050.592 [cm^-1]; Correction ZPVE to E_e 14.440 [kcal/mol] 60.419 [kJ/mol] 0.02301219 [Eh] 5050.592 [cm^-1]; Total E_0, Enthalpy at 0 [K] -76.00402054 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Thermal (internal) energy, E (includes ZPVE and finite-temperature corrections); Electronic contrib to E beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Rotational contrib to E 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to E 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction E 16.219 [kcal/mol] 67.859 [kJ/mol] 0.02584628 [Eh]; Total E, Thermal (internal) energy at 298.15 [K] -76.00118645 [Eh]. Enthalpy, H_trans = E_trans + k_B * T = E_trans + P * V; Electronic contrib to H beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to H 1.481 [kcal/mol] 6.197 [kJ/mol] 0.00236046 [Eh]; Rotational contrib to H 0.889 [kcal/mol] 3.718 [kJ/mol] 0.00141628 [Eh]; Vibrational contrib to H 14.441 [kcal/mol] 60.423 [kJ/mol] 0.02301373 [Eh]; Correction H 16.811 [kcal/mol] 70.338 [kJ/mol] 0.02679047 [Eh]; Total H, Enthalpy at 298.15 [K] -76.00024226 [Eh]; *** Absolute enthalpy, not an enthalpy of formation ***. Gibbs free energy, G = H - T * S; Electronic contrib to G beyond E_e 0.000 [kcal/mol] 0.000 [kJ/mol] 0.00000000 [Eh]; Translational contrib to G -8.837 [kcal/mol] -36.975 [kJ/mol] -0.01408304 [Eh]; Rotational contrib to G -2.205 [kcal/mol] -9.226 [kJ/mol] -0.00351383 [Eh]; Vibrational contrib to G 14.440 [kcal/mol] 60.418 [kJ/mol] 0.02301201 [Eh]; Correction G 3.398 [kcal/mol] 14.217 [kJ/mol] 0.00541514 [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2969:1113,energy,energy,1113,https://psicode.org,https://github.com/psi4/psi4/pull/2969,1,['energy'],['energy']
Energy Efficiency,"u should never get a non-symmetric solution. But, as @dgasmith says, it depends on the math library, whether or not there is tiny numerical noise introduced, etc. Since the computer uses finite precision arithmetic, there is always a chance that noise messes up things. . I investigated this case a little today, since it captured my interest. What's going on is actually even more tricky than has been suggested so far. Normally, we don't like these symmetry-breaking solutions because they do bad things, like give unphysical dipole moments. For example, the symmetry-breaking UHF solution for NO3 radical gives very unequal charges for the O atoms [-0.0867 -0.3789 -0.3789] compared to the symmetric UHF solution [-0.2990 -0.2990 -0.2990]. I think most people would agree the asymmetric solution is just wrong, even though it has a lower energy [-278.774 819 vs -278.757 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert are finding for their computations t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:1038,energy,energy,1038,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['energy'],['energy']
Energy Efficiency,"u.), 32.3147310 (eV); 	12 A state: 1.1982557 (a.u.), 32.6061991 (eV); 	13 A state: 1.1992474 (a.u.), 32.6331833 (eV); 	14 A state: 1.2585194 (a.u.), 34.2460572 (eV); 	15 A state: 1.2767037 (a.u.), 34.7408785 (eV); 	16 A state: 1.2815731 (a.u.), 34.8733809 (eV); 	17 A state: 1.3132971 (a.u.), 35.7366340 (eV); 	18 A state: 1.3296420 (a.u.), 36.1814011 (eV); 	19 A state: 1.3540510 (a.u.), 36.8456048 (eV); 	20 A state: 1.3585131 (a.u.), 36.9670246 (eV); ```. ### **QChem 5.1.1 energies output**; ```; Excitation energy: 9.604199 eV; Excitation energy: 11.471817 eV; Excitation energy: 12.351230 eV; Excitation energy: 14.275101 eV; Excitation energy: 15.537288 eV; Excitation energy: 19.185085 eV; Excitation energy: 28.691037 eV; Excitation energy: 29.170632 eV; Excitation energy: 30.989051 eV; Excitation energy: 32.166632 eV; Excitation energy: 32.314728 eV; Excitation energy: 32.606197 eV; Excitation energy: 32.633181 eV; Excitation energy: 34.246055 eV; Excitation energy: 34.740876 eV; Excitation energy: 34.873378 eV; Excitation energy: 35.736631 eV; Excitation energy: 36.181398 eV; Excitation energy: 36.845602 eV; Excitation energy: 36.967022 eV; ```. Running the ADC(2) test in both programs showed some slight deviation in energies, but nothing alarming.; ### **QChem 5.1.1 - adc(2) test energies**; ```; Excitation energy: 6.951866 eV; Excitation energy: 6.951866 eV; ```. ### **Psi4 1.3.2 -- adc(2) test energies**; ```; ->	1 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ->	2 A state : 0.2557608 (a.u.), 6.9596066 (eV); Non-iterative: 0.2559128 (a.u.), 6.9637417 (eV); ```. Further, we set up calculations for the systems in [this work](https://aip.scitation.org/doi/10.1063/1.1504708). Please find the calculations for HF and N2 below; I am happy to provide data on the other systems if needed.; Basis set & geometry information for HF and N2 were found in [this work](https://aip.scitation.org/doi/abs/10.1063/1.1386415). ### **HF**; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344:2031,energy,energy,2031,https://psicode.org,https://github.com/psi4/psi4/issues/1033#issuecomment-510952344,1,['energy'],['energy']
Energy Efficiency,"u.); -----------------------. Doubly Occupied: . 1A1 -20.621389 1B2 -20.621057 2A1 -1.500485 ; 2B2 -1.213674 3A1 -0.787485 1B1 -0.638605 ; 4A1 -0.611527 3B2 -0.571415 1A2 -0.448360 . Virtual: . 5A1 0.196427 4B2 0.233677 5B2 0.363534 ; 6B2 0.797460 2B1 0.838809 6A1 0.844012 ; 7A1 0.899194 2A2 0.923759 8A1 1.027087 ; 7B2 1.058856 9A1 1.124050 8B2 1.149224 ; 9B2 1.493845 3B1 1.719758 10A1 1.729020 ; 3A2 1.885626 4B1 1.905688 10B2 2.114549 ; 11A1 2.362681 12A1 2.530729 11B2 2.768793 ; 13A1 2.777858 5B1 2.778067 4A2 2.804070 ; 5A2 2.974845 12B2 3.002608 13B2 3.319351 ; 14A1 3.594108 14B2 3.777164 15A1 4.062330 ; 15B2 4.514378 16A1 45.233612 16B2 45.429678 . Final Occupation by Irrep:; A1 A2 B1 B2 ; DOCC [ 4, 1, 1, 3 ]. Energy converged. @DF-RHF Final Energy: -150.80654620986098. => Energetics <=. Nuclear Repulsion Energy = 37.8876016263036917; One-Electron Energy = -283.3602994176750940; Two-Electron Energy = 94.6661515815104053; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -150.8065462098609828. Saving occupied orbitals to File 180. *** tstop() called on mrabsence-Ubuntu at Mon Aug 22 01:48:07 2016; Module time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 0.32 seconds = 0.01 minutes; system time = 0.01 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.5931. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.2113. Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -1.3818 Total: 1.3818. Dipole Moment: (Debye); X: 0.0000 Y: -0.0000 Z: -3.5122 Total: 3.5122. *** tstart() called on mrabsence-Ubuntu; *** at Mon Aug 22 01:48:07 2016. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/463:6699,Energy,Energy,6699,https://psicode.org,https://github.com/psi4/psi4/issues/463,1,['Energy'],['Energy']
Energy Efficiency,"u_verytight; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core false. # the gradient that any fully optimized molecule should match, more or less. zerograd = psi4.Matrix(5,3); refgrad = [; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0],; [ 0.0, 0.0, 0.0]]; zerograd.set(refgrad). # this is the first system, a fluoromethane that looks pretty good to the eye; # zmat version, normz. molecule normz {; C; H 1 1.2; H 1 1.2 2 104; H 1 1.2 2 105 3 120; F 1 1.3 2 106 4 121; }. # reference start NRE, E, G. norm_nre_start = 37.6824945882 # Q-Chem; norm_e_start = -139.5307182946 # Q-Chem; norm_g_start = psi4.Matrix(5, 3) # Q-Chem; contents = [ # have to swap x & y, and -x; [ -0.07990533, -0.00642920, -0.00348020, 0.04874047, 0.04107426],; [ -0.04900557, -0.00240633, 0.05677652, -0.03006882, 0.02470420],; [ -0.06715450, 0.05113530, -0.00508959, -0.00643364, 0.02754243]]; norm_g_start.set(zip(*contents)); norm_rmsg_start = 0.041309 # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 -0.04900557 -0.00240633 0.05677652 -0.03006882 0.02470420; # 2 0.07990533 0.00642920 0.00348020 -0.04874047 -0.04107426; # 3 -0.06715450 0.05113530 -0.00508959 -0.00643364 0.02754243. # reference optimized NRE, E (G should be 0). nre_opt = 37.5276022922 # Q-Chem; e_opt = -139.5573922 # Q-Chem; #norm_g_opt # Q-Chem; # Full Analytical Gradient of MP2 Energy (in au.); # 1 2 3 4 5; # 1 0.00000025 -0.00000001 -0.00000021 -0.00000007 0.00000005; # 2 0.00000010 0.00000008 0.00000000 0.00000001 -0.00000020; # 3 0.00000038 -0.00000005 -0.00000006 -0.00000023 -0.00000003. def test_norm_start(mol):; g0 = gradient('mp2', molecule=mol); compare_values(norm_nre_start, mol.nuclear_repulsion_energy(), 3, 'start nre'); compare_values(norm_e_start, get_variable('CURRENT ENERGY'), 5, 'start ene'); compare_values(norm_rmsg_start, g0.rms(), 4, 'start rms grad'); compare_matrices(norm_g_start, g0, 3, 'start grad'). def test_zero_grad(mol):; e, wfn = optimi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310:1333,Energy,Energy,1333,https://psicode.org,https://github.com/psi4/psi4/issues/310,1,['Energy'],['Energy']
Energy Efficiency,"ub.com; > wrote:; > ; > > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > > ; > > # (a) for HF; > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2891,energy,energy,2891,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['energy'],['energy']
Energy Efficiency,"ue with `method_algorithm_type(mtd).keyword` and `method_algorithm_type(mtd).now`, respectively. This helps clean up proc.py and allows the controlling keyword to be linked for each method in the generated tables.; - [x] in proc.py, ; - [x] select_* functions have been made more boilerplate and elsewhere-mentioned DETCI and MRCC changes integrated in.; - [x] CCD is given select_ccd* functions to raise a sensible error message since the default (cc_type=CONV) isn't implemented. ; - [x] CC2 and CC3 are given select_* functions since now CCENERGY and MRCC cover them. This led to controversy (unresolved) over whether DF-CC2 is RTG, see #2710. A result is that you need to `set qc_module ccenergy` explicitly to use DF for CC2 -- a test case edit was needed.; - [x] `run_dfocc`, `run_dfocc_gradient` fns were simplified by using the `method_algorithm_type` fn; - [x] `run_fnodfcc`, `run_fnocc`, `run_cepa` were simplified by using the `method_algorithm_type` fn and the ""director"" dictionary syntax; - [x] some impossibilities fended off rather than being silently ignored: non-df-mp2 in dhdft, non-conv detci; - [x] The involved which-do-I-run--energy-gradient-or-hessian logic in `negotiate_derivative_type` and friends in driver_util.py does a great job at its task, but its error messages have been wanting, being hampered by being generated by exceptions. In particular, they give no clue how close you are to a working method -- do you need to tweak aefc or uhf/rohf or is this method nowhere in psi or have you misspelled it? Now, the ManagedMethodsError exception has been reworked to return current conditions data (to be caught and reformatted) and the error message itself (usually not seen directly) has been reworked to provide more conditions and a link to the table row in the docs where one can see what _would_ run. Back at driver_util.py, these errors are reformatted according to whether managed or plain method, whether deriv isn't available at all or just not demanded deriv, e",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:8894,energy,energy-gradient-or-hessian,8894,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['energy'],['energy-gradient-or-hessian']
Energy Efficiency,"uggested by @psi-rking , which suggests maybe an issue with finding roots of whatever symmetry the first excited state is; however, adding more roots (or running with/without symmetry) doesn't resolve the issue. in fact, running in `c2v` produces different energies, but they don't match GAMESS or the `symmetry c1` case:; ```; Psi4 LiCN/6-31G* (symmetry c2v, default [Davidson] solver); CI ROOT 1 TOTAL ENERGY:-99.52581092382692; CI ROOT 2 TOTAL ENERGY:-99.50960136455492; CI ROOT 3 TOTAL ENERGY:-99.47046293582866; CI ROOT 4 TOTAL ENERGY:-99.43820506440449; CI ROOT 5 TOTAL ENERGY:-99.39012366739456; CI ROOT 6 TOTAL ENERGY:-99.37979350854745; ```; maybe it's a preconditioner issue? the Davidson seems to converge in just one step for c1 and c2v. I suppose it's possible the guess space just isn't grabbing roots for all symmetries, but increasing the number of roots to 30 doesn't change the results. perhaps more disturbing, though, is that the in-core diagonization routine `RSP` gives yet another set of results:; ```; Psi4 LiCN/6-31G* (symmetry c1, RSP solver); CI ROOT 1 TOTAL ENERGY:-99.58887523722994; CI ROOT 2 TOTAL ENERGY:-99.56069933848028; CI ROOT 3 TOTAL ENERGY:-99.56069933848008; CI ROOT 4 TOTAL ENERGY:-99.53483755106353; CI ROOT 5 TOTAL ENERGY:-99.53483755106343; CI ROOT 6 TOTAL ENERGY:-99.53418772103414; ```; here, we find 3 roots lower in energy than either GAMESS or the default Psi4 routines, and we also recover the -99.534837 E_h root, but this time as a doubly-degenerate state. the other routines mentioned in [the manual; ](https://psicode.org/psi4manual/master/autodoc_glossary_options_c.html#term-DIAG_METHOD-DETCI) are deprecated kwargs (see also: #2640 ), so I can't test them. . given [`np.linalg.eigh`](https://numpy.org/doc/stable/reference/generated/numpy.linalg.eigh.html) just uses LAPACK's syevd/heevd, and `RSP` is just supposed to be LAPACK's dsyev, this result is very perturbing. . I've attached output files for the [Davidson](https://github.com/psi4/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3083:2383,ENERGY,ENERGY,2383,https://psicode.org,https://github.com/psi4/psi4/issues/3083,1,['ENERGY'],['ENERGY']
Energy Efficiency,"ught up regarding the PKJK algorithm. To address this issue, the buffer size per thread is always set to have at least a value of 1. When a minimum buffer size is enforced, the issue presented in https://github.com/psi4/psi4/issues/2760 disappears. Additionally, with these changes, the PK option produces the same answer as the DIRECT algorithm for the system in question (the H atom):. ```; (p4dev) dpoole34@ds6:~$ cat minimal_example.py ; import psi4; import argparse. parser = argparse.ArgumentParser(); parser.add_argument('--num_threads', type=int, default=1); parser.add_argument('--scf_type', type=str, default='DF'); parser.add_argument('--element', type=int, default=1); parser.add_argument('--multiplicity', type=int, default=2); args = parser.parse_args(). psi4.core.be_quiet() # Silence output for clarity.; psi4.set_num_threads(args.num_threads, quiet=True); psi4.set_options({; 'REFERENCE': 'UHF',; 'SCF_TYPE': args.scf_type,; }). for i in range(10):; energy = psi4.energy(; 'pbe0/sto-3g',; molecule=psi4.core.Molecule.from_arrays(; geom=[0, 0, 0],; elez=[args.element],; molecular_charge=0,; molecular_multiplicity=args.multiplicity)); print(energy); (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type PK --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; (p4dev) dpoole34@ds6:~$ python3 minimal_example.py --num_threads 6 --scf_type DIRECT --element 1 --multiplicity 2; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; -0.466509139020904; ```; ## User API & Changelog headlines. ## Dev notes & details; - [x] Fix bug present within PK calculations executed on small systems with small basis sets, wherein random energies would result from the calc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2763:1905,energy,energy,1905,https://psicode.org,https://github.com/psi4/psi4/pull/2763,1,['energy'],['energy']
Energy Efficiency,"um_threads(8); psi4.set_memory('30000mb'). psi4.set_options({; 'scf_type': 'df',; 'g_convergence': 'gau_tight',; 'reference': 'rhf',; 'freeze_core': 'true',; }). psi4.core.set_output_file('water.out', False). def run_calculation(molecule):; ; universe = psi4.geometry(molecule); universe.update_geometry(); mass = np.asarray([16.01, 1.0, 1.0]); geometry = np.asarray(universe.geometry()); irrep_labels = universe.irrep_labels(); dipole_derivatives = None; project_translation = True; project_rotation = True; symbols = [universe.symbol(at) for at in range(universe.natom())]; theory = 'mp2/aug-cc-pvdz'; ; energy, wave_function = psi4.optimize(; 'hf/6-31g*',; return_wfn = 'yes',; molecule=universe; ). hessian, wave_function_2 = psi4.hessian(; theory,; ref_gradient=wave_function.gradient(),; return_wfn= True; ). basisset = wave_function_2.basisset(). wave_function_2.hessian().print_out(). vibinfo, vibtext = psi4.driver.qcdb.vib.harmonic_analysis(; np.array(hessian),; geometry,; mass,; basisset,; irrep_labels,; dipole_derivatives,; project_translation,; project_rotation; ). print(vibtext); print(psi4.driver.qcdb.vib.print_vibs(vibinfo, shortlong=True, normco='q', atom_lbl=symbols)). if __name__ == '__main__':. water_zmatrix = '''\; O; H 1 0.9894093; H 1 0.9894093 2 100.02688; '''; run_calculation(textwrap.dedent(water_zmatrix)). ```. The output from the script for water is:. ```python. Vibration 7 8 9 ; Freq [cm^-1] 1563.0797 4068.4404 4208.3554 ; Irrep ; Reduced mass [u] 1.0740 1.0365 1.0684 ; Force const [mDyne/A] 1.5461 10.1080 11.1487 ; Turning point v=0 [a0] 0.2678 0.1690 0.1636 ; RMS dev v=0 [a0 u^1/2] 0.1962 0.1216 0.1196 ; Char temp [K] 2248.9237 5853.5800 6054.8864 ; ----------------------------------------------------------------------------------; 1 O 0.00 0.00 -0.27 0.00 0.00 0.19 -0.00 -0.26 0.00 ; 2 H -0.00 0.41 0.54 0.00 0.58 -0.39 -0.00 0.52 -0.44 ; 3 H -0.00 -0.41 0.54 -0.00 -0.58 -0.39 0.00 0.52 0.44 ; ```. Everything else but that, what am I missing so far?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650:1696,Reduce,Reduced,1696,https://psicode.org,https://github.com/psi4/psi4/issues/2698#issuecomment-1226632650,1,['Reduce'],['Reduced']
Energy Efficiency,"uming that you're running at Hartree-Fock level of theory. However, I think the methods are not the same for DFT. With ADIIS+DIIS, you can converge most systems without any kind of problems. The only cases where you get problems are the ones where there really are physical issues with the wave function, like e.g. with flat angular surfaces of the energy, where rotating the orbitals changes the energy only very slowly. These are fundamentally better described by orbital rotation techniques, e.g. the geometric direct minimization method #2214, where you just do everything in terms of orbital rotations. Direct minimization is bound to converge, and the convergence rate is often quite rapid. If you program ADIIS and/or EDIIS, one can tie them with C2-DIIS with linear interpolation. For instance, when the DIIS error is greater than `1e-2`, the DIIS extrapolation will be crap and might take you far up in energy. In this case it is better to use the ADIIS/EDIIS energy functional, which is just an **interpolation** between the current and previous iterations' Fock matrices. ADIIS/EDIIS takes you very quickly to the radius of convergence of DIIS, unless the problem is fundamentally ill-behaved (which you again can solve efficiently using GDM). If the DIIS error is in the range `1e-3, ..., 1e-2`, i.e. `log error = [-3, -2]`, then the DIIS solution likely has some truth in it, but it should still be guided by the ADIIS/EDIIS solution. Then you weigh the ADIIS/EDIIS and the C2DIIS solutions by linear interpolation from full ADIIS to `1e-2`, then linear interpolation to full C2DIIS at `1e-3`. Orbital rotation methods like GDM are often also quite good at finding a local minimum. Moreover, if you have analytical orbital derivatives, you can implement an analytical, numerically accurate line search very easily. When you use an exact line search, you're less likely to get stuck on local minima compared to DIIS. For instance, the reason why I found that PP theory breaks sigma-pi symm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568:2702,energy,energy,2702,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874461568,1,['energy'],['energy']
Energy Efficiency,"un_mod Python/pythonrun.c:1025; #42 0x7fa9b52db3b1 in PyRun_FileExFlags Python/pythonrun.c:978; #43 0x7fa9b52db516 in PyRun_SimpleFileExFlags Python/pythonrun.c:419; #44 0x7fa9b52f7b0c in run_file Modules/main.c:340; #45 0x7fa9b52f7b0c in Py_Main Modules/main.c:810; #46 0x400bbb in main Programs/python.c:69; #47 0x7fa9b422cfe9 in __libc_start_main (/lib64/libc.so.6+0x20fe9); #48 0x400c7c (/home/raimis/opt/conda/envs/psi4/bin/python3.6+0x400c7c). 0x60800007a380 is located 0 bytes to the right of 96-byte region [0x60800007a320,0x60800007a380); allocated by thread T0 here:; #0 0x7fa9b5721e10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7fa9944a3281 in __gnu_cxx::new_allocator<psi::cctriples::thread_data>::allocate(unsigned long, void const*) /usr/include/c++/7/ext/new_allocator.h:111; #2 0x7fa9944a2ba8 in std::allocator_traits<std::allocator<psi::cctriples::thread_data> >::allocate(std::allocator<psi::cctriples::thread_data>&, unsigned long) /usr/include/c++/7/bits/alloc_traits.h:436; #3 0x7fa9944a2892 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_allocate(unsigned long) /usr/include/c++/7/bits/stl_vector.h:172; #4 0x7fa9944a2506 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_M_create_storage(unsigned long) (/home/raimis/prj/psi4.git/linux_build/stage/lib/psi4/core.cpython-36m-x86_64-linux-gnu.so+0xcf0a506); #5 0x7fa9944a1e64 in std::_Vector_base<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::_Vector_base(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h:138; #6 0x7fa9944a18a0 in std::vector<psi::cctriples::thread_data, std::allocator<psi::cctriples::thread_data> >::vector(unsigned long, std::allocator<psi::cctriples::thread_data> const&) /usr/include/c++/7/bits/stl_vector.h",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1438:6760,allocate,allocate,6760,https://psicode.org,https://github.com/psi4/psi4/pull/1438,1,['allocate'],['allocate']
Energy Efficiency,unction; 373/411 Test #229: mp2-grad2 ........................ Passed 1.37 sec; Start 220: mints-helper; 374/411 Test #298: pubchem2 ......................... Passed 1.45 sec; Start 222: mints10; 375/411 Test #380: psi4numpy-cphf ................... Passed 1.09 sec; Start 309: pywrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 s,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:35788,energy,energy,35788,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"unction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF) not supported for range-separated functionals.; >; > 5. SAPT0/cc-pVDZ (energies only; water dimer): Passed!; > 6. FNOCC; > - QCISD(T)/cc-pVDZ: *ENERGY FAILED*; >; > PSIO_ERROR: Can't find TOC Entry IWL Buffers; > PSIO_ERROR: unit = 33, errval = 13; > PSIO_ERROR: 13 (no such TOC entry); > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 4052, in run_fnocc; > fnocc_wfn = core.fnocc(ref_wfn); >; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /Users/dasirianni/Gits/psi4/psi4/src/psi4/libpsio/error.cc on line: 129; > The most recent 5 function calls were:; >; > - FNO-DF-CCSD(T)/cc-pVDZ: *memDF FAILED* (diskDF passed all); >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 43, in <module>; > File ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:6704,ENERGY,ENERGY,6704,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,1,['ENERGY'],['ENERGY']
Energy Efficiency,"upied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u -0.275716 1B2u -0.275716; 3Ag -0.110068 2B1u -0.075684 2B2u -0.075684; 2B3u -0.075684 1B3g -0.003943 1B1g -0.003943; 4Ag -0.003943 1B2g -0.003943 5Ag -0.003943; 3B1u 0.121472 3B3u 0.121472 3B2u 0.121472; 6Ag 0.225602 7Ag 0.375520 8Ag 0.375520; 2B3g 0.375520 2B2g 0.375520 2B1g 0.375520; 4B2u 0.414098 1Au 0.414098 4B3u 0.414098; 5B3u 0.414098 4B1u 0.414098 5B2u 0.414098; 5B1u 0.414098 6B1u 1.165651 6B2u 1.165651; 6B3u 1.165651 9Ag 1.739906 10Ag 1.739906; 3B3g 1.739906 3B1g 1.739906 3B2g 1.739906; 7B1u 1.850114 8B1u 1.850114 7B3u 1.850114; 8B3u 1.850114 7B2u 1.850114 2Au 1.850114; 8B2u 1.850114 11Ag 2.783091. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 0, 0, 0 ]; ```. Energy converged. @RHF Final Energy: -24.23681570008748. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -30.3554852212569273; Two-Electron Energy = 6.1186695211694495; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -24.2368157000874760. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 14.36 seconds = 0.24 minutes; system time = 0.33 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes; Total time:; user time = 14.36 seconds = 0.24 minutes; system time ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:7215,Energy,Energy,7215,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Energy'],['Energy']
Energy Efficiency,"urrently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:1590,ENERGY,ENERGY,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2132,4,['ENERGY'],['ENERGY']
Energy Efficiency,"us GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_E",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1328,ENERGY,ENERGY,1328,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,using libERD leads to 2e-int energy = 0,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/173:29,energy,energy,29,https://psicode.org,https://github.com/psi4/psi4/issues/173,1,['energy'],['energy']
Energy Efficiency,"ut more uses can follow.; - [x] add in-repo `conda/psi4-path-advisor.py` script to serve as build helper. this is the main point of the PR. will elaborate more in future.; - [x] there's a tidy new way of defining flags that are essential for the compiler _with_ the compiler in `CMAKE_<LANG>_COMPILER` instead of cluttering up the user choice var `CMAKE_<LANG>_FLAGS`. This is especially relevant for intel compilers that need gcc passed. There's something that's not set up right yet for Intel Clang. Thus, we need to pass `CMAKE_<LANG>_COMPILER_ARG1` through to psi4 subproject and all other externals.; - [x] let ctest tests run whether old or new d3 and gcp implementations present.; - [x] don't expect a pylibefpConfig.cmake for libefp detection. this is the case with the c-f package -- I'll probably put it back later when libefp/pylibefp repos combine.; - [x] I was using inconsistent naming for basis_set_exchange detection/import, so fix that.; - [x] adapt docs build so that it can use Ninja (or presumably any non-Makefiles) generator. The special thing about Makefiles is that it works as expected for glob depends. So we can tell the basis table to regenerate if any of the gbs files change. Other generators won't understand this. But most docs builds are one-off, not continuous development anyways, so it's worth no globs and yes flexibility. ADDED: switched to ninja for docs and docs-pr (ok memory-wise at max parallelism b/c debug build). ADDED 12 Nov; - [x] update ecosystem and docs GHA and linux azure to use the path-advisor env/cache procedure. this helps keep the path-advisore procedure tested and keeps testing envs up-to-date. alternate testing can still be imposed by `sed`ing the envs.; - [x] in azure linux, use the three testing lanes to go beyond quicktests. apart from some longer tests, we're now hitting all but stdsuite non-quick. ; - [x] fixed the windows nightly build through azure, which was many layers of bugs. the improved path handling in psi4 & psi4/__i",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:3203,adapt,adapt,3203,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['adapt'],['adapt']
Energy Efficiency,"ut some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; > > > Reply to this email directly or view it on GitHub; > > > <https://github.com/psi4/psi4public/issues/103#issuecomment-109846967;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2998,energy,energy,2998,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"ution for the DFT ones. David. On Mon, Jun 8, 2015 at 8:46 PM, Lori A. Burns notifications@github.com; wrote:. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1604,energy,energy,1604,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"utions. At first I; > though it was because you're setting EcorlL but printing Ecorl, @bozkaya; > https://github.com/bozkaya , but that turns out to be innocent. I've; > got a valgrind if that'll help.; > ; > molecule methane {; > C 0.0000000 0.0000000 3.0826195; > H 0.5868776 0.8381742 3.4463772; > H -1.0193189 0.0891638 3.4463772; > H 0.0000000 0.0000000 1.9966697; > H 0.4324413 -0.9273380 3.4463772; > }; > ; > molecule hf {; > H; > F 1 0.917; > }; > ; > molecule bh_h2p {; > 1 2; > B 0.10369114 0.00000000 0.00000000; > H -1.13269886 0.00000000 0.00000000; > H 3.00000000 0.37149000 0.00000000; > H 3.00000000 -0.37149000 0.00000000; > }; > ; > set basis cc-pvdz; > set scf_type df; > set guess sad; > set freeze_core true; > set e_convergence 8; > set d_convergence 7; > ; > set reference uhf; > set mp2_type cd; > energy('mp2'); > print_variables(); > ; > compare_values(-0.058409837177, get_variable('mp2 correlation energy'), 6, 'mp2 uhf cd: 1 occ*') #TEST; > ; > ```; > Computing CD-MP2 energy using SCF MOs (Canonical CD-MP2)...; > =======================================================================; > Nuclear Repulsion Energy (a.u.) : 4.91953818754669; > CD-HF Energy (a.u.) : -25.94513055914741; > REF Energy (a.u.) : -25.94513055914741; > Alpha-Alpha Contribution (a.u.) : -0.00171224403804; > Alpha-Beta Contribution (a.u.) : -0.05664223456972; > Beta-Beta Contribution (a.u.) : -0.00005535856885; > Scaled_SS Correlation Energy (a.u.): -0.00058920086896; > Scaled_OS Correlation Energy (a.u.): -0.06797068148366; > CD-SCS-MP2 Total Energy (a.u.) : -26.01369044150004; > CD-SOS-MP2 Total Energy (a.u.) : -26.01876546408805; > CD-SCSN-MP2 Total Energy (a.u.) : -25.94824153973553; > CD-MP2 Correlation Energy (a.u.) : 0.02352520344587; > CD-MP2 Total Energy (a.u.) : -25.92160535570154; > =======================================================================; > ```; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/244.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183423323:1930,Energy,Energy,1930,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183423323,10,['Energy'],['Energy']
Energy Efficiency,"uts aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE TOTAL ENERGY"": (""VALIRON-MAYER FUNCTION COUNTERPOISE TOTAL ENERGY"", 1.7), # note misspelling; ""VALIRON-MAYER FUNCTION COUTERPOISE INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY"", 1.7),; ``` ; - [x] added managed mode for scf gradient. it's not wholly effective at consolidating code, though, since only triggers for `gradient(""hf"")`, not `gradient(correlated)`. digits to compare has to be relaxed, but this has been seen with other qc programs, too.; - [x] Distributed driver should not be advertised for use with QCFractal at this time. It hasn't been tested in a while, and mem, cores, etc. setting may need tweaking in a non-continuous mode. U",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:6347,ENERGY,ENERGY,6347,https://psicode.org,https://github.com/psi4/psi4/pull/2575,2,['ENERGY'],['ENERGY']
Energy Efficiency,"v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and pytest (opt). `vi v2rdm_casscf/v2rdm7/CMakeLists.txt v2rdm_casscf/v2rdm7/test_input.py`; - [ ] 74. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest registration name (x2c-perturb_h). `vi x2c-perturb-h/CMakeLists.txt`; ```; - [x] Filled in the rest of the test_input's as generated from script. There's ~3 hidden, but otherwise, the full test suite can be run from pytest. On 20 cores, I get `0 failed, 3660 passed, 96 skipped, 272 xfailed, 4 xpassed, 312 warnings in 2011.32s (0:33:31)`. For interest, the culprits over 2 minutes are:; ```; =========================================================================================================== slowest 50 durations ============================================================================================================; 937.48s call tests/linK-2/test_input.py::test_linK_2; 875.59s call tests/snsmp2/cc-cc/test_input.py::test_snsmp2_cc_cc; 855.00s call tests/fd-freq-energy-large/test_input.py::test_fd_freq_energy_large; 569.12s call tests/density-screen-2/test_input.py::test_density_screen_2; 499.66s call tests/fsapt1/test_input.py::test_fsapt1; 242.29s call tests/snsmp2/cf-o/test_input.py::test_snsmp2_cf_o; 229.90s call tests/opt13/test_input.py::test_opt13; 221.20s call tests/sapt-exch-ind30-inf/test_input.py::test_sapt_exch_ind30_inf; 204.84s call tests/chemps2/caspt2-n2/test_input.py::test_chemps2_caspt2_n2; 197.04s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97M-V- - ]; 193.31s call tests/cbs-xtpl-func/test_input.py::test_cbs_xtpl_func; 189.76s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[LC-VV10- - ]; 183.86s call tests/isapt1/test_input.py::test_isapt1; 181.63s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[wB97X-V- - ]; 174.31s call tests/test_dft_benchmarks.py::test_dft_bench_interaction[B97M-V- - ]; 171.48s call tests/sapt4/test_input.py::test_sapt4; 169.47s call tests/test_dft_benchmark",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:3261,energy,energy-large,3261,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['energy'],['energy-large']
Energy Efficiency,"val.c:4187; #64 0x557a416e201b in PyEval_EvalCode /tmp/build/80754af9/python_1546130271559/work/Python/ceval.c:731; #65 0x557a417643c3 in run_mod /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:1025; #66 0x557a417647c0 in PyRun_FileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:978; #67 0x557a417649c2 in PyRun_SimpleFileExFlags /tmp/build/80754af9/python_1546130271559/work/Python/pythonrun.c:419; #68 0x557a417684b2 in run_file /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:340; #69 0x557a417684b2 in Py_Main /tmp/build/80754af9/python_1546130271559/work/Modules/main.c:811; #70 0x557a4163102d in main /tmp/build/80754af9/python_1546130271559/work/Programs/python.c:69; #71 0x7f70116d2444 in __libc_start_main (/lib64/libc.so.6+0x22444); #72 0x557a41711e0d (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c3e0d). 0x602000823db8 is located 0 bytes to the right of 8-byte region [0x602000823db0,0x602000823db8); allocated by thread T0 here:; #0 0x7f7011d4b94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7f7003a3bf34 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7f700394d042 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7f70037a8b69 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7f70037031ef in int* std::vector<int, std::allocator<int> >::_M_allocate_and_copy<__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > >(unsig",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418:11274,allocate,allocated,11274,https://psicode.org,https://github.com/psi4/psi4/pull/1521#issuecomment-460637418,1,['allocate'],['allocated']
Energy Efficiency,"values. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure. Add a sanity checks for non-square matrices and illegal values of ""diagonalization order"".; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure. ## Questions; - [x] Is `libciomr` a good place for the new wrappers to live in? The one they are replacing is there, so it seemed like as good of a place as any. ## Checklist; - [x] No new features; - [x] 503/503 ctests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:2441,allocate,allocates,2441,https://psicode.org,https://github.com/psi4/psi4/pull/2686,1,['allocate'],['allocates']
Energy Efficiency,"vant"" in a CASSCF; > computation). The issue is that the code can't determine what irrep; > your target wavefunction is supposed to be, because you haven't given it; > information about the orbital occupancy of the reference HF wavefunction.; > I think if you specified docc [] and socc [] arrays for the reference; > high-spin triplet, the code would have a much better chance to figure out; > what you want.; >; > On Wed, Jan 8, 2020 at 7:10 AM Susi Lehtola <notifications@github.com>; > wrote:; >; >> I'm hoping to do atomic MCHF calculations with Psi4, which amount to; >> small CASSCF calculations. However, I can't get DETCI to run the; >> calculations for me.; >>; >> Take the oxygen atom for example. The 3P state has 4 electrons on the P; >> shell. DETCI correctly determines that there is 1 alpha string (since the; >> shell is fully occupied) and 3 beta strings, but then it says that the CI; >> space only has a single determinant and crashes.; >>; >> Example inputs; >>; >> molecule {; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0, 0, 0, 0, 0]; >> set active [0, 0, 0, 0, 0, 1, 1, 1]; >> energy('casscf'); >>; >> or a lower symmetry; >>; >> molecule {; >> symmetry c2h; >> 0 3; >> O; >> }; >>; >> set basis cc-pVDZ; >> set reference rohf; >> set restricted_docc [2, 0, 0, 0]; >> set active [0, 0, 1, 2]; >> energy('casscf'); >>; >> I guess the problem is that DETCI can't find a proper symmetry? Is there; >> a way to circumvent this issue? @CDSherrill; >> <https://github.com/CDSherrill> ?; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/psi4/psi4/issues/1778?email_source=notifications&email_token=AAXVA5S35WYJS2NBHZWGQ23Q4W7DBA5CNFSM4KEHMIA2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4IEX3GRQ>,; >> or unsubscribe; >> <https://github.com/notifications/unsubscribe-auth/AAXVA5TREGCEEDC6ZHCE5EDQ4W7DBANCNFSM4KEHMIAQ>; >> .; >>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907:1483,energy,energy,1483,https://psicode.org,https://github.com/psi4/psi4/issues/1778#issuecomment-572205907,2,['energy'],['energy']
Energy Efficiency,"various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #T",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:1340,ENERGY,ENERGY,1340,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['ENERGY'],['ENERGY']
Energy Efficiency,"vd(a, full_matrices=False, hermitian=hermitian); File ""<__array_function__ internals>"", line 6, in svd; File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 1661, in svd; u, s, vh = gufunc(a, signature=signature, extobj=extobj); File ""/scratch/psilocaluser/conda-builds/psi4-multiout_1620666994506/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_place/lib/python3.7/site-packages/numpy/linalg/linalg.py"", line 97, in _raise_linalgerror_svd_nonconvergence; raise LinAlgError(""SVD did not converge""). numpy.linalg.LinAlgError: SVD did not converge. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""DO_DISP_EXCH_SINF"", ""true""); energy('sapt(dft)', molecule=hcn_dimer); compare_values(0.00271925, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); energy('sapt(dft)', molecule=hf_dimer); compare_values(0.00211996, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""); --> energy('sapt(dft)', molecule=h2o_dimer); compare_values(0.00324766, variable('sapt exch-disp20(s^inf) energy'), 7, ""SAPT EXCH-DISP20(S^inf) ENERGY""). !--------------------------------!; ! !; ! SVD did not converge !; ! !; !--------------------------------!. Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 29.69 sec; ----------------------------------------------------------; Test Failed.; ""sapt-exch-disp-inf"" end time: May 10 14:45 EDT; ""sapt-exch-disp-inf"" time elapsed: 00:00:29; ----------------------------------------------------------; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2178:4895,energy,energy,4895,https://psicode.org,https://github.com/psi4/psi4/issues/2178,9,"['ENERGY', 'energy']","['ENERGY', 'energy']"
Energy Efficiency,"ve affected this test case, and so I wonder if it is a problem with the test case. I recall that at one time we had removed testing of CUKS because we found it to be numerically unstable and Rob wasn't able to remove the numerical instability. But we decided to leave in CUKS as a feature because it worked most of the time and therefore could be helpful to users. This particular test case is a bit strange ... we are testing O2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correc",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:1108,Charge,Charge,1108,https://psicode.org,https://github.com/psi4/psi4/issues/738,1,['Charge'],['Charge']
Energy Efficiency,ve; 382/411 Test #385: psi4numpy-fci .................... Passed 4.83 sec; Start 389: python-pubchem; 383/411 Test #375: pywrap-bfs ....................... Passed 24.54 sec; Start 390: python-mints9; 384/411 Test #388: python-curve ..................... Passed 3.58 sec; Start 391: python-mints2; 385/411 Test #390: python-mints9 .................... Passed 1.95 sec; Start 392: python-cc54; 386/411 Test #391: python-mints2 .................... Passed 2.61 sec; Start 393: python-3-index-transforms; 387/411 Test #304: pywrap-checkrun-rhf .............. Passed 379.62 sec; Start 395: python-mints13; 388/411 Test #395: python-mints13 ................... Passed 1.90 sec; Start 396: python-memdfjk; 389/411 Test #396: python-memdfjk ................... Passed 1.11 sec; Start 397: json-v11-energy; 390/411 Test #392: python-cc54 ...................... Passed 8.91 sec; Start 398: json-v11-gradient; 391/411 Test #393: python-3-index-transforms ........ Passed 9.59 sec; Start 399: json-schema-1-energy; 392/411 Test #397: json-v11-energy .................. Passed 4.11 sec; Start 400: json-schema-1-ghost; 393/411 Test #398: json-v11-gradient ................ Passed 2.70 sec; Start 401: json-schema-1-orient; 394/411 Test #400: json-schema-1-ghost .............. Passed 1.16 sec; Start 402: json-schema-1-throws; 395/411 Test #402: json-schema-1-throws ............. Passed 0.55 sec; Start 403: json-schema-1-gradient; 396/411 Test #401: json-schema-1-orient ............. Passed 2.34 sec; Start 404: json-schema-1-properties; 397/411 Test #399: json-schema-1-energy ............. Passed 2.80 sec; Start 405: skeleton; 398/411 Test #403: json-schema-1-gradient ........... Passed 1.54 sec; Start 406: skeletonaointegrals; 399/411 Test #404: json-schema-1-properties ......... Passed 1.27 sec; Start 407: skeletondfmp2; 400/411 Test #405: skeleton ......................... Passed 1.30 sec; Start 408: skeletonmointegrals; 401/411 Test #406: skeletonaointegrals .............. Passed 1.33 sec; Start 4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:36599,energy,energy,36599,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['energy'],['energy']
Energy Efficiency,"ver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3907, in run_fnodfcc; set_cholesky_from('CC_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 3897, in set_cholesky_from; raise ValidationError("" FNOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: FNOCC requires SCF_TYPE = DISK_DF; ```; 7. DFOCC (OMP2/cc-pVDZ): **memDF FAILED** (diskDF passed all); ```; Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 40, in <module>; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 227, in select_omp2; return func(name, **kwargs); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1558, in run_dfocc; type_val = set_cholesky_from('MP2_TYPE'); File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1540, in set_cholesky_from; raise ValidationError("" DFOCC requires SCF_TYPE = DISK_DF""); ; ValidationError: DFOCC requires SCF_TYPE = DISK_DF; ```; 8. CI; - CISD/cc-pVDZ: **ALL FAILED**; ```; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 28, in <module>; File ""/Users/dasiria",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081:8545,energy,energy,8545,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-388980081,2,['energy'],['energy']
Energy Efficiency,"vergence threshold). In contrast, DFJCOSK is the template IncFock upon which the two previous PRs were based; however, DFJCOSK does not have the IncFock bells and whistles that DirectJK and DFJLinK had. Unmitigated, the incremental Fock procedure can actually significantly increase the number of SCF iterations needed to converged; and the IncFock bells and whistles in DirectJK and DFJLinK notably mitigate the effect of IncFock on SCF convergence counts. Without these bells and whistles, DFJCOSK runs the significant risk of excessive SCF iterations needed to converge when IncFock is enabled, an issue I have run into in my own calculations. This PR seeks to rectify the aforementioned issue by implementing the IncFock bells and whistles of DirectJK and DFJLinK into DFJCOSK. With these extra features, DFJCOSK can now recompute the full Fock matrix every n iterations, or disable IncFock past a given convergence threshold, at the will of the end user. These features can notably reduce the amount of SCF iterations needed to converge. This PR is also the continued effort to standardize IncFock among all integral-direct SCF algorithms in Psi4. With this PR, DirectJK, DFJLinK, and DFJCOSK will have effectively the exact same incremental Fock schemes, each featuring the lower memory usage of DFJCOSK's former IncFock scheme, and the bells and whistles of DirectJK and DFJLinK's former IncFock schemes. The final step to the IncFock standardization process, then, is the movement of the IncFock scheme of these algorithms into the base JK class itself - the final step of the PR scheme discussed in the comments in https://github.com/psi4/psi4/pull/2682. It is worth noting for the reviewers that, since this PR more closely matches the IncFock of DFJCOSK to that of DFJLinK, it should be considered relevant to the CompositeJK PR chain as well, as it smooths the combination of DFJLinK and DFJCOSK into a single class as planned in the next CompositeJK step. ## User API & Changelog headline",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2816:1746,reduce,reduce,1746,https://psicode.org,https://github.com/psi4/psi4/pull/2816,1,['reduce'],['reduce']
Energy Efficiency,"viations are quite large either way.; # SOGGA11 only up to 4 decimals even for Ne with fine grid. ggaval ={; ""blyp"" : -128.894855380969, # ORCA; ""svwn"" : -128.357941704 , # G09; ""pbe"" : -128.79305010293, # TM LDA-PW91; #""pbe"" : -128.793027408, # G09; #""pbe"" : -128.793068569269 # ORCA LDA-PW91; #""bp86"" : -128.905683777641, # ORCA LDA-PW91; #""bp86"" : -128.9092927447, # TM = LDA-VWN, or iop(3/74=418) in Gaussian; #""bp86"" : -128.903070321, #G09 LDA-PW86; ""pw91"" : -128.871229934635, # ORCA; ""mpwpw"" : -128.893378250504, # ORCA; ""ft97"" : -128.850056371480 , # NWCHEM xfine xc ft97 screening 1-e14; ""bop"" : -128.892404778404, # NWCHEM; #""b86bpbe"" : , # ???; ""pw86pbe"" : -128.946484366 , # G09 iop(3/74=809); ""sogga11"" : -128.889273547 , # G09.D01 ""SOGGA11/cc-pVDZ 5D SP Int(Grid=99770)""; }. molecule ne {; 0 1; Ne; }. set df_scf_guess false; set basis cc-pvdz; set reference rks; set dft_radial_points 99; set dft_spherical_points 770; set scf_type direct. for func, val in ggaval.items():; edft = energy(func); label=func.upper(); compare_values(val, edft, 4, 'Ne: '+label) #TEST; clean(). # special flower BP86; low accuracy; # #G09 LDA-PW86; edft = energy('bp86'); compare_values(-128.903070321, edft, 3, 'Ne: BP86(PW)') #TEST; clean(). #=== from dft1 ===; molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; print 2; basis sto-3g. guess core; scf_type direct; dft_spherical_points 302; dft_radial_points 99; reference rks; }. E15 = -75.2976775610; activate(h2o); edft=energy('scf', dft_functional=""b86bpbe""); compare_values(E15,edft, 4, ""H2O: B86BPBE "") #TEST. --------------------------------------------------------------------------. *** tstart() called on scychon-OptiPlex-7010; *** at Wed Jun 13 11:12:26 2018. => Loading Basis Set <=. Name: CC-PVDZ; Role: ORBITAL; Keyword: BASIS; atoms 1 entry NE line 258 file /root/psi4/build/stage/share/psi4/share/psi4/basis/cc-pvdz.gbs. ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775:2859,energy,energy,2859,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-396997775,1,['energy'],['energy']
Energy Efficiency,"vs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 1570, in update_geometry; self.set_point_group(self.find_point_group()); ^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2423, in find_point_group; pg = self.find_highest_point_group(tol) # D2h subgroup; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintsmolecule.py"", line 2523, in find_highest_point_group; return PointGroup(pg_bits); ^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1530, in __init__; self.constructor_bits(*args); File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1573, in constructor_bits; self.symb = self.bits_to_basic_name(self.PYbits); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/rowansci/peregrine/.pixi/envs/dev/lib/python3.12/site-packages/psi4/driver/qcdb/libmintspointgrp.py"", line 1755, in bits_to_basic_name; raise ValidationError('Unrecognized point group bits: %d\n' % (bits)). psi4.driver.qcdb.exceptions.ValidationError: Unrecognized point group bits: 80. Printing out the relevant lines from the Psithon --> Python processed input file:; H -0.3913180530 -0.8282585144 -0.5761431456; H 0.0839750469 -0.2910425067 1.0389058590; H 0.9764814973 0.2730248868 -0.3781855106; """"""); core.IO.set_default_namespace(""""); --> energy(""BP86/sto-3g""). !------------------------------------!; ! !; ! Unrecognized point group bits: 80 !; ! !; !------------------------------------!. Psi4 stopped on: Friday, 30 August 2024 04:55PM; Psi4 wall time for execution: 0:00:00.03. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3213:5170,energy,energy,5170,https://psicode.org,https://github.com/psi4/psi4/issues/3213,1,['energy'],['energy']
Energy Efficiency,wb97X-V with density threshold of 1e-10 stops before printing the first SCF/SAD energy in the SCF iteration output. I dont have access to gcc5 and I cannot reproduce the error otherwise for now. e.g.:; https://dev.azure.com/psi4/psi4/_build/results?buildId=2170&view=logs&j=96451287-da82-57a8-2c11-8da7db9ab71a&t=895e49e6-cad9-5b25-6d66-c0b61859d928&l=801,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1943:80,energy,energy,80,https://psicode.org,https://github.com/psi4/psi4/issues/1943,1,['energy'],['energy']
Energy Efficiency,"well, I see now that the 3rd order correlation energy is zero in my calculations...so this is not solved yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561791551:47,energy,energy,47,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561791551,1,['energy'],['energy']
Energy Efficiency,"were:; >; > 2. HF/cc-pVDZ: Passed; > 3. AO DF-CASSCF/cc-pVDZ: Passed; > 4. DFT Smoketests; > - B2PLYP/cc-pVDZ: Passed; > - CAM-B3LYP/cc-pVDZ: *FAILED*; >; > Traceback (most recent call last):; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/bin/psi4"", line 264, in <module>; > exec(content); > File ""<string>"", line 31, in <module>; > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 444, in energy; > return driver_cbs._cbs_gufunc(energy, name, ptype='energy', **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver_cbs.py"", line 1818, in _cbs_gufunc; > ptype_value, wfn = func(method_name, return_wfn=True, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/driver.py"", line 492, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 2038, in run_scf; > scf_wfn = scf_helper(name, post_scf=False, **kwargs); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1283, in scf_helper; > scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/proc.py"", line 1000, in scf_wavefunction_factory; > superfunc, disp_type = dft_funcs.build_superfunctional(name, (reference in [""RKS"", ""RHF""])); > File ""/Users/dasirianni/Gits/psi4/objdir/stage/Users/dasirianni/install/psi4/lib/psi4/driver/procrouting/dft_funcs/superfuncs.py"", line 130, in build_superfunctional; > ""SCF: SCF_TYPE (%s) not supported for range-separated functionals."" % core.get_option(""SCF"", ""SCF_TYPE"")); >; > ValidationError: SCF: SCF_TYPE (MEM_DF",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128:3322,energy,energy,3322,https://psicode.org,https://github.com/psi4/psi4/issues/1021#issuecomment-389018128,2,['energy'],['energy']
Energy Efficiency,"wfns = {method: {state: [] for state in range(1, num_states + 1)} for method in methods_to_try}. for bond_length in bond_lengths:; casscf_energies, casscf_wfns = compute_energies(bond_length, num_states, methods_to_try); for method in methods_to_try:; for state in range(1, num_states + 1):; energies[method][state].append(casscf_energies[method][state]); wfns[method][state].append(casscf_wfns[method][state]). return bond_lengths, energies, wfns. # Generate potential energy curves; bond_lengths, energies, wfns = generate_potential_energy_curves(). # Compute ground state energies for plotting; ground_state_energies = [compute_energy(bond_length) for bond_length in bond_lengths]. # Writing data to a file 'PEC_data_CF.csv' for the first excited state; with open('PEC_data_CF.csv', 'w') as f:; f.write('# Bond Length (Angstrom), Ground State Energy (Hartree)\n'); for i, bond_length in enumerate(bond_lengths):; f.write(f'{bond_length:.6f}, {ground_state_energies[i]:.8f}\n'). # Plotting potential energy curves; plt.figure(figsize=(10, 6)); plt.plot(bond_lengths, ground_state_energies, label='Ground State', color='black'); for method in energies:; for state in range(1, num_states + 1):; plt.plot(bond_lengths, energies[method][state], label=f'{method}, State {state}'). plt.xlabel('Bond Length (Angstrom)'); plt.ylabel('Energy (Hartree)'); plt.title('Potential Energy Curves for CF Molecule'); plt.legend(); plt.grid(True); plt.tight_layout(). # Saving the plot as an image file; plt.savefig('potential_energy_curve_CF.png'). # Displaying the plot; plt.show(). Here's one of the error I got after several modifications. Please I need serious help on this right now.; Error computing energies at bond length 1.0: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.2: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.4: 'NoneType' object has no attribute 'group'; Error computing energies at bond length 1.5999999999999999:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824:3530,energy,energy,3530,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2172329824,1,['energy'],['energy']
Energy Efficiency,"where `@pcmsolver.inp` can't be read b/c the working dir wasn't left in the pcm subdir where `pcmsolver.inp`-->`@pcmsolver.inp`. . Note that the changes in this PR would have only influenced psiapi mode, not psithon, since most of the pcm_helper fn is just repeated from inputparser. I'm not sure whether @raimis is trying to run psithon or psiapi — looks like the latter in intent and the former in practice. Tracing back to [here](https://github.com/Acellera/htmd/pull/409#discussion_r139685402), I think they're still psithon, so this PR may have targeted the wrong approach. Or I may have all my pcmsolver input redirects quite confused. This being the fourth package that has conspired against conda, it may be one too many. ```; RHF-PCM, total algorithm; Error: Error: Getkw, line 33 in /scratch/psilocaluser/conda-builds/pcmsolver_1499412893611/work/src/utils/getkw/Getkw.cpp: Open failed: @pcmsolver.inp; ```. ```; print('RHF-PCM, total algorithm'); > energy_scf1, wfn1 = psi4.energy('scf', return_wfn=True). ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/tests/test_addons.py:425: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1996: in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ../../_b_env_placehold_placehold/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1271: in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE')); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name =",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/818#issuecomment-353769977:1169,energy,energy,1169,https://psicode.org,https://github.com/psi4/psi4/pull/818#issuecomment-353769977,1,['energy'],['energy']
Energy Efficiency,"where there's only one potential and both charges and locations are specified. Additionally, there's two related categories. F-SAPT can put _different_ external potentials on any of fragments A, B, C, which have been passed in as `energy(""fisapt"", external_potentials={""A"": extern, ...}, ...)`. Also nbody can take an array of charges (not locations) that replace fragments when the fragments are ghosted. These are passed as `energy(..., bsse_type=..., embedding_charges=[monoAchg, ...])`. Problems:; * formation of Python objects in the input file and special options setting doesn't translate to QCSchema, which is the sole means of communication for many calcs in DDD.; * the most common calc, the simple single extern has no kwarg-to-energy way to set; * the uncertainty in units of ExternalPotential can be confusing and has led to bugs. Also, in DDD, the spec order of mol and extern may not be so clear to set the units. This is No. 2 of the DDD series, #1351. ## Todos; - [x] Replace `QMMM()` with `QMMMbohr()` and issue an update guide if the former is called.; - [x] For the common single-extern case, switch to `energy(..., external_potentials=array` instead of `QMMM()` object. This tests whether the `external_potentials` value is an array for a single extern, which gets processed and set immediately, or a dict of externs, which gets handled by the run_fsapt later on.; - [x] relaxed the array spec by which externs are initialized. instead of `q, [x, y, z]` also allow `q, x, y, z`, which makes for very easy numpy processing for units transofmation.; - [x] removed all the units handling around ExternalPotential; - [x] docs . ## Questions; - [ ] ok to use external_potentials kwarg for both simple and fsapt multi frags use cases?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2515:1522,energy,energy,1522,https://psicode.org,https://github.com/psi4/psi4/pull/2515,1,['energy'],['energy']
Energy Efficiency,"whoa, poltype needs a lot of software! the segfault you posted is not in my power to interpret. do you have access to the file or commands poltype is submitting to psi4? I suspect a bad interaction among software libraries. does `psi4 --test` run ok (that is, no failures)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033:76,power,power,76,https://psicode.org,https://github.com/psi4/psi4/issues/2084#issuecomment-761235033,1,['power'],['power']
Energy Efficiency,"whoa, quite a lot of details to handle DFT xtpl -- thanks for working it all out!. > Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?. I'd do a minimum of cleanup here and save it for ddd in 1.5. > The fact that the DFT VV10 ENERGY contribution is included in DFT FUNCTIONAL TOTAL ENERGY is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Having VV10 follow the empirical dispersion pattern feels more natural to me. Can add a message warning that usage has changed whenever the var is called for a spell like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L624-L628",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952:268,ENERGY,ENERGY,268,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802158952,3,['ENERGY'],['ENERGY']
Energy Efficiency,wrap-molecule; 376/411 Test #231: mp2p5-grad1 ...................... Passed 1.18 sec; Start 404: json-schema-1-properties; 377/411 Test #411: skeletonwavefunction ............. Passed 0.97 sec; Start 406: skeletonaointegrals; 378/411 Test #398: json-v11-gradient ................ Passed 1.04 sec; Start 410: skeletonsointegrals; 379/411 Test #220: mints-helper ..................... Passed 1.15 sec; Start 387: python-energy; 380/411 Test #222: mints10 .......................... Passed 1.24 sec; Start 378: mints12; 381/411 Test #309: pywrap-molecule .................. Passed 1.14 sec; Start 383: psi4numpy-rhf-gradient; 382/411 Test #404: json-schema-1-properties ......... Passed 1.17 sec; Start 353: tu1-h2o-energy; 383/411 Test #190: fci-coverage ..................... Passed 1.91 sec; Start 214: mints3; 384/411 Test #410: skeletonsointegrals .............. Passed 0.90 sec; Start 349: sapt-sf1; 385/411 Test #406: skeletonaointegrals .............. Passed 0.93 sec; Start 396: python-memdfjk; 386/411 Test #387: python-energy .................... Passed 0.72 sec; Start 352: stability2; 387/411 Test #378: mints12 .......................... Passed 1.15 sec; Start 188: fci-tdm; 388/411 Test #396: python-memdfjk ................... Passed 0.88 sec; Start 354: tu2-ch2-energy; 389/411 Test #214: mints3 ........................... Passed 0.99 sec; Start 382: psi4numpy-rhf; 390/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.10 sec; Start 334: scf3; 392/411 Test #353: tu1-h2o-energy ................... Passed 1.26 sec; Start 209: mcscf1; 393/411 Test #352: stability2 ....................... Passed 1.16 sec; Start 211: mcscf3; 394/411 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 409: skeletonscf; 395/411 Test #308: pywrap-db3 ....................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195:36102,energy,energy,36102,https://psicode.org,https://github.com/psi4/psi4/pull/1078#issuecomment-408900195,1,['energy'],['energy']
Energy Efficiency,"wrong. ## Local stdout:; ```; Alanine energy: -322.83024417222833 Hartrees, time taken: 5.157728010000028 seconds.; Arginine energy: -605.2334551774346 Hartrees, time taken: 24.718217983999978 seconds.; Asparagine energy: -491.10483309674163 Hartrees, time taken: 10.41663564099997 seconds.; Aspartic_acid energy: -510.40430731923726 Hartrees, time taken: 9.22630813500001 seconds.; Cysteine energy: -720.516978697493 Hartrees, time taken: 8.705966620000027 seconds.; Glutamic_acid energy: -549.5881696345085 Hartrees, time taken: 12.724474364000002 seconds.; Glutamine energy: -530.2859605443301 Hartrees, time taken: 13.692237066000018 seconds.; Glycine energy: -283.6410604296507 Hartrees, time taken: 3.274363483000002 seconds.; Histidine energy: -547.2538448890515 Hartrees, time taken: 16.051534118999996 seconds.; Isoleucine energy: -440.38074256935386 Hartrees, time taken: 13.504395359 seconds.; Leucine energy: -440.3830677856804 Hartrees, time taken: 13.360224716999994 seconds.; Lysine energy: -495.9450901408551 Hartrees, time taken: 17.004098473 seconds.; Methionine energy: -798.8557355673612 Hartrees, time taken: 15.174141779999957 seconds.; Phenylalanine energy: -553.2067571527756 Hartrees, time taken: 21.84562706899999 seconds.; Proline energy: -400.01014403056064 Hartrees, time taken: 8.192189529000018 seconds.; Serine energy: -397.9050930788871 Hartrees, time taken: 6.108175248000009 seconds.; Threonine energy: -437.0635748952652 Hartrees, time taken: 8.374118565999936 seconds.; Tryptophan energy: -684.4098345276545 Hartrees, time taken: 37.255489416000046 seconds.; Tyrosine energy: -628.2533259038854 Hartrees, time taken: 25.399482511999963 seconds.; Valine energy: -401.1991694876506 Hartrees, time taken: 10.574376873999995 seconds.; ```. ## Summit stdout:; ```; Alanine energy: -322.83024417229103 Hartrees, time taken: 68.54604168608785 seconds.; Arginine energy: -605.1514689384549 Hartrees, time taken: 215.84501126222312 seconds.; Asparagine energy: -491.044321",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595:1454,energy,energy,1454,https://psicode.org,https://github.com/psi4/psi4/issues/3223#issuecomment-2375594595,1,['energy'],['energy']
Energy Efficiency,x integrals <==. Generating Cholesky vectors ...; Cholesky decomposition threshold: 1.00e-04; Number of Cholesky vectors: 2690. ==> Frozen Natural Orbitals <==. Doubles contribution to MP2 energy in full space: -3.880037726127. Cutoff for significant NO occupancy: 1.000e-06. Number of virtual orbitals in original space: 686; Number of virtual orbitals in truncated space: 651. ==> Memory <==. Total memory requirements: 66851.24 mb; 3-index integrals: 10270.29 mb; CCSD intermediates: 56580.95 mb. <<< warning! >>> switched to low-memory (t) algorithm. memory requirements for CCSD(T): 29772.62 mb. ==> Input parameters <==. Freeze core orbitals? yes; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 26; Number of active occupied orbitals: 66; Number of active virtual orbitals: 651; Number of frozen virtual orbitals: 35. Begin singles and doubles coupled cluster iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 2 -3.8800058511 -3.8800058511 1.0189008043 350; 1 1 3 -3.8152481716 0.0647576795 0.2191661024 6471; 2 2 4 -3.9577344796 -0.1424863080 0.0847277059 6428; 3 3 5 -3.9682900740 -0.0105555944 0.0382308599 6716; 4 4 6 -3.9680391582 0.0002509158 0.0104096296 6663; 5 5 7 -3.9686550395 -0.0006158812 0.0052763771 6753; 6 6 8 -3.9689037022 -0.0002486628 0.0017743273 6798; 7 7 9 -3.9688426839 0.0000610183 0.0009217340 6861; 8 8 2 -3.9687941077 0.0000485763 0.0003794817 6897; 9 8 1 -3.9687913569 0.0000027508 0.0001579755 6928; 10 8 3 -3.9688036162 -0.0000122594 0.0000701594 6918; 11 8 4 -3.9687942649 0.0000093514 0.0000293354 6938; 12 8 6 -3.9687961341 -0.0000018693 0.0000116248 6933; 13 8 5 -3.9687949037 0.0000012304 0.0000064734 6873; 14 8 8 -3.9687942464 0.0000006574 0.0000032732 6946; 15 8 7 -3.9687942780 -0.0000000316 0.0000016867 6933; 16 8 1 -3.9687942537 0.0000000243 0.0000008407 6973; 17 8 2 -3.9687942775 -0.0000000239 0.0000003851 6956; 18 8 3 -3.9687943095 -0.00000003,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-34826327:3458,Energy,Energy,3458,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-34826327,2,['Energy'],['Energy']
Energy Efficiency,x0c068006f8f0: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c068006f910: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07 ; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==10081==ABORTING; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). =================================================================; ==10025==ERROR: LeakSanitizer: detected memory leaks. Direct leak of 282802 byte(s) in 124 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Direct leak of 2 byte(s) in 2 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f17949fe0 in _PyObject_Alloc.isra.0 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe6fe0). Indirect leak of 19819 byte(s) in 22 object(s) allocated from:; #0 0x7f0f92dd6afc in __interceptor_malloc /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_malloc_linux.cc:62; #1 0x557f1794b8b3 in PyObject_Malloc (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe88b3). Indirect leak of 648 byte(s) in 1 object(s) allocated from:; #0 0x7f0f92dd6df8 in __intercept,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:17830,allocate,allocated,17830,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocated']
Energy Efficiency,"xFlags (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x214fa3); #38 0x561a735e6a9d in Py_Main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x218a9d); #39 0x561a734ae4bd in main (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0xe04bd); #40 0x7f290458a444 in __libc_start_main (/lib64/libc.so.6+0x22444); #41 0x561a73595772 (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x1c7772). 0x6030003bc668 is located 0 bytes to the right of 24-byte region [0x6030003bc650,0x6030003bc668); allocated by thread T0 here:; #0 0x7f2904bfbe10 in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1520532893746/work/.build/src/gcc-7.2.0/libsanitizer/asan/asan_new_delete.cc:80; #1 0x7f28e2c07ef9 in __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/ext/new_allocator.h:111; #2 0x7f28e2c07ef9 in std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/alloc_traits.h:436; #3 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:172; #4 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:187; #5 0x7f28e2c07ef9 in std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:138; #6 0x7f28e2c07ef9 in std::vector<int, std::allocator<int> >::vector(std::vector<int, std::allocator<int> > const&) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/bits/stl_vector.h:328; #7 0x7f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756:9749,allocate,allocate,9749,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-421335756,1,['allocate'],['allocate']
Energy Efficiency,"x] Format output; * **Test and debug**; - [x] Debug; * **Clean up**; - [x] Clean up. ## Questions; - [x] Is there a way to get correct thread rank in `timer_on` and `timer_off` functions rather than introducing an extra arg. ## Status; - [x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:1631,energy,energy,1631,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['energy'],['energy']
Energy Efficiency,"x] Ready to go. ## Note; The signature of timer operations are:; (1) `void timer_on(const std::string& key)`; (2) `void timer_off(const std::string& key)`; (3) `void parallel_timer_on(const std::string& key, int thread_rank)`; (4) `void parallel_timer_off(const std::string& key, int thread_rank)`. In order to run timer correctly in parallel, (1) and (2) should only be called in seriel part of code and (3) and (4) should only be called in OpenMP parallel sections. Calling to (3) and (4) requires to pass an additional arg `thread_rank` unique to every thread. Generally, call; - `parallel_timer_on(""your_key_string"", omp_get_thread_num());`; - `parallel_timer_off(""your_key_string"", omp_get_thread_num());`; will work. ## An example code; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; parallel_timer_on(""inner"",omp_get_thread_num());; // some running code; parallel_timer_off(""inner"",omp_get_thread_num());; } . timer_off(""energy"");; return 0.0;; }; ```. ## An example output; ```; Host: DESKTOP-JOFFIR0. Timers On : Fri Jul 7 15:47:10 2017; Timers Off: Fri Jul 7 15:47:13 2017. Wall Time: 3.50 seconds. V: Grid : 0.333u 0.000s 0.209w 2 calls; JK: (A|mn) : 0.000u 0.000s 0.004w 2 calls; JK: (A|Q)^-1/2 : 0.783u 0.000s 0.256w 2 calls; JK: (Q|mn) : 0.000u 0.000s 0.001w 2 calls; HF: Form H : 0.150u 0.017s 0.007w 2 calls; HF: Form S/X : 0.000u 0.000s 0.000w 2 calls; HF: Guess : 0.000u 0.000s 0.001w 2 calls; HF: Form G : 18.817u 0.017s 1.883w 24 calls; RKS: Form V : 16.567u 0.017s 1.265w 24 calls; V: Properties : 2.047p 14064 calls; V: Functional : 6.249p 14064 calls; V: V_XC : 0.532p 14064 calls; V: LSDA : 0.182p 28128 calls; V: GGA : 0.218p 14064 calls; JK: D : 0.000u 0.000s 0.000w 24 calls; JK: USO2AO : 0.000u 0.000s 0.000w 24 calls; JK: JK : 2.250u 0.000s 0.616w 24 calls; JK: J : 0.000u 0.000s 0.000w 16 calls; JK: J1 : 0.000u 0.000s 0.000w 16 calls; JK: J2 : 0.000u 0.000s 0.000w 16 calls; JK: K : 0.000u 0.000s 0.00",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743:1836,energy,energy,1836,https://psicode.org,https://github.com/psi4/psi4/pull/743,1,['energy'],['energy']
Energy Efficiency,"xcited states; > ; > Input File; > Finding of 30 higher roots(i.e excited states) and then finding transition; > dipole moment from ground state to these excited states; > ; > #for Graphyne using basis cc-pvdz; > ; > memory 5000 mb; > ; > molecule Graphyne {; > 0 1; > C 1.396 0.000 0.000; > C 0.698 1.209 0.000; > C -0.698 1.209 0.000; > C -1.396 0.000 0.000; > C -0.698 -1.209 0.000; > C 0.698 -1.209 0.000; > H 1.240 2.147 0.000; > H -1.240 2.147 0.000; > H -2.479 0.000 0.000; > H -1.240 -2.147 0.000; > H 1.240 -2.147 0.000; > C 2.798 0.000 0.000; > C 4.020 0.000 0.000; > C 5.422 0.000 0.000; > C 8.214 0.000 0.000; > C 7.516 1.209 0.000; > C 6.120 1.209 0.000; > C 6.120 -1.209 0.000; > C 7.516 -1.209 0.000; > H 8.058 2.147 0.000; > H 5.578 2.147 0.000; > H 9.297 0.000 0.000; > H 5.578 -2.147 0.000; > H 8.058 -2.147 0.000; > ; > symmetry c1; > units angstrom; > }; > ; > set globals {; > reference rhf; > basis cc-pvdz; > #freeze_core true; > scf_type out_of_core; > dipmom true; > num_roots 4; > }; > ; > set scf d_convergence 10; > set detci e_convergence 8; > ; > ## thisenergy = energy('fci'); > ; > I am getting this erorr and i am not able to correct this. any one can; > help me ?; > ; > PSIO_ERROR: unit = 41, errval = 12; > PSIO_ERROR: 12 (error writing to file); > Traceback (most recent call last):; > File """", line 58, in; > File ""/usr/local/psi4/share/psi/python/driver.py"", line 549, in energy; > procedures['energy']lowername http://lowername,%20**kwargs; > File ""/usr/local/psi4/share/psi/python/proc.py"", line 1481, in run_detci; > psi4.transqt2(); > RuntimeError: PSIO Error; > file: /home/psi4.0b5/src/lib/libpsio/error.cc; > line: 116; > ; > Output File; > ; > ---; > ; > ```; > PSI4: An Open-Source Ab Initio Electronic Structure Package; > PSI 4.0.0-beta5 Driver; > ```; > ; > J. M. Turney, A. C. Simmonett, R. M. Parrish, E. G. Hohenstein,; > F. A. Evangelista, J. T. Fermann, B. J. Mintz, L. A. Burns, J. J. Wilke,; > M. L. Abrams, N. J. Russ, M. L. Leininger, C. L.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:1612,energy,energy,1612,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['energy'],['energy']
Energy Efficiency,"xperimental and are not generally recommendable. ----; **errors in absolute and relative energies**; Based on S22 benchmark set. no CP correction. Absolute energies for dimers only.; level of theory: PBE/aug-cc-pVTZ with grid (434,75); _grid point reduction_; * ``ROBUST = 30.3 %``; * ``TREUTLER = 45.5 %``. _interaction energies_; * MAD old BS to new BS: 0.002 kcal/mol; * MAD old BS to newBS + ``ROBUST``: 0.002 kcal/mol (yay!); * MAD old BS to newBS + ``TREUTLER``: 0.021 kcal/mol. _absolute energies_; * MAD old BS to new BS: 2.9E-06 au; * MAD old BS to newBS + ``ROBUST``: 2.9E-06 au; * MAD old BS to newBS + ``TREUTLER``: 4.5E-05; * (newBS) MAD ``NONE`` to ``ROBUST`` pruning: 1.4E-10 au; * (newBS) MAD ``NONE`` to ``TREUTLER`` pruning: 4.6E-05 au. ----; **timings** (speed ups); * benzene dimer : `ROBUST=1.16`; `TREUTLER=1.22`; PBE/aug-cc-pVTZ with grid (434,75); 16 Threads; . * C60 fullerene (C2h) : `ROBUST=1.33`; `TREUTLER=1.36`; PBE/aug-cc-pVDZ with grid (434,75); 16 Threads; . ----; **tough case**; Molecule 35 from the MB16-43 ('mindless benchmarking') benchmark set. Modelling following reaction:; `2x 35 + 20x H2 -> 2x LIH + 4x BH4 + 4x CH4 + O2 + 4x AlH4 + 2x SiH4 + P2 + CL2`; In essence, a diverse inorganic, main group chemistry reaction.; level of theory: PBE/def2-TZVP with (434,85) grid.; link to input file: https://gist.github.com/hokru/408873d71efb522f7de1f0cfe0cf9da0. _reaction energy_ ; * dev. old BS to new BS: -0.0011 kcal/mol ; * (newBS) `NONE` to `ROBUST`: -0.0003 kcal/mol; * (newBS) `NONE` to `TREUTLER`: 0.94978 kcal/mol (0.5 % of a reaction energy of 188 kcal/mol !); * speed-ups: `ROBUST=1.33 `; `TREULTER=1.36`. _absolute energy molecule 35_; * dev. old BS to new BS: 3.41e-07; * (newBS) `NONE` to `ROBUST`: 4.93e-07; * (newBS) `NONE` to `TREUTLER`: 1.46E-04. _gradient energy molecule 35_; * (newBS) MAD `NONE` to `ROBUST`: ~ 1E-7; * (newBS) MAD `NONE` to `TREUTLER`: ~ 1E-05. _grid point reduction molecue 35_; * ``ROBUST = 30.9 %``; * ``TREUTLER = 45.8 %``",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:4753,energy,energy,4753,https://psicode.org,https://github.com/psi4/psi4/pull/1591,3,['energy'],['energy']
Energy Efficiency,"y = optimize('b3lyp'); ```. The problem is in the following snippet of output:; ```; @IRC; @IRC Point Sphere Step Energy DE MAX Force RMS Force MAX Disp RMS Disp; @IRC -----------------------------------------------------------------------------------------------------------; @IRC 1 1 -549.84523511 -1.42e-05 o 3.60e-03 9.91e-04 4.76e-03 2.20e-03 ~; -----------------------------------------------------------------------------------------------------------. Successfully symmetrized geometry.; Writing optimization data to binary file.; Structure for next step:; Cartesian Geometry (in Angstrom); O 0.0000000000 0.0006522925 -3.0256582351; H 0.0000000000 -0.7545860178 -2.4217783475; O 0.0000000000 0.0004273016 0.0969091320; H 0.0000000000 0.7536033792 -2.4213898491; S 0.0000000000 -0.0000969555 1.6158069683; --------------------------; OPTKING Finished Execution; --------------------------. Structure for next step:; Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. O; H 1 r1; O 1 r2 2 a1; H 1 r1 3 a1 2 d1; S 1 r3 2 a1 4 d2. a1 = 51.3453210949; d1 = -180.0000000000; d2 = -0.0000000000; r1 = 0.9654406358; r2 = 3.1225673752; r3 = 4.6414652638. gradient() will perform analytic gradient computation. ... ==> Geometry <==. Molecular point group: cs; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 3:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -3.024634427518 15.994914619560; H 0.000000000000 -0.753936469287 -2.421595936667 1.007825032070; O 0.000000000000 0.000000000000 0.097932947678 15.994914619560; H 0.000000000000 0.753936469287 -2.421595936667 1.007825032070; S 0.000000000000 0.000000000000 1.616830836315 31.972070999000; ```. Even though the step clearly lowers my symmetry to the expected Cs, I get back to C2v symmetry in my subsequent computation. _NOTE: This geometry is optimized at CCSD(T), and the ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1126:1760,charge,charge,1760,https://psicode.org,https://github.com/psi4/psi4/issues/1126,1,['charge'],['charge']
Energy Efficiency,"y H line 16 file /home/toon/Downloads/jobs/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ C = ************ [MHz]; Nuclear repulsion = 0.000000000000000. Charge = 0; Multiplicity = 2; Electrons = 1; Nalpha = 1; Nbeta = 0. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: ANO-RCC; Blend: ANO-RCC; Number of shells: 14; Number of basis function: 46; Number of Cartesian functions: 46; Spherical Harmonics?: false; Max angular momentum: 3. Traceback (most recent call last):; File ""/home/toon/miniconda3/envs/p4dev/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 2045, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/toon/miniconda3/envs/p4dev/lib/psi4/driver/procrouting/proc.py"", line 1281, in scf_helper; scf_wfn = scf_wavefunction_factory(name, base_wfn, core.get_option('SCF', 'REFERENCE'), **kwargs); File ""/home/toon/miniconda3/envs/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807:3315,Energy,Energy,3315,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487675807,1,['Energy'],['Energy']
Energy Efficiency,"y Occupied:. 1Ag -25.833682 2Ag -1.076019 1B3u -0.180947; 1B2u -0.180947 1B1u -0.180947. Virtual:. 2B2u 0.442532 2B3u 0.442532 2B1u 0.442532; 3Ag 0.485648 4Ag 1.228480 1B3g 1.228480; 5Ag 1.228480 1B2g 1.228480 1B1g 1.228480; 3B3u 1.526002 3B2u 1.526002 3B1u 1.526002; 6Ag 2.051155 7Ag 3.283338 2B2g 3.283338; 2B3g 3.283338 2B1g 3.283338 8Ag 3.283338; 4B2u 3.331721 4B3u 3.331721 1Au 3.331721; 4B1u 3.331721 5B3u 3.331721 5B2u 3.331721; 5B1u 3.331721 6B2u 5.672254 6B1u 5.672254; 6B3u 5.672254 7B1u 9.267994 7B2u 9.267994; 7B3u 9.267994 8B1u 9.267994 8B3u 9.267994; 2Au 9.267994 8B2u 9.267994 9Ag 9.745165; 3B2g 9.745165 3B1g 9.745165 3B3g 9.745165; 10Ag 9.745165 11Ag 10.965644. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 2, 0, 0, 0, 0, 1, 1, 1 ]; ```. Energy converged. @RHF Final Energy: -99.45080702230226. => Energetics <=. ```; Nuclear Repulsion Energy = 0.0000000000000000; One-Electron Energy = -143.9965313656634294; Two-Electron Energy = 44.5457243433611438; DFT Exchange-Correlation Energy = 0.0000000000000000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -99.4508070223022855. Alert: EFP and PCM quantities not currently incorporated into SCF psivars.; ```. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr; ==> Properties <==. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Electronic Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Dipole Moment: (Debye); X: 0.0000 Y: 0.0000 Z: 0.0000 Total: 0.0000. Saving occupied orbitals to File 180. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 10.33 seconds = 0.17 minutes; system time = 0.28 seconds = 0.00 minutes; total time = 2 seconds = 0.03 minutes; Total time:; user time = 10.33 seconds = 0.17 minutes; system time ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:8032,Energy,Energy,8032,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Energy'],['Energy']
Energy Efficiency,"y an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com; > > wrote:; > > ; > > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > > That sounds ok to me (then reference just has to be defined properly).; > > ; > > What about DFT, do we define functional properly and do energy('dft'),; > > etc.?; > > ; > > David; > > ; > > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns <notifications@github.com; > > ; > > wrote:; > > ; > > > Fixed by 6f6d3aa; > > > <; > > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > > ; > > > though I rather think now that defining; > > > hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > > energy() was a bad idea (by me) a few years ago (except for ""hf""; > > > itself).; > > > Nevertheless, as this ticket points out, having defined these names; > > > only; > > > for energy() confounds the driver logic. These convenience names are; > > > now in; > > > place for gradient() and property().; > > > ; > > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > > prop() if others concur with my present assessment.; > > > ; > > > —; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:2832,energy,energy,2832,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['energy'],['energy']
Energy Efficiency,"y('hf', return_wfn=True, molecule=h2o). psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); ```. Error:; ```; QcdbException BasisSetNotFound: BasisSet::construct: Unable to find a basis set for atom 1 for key BASIS among:; Shell Entries: ['H']; Basis Sets: [('BASISSPEC_PSI4_MYBASIS', 'BASISSPEC_PSI4_MYBASIS', None)]; File Path: /home/jevandezande/tmp/psi4/basis, /home/jevandezande/tmp/psi4/basis, /home/jevandezande/progs/mamba/envs/peregrine/share/psi4/basis; Input Blocks:. Traceback (most recent call last):; File ""/home/jevandezande/tmp/psi4/basis/a.py"", line 18, in <module>; psi4.oeprop(wfn, ""MBIS_VOLUME_RATIOS""); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/util.py"", line 85, in oeprop; free_atom_volumes(wfn); File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/prop_util.py"", line 119, in free_atom_volumes; at_e, at_wfn = psi4.energy(method, return_wfn=True); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/driver.py"", line 525, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 2588, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/procrouting/proc.py"", line 1778, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/jevandezande/progs/mamba/envs/peregrine/lib/python3.11/site-packages/psi4/driver/p4util/python_helpers.py"", line 217, in _core_wavefunction_build; basis = core.BasisSet.build(",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3240:1500,energy,energy,1500,https://psicode.org,https://github.com/psi4/psi4/issues/3240,1,['energy'],['energy']
Energy Efficiency,"y, rather than through the GH interface, if that makes the git operations easier.; * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; ```; #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. DHF = -0.01189736 #TEST; Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; ""SAPT EXCH ENERGY"": 0.36545706, #TEST; ""SAPT IND ENERGY"": -0.00840483, #TEST; ""SAPT DISP ENERGY"": -0.24398704, #TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:1462,ENERGY,ENERGY,1462,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['ENERGY'],['ENERGY']
Energy Efficiency,"y-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3511,ENERGY,ENERGY,3511,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['ENERGY'],['ENERGY']
Energy Efficiency,y; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 43.84 sec; Start 33: cc18; 38/411 Test #28: cc13d ............................ Passed 259.61 sec; Start 34: cc19; 39/411 Test #24: cc13 ............................. Passed 319.22 sec; Start 35: cc2; 40/411 Test #33: cc18 ............................. Passed 55.96 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Passed 61.97 sec; Start 37: cc22; 42/411 Test #37: cc22 ............................. Passed 50.38 sec; Start 38: cc23; 43/411 Test #31: cc16 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:3169,energy,energy,3169,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['energy'],['energy']
Energy Efficiency,"yes I want to optimize this molecule, but even:; ```; set scf_type df; set BASIS def2-SV(P); energy('pbe'); ```; fail to converge.; with ""set basis_guess True"" it will converge energy (but not in optimization after 2-3 iterations); optimize('HF') converges fine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-432321135:93,energy,energy,93,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-432321135,2,['energy'],['energy']
Energy Efficiency,"you b/c rhf (the default) is unsuitable. I couldn’t say concretely, but some other programs will switch to an appropriate reference for open-shell. For psi4, it would have to be rhf/rks because we don’t have roks. This would be convenient at times, for instance, running databases of mixed closed/open shell. Propositions to be considered:. (i) Keeping reference in one place, that is, as a keyword. Consequences: retire rhf/uhf/rohf & rscf/uscf/roscf. (ii) If molecule is open-shell _and_ no reference has been specified, switch to uhf. This could be tricky b/c we’re not set up to do this driver-side. Also, there’d still be no way to use r/ro, as appropriate, in a series of molecules w/o explicitly setting reference. Lori. > On Jun 8, 2015, at 10:48 AM, David Sherrill notifications@github.com wrote:; > ; > Is the proposal to replace uhf/rhf/rohf -> hf for energy(), grad(), etc?; > That sounds ok to me (then reference just has to be defined properly).; > ; > What about DFT, do we define functional properly and do energy('dft'), etc.?; > ; > David; > ; > On Sun, Jun 7, 2015 at 11:04 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Fixed by 6f6d3aa; > > https://github.com/psi4/psi4public/commit/6f6d3aa1d039e4501bc5c5dc4190da1758e1c889; > > though I rather think now that defining hf/rhf/uhf/rohf/rsch/roscf/uscf for; > > energy() was a bad idea (by me) a few years ago (except for ""hf"" itself).; > > Nevertheless, as this ticket points out, having defined these names only; > > for energy() confounds the driver logic. These convenience names are now in; > > place for gradient() and property().; > > ; > > I'd be glad to rip out the lot (except for ""hf"") from energy(), grad(),; > > prop() if others concur with my present assessment.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/103#issuecomment-109846967.; > > ; > > —; > > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110183382:2084,energy,energy,2084,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110183382,1,['energy'],['energy']
Energy Efficiency,ystem); 25022.16 s (total). *** tstop() called on pn029.its.monash.edu.au at Thu Mar 13 03:02:13 2014; Module time:; user time = 4263649.92 seconds = 71060.83 minutes; system time = 6115066.90 seconds = 101917.78 minutes; total time = 484147 seconds = 8069.12 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 6115258.31 seconds = 101920.97 minutes; total time = 484647 seconds = 8077.45 minutes. *** tstart() called on pn029.its.monash.edu.au; *** at Thu Mar 13 03:19:32 2014. *******************************************************; * *; * CCSD(T) *; * *; *******************************************************. num_threads = 64; available memory = 43097.75 mb; memory requirements = 433739.41 mb. Number of ijk combinations: 50116. Computing (T) correction... % complete total time; 10.0 54071 s; 20.0 107105 s; 30.1 161098 s; 40.0 214685 s; 50.1 268763 s; 60.0 322003 s; 70.1 378258 s; 80.1 435809 s; 90.1 493509 s. (T) energy -0.198672700359. CCSD(T) correlation energy -4.167498886158; * CCSD(T) total energy -1133.028826149781. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:06 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946184.58 seconds = 549103.08 minutes; total time = 554554 seconds = 9242.57 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077777.68 seconds = 651296.29 minutes; total time = 1040240 seconds = 17337.33 minutes. *** tstop() called on pn029.its.monash.edu.au at Wed Mar 19 13:22:08 2014; Module time:; user time = 0.00 seconds = 0.00 minutes; system time = 32946186.58 seconds = 549103.11 minutes; total time = 554556 seconds = 9242.60 minutes; Total time:; user time = 4279640.89 seconds = 71327.35 minutes; system time = 39077779.68 seconds = 651296.33 minutes; total time = 1040242 seconds = 17337.37 minutes. *** PSI4 exiting successfully. Buy a developer a beer!; ```. ```; *******************************************************; * *; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/34#issuecomment-38020193:4605,energy,energy,4605,https://psicode.org,https://github.com/psi4/psi4/issues/34#issuecomment-38020193,1,['energy'],['energy']
Energy Efficiency,"ython/pythonrun.c:978; #44 0x7fa146e61206 in PyRun_SimpleFileExFlags Python/pythonrun.c:420; #45 0x7fa146e7d6fc in run_file Modules/main.c:340; #46 0x7fa146e7d6fc in Py_Main Modules/main.c:810; #47 0x400bbb in main Programs/python.c:69; #48 0x7fa145de8444 in __libc_start_main (/lib64/libc.so.6+0x22444); #49 0x400c7c (/shared/raimis/opt/miniconda/envs/psi4/bin/python3.6+0x400c7c). 0x6020004445d8 is located 0 bytes to the right of 8-byte region [0x6020004445d0,0x6020004445d8); allocated by thread T0 here:; #0 0x7fa1472af94e in operator new(unsigned long) /opt/conda/conda-bld/compilers_linux-64_1534514838838/work/.build/x86_64-conda_cos6-linux-gnu/src/gcc/libsanitizer/asan/asan_new_delete.cc:90; #1 0x7fa137a9a6f2 in __gnu_cxx::new_allocator<double>::allocate(unsigned long, void const*) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/ext/new_allocator.h:111; #2 0x7fa137a90c98 in std::allocator_traits<std::allocator<double> >::allocate(std::allocator<double>&, unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/alloc_traits.h:436; #3 0x7fa137a88909 in std::_Vector_base<double, std::allocator<double> >::_M_allocate(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:172; #4 0x7fa1392ce272 in std::vector<double, std::allocator<double> >::_M_default_append(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/vector.tcc:571; #5 0x7fa1392cda2a in std::vector<double, std::allocator<double> >::resize(unsigned long) /shared/raimis/opt/miniconda/envs/psi4/x86_64-conda_cos6-linux-gnu/include/c++/7.3.0/bits/stl_vector.h:692; #6 0x7fa139345669 in psi::detci::CIWavefunction::get_parameters(psi::Options&) /home/raimis/psi4.git/psi4/src/psi4/detci/params.cc:598; #7 0x7fa139291d0d in psi::detci::CIWavefunction::common_init() /home/raimis/psi4.git/psi4/src/psi4/detci/ciwave.cc:79; #8",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218:6885,allocate,allocate,6885,https://psicode.org,https://github.com/psi4/psi4/pull/1441#issuecomment-449451218,1,['allocate'],['allocate']
Energy Efficiency,ywrap-molecule; 373/411 Test #401: json-schema-1-orient ............. Passed 2.44 sec; Start 408: skeletonmointegrals; 374/411 Test #403: json-schema-1-gradient ........... Passed 2.11 sec; Start 410: skeletonsointegrals; 375/411 Test #330: scf-bs ........................... Passed 1.83 sec; Start 387: python-energy; 376/411 Test #378: mints12 .......................... Passed 1.28 sec; Start 354: tu2-ch2-energy; 377/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:36068,energy,energy,36068,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['energy'],['energy']
Energy Efficiency,zc-sp; 2/411 Test #3: casscf-fzc-sp .................... Passed 4.05 sec; Start 4: casscf-semi; 3/411 Test #4: casscf-semi ...................... Passed 2.83 sec; Start 5: casscf-sa-sp; 4/411 Test #5: casscf-sa-sp ..................... Passed 16.78 sec; Start 6: ao-casscf-sp; 5/411 Test #2: adc2 ............................. Passed 66.82 sec; Start 7: casscf-sp; 6/411 Test #6: ao-casscf-sp ..................... Passed 9.16 sec; Start 8: castup1; 7/411 Test #8: castup1 .......................... Passed 2.71 sec; Start 9: castup2; 8/411 Test #7: casscf-sp ........................ Passed 13.94 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 T,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:1562,energy,energy,1562,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,2,['energy'],['energy']
Energy Efficiency,"zkaya, A. Yu. Sokolov,; R. Di Remigio, R. M. Richard, J. F. Gonthier, A. M. James,; H. R. McAlexander, A. Kumar, M. Saitow, X. Wang, B. P. Pritchard,; P. Verma, H. F. Schaefer III, K. Patkowski, R. A. King, E. F. Valeev,; F. A. Evangelista, J. M. Turney, T. D. Crawford, and C. D. Sherrill,; J. Chem. Theory Comput. 13(7) pp 3185--3197 (2017).; (doi: 10.1021/acs.jctc.7b00174). Additional Contributions by; P. Kraus, H. Kruse, M. H. Lechner, M. C. Schieber, R. A. Shaw,; A. Alenaizan, R. Galvelis, Z. L. Glick, S. Lehtola, and J. P. Misiewicz. -----------------------------------------------------------------------. Psi4 started on: Monday, 29 April 2019 11:26AM. Process ID: 25534; Host: psinet; PSIDATADIR: /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4; Memory: 500.0 MiB; Threads: 1; ; ==> Input File <==. --------------------------------------------------------------------------; molecule {; H; }. set {; scf_type pk; basis ano-rcc; relativistic x2c; reference uhf; }. energy('hf'). --------------------------------------------------------------------------. *** tstart() called on psinet; *** at Mon Apr 29 11:26:26 2019. => Loading Basis Set <=. Name: ANO-RCC; Role: ORBITAL; Keyword: BASIS; atoms 1 entry H line 17 file /home/psilocaluser/gits/hrw-quaternary/objdir37/stage/share/psi4/basis/ano-rcc.gbs . ---------------------------------------------------------; SCF; by Justin Turney, Rob Parrish, Andy Simmonett; and Daniel G. A. Smith; UHF Reference; 1 Threads, 500 MiB Core; ---------------------------------------------------------. ==> Geometry <==. Molecular point group: d2h; Geometry (in Angstrom), charge = 0, multiplicity = 2:. Center X Y Z Mass ; ------------ ----------------- ----------------- ----------------- -----------------; H 0.000000000000 0.000000000000 0.000000000000 1.007825032230. Running in d2h symmetry. Rotational constants: A = ************ B = ************ C = ************ [cm^-1]; Rotational constants: A = ************ B = ************ ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168:1908,energy,energy,1908,https://psicode.org,https://github.com/psi4/psi4/issues/1613#issuecomment-487627168,1,['energy'],['energy']
Energy Efficiency,"{; 1 1; noreorient; nocom; symmetry c1; C 0.000000 0.000000 -0.170000; C 0.007000 1.210000 0.523000; C 0.000000 1.205000 1.904000; C 0.000000 0.000000 2.592000; C 0.000000 -1.205000 1.904000; C -0.007000 -1.210000 0.523000; C 0.000000 0.000000 -1.643000; H -0.019000 2.146000 -0.006000; H -0.011000 2.134000 2.442000; H 0.000000 0.000000 3.666000; H 0.011000 -2.134000 2.442000; H 0.019000 -2.146000 -0.006000; N -0.741000 -0.864000 -2.296000; N 0.741000 0.864000 -2.296000; H 0.721000 0.947000 -3.291000; H 1.404000 1.427000 -1.808000; H -1.404000 -1.427000 -1.808000; H -0.721000 -0.947000 -3.291000; }. set optking { dynamic_level = 1; geom_maxiter = 250; print_trajectory_xyz_file = True }. set { scf_type direct }; energy, wfn = optimize('SCF', dft_functional='wB97X-D', dertype='gradient', return_wfn=True). import os; os.chdir(os.environ['HTMD_PSI4_WORKDIR']). oeprop(wfn, 'DIPOLE', 'QUADRUPOLE', 'MULLIKEN_CHARGES'). with open('psi4out.xyz', 'w') as f:; f.write('18 ' ); f.write('%.12f\n' % energy); f.write(MOL.save_string_xyz()); ```. This errors with:. ```; Traceback (most recent call last):; File ""/home/damasj02/software/psi4dev/bin/psi4"", line 260, in <module>; exec(content); File ""<string>"", line 55, in <module>; File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 1054, in optimize; G, wfn = gradient(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/driver.py"", line 606, in gradient; wfn = procedures['gradient'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 2051, in run_scf_gradient; ref_wfn = run_scf(name, **kwargs); File ""/home/damasj02/software/psi4dev/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py"", line 1989, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/home/damasj02/software/ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948:3186,energy,energy,3186,https://psicode.org,https://github.com/psi4/psi4/issues/948,1,['energy'],['energy']
Energy Efficiency,"…on the external point charges of the ExternalPotential. ## Description; Provides a way to get the gradient of the potential between a Wavefunction object and an ExternalPotential object on the external point charges. These gradients are collected and stored in a protected SharedMatrix object of the ExternalPotnetial during the ExternalPotential.computePotentialGradients() routine, and they are accessible through a ExternalPotential.gradient() method which is bound to a corresponding method in the Python API. ## User API & Changelog headlines; - [ ] Given a Wavefunction object with an ExternalPotential for which a gradient call has been made, the corresponding gradient on the embedded point charges represented by the ExternalPotential can be retrieved by calling gradient() on the ExternalField. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:23,charge,charges,23,https://psicode.org,https://github.com/psi4/psi4/pull/3087,3,['charge'],['charges']
Integrability,"	 Coordinate Previous Force Change New ; 	 ---------- -------- ------ ------ ------; 	 1 R(1,2) = 2.124830 0.072797 0.020582 2.145412; 	 2 R(1,3) = 2.128962 0.068599 0.020146 2.149109; 	 3 R(1,4) = 2.024461 0.069553 17.524433 19.548895; 	 4 R(1,5) = 2.028397 0.066233 17.556204 19.584601; 	 5 R(1,6) = 2.024305 0.070720 17.517231 19.541535; 	 6 L(2,1,3) = 179.431194 0.000053 -1.744105 177.687089; 	 7 l(2,1,3) = 180.000000 -0.000770 0.000000 180.000000; 	 8 B(2,1,4) = 90.533252 -0.000595 -1.113535 89.419717; 	 9 B(2,1,5) = 89.845687 -0.000107 -1.005547 88.840140; 	 10 B(2,1,6) = 89.819597 0.000658 1.944389 91.763985; 	 11 B(3,1,4) = 89.828837 -0.000257 2.088415 91.917251; 	 12 B(3,1,5) = 89.592600 -0.000007 -0.737452 88.855147; 	 13 B(3,1,6) = 90.389033 0.000309 -1.148076 89.240958; 	 14 B(4,1,5) = 120.478052 -0.000026 0.003564 120.481615; 	 15 B(4,1,6) = 118.946205 0.000056 0.000429 118.946634; 	 16 B(5,1,6) = 120.575361 -0.000030 -0.003611 120.571750; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007F4BEF0B510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F4C029A7FB0 Unknown Unknown Unknown; libc-2.27.so 00007F4C0260DEAB gsignal Unknown Unknown; libc-2.27.so 00007F4C025F85B9 abort Unknown Unknown; core.cpython-36m- 00007F4BF2B2E25A Unknown Unknown Unknown; core.cpython-36m- 00007F4BF15542FD Unknown Unknown Unknown; core.cpython-36m- 00007F4BF1570541 Unknown Unknown Unknown; core.cpython-36m- 00007F4BF0FFE806 Unknown Unknown Unknown; python3.6 0000556FBA8799E4 _PyCFunction_Fast Unknown Unknown; python3.6 0000556FBA906DFC Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA900206 Unknown Unknown Unknown; python3.6 0000556FBA9011CF Unknown Unknown Unknown; python3.6 0000556FBA906ED5 Unknown Unknown Unknown; python3.6 0000556FBA92B94A _PyEval_EvalFrame Unknown Unknown; python3.6 0000556FBA901CB9 PyEval_EvalCodeEx Unknown Unknown; python3.6 0000556FBA902A4C PyEval_Eval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265:3717,Rout,Routine,3717,https://psicode.org,https://github.com/psi4/psi4/issues/1265,1,['Rout'],['Routine']
Integrability,"	 Electrons = 10; Nalpha = 5											 Nalpha = 5; Nbeta = 5											 Nbeta = 5. ==> Algorithm <==											 ==> Algorithm <==. SCF Algorithm Type is DIRECT.										 SCF Algorithm Type is DIRECT.; DIIS enabled.												 DIIS enabled.; MOM disabled.												 MOM disabled.; Fractional occupation disabled.									 Fractional occupation disabled.; Guess Type is CORE.											 Guess Type is CORE.; Energy threshold = 1.00e-06										 Energy threshold = 1.00e-06; Density threshold = 1.00e-05										 Density threshold = 1.00e-05; Integral threshold = 1.00e-12										 Integral threshold = 1.00e-12. ==> Primary Basis <==											 ==> Primary Basis <==. -AO BASIS SET INFORMATION:									 |	 Basis Set: CC-PVDZ; Name = CC-PVDZ								 |	 Blend: CC-PVDZ; Blend = CC-PVDZ								 |	 Number of shells: 6; Total number of shells = 6									 |	 Number of basis function: 14; Number of primitives = 22									 |	 Number of Cartesian functions: 15; Number of AO = 15									 |	 Spherical Harmonics?: true; Number of SO = 14									 |	 Max angular momentum: 2; Maximum AM = 2									 <; Spherical Harmonics = TRUE								 <; 												 <; -Contraction Scheme:										 <; Atom Type All Primitives // Shells:							 <; ------ ------ --------------------------							 <; 1 NE 17s 4p 1d // 3s 2p 1d 							 <. ==> DFT Potential <==											 ==> DFT Potential <==. => Composite Functional: FT97 <= 									 => Composite Functional: FT97 <= . FT97 GGA Exchange-Correlation Functional								 FT97 GGA Exchange-Correlation Functional. M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997					 M. Filatov and W. Theil, Int. J. Quant. Chem., 62, 603-616, 1997. Deriv = 1								 Deriv = 1; GGA = TRUE								 GGA = TRUE; Meta = FALSE								 Meta = FALSE. Exchange Hybrid = FALSE								 Exchange Hybrid = FALSE; MP2 Hybrid = FALSE								 MP2 Hybrid = FALSE. => Exchange Functionals <=										 => Exchange Functionals <=. 1.0000 XC_GGA_X_FT97_B										 1.0000 XC_GGA_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124:3835,Contract,Contraction,3835,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755088124,1,['Contract'],['Contraction']
Integrability," ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True); Nmol1 = mol.fragments[0][1] - mol.fragments[0][0] + 1; Nmol2 = mol.fragments[1][1] - mol.fragments[1][0] + ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2164,rout,route,2164,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,6,['rout'],['route']
Integrability," (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" hav",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:1590,contract,contraction,1590,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,1,['contract'],['contraction']
Integrability," (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of the file is a docstring outlining the procedure. all the wrappers have a mix of class and free functions for historical reasons. this can certainly be refactored once rebasing isn't an issue.; * `driver_cbs.py` — big modifications, mostly additions, but changes are mostly moving code around and renaming big dicts (`need` isn't too informative) and trying to narrow the points of data transfer. again, there's an outline at the top of the file.; * `driver_nbody.py` — big modifications, might be net deletion of code lines. Lots of renaming of variables. Some bugs fixed -- I can only hope more than were added. Docstrings and code outline should be current. I didn't rework multilevel (separate file) except to make gradient run and allow different order of keys in user `levels` kwarg. I wouldn't bother with the diff. . ## Todos. - [x] `msgpack-python` ad",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:1818,wrap,wrappers,1818,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability, .............. Passed 1.93 sec; Start 299: pubchem2; 377/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.52 sec; Start 388: python-energy; 378/412 Test #221: mints-helper ..................... Passed 1.67 sec; Start 399: json-v11-gradient; 379/412 Test #223: mints10 .......................... Passed 2.18 sec; Start 335: scf3; 380/412 Test #396: python-mints13 ................... Passed 1.96 sec; Start 212: mcscf3; 381/412 Test #363: x2c3 ............................. Passed 3.02 sec; Start 379: mints12; 382/412 Test #354: tu1-h2o-energy ................... Passed 1.83 sec; Start 310: pywrap-molecule; 383/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 210: mcscf1; 384/412 Test #397: python-memdfjk ................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 sec; Start 209: matrix1; 391/412 Test #212: mcscf3 ........................... Passed 0.75 sec; Start 216: mints4; 392/412 Test #210: mcscf1 ........................... Passed 0.78 sec; Start 176: docs-dft; 393/412 Test #399: json-v11-gradient ................ Passed 1.25 sec; Start 365: options1; 394/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.35 sec; Start 410: skeletonscf; 395/412 Test #240: numpy-array-interface ............ Passed 0.80 sec; Start 403: json-schema-1-throws; 396/412 Test #213: mints1 ........................... Passed 0.80 sec; Start 88: cepa1; 397/412 Test #383: psi4numpy-rhf .................... Passed 0.92 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:36420,interface,interface,36420,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['interface'],['interface']
Integrability, ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed 35.89 sec; Start 83: cc9a; 91/412 Test #83: cc9a ............................. Passed 11.86 sec; Start 35: cc19; 92/412 Test #300: pywrap-alias ..................... Passed 25.28 sec; Start 168: dft-b3lyp; 93/412 Test #293: psimrcc-fd-freq2 ................. Passed 74.88 sec; Start 58: cc40; 94/412 Test #44: cc28 ............................. Passed 49.91 sec; Start 69: cc50; 95/412 Test #35: cc19 ............................. Passed 27.20 sec; Start 390: python-pubchem; 96/412 Test #62: cc44 ............................. Passed 60.62 sec; Start 157: dfomp2p5-grad2; 97/412 Test #58: cc40 ............................. Passed 26.97 sec; Start 65: cc47; 98/412 Test #69: cc50 ............................. Passed 27.76 sec; Start 81: cc8c; 99/412 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:8327,wrap,wrapper,8327,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['wrap'],['wrapper']
Integrability," / Python module (to C++/Py folks,; > respectively) rather than an executable (bin/psi4 is light script; > loading Python module);; > - is not necessarily at the top of the call stack, and we've heard; > from projects who would like to import us;; > - is benefiting from the non-attaching and permissive licenses of; > numerous external projects to supplement Psi4's capabilities, and we want; > to return the favor,; >; > *we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by; > the the 1.1 release.*; >; > The current and historical core developers have signed off on this. The; > historical peripheral developers are discussing this without any initial; > objections. We now want to get feedback from the GitHub contributor, user,; > and packaging community (or anyone not in e-mail communication with the; > core developers). So please reply with any concerns, constraints,; > preferences, etc.; > Dependencies licensing situation; >; > - required library dependencies (current & anticipated): PSFL,; > LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause; > - optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+,; > LGPL-3.0+; > - optional executable dependencies: GPL-1.0+, Custom; > - Psi4 plugins: GPL-2.0+, GPL-3.0+; > - conda-wise, we'll build an alternate conda package that doesn't link; > any GPL libraries or plugins; >; > Queries; >; > - Psi4 is a Python module and hence a dynamic library. I don't know; > right off how to even build a psi4.a. With that in mind, does anyone; > care about license terms for static linking?; > - Any concrete problems that would be solved by a permissive license; > instead of LGPL?; > - Anyone care about sublicensing?; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/688>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKTzQibbJu74P4aFX0tDqiJmeP_plo2Aks5r0SAMgaJpZM4NK33f>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297864305:1267,depend,dependencies,1267,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297864305,2,['depend'],['dependencies']
Integrability," 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,79 INFO [psi4.driver.driver:606] Return energy(): -76.0266327350908; 2022-03-28:21:06:47,83 INFO [psi4.driver.driver:748] Compute gradient(): method=scf, basis=cc-pvdz, molecule=h2o, nre=9.168193296424349; 2022-03-28:21:06:47,86 DEBUG [psi4.driver.driver:749] {'elbl': array(['', '', ''], dtype='<U1'),; 'elea': array([16, 1, 1]),; 'elem': array(['O', 'H', 'H'], dtype='<U1'),; 'elez': array([8, 1, 1]),; 'fix_com': False,; 'fix_orientation': False,; 'fragment_charges': [0.0],; 'fragment_multiplicities': [1],; 'fragment_separators': [],; 'geom': array([ 0. , 0. , -0.06577557, 0. , -0.75906199,; 0.52195302, 0. , 0.75906199, 0.52195302]),; 'mass': array([15.99491462, 1.00782503, 1.00782503]),; 'molecular_charge': 0.0,; 'molecular_multiplicity': 1,; 'name': 'h2o',; 'provenance': {'creator': 'QCElemental', 'routine': 'qcelemental.molparse.from_string', 'version': 'v0.24.0'},; 'real': array([ True, True, True]),; 'units': 'Angstrom'}; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:751] Return gradient(): -76.02663273512434; 2022-03-28:21:06:47,455 INFO [psi4.driver.driver:752] [[-0. 0. -0.01764163]; [ 0. -0.01243841 0.00882081]; [-0. 0.01243841 0.00882081]]; ```. ## Questions; - [x] What should default loglevel be? Py default is WARN=30. That presently will produce an empty log file since psi4 starts with INFO=20. Present setup is 20 for psithon and 30 for psiapi. ANSWER: going with 20. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2512:2688,rout,routine,2688,https://psicode.org,https://github.com/psi4/psi4/pull/2512,1,['rout'],['routine']
Integrability, 1.70 sec; Start 229: mp2-grad2; 234/411 Test #229: mp2-grad2 ........................ Passed 1.52 sec; Start 230: mp2-module; 235/411 Test #230: mp2-module ....................... Passed 35.44 sec; Start 231: mp2p5-grad1; 236/411 Test #231: mp2p5-grad1 ...................... Passed 1.74 sec; Start 232: mp2p5-grad2; 237/411 Test #232: mp2p5-grad2 ...................... Passed 1.67 sec; Start 233: mp3-grad1; 238/411 Test #233: mp3-grad1 ........................ Passed 1.32 sec; Start 234: mp3-grad2; 239/411 Test #234: mp3-grad2 ........................ Passed 1.68 sec; Start 235: mp2-property; 240/411 Test #235: mp2-property ..................... Passed 2.64 sec; Start 236: mpn-bh; 241/411 Test #236: mpn-bh ........................... Passed 3.24 sec; Start 237: nbody-he-cluster; 242/411 Test #237: nbody-he-cluster ................. Passed 25.57 sec; Start 238: nbody-intermediates; 243/411 Test #238: nbody-intermediates .............. Passed 12.03 sec; Start 239: numpy-array-interface; 244/411 Test #239: numpy-array-interface ............ Passed 0.76 sec; Start 240: ocepa-freq1; 245/411 Test #240: ocepa-freq1 ...................... Passed 51.87 sec; Start 241: ocepa-grad1; 246/411 Test #241: ocepa-grad1 ...................... Passed 2.45 sec; Start 242: ocepa-grad2; 247/411 Test #242: ocepa-grad2 ...................... Passed 11.50 sec; Start 243: ocepa1; 248/411 Test #243: ocepa1 ........................... Passed 1.88 sec; Start 244: ocepa2; 249/411 Test #244: ocepa2 ........................... Passed 14.81 sec; Start 245: ocepa3; 250/411 Test #245: ocepa3 ........................... Passed 9.93 sec; Start 246: omp2-1; 251/411 Test #246: omp2-1 ........................... Passed 1.42 sec; Start 247: omp2-2; 252/411 Test #247: omp2-2 ........................... Passed 4.76 sec; Start 248: omp2-3; 253/411 Test #248: omp2-3 ........................... Passed 4.44 sec; Start 249: omp2-4; 254/411 Test #249: omp2-4 ........................... Passed 10.24 sec; Start 250:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972:22266,interface,interface,22266,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-407449972,2,['interface'],['interface']
Integrability, 1.97 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.77 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 13.08 sec; Start 231: mp2p5-grad1; 229/411 Test #204: frac-ip-fitting .................. Passed 69.51 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 5.92 sec; Start 233: mp3-grad1; 231/411 Test #232: mp2p5-grad2 ...................... Passed 7.49 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 4.93 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 5.54 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.45 sec; Start 237: nbody-he-cluster; 235/411 Test #219: mints-benchmark .................. Passed 40.91 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 4.44 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.72 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 26.47 sec; Start 241: ocepa-grad1; 239/411 Test #155: dft-grad-lr3 ..................... Passed 418.11 sec; Start 242: ocepa-grad2; 240/411 Test #241: ocepa-grad1 ...................... Passed 22.49 sec; Start 243: ocepa1; 241/411 Test #237: nbody-he-cluster ................. Passed 59.84 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 10.32 sec; Start 245: ocepa3; 243/411 Test #110: dcft4 ............................ Passed 1172.39 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 6.44 sec; Start 247: omp2-2; 245/411 Test #230: mp2-module ....................... Passed 128.44 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 50.93 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 15.51 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:21906,interface,interface,21906,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,2,['interface'],['interface']
Integrability, 14.25 sec; Start 229: mp2-grad2; 227/411 Test #228: mp2-grad1 ........................ Passed 3.99 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 5.05 sec; Start 231: mp2p5-grad1; 229/411 Test #226: mp2-1 ............................ Passed 13.12 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 3.94 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 38.09 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 8.25 sec; Start 235: mp2-property; 233/411 Test #232: mp2p5-grad2 ...................... Passed 9.49 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 4.03 sec; Start 237: nbody-he-cluster; 235/411 Test #234: mp3-grad2 ........................ Passed 6.75 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 5.96 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.77 sec; Start 240: ocepa-freq1; 238/411 Test #162: dft-grad-lr3 ..................... Passed 422.17 sec; Start 241: ocepa-grad1; 239/411 Test #238: nbody-intermediates .............. Passed 22.37 sec; Start 242: ocepa-grad2; 240/411 Test #241: ocepa-grad1 ...................... Passed 18.01 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 9.79 sec; Start 244: ocepa2; 242/411 Test #237: nbody-he-cluster ................. Passed 60.60 sec; Start 245: ocepa3; 243/411 Test #230: mp2-module ....................... Passed 107.78 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 5.36 sec; Start 247: omp2-2; 245/411 Test #242: ocepa-grad2 ...................... Passed 92.28 sec; Start 248: omp2-3; 246/411 Test #245: ocepa3 ........................... Passed 60.90 sec; Start 249: omp2-4; 247/411 Test #247: omp2-2 ........................... Passed 26.70 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:21887,interface,interface,21887,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,2,['interface'],['interface']
Integrability, 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c ............................ Passed 57.54 sec; Start 33: cc17; 30/412 Test #114: dcft7 ............................ Passed 366.03 sec; Start 34: cc18; 31/412 Test #34: cc18 ............................. Passed 33.35 sec; Start 35: cc19; 32/412 Test #317: sapt2 ............................ Passed 402.38 sec; Start 36: cc2; 33/412 Test #33: cc17 ............................. Passed 40.14 sec; Start 37: cc21; 34/412 Test #31: cc15 ............................. Passed 90.60 sec; Start 38: cc22; 35/412 Test #35: cc19 ............................. Passed 58.84 sec; Start 39: cc23; 36/412 Test #38: cc22 ............................. ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2684,wrap,wrapper,2684,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['wrap'],['wrapper']
Integrability," 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command failed with exit code 1 (use -v to see invocation); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1256,interface,interfaces,1256,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,3,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability, 20/401 Test #223: mp2-def2 ......................... Passed 82.85 sec; Start 28: cc13d; 21/401 Test #42: cc27 ............................. Passed 392.24 sec; Start 44: cc29; 22/401 Test #75: cc7 .............................. Passed 394.89 sec; Start 47: cc31; 23/401 Test #275: opt14 ............................ Passed 76.63 sec; Start 368: dft-custom-mgga; 24/401 Test #174: fsapt1 ........................... Passed 424.29 sec; Start 19: cbs-xtpl-wrapper; 25/401 Test #276: opt-irc-1 ........................ Passed 89.12 sec; Start 316: sapt6; 26/401 Test #17: cbs-xtpl-opt ..................... Passed 104.19 sec; Start 114: dcft9; 27/401 Test #40: cc25 ............................. Passed 450.80 sec; Start 179: isapt2; 28/401 Test #36: cc21 ............................. Passed 451.45 sec; Start 69: cc52; 29/401 Test #96: cisd-opt-fd ...................... Passed 87.68 sec; Start 74: cc6; 30/401 Test #368: dft-custom-mgga .................. Passed 62.73 sec; Start 200: frac-ip-fitting; 31/401 Test #19: cbs-xtpl-wrapper ................. Passed 62.39 sec; Start 166: dft1-alt; 32/401 Test #90: cepa-module ...................... Passed 125.09 sec; Start 343: sapt-dft2; 33/401 Test #236: ocepa-freq1 ...................... Passed 489.86 sec; Start 58: cc41; 34/401 Test #179: isapt2 ........................... Passed 46.85 sec; Start 366: dft-custom-dhdf; 35/401 Test #316: sapt6 ............................ Passed 72.26 sec; Start 11: cbs-delta-energy; 36/401 Test #25: cc13a ............................ Passed 519.27 sec; Start 27: cc13c; 37/401 Test #47: cc31 ............................. Passed 131.54 sec; Start 61: cc44; 38/401 Test #74: cc6 .............................. Passed 78.78 sec; Start 12: cbs-parser; 39/401 Test #200: frac-ip-fitting .................. Passed 56.76 sec; Start 255: omp3-3; 40/401 Test #343: sapt-dft2 ........................ Passed 53.47 sec; Start 60: cc43; 41/401 Test #166: dft1-alt ......................... Passed 54.05 sec; Start 163: dft-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:3585,wrap,wrapper,3585,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['wrap'],['wrapper']
Integrability, 23.57 sec; Start 379: mints12; 371/412 Test #407: skeletonaointegrals .............. Passed 22.71 sec; Start 405: json-schema-1-properties; 372/412 Test #299: pubchem2 ......................... Passed 22.82 sec; Start 335: scf3; 373/412 Test #331: scf-bs ........................... Passed 22.57 sec; Start 388: python-energy; 374/412 Test #223: mints10 .......................... Passed 22.74 sec; Start 310: pywrap-molecule; 375/412 Test #354: tu1-h2o-energy ................... Passed 23.10 sec; Start 383: psi4numpy-rhf; 376/412 Test #103: decontract ....................... Passed 23.29 sec; Start 210: mcscf1; 377/412 Test #411: skeletonsointegrals .............. Passed 22.95 sec; Start 410: skeletonscf; 378/412 Test #381: psi4numpy-cphf ................... Passed 23.03 sec; Start 212: mcscf3; 379/412 Test #355: tu2-ch2-energy ................... Passed 23.46 sec; Start 217: mints5; 380/412 Test #221: mints-helper ..................... Passed 24.04 sec; Start 240: numpy-array-interface; 381/412 Test #401: json-schema-1-ghost .............. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy .................... Passed 23.44 sec; Start 399: json-v11-gradient; 390/412 Test #383: psi4numpy-rhf .................... Passed 23.40 sec; Start 4: casscf-semi; 391/412 Test #210: mcscf1 ......................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:35981,interface,interface,35981,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['interface'],['interface']
Integrability, 3.01 sec; Start 229: mp2-grad2; 227/411 Test #229: mp2-grad2 ........................ Passed 6.82 sec; Start 230: mp2-module; 228/411 Test #226: mp2-1 ............................ Passed 12.93 sec; Start 231: mp2p5-grad1; 229/411 Test #231: mp2p5-grad1 ...................... Passed 3.93 sec; Start 232: mp2p5-grad2; 230/411 Test #232: mp2p5-grad2 ...................... Passed 9.01 sec; Start 233: mp3-grad1; 231/411 Test #219: mints-benchmark .................. Passed 40.23 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 3.90 sec; Start 235: mp2-property; 233/411 Test #234: mp3-grad2 ........................ Passed 4.13 sec; Start 236: mpn-bh; 234/411 Test #235: mp2-property ..................... Passed 3.19 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.34 sec; Start 238: nbody-intermediates; 236/411 Test #236: mpn-bh ........................... Passed 4.83 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.70 sec; Start 240: ocepa-freq1; 238/411 Test #238: nbody-intermediates .............. Passed 21.93 sec; Start 241: ocepa-grad1; 239/411 Test #241: ocepa-grad1 ...................... Passed 14.34 sec; Start 242: ocepa-grad2; 240/411 Test #237: nbody-he-cluster ................. Passed 55.34 sec; Start 243: ocepa1; 241/411 Test #243: ocepa1 ........................... Passed 11.48 sec; Start 244: ocepa2; 242/411 Test #230: mp2-module ....................... Passed 96.52 sec; Start 245: ocepa3; 243/411 Test #162: dft-grad-lr3 ..................... Passed 434.63 sec; Start 246: omp2-1; 244/411 Test #110: dcft4 ............................ Passed 1010.33 sec; Start 247: omp2-2; 245/411 Test #246: omp2-1 ........................... Passed 11.08 sec; Start 248: omp2-3; 246/411 Test #247: omp2-2 ........................... Passed 30.77 sec; Start 249: omp2-4; 247/411 Test #248: omp2-3 ........................... Passed 40.15 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:21890,interface,interface,21890,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,2,['interface'],['interface']
Integrability," = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:`util.success`; when value *computed* matches value *expected*.; Performs a system exit on failure. Used in input files in the test suite.; ; """"""; if (expected != computed):; message = (""\t%s: computed value (%d) does not match (%d)."" % (label, computed, expected)); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	Success: computed value (0) does not match (1). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/p4util/util.py:244: TestComparisonError; -------------------------------------------------------------- Captured stdout call --------------------------------------------------------------; 	Options test......................................................PASSED; ____________________________________________________________________ test_dkh ____________________________________________________________________. @using_dkh; def test_dkh():; """"""dkh/molpro-2order""""""; ; Ne = psi4.geometry(""""""; 0 1; Ne; """"""); ; psi4.set_options({; 'reference': 'rhf',; 'basis': 'cc-pvtz-dk',; 'relativistic': 'dkh',; 'dkh_order': 2,; 'print': 2,; 'scf_type': 'pk'}); ; > e = psi4.energy('scf'). /home/joao/miniconda3/lib/python3.6/site-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:17760,message,message,17760,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['message'],['message']
Integrability," > > ; > > energy(‘scf’); > > ; > > # (b) for unrestricted HF; > > ; > > set reference uhf; > > energy(‘scf’); > > ; > > # (c) for B3LYP; > > ; > > set dft_functional b3lyp; > > set reference rks; > > energy(‘scf’); > > ; > > # (d) also for B3LYP; > > ; > > energy(‘b3lyp’); > > ; > > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > > ; > > set dft_functional b3lyp; > > energy(‘scf'); > > ; > > # (e) for unrestricted B3LYP; > > ; > > set dft_functional b3lyp; > > set reference uks; > > energy(‘scf’); > > ; > > # (f) also for unrestricted B3LYP; > > ; > > set reference uks; > > energy(‘b3lyp’); > > ; > > # (g) also for unrestricted B3LYP (since energy command trumps options,; > > ; > > uhf gets translated to uks); > > set reference uhf; > > energy(‘b3lyp’); > > ; > > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > > reference into the energy() call for HF or DFT (though for the latter you’d; > > have to use dft_functional keyword.; > > ; > > Francesco brings up a related and overdue point. If you specify an; > > open-shell molecule and no reference, it complains at you b/c rhf (the; > > default) is unsuitable. I couldn’t say concretely, but some other programs; > > will switch to an appropriate reference for open-shell. For psi4, it would; > > have to be rhf/rks because we don’t have roks. This would be convenient at; > > times, for instance, running databases of mixed closed/open shell.; > > ; > > Propositions to be considered:; > > ; > > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > > retire rhf/uhf/rohf & rscf/uscf/roscf; > > ; > > (ii) If molecule is open-shell _and_ no reference has been specified,; > > switch to uhf. This could be tricky b/c we’re not set up to do this; > > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > > a series of molecules w/o explicitly setting refer",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110199772:2937,wrap,wrap,2937,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110199772,1,['wrap'],['wrap']
Integrability," DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); - Improve printing and guess for r_e for the `diatomic` procedure (#1601); - Response code cleaned to use Hessian-vector products (#1550); - Enable running pytest in parallel via `psi4 --test -n<N>` if package `pytest-xdist` installed (#1612); - Considerable code-cleanup at LGTM's prompting (#1618, #1633, #1631, #1616, #1617, #1624, #1620, #1622, #1627, #1639, #1630, #1629, #1636, #1632, #1626, #1619, #1625, #1623, #1634, #1650, #1651, #1621, #1655); - Considerable memory-leak cleanup at CPPCHECK's prompting (#1534) and a bit more at valgrind's prompting (#1755); - moved code to QCA; - molecule alignment code (#1644); - `QCAspect` refined into `qcel.Datum` (#1654); - use code from QCA; - testing functions dropped in favor of wrapping qcelemental testing functions. also, can choose between conventional Psi4 testing API and QCA API (#1644); - Windows testing and build (#1648); - Add CSAM screening to ERISieve as alternative to Schwarz. Turn on with `set screening csam` (#1499); - New Bragg-Slater (BS) radii change DFT total energies slightly (#1591); - Extend `SAD_SCF_TYPE` to all usual `SCF_TYPE` types by using exact or DF integrals under the hood (#1477).; - Implement quadrature weights cutoff at 1.e-15, which together with pruning makes DFT on C_60 40% faster (#1581); - Compute multipole potential integrals to arbitrary order, replacing code for EFP that was fixed at octupole (#1657); - Allow external potentials in FISAPT (#1608); - Speed up electric field integrals (25x) (#1671); - Implement SAD natural orbitals guess (#1672); - Analytic Hessians for LSDA functionals (#1664); - Add qc2p basis set from CFOUR (#1718); - Update to g2g v2 API (#1718); - Density cumulant functional theory (",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:5644,wrap,wrapping,5644,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['wrap'],['wrapping']
Integrability," I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think htt",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:927,depend,dependencies,927,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,1,['depend'],['dependencies']
Integrability," New Methods ; ----------- ; ; - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT (#1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) ; ; New External Libraries ; ---------------------- ; ; - ADC from ADCC callable from Psi (#1744, #1827, #1848, #1892, #1914) ; - Enables use of GeomeTRIC optimizer in Psi (#1813) ; - Interoperability via Molssi Driver (#1676, #1929, #2163) ; - Psi4fockci (#1855) ; - CCT3 (#1934) ; - Interface to i-pi (#1057) ; - BrianQC GPU module (#1893) ; - Upgrade to Libint2 (#1721) ; - Update RESP and PSIXAS (#2065) ; - Move to LibXC5 (#1101, #2113, #2169, #2191) ; ; Performace Optimizations ; ------------------------ ; ; - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) ; ; Developer Interests ; ------------------- ; ; - Remove obsolete functions in Wavefunction (#1766) ; - Psi is safe for Python 38 (#1776) ; - Extensive improvements to OCC (#1783,#1785,#1789, #1809, #1829, #1846) ; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:616,rout,routines,616,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,4,"['Interface', 'Interoperab', 'interface', 'rout']","['Interface', 'Interoperability', 'interface', 'routines']"
Integrability," Setting option MAX_AM_ERI: 6; -- Setting (unspecified) option CMAKE_BUILD_TYPE: Release; -- Setting (unspecified) option FC_SYMBOL: 2; -- Setting (unspecified) option BUILD_FPIC: ON; -- Setting (unspecified) option CMAKE_INSTALL_LIBDIR: lib; -- Setting (unspecified) option PYMOD_INSTALL_LIBDIR: /; -- Setting (unspecified) option ENABLE_GENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4010,wrap,wrapper,4010,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,2,['wrap'],['wrapper']
Integrability," So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tensor, so I would not do that. But one can export important amplitudes, which is a mapping from a pair / quadruple of integers to a real value.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1597,wrap,wrapping,1597,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,2,"['integrat', 'wrap']","['integrate', 'wrapping']"
Integrability, Test #10: castup3 .......................... Passed 9.55 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 15.41 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 9.22 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 34.00 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 27.35 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #278: opt13 ............................ Passed 937.76 sec; Start 20: cc1; 26/411 Test #11: cbs-delta-energy ................. Passed 87.39 sec; Start 21: cc10; 27/411 Test #20: cc1 .............................. Passed 39.26 sec; Start 22: cc11; 28/411 Test #21: cc10 ............................. Passed 16.76 sec; Start 23: cc12; 29/411 Test #316: sapt2 ............................ Passed 390.55 sec; Start 24: cc13; 30/411 Test #17: cbs-xtpl-opt ..................... Passed 79.98 sec; Start 26: cc13b; 31/411 Test #19: cbs-xtpl-wrapper ................. Passed 69.43 sec; Start 27: cc13c; 32/411 Test #23: cc12 ............................. Passed 22.65 sec; Start 28: cc13d; 33/411 Test #22: cc11 ............................. Passed 25.63 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 186.38 sec; Start 30: cc15; 35/411 Test #26: cc13b ............................ Passed 73.68 sec; Start 31: cc16; 36/411 Test #27: cc13c ............................ Passed 79.10 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 34.47 sec; Start 33: cc18; 38/411 Test #30: cc15 ............................. Passed 84.08 sec; Start 34: cc19; 39/411 Test #33: cc18 ............................. Passed 55.39 sec; Start 35: cc2; 40/411 Test #28: cc13d ............................ Passed 214.79 sec; Start 36: cc21; 41/411 Test #34: cc19 ............................. Passed 72.97 sec; Start 37: cc22; 42/411 Test #24: cc13 ............................. Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219:3076,wrap,wrapper,3076,https://psicode.org,https://github.com/psi4/psi4/pull/1091#issuecomment-409148219,1,['wrap'],['wrapper']
Integrability, Test #60: cc43 ............................. Passed 117.60 sec; Start 115: dcft9; 64/411 Test #319: sapt5 ............................ Passed 77.33 sec; Start 74: cc5a; 65/411 Test #292: psimrcc-fd-freq2 ................. Passed 82.52 sec; Start 167: dft-b3lyp; 66/411 Test #280: opt-irc-1 ........................ Passed 116.92 sec; Start 204: frac-ip-fitting; 67/411 Test #91: cepa-module ...................... Passed 178.98 sec; Start 61: cc44; 68/411 Test #167: dft-b3lyp ........................ Passed 65.78 sec; Start 46: cc30; 69/411 Test #74: cc5a ............................. Passed 101.58 sec; Start 17: cbs-xtpl-opt; 70/411 Test #302: pywrap-cbs1 ...................... Passed 201.06 sec; Start 43: cc28; 71/411 Test #115: dcft9 ............................ Passed 163.68 sec; Start 104: dcft-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 73.44 sec; Start 230: mp2-module; 73/411 Test #61: cc44 ............................. Passed 90.14 sec; Start 19: cbs-xtpl-wrapper; 74/411 Test #46: cc30 ............................. Passed 123.09 sec; Start 159: dft-grad-meta; 75/411 Test #43: cc28 ............................. Passed 112.18 sec; Start 57: cc40; 76/411 Test #17: cbs-xtpl-opt ..................... Passed 138.99 sec; Start 297: pubchem1; 77/411 Test #19: cbs-xtpl-wrapper ................. Passed 90.48 sec; Start 389: python-pubchem; 78/411 Test #159: dft-grad-meta .................... Passed 52.62 sec; Start 100: ci-property; 79/411 Test #230: mp2-module ....................... Passed 122.41 sec; Start 65: cc48; 80/411 Test #18: cbs-xtpl-func .................... Passed 2286.51 sec; Start 2: adc2; 81/411 Test #297: pubchem1 ......................... Passed 56.65 sec; Start 11: cbs-delta-energy; 82/411 Test #104: dcft-grad2 ....................... Passed 167.43 sec; Start 59: cc42; 83/411 Test #389: python-pubchem ................... Passed 54.35 sec; Start 259: omp3-3; 84/411 Test #100: ci-property ...................... Passed 59.03 sec; Sta,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:7030,wrap,wrapper,7030,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['wrap'],['wrapper']
Integrability," The choice of which of these two options to use is largely a matter of preference as internally the class does the same thing. It's also worth mentioning that there no longer is any reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated wit",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:2963,wrap,wrapper,2963,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['wrap'],['wrapper']
Integrability," TypeError('Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):\n File ""/opt/conda/bin/psi4"", line 213, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/pyth",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1150,adapter,adapters,1150,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapters']
Integrability," [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order SCF convergence to DFT Wavefunctions.; - [x] Adds the gradient regularized asymptotic correction (GRAC) to DFT through the option `DFT_GRAC_SHIFT`.; - [x] Adds a density-fitted second-order Electron Propagator code. ; - [x] Adds the density-fitted SAPT(DFT) code.; - [x] Adds linear response DFT.; - [ ] Adds TDDFT methodologies.; - [x] To avoid conflict the function `property` was renamed to `properties`.; - [x] More involved JSON input/output interface.; - [x] Effective Core Potentials available for SCF energies and gradients, as well as post-SCF energies.; - [x] Def2 family of basis sets available for all atoms supported by those basis sets. * **Bug Fixes**; - [x] wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did *not* effect wB97X-D.; - [x] Memory limitations are better adhered to for very large MCSCF computations. * **TODO**; - [ ] Run `sed` commands from https://github.com/psi4/psi4/pull/690; - [x] Pull in ECPs #681 ; - [ ] Rebase in current master to resolve conflicts; - [x] Closes #39 ; - [x] Closes #40 ; - [ ] New Hessian/Frequency analysis code.; - [ ] Fill out remaining DFT documentations; - [ ] Polish new DF JK/Transformer technology; - [ ] Triple check UKS GGA Hessian-vector code; - [ ] Finished DFT Hessian functionality (skeleton terms); - [ ] Rebase in License/1.1 changes; - [ ] Rebase in ECP changes (#681); - [ ] Re-examine VV10 default grid size; - [ ] Imp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:2449,interface,interface,2449,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['interface'],['interface']
Integrability," _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; dftd3_driver(jobrec); except Exception as err:; jobrec['success'] = False; jobrec['error'] += repr(err); > raise RuntimeError(err) from err; E RuntimeError: Unsuccessful run. Possibly -D variant not available in dftd3 version. ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:135: RuntimeError; ------------------------------------------------- Captured stdout call -------------------------------------------------",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:19805,rout,routine,19805,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability," `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2012,wrap,wrapper,2012,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability, ```; The following tests FAILED:; 	 12 - cbs-xtpl-freq (Failed); 	 13 - cbs-xtpl-gradient (Failed); 	 14 - cbs-xtpl-opt (Failed); 	 16 - cbs-xtpl-wrapper (Failed); 	 17 - cc1 (Failed); 	 21 - cc13 (Failed); 	 22 - cc13a (Failed); 	 23 - cc14 (Failed); 	 30 - cc21 (Failed); 	 32 - cc23 (Failed); 	 33 - cc24 (Failed); 	 34 - cc25 (Failed); 	 35 - cc26 (Failed); 	 36 - cc27 (Failed); 	 39 - cc3 (Failed); 	 78 - cepa0-grad1 (Failed); 	 79 - cepa0-grad2 (Failed); 	 95 - dcft-grad1 (Failed); 	 96 - dcft-grad2 (Failed); 	 97 - dcft-grad3 (Failed); 	 98 - dcft-grad4 (Failed); 	103 - dcft5 (Failed); 	114 - dfccd-grad1 (Failed); 	117 - dfccsd-grad1 (Failed); 	122 - dfmp2-3 (Failed); 	124 - dfmp2-grad1 (Failed); 	125 - dfmp2-grad2 (Failed); 	126 - dfmp2-grad3 (Failed); 	127 - dfmp2-grad4 (Failed); 	132 - dfomp2-grad1 (Failed); 	133 - dfomp2-grad2 (Failed); 	136 - dfomp3-grad1 (Failed); 	137 - dfomp3-grad2 (Failed); 	140 - dfomp2p5-grad1 (Failed); 	141 - dfomp2p5-grad2 (Failed); 	146 - dft-freq (Failed); 	147 - dft-grad (Failed); 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	157 - extern1 (Failed); 	165 - fd-freq-energy-large (Failed); 	166 - fd-freq-gradient (Failed); 	167 - fd-freq-gradient-large (Failed); 	168 - fd-gradient (Failed); 	169 - freq-isotope (Failed); 	171 - fnocc2 (Failed); 	176 - gibbs (Failed); 	192 - mp2-1 (Failed); 	194 - mp2-grad1 (Failed); 	195 - mp2-grad2 (Failed); 	196 - mp2-module (Failed); 	197 - mp2_5-grad1 (Failed); 	198 - mp2_5-grad2 (Failed); 	199 - mp3-grad1 (Failed); 	200 - mp3-grad2 (Failed); 	206 - ocepa-grad1 (Failed); 	207 - ocepa-grad2 (Failed); 	216 - omp2-grad1 (Failed); 	217 - omp2-grad2 (Failed); 	220 - omp2_5-grad1 (Failed); 	221 - omp2_5-grad2 (Failed),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605#issuecomment-277397753:411,wrap,wrapper,411,https://psicode.org,https://github.com/psi4/psi4/pull/605#issuecomment-277397753,1,['wrap'],['wrapper']
Integrability," `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` approach of including back-transforming the 3-Center density intermediate in the main loop. In that case, the calling code doesn't even need to back-transform the density. If this change works, we can eliminate some code duplication in `dfmp2`, for an added bonus. In this case, all `dfocc` would need to do is stash intermediates it already computes in a place where my code can find them and then delete its back-transformation code. **Q:** What's this about adding a new block algorithm?; **A:** For large systems, you may not be able to assume that the three-center intermediate (naux*nmo^2) fits in memory. To remedy this, `dfmp2` uses a block algorithm, where it reads only ""blocks"" of this intermediate at a time. The old DF gradient code was based on Rob's `dfmp2` but in simplifying from Rob's code, had a block algorithm that used unnecessarily many blocks and incurred no memory s",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:1861,interface,interface,1861,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['interface'],['interface']
Integrability," a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-LinK algorithm using GPUs. Construction of the GauXC interface is specified at compile-time, using the `ENABLE_gauxc` flag. Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC install specified by `gauxc_DIR`. If `ENABLE_gauxc` is turned off, the `snLinK` class will instead throw an exception upon construction. For GPU support, there is the `gauxc_ENABLE_GPU` keyword, which ensures that the Psi4/GauXC interface supports GPU execution. For testing, `test_compositejk.py` and `test_comprehensive_jk_screening.py` both now include sn-LinK tests, conditional on the sn-LinK interface being built. Finally, a `gauxc_writer.py` file has been added, enabling construction of HDF5 reference files via the Psi4/GauXC interface, to be used in GauXC's `standalone_driver` for debugging purposes. The `test_gauxc_writer.py` file has been added to test this writer against reference HDF5 files. . ## User API & Changelog headlines; - [X] Psi4 has been interfaced to the GauXC standalone library, specifically the sn-LinK exact exchange algorithm present within GauXC. Construction of the interface is specified at compile-time with the compile-time flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:2745,interface,interface,2745,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability," after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart needed or not ([this stuff](https://github.com/psi4/psi4/pull/2767/commits/108b6bb1a53cdc428933475dea991e08a3330d98#diff-48947c7a095c933d6843e0564043f051b0e54dff111fff222bf25cd968f6f9daR1769-R1780)); - [x] Any idea on the segfault when rebasing against master?. ## Checklist; - [x] Find and fix segfaults when using psi4 master; - [x] Remove debug restriction to one thread in numerical integrals; - [x] Documentation; - [x] Bring forward more options to change numerical grid details for DDX solvation models; - [x] ~~Merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:1523,integrat,integration,1523,https://psicode.org,https://github.com/psi4/psi4/pull/2767,1,['integrat'],['integration']
Integrability," and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). Hence we really should be using these headers and not the stuff in `libqt` (or we should rewrite `libqt` in terms of those header files). One of the other gotchas of BLAS/LAPACK is detecting the actual libraries. The names are non-standardized and the CMake find_package for them is archaic. For the moment I am using the scripts the old build used to find BLAS/LAPACK. They are somewhat touchy, and overly verbose for my liking, but better than me having to write my own. ~~To my knowledge they don't worry about the Mac Accelerate framework so this is again an issue.~~ @jturney and @dgasmith have both independently confirmed that enabling accelerate is not necessary, because the BLAS and LAPACK the math detection finds on Mac are actually (static links to?) the libraries behind the accelerate framework.; ## Minor Points Not Worth a Paragraph; - exception.h has been moved into libpsi4util to be with its source file; - process.h has been moved into libparallel to be with its source file; - `src/bin/psi4` is now `src/bin/psi4_main` to avoid name conflicts; - `src/bin/efp` is now `src/bin/efp_interface` to avoid name conflicts; - Most ConfigX files are gone. From what I can tell, these files are what should be in the CMakeLists.txt wrapping project X. That's where they now reside. ; - Some options are now gone; - ENABLE_MPI Psi4 proper contains no MPI now, if external projects want to include it that's fine; - ENABLE_OMP I never understood this one, just make it not required; - ~~ENABLE_ACCELERATE FindLAPACK knows about accelerate, if you want to use it ensure it is in your `CMAKE_PREFIX_PATH` variable~~; - Accomplishes #355",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:11462,wrap,wrapping,11462,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['wrap'],['wrapping']
Integrability," and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deallocates it.; - [x] Replace `sq_rsp(...)` calls in the `libqt` Davidson solver with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in the RHF and ROHF stability checks with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `libsapt_solver/sapt2.cc` with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `psi4/src/psi4/adc/diagonalize.cc` with new wrapper. Add check for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `dfoccwave::Tensor2d::diagonalize` with new wrapper. Add check for diagonalization failure.; - [x] Remove vestiges of the diagonalization cutoff from `dfocc`. `dfoccwave::Tensor2d::diagonalize` used to take a ""diagonalization cutoff"" argument, which was passed down to `sq_rsp(...)`. This used to be hardcoded to 1E-10, but went completely defunct when `sq_rsp(...)` started using DSYEV internally (~forever ago), as LAPACK offers no such parameter to adjust and always diagonalizes down to ~machine precision. ### New sanity checks; - [x] Add a sanity check for non-square matrices in `mcscf::MatrixBase::diagonalize`; - [x] Add a sanity check for non-square matrices in `dfoccwave::Tensor2d::diagonalize`; - [x] Add a sanity checks for non-square matrices and illegal values of ""di",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:2967,wrap,wrapper,2967,https://psicode.org,https://github.com/psi4/psi4/pull/2642,1,['wrap'],['wrapper']
Integrability," and an executable. This is simply done by packaging Psi4 up into a giant .so that we then link psi4.cc against. Because I am liable to forget here is an example of using Psi4 from python now, assuming `${CMAKE_INSTALL_PREFIX}/psi4/lib/psi4.so` is in your `PYTHONPATH`:. ``` .py; from psi4 import *; initialize(); #This has to come after initialize or else the global variables aren't right; import driver; set_global_option('BASIS', 'CC-PVDZ'); xyzstring = """"""; units angstrom; O 0.0000000000 0.0000000000 -0.0711762954; H 0.0000000000 -0.8916195680 0.5648097613; H 0.0000000000 0.8916195680 0.5648097613; """"""; efp_init(); my_mol = Molecule.create_molecule_from_string(xyzstring); my_mol.update_geometry(); driver.energy('scf',molecule=my_mol); ```. It would be nice to consolidate this somewhat, but I'll leave that for later. The segfault discussed on the forums is still present with this.; ## Fortran Name Mangling. This is a perpetual problem. The previous CMake build relied on the Fortran/C interface capabilities of CMake to generate a header. This seemed to work well, but as I understand it, it assumes that the Fortran compiler CMake is currently using is the one that compiled all Fortran libraries. Consequentially this does _NOT_ necessarily provide you with the correct mangling for externally compiled Fortran libraries. For Fortran libraries that we may are building, like ERD, DKH, etc. the name mangling should go through the CMake mangling detection mechanisms and the resulting header file included with the library. This allows other projects to link to these libraries without having to know the mangling scheme.; ## BLAS and LAPACK. Somewhat related to the previous point, Psi4 proper needs to know the mangling for LAPACK and BLAS. All distributions of BLAS have a header `cblas.h` (or `mkl-cblas.h` if you are using MKL), which does this for you. Similarly, all versions of LAPACK provide `lapacke.h` (again MKL makes things difficult and calls the header `mkl-lapacke.h`). ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:9216,interface,interface,9216,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['interface'],['interface']
Integrability," appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read. It also means I may have not added some functionality back. In particular there were many complicated scripts for setting compile flags. At least on my box these scripts did not find all the optimizations to begin with (didn't turn on many of the Intel optimizations). They also didn't respect some of the CMake variables. The scripts themselves are designed to be quite terse by factoring out redundant code, although admittedly the `ExternalProject_Add` commands are still repetitive. Also note I heavily use empty targets and variables to avoid lots of if/else statements.; ## Added an External Folder. The top-level Psi4 directory is primarily split into a directory, `psi4`, where the source for the core of Psi4 lives and a folder `external` where optional modules and dependencies live. The general strategy for determining where something goes is if you personally didn't write the code, or it is intended to be used with many other packages, it probably falls under the category of going in the external folder. Each package in `external` should be designed in such a manner so that it doesn't leak dependencies into the core. For example if the package returns its results in a class `MyGreatMatrix` the wrapper code that copies it to a Psi4 `Matrix` should live in external. This prevents Psi4 proper from having to know about `MyGreatMatrix`. ; ## Libraries that are not part of Psi4 core are now in external. Although allowed by the more permissive licenses, it is somewhat dubious to mix external libraries in with ones own source code. Separating them makes it clear to others that these are not our codes, but used with (implicit) permission. It also keeps the core free of the exter",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:3467,depend,dependencies,3467,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['depend'],['dependencies']
Integrability," calculation crashes, with the following output at the end of the log file (I have attached the full log file to the issue.):; ```; Wfn Parameters:; --------------------; Wavefunction = CCSD_T; Number of irreps = 1; Number of MOs = 275; Number of active MOs = 275; AO-Basis = NONE; Semicanonical = false; Reference = RHF; Print Level = 1. IRREP # MOs # FZDC # DOCC # SOCC # VIRT # FZVR; ----- ----- ------ ------ ------ ------ ------; A 275 0 9 0 266 0; Transforming integrals...; IWL integrals will be deleted.; (OO|OO)...; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Constructing frozen core operators; Row and column block dimensions of A; (n = 1): 275 ; (n = 1): 275 ; Row and column block dimensions of B; (n = 1): 276 ; (n = 1): 275 ; Row and column block dimensions of C; (n = 1): 275 ; (n = 1): 275 ; Asym: 0, Bsym: 0, Csym: 0; Mismatch in index Ha = 0; ```. Additionally, the following error message is given:; ```; Traceback (most recent call last):; File ""/oasis/tscc/scratch/ebullvul/projects/POPC/timings/debug/psi4test/psi4_ccsdt.py"", line 28, in <module>; e = psi4.energy(model, molecule=mol); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/driver.py"", line 526, in energy wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 989, in select_ccsd_t_ return func(name, **kwargs); File ""/home/ebullvul/anaconda3/envs/psi4/lib/python3.10/site-packages/psi4/driver/procrouting/proc.py"", line 2898, in run_ccenergy core.cctransort(ref_wfn); RuntimeError: ; Fatal Error: Matrix::gemm error: Number of rows and columns do not match.; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1670993662927/work/psi4/src/psi4/libmints/matrix.cc on line: 1389The most recent 5 function calls were:. psi::Matrix::gemm(bool, bool, double, psi::Matrix const*, psi::Mat",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2916:1888,message,message,1888,https://psicode.org,https://github.com/psi4/psi4/issues/2916,1,['message'],['message']
Integrability," first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lot in the tests as a qcengine wrapper around psi4 molecules. because dftd3 and s-dftd3 handle defaulting so differently, I can't easily make the fn call either/or. I'm tempted to (a) drop the capability or (b) have a run_sdftd3 that is a thin wrapper like run_dftd4 but won't be a drop-in replacement or (c) deprecate run_dftd3/run_dftd4/run_gcp in favor of a run_dispersion that hooks up to the psi EmpiricalDispersion class and _can_ provide a uniform interface (same logic for disp level hints, tweaked parameters, etc. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). For development, I've had two objdirs with two conda envs, one with psi4 disp packages and one with c-f disp packages, and run tests on each. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:4347,wrap,wrapper,4347,https://psicode.org,https://github.com/psi4/psi4/pull/2791,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability," flag `ENABLE_gauxc`, and GPU support is specified with the `gauxc_ENABLE_GPU` compile-time flag. Once installed, `SCF_TYPE=J_ALGO+SNLINK` can be used to call GauXC within Psi4. A large number of keywords have been added for controlling the behavior of `SNLINK`. For controlling the GauXC grid, `SNLINK_RADIAL_POINTS`, `SNLINK_SPHERICAL_POINTS`, and `SNLINK_RADIAL_SCHEME` control the GauXC radial point count, spherical point count, and radial quadrature, respectively. `SNLINK_USE_GPU` controls GPU execution of GauXC. Finally, `SNLINK_INTS_TOLERANCE` controls the integral screening threshold used by GauXC's sn-LinK algorithm. ## Dev notes & details; - [X] Adds a new new Psi4 compile-time option, `ENABLE_gauxc`. When set to `ON`, `ENABLE_gauxc` will build Psi4 with support for GauXC. The Psi4 build system has been adjusted so that Psi4 can either build an internal instance of GauXC, or hook up to an external GauXC instance defined by `gauxc_DIR`. The `gauxc_ENABLE_GPU` keyword builds the Psi4/GauXC interface to support GPU execution. Additionally, for internally-build GauXC instances, setting `gauxc_ENABLE_GPU` to `ON` will build the internal GauXC install with GPU support. For external GauXC installs, `gauxc_ENABLE_GPU` will ensure that the external GauXC install supports GPU execution. ; - [X] Adds a new `SplitJK` derived class, `snLinK`. When Psi4 is built with GauXC support, `snLinK` contains the implementation of the details of the Psi4/GauXC interface, and is responsible for calling GauXC within Psi4. When Psi4 is not built with GauXC support, snLinK will instead throw an exception upon construction, as implemented in a stub class. The `snLinK` class supports both CPU and GPU execution of GauXC, controllable at runtime via the `SNLINK_USE_GPU` keyword. Additionally, the `snLinK` class operates correctly regardless of the value of `psi4_SHGAUSS_ORDERING`, as well as for both Spherical and Cartesian basis sets. ; - [X] Updates the `test_compositejk.py` and `test_comp",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:4182,interface,interface,4182,https://psicode.org,https://github.com/psi4/psi4/pull/3150,1,['interface'],['interface']
Integrability," fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individu",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:1986,wrap,wrapper,1986,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['wrap'],['wrapper']
Integrability, frac-ip-fitting .................. Passed 68.08 sec; Start 100: ci-property; 65/411 Test #29: cc14 ............................. Passed 343.83 sec; Start 74: cc5a; 66/411 Test #278: opt13 ............................ Passed 797.72 sec; Start 19: cbs-xtpl-wrapper; 67/411 Test #359: tu6-cp-ne2 ....................... Passed 350.78 sec; Start 107: dcft1; 68/411 Test #292: psimrcc-fd-freq2 ................. Passed 76.46 sec; Start 159: dft-grad-meta; 69/411 Test #69: cc51 ............................. Passed 82.00 sec; Start 58: cc41; 70/411 Test #75: cc6 .............................. Passed 84.41 sec; Start 379: cc-module; 71/411 Test #242: ocepa-grad2 ...................... Passed 79.99 sec; Start 91: cepa-module; 72/411 Test #100: ci-property ...................... Passed 63.75 sec; Start 61: cc44; 73/411 Test #159: dft-grad-meta .................... Passed 50.20 sec; Start 297: pubchem1; 74/411 Test #20: cc1 .............................. Passed 93.10 sec; Start 389: python-pubchem; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 92.53 sec; Start 60: cc43; 76/411 Test #74: cc5a ............................. Passed 103.50 sec; Start 200: fnocc2; 77/411 Test #17: cbs-xtpl-opt ..................... Passed 122.34 sec; Start 170: dft1-alt; 78/411 Test #107: dcft1 ............................ Passed 106.25 sec; Start 259: omp3-3; 79/411 Test #297: pubchem1 ......................... Passed 56.59 sec; Start 66: cc49; 80/411 Test #389: python-pubchem ................... Passed 58.95 sec; Start 307: pywrap-db1; 81/411 Test #61: cc44 ............................. Passed 92.56 sec; Start 131: dfmp2-3; 82/411 Test #58: cc41 ............................. Passed 142.32 sec; Start 219: mints-benchmark; 83/411 Test #170: dft1-alt ......................... Passed 52.99 sec; Start 348: sapt-compare; 84/411 Test #200: fnocc2 ........................... Passed 65.84 sec; Start 2: adc2; 85/411 Test #307: pywrap-db1 ....................... Passed 45.25 sec; Start 115: dcft9; ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:7328,wrap,wrapper,7328,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['wrap'],['wrapper']
Integrability, from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:1493,interface,interfaces,1493,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,1,['interface'],['interfaces']
Integrability," gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues a `clean()` btwn calcs. Plain string modelchem calcs like `energy('hf/cc-pvdz')` were getting caught and also being cleaned, meaning their behavior was slightly different than `set basis cc-pvdz \n energy('hf')`. This is no longer happening, so for occasional string modelchem calcs, you may need to add a clean in the input.; - extern object units are bohr, not whatever the Molecule was.; - `psi4 --module` returns the path for loading via `import psi4`. opposite of `psi4.executable`; - `psi4.set_output_file` now wraps `psi4.core.set_output_file` and additionally sets up a truncating python logging file with `.log` extension at the same time as the `.out` file.; - Besides the input.dat/output.dat exception, default output naming simplified to always `.out` of input file name. If input has out or log extension (weird), extra extension added.; - Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - A Logging file has been introduced. All its contents should be considered experimental and subject to change. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:2518,wrap,wraps,2518,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['wrap'],['wraps']
Integrability," here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:1119,message,message,1119,https://psicode.org,https://github.com/psi4/psi4/pull/2997,5,['message'],"['message', 'messages']"
Integrability," i<nirrep_; ++i) {; rowspi_[i] = cp->rowspi_[i];; colspi_[i] = cp->colspi_[i];; }; alloc();; }; ```. …; }. From looking at your code the matrix Ca does not use symmetry,. ```; SharedMatrix Ca = SharedMatrix(new Matrix(""Alpha MO Coefficients"", nso_, nmo_));; ```. but the one you request from the environment does because the calculation uses symmetry:. SharedMatrix moA = Process::environment.wavefunction()->Ca();. This is only speculative, but it could be easily tested. Maybe we should reconsider restricting Matrix::copy so that we eliminate the option to make copies between objects that do not have the same dimension. After all, if we are going to reallocate the memory we might as well just create a copy of the matrix with clone(). Francesco. On Jul 16, 2015, at 5:24 PM, Ugur Bozkaya <notifications@github.com<mailto:notifications@github.com>> wrote:. I am also very surprised how the saving MOs procedure yields wrong gradients. I do not read back the MOs from wfn during gradients. That code in the save_mo_to_wfn() function, which is on the line 328 of manager.cchttp://manager.cc. If I call save_mo_to_wfn() before gradients, then gradient code gives the wrong answer. Anyone can confirm me. It is really quite odd. Jet wrote that he will take a look it. Not sure whether he has the time or not. @jturneyhttps://github.com/jturney. —; Reply to this email directly or view it on GitHubhttps://github.com/psi4/psi4public/issues/127#issuecomment-122103421. ---. This e-mail message (including any attachments) is for the sole use of; the intended recipient(s) and may contain confidential and privileged; information. If the reader of this message is not the intended; recipient, you are hereby notified that any dissemination, distribution; or copying of this message (including any attachments) is strictly; prohibited. If you have received this message in error, please contact; the sender by reply e-mail message and destroy all copies of the; original message (including attachments).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/127#issuecomment-122116756:2067,message,message,2067,https://psicode.org,https://github.com/psi4/psi4/issues/127#issuecomment-122116756,6,['message'],['message']
Integrability," in Wfn. Then `driver.frequency()`; - extracts the frequencies from Wfn; - passes Wfn and Wfn.frequencies into thermo. Then `psi4.thermo()`; - extracts Molecule and E0 from Wfn; - uses those and frequencies to do the thermodynamic analysis. Key lines from driver below (note order of execution). ```; 1 frequency(name):; 2 H, wfn = hessian(name, return_wfn=True, molecule=molecule, **kwargs) # send away for hessian; 7 psi4.thermo(wfn, wfn.frequencies()) # pass frequencies into thermo analysis. 3 hessian(name): ; 4 H = psi4.fd_freq_1(molecule, gradients, irrep) # stores freq in global psi4.frequencies(), returns H; 5 wfn.set_hessian(H) # store H in fresh wfn; 6 wfn.set_frequencies(psi4.get_frequencies()) # store freq in fresh wfn; ```. So there are three stages: ""assemble H"", ""vibrational analysis"", & ""thermo analysis"". Keeping in mind that the nmw Hessian is isotope-independent while freqs are isotope-dependent, you'll notice that the present arrangement of groups (1, 2) and (3) with frequencies as intermediate are such that can't reuse H for vibrational analysis of different isotopes (though it does allow for reuse of freq for thermo analysis at diff T, P).; ### Future. assemble H; - this is doing just fine c-side in `psi4.fd_freq_0/1`; - should focus on returning nmw Hessian (as currently) does and trim out the vibrational analysis part; - @psi-rking, I don't remember seeing any projection of rot/trans out of Hessian. Is this just because by using SALCs you're assured of only displacements in vib-active directions? Assuming we someday get an analytic Hessian mtd, projection would be needed, right? I'm inclined to group projection with the vib analysis for comparison of proj and unproj freqs, so psi4.fd module needn't be involved.; - [ ] signature `SharedMatrix fd_freq_1(boost::shared_ptr<Molecule> mol, Options &options, const boost::python::list& grad_list, int freq_irrep_only)` (just like at present); - [ ] remove communication with globals (`Process`); - [ ] return",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/347:1498,depend,dependent,1498,https://psicode.org,https://github.com/psi4/psi4/issues/347,1,['depend'],['dependent']
Integrability," iter 9: -535.96873745368225 -5.38996e-02 3.40988e-04 DIIS; @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; @DF-RHF iter 15: -535.97367316705004 -2.38416e-07 5.52742e-07 DIIS; @DF-RHF iter 16: -535.97367321567344 -4.86234e-08 2.27016e-07 DIIS; @DF-RHF iter 17: -535.97367322279683 -7.12339e-09 4.03379e-08 DIIS; @DF-RHF iter 18: -535.97367322291711 -1.20281e-10 1.51493e-08 DIIS; @DF-RHF iter 19: -535.97367322293508 -1.79625e-11 3.82698e-09 DIIS; @DF-RHF iter 20: -535.97367322293599 -9.09495e-13 1.05449e-09 DIIS; @DF-RHF iter 21: -535.97367322293462 1.36424e-12 2.43431e-10 DIIS; @DF-RHF iter 22: -535.97367322293553 -9.09495e-13 9.68772e-11 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 238922952 non-zero two-electron integrals.; Stored in file 33.; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 3576; Schwarz Cutoff: 1E-12; ```. @RHF iter 23: -535.97469002803746 -1.01681e-03 4.55914e-06 DIIS; @RHF iter 24: -535.97469062826895 -6.00231e-07 9.20453e-07 DIIS; @RHF iter 25: -535.97469065540940 -2.71405e-08 3.52409e-07 DIIS; @RHF iter 26: -535.97469065965606 -4.24666e-09 6.17974e-08 DIIS; @RHF iter 27: -535.97469065985069 -1.94632e-10 2.04842e-08 DIIS; @RHF iter 28: -535.9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:8552,Wrap,Wrapper,8552,https://psicode.org,https://github.com/psi4/psi4/issues/61,1,['Wrap'],['Wrapper']
Integrability," iter 9: -535.96873759197706 -5.38997e-02 3.40983e-04 DIIS; @DF-RHF iter 10: -535.97325006729534 -4.51248e-03 1.04940e-04 DIIS; @DF-RHF iter 11: -535.97364955471517 -3.99487e-04 1.97794e-05 DIIS; @DF-RHF iter 12: -535.97366979229014 -2.02376e-05 5.39642e-06 DIIS; @DF-RHF iter 13: -535.97367245741657 -2.66513e-06 2.45749e-06 DIIS; @DF-RHF iter 14: -535.97367296799007 -5.10573e-07 1.28273e-06 DIIS; @DF-RHF iter 15: -535.97367316735676 -1.99367e-07 5.79818e-07 DIIS; @DF-RHF iter 16: -535.97367321444040 -4.70836e-08 2.30170e-07 DIIS; @DF-RHF iter 17: -535.97367322170135 -7.26095e-09 4.11055e-08 DIIS; @DF-RHF iter 18: -535.97367322182868 -1.27329e-10 1.54464e-08 DIIS; @DF-RHF iter 19: -535.97367322184778 -1.90994e-11 3.80847e-09 DIIS; @DF-RHF iter 20: -535.97367322185005 -2.27374e-12 1.03188e-09 DIIS; @DF-RHF iter 21: -535.97367322185050 -4.54747e-13 2.30705e-10 DIIS; @DF-RHF iter 22: -535.97367322184755 2.95586e-12 9.09269e-11 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 238922952 non-zero two-electron integrals.; Stored in file 33.; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 3576; Schwarz Cutoff: 1E-12; ```. @RHF iter 23: -535.97469002803700 -1.01681e-03 4.55914e-06 DIIS; @RHF iter 24: -535.97469062826895 -6.00232e-07 9.20453e-07 DIIS; @RHF iter 25: -535.97469065540758 -2.71386e-08 3.52409e-07 DIIS; @RHF iter 26: -535.97469065965811 -4.25052e-09 6.17975e-08 DIIS; @RHF iter 27: -535.97469065984956 -1.91449e-10 2.04843e-08 DIIS; @RHF iter 28: -535.9",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/62:7179,Wrap,Wrapper,7179,https://psicode.org,https://github.com/psi4/psi4/issues/62,1,['Wrap'],['Wrapper']
Integrability, json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 sec; 398/412 Test #240: numpy-array-interface ............ Passed 1.01 sec; 399/412 Test #217: mints5 ........................... Passed 1.36 sec; 400/412 Test #383: psi4numpy-rhf .................... Passed 1.21 sec; 401/412 Test #213: mints1 ........................... Passed 0.95 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.84 sec; 403/412 Test #209: matrix1 .......................... Passed 0.70 sec; 404/412 Test #410: skeletonscf ...................... Passed 0.81 sec; 405/412 Test #216: mints4 ........................... Passed 0.83 sec; 406/412 Test #176: docs-dft ......................... Passed 0.72 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.60 sec; 408/412 Test #365: options1 ......................... Passed 0.68 sec; 409/412 Test #88: cepa1 ............................ Passed 2.11 sec; 410/412 Test #179: fsapt1 ........................... Passed 2105.81 sec; 411/412 Test #18: cbs-xtpl-func .................... Passed 1523.38 sec; 412/412 Test #319: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:37458,interface,interface,37458,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['interface'],['interface']
Integrability," libxc keywords to combine unambiguity and human readability: xc = 'lda_x,lda_c_vwn_rpa'. You can also use libxc identifiers in Psi4 but the syntax is a bit more verbose (you need to define a Psi4-style functional). Yes, I agree that `xc = 'lda_x,lda_c_vwn_rpa'` is better in terms of readability. Thanks for letting me know!. > That does not suffice. In addition to setting the grid with e.g. mf.grids.atom_grid = (100,590) you need to turn pruning off explicitly with mf.grids.prune = None. I noticed that too which is why I had used it in the script I provided. > By defaults PySCF truncates basis functions to 1e-8 while the threshold is much tighter in Psi4. It can be controlled in newer PySCF as detailed in. I am not sure which threshold are you talking about here. One of the thresholds I found here is much tighter and should be enough imho; https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28. > There are also be differences in how linear dependencies are handled in density fitting. As you said, I don't think here there are any major issues regarding linear dependencies. > I would first try to reproduce the energies with exact integrals, since those numbers should match exactly. . I am working on this suggestion. > So in addition to setting mf.small_rho_cutoff = 1e-15 in PySCF you also need to use a smaller threshold for the basis function screening. Is this the same as here (https://github.com/pyscf/pyscf/blob/c876e965f3dcd23d6cf8dbb9c9085b44f22ba11e/pyscf/gto/eval_gto.py#L28) or something else?; I tried reducing it 1e-20 using the config file but still got the same result (an error of around 35 uH). > Usually one is able to get different programs to agree beyond 1 uEh in DFT total energies, when the calculations are converged with respect to all numerical parameters. I usually only look at small calculations, though,. I agree and I am usually able to reproduce the same results as TURBOMOLE RIPER (using mostly default",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168:1091,depend,dependencies,1091,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487617168,1,['depend'],['dependencies']
Integrability," lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directly without any interference from Python and C++. The reason they were split this way: ESPPropCalc and PopulationAnalysisCalc and MultipolePropCalc do not share any members or variables. Example: only MPC requires an explicit origin to be set. ## Questions; - [x] I changed a return type to const & to avoid a large copy: https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1#r30055651; - [x] The return type in compute_mo_extents is an actual vector instead of a Shared pointer. It contains maximum three elements, so I left it at that: https://github.com/psi4/psi4/commit/5900",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:1580,rout,routine,1580,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['rout'],['routine']
Integrability," manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, multiple basis sets can appear, as long; # as there is a [name] tag above the definition of each basis set. The basis sets specified; # using either basis <opt_name> {...} are utilized first (in the order specified; # in the input file). Any remaining basis sets required are extracted from the built-in library,; # if they exist, or an error message is printed.; psi4.basis_helper(""""""; #; # We start by assigning basis sets to atoms. These commands can go anywhere in the basis block; #; # First, assign DZ to all atoms; assign DZ; # Now, assign 3-21G to all carbon atoms; assign C my3-21G; # The two atoms labelled H1 get a STO-3G basis two; assign H1 sto-3g; # Carbons 3 and 5 get a STO-3G basis, too; assign C1 sto-3g; # With all these in place, the symmetry is lowered to C2v automatically; # The commands are applied in order i.e., adding a line like; # assign cc-pvtz; # here would override all of the above and assign cc-pvtz to all atoms. #; # Now we define the basis sets. N.B. Indentation does not matter; it just looks prettier.; #; [my3-21G] #This is really the standard 3-21G basis, but with a different name; cartesian; ****; H 0; S 2 1.00; 5.4471780 0.1562850; 0.8245470 0.9046910; S 1 1.00; 0.1831920 1.0000000; ****; C 0; S 3 1.00; 172.2560000 0.0617669; 25.9109000 0.3587940; 5.533",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:2341,message,message,2341,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['message'],['message']
Integrability," marks ctest (longtests;snsmp;cart) and; > pytest (long;cart). vi snsmp2/cc-cc/CMakeLists.txt; > snsmp2/cc-cc/test_input.py; > - 66. snsmp2/cf-o: mismatched marks ctest (snsmp;cart) and pytest; > (cart). vi snsmp2/cf-o/CMakeLists.txt snsmp2/cf-o/test_input.py; > - 67. snsmp2/he-he: mismatched marks ctest (quick;smoke;snsmp;cart); > and pytest (quick;smoke;cart). vi snsmp2/he-he/CMakeLists.txt; > snsmp2/he-he/test_input.py; > - 68. v2rdm_casscf/v2rdm1: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm1/CMakeLists.txt; > v2rdm_casscf/v2rdm1/test_input.py; > - 69. v2rdm_casscf/v2rdm2: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm2/CMakeLists.txt; > v2rdm_casscf/v2rdm2/test_input.py; > - 70. v2rdm_casscf/v2rdm3: mismatched marks ctest (quick;smoke;v2rdm); > and pytest (quick;smoke). vi v2rdm_casscf/v2rdm3/CMakeLists.txt; > v2rdm_casscf/v2rdm3/test_input.py; > - 71. v2rdm_casscf/v2rdm4: mismatched marks ctest (v2rdm;cart) and; > pytest (cart). vi v2rdm_casscf/v2rdm4/CMakeLists.txt; > v2rdm_casscf/v2rdm4/test_input.py; > - 72. v2rdm_casscf/v2rdm5: mismatched marks ctest (v2rdm) and pytest; > (). vi v2rdm_casscf/v2rdm5/CMakeLists.txt; > v2rdm_casscf/v2rdm5/test_input.py; > - 73. v2rdm_casscf/v2rdm6: mismatched marks ctest (opt;v2rdm) and; > pytest (opt). vi v2rdm_casscf/v2rdm6/CMakeLists.txt; > v2rdm_casscf/v2rdm6/test_input.py; > - 74. v2rdm_casscf/v2rdm7: mismatched marks ctest (opt;v2rdm) and; > pytest (opt). vi v2rdm_casscf/v2rdm7/CMakeLists.txt; > v2rdm_casscf/v2rdm7/test_input.py; > - 75. x2c-perturb-h: mismatched directory (x2c-perturb-h) and ctest; > registration name (x2c-perturb_h). vi x2c-perturb-h/CMakeLists.txt; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/2555>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AA4C4TEYSZO53JGHUQ2E3ETVGLF65ANCNFSM5UCYRSWQ>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:8701,Message,Message,8701,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['Message'],['Message']
Integrability," not compatible with the production psi4-1.3.2+ecbda83 version(Tested under Win10 WSL Ubuntu1804). ```; Traceback (most recent call last):; File ""/root/miniconda3/envs/psi/bin/psi4"", line 177, in <module>; import psi4; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/__init__.py"", line 82, in <module>; from .driver import endorsed_plugins; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/psi4/driver/endorsed_plugins.py"", line 33, in <module>; import v2rdm_casscf; File ""/root/miniconda3/envs/psi/lib//python3.6/site-packages/v2rdm_casscf/__init__.py"", line 45, in <module>; psi4.core.plugin_load(sofile); RuntimeError:; Fatal Error: load_plugin: Cannot open library: core.so: cannot open shared object file: No such file or directory; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4-multiout_1563933640427/work/psi4/src/psi4/libplugin/load_plugin.cc on line: 52; The most recent 5 function calls were:. forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source; libgdma.so 00007F0370F460DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F03763F2890 Unknown Unknown Unknown; ld-2.27.so 00007F0376616A31 Unknown Unknown Unknown; libc-2.27.so 00007F03761472DF _dl_catch_excepti Unknown Unknown; libc-2.27.so 00007F037614736F _dl_catch_error Unknown Unknown; libdl-2.27.so 00007F0375DD1735 Unknown Unknown Unknown; libdl-2.27.so 00007F0375DD10B3 dlclose Unknown Unknown; core.cpython-36m- 00007F0371E280E7 Unknown Unknown Unknown; core.cpython-36m- 00007F037202C9B2 Unknown Unknown Unknown; core.cpython-36m- 00007F03720539F6 Unknown Unknown Unknown; core.cpython-36m- 00007F0371AFD0D6 Unknown Unknown Unknown; python3.6 00007F03769C4B36 PyCFunction_Call Unknown Unknown; python3.6 00007F03769C1A5E PyObject_Call Unknown Unknown; python3.6 00007F0376AC1834 Unknown Unknown Unknown; python3.6 00007F0376ABF37F Py_FinalizeEx Unknown Unknown; python3.6 00007F0376AC957E Py_Main Unknown Unknown; python3.6 00007F037699",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1775:1081,Rout,Routine,1081,https://psicode.org,https://github.com/psi4/psi4/issues/1775,1,['Rout'],['Routine']
Integrability," out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and AM down to threes or fours to test the whole procedure. I'm pretty confident that the libraries itself are built right, but I wouldn't be surprised at can't-find-dependencies-or-headers problems on other computers. 6. ~Once libint2 is finished building and psi4 starts, psi4 will error with `error: 'LIBINT2_MAX_AM_default1' was not declared in this scope`. The fix is the same as [Andy's (5)](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), editing `objdir/stage/include/libint2/libint2_params.h`. Fix that up and resume compiling psi4.~. 7. ~If you fiddle with the external/upstream/libint2/CM file and the generator starts rebuilding, you're toast. `rm -rf objdir/external/upstream/libint2` and `make` again from objdir to restart. Details: The way EFV does the AM defaulting is not a way CMake wants to act. I'm still working on a fix. You'll see ""exponent has no digits"" errors. In any case, if the generator has to run again (which is probably correct -- it's not the dependency structure that's wrong, it's the generated config.h), there's no time to be saved.~. EDIT: latest push fixes step 6; EDIT: latest push",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:2162,depend,dependencies-or-headers,2162,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,1,['depend'],['dependencies-or-headers']
Integrability," reason to worry about flushing the buffer. In designing a library, that may be potentially used by various codes, the above code is not ideal as it breaks encapsulation by propagating the target program's code throughout the library. An integral part of library design is establishing an API that allows the library to respect the resource management paradigms of the target codes, but also doesn't lead to a mess of logic statements anytime a resource is needed within the library. This is best handled by a ""wrapper"" of some kind. Within an object-oriented coding paradigm, a (or a series of) resource allocating class(es) would be created. Then each time your library needs a resource it asks for it from an instance of this/these class(es). Alternatively, a C-like solution is to create a series of wrapper functions; your library then always obtains its resources from these functions. Regardless of which path is taken, the important point is that the specifics of how a target program allocates resources is now encapsulated within some interface, keeping your library clean and agnostic to the details. For concreteness I provide a C-like solution that provides an interface to Psi4's new outfile instance:. ``` c++; void MyPrinter(const std::string& Message){; (*psi::outfile)<<Message;; }. void FxnInMyCodeThatPrints(const int i, const int j){; std::stringstream Thing2Print;; Thing2Print<<""The Sum of i, ""<<i<<"" , and j, ""<<j<<"" , is: ""<<i+j<<std::endl;; MyPrinter(Thing2Print.str());; }; ```. This example is designed to be self-evident, but if it's not the important point is that whenever I go to print in my library I pass the message to the `MyPrinter` function instead of to `std::cout` or a `std::ostream` instance. The specifics of how the target program prints are then completely encapsulated within the `MyPrinter` function. Of course this is not the only possible function signature for a wrapper function; in particular, one could also make a `printf` like syntax if desired.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:3333,interface,interface,3333,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,5,"['Message', 'interface', 'message', 'wrap']","['Message', 'interface', 'message', 'wrapper']"
Integrability," reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:1575,depend,depends,1575,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['depend'],['depends']
Integrability, sec; Start 230: mp2-module; 220/411 Test #223: molden1 .......................... Passed 7.31 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 4.00 sec; Start 232: mp2p5-grad2; 222/411 Test #224: molden2 .......................... Passed 7.09 sec; Start 233: mp3-grad1; 223/411 Test #229: mp2-grad2 ........................ Passed 3.96 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 4.67 sec; Start 235: mp2-property; 225/411 Test #231: mp2p5-grad1 ...................... Passed 6.26 sec; Start 236: mpn-bh; 226/411 Test #232: mp2p5-grad2 ...................... Passed 6.64 sec; Start 237: nbody-he-cluster; 227/411 Test #226: mp2-1 ............................ Passed 12.37 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 4.88 sec; Start 239: numpy-array-interface; 229/411 Test #235: mp2-property ..................... Passed 3.31 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 241: ocepa-grad1; 231/411 Test #236: mpn-bh ........................... Passed 4.34 sec; Start 242: ocepa-grad2; 232/411 Test #241: ocepa-grad1 ...................... Passed 11.81 sec; Start 243: ocepa1; 233/411 Test #238: nbody-intermediates .............. Passed 18.27 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 5.53 sec; Start 245: ocepa3; 235/411 Test #219: mints-benchmark .................. Passed 41.71 sec; Start 246: omp2-1; 236/411 Test #110: dcft4 ............................ Passed 423.92 sec; Start 247: omp2-2; 237/411 Test #246: omp2-1 ........................... Passed 4.28 sec; Start 248: omp2-3; 238/411 Test #204: frac-ip-fitting .................. Passed 69.19 sec; Start 249: omp2-4; 239/411 Test #247: omp2-2 ........................... Passed 16.82 sec; Start 250: omp2-5; 240/411 Test #237: nbody-he-cluster ................. Passed 43.38 sec; Start 251: omp2-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:21452,interface,interface,21452,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['interface'],['interface']
Integrability, sec; Start 230: mp2-module; 220/411 Test #228: mp2-grad1 ........................ Passed 3.46 sec; Start 231: mp2p5-grad1; 221/411 Test #229: mp2-grad2 ........................ Passed 3.65 sec; Start 232: mp2p5-grad2; 222/411 Test #226: mp2-1 ............................ Passed 5.21 sec; Start 233: mp3-grad1; 223/411 Test #231: mp2p5-grad1 ...................... Passed 2.87 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 1.98 sec; Start 235: mp2-property; 225/411 Test #232: mp2p5-grad2 ...................... Passed 3.12 sec; Start 236: mpn-bh; 226/411 Test #168: dft1 ............................. Passed 97.74 sec; Start 237: nbody-he-cluster; 227/411 Test #234: mp3-grad2 ........................ Passed 2.56 sec; Start 238: nbody-intermediates; 228/411 Test #235: mp2-property ..................... Passed 3.54 sec; Start 239: numpy-array-interface; 229/411 Test #236: mpn-bh ........................... Passed 3.71 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 241: ocepa-grad1; 231/411 Test #145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec; Start 250: omp2-5; 240/411 Test #248: omp2-3 ........................... Passed 13.55 sec; Start 251: omp2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:21397,interface,interface,21397,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['interface'],['interface']
Integrability," segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also **confirm** that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, J. Chem. Phys. 138, 014107 (2013).; [8] Teobald Kupka, Carmay Lim, Polarization-Consistent versus Correlation-Consistent Basis Sets in Predicting Molecular and Spectroscopic Properties, J. Phys. Chem. A. 111m 1927 (2007).; [9] Frank Jensen, Unifying General and Segmented Contracted Basis Sets. Segmented Polarization Consistent Basis Sets., Journal of Chemical Theory and Computation 10, 1074-1085 (2014) DOI: 10.1021/ct401026a.; [10] Frank Jensen, Segmented Contracted Basis Sets Optimized for Nuclear Magnetic Shielding, J. Chem. Theory Comp. 11, 132 (2015).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241120477:2273,Contract,Contracted,2273,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241120477,2,['Contract'],['Contracted']
Integrability," some other settings, seeing if; turning off density-fitting or changing the grid prods things. I've run the; same calc in Orca which seems to go alright; both use LibXC for wb97M-V,; though Orca has its own VV10 impl. I'll see if non-self-consistent VV10; hits the same issue; if not, I'll play with the VV10 grid settings, too. I do have some other calculations in this dataset with perfectly reasonable; geometries which failed due to ""ADIIS"", which I'd like to sort out. I; suspect they may have a common cause in whatever *actually* caused this; failure, and I'll see what I can dig up. On Thu, Oct 5, 2023 at 9:44 AM Jonathon Misiewicz ***@***.***>; wrote:. > Hello, I'm the developer who implemented ADIIS in Psi4. Thanks for your; > patience. Between some life changes and issues compiling Psi4, I haven't; > been able to look at this issue previously.; >; > 1. Following Susi's suggestion, B3LYP converges straightforwardly. The; > SCF iterations takes one bad step early on, but this happens whether ADIIS; > is on or off.; > 2. If I disable ADIIS completely using your original functional, it; > *still* fails. Once the energy gets to around 284 Eh, it doesn't; > become negative again. *Contrary to the topic title, ADIIS is not at; > fault*.; > 3. The title suggests that you've had previous ADIIS issues; > previously. If so, please send me specific examples. My experience has been; > that ADIIS itself is fine, but can break when other parts of the code are; > badly behaved.; >; > I'll do some digging to see if I can suggest an alternate protocol that; > will actually converge.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/3051#issuecomment-1748931430>, or; > unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ABTN7JEC2WPIX354RHZG4ZTX522TPAVCNFSM6AAAAAA5H47C7WVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTONBYHEZTCNBTGA>; > .; > You are receiving this because you authored the thread.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476:1875,protocol,protocol,1875,https://psicode.org,https://github.com/psi4/psi4/issues/3051#issuecomment-1748950476,2,"['Message', 'protocol']","['Message', 'protocol']"
Integrability," test:. | | master (pre-v1.6) | ddd (v1.6) |; |-------------------------------------|---------------------------------------------|---------------------------------------------|; | set basis bas; energy(mtd); clean() | ok | ok |; | set basis bas; energy(mtd) | `PSIO_ERROR: (Incorrect block end address)` | `PSIO_ERROR: (Incorrect block end address)` |; | energy(mtd/bas); clean() | ok | ok |; | energy(mtd/bas) | ok | `PSIO_ERROR: (Incorrect block end address)` |. - [x] Output file in continuous mode now looks much as it normally does in the master branch, except there's a few more headers printed and the individual cbs/findif/nbody `AtomicResult` outputs aren't added in real time. Running through QCFractal, the output file is expected to break down, but this hasn't been tried.; - [x] A Logging file has been introduced. All its contents should be considered experimental and subject to change.; - [x] Dipole derivatives through finite difference of dipoles added, so IR intensities available; - [x] The dummy wavefunctions returned from wrappers always had some questionable properties (e.g., single method for mixed method, largeset HF basis for cbs wavefunction) can be even less realistic (e.g., always def2-svp basis for cbs).; - [x] n-body qcvars renamed (grace period applies); ```; ""CP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""NOCP-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""VMFC-CORRECTED {nb}-BODY INTERACTION ENERGY"": (""VMFC-CORRECTED INTERACTION ENERGY THROUGH {nb}-BODY"", 1.7),; ""COUNTERPOISE CORRECTED TOTAL ENERGY"": (""CP-CORRECTED TOTAL ENERGY"", 1.7),; ""COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""CP-CORRECTED INTERACTION ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED TOTAL ENERGY"": (""NOCP-CORRECTED TOTAL ENERGY"", 1.7),; ""NON-COUNTERPOISE CORRECTED INTERACTION ENERGY"": (""NOCP-CORRECTED INTERACTION ENERGY"", 1.7),; ""VALIRON-MAYER FUNCTION COUTERPOISE ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:5739,wrap,wrappers,5739,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['wrap'],['wrappers']
Integrability," test_grimme_3c ____________________________________________________. molrec = {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H'], 'elez': [6, 6, 1, 1], ...}; name_hint = 'pbeh3c', level_hint = 'd3bj', param_tweaks = {'a1': 0.486, 'a2': 4.5, 's6': 1.0, 's8': 0.0}; ptype = 'energy'; dashcoeff_supplement = defaultdict(<function <lambda> at 0x7f5e8db768c8>, {'d2': defaultdict(<class 'dict'>, {'definitions': {'opbe-d2': {'ty...0093}, 'citation': ' M. K. Kesharwani, A. Karton, J.M. L. Martin, J. Chem. Theory Comput. 12, 444-454, 2016\n'}}})}); verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'energy', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)"", ...ule': {'elbl': ['', '', '', ''], 'elea': [12, 12, 1, 1], 'elem': ['C', 'C', 'H', 'H']",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:12426,rout,routine,12426,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability," the third column, the parser fails. This is because `psi4/driver/qcdb/libmintsbasissetparser.py` limits the number of replacements of ""D"" with ""e"" to two per line. Is there a particular reason for this limit? Otherwise I'm happy to submit a PR fixing this. Fails:; ```; molecule mol {; N 0.0 0.0 0.0; N 0.0 0.0 1.0; 0 1; }. basis {; assign genbas; [genbas]; cartesian. ****; N 0; S 6 1.00; 0.4173511460D+04 0.1834772160D-02; 0.6274579110D+03 0.1399462700D-01; 0.1429020930D+03 0.6858655181D-01; 0.4023432930D+02 0.2322408730D+00; 0.1282021290D+02 0.4690699481D+00; 0.4390437010D+01 0.3604551991D+00; SP 3 1.00; 0.1162636186D+02 -0.1149611817D+00 0.6757974388D-01; 0.2716279807D+01 -0.1691174786D+00 0.3239072959D+00; 0.7722183966D+00 0.1145851947D+01 0.7408951398D+00; SP 1 1.00; 0.2120314975D+00 0.1000000000D+01 0.1000000000D+01; ****. }; e, wfn = energy('scf', return_wfn=True); ```; with message:; ```; Traceback (most recent call last):; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/bin/psi4"", line 337, in <module>; exec(content); File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Use",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:1069,message,message,1069,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['message'],['message']
Integrability," the whole molecule string, which is less helpful, and that last error message is what psi4 repeats to you.; ```; Traceback (most recent call last):; File ""/psi/gits/QCElemental/i2287.py"", line 22, in <module>; ans = qcel.molparse.from_string(xyz, dtype=""psi4""); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 228, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=False); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(""""""Unprocessable Molecule remanents under {}:\n{}"""""".format(dtype, molstr)); qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under psi4:; H6 1.51000000 0.78000000 0 44000000; ```. I've handled this better now to raise the shortest error message among the formats with https://github.com/MolSSI/QCElemental/pull/274, and the psi message looks like:; ```; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 35, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/molutil.py"", line 258, in geometry; molrec = qcel.molparse.from_string(; File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 262, in from_string; raise(e); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 256, in from_string; molstr, molinit = parse_as_psi4_ish(molstr, unsettled=True); File ""/psi/gits/QCElemental/qcelemental/molparse/from_string.py"", line 217, in parse_as_psi4_ish; raise MoleculeFormatError(f""""""Unprocessable Molecule remnants under {dtype}:\n{molstr}""""""). qcelemental.exceptions.MoleculeFormatError: Unprocessable Molecule remnants under [psi4, xyz, xyz+, psi4+]:; H6 1.51000000 0.78000000 0 44000000. Printing out the relevant lines from the Psithon --> Python processed input file:; H6 1.51000000 0.78000000 0 44000000; H7 2.97000000 1.82000000 0.70000000; H8 1.58000000 2.16000000 -0.43000000; """,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723:1215,message,message,1215,https://psicode.org,https://github.com/psi4/psi4/issues/2287#issuecomment-910395723,1,['message'],['message']
Integrability," to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of diffuse functions, J. Chem. Phys. 117, 9234 (2002).; [4] Frank Jensen, Trygve Helgaker, Polarization consistent basis sets. V. The elements Si-Cl, J. Chem. Phys. 121, 3463 (2004).; [5] Frank Jensen, Polarization consistent basis sets. VI. The elements He, Li, Be, B, Ne, Na, Mg, Al, Ar, J. Phys. Chem. A 111, 11198 (2007).; [6] Frank Jensen, Polarization Consistent Basis Sets. VII. The Elements K, Ca, Ga, Ge, As, Se, B; r and Kr, J. Chem. Phys. 136, 094110 (2012).; [7] Frank Jensen, Polarization Consistent Basis Sets. VIII. The Transition Metals Sc-Zn, ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:1561,wrap,wrapper,1561,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['wrap'],['wrapper']
Integrability," to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code base. Of course one coul",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:1038,integrat,integration,1038,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['integrat'],['integration']
Integrability," type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure described in Fig. 1, the significant shell pairs have been preselected by using overlap criteria and preordered by size of the integral estimate"" mean? I would interpret that as meaning that there is stored, somewhere, a _complete_ list of significant shell pairs. This list is created before the algorithm in Figure 1 starts, so significant in the context of this line refers to the entire list of significant shell pairs, not just the significant shell pairs of a given block. . The second question is this - does ""Loop over all nu's in significant ""ket"" shell pairs"" have the same meaning as it's bra counterpart loop? Admittedly, the answer to this question is not entirely clear to me. However, my immediate hunch is yes. The reason why, is because (nu_max | nu_max)^1/2 is also present in the preselection condition definition. Without an explicit definition of (nu_max | nu_max)^1/2 in the paper, it would have to be guessed that (nu_max | nu_max)^1/2 has an analogous definition to (mu_max | mu_max)^1/2, but for ""ket"" shell pairs. If this were the case, it would imply that the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" would be a pair of loops, one looping over bra shell pair types, and one looping over ket shell pair types. . Again, this is simply my interpretation of the matter. Do let me know what you think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:3119,contract,contraction,3119,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,1,['contract'],['contraction']
Integrability," was at http://www.psicode.org/psi4manual/master/basissets.html#sec-basisuserdefined. Step 2 is where things fall over. First of all, the correct syntax seems to be ; assign df_basis_scf/mp2 <aux basis>; There seems to be an error on the wiki page shown above. . This syntax works as it allows me to define a specific auxiliary basis for *all* atoms. If I wish to define a specific aux basis for a particular atom (as needs to be done when using mid-bonds) then the command should be; assign Rn df_basis_scf mb-set-ri; This fails in inputparser.py with the following error:. Traceback (most recent call last):; File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 734, in process_input; temp = re.sub(basis_block, process_basis_block, temp); File ""/home/alston/Psi4/psi4conda/lib/python2.7/re.py"", line 155, in sub; return _compile(pattern, flags).sub(repl, string, count); File ""/home/alston/Psi4/psi4conda/share/psi4/python/inputparser.py"", line 357, in process_basis_block; raise TestComparisonError(message); p4util.exceptions.TestComparisonError: Conflicting basis set specification: assign lines present but shells have no [basname] label. It seems like the line ""assign Rn df_basis_scf mb-set-ri"" cannot be correctly parsed by inputparser.py. It seems to think this line is part of the basis set specification. . The complete Psi4 command file for this calculation is:; [Ar2_input.txt](https://github.com/psi4/psi4/files/787318/Ar2_input.txt). And the two basis set files are here:; [mb-set.txt](https://github.com/psi4/psi4/files/787319/mb-set.txt); [mb-set-ri.txt](https://github.com/psi4/psi4/files/787320/mb-set-ri.txt). I can get this to work by including the aux basis for ""Rn"" in one of the fitting basis files that Psi4 would normally read. But this is not ideal and it would be great to be able to specify the fitting basis in the input file using the ''assign'' command. How can this be fixed?. Additionally, the information on the wiki dealing with user-defined",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626:1934,message,message,1934,https://psicode.org,https://github.com/psi4/psi4/issues/626,1,['message'],['message']
Integrability," what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contribute to the code. In particular, we are willing to...""_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:1596,depend,depends,1596,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,1,['depend'],['depends']
Integrability," would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with the calculation results? Right now only the MP2 ground state energy is returned to the python world in ADC calculations of Ps4 if I understand this right. Our [ExcitedStates](https://adc-connect.org/reference.html#adcc.ExcitedStates) object, however, is capable of returning more results, most importantly oscillators strengths, or the complete excitation vector. I tried to understand what was done in the eom-cc case and as far as I can judge, the `CCEnergyWavefunction` seems at least related. In principle it should be possible to do something similar for ADC inside the Psi4 code base. Another option is also to just blindly reduce the object we produce in `adcc`, which of course could be considered leaking out interface details from adcc into Psi4.; - Are the tests copied to samples automatically?. ## Checklist; - [x] Tests added for any new features; - [x] ADC(1); - [x] ADC(2); - [x] ADC(2)-x; - [x] ADC(3); - [x] CVS-ADC(1); - [x] CVS-ADC(2); - [x] CVS-ADC(2)-x; - [x] CVS-ADC(3); - [x] Frozen core variant; - [x] Frozen virtual variant; - [x] singlet and triplet states; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. Thanks in advance for your help :smile:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:2720,interface,interface,2720,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['interface'],['interface']
Integrability,"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True); Nmol1 = mol.fragments[0][1] - mol.fragments[0][0] + 1; Nmol2 = mol.fragments[1][1] - mol.fragments[1][0] + 1; ; (p4dev37) psilocaluser@bash:psinet:/home/psilocaluser/gits/hrw-release/objdir37/asdf: (mp2d) git diff ../../psi4/driver/qcdb/psiutil.py; diff --git a/psi4/driver/qcdb/psiutil.py b/psi4/driver/qcdb/psiutil.py; index abb8e76..76eb6a7 100644; --- a/psi4/driver/qcdb/psiutil.py; +++ b/psi4/driver/qcdb/psiutil.py; @@ -291,7 +291,7 @@ def compare_arrays(expected, computed, digits, label, verbose=1):; ; ; def query_yes_no(question, default=True):; - """"""Ask a yes/no question via raw_input() and return their answer.; + """"""Ask a yes/no question via input() and return their answer.; ; *question* is a string that is presented to the user.; *default* is the presumed answer if the user just hits <Enter>.; @@ -316,7 +316,7 @@ def query_yes_no(qu",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2992,rout,route,2992,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,1,['rout'],['route']
Integrability,"""Gradient per KS-MO"" does _not_ ""just require exposing it."" First, you need to define it properly. Exact exchange depends on two KS-MOs, not just one, so it isn't clear to me how you'd meaningfully define this as a one KS-MO property. Then, you'd need to implement it, since Psi4 doesn't do this naturally. You'd probably need to decompose the density as a sum of densities for each MO and run the gradient computation on each, so a gradient computation takes #MO's times longer. This should not be the default algorithm. Putting the gradient terms on the wavefunction as array variables seems relatively straightforward.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578:114,depend,depends,114,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-796658578,1,['depend'],['depends']
Integrability,"""This means the reference state is not stable."" In other words, the SCF solver landed on an excited state, but our algorithm is designed to work only on local minima. You'll need to land on the minimum, either by changing convergence settings such as initial guess or instability analysis. Without knowing more details about your system, I don't know which to recommend. Is the language of ""This means the reference state is not stable."" new to you? If it is, we may need to make the error message more explicit... This is an old issue, but I'd like to keep the issue list trimmer than it currently is. If there's no response from you in a week or so, I'll close this, but feel free to reopen afterwards if the issue isn't settled. Inadvertent excited states are bad.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748:490,message,message,490,https://psicode.org,https://github.com/psi4/psi4/issues/3134#issuecomment-2162774748,1,['message'],['message']
Integrability,"""gg"" is ""gau2grid"" which is a required dependency. that's built in to the dep list (search for ""nofortran"" build and click the little ""i"") https://anaconda.org/psi4/psi4/files, so I don't know how mamba let you install that psi4 without gau2grid. I'm not quite sure what you're trying to solve. iirc, the ambertools issue was a libgfortran one, so ideally defaults and c-f would get back in sync. I can build a new nofortran build for you, but not for several days. Alternately, you can try a dual-environment setup keeping psi in a defaults-based env and keeping c-f based deps in a c-f-based env. There's a gha that models that at [github/workflows/ecosys](https://github.com/psi4/psi4/blob/master/.github/workflows/ecosystem.yml). If you continue with the nofortran build, be aware that in psi4 current master, py37 isn't supported, libint is now v2, and libxc is v5.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125631043:39,depend,dependency,39,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125631043,1,['depend'],['dependency']
Integrability,"""pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]"". Well, that's not really true: it depends on your integrals driver. If your program handles everything as general contractions, then segmented basis sets are slower. If it handles everything as segmented contractions, then general contracted basis sets are **much much** slower...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/457#issuecomment-241127272:132,depend,depends,132,https://psicode.org,https://github.com/psi4/psi4/pull/457#issuecomment-241127272,4,"['contract', 'depend']","['contracted', 'contractions', 'depends']"
Integrability,# Description; Fixes warning message described on slack by iwatobipen:; ```; /home/user/anaconda3/envs/chemo37/lib/python3.7/site-packages/psi4/driver/qcdb/libmintsbasisset.py:854: ResourceWarning: unclosed file <_io.TextIOWrapper name='/home/user/anaconda3/envs/chemo37/share/psi4/basis/aug-cc-pvdz.gbs' mode='r' encoding='UTF-8'>; names[index] = parser.load_file(fullfilename); ```; as suggested by @loriab . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1687:29,message,message,29,https://psicode.org,https://github.com/psi4/psi4/pull/1687,1,['message'],['message']
Integrability,"# Description; Substantial changes to the Psi4 DFT infrastructure to add several hundred new DFT functional forms. In addition, adds the SAPT(DFT) and EP2 methods. Several major performance enhancements are included as well as well. This is also one of the primary patches for the Psi4 1.2 release. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] SCF Wavefunctions can now do Hessian-Vector builds see `RHF.Hx` and `RHF.solve` for examples. This functionality supports non-totally symmetric tensors.; - [x] The DFT V Potential object now has Hessian-Vector functionality.; - [x] Added many C++ calls to the Python interface.; - [x] Reworked the building of superfunctionals. Note that the coefficients set when building a functional are no longer modified by exact exchange or MP2 correlation factors.; - [x] DFT Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - [x] Added generalized solvers in `p4util/solvers.py`. These include DIIS, CG, BiCGSTAB, and Davidson.; - [x] New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - [x] ECP SCF energies.; - [x] ECP gradients by finite differences in Python.; - [x] Test case(s) and documentation.; - [x] Make sure frozen core code doesn't add contributions from ECP bearing atoms.; - [x] Add / document more basis sets, and add ECP info to existing Def2 series (w/help from @loriab). * **User-Facing for Release Notes**; - [x] Psi4's DFT now uses LibXC, several hundred new functionals are available.; - [x] DFT potential and gradient builds are now parallelized and vectorized, up to 30x faster on six cores.; - [x] Adds a new vectorized DF-JK builder, up to 4x as fast as previous version.; - [x] Adds culoumb-attenuated (CAM) functionals.; - [x] Adds the VV10 non-local correlation kernel.; - [x] Adds DSD functionals.; - [x] Extended second-order",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:681,interface,interface,681,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['interface'],['interface']
Integrability,"## DESCRIPTION; Using `DF_Helper`'s density fitting technology, both integral and exchange matrix computations can be sped up for in-core investigations. I have created a `JK` derived class, `symm_JK`, which wraps the technology of `DF_Helper` and enables its use for J/K building in Psi4. ## RESULTS; Here are some timing results for entire SCF procedures across various systems, using two different architectures. Notice that relative speedup between `symm_JK` and `DFJK` improves for non-uniform memory access (NUMA) architectures. ![april research update](https://user-images.githubusercontent.com/19575820/38739410-de32a49c-3f02-11e8-9512-c4edc165f259.png). ![april research update-1](https://user-images.githubusercontent.com/19575820/38739454-f5f0a6e2-3f02-11e8-9196-cdcd97cdcd34.png). ## TODO; The new JK building object, `symm_JK`, will be faster than DFJK for in-core implementations. However, it will be slower for disk-based implementations. ; - [x] Add check to figure out which object to use for J/K building. (in-core vs disk)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961:208,wrap,wraps,208,https://psicode.org,https://github.com/psi4/psi4/pull/961,1,['wrap'],['wraps']
Integrability,"## Description. A series of updates to the Psi4 driver. Very large PR's is not my favorite thing to do on git, but unfortunately driver changes are complex and strongly tied together. Putting this up now as a way to help track everything this fixes.; ## Todos; - [x] General cleanup and reorganization of the driver.; - [x] Reorganized procedures into a single folder.; - [x] Reworking CBS and N-Body wrappers for easier use.; - [x] Above changes broke some of pywrap, need to get these fixed.; - [x] More canonical python raise error printing.; - [x] Reorganizes OEProp to use `D_subset_helper` instead of `Da_subset` to avoid pulling density matrices from multiple sources. Closes #193; - [x] Reworks how OEProp is called for SCF, DFT, DF-MP2, CI, and MCSCF. The full OEProp suite works for these now through the properties driver.; - [x] New test case for the above OEProp (scf_properties, mp2_properties, ci_properties), closes #356.; - [x] Freeze COM/ORIENT for FREEZE COORDINATE option and closes #179 ; ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/365:401,wrap,wrappers,401,https://psicode.org,https://github.com/psi4/psi4/pull/365,1,['wrap'],['wrappers']
Integrability,"## Description. Add Jensen [aug-]pc[[s][seg]-N basis sets; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Add the segmented Jensen basis sets; - [x] Fix up some default auxilliary fns for them; - [x] Need to adapt CBS wrapper [here](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/python/driver_cbs.py#L59-L73); ## Questions; - [ ] @jvansan should look it over, particularly the default auxiliary basis sets I chose; ## Status; - [x] Ready to go; ## Other good stuff provided by @jvansan that we don't want to lose. The Jensen pc basis sets [1-7] are analogous to the Dunning cc basis sets and may be used in their place. They were designed to converge monotonically to the HF basis set limit, and have been shown to do so faster than the cc basis sets for molecular and spectroscopic properties. [8]. Confusingly, the name pc-n actually refers to an n+1-zeta basis set, that is pc-2 is a triple-zeta basis set. aug-pc-n includes diffuse functions. pcseg-n is a segmented version of the pc-n basis sets, thus more computationally expensive. [9]. pcSseg-n is an even larger segmented version of the pc-n basis sets, optimized for NMR shielding calculations. [10]. I have not been able to find any literature on preferred auxiliary basis sets for use with these, so appropriately sized def2 basis sets should be sufficient. I have been experimenting with these with rather good success. I can also confirm that these basis sets do not require ECPs. Perhaps on the list of wants would be to modify the CBS python wrapper to allow for extrapolation with these basis sets. I may take a stab at this if I can find time in the next little while. [1] Frank Jensen, Polarization consistent basis sets: Principles, J. Chem. Phys. 115, 9113 (2001).; [2] Frank Jensen, Polarization consistent basis sets. II. Estimating the Kohn-Sham basis set limit, J. Chem. Phys. 116, 7372 (2002).; [3] Frank Jensen, Polarization consistent basis sets. III. The importance of ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/475:260,wrap,wrapper,260,https://psicode.org,https://github.com/psi4/psi4/pull/475,1,['wrap'],['wrapper']
Integrability,"## Description. Adds the ability to use delta corrections for the CBS Wrapper's string-based input. For example, the following now works:. ``` python; energy('MP2/cc-pV[TQ]Z + D:CCSD(T)/cc-pVDZ'); gradient('MP2/cc-pV[TQ]Z + D:MP3/cc-pV[DT]Z'); opt('CISD/cc-pV[TQ]Z + D:CISDTQ/cc-pVDZ'); etc; ```. Note that only a single delta is currently supported. We can consider multiple delta's in a string representation if there is an obvious way to do it. Ultimately, there is some notion that the string based parser should be fairly bare bones due to the relative inflexibility of the input. If required, the user can always use the `cbs` function directly for exactly control over the computation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374:70,Wrap,Wrapper,70,https://psicode.org,https://github.com/psi4/psi4/pull/374,1,['Wrap'],['Wrapper']
Integrability,"## Description. Attaches `to_array` and `from_array` NumPy interfaces to the `Matrix` and `Vector` class and includes irrep support. ; ## Questions; - [x] NumPy does not handle ""irreps"" well as all internal dimensions of nd-array's must have the same shape. Best solution that I have come up with is to convert a Psi4 object with irreps to a list of NumPy arrays. Zero dimensional irreps are support by empty NumPy arrays so that circular converting works. This does make things somewhat awkward as your return datatype depends on the irreps of the Psi4 object. The other option is to remove the irreps from the Psi4 object so that all Psi4 Matrices are dense 2D and all Vectors are dense 1D. Wastes some space, but anything handled by NumPy should be small anyways.; - [x] Adds `to_array` and `from_array` to `Matrix` and `Vector` objects.; - [x] Adds `to_list` and `from_list` to `Dimension` objects.; - [x] Looks like CI Natural orbitals from user densities was accidentally here as well.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/373:59,interface,interfaces,59,https://psicode.org,https://github.com/psi4/psi4/pull/373,2,"['depend', 'interface']","['depends', 'interfaces']"
Integrability,"## Description. Converts Psi4 from a binary that calls Python to a Python module that calls a shared object as discussed in #468. ; ## Features; - ""psi4"" is now a python module, the entire driver and suite of C++ functions is now behind this interface.; - The ""bin/psi4"" binary is now a python script that parses Psithon input to support the current Psi4 interface.; - For any conventional python script the following now works: `import psi4`.; - C++ no longer calls python, all python objects must be passed in from the driver.; - BasisSet objects are the primary objects effected here. The Wavefunction now stores BasisSets constructed by python and can be accessed by `wfn->get_basis(*basis*)`.; - The C++ side of psi4 is now compiled to the a shared library with python access named ""core.so"".; ## Remaining issues; - There are several outstanding issues, a list of which can be found [here](https://github.com/dgasmith/psi4/projects/1). All issues may not be cleaned up by the time this PR goes through, current full suite coverage of 99%.; - HF: Broken Symmetry guess is currently broken, apparently no test case for this.; - BasisSet is not final with regard to construct_combined and handling of user defined basis sets.; - SAD does not work due to basis set creation.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/481:242,interface,interface,242,https://psicode.org,https://github.com/psi4/psi4/pull/481,2,['interface'],['interface']
Integrability,## Description. Extends DDX interface to support SCF response and TDSCF. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [X] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2967:28,interface,interface,28,https://psicode.org,https://github.com/psi4/psi4/pull/2967,1,['interface'],['interface']
Integrability,"## Description. Finally, some modernization of the PK JK object. I coded everything trying to maximize code reuse and using polymorphism where it would be good, but if you have any suggestions on the code organization please let me know.; Traditionally, PK denotes the integral supermatrices stored on disk. Here I use it more generally for the class of algorithm storing integrals somewhere instead of recomputing them.; ## Caution:. Some older commits contain additional attempts at algorithms that were deleted since (for being inefficient). You may want to review the most recent commits only.; ## Todos. Notable points that this PR has accomplished:; - [x] In-core PK algorithm when enough memory is available; - [x] ""Reorder"" PK algorithm: the PK supermatrices are directly written on file without any intermediates by reordering the integral computation (thanks to @dgasmith for discussion), good for large to medium memory; - [x] ""Yoshimine"" PK algorithm: pre-sorts integrals on disk, similar to more traditional algorithm. Best for low memory, otherwise quite slow.; - [x] Automatic selection of the algorithm depending on available memory; - [x] wK long-range integrals are also handled; - [x] Non-symmetric density matrices are handled ; ## Questions; - [x] I'd like this pull request to stay unmerged for a few days so everyone who wants to have a look at it has some time to do so. (@andysim, @jturney ?); ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/387:1119,depend,depending,1119,https://psicode.org,https://github.com/psi4/psi4/pull/387,1,['depend'],['depending']
Integrability,## Description. If Matrix::gemm was called with matrices of different point group size the routine did not fail and returned erroneous results.; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] Checks the nirrep variable on each matrix of the gemm and throws if they are different.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/276:91,rout,routine,91,https://psicode.org,https://github.com/psi4/psi4/pull/276,1,['rout'],['routine']
Integrability,"## Description. If a DFT functional gives `NaN` when we attempt to numerically integrate it, throw the functional under the bus immediately instead of leaving my ADIIS code to take the blame, i.e., give a better error message. Closes #2609. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2611:79,integrat,integrate,79,https://psicode.org,https://github.com/psi4/psi4/pull/2611,2,"['integrat', 'message']","['integrate', 'message']"
Integrability,"## Description. Modernization, efficiency, and flexibility improvements for the CI code.; ## Todos; - [x] RSP Diagonalization now writes out CIVectors for OPDM, TPDM, etc uses. Fixes #83.; - [x] Removes several deprecated features such as exporting of CI Vectors in an old format.; - [x] The Numpy interface has been updated. Now uses a single `std::vector` instead of a `double *`. This change has been propagated throughout the entire code.; - [x] More CI routines have been exported to the python layer allowing the creation of complex python-based CI methods.; - [x] Adds a new Matrix routine that removes irreps.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/372:298,interface,interface,298,https://psicode.org,https://github.com/psi4/psi4/pull/372,3,"['interface', 'rout']","['interface', 'routine', 'routines']"
Integrability,"## Description. Reduces the minimum overlap between atoms to fix issue #195. Reductions to this tolerance in the future would likely have to be for ghost atoms only. A downside to this is linear depends will pop up much more often when two atoms are this close together, especially in highly symmetric molecules.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/283:195,depend,depends,195,https://psicode.org,https://github.com/psi4/psi4/pull/283,1,['depend'],['depends']
Integrability,## Description. Removes `sointegral_twobody.h`'s dependence on `mpi_wrapper.h` and `local.h`. Also removes some MADNESS stuff that was missed originally.; ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/369:49,depend,dependence,49,https://psicode.org,https://github.com/psi4/psi4/pull/369,1,['depend'],['dependence']
Integrability,"## Description. This PR fixes thread synchronization in AIOHandler after KTB. The std::thread in C++11 must not be joinable when it is destroyed, or it calls terminate(). Before destroying every thread created in AIOHandler, it is thus joined. In addition, a thread must not be joined twice, thus the synchronization step now checks whether the thread is joinable before joining. Fixes #596 and should definitely fix errors in tests cubeprop, sapt2, sapt3 and sapt6 that appeared in KTB and for which @loriab had a workaround. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed thread management in AIOHandler. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/609:37,synchroniz,synchronization,37,https://psicode.org,https://github.com/psi4/psi4/pull/609,2,['synchroniz'],['synchronization']
Integrability,"## Description. This is the second PR of the M-D series, this time replacing the OS code for arbitrary-order multipole integrals.; Some notable points:. - I added a new routine `ao_multipoles` to the Py API to conveniently call those integrals.; - There's also a new `multipole_grad` which computes first derivatives of arbitrary-order multipole integrals (new feature!).; - The dipole derivative code in `DipoleInt` (which uses l2 for dipole ints, used OS86 for derivs) is removed.; - To keep the API stable, the `dipole_grad` is hard-wired to `multipole_grad` with the appropriate arguments.; - ➡️ more features, less code 💡. ## ToDos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement arbitrary-order multipole integrals using M-D; - [x] first derivatives; - [x] finite-difference tests; - [x] more equation numbers; - [x] small benchmark against OS86 implementation. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH-merge** (wait for @andysim and @loriab approval)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496:169,rout,routine,169,https://psicode.org,https://github.com/psi4/psi4/pull/2496,1,['rout'],['routine']
Integrability,"## Description. housekeeping; ## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] enables plugins to access wfn python only (w/o `psi4.wavefunction()`), if they're not needing it c-side; - [x] removes pyparsing.py that was pcmsolver legacy and cleans up a few wrappers refs; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/377:297,wrap,wrappers,297,https://psicode.org,https://github.com/psi4/psi4/pull/377,1,['wrap'],['wrappers']
Integrability,"## Description; #2476 and #2594 indicate a major problem in Psi's SCF code: the simplistic formula `nalphapi = doccpi + soccpi` and `nbetapi = doccpi` is incapable of describing references where there are more beta than alpha orbitals of a given irrep. This occurs in MOM (where we instead use ugly hacks) and in UHF (where we crash). Furthermore, storing all of these irrep quantities is redundant. This PR remedies the situation by only storing `nalphapi` and `nbetapi`. `doccpi` and `soccpi` can be computed from these when needed. The Py-side API is unchanged `doccpi(), soccpi()`, while the C-side API changes from `doccpi_, soccpi_` to `doccpi(), soccpi()`. While we are doing some extra work to compute docc and socc every time they're needed, the computational cost is negligible in comparison to Fock diagonalizations, integral transforms, and tensor contractions. . To prevent scope creep, this PR aims solely to change the wavefunction. **This is a major undertaking and should not be done lightly.** A subsequent PR will fix the linked issues (if not fixed by this PR) and add them as test cases once the fix is confirmed. Obligatory @susilehtola ping. ## Todos; - [x] DOCC and SOCC are now computed rather than stored; - [x] MOM simplified; - [x] Lots of docc/socc replaced with alphapi/betapi where more appropriate; - [x] More auto; - [x] More dimension, fewer raw arrays . ## Checklist; - [x] Passes ctest and pytest (all, except addons). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619:860,contract,contractions,860,https://psicode.org,https://github.com/psi4/psi4/pull/2619,1,['contract'],['contractions']
Integrability,"## Description; **Currently a work-in-progress**. **Currently requires intel compiler**. Implements the simint two-electron integral library into Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Implement ENABLE_SIMINT option; - [X] Download & build via ExternalProject_Add; - [ ] Download & use precompiled library; - [X] Simint is being used rather than libint; - [ ] Batching interface to interface classes in libmints (partially done); - [ ] Use batching in JK objects (partially done); - [ ] Fix some GCC issues in simint; - [ ] Port new batching interface to libint & erd; - [ ] Higher AM, or split between simint and erd; - [ ] Derivatives (WIP in simint...). * **User-Facing for Release Notes**; - [ ] Hmmm. ## Questions; - [ ] Where to put tarballs (that is more permanent for psi4). Git is probably not a good idea. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533:451,interface,interface,451,https://psicode.org,https://github.com/psi4/psi4/pull/533,3,['interface'],['interface']
Integrability,"## Description; **What?** This PR creates the `IrrepedVector` class template. The `Vector` and `IntVector` classes now inherit from this, adding on methods that only make sense for that particular template instance. **Why?** During a refactor of the MOM code, I had to use `Vector` and `IntVector` features heavily and found this synchronization of the classes necessary to keep my sanity. **Who cares?** Obligatory pings to @hokru (who may want to create `FloatVector` for faster `dfocc` operations) and @lothian (who may want to create `ComplexVector` for magnetic spectroscopies). No reviews required. **How do I review this?** The changes to `export_mints.cc`, `vector.h`, `vector.cc`, `intvector.cc`, and `test_vector.py` are the heart of this PR. The rest are either compatibility changes or general code cleanup. Be warned that `iota` and the `sort` functions are needed for my upcoming MOM changes and are currently unused, and I've changed some functions to not use pointers. ## Todos; - [x] Created `IrrepedVector<T>`; - [x] `Vector` and `IntVector` inherit from `IrrepedVector<T>`; - [x] `Vector` and `IntVector` now have identical code logic; - [x] `iota` and `sort` methods are added; - [x] `IntVector` now has more functionality; - [x] Added bounds checking to several `IrrepedVector<T>` methods.; - [x] Increased test coverage of `Vector`; - [x] Added test coverage of `IntVector`; - [x] Silenced compiler warning about missing override; - [x] Removed several pointers from parameter types; - [x] Removed several pointers from return types; - [x] Changed convention from ""irreped"" to ""irrepped"". ## Checklist; - [x] Full ctest passed (before some trivial edits); - [x] `test_vector.py` passed . ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**; Jet approval **required** before merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:330,synchroniz,synchronization,330,https://psicode.org,https://github.com/psi4/psi4/pull/2628,1,['synchroniz'],['synchronization']
Integrability,## Description; - Update to adcc 0.15.0 and adapt interface (plural forms of keys have been deprecated).; - Add PE-ADC test as adcc now automatically detects PE ground states and includes appropriate corrections. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1914:50,interface,interface,50,https://psicode.org,https://github.com/psi4/psi4/pull/1914,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->. - [x] fix Eco (W) GHA by recognizing that updating the setup-miniconda version changed the environment path, so the find-the-iomp5-lib cmake cmd needed to change, too, for sapt.cc to compile.; - [x] wow, fixing Eco (M) GHA was not what I expected. To recap, without psi4 code changing or the binaries of any of our QC dependencies changing, Mac builds (Intel or Silicon) started issuing ""Illegal Instruction"" on Hartree--Fock water. :-( This affected any fresh conda env; for instance updating a ""working"" python 3.12.3 env to 3.12.4 was accompanied by many other package updates and led to a ""illegal instruction"" env upon recompiling psi. I know c-f has been updating how they handle the c stdlib (https://github.com/conda-forge/conda-forge.github.io/issues/2102). New environments apparently hit the new fundamental libraries, and those insert a breakpoint if you try to access out of bounds. So fixed the bounds error. :-). ```; (lldb) settings set -- target.run-args ""stage/bin/psi4"" ""../tests/tu1-h2o-energy/input.dat""; (lldb) run; Process 22217 launched: '/Users/loriab/linux/miniconda-silicon/envs/p4dev312cf_clone/bin/python' (arm64); Process 22217 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BREAKPOINT (code=1, subcode=0x11819b7e4); frame #0: 0x000000011819b7e4 core.cpython-312-darwin.so`std::__1::vector<double, std::__1::allocator<double> >::operator[][abi:fe180100](this=0x00000001013e5378 size=27, __n=27) at vector:1393:3; 1390	template <class _Tp, class _Allocator>; 1391	_LIBCPP_CONSTEXPR_SINCE_CXX20 inline _LIBCPP_HIDE_FROM_ABI typename vector<_Tp, _Allocator>::reference; 1392	vector<_Tp, _Allocator>::operator[](size_type __n) _NOEXCEP",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3194:632,depend,dependencies,632,https://psicode.org,https://github.com/psi4/psi4/pull/3194,1,['depend'],['dependencies']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Some setups were using a BLAS that doesn't support the extension AXPBY, so #2887 caused runtime can't-find-symbol errors. Most notably, this occurred for Mac users linking to Accelerate. This bypasses the trouble by rerouting to dscal+daxpy; - [x] clarifies who's getting scaled in the export docs.; - Note that the CI error was due to ongoing changes in QCArchive `next` branch. I've pinned the dep back a release so that psi4's interface to it can be fixed later. ## Questions; - [ ] Can someone confirm this works with the Accelerate setup? Below is a quick test.; ```; import psi4; import numpy as np. vecX = np.array([1., 1., 1.]); pvecX = psi4.core.Vector.from_array(vecX); print(pvecX.np) # 1. vecY = np.array([5., 5., 5.]); pvecY = psi4.core.Vector.from_array(vecY); print(pvecY.np) # 5. pvecX2 = pvecX.clone(); pvecX2.axpy(2.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 1.0, pvecY); print(pvecX2.np) # 11. pvecX2 = pvecX.clone(); pvecX2.axpby(2.0, 3.0, pvecY); print(pvecX2.np) # 13; ```. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895:750,interface,interface,750,https://psicode.org,https://github.com/psi4/psi4/pull/2895,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Psi doesn't use ambit directly so never has required a version. Now that it's had its python interface updated (kill the boost!), most uses in the presence of Psi4 will need the new version, so let's not let lingering old versions pass.; - [x] The ecosystem GHA seems to have settled in nicely to testing addons, so let's remove that responsibility from the Azure CI lanes.; - leaving dftd3 and gcp since they're fast, easy, and important; - now addons tested with less compiler variety on Linux, but I don't think that's too big a problem. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2546:189,interface,interface,189,https://psicode.org,https://github.com/psi4/psi4/pull/2546,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; - [x] Something about how CMake detects NumPy during FindPython is different between NumPy 1.22 and 1.23; only on Windows. No apparent changes in CMake FindPython. No apparent changes in conda NumPy recipe. All header files in the same places in a Windows c-f 1.22 and 1.23 NumPy distribution. Linux builds fine with a c-f NumPy 1.23. I don't know what's the real change, so we'll tell CMake where to look in the Azure recipe and pass the hint on to psi4/CM for the second `find_package(Python ...)`.; - [x] My other theory for solving the Azure problem was that my patched `anaconda-client` was behind the times. That wasn't the problem, but it's updated to v1.10.0 anyways.; - [x] Pinned qcelemental and qcengine in Windows recipe; * There's upcoming changes to those packages such that all of psi4 should be pinned and then advanced with the changes. This does that for the Windows recipe.; * fixes #2614 where Windows conda package had _no_ qcel pinning, so depending on channel order, sometimes took a really old qcel and pydantic. after this, channel order shouldn't matter. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2624:1052,depend,depending,1052,https://psicode.org,https://github.com/psi4/psi4/pull/2624,1,['depend'],['depending']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Collect enough extra docstrings and tweak enough references to functions so that all the links in the docs resolve.; - [x] Ended up needing mild to moderate docs renovation through whole QCA stack; - [x] Now can turn on Sphinx warnings-to-errors and nitpicky so that docs remain healthy; - [x] Added new doc extension dependency, https://github.com/mansenfranzen/autodoc_pydantic, so that Pydantic models (as introduced in #2575) now get superior, rather than inferior, autodoc compared to classes.; - [x] Add in a few more `__all__`s to driver files. ## Checklist; - ~Tests added for any new features~; - [x] Full tests run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2597:505,depend,dependency,505,https://psicode.org,https://github.com/psi4/psi4/pull/2597,1,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Nowadays, ctest (quick) followed by pytest (quick) runs a lot of duplicate tests (unless the latter uses ""quick and api""). Let's not do that. This switches Azure to ctest(smoke) followed by pytest (quick).; - before: ; - W: 1h30m; - L: 41-57m; - after:; - W: 1h5m; - L: 34-38m; - In working on dfocc, I found some stdsuite updates that hadn't been ported from qcng to psi4 and some general improvements.; - [x] better check expected vs intended modules. (can catch if the default compute module for a method+circs changes.); - [x] `test_*_default` in stdsuite changed meaning slightly. now PASSED means get final method answer correctly and XFAIL means known NYI. formerly, inputs that got the final method answer correctly but were not able to supply some submethod (like same-spin mp2 for ccsd) also got the XFAIL result.; - [x] have a mini ref file so can add reference data w/o waiting for a new qcengine release; - [x] regex and human-directed error messages to simplify and consolidate NYI methods testing. ## Checklist; - [x] Tests added for any new features; - [x] full stdsuite runs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2632:1142,message,messages,1142,https://psicode.org,https://github.com/psi4/psi4/pull/2632,1,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switch gcp interface to QCEngine; - [x] add dftd4 interface calling QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] more tests -- psiapi, parameters extend func; - [x] add docs; - [x] note min qcng version, prob. v0.19; - [x] this passes cleanly locally but that's with custom engine and dftd4, so several PRs ahead of this one; - [x] allow doi as citations for dft; - [x] note that for `Mol.run_dftd4`, func overrides parameters in keeping with dftd4 API behavior, whereas in dftd3, parameters extend or override func. ## Questions; - [x] @jeffschriber should fisapt grab 2-body disp analysis or total disp analysis; - [x] a couple of the interface updates should be in v1.4 but d4 itself can be in v1.5. so this can get split after upstream settles down. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Aug 2021 Notes; - [x] rebased. the only thing that's left of the original PR checklist is dftd4 itself. gcp and dftd3 updates were pulled in in #2180.; - [x] note that it's not the dftd4 exe that this (that is, qcng) needs; rather, it's the dftd4 pymod that's needed.; - [x] one _can_ use the c-f `dftd4-python` conda package if you know how to set up your env to install both it and psi4 deps. But for linux only, I've prepared a `dftd4` conda package (not in final build form) off `-c psi4/label/dev`. ## Status; - [x] Ready for review; - [x] Ready for merge. EDIT: closes #1710",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142:198,interface,interface,198,https://psicode.org,https://github.com/psi4/psi4/pull/2142,3,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; - [x] Upstream maintained and developed software for Grimme empirical dispersion corrections is now interfaced. The longstanding slight forks maintained by Psi4 folks still work and will be maintained until there's a reason not to. All are still run through QCEngine. Psi4 chooses automatically based on what's detected, so no change to input files needed. Package names and locations are a little different -- see table below. package | provides | pre-PR | post-PR; ---- | ---- | ---- | ----; D3; `psi4::dftd3` | `bin/dftd3` | preferred | works; `conda-forge::dftd3-python` | `import dftd3` | nyi | preferred; (dep) `conda-forge::simple-dftd3` | `bin/simple-dftd3` |; D4; `psi4::dftd4` | `bin/dftd4`, `import dftd4` | preferred | works; `conda-forge::dftd4-python` | `import dftd4` | nyi | preferred; (dep) `conda-forge::dftd4` | `bin/dftd4` | ; GCP; `psi4::gcp` | `bin/gcp` | preferred | works; `conda-forge::gcp-correction` | `bin/mctc-gcp` | nyi | preferred. - [x] Capabilities changed slightly between `dftd3` and `s-dftd3`. In particular, the former can also do -D2 and the latter can do 3-body -D3 in the same call as 2-body -D3. All Psi4 calls will continue to do only 2-body -D3 as default (regardless of `dftd3` or `s-dftd3` engine). That is, `-d3` is still an alias to `-d3zero` which is now an alias to a new extension `-d3zero2b`, which can now be given explicitly disallow 3-body as a tweakable parameter (internally, `s9:=0.0`). When `s-dftd3` is the engine, another set of new extensions, e.g., `-d3atm` alias of `-d3zeroatm` turns on 3-body (`s9=1.0`) and allows user tweaks. This latter is the same behavior as -D4, which turns on 3-body by default. If this seems confusing, state what calc you want — e.g., `energy(""b3lyp-d3atm"")` — and Psi4 will figure out if you have the right engine to do the job.; - [x] Previous to QCEngine v0.26.0 (required by this Psi4 PR), t",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:215,interface,interfaced,215,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['interface'],['interfaced']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `samples/` changes are autogenerated -- don't read them; - [x] update docs env to use psi4-path-advisor; - [x] the old versions of `variable`/`set_variable` fns on core and wfn have been warning-and-forwarding since v1.4 . we had a debugging case where that forward was the problem, so it's time to actually disable them. they'll still give upgrade advice but won't run; - [x] allow running a a GRID_ESP or GRID_FIELD property through qcschema. need to pass in grid.dat contents through `atin.extras[""extra_infiles""] = {""grid.dat"": <contents>}` and be sure to `atin.protocols.native_files = ""all""`, then one can retrieve through `atres.native_files[""grid_esp.dat""]` or `""grid_field.dat""` closes #2307 . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3095:1077,protocol,protocols,1077,https://psicode.org,https://github.com/psi4/psi4/pull/3095,1,['protocol'],['protocols']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. The purpose of this PR is the following:; - Fix #2871 . The bug observed when optimizing a molecule containing `Cl` atom using `geometric` via Psi4. . ## User API & Changelog headlines. - [x] Fixing compatibility with geometric 1.0. ## Dev notes & details. - [x] The atom list in Psi4 is upper-cased while geometric expects a capitalized one. This is not a problem for atom symbols containing a single letter like `H`, `C` etc. but becomes a problem for `Cl`, `Br` etc. ## Questions; - [x] Are there any tests of the Psi4/geometric interface?. ## Checklist; - [x] Tests added for any new features -> not a new feature; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2872:612,interface,interface,612,https://psicode.org,https://github.com/psi4/psi4/pull/2872,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->. `Molecule::atom_at_position` is supposed to return the index of the atom found in a specified radius of a specified point in 3D space, or -1 if no atom is found in the radius. The current implementation assumes there is never more than one atom within the given radius, and returns the index of the first atom found to be within the tolerance.; This can hypothetically happen in two ways: the atoms are either extremely close, or the tolerance is set to a large value. The new implementation behaves more like one would expect it to behave: under the aforementioned extreme circumstances it throws an exception and informs the user with an error message. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Detect corner case and throw error if encountered; - [x] Update docstrings to better describe implementation. ## Questions; - [x] Apparently, `qcdb.Molecule` has its own independent Python implementation of `atom_at_position`. As is, this PR means that calling `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` from a Python program may return different results for the same geometry, if the aforementioned corner case happens.; Not sure what to do about this, at first glance it would be neater if both `qcdb.Molecule.atom_at_position` and `psi4.core.Molecule.atom_at_position` ended up calling the same C++ implementation, but I am not sure how feasible that would be.; Thoughts?. ## Checklist; - [x] No new features; - [x] `ctest -j24` and `make pytest` both passed locally. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465:726,message,message,726,https://psicode.org,https://github.com/psi4/psi4/pull/2465,1,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; @carolinesargent identified a bug where running FSAPT with an external potential w/o having frozen the orientation with no_com + no_reorient would run but give the wrong answer. :-(. External potentials has long been one of those cases where we required the user to freeze the orientation at molecule creation time so that the potential could be set in the same frame. This couldn't be fixed driver-side because as soon as the `core.Mol` builds w/o freeze directives, it loses the original Cartesian coordinates. (The clone, set_nocom, set_noreorient calls in the driver allow _regular_ sapt to forego user setting by preventing the dimer, monoA, monoB from having different frames.). Happily, in the intervening period, @maxscheurer ran into exactly this problem for polarizable embedding potentials and solved it by tacking a copy of the original Cartesians onto the molecule. So we're applying this to FSAPT also. . I've been getting some segfaults that I think are a quirk of my directory, hence the cc31 testing. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixes bug where FSAPT with an external potential and without no_com/no_reorient set would return wrong answer. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Let's use this route to accommodate aux info in the frame of the Cartesianmol. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2934:1637,rout,route,1637,https://psicode.org,https://github.com/psi4/psi4/pull/2934,1,['rout'],['route']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; A lot of error exits in `libdpd` are implemented with `exit(1)` or equivalent. This makes debugging harder, and results in less informative error messages when a test fails in the CI environment. This PR modernizes all `exit(1)` error exits in `libdpd` into `throw PSIEXCEPTION`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now prints more detailed error messages if an error happens in its DPD module. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All `exit(1)` and `exit(PSI_RETURN_FAILURE)` calls in `libdpd` have been replaced with a `throw PSIEXCEPTION`. ## Checklist; - [x] No new features; - [x] CI tests are failing only due to libint being in flux. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117:226,message,messages,226,https://psicode.org,https://github.com/psi4/psi4/pull/3117,2,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Adds SAPT0-D and FISAPT-D routines, continuation of #1786. This code only works with the latest QCEngine commit, so it will fail the tests until the next QCEngine release. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Add SAPT0-D and FISAPT0-D, for any -D variant available to HF; - [X] Enable access to pairwise dispersion decomposition from dftd3; - [x] Adapt fsapt.py analysis to use -D dispersion info. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Test fsaptdiff.py. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:106,rout,routines,106,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['rout'],['routines']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; After the removal of `sem_test` in #2776, the only remaining internal user of `libqt/schmidt_add.cc` is `libqt/david.cc`. That too is destined for removal, if its only user in `dfocc` is removed by #2684. So it looks like `schmidt_add` could be removed in the future, when all of its callers are gone. To keep the promise of not randomly breaking API without fair warning, this PR deprecates the function, setting up its eventual removal. Note that this `schmidt_add` is not the same function as the `schmidt_add` in `cceom` or `detci`, even though the name is the same. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `int schmidt_add(double** A, int rows, int cols, double* v)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation message is added to `schmidt_add` in `libqt`. ## Questions; - [ ] This function was tagged as `PSI_API` in #1077 by @raimis, do we know why it was necessary back then?. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:1220,message,message,1220,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Around the time when the Boost dependency was being removed, some `PRAGMA_WARNING` manipulations were inserted, presumably to reduce warning noise during builds.; The Boost includes have since been removed and these are no longer necessary. `#include <memory>` thankfully does not require such guarding. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] No user visible changes. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Stop unnecessarily guarding `#include <memory>` with `PRAGMA_WARNING_IGNORE_DEPRECATED_DECLARATIONS` . ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3088:111,depend,dependency,111,https://psicode.org,https://github.com/psi4/psi4/pull/3088,1,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; As discussed in #2997 and #3117, no debugging information is produced in many places in Psi4. I believe this is because of improper calls to `exit()`, which is a remnant of the C history of Psi. #3117 replaces the calls to `exit()` with `throw`s in libdpd. This PR replaces the calls in the rest of Psi4. Sorry for the verbose changes; I ran clang-format on the files since my editor's indentation doesn't match that in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Obsoleted calls to `exit()` have been replaced by exceptions, which should better guarantee the passing of error messages to the end user. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Spurious calls to `exit()` have been removed in favor of exceptions, which should better guarantee error messages getting through to the user. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3118:792,message,messages,792,https://psicode.org,https://github.com/psi4/psi4/pull/3118,2,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Detci still has a few places where error termination is effected through printf+abort(). This PR replaces the calls to abort() in with `throw PSIEXCEPTION(msg)`. The rest of the codebase has more of this pattern, those are subject to future PRs to keep this one small. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] A few error terminations in the detci module now print a more detailed error information to the console, instead of just the error message in the output file. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Calls to `abort()` in detci are replaced with `throw PSIEXCEPTION(msg)`, where `msg` is the relevant error message taken from the context of the `abort()`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3168:653,message,message,653,https://psicode.org,https://github.com/psi4/psi4/pull/3168,2,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; For some poorly understood confluence of reasons, for some users error messages can _sometimes_ get completely lost when Psi4 exits with a `PSIEXCEPTION`, especially when a PSIO error happens.; This can be observed in recent bug reports, see:. - https://github.com/psi4/psi4/issues/2970; - https://forum.psicode.org/t/sapt0-calculation-crashes-pointer-error/2839. In both of these cases the users were only seeing the error message that has been written to `cerr`, but not the string that `PSIEXCEPTION` should have printed. IIRC when I tried to research this quite a while ago, I have found this may be a bug in some versions of libstdc++. This PR adds a simple workaround: the exception message is also printed to `cerr` in `psio_error`. The only side effect, is that some users, who are currently not affected by the lost message problem, may start getting the same error message twice when a PSIO error happens. Spammy error exits are not great, but PSIO errors are not supposed to happen too often, and when they do loosing the error message is more annoying than having it be duplicated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] PSIO error messages are now also printed to `cerr`, fixing an issue where (under some circumstances) large parts of the error message would never reach the user, . ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] The same error message that gets passed to `PSIEXCEPTION` is now printed to `cerr` before throwing in `psio_error`. ## Checklist; - [x] There is no easy way to add tests for ""are error messages getting delivered or not?""; - [x] Tests run by the CI ar",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2997:151,message,messages,151,https://psicode.org,https://github.com/psi4/psi4/pull/2997,5,['message'],"['message', 'messages']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; GT will trial this before it's ready for merging, but it's good to get eyes on it and to not lose track of the changes. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Users of QCFractal `next` can now customize protocols, tags, priorities, and owner_groups. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Allow psi4 to turn all the knobs qcportal allows: https://github.com/MolSSI/QCFractal/blob/next/qcportal/qcportal/client.py#L903-L915. ## Questions; - [x] @bennybp look ok? Ben has looked this over and approved. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3013:417,protocol,protocols,417,https://psicode.org,https://github.com/psi4/psi4/pull/3013,1,['protocol'],['protocols']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I have added an option to compute the necessary GRAC shifts for SAPT(DFT) automatically. I added a little extra logic to ""try harder"" at converging cations to hopefully fail less often if this option is specified. These changes will enable more users to call SAPT(DFT) more routinely in their workflows without having to consider acquiring GRAC shifts externally through their own logic or tabulated sources. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Automatically computes SAPT(DFT) GRAC shifts for monomer A and/or B; - [ ] Logic for trying extra options with level shifts to attempt to converge more cations in approximating the ionization potential. ## Questions; - [ ] Perhaps I should add a more challenging pytest in which the first cation SCF convergence attempt fails but the iterative options approach succeeds. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3232:354,rout,routinely,354,https://psicode.org,https://github.com/psi4/psi4/pull/3232,1,['rout'],['routinely']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; I was looking through the source code to understand what the `DFT_REMOVE_DISTANT_POINTS` keyword does, and realized I could not understand what the `remove_distant_points` function was doing. I also suspect that that code was partly wrong. This PR cleans up that function so that it now does what it should. However, it is also evident that the logic of this function is not optimal. Instead of checking if any nucleus is within the maximal spatial extent of the basis set, one should check if any nucleus is within the extent of that nucleus' basis functions. This is just a drive-by commit, as I don't think it's worthwhile to spend time on Psi4's quadrature code, since [IntegratorXX](https://github.com/wavefunction91/IntegratorXX/) and [GauXC](https://github.com/wavefunction91/GauXC) offer a reusable solution that could be used also in Psi4 with significant negative LOCs. . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3012:754,Integrat,IntegratorXX,754,https://psicode.org,https://github.com/psi4/psi4/pull/3012,2,['Integrat'],['IntegratorXX']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; It is done. The beast lays slain.; This PR replaces the last calls of the `sq_rsp` function in the `dfoccwave::Tensor2d::diagonalize` overloads with the new DSYEV wrappers, and removes the function and its file. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Deprecated `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` has been removed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Merge `dfoccwave::Tensor2d::diagonalize` overloads to minimize code dupliaction; - [x] Add machine-readable docstrings in the header file; - [x] `dfoccwave::Tensor2d::diagonalize` overloads now throw on non-square matrices or diagonalizer failure; - [x] Replace calls of `sq_rsp` with `DSYEV_ascending` and `DSYEV_descending`; - [x] Delete `sq_rsp` function and file. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2928:243,wrap,wrappers,243,https://psicode.org,https://github.com/psi4/psi4/pull/2928,1,['wrap'],['wrappers']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; Psi4 has wrappers for seven LAPACK functions which have been marked as deprecated by the LAPACK devs for a long time. These functions have also been marked as deprecated within Psi4. Luckily they are not marked as `PSI_API`, nor are they used by Psi4. This PR removes them. Note that the default git diff algorithm is getting confused by the repetitive text in `lapack_intfc.cc` and incorrectly indicates that some lines were added. The correct diff can be obtained with `--diff-algorithm=minimal` :; ```; $ git diff --stat --diff-algorithm=minimal master remove_deprecated_lapack; psi4/src/export_blas_lapack.cc | 7 -; psi4/src/psi4/libmints/psimath.cc | 50 --; psi4/src/psi4/libmints/psimath.h | 27 -; psi4/src/psi4/libqt/CMakeLists.txt | 19 -; psi4/src/psi4/libqt/lapack_intfc.cc | 1021 -----------------------------; psi4/src/psi4/libqt/lapack_intfc_mangle.h | 35 -; psi4/src/psi4/libqt/qt.h | 25 -; 7 files changed, 1184 deletions(-); ```. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires the LAPACK library to provide `DGGSVD3` and `DGGSVP3`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fortran, C and C++ style wrappers for `DGEGS`, `DGEGV,` `DGELSX,` `DGEQPF,` `DGGSVD,` `DGGSVP` and `DTZRQF` are removed.; - [x] CMake checks for the availability of `DGGSVD3` and `DGGSVP3` are removed. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2823:89,wrap,wrappers,89,https://psicode.org,https://github.com/psi4/psi4/pull/2823,2,['wrap'],['wrappers']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The `-H<path>` option for CMake is technically not part of the CMake public interface, it is not documented and was never meant for public use. Since CMake 3.13 there is a proper alternative, `-S<path>`, so Psi4 should use that and stop suggesting users to use `-H<path>`. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 no longer suggests users to use the undocumented `-H<path>` CMake option when building from source. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Replace `-H<path>` with `-S<path>` in CMake invokations. ## Questions; - [ ] I have no idea where to make a PR for fixing this in psi4-path-advisor. ## Checklist; - [x] No new features; - [x] CI tests are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2797:156,interface,interface,156,https://psicode.org,https://github.com/psi4/psi4/pull/2797,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The common thread of this PR is be more explicit in what calculations Psi4 can do and conveying that to the user at runtime and through the docs. In practice, this involves expanding the coverage of stdsuite, using those results to autogenerate docs tables, reconciling hand-generated docs tables, referring to all in runtime errors, and cleaning stuff up along the way. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] MRCC now called with `set qc_module mrcc` rather than ""mr"" prefix onto method; - [x] Many NYI messages, whether from ManagedMethodError, MissingMethodError, or plain ValidationError from run_* fns have changed their wording and added content. On the whole, this should be helpful, but if you're searching for particular phrasing, you'll likely need to adjust regexes.; - [x] New tables in the docs with details on accessible methods.; - [x] Arbitrary-order MPn no longer runable with ROHF. Arbitrary-order ZAPTn no longer runable with RHF.; - [x] Running DF through CCENERGY (experimental, expert only) may now require `set qc_module ccenergy`. ## Dev notes & details; - [x] running stdsuite writes a storage file, and a new document_capabilities script turns the storage file into various tables that newly (1) include all-electron/frozen-core info (notated ""aefc"" in places), (2) show default modules and default e.g., mp2_type, (3) cover most single-ref ground-state total-energy methods, (4) are proven to honor return val and qcvar contracts. details of how and why this works are at [psi4/share/psi4/scripts/merge_stdsuite.py](https://github.com/psi4/psi4/pull/2731/files#diff-4a81ee0fb4705fe6acd6ac7f6417f5a899437a93780329a5f647a94eea425c24R8) . If you want to suggest changes to notation, keep in mind that main-body cell contents must be expressible in a single unicod",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2731:718,message,messages,718,https://psicode.org,https://github.com/psi4/psi4/pull/2731,1,['message'],['messages']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; The version of ADCC that the Psi4 CMake system currently requires (and tries to build if not found) is incompatible with C++17, and thus always fails to build. See https://github.com/adc-connect/adcc/issues/131 for the error message. This error was also mentioned in issue #2572.; This has been resolved by the ADCC/libtensor devs since, so bumping the required/built ADCC version to the latest release should fix _this particular_ issue with the ADCC build process. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Psi4 now requires ADCC version 0.15.13 or newer.; - [x] Fixed issue where building Psi4 from source with the ADCC plugin enabled-but-not-found resulted in a build failure with the error message `ISO C++17 does not allow dynamic exception specifications`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] CMake now looks for ADCC 0.15.13 or newer, if not found the 0.15.13 tarball is downloaded and built. ## Checklist; - [x] No new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2785:305,message,message,305,https://psicode.org,https://github.com/psi4/psi4/pull/2785,2,['message'],['message']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; These functions are relics from Psi3 (or before?) and they have many issues, unfortunately one of them is their function signature. Stemming from the awful interface, users of `rsp(...)` and `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. To keep the promise of not randomly breaking API without fair warning, this PR deprecates said functions but keeps them usable. After #2776, `rsp(...)` has no internal callers left. As for `sq_rsp(...)`:. - many former callers of `sq_rsp(...)` have turned out to be unused functions and have been removed; - If #2686 is merged the vast majority of remaining callers are migrated to a new wrapper around DSYEV; - The remaining call sites of `sq_rsp(...)` will all be in `dfocc`, which is not touched for the time being to avoid causing merge conflicts for the many pending PRs for that module. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` function `void rsp(int nm, int n, int nv, double *array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present.; - [x] `PSI_API` function `void sq_rsp(int nm, int n, double **array, double *evals, int matz, double **evecs, double toler)` is deprecated and 1.7 will be the last release with it present. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Added deprecation notices to `rsp(...)` and `sq_rsp(...)`. ## Checklist; - [x] No new features; - [x] Tests pass as per Lori. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2798:236,interface,interface,236,https://psicode.org,https://github.com/psi4/psi4/pull/2798,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR allows for using basis sets from the Basis Set Exchange library (https://github.com/MolSSI-BSE/basis_set_exchange) directly in psi4. To use a basis set from the BSE, you prefix the name of the basis set with `bse:`. Optionally, you can specify the version with a suffix (like `:1`). ```; # use most recent def2-tzvp version; set basis bse:def2-tzvp. # specifically use version 0 of sto-3g; set basis bse:sto-3g:0; ```. Also can be used with `assign`. ```; basis {; assign DZ; assign C bse:sto-3g:0; }; ```. Using these of course requires that the BSE be installed. This should be accessible from both schema/json and psithon. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Add capability to use basis sets from the Basis Set Exchange. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Adds optional dependency to basis_set_exchange; - [x] Adds handling for basis sets that start with `bse:`; - [ ] Modifies some regexes to allow for colons in basis set names. ## Questions; None. ## Checklist; - [x] Optional dependency added to build chain; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905:1203,depend,dependency,1203,https://psicode.org,https://github.com/psi4/psi4/pull/2905,2,['depend'],['dependency']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This PR builds upon the functions added in #2711 and #2700 to provide more informative error messages if a `SYSTEM_READ`, `SYSTEM_WRITE` or `SYSTEM_LSEEK` fails, including the OS-provided error message, which may have clues for the cause of the error (disk is full, no permission, etc). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] Error messages related to some IO errors are now more specific and detailed. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] New function: `psio_compose_err_msg`. This helps composing PSIO error messages without too much code duplication. It can optionally take an errno value and tack on the error message provided by the OS.; - [x] `psio_volseek` has been reworked to handle any errors internally by calling `psio_error`, instead of returning -1 on error. Appropriate error message generation and some `const` qualifiers were added.; - [x] `PSIO::rw` has been adapted to the changes to `psio_volseek` and error message generation was added after each read/write/seek.; - [x] Functions in `toclen.cc` are now also using `psio_compose_err_msg` to generate messages. ## Checklist; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756:173,message,messages,173,https://psicode.org,https://github.com/psi4/psi4/pull/2756,8,['message'],"['message', 'messages']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. I have no idea how the integrals work in Psi4. I followed [a Psi4Numpy example](https://github.com/psi4/psi4numpy/blob/master/Moller-Plesset/DF-MP2_NAF.py) @loriab hinted me at. The appears to compile; the only problem being the final assembly, i.e. the sum over the 3-center integrals. If anyone can tell me what I should be doing, help would be appreciated... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Implement scheme and get something that matches ERKALE; - [ ] Use optimal storage. ## Questions; - [ ] Is the basis build call correct? Should I also add a new basis role somewhere?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3036:531,contract,contracted,531,https://psicode.org,https://github.com/psi4/psi4/pull/3036,1,['contract'],['contracted']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is an implementation of the fitted version of the SAP guess, described in [J. Chem. Phys. 152, 144105 (2020)](https://doi.org/10.1063/5.0004046). The repulsive potential on every atom is fit in terms of error function potentials, which means that the guess can be evaluated with few two-electron integrals; namely. $$ {\bf F}^\text{SAP} = {\bf H} + {\bf V}^\text{SAP} $$. $$ V_{\mu \nu}^\text{SAP} = \sum_{A} (A|\mu \nu) $$. where $A$ is a fully contracted $1s$ function on each atom. The implementation is not optimal, since I use `ao_eri` to compute the integrals. An optimal implementation would accumulate the auxiliary functions' integrals on-the-fly; however, optimization can be safely left to a later stage... Closes #2054 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Implement scheme and get something that matches ERKALE. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3039:531,contract,contracted,531,https://psicode.org,https://github.com/psi4/psi4/pull/3039,1,['contract'],['contracted']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This is picked out of #2413 as independent. Depending on the version of l2, this'll either issue warnings (psi4 l2 fork where `INT_NCART` is still macro) or errors (l2 master where `INT_NCART` now inline fn) when building psi4. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2429:124,Depend,Depending,124,https://psicode.org,https://github.com/psi4/psi4/pull/2429,1,['Depend'],['Depending']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request adds electrostatic embedding capabilities to the F-SAPT code. Previously, the point charges could only be assigned to the environment. Now point charges can be included with either the interacting fragments A and B or the external environment C. This PR adds support only for point charges. Future PRs can potentially add support for more complex external potentials but this is not intended here. The external potential interface is currently under revision in #2069. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Add electrostatic embedding to the F-SAPT code. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131:519,interface,interface,519,https://psicode.org,https://github.com/psi4/psi4/pull/2131,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; This pull request fixes the functionality of the EMBPOT perturbation to the core Hamiltonian in SCF calculations and adds appropriate gradients for the EMBPOT potential. The EMBPOT perturbation works by reading x, y, z, w, and v coordinates from a file (`EMBPOT`) during the call to `HF::form_H()`. The core Hamiltonian of the `HF` object is then modified to include a contribution that is calculated by performing numerical integration of the basis over the EMBPOT coordinates, weights, and potentials. This functionality assumed that the values of phi calculated in the `BasisSet::compute_phi()` routine are always in a cartesian basis and not in a spherical basis, which was true up until the fix in #2210, which was included in the 1.4 release. Accordingly, an unnecessary AO to SO transformation is applied in the `HF::form_H()` routine every time, which results in inaccurate EMBPOT matrices being added to the core Hamiltonian. In order to correct this in the current version of Psi4, I have removed the AO to SO transformation and call `BasisSet::compute_phi()` on an appropriately sized vector. I have also added numerical gradients over the EMBPOT potential using the gau2grid library. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The user may supply an arbitrary potential evaluated on a numerical quadrature grid to an SCF calculation by saving the x, y, z, w, and v values to a human-readable `EMBPOT` file. The first line of the `EMBPOT` file must have the number of points inside of the file. The user must also include `set perturb_h true` and `set perturb_with embpot` in the Psi4 input. The potential will then be evaluated and included in the core Hamiltonian construction, and energy and gradient calculations. ## Dev notes & details; <!-- A bullet-point format description",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3239:505,integrat,integration,505,https://psicode.org,https://github.com/psi4/psi4/pull/3239,3,"['integrat', 'rout']","['integration', 'routine']"
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; To implement the SAP guess (#3036), I need to toy with the contraction coefficients. Currently, there is duplicated data in BasisSet, as the Libint2 shells are built alongside the basis set itself. The idea of this PR is to modularize the Libint2 shell data creation so that the data can be refreshed based on the data in the BasisSet. The PR also fixes an issue in that the `n_prim_per_shell_` member of BasisSet was never populated. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3037:139,contract,contraction,139,https://psicode.org,https://github.com/psi4/psi4/pull/3037,1,['contract'],['contraction']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; `Matrix::swap_rows` and `Matrix::swap_columns` do no seem to have any internal users, but since `Matrix` as a whole is `PSI_API`, it would be rude to suddenly remove them. This PR adds deprecation notices. The motivation for removal is that these two functions are the only internal users of the DSWAP BLAS interface. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] `PSI_API` functions `Matrix::swap_rows` and `Matrix::swap_columns` are now deprecated due to a lack of users. Unless someone speaks up, 1.8 will be the last release to have them. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Deprecation notices added to `matrix.h`. ## Checklist; - [x] No new features; - [ ] CI tests are passing. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909:387,interface,interface,387,https://psicode.org,https://github.com/psi4/psi4/pull/2909,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; closes #3016 (supersedes); closes #3084 . ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] For users, replaces the `psi4-dev` conda package that brought psi4 build dependencies and a ""psi4-path-adivsor.py` script that produced cmake configure lines. Now, that script is in-repo at `conda/psi4-path-advisor.py` and running the help menu provides the following. This should be more configurable for folks who like to choose all conda or byo.; ```; =========================================; (A) black-box usage (copy/paste-able); =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2) generate env spec file from codedeps.yaml. ""eval $(...)"" creates and activates conda env.; eval $(conda/psi4-path-advisor.py env); # (3) generate cmake cache file from conda env. ""eval $(...)"" configures and builds with cmake.; eval $(conda/psi4-path-advisor.py cmake); shows up in p4dev; =========================================; (B) flexible usage; =========================================; # (1) get code from GitHub; git clone https://github.com/psi4/psi4.git && cd psi4; # (2.0) consider dependency options; conda/psi4-path-advisor.py env -h; # (2.1) generate env spec file from codedeps.yaml.; conda/psi4-path-advisor.py env -n p4dev310 --python 3.10 --disable addons --lapack openblas; #> conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; # (2.2) edit env_p4dev310.yaml to customize software packages.; # (2.3) issue suggested or customized command to create and activate conda env.; conda env create -n p4dev310 -f /home/psi4/env_p4dev310.yaml && conda activate p4dev310; ```; - [x] For packagers or other high-level what-does-it-need folks, dependency info is programmatically available ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3021:368,depend,dependencies,368,https://psicode.org,https://github.com/psi4/psi4/pull/3021,1,['depend'],['dependencies']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~Ignore this for now. This is so I can get a build snapshot.~ It might well fail tests b/c needs qcel and qcng snapshots. Full tests is clean locally. Changes for the most part are RTG except for two lines noted below. UPDATE: go ahead and review, please. I'll take out the 2 improper lines noted below before merge. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] report FD G & H more fully in core and wfn vars; - [x] add MP2 Hessian testing to stdsuite; - [x] I guess the a-ccsd(t) docs changes didn't make it into #2241 ?; - [x] some cfour interface expansions that are really only useful for internal debugging. use the regex harvesting from qcng, not here; - [x] this bit https://github.com/psi4/psi4/compare/master...loriab:sept21qcdb?expand=1#diff-3abbb4f37a59cc2e6cfbff3f4cb73b312dfd94044a19f38b00bf7ae140db13e7R540-R541 needs removing before actual merge is considered. proper way to handle would be if the select_ccsd_gradient was smart enough to say ""can't do"" to FC gradients, so it'd fall back to FD by ene. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2293:683,interface,interface,683,https://psicode.org,https://github.com/psi4/psi4/pull/2293,1,['interface'],['interface']
Integrability,"## Description; <!-- Provide a brief description of the PR's purpose here. -->; ~for now must enable with `-D ENABLE_IntegratorXX=ON`. recc installing catch2 first to avoid downloading each time.~. ~CI will fail because I added a integratorxx header to a file for trial, but haven't enabled the addon in the buildsys everywhere.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] optionally build integratorXX with `-D ENABLE_IntegratorXX=ON`. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3041:230,integrat,integratorxx,230,https://psicode.org,https://github.com/psi4/psi4/pull/3041,2,['integrat'],"['integratorXX', 'integratorxx']"
Integrability,"## Description; @hokru recently reported that when he attempted to use `dfomp2` through `dfocc` to compute dipoles, he was not able to reproduce ORCA's RI-OMP2 to within even 0.01 a.u. I determined by comparison to my own Psi4Numpy implementation of DF-OMP2 that this was an error in the `dfocc` module and eventually tracked it down to `dfocc` sending the wrong orbitals to `OEProp`. The primary purpose of this PR was to fix that and get density-fitted orbital optimized properties hooked up to the driver. ...Unfortunately, adding a test that the remaining dipoles are correct required me to fix some other standing `dfocc` issues that prevent users from setting tight convergence (#1143). That in turn required quite a few test changes. While working through that, I also solved #1509. The 0.7 mHartree difference I was seeing was due to another bug in `dfocc`. It computed the MP2.5/MP3 energy by adding to the _SCF reference_ and not the current determinant. Those are different things in orbital-optimized methods. When you add in the correct reference energy, the disagreement reported in #1509 goes away. In brief, this PR fixes #1143 and fixed #1509. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a bug where `dfocc` properties were incorrect; - [x] Add a test that the `dfocc` properties are now correct; - [x] Hook up `dfocc` properties to the driver; - [x] Fix a bug where DFOMP2.5/DFOMP3 energies could be incorrect depending on convergence settings; - [x] Simplified/Sanitized handling of convergence criteria in `dfocc`; - [x] Modified `dfocc` tests due to above. ## Checklist; - [x] `ctest -L dfo` and `ctest -L cdo` pass; - [x] `test_dipole.py` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1772:1486,depend,depending,1486,https://psicode.org,https://github.com/psi4/psi4/pull/1772,1,['depend'],['depending']
Integrability,"## Description; A few testing bugs and completing the pytest access route. Nothing controversial. Most of this PR is autogenerated. Due diligence on review can be achieved by examining:; * `empirical_dispersion.py`; * `addons.py`; * `extern1/input.dat`; * `tester.py`; * `test_addons.py`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] fixed bug that wouldn't allow plain pytest of installed `psi4/` b/c would bring in incorrectly configured qcdb tests. workaround was to pytest `psi4/tests/`; - [x] add a couple corrections I had promised to #2536 but had forgotten to push; - [x] fixes #2548 by passing psi4's `-n` to qcng for dftd3/gcp/mp2d; - [x] corrects `dfmp2-freq2` ctest was registered as `dfmp2-freq1`; - [x] I realized externalpotentials weren't getting unset after a energy/grad/etc. command. This is probably a new bug after #2515 but didn't confirm. It's healed in DDD, but the solution didn't port, so I added the test and temporary workaround to extern1; - [x] Added feature to ctest_runner to allow directory structure to be copied into test scratch for psithon2. This is proven to work but needs a couple lines added to qcengine, so hidden for now.; - [x] Fixed resp addon tests that always failed in parallel. these write to fixed-name files that aren't configurable, so they need to be chdir'd, if not run serially.; - [x] Added a script tester.py that checks some config stuff and writes out missing `test_input.py`. See the goals there for details. Running it produces a list of flaws like the below. I'll post this to an issue for later attention. Someday this can be hooked up to GHA and replace the perl script.; ```; Complaints; ----------; - [ ] 1. cc5: missing cmake directory registration. `vi CMakeLists.txt`; - [ ] 2. cookbook/manual-sow-reap: missing cmake directory registration. `vi cookbook/CMakeLists.txt`; - [ ] 3. cookbook/manual-sow-reap: missing CMakeLists. `vi cookbook/manual-sow-reap/CMakeLists.txt",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2549:68,rout,route,68,https://psicode.org,https://github.com/psi4/psi4/pull/2549,1,['rout'],['route']
Integrability,"## Description; A step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; - [x] removes or py3-izes scripts; - [x] addresses the floats part of #1375 by; - expanding the variable operations on `Wavefunction`; - making their storage always uppercase and their access case-insensitive; - dev alert: any code that wrote to wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needed to be changed to `wfn.set_variable`; - [x] adds runtime FutureWarning to renamed fns: `psi4.core.get_variable`, psi4.core.get_variables`, `Wavefunction.get_variable`; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on `wfn` c-side, then just copy into `P::e.globals` in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS8; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables_`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`; - `core.variable` now throws when you access a key not set. This is what `Wavefunction.variable` did before, but `core.variable` used to just create the key and set to 0. ## Questions; - [ ] FutureWarning provides the offending line. However, this is complicated by our promoting the get_variable namespace and the PsiAPI and Psithon calling routes. It's going to be hard to get this offending line printing universally right. It's hit and miss now. ## Checklist; - [x] full tests. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1381:1610,rout,routes,1610,https://psicode.org,https://github.com/psi4/psi4/pull/1381,1,['rout'],['routes']
Integrability,"## Description; A typo in the overlap integral second derivatives caused errors in the analytic hessians. The error seems to be confined to one of the three contributions to matrix elements where the angular momentum in the bra and ket differ, and only when the derivatives both refer to the same perturbation; which is why the code made it through the initial tests. I'm still trying to wrap my head around exactly why those tests work, so I'd like a day or two before this is ready to merge. My sincere apologies to all whom this bug inconvenienced. Fixes #791 and #901. ## Todos; Notable points that this PR has either accomplished or will accomplish. * **User-Facing for Release Notes**; - [ ] Fixed a bug in the analytic Hessian code. ## Questions; - [x] Which extra tests do you have in mind, @loriab?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/903:388,wrap,wrap,388,https://psicode.org,https://github.com/psi4/psi4/pull/903,1,['wrap'],['wrap']
Integrability,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1039:247,depend,depends,247,https://psicode.org,https://github.com/psi4/psi4/pull/1039,1,['depend'],['depends']
Integrability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:446,interface,interface,446,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['interface'],['interface']
Integrability,"## Description; Added a dictionary-based method for implementing density functionals. All non-dispersion versions of original functionals are working with some exceptions, the new definition of functionals has ""TEST-"" prefix for now. Not working functionals are: HF+D and HJS-B88 which do not run, HF3C for unknown reason, B97-D which should be -D2 not -D3 corrected in master. Some dispersion corrected methods already implemented - all BLYP functionals, for example. Script used for testing attached:; [test.dat.txt](https://github.com/psi4/psi4/files/1735039/test.dat.txt). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fix for Issue #920 ; - [x] Easy implementation of new functionals; - [x] LibXC parameters (ALPHA, BETA, OMEGA) now exposed to python; - [x] Check functionals against Q-Chem; - [ ] oPBE-D, oTPSS-D, oPWLYP-D ,oBLYP-D, TPSSh-D3BJ - not included in PR #880 ; - [x] B97-D; - [x] wB97X-D3 - needs tweaks - was disabled.; - [x] DSD-***; - [x] [PBE]HF3C; * **User-Facing for Release Notes**; - [ ] Eventually: let user pass a dict to psi4 with custom functionals? . ## Questions; - [ ] What do you think about the current interface?. ## Status; - [x] Dashparams for functionals need to be migrated too.; - [x] Ready to go - from my PoV at least.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/922:1206,interface,interface,1206,https://psicode.org,https://github.com/psi4/psi4/pull/922,1,['interface'],['interface']
Integrability,"## Description; Added the one line `ao_multipole_potential` function to `export_mints.cc`. This allows the user to access one-center integrals from the python interface. The most common use case for this is to calculate electrostatic potential and field from an auxiliary basis set expansion of the electron density. ## User API & Changelog headlines; - added `ao_multipole_potential` to `export_mints.cc`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - Makes no changes to existing `export_mints.cc`; - Adds a function to grab One Body Integrals for a given basis set. ## Checklist; - [x] [All or relevant fraction of full tests run]. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2744:159,interface,interface,159,https://psicode.org,https://github.com/psi4/psi4/pull/2744,1,['interface'],['interface']
Integrability,"## Description; Adds Python interfaces and code to semicanonicalize MCSCF orbitals. ## Todos; * **Developer**; - [x] Tested to make sure resulting orbitals diagonalize docc, actv, and virt blocks of average Fock matrix. ## Questions; - [x] By default MCSCF orbitals are semicanonicalized, unless user requests natural orbitals. This seems the most sensible choice, OK with other devs?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/722:28,interface,interfaces,28,https://psicode.org,https://github.com/psi4/psi4/pull/722,1,['interface'],['interfaces']
Integrability,"## Description; Adds ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Fixes #1407 . ## Todos; - [x] Callable ATM correction from DFTD3 using `<func-name>-atmgr`; - [x] Moves all the dftd3 interface stuff out of psi and now calls qcengine MolSSI/QCEngine#46; - [x] Adds mp2d energies, also through qcengine. ## Questions; - [x] I've added QCEngine as if it were a required dependency. This is debatable, but there'll be lots of things we'll want to run this way, possibly efp/efp, geometric, pyoptking, etc. Let's debate. ## Notices; - For this month as things move quickly, I'm not copying (light py) packages over from conda-forge to psi4 channels. You'll have to `-c psi4/label/dev -c conda-forge` during `conda install` at times. (drat, there's a libxc on c-f and old qcel on psi4, which means that there's not a good channel ordering ...). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1491:231,interface,interface,231,https://psicode.org,https://github.com/psi4/psi4/pull/1491,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"## Description; Adds capabilities for magnetic dipole derivative integrals and exports them to Python side for use in calculating VCD. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds origin dependence to electric dipole derivatives in `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/dipole.cc`; - [x] Implements `compute_pair_deriv1()` function in `psi4/src/psi4/libmints/angularmomentum.cc`; - [x] Adds `.def(""ao_ang_mom_deriv1"")` and `.def(""mo_ang_mom_deriv1"")` binding to `psi4/src/export_mints.cc`; - [x] Adds `ao_ang_mom_deriv1()` and `mo_ang_mom_deriv1()` definition/declaration to `psi4/src/psi4/libmints/mintshelper.cc(h)`; - [x] Adds `ao_ang_mom_deriv1_helper()` helper function to `psi4/src/psi4/libmints/mintshelper.cc(h)`. ## Questions; - [x] Ideas on how to test these once implemented? Considering using finite difference to check my implementation rather than comparing to another code. Thoughts?. ## Checklist; - [ ] Add test in `/tests/pytests/test_mints.py`; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1852:245,depend,dependence,245,https://psicode.org,https://github.com/psi4/psi4/pull/1852,1,['depend'],['dependence']
Integrability,"## Description; Adds hostname printing to output file header, and stop time to output file ""footer"" before success/failure beer/coffee message. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/947:135,message,message,135,https://psicode.org,https://github.com/psi4/psi4/pull/947,1,['message'],['message']
Integrability,"## Description; Adds the DLPNO-MP2 method to Psi4. Callable as `energy('dlpno-mp2')`. DLPNO-MP2 (or domain-based local pair natural orbital MP2) is the method described in the following paper:. [Pinski, Peter, et al. ""Sparse maps—A systematic infrastructure for reduced-scaling electronic structure methods. I. An efficient and simple linear scaling local MP2 method that uses an intermediate basis of pair natural orbitals."" The Journal of chemical physics 143.3 (2015): 034108](https://doi.org/10.1063/1.4926879); ; DLPNO-MP2 recovers about 99.9% of the DF-MP2 correlation energy, and scales much better in both time and memory. The following graph compares this implementation with Psi4's DF-MP2 code on linear alkanes (18 core i9-10980XE, 200 GB, cc-pVTZ basis):. ![alkanes](https://user-images.githubusercontent.com/16376046/105784584-b38e7180-5f3e-11eb-97ce-9e5d05896d82.png). ## Todos; - [x] Implement DLPNO-MP2; - [x] Add tests; - [x] Add docs. ## Questions; - [x] Are there any other ways that this calculation should be routed? In particular, should `DLPNO` be an option for the `MP2_TYPE` keyword? Should DLPNO be an option for `QC_MODULE`?; - [x] Related to the previous question, suppose a user wants to run a SCS DLPNO-MP2 calculation. How should that be parsed? Not a big deal if that isn't supported.; - [x] How best to handle DLPNO options? There are many thresholds associated with this method, but the error and cost of the method are primarily controlled by just two of them: `T_CUT_DO` and `T_CUT_PNO`. Should the other options be user-facing at all? For now, I've marked them expert. Opinions from anyone with experience running local correlation methods are welcome here. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093:1030,rout,routed,1030,https://psicode.org,https://github.com/psi4/psi4/pull/2093,1,['rout'],['routed']
Integrability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:584,wrap,wrapper,584,https://psicode.org,https://github.com/psi4/psi4/pull/2022,1,['wrap'],['wrapper']
Integrability,## Description; Allows optking to take gradients from the nbody wrapper. Fix VMFC gradient and Hessian and CP total data. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Connect optking with nbody gradient.; - [x] Add VMFC gradient and Hessian.; - [x] Correct CP-corrected total data.; - [x] Fix a few bugs.; - [x] Add electrostatic embedding.; - [x] Add multi-level many-body expansion. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042:64,wrap,wrapper,64,https://psicode.org,https://github.com/psi4/psi4/pull/1042,1,['wrap'],['wrapper']
Integrability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:298,interface,interface,298,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['interface'],['interface']
Integrability,"## Description; At long last, kill the Fork!. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adjust LibxcFunctional for new tweakers interface. Have to pad tweakers array sometimes; - [x] ~Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block~. ## Questions; - [ ] Need to find out from M. Oliveira if there's a released version with this interface. tagged 5.0.0; - [ ] https://gitlab.com/libxc/libxc/issues/61. ## Checklist; - [ ] ~Tests added for any new features~; - [x] Any fctl involving PW91 is failing. Keeps segfaulting when I uncomment that block; ```; 	372 - dft-custom-dhdf (Failed); 	373 - dft-custom-hybrid (Failed); 	376 - dft-bench-ionization (Failed); 	377 - dft-bench-interaction (Failed); ```; - [x] All tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge. closes #2057",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101:201,interface,interface,201,https://psicode.org,https://github.com/psi4/psi4/pull/1101,2,['interface'],['interface']
Integrability,"## Description; At long, long, long last fixes #1777 and fixes #1793. We now DIIS on the combined vector of orbital rotation amplitudes and T2 amplitudes. This is the approach taken by the orbital-optimized DCT code, which has not had nearly the problems that the `occ` module has had with orbital convergence. `occ` should now have much more robust convergence and _not_ be one of the banes of the test suite. In addition, full tests now pass, minus things involving conda dependencies. `v2rdm_casscf` was (unsurprisingly) segfaulting, and I was getting an error with `mp2d` that seems to trace back to me having an outdated version of QCEngine. I had to make some changes to `opt-irc-2` to get the test suite working. See #1793 for my diagnosis of the problem. In brief, the IRC in Psi can overshoot the endpoint, causing some numerical instability in the steps post-overshoot. This is a problem to fix in PyOptking, so I just changed the test value. This concludes the OCC's Open-Heart Surgery series. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Coupled orbital and amplitude DIIS for improved convergence in `occ`; - [x] Validated every `occ` test with OMP2, OMP3, OMP2.5, OCEPA that uses no spin-scaling against Psi4Numpy implementations converged with obsessive tightness. ## Checklist; - [x] Full tests pass, except for conda dependencies. That means `ctest` and `pytest`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846:474,depend,dependencies,474,https://psicode.org,https://github.com/psi4/psi4/pull/1846,2,['depend'],['dependencies']
Integrability,"## Description; At the risk of gaining a reputation for single-character PR's, I think I have a fix for #1596. The extra character in the error message looked suspicious, so I nuked it and the `adc` tests still pass. I'll show the output of the OP's calculation below. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix a probable typo in ADC, which introduced a bug. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1599:144,message,message,144,https://psicode.org,https://github.com/psi4/psi4/pull/1599,1,['message'],['message']
Integrability,"## Description; Ben Pritchard has been extensively revamping QCFractal/QCArchive. It has reached the point that the QCFractal `master` branch (latest release v0.15.8) will get no more support, and the `next` branch (no releases or conda packages) is in beta testing. This PR switches Psi4 distributed driver from `master` to `next` interfaces. It shouldn't affect many, if any. Only affects ppl running Psi4 and have `client = FractalClient(...)` in their inputs. User-side, was:; ```; from qcfractal.interface import FractalClient; client = FractalClient(""localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. User-side, now:; ```; from qcportal import PortalClient; client = PortalClient(""http://localhost:7777"", verify=False); ...; plan = gradient('scf', dertype=0, return_plan=True); plan.compute(client); ret = plan.get_results(client); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Updates interface for QCFractal `next`. Core snippet written by Ben.; - [x] ADDED: Also, updated to `task_config` from `local_options`. This isn't urgently needed, but it'll silence a repeated warning, at the cost of requiring latest qcng and hence latest qcel. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] I've tested it on GT cluster. Various calls were changed out for new ones. I'm not sure if error handling is any worse or better. ## Status; - [x] Ready for review; - [ ] Ready for merge, no particular hurry",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645:332,interface,interfaces,332,https://psicode.org,https://github.com/psi4/psi4/pull/2645,3,['interface'],"['interface', 'interfaces']"
Integrability,## Description; Breaks off documentation and `.travis.yml` linting off of #809. I have added a `.pre-commit-config.yaml` that will check for:; - Filenames that would conflict on a case-insensitive filesystem; - Files that contain merge conflict strings.; - Python formatting with YAPF.; - C++ formatting with clang-format. Hooks are **opt-in** and require you to install [`pre-commit`](https://pre-commit.com/) (with pip or conda) and then run `pre-commit install` to integrate the actual hooks. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Document code style and how to enforce it.; - [x] Add `.pre-commit-config.yaml` and explain how to use it.; - [x] Use build stages on Travis and lint/clean up `.travis.yml` . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1594:468,integrat,integrate,468,https://psicode.org,https://github.com/psi4/psi4/pull/1594,1,['integrat'],['integrate']
Integrability,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:26,depend,dependencies,26,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['depend'],['dependencies']
Integrability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:290,interface,interface,290,https://psicode.org,https://github.com/psi4/psi4/pull/1577,1,['interface'],['interface']
Integrability,"## Description; CI updates. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is detined for the release notes. May be empty. -->; - [x] geometric 1.0 compatible. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] update interface to geometric for 1.0 release; - [x] closes #2749 . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2750:473,interface,interface,473,https://psicode.org,https://github.com/psi4/psi4/pull/2750,1,['interface'],['interface']
Integrability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:73,contract,contracting,73,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,['contract'],"['contracting', 'contractions']"
Integrability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:581,depend,depend,581,https://psicode.org,https://github.com/psi4/psi4/pull/1289,2,"['Depend', 'depend']","['Depending', 'depend']"
Integrability,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:154,integrat,integrate,154,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['integrat'],['integrate']
Integrability,"## Description; Changes to psi4 for MDT interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] adds an optional history object to the optimize output. This object contains energies, gradients, and coordinates for the molecule at each step of the optimization. Hooked up to MDT.; - [x] adds normalmode displacement export to the api and optional saving of normal modes to the wavefunction.; - [x] Adds handling of several one-electron properties to the API and saves them to the wavefunction. ## Status; - [ ] Ready for comment but not for final merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/772:40,interface,interface,40,https://psicode.org,https://github.com/psi4/psi4/pull/772,1,['interface'],['interface']
Integrability,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:49,depend,dependencies,49,https://psicode.org,https://github.com/psi4/psi4/pull/1358,2,['depend'],['dependencies']
Integrability,"## Description; Closes #2310 - an error message is more helpful than a segfault, in my opinion. ## Checklist; - [x] Tests added for any newly trapped keywords; - [x] cc test still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2450:40,message,message,40,https://psicode.org,https://github.com/psi4/psi4/pull/2450,1,['message'],['message']
Integrability,"## Description; Completely changes the algorithm used for fitting diatomic potentials from Lagrange interpolations (was tens of thousands of lines of Python) to using [weighted least squares](http://dx.doi.org/10.1063/1.4862157), which can be implemented with a couple of lines of Python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Remove the old interpolation code.; - [x] Add weighted least squares routine.; - [x] Add exception to handle non-convergent cases.; - [x] Document changes.; - [x] New function to plot the fit to screen/file using matplotlib. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/515:447,rout,routine,447,https://psicode.org,https://github.com/psi4/psi4/pull/515,1,['rout'],['routine']
Integrability,"## Description; Continues from #1120. pyoptking largely plumbed in. ## Todos. Failing tests from full suite. These will definitely include (a) functions to opt, (b) mixed basis sets, an odd thing in fnocc2 where I can't get the wfn to freeze core.; - [ ]	 17 - cbs-xtpl-opt (Failed); - [ ]	 18 - cbs-xtpl-func (Failed); - [ ]	 20 - cbs-xtpl-wrapper (Failed); - [ ]	114 - dcft5 (Failed); - [ ]	204 - fnocc2 (Failed); - [ ]	267 - opt-lindep-change (Failed); - [ ]	277 - opt8 (Failed); - [ ]	281 - opt13 (Failed); - [ ]	282 - opt14 (Failed); - [ ]	283 - opt-irc-1 (Failed); - [ ]	284 - opt-irc-2 (Failed); - [ ]	285 - opt-irc-3 (Failed); - [ ]	301 - pubchem1 (Failed); - [ ]	304 - pywrap-all (Failed); - [ ]	393 - python-pubchem (Failed); - [ ]	419 - gcp-pbeh3c (Failed); - [ ]	428 - pcmsolver-opt-fd (Failed). ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for preliminary review. hopefully the optking team can work off this.; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335:341,wrap,wrapper,341,https://psicode.org,https://github.com/psi4/psi4/pull/1335,1,['wrap'],['wrapper']
Integrability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:64,integrat,integrated,64,https://psicode.org,https://github.com/psi4/psi4/pull/865,3,"['depend', 'integrat']","['dependency', 'dependent', 'integrated']"
Integrability,## Description; Corrects additional JK logic edge cases found and increases the verbosity of the error messages. At the same time we should continuously discourage users to set a `SCF_TYPE` to anything besides `DF`. `MEM_DF` and `DISK_DF` are truly expert user options and I believe have been marked as such in a variety of places. Also added a throw if someone requests dlDF+D gradients as these have never been implemented. . Fixes #1021. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1023:103,message,messages,103,https://psicode.org,https://github.com/psi4/psi4/pull/1023,1,['message'],['messages']
Integrability,"## Description; Coupled Cluster methods in general do not compute the OPDM unless necessary, however when they do need to compute the OPDM they do not communicate that back to the wfn object. This has led to some confusion on the part of users trying to access CC density matrices. (see #504 ). . ~~The ccdensity module will now set `ref_wfn.arrays[""CC_OPDM_A""/""CC_OPDM_B""] ` with the ground state opdm.~~. CCdensity does the MO/AO transformation and sets the ref_wfn Da/Db members internally, no python, and no longer using the `arrays` map. ; ## Features; - CC OPDM can be accessed via wfn object returned from a property calculation that constructs it.; - eom root psivars for dipole/quadrupole components are now properly assigned.; ## Todos; - [x] ~~Python-side code to convert arrays[""CC_OPDM_A/B""] to ref_wfn.Da()/Db()~~; - [x] fix assignment of root psivars for cc routines ; - [x] add tests to check OPDM assignment in wfn through OEProps; ## Questions; - [x] @dgasmith re the suggestion you made in #504 : would that not give us a ref_wfn with two copies of the same data? One held in `ref_wfn.arrays[""CC_OPDM_A""]` and the second in `ref_wfn.Da` ? I think we would want the entry in the arrays table to be freed? . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506:873,rout,routines,873,https://psicode.org,https://github.com/psi4/psi4/pull/506,1,['rout'],['routines']
Integrability,"## Description; DCT's `cepa0` capabilities are removed. Per #1872, Psi has a problem with being consistent about what `cepa0` is. DCT has `cepa0` and is contributing to the problem. The best option is to just get rid of it. We only have it for testing purposes, but that's a Psi4Numpy task nowadays. The documentation even said don't use it for production. Besides, `cepa0`'s days as a useful point of comparison to `dct` are numbered. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed `cepa0` functionality from `dct` module. Use `occ`, `dfocc`, or `fnocc` instead.; - [x] Removed test checking for consistency between `fnocc` and `dct` CEPA because `dct` no longer has `CEPA`. ## Questions; - [ ] One procedural concern: At what point are we pulling the plug on getting new PRs into 1.4? I do not want keeping up with my PRs to take time that core devs should be spending moving 1.4 forward. ## Checklist; - [x] `ctest -L quick` passes; - [x] `ctest -L dct` passes; - [x] Documentation updated; - [x] Error message added. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1873:1065,message,message,1065,https://psicode.org,https://github.com/psi4/psi4/pull/1873,1,['message'],['message']
Integrability,"## Description; DFT-NL (=non-local) adds the VV10 correlation energy to arbitrary DFT functionals using functional specific vv10_b parameter. Conceptually similar to DFT-D. DOI: 10.1021/ct200644w. Fixes https://github.com/psi4/psi4/issues/870. * **User-Facing for Release Notes**; - [x] SCF option `DFT_VV10_B` enables and adds VV10 correlation according to DFT-NL scheme (fixed `vv10_c`, user-supplied `vv10_b`). ; - [x] `DFT_VV10_C` also gives access to the C parameter.; - [x] `NL_DISPERSION_PARAMETERS` similar to `DFT_DISPERSION_PARAMETERS`; - [x] `energy('functional-nl')` sets pre-defined vv10_b parameters for over 15 functionals. Recommended usage for most users.; - [X] `DFT_VV10_POSTSCF` enables a post-scf VV10 calculation. Large gain in speed with minimal loss of VV10 correlation energy.; - [x] added documentation. . * **Developer notes**; - [x] rebase+adjustment to PR https://github.com/psi4/psi4/pull/922; - [x] figure out DSD variant and param citations; - [x] re-integrate tests. * ** Notes**; * forcing pure HF with VV10 will seg. fault. (no integration grid). Only `energy('hf')` with `set DFT_VV10_B` is caught, not `energy('scf')` to allow custom access to the scf.; * NL parameters were entered manually, someone please check over them for strange values or typos; * tests are kept short, but we also don't test every dispersion dash parameter out there.; * for double-hybrids with multiple versions, the frozen core and/or D3BJ parent variant was chosen for a sensible consistency. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/914:983,integrat,integrate,983,https://psicode.org,https://github.com/psi4/psi4/pull/914,2,['integrat'],"['integrate', 'integration']"
Integrability,"## Description; Described in great detail [here](https://github.com/psi4/psi4/issues/1736). ## Todos; I see this PR occurring in six major stages.; - [x] Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:728,interface,interface,728,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['interface'],['interface']
Integrability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:358,rout,routines,358,https://psicode.org,https://github.com/psi4/psi4/pull/734,1,['rout'],['routines']
Integrability,"## Description; Enable mp2-d gradients (for dfmp2 only). ## Todos; - [x] interface and test mp2-d findif and analytic gradient code, calling QCEngine and a different version of the `mp2d` executable (was v0.1, now v1.1); - [x] `dashparam.py` moved in QCEngine https://github.com/MolSSI/QCEngine/pull/85 so changes needed to be made here, too; - [x] set disp qcvars on wfn, not core; - [x] separate processing of `_disp_functor` so it can work better with mp2.; - note that mp2d energies follow the ""dft"" pattern in `proc.py`, while gradients follow the ""mp2"" pattern. This is awkward but simplest until dft double-hybrid gradients pave the way.; - [ ] none of this is going to work until aforementioned PR is merged and qcng `v0.7.0` released. ## Checklist; - [x] Tests added for any new features; - [x] full tests is clean locally, except for `dft-pruning`. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661:73,interface,interface,73,https://psicode.org,https://github.com/psi4/psi4/pull/1661,1,['interface'],['interface']
Integrability,"## Description; Enables screening of small densities using LibXC's built-in functionality. Enables user to set custom values. ; This fixes, e.g., issues with calculating the H-atom with many functionals. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] introduces `xc_func_set_dens_threshold`; - [x] `DFT_DENSITY_TOLERANCE` as a (expert) user option; - [x] related PsiAPI options for Functional/LibXCFunctional/Superfunctional. ## Questions; - [ ] `lsda/meta_cutoff` routines seem unused. Remove?; - [x] default is **off** . ## Checklist; - [x] Tests added for any new features; - [x] documentation added; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge. ----. Python API notes (as one would use in `superfunctionals.py`); It is recommend to set the threshold via the SuperFunctional class; e.g. `sup[0].set_density_tolerance(1e-10) `. Alternatively one can set the threshold also via the LibXCFunctional class, and potentially; set individual thresholds for the components. Below sets the same threshold for all XC kernels.; ```; dens_cut=core.get_option(""SCF"",""DFT_DENSITY_TOLERANCE""); if sup[0].is_libxc_func():; sup[0].c_functionals()[0].set_density_cutoff(dens_cut); # print(""screening python:"",sup[0].c_functionals()[0].density_tolerance()); else:; for x_func in sup[0].x_functionals():; x_func.set_density_cutoff(dens_cut); for c_func in sup[0].c_functionals():; c_func.set_density_cutoff(dens_cut); ```; ---. Tests concerning the threshold:; `1e-12` passes all tests without issues; `1e-10` fails only at `pcmsolver-dft` else everything passes. Testing meta-GGA TPSS/aug-pcseg-1 on the A24 benchmark set /w ghost-atoms (simple organic molecules):; [cut10_tpss.apc1.out.txt](https://github.com/psi4/psi4/files/4475320/cut10_tpss.apc1.out.txt); [cut12_tpss.apc1.out.txt](https://github.com/psi4/psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860:516,rout,routines,516,https://psicode.org,https://github.com/psi4/psi4/pull/1860,1,['rout'],['routines']
Integrability,"## Description; Errors in PSIO should probably be handled by calling `psio_error(...)`, instead of printing the error messages from the function where the error happens. This PR renovates this function to something more C++-style, and adds a new string argument that defaults to the empty string. This allows the callers of the function to prepend their own error messages to the text that eventually ends up in the error box, such as OS supplied error messages when a read/write/lseek system call fails. This should make it easier to clean up `wt_toclen` etc. (see #2700). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `psio_error(...)` can now take a string argument that will be printed first; - [x] Unnecessary includes are removed; - [x] Fixed size char array and C-style string manipulation is gone. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2711:118,message,messages,118,https://psicode.org,https://github.com/psi4/psi4/pull/2711,3,['message'],['messages']
Integrability,"## Description; Even though Intel+defaults conda gcc7.3, azure gcc-s, and c-f conda gcc9 are perfectly fine with it, defaults conda gcc7.3 as primary compiler segfaults if the `py_psi_get_atomic_point_charges` fn is removed. I don't understand it, but I will appease it. All other changes are fixing stray non-ascii chars, since that's one of my routine steps when things don't make sense. Checking full tests locally. EDIT: full tests clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2175:346,rout,routine,346,https://psicode.org,https://github.com/psi4/psi4/pull/2175,1,['rout'],['routine']
Integrability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:1020,integrat,integration,1020,https://psicode.org,https://github.com/psi4/psi4/pull/952,1,['integrat'],['integration']
Integrability,"## Description; Extracts the `Exception`-based error message and prints it out in an attention-seeking box. ## Checklist; - [x] few manual tests. ## Status; - [x] Ready for review; - [x] Ready for merge. ----; Example:; ```; Cleaning optimization helper files. PsiException: Could not converge geometry optimization in 1 iterations. Traceback (most recent call last):; File ""/Users/kruse/qc/psi4.bin/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 29, in <module>; File ""/Users/kruse/qc/psi4.bin/lib/psi4/driver/driver.py"", line 1201, in optimize; raise OptimizationConvergenceError(""""""geometry optimization"""""", n - 1, wfn). psi4.driver.p4util.exceptions.OptimizationConvergenceError: Could not converge geometry optimization in 1 iterations. Printing out the relevant lines from the Psithon --> Python processed input file:; """""",""LiF2m""); core.IO.set_default_namespace(""LiF2m""); core.set_global_option(""BASIS"", ""minix""); core.set_global_option(""SCF_TYPE"", ""pk""); core.set_global_option(""GEOM_MAXITER"", 1); --> optimize('hf'). !----------------------------------------------------------- !; ! !; ! Could not converge geometry optimization in 1 iterations. !; ! !; !----------------------------------------------------------- !. Psi4 stopped on: Thursday, 09 April 2020 10:17AM; Psi4 wall time for execution: 0:00:00.77. *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/1862,1,['message'],['message']
Integrability,## Description; Fedora switched to the use of [FlexiBLAS](https://www.mpi-magdeburg.mpg.de/projects/flexiblas) in Fedora 33 as a unified interface to various BLAS/LAPACK implementations. This PR ports the patch by Björn Esser from Fedora to Psi4 per Fedora's guidelines of contributing any patches back upstream. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246:137,interface,interface,137,https://psicode.org,https://github.com/psi4/psi4/pull/2246,1,['interface'],['interface']
Integrability,## Description; First look at psi4-optking3.0 interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] replaces optking 2.0 call with optking 3.0 (python). ## Questions. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1120:46,interface,interface,46,https://psicode.org,https://github.com/psi4/psi4/pull/1120,1,['interface'],['interface']
Integrability,## Description; Fix an error message which I [invalidated](https://github.com/psi4/psi4/pull/1949) last year. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2358:29,message,message,29,https://psicode.org,https://github.com/psi4/psi4/pull/2358,1,['message'],['message']
Integrability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:31,wrap,wrapping,31,https://psicode.org,https://github.com/psi4/psi4/pull/1314,8,"['Wrap', 'wrap']","['Wrap', 'wrapping']"
Integrability,"## Description; Fixes #1353 by raising an error that DF was never implemented with the QC algorithm in `dcft`. Per discussions with @ssh2, I also added a message that the QC algorithm employs the hessian for DC-06, as the others haven't been implemented yet. ## Checklist; - [x] `ctest -R dcft` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1518:154,message,message,154,https://psicode.org,https://github.com/psi4/psi4/pull/1518,1,['message'],['message']
Integrability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:409,message,message,409,https://psicode.org,https://github.com/psi4/psi4/pull/1637,1,['message'],['message']
Integrability,"## Description; Fixes #1698. Psi wasn't sending AOs normalized to unity, and NBO was correcting it by transforming the Fock matrix and the density matrix both _inversely_ to the overlap matrix. That's not how you want to do it! The Fock matrix transforms the same way, but the density matrix (and the AO index of C) transform inversely. Because NBO can't be trusted to do the transformation correctly, Psi does it itself. To make coding that easier, the NBO writing was moved to Python. The C-code still exists until 1.5, where it shall be ripped out of `libmints`. Deprecation warnings have been added. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug causing incorrect Psi to produce incorrect NBO input files involving Cartesian basis sets with angular momentum of d or more (#1698).; - [x] Moved NBO Writing python-side.; - [x] Please use `wfn.write_nbo(name)` to write NBO files from now on. ## Checklist; - [x] Confirmed that the old and new NBO interfaces produce the same input.47 files for the current test case and a test case with linear dependencies.; - [x] Confirmed that the NAO populations and energies match with the 6-31+G(d) basis between QChem and Psi4. This confirms the accuracy of the overlap, AO density, and AO Fock matrices. The disagreements are either in the last decimal place or due to setting up coordinate systems.; - [x] Confirmed that the MOs in terms of AOs, as reported by NBO, match with the 6-31+G(d) basis between QChem and Psi4. This additionally checks the accuracy of the C matrix. Again, the order of the d matrices shifts due to different orientation systems in my test cases. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790:1013,interface,interfaces,1013,https://psicode.org,https://github.com/psi4/psi4/pull/1790,2,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"## Description; Fixes a bug that occurs when one runs `psi4 --qcschema` and requests that the wavefunction is returned. . Before the orbitals / fock matrix / etc. are returned, all AO-indexed tensors are sorted according to CCA ordering: `Ca` and `Cb` are dimension [AO x MO], so their rows are sorted. `Fa`, `Fb`, `Da`, and `Db` are all dimension [AO x AO], so they are sorted by both row and column. `epsilon_a` and `epsilon_b` are not AO-indexed, so they shouldn't be sorted at all. As an example, the following HF calculation has fewer MOs than AOs because of linear dependencies, and Psi4 will throw an error when `epsilon_a` is treated as if it were of length AO:; ```; import psi4. ret = psi4.schema_wrapper.run_qcschema({; ""molecule"": {; ""geometry"": [; 0.0, 0.0, -0.1294769411935893,; 0.0, -1.494187339479985, 1.0274465079245698,; 0.0, 1.494187339479985, 1.0274465079245698; ], ; ""symbols"": [""O"", ""H"", ""H""],; }, ; ""driver"": ""energy"",; ""model"": {; ""method"": ""hf"",; ""basis"": ""d-aug-cc-pvqz"" # larger basis -> more lin deps; }, ; ""keywords"": {; ""scf_type"": ""df"",; ""s_tolerance"" : 1e-4, # loosen lin dep cutoff; }, ; ""protocols"": {; ""wavefunction"" : ""orbitals_and_eigenvalues"",; } ; ; }); print(ret.error); ```. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2112:571,depend,dependencies,571,https://psicode.org,https://github.com/psi4/psi4/pull/2112,2,"['depend', 'protocol']","['dependencies', 'protocols']"
Integrability,## Description; Fixes crash when the automatic Cholesky procedure is triggered by a linearly dependent basis set. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixes a bug where the program crashes when the automatic Cholesky cleanup is triggered; - [x] Adds a test for the automatic Cholesky cleanup; - [x] Doesn't print out the Cholesky decomposed matrix any more; saving tens to hundreds of megabytes in log file size; - [x] Unifies printout between the partial Cholesky and other orthogonalization methods. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1817:93,depend,dependent,93,https://psicode.org,https://github.com/psi4/psi4/pull/1817,1,['depend'],['dependent']
Integrability,"## Description; Fixes some of the issues with ERD in Psi4. Moves a piece of the normalization from ERD to Psi4. This prevents multiplication by zero inside ERD, which results in incorrect integral values. Note that the multiplication by zero doesn't happen in Psi4, as the normalization routine doesn't get called for a ""zero"" basis set (ie, in density fitting). **Warning** I don't know how well-tested ERD in Psi4 is. I still get some failing tests, although there is certainly an improvement from before. Ideas for why this might be are welcome. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587:287,rout,routine,287,https://psicode.org,https://github.com/psi4/psi4/pull/587,1,['rout'],['routine']
Integrability,## Description; Fixes the DKH interface in Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [X] Test case added comparing to a Molpro calculation. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/702:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/702,1,['interface'],['interface']
Integrability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:267,interface,interface,267,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['interface'],['interface']
Integrability,"## Description; Furthers the generality of integral transformations and enables a special workflow, `DIRECT_iaQ`, to alleviate disk IO when transforming to `pqQ` forms. Timings comparing the `DIRECT_iaQ` and `DIRECT` methods are inbound. Edit: Here are some tests that (almost comically) display the efficacy of `DIRECT_iaQ` over `DIRECT` + `pqQ`. 1. Test1: ; [input.txt](https://github.com/psi4/psi4/files/1740970/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740977/timer.txt). 2. Test2: ; [input.txt](https://github.com/psi4/psi4/files/1740966/input.txt); [timer.txt](https://github.com/psi4/psi4/files/1740974/timer.txt). Notice the difference between the `DFH: MO to disk` timers. . Edit2: I added a reduction on `max_val` in `prepare_sparsity` to ensure thread safety. This was incorrect before. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - DF_Helper now has three methods for integral transformations:; `STORE`: Contracts metric with AO integrals, stores, then transforms.; `DIRECT`: Transforms integrals, contracts with metric.; `DIRECT_iaQ`: Optimized `DIRECT` workflow when using `pqQ` transformed integrals. - DF_Helper outputs any transformed integral form you want: `Qpq`, `pQq`, or `pqQ`. The following can be used for each of the respective methods listed above:; `STORE`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT`: `Qpq`, `pQq`, or (ill-advised) `pqQ`; `DIRECT_iaQ`: `pqQ`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/913:999,Contract,Contracts,999,https://psicode.org,https://github.com/psi4/psi4/pull/913,2,"['Contract', 'contract']","['Contracts', 'contracts']"
Integrability,"## Description; GauXC is a standalone library developed by @wavefunction91, among others, with the purpose of computing XC terms within Density Functional Theory (DFT) calculations in a massively parallel fashion, including utilization of multiple nodes via MPI, and GPU support. Of more interest to this PR, GauXC contains an implementation of the sn-LinK algorithm, a seminumerical method very similar to COSX for computing the exact exchange term (i.e., the K matrix). Like the XC components of GauXC, sn-LinK also has support for GPU execution. At PsiCon 2023, it was noted that GauXC's sn-LinK algorithm could be interfaced to Psi4 through the `CompositeJK` framework. This would give Psi4 its first-ever instance of noncommercial GPU support for the JK construction process. And that is the goal of this PR - interfacing Psi4 to GauXC's sn-LinK code via `CompositeJK`. This interface is implemented primarily via a new `SplitJK` derived class, `snLinK`, which contains the guts of the interface to GauXC. The `snLinK` constructor parameterizes and constructs the `GauXC::XCIntegrator` object and all related objects (e.g., load balancer, molecular weights partitioner), as well as other auxiliary work such as defining the GauXC execution space. `snLinK::build_G_component` constructs the K matrix from the input density via the GauXC integrator's `eval_exx` function. `build_G_component` also handles fundamental pre- and post-processing required for the involved matrices - Spherical Harmonic integral reordering permutations if `psi4_SHGAUSS_ORDERING` is set to the default option of gaussian , and Spherical-to-Cartesian transforms, if required, to enable GPU support (also forcible via the `SNLINK_FORCE_CARTESIAN` keyword). As a `SplitJK` instance, sn-LinK can be called within Psi4 via `SCF_TYPE = J_ALGO+SNLINK`, with `J_ALGO` being the J construction algorithm of choice (currently only `DFDIRJ`). If GPU support is enabled, the `SNLINK_USE_GPU` keyword can be turned on to run the sn-L",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150:618,interface,interfaced,618,https://psicode.org,https://github.com/psi4/psi4/pull/3150,3,['interface'],"['interface', 'interfaced']"
Integrability,"## Description; Get ready for CODATA 2018. I'm stashing this branch for now where I won't forget it. Not targeting v1.4. ## Todos; - [x] sometimes had been importing directly from qcel.constants, which has been always 2014 but in future could be 2014 or 2018 depending on qcel version. So now everyone's using the 2018 object set up as `psi4.driver.constants`; - [x] prepare c-side constants in physconst.h dumped by qcel; - [ ] heal tests from constants change. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1795:259,depend,depending,259,https://psicode.org,https://github.com/psi4/psi4/pull/1795,1,['depend'],['depending']
Integrability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:254,message,message,254,https://psicode.org,https://github.com/psi4/psi4/pull/554,1,['message'],['message']
Integrability,"## Description; I don't think its too much of an exaggeration to say that only psinet and I build the psi4 documentation. Since other projects package their documentation helpers, we, too, can spin off the derived psi4 sphinx theme (now at psi4/sphinx_psi_theme) and evict a lot of code from the repo and automatically take advantage of updates to our dependencies, rather than every two years when I get to a docs overhaul. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Removes all sphinx themes and autoapi helpers from repo; - [x] To fully build the docs, follow the prompt to `conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4`; - [x] To use the psi4 theme (or do variants, e.g. http://psicode.org/pylibefpmanual/master/index.html) or autoapi setup in another project, just copy and modify the `doc/CMakeLists.txt` and `doc/source/conf.py.in`; * **User-Facing for Release Notes**; - [x] Incidentally, psi4/psi4#792 now fixed. Needed to have dot/graphviz installed at build time. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/801:352,depend,dependencies,352,https://psicode.org,https://github.com/psi4/psi4/pull/801,1,['depend'],['dependencies']
Integrability,"## Description; I found a few classes that shouldn't be exported. From ecpint.h, `AngularIntegral` and `RadialIntegral` are only used internally and are implementation dependent. In potentialint.h, the functors reside fully in the header and thus don't need to be ""exported"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1415:168,depend,dependent,168,https://psicode.org,https://github.com/psi4/psi4/pull/1415,1,['depend'],['dependent']
Integrability,"## Description; I need to give `psimrcc` a wavefunction for the upcoming `libtrans` refactor. Step one is to take the existing `compute_energy`-like functions and make them conform to the normal `Wavefunction::compute_energy` API. No arguments. Returns a double. A follow-up PR will be needed to actually give `psimrcc` a wavefunction. I'm hopeful this will not be another long series like the `occ` one. I don't care whether this is in 1.4 or not. Pinging @fevangelista and @andysim, the two people who have some chance of remembering how this code works. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Conform `psimrcc`'s myriad `Wavefunction::compute_energy`-like functions to the `Wavefunction` interface, as prep for the next PR.; - [x] Removed unpublished ""perturbative CBS"" capabilities from `psimrcc` and adds appropriate warnings. ## Questions; - [x] @fevangelista, can you explain what the ""perturbative CBS"" is? Those should be added to the current energy somehow, but I can't tell which of the three flavors to add, or even what this is. ## Checklist; - [x] `ctest -R psimrcc` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:750,interface,interface,750,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['interface'],['interface']
Integrability,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736:1108,rout,routine,1108,https://psicode.org,https://github.com/psi4/psi4/pull/736,1,['rout'],['routine']
Integrability,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2106:523,interface,interface,523,https://psicode.org,https://github.com/psi4/psi4/pull/2106,1,['interface'],['interface']
Integrability,"## Description; If we're going to check SCF-dependent quantities to 1e-9, let's converge our SCF that tightly. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2322:44,depend,dependent,44,https://psicode.org,https://github.com/psi4/psi4/pull/2322,1,['depend'],['dependent']
Integrability,"## Description; If you look closely, the driver structure and its autodoc are a little weird, as reviewed in #2166. Also, many driver functions are minimally documented or don't take advantage of typing to guide the developer. This PR considers only `driver/p4utils/` directory and fills in docstrings and typing while checking the built docs for maximum info and links. Even when I saw good things to change in code, for this most part, this PR leaves them be and focuses on docstrings. Piece 1 from the ""driver import"" series, #2166 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] add `__all__` to guide `from module import *`. This same effect can be had by `def _functionname` but the PEP https://peps.python.org/pep-0008/#public-and-internal-interfaces still recommends `__all__`.; - [x] a few things actually retired: ; - `PsiImportError`, `CSXError`, `Dftd3Error` -- not used since v1.4 at latest; - `fchkfile_to_string` hidden in fchk.py (just opening and reading a file); - `basname` hidden in python_helpers.py (one-liner); - `format_kwargs_for_input` (as soon as v1.4); - `extract_sowreap_from_output` (as soon as v1.4); - `format_currentstate_for_input` (as soon as v1.4); - `Table` (as soon as v1.4); - `print_stdout` (as soon as v1.4); - `print_stderr` (as soon as v1.4). ## Checklist; - Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2592:808,interface,interfaces,808,https://psicode.org,https://github.com/psi4/psi4/pull/2592,1,['interface'],['interfaces']
Integrability,"## Description; In accordance with https://github.com/MolSSI/QCElemental/pull/275, return certain files in qcschema to be pruned down by user protocols. Bump qcel to 0.24.0 (and qcng to 0.23.0 once it's minted). Note that this can't handle the wfn file b/c binary. And it can't handle `timer.dat` b/c there's no fixed place it lands (I can get it to save calling schema_wrapper directly but not for QCEngine calling psi4). ## Checklist; - [x] Tests added for any new features -- tested at qcengine test_canonical_fields; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2361:142,protocol,protocols,142,https://psicode.org,https://github.com/psi4/psi4/pull/2361,1,['protocol'],['protocols']
Integrability,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:726,synchroniz,synchronize,726,https://psicode.org,https://github.com/psi4/psi4/pull/1970,1,['synchroniz'],['synchronize']
Integrability,"## Description; In trying to make a good test case for #2068, I found some normalization problems that are fixed in this PR. Also, the analytic gradients were not implemented, has been addressed. The interface used here is terrible, but will eventually be merged with #1720 to give a better user experience; this test case will be helpful in making sure everything works correctly during that development. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a new feature to allow arbitrary order, arbitrary exponent multipoles to be defined.; - [x] Implement analytic gradients for the above.; - [x] New test case to make sure it all works and to demonstrate the current (terrible and to be replaced) syntax. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2069:200,interface,interface,200,https://psicode.org,https://github.com/psi4/psi4/pull/2069,1,['interface'],['interface']
Integrability,"## Description; Issue #846 has been fixed, so a contraction set where all primitives have a coefficient of 0 will remain untouched. While I was poking around the file, I decided to clean up some other things. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] 0 coefficient primitives will no longer be normalized. This should prove useful to planned ECP changes.; - [X] Miscellaneous code cleanup. ## Questions; - [ ] ECP team, I assume you're happy with this? ; - [ ] In the zero coefficient case, do we want to explicitly check this is an ECP by checking radial powers? If so, what would we do otherwise, raise some error?; - [ ] I also assume that I'm within the Psi4 coding style here?. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/849:48,contract,contraction,48,https://psicode.org,https://github.com/psi4/psi4/pull/849,1,['contract'],['contraction']
Integrability,"## Description; It seems that in the course of harmonizing dftd4 in QCEngine, I touched enough dftd3, gcp, and mp2d that #2142 (dftd4 and minor dftd3, gcp, mp2d) can't be put off after the QCEngine v0.19 release. So here's the non-dftd4 tweaks. ## Todos; - [x] switch gcp interface to QCEngine; - [x] update types return for disp. engine can handle ndarray, so leave arrays as np and shaped rather than flat lists; - [x] Note that this won't build until new QCEngine release. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180:272,interface,interface,272,https://psicode.org,https://github.com/psi4/psi4/pull/2180,1,['interface'],['interface']
Integrability,"## Description; It would be nice to be able to pass in an external hamiltonian to be able to test-drive some code (e.g. for the calculation of external potentials) without always needing to recompile. This PR adds this possibilty. I am testing it by making a calculation without an external hamiltonian but with a potential (and saving the nuclear_repulsion addition, which is not mediated by the additional H term) and comparing it to a simulation without an external potential, but with the captured potential hamiltonian. FYI: This is on top of #3148 , because otherwise the tests don't pass.; Also fyi: I did not build the docs. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Added possibility to pass in an external hamiltonian contribution via `energy(..., external_hamiltonian = np.array(...))`.; - [ ] Tested via simulation with external_potential and an equivalent external_hamiltonian. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3149:381,mediat,mediated,381,https://psicode.org,https://github.com/psi4/psi4/pull/3149,1,['mediat'],['mediated']
Integrability,"## Description; Legacy modules that were default in the past, but have been replaced will move to the [psi4pasture](http://github.com/psi4/psi4pasture) repo. The ccsort/transqt2 modules now live there. This PR introduces some machinery for installing them from psi4's build, and allowing them to be used in the driver at run-time if they are installed. ## Todo; - [x] cleanup history; - [x] find specific libs that have missing symbols + add `${PRE/POST_LIBRARY_OPTIONS}` to each not all.; - [x] Docs: Finalize build instructions for `PastureRequiredError`; - [x] Docs: Add transqt2/ccsort note to read_options.cc; - [x] Tests: add tests as lori mentioned . * **Developer Interest**; - I would say this functionality is experimental since pasture does not have any travis checks.; - I am not completely confident in the way I have ""injected"" pasture.addins.ccsort_transqt2 into proc.py, but it seems to work okay. See the code comments; - Does the pasture module even need to be installed w/in lib/psi4/driver?. * **User-Facing for Release Notes**; - ccsort/transqt2 are no longer part of psi4_core; - adds ENABLE_ccsort and ENABLE_transqt2 flags to optionally build/install them from pasture. * **Self imposed CI checks**; - [x] MacOS/clang/python2 build + use pasture ok; - [x] MacOS/clang/python3 build + use pasture ok; - [x] Linux/gcc/python2 build + use pasture ok; - [x] Linux/gcc/python3 build + use pasture ok. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/534:832,inject,injected,832,https://psicode.org,https://github.com/psi4/psi4/pull/534,1,['inject'],['injected']
Integrability,## Description; Libint2 and shell screening. ## Todos; - [x] initial cmake integration of fixed AM Libint2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721:75,integrat,integration,75,https://psicode.org,https://github.com/psi4/psi4/pull/1721,1,['integrat'],['integration']
Integrability,"## Description; Make `core.Matrix.np_write(filename=None)` safer. The method returns a `dict` whose values are `np.ndarray`s. Currently, those arrays are views of memory owned by the `core.Matrix`, which means code like this is actually broken:. ```; def function():; matrix = function_that_returns_a_core_Matrix(); return matrix.np_write(filename=None); ```. This PR changes `np_write` to return copies of the data when `filename=None`, so it's less of a footgun. Eventually the need for this might go away, once the numpy->core.Matrix reference counting integration is accomplished, but that's much tricker. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/750:556,integrat,integration,556,https://psicode.org,https://github.com/psi4/psi4/pull/750,1,['integrat'],['integration']
Integrability,"## Description; Make example 1 of #2231 at least _run_. I'm not quite sure it's correct just yet, though. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing crashes upon linearly dependent basis sets for some correlated methods. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] We're copying SO-basis data into this and then transforming to the MO-basis, so yes, I'm quite sure this is the correct dimension. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2857:321,depend,dependent,321,https://psicode.org,https://github.com/psi4/psi4/pull/2857,1,['depend'],['dependent']
Integrability,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937:346,contract,contraction,346,https://psicode.org,https://github.com/psi4/psi4/pull/937,1,['contract'],['contraction']
Integrability,"## Description; Mostly, get psi4 up-to-date with pybind again, remove extraneous python linking, and sanitize chemps2 & pcmsolver test case names and ctest labels. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] add message-coloring module, useable by all, and used to warn about <4.9 GCC and highlight addon detection; - [x] make autodocing tools aware of the detci properties psivars that are now set py-side; - [x] re-work some list casting that (with pybind11 Nov 16 updates) broke our array options; - [x] dropped the versioned code object library in psi4/src/CM; - [x] documented python/pybind linking a bit; - [x] ctest `shorttests` gone and `minitests` in; * **User-Facing for Release Notes**; - [x] `dmrg` tests and label now accessed through `chemps2`; - [x] `pcmsolver` tests dropped ""pcm"" prefix; - [x] tests involving external code now accessible with label `addon` rather than `ext-exe-dep`; - [x] no longer linking to libpython. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524:283,message,message-coloring,283,https://psicode.org,https://github.com/psi4/psi4/pull/524,1,['message'],['message-coloring']
Integrability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:142,interface,interface,142,https://psicode.org,https://github.com/psi4/psi4/pull/1122,1,['interface'],['interface']
Integrability,"## Description; New MBIS functionality enables computation of atom-in-molecule (AIM) volumes (<r^3>). More often in force field development, a volume ratio between the AIM volume and the free atom is needed (basically describes the difference in atomic volume between a free atom and an atom in a molecule). This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code. These free-atom densities are then run through the MBIS routine, and volumes are computed along with the desired volume ratios. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [X] Automate computation of unique free-atom densities; - [X] Compute volume ratio in MBIS routine. ## Questions; - [ ] Running the MBIS code now causes many UHF computations to run, do we need all of the printing here?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:613,rout,routine,613,https://psicode.org,https://github.com/psi4/psi4/pull/2127,2,['rout'],['routine']
Integrability,## Description; Non-urgent stuff I found this week. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Expand my collection of Windows problems and solutions after Tuesday's fun with #2624 ; - [x] Update supported Py versions in README; - [x] Fix a test that wasn't declaring its dependencies; - [x] Make non-optional the use of `git --atomic` for versions/tags/CI conda; - [x] Expand logic on whether to build conda-pkg or not to include the 1.N.x maintenance branches. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2629:336,depend,dependencies,336,https://psicode.org,https://github.com/psi4/psi4/pull/2629,1,['depend'],['dependencies']
Integrability,"## Description; Occasionally we had issues cropping up where users were assigning views that were not tied to the Matrix object. Consider the following:. ```; mat = Matrix(5, 5); view = mat.np; del mat; ```. Previously, `mat` and `view` lifetimes were not tied together. The NumPy array would point to deleted memory in the above example. With this PR, the object lifetime are tied together and `mat` is not actually deleted in this example (just a handle to it) so that the `view` remains valid. This also allows operations like `view = Matrix(5, 5).np` and `Cocc = wfn.Ca_subset(""AO"", ""OCC"").np` to work without issue. A small downside is that the views cannot be cached as this would lead to circular nurse/patient relationships and prevent the objects from ever being garbage collected. This makes the `.np` accessors take slightly more time (~2-5us depending on number of irreps vs 0.5us). However, unless you are looping over individual indices and setting values this really shouldn't matter and the `mat.get/mat.set` functionality can be used for this with the ~0.4us latency. There is a chance this is fixable and we can revisit if it comes an issue. I also was able to delete a great deal of rather hideous code which makes me quite happy. Special thanks to @rmcgibbo for poking me about this and helping with idea and also to the PyBind11 team for ""fixing"" this a few months ago (doh!). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Can now obtain stand-alone views with correct reference counting (`view = Matrix(5, 5).np`).; - [x] Dimension objects can now be built python-side from list `Dimension([5, 5, 5])`.; * **User-Facing for Release Notes**; - [x] The NumPy interface is now more robust. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/751:854,depend,depending,854,https://psicode.org,https://github.com/psi4/psi4/pull/751,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:400,rout,routine,400,https://psicode.org,https://github.com/psi4/psi4/pull/2637,2,"['message', 'rout']","['message', 'routine']"
Integrability,"## Description; PSIO toclen errors are extremely cryptic, making them even more difficult to debug,; I have recently ran into another input that produces the error in #2261 so decided to try taking a look.; I have not debugged the actual issue, but made some changes to the function raising the error to hopefully make the error messages more informative. The `read`/`write`/`lseek` syscalls deposit an OS-defined error code in `errno`, which can be decoded to an OS-provided, human-readable (possibly non-English) error message. This should at least tell the person seeing it vaguely what is wrong, ie. is the disk full, does the file not exist, etc. The toclen functions have been renovated in general, `const` added where appropriate, common code factored out, etc. Error conditions now properly use `psio_error(...)` and pass the OS-provided message to it. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Error messages from `PSIO::rd_toclen` and `PSIO::wt_toclen` are now more informative; - [x] The new function `decode_errno(int)` is now available for use after system calls to decode `errno`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2700:329,message,messages,329,https://psicode.org,https://github.com/psi4/psi4/pull/2700,4,['message'],"['message', 'messages']"
Integrability,"## Description; Partial fix to #2634. thanks, @TiborGY, for that report. The mrcc interface beyond single-points was another casualty of distributed driver. The Allen test needs a further fix that involves moving a dictionary. In the meantime, this heals all the ctests. Update: I've got all parts fixed locally, and one of these changes is no longer necessary. I'll leave this open until the other PR available, in case someone needs a quick fix. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2638:82,interface,interface,82,https://psicode.org,https://github.com/psi4/psi4/pull/2638,1,['interface'],['interface']
Integrability,"## Description; Per discussion on the conference call, this PR gives some error messages for cases where using a serialized wavefunction would give a segfault. 1851 is still an issue, but one that shouldn't hold up 1.4 or eat my time to straighten out `dfocc`. I'm modernizing enough modules in Psi as it is... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Replace some segfaults from #1851 with actual error messages. ## Checklist; - [x] Tested that all four error modules used to segfault and now give an error message. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1858:80,message,messages,80,https://psicode.org,https://github.com/psi4/psi4/pull/1858,3,['message'],"['message', 'messages']"
Integrability,"## Description; Per issue #2374, this PR adds an interface to Yukawa ERIs from Libint2. ## Questions; - [x] How would I test my new code? (How are erf kernels tested?); - [x] Do I need to add functions in MintsHelper for the Yukawa kernel?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/pull/2386,1,['interface'],['interface']
Integrability,"## Description; Phase 1 in trying to be more systematic about checking consistency within psi. Also, separate a set of references that can reside in qcng for common testing btwn p4/qcng/qcdb. This runs several classes of tests --; * can each mp2-capable module do something sensible with each scf_type?; * can each mp2-capable module return the same right answer for each capable scf_type/mp2_type?; * can each mp2_type returns something good w/o the user knowing about modules?; * all above for gradient, plus check against findif; * for all these, is the full qcvars, return values, `CURRENT ENERGY`, etc. contract fulfilled for both P::e and wfn? . ## Todos; - [x] check mp2 fundamentals from mp2 energy targets (e.g., `MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from mp2 gradient targets (e.g., `MP2 TOTAL ENERGY` from `gradient('mp2')`; - [ ] check scs mp2 from mp2 targets (e.g., `CUSTOM SCS-MP2 TOTAL ENERGY` from `energy('mp2')`; - [x] check mp2 fundamentals from post-mp2 targests (e.g., `MP2 TOTAL ENERGY`) from `energy('fnoccsd')`; - [x] routing; - [x] I think we got the logic of `check_disk_df` off a little in proc.py in that we were checking if correlated method type was `DISK_DF` (my fault) and along the way forbidding `PK` refs with `DF` correlated. I think I fixed this for dfocc but haven't done df with fnocc yet.; - [x] Also corrected logic that was letting through mixed ref+corl derivatives (e.g., pk+df) that had gotten lost. See #245 for much discussion. tl;dr we have none, so let's not continue to let psi proceed with calculations that give beer + wrong answers; - [x] CISD is a poor way to calculate MP2, and it's not like we don't have other modules for RHF & ROHF besides DETCI. And @CDSherrill has allowed that we're unlikely to get to the bottom of it, so closes #311 . And the mp2 detci code is unsteady for multiple-detci-single-psi4 calcs, so it's not smooth to test.; - [x] qcvars; - [x] Newly sets `<mtd> TOTAL GRADIENT` from findif in",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850:608,contract,contract,608,https://psicode.org,https://github.com/psi4/psi4/pull/1850,1,['contract'],['contract']
Integrability,"## Description; Previously, the `dfocc`, `dfmp2` and `scfgrad` modules all had nearly identical code to compute the **metric term** of density fitted gradients, the contraction against the metric integral derivatives. `dfmp2` even did this _twice_ for a total of 4 times near identical logic appears. (It was 5 before #1953.) This PR consolidates those into a single `MintsHelper` method. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Various classes and functions now take in a `MintsHelper` rather than basis sets directly; - [x] Metric integral derivative contractions are consolidated into `MintsHelper`. ## Checklist; - [x] Timing tests show that with these changes, there's a slowdown of <0.1s, and scaling is effectively constant compared to the scaling of the much more expensive SCF iterations and the `Amn_x` term. I can live with this.; - [x] Quick tests and gradient tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1974:165,contract,contraction,165,https://psicode.org,https://github.com/psi4/psi4/pull/1974,2,['contract'],"['contraction', 'contractions']"
Integrability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] bump pb11 internal build to v2.5.0; - [x] bump ambit internal build to v0.4.1; - [x] update paper and acknowledge more folks in header; - [x] add extra arg to bindings of so_overlap/kinetic so p4n ref impl can run as-is; - [x] fix missing qcvars, wfn settings in fnocc and occ for conventional LCCD; - [x] add conventional LCCD tests to standard_suite courtesy of @JonathonMisiewicz reference implementation over at p4n, https://github.com/psi4/psi4numpy/tree/master/Coupled-Electron-Pair-Approximation; - [x] depends on https://github.com/MolSSI/QCEngine/pull/244 for data. Furthermore all standard_suite tests are presently suppressed until qcng v0.15 minted. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1913:596,depend,depends,596,https://psicode.org,https://github.com/psi4/psi4/pull/1913,1,['depend'],['depends']
Integrability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:244,depend,dependence,244,https://psicode.org,https://github.com/psi4/psi4/pull/486,2,"['depend', 'interface']","['dependence', 'interface']"
Integrability,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/509:81,interface,interface,81,https://psicode.org,https://github.com/psi4/psi4/pull/509,2,['interface'],['interface']
Integrability,"## Description; REMP methods added to `occ` and attendant testing and routing. This is PR 1/? in the mega-dfocc-remp series. #### PR Background (not of general interest); There was https://github.com/loriab/psi4/tree/dfocc2 by @bozkaya and @yavuzalagoz that added to `dfocc` (1) non-oo uhf ccsd-level E & G, (2) oo ccd-level E & G, and (3) fno everything. Then, there was #2354 that added remp2 E & G to `occ` and `dfocc` and made extensive improvements to `dfocc` in the matter of combined DIIS (vital for convergence) and int overflows. All based on pre-DIIS overhaul #2369 . To untangle this, I started from master, cherry-picked the dfocc2 commits, cherry-picked the #2354 commits, modernized the DIIS calls, then added the neglected stdsuite testing and attendant qcvar fixups for existing occ/dfocc methods and new methods remp2 and categories (1) and (2) from dfocc2 branch. That mega-changeset lives at #2633 for now. This PR breaks off the `occ` portion for review. ## Todos; - [x] @behnle added REMP2 and OREMP2 hybrid perturbation theories (https://doi.org/10.1063/1.5086168) with conventional integrals added to `occ` module, as originally proposed in #2354; - [ ] note that this uses a specialty QCEngine for reference values. https://github.com/MolSSI/QCEngine/pull/375 It'll build by itself. I'll need to mint a QCEngine patch release before building conda packages with this PR in master.; - [x] docs-wise, I picked off a bit and included it in this PR. on the whole, let's defer docs edits until the dfocc PR; - [x] reworked the run_occ* driver functions a bit so that method defs are localized and there's less risk of missing an internal setting when adding new methods.; - [x] added stdsuite testing for new methods remp2 energy and oremp2 energy and gradient. added stdsuite testing for existing E & G for omp2, omp2.5, omp3, oremp2, olccd and filled in some gaps for ccsd, ccsd(t), a-ccsd(t). all conventional ints. fixed up some mis-set byproducts uncovered by stdsuite testing:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653:70,rout,routing,70,https://psicode.org,https://github.com/psi4/psi4/pull/2653,1,['rout'],['routing']
Integrability,## Description; Recent versions of MRCC are able to compute perturbative energies [e.g. CCSDT(Q)] with an ROHF reference wave function. This updates Psi4's interface to allow these methods to be performed. Credit goes to @bzloink for updating the interface. * **User-Facing for Release Notes**; - [x] Perturbative methods using MRCC with an ROHF reference are now supported. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634:156,interface,interface,156,https://psicode.org,https://github.com/psi4/psi4/pull/634,2,['interface'],['interface']
Integrability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:69,message,message,69,https://psicode.org,https://github.com/psi4/psi4/pull/2030,1,['message'],['message']
Integrability,"## Description; Rehabilitates Cfour interface. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Interface working again for primary modes (~60 tests). Not yet for `vpt2()`; - [x] Test cases kw-7, kw-8, rohf-mp4 still failing for known reasons; * **User-Facing for Release Notes**; - [x] Cfour interface working again. Recc to use in communication with a developer. Cfour 2.00beta. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/730:36,interface,interface,36,https://psicode.org,https://github.com/psi4/psi4/pull/730,3,"['Interface', 'interface']","['Interface', 'interface']"
Integrability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:200,depend,dependencies,200,https://psicode.org,https://github.com/psi4/psi4/pull/623,2,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"## Description; SCF convergence has only been reported with the message ""Energy converged."" which is missing out on the more important part, i.e. the convergence of the wave function. For pedagogical reasons, this PR changes the printout so that also the wave function is mentioned in the message. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1468:64,message,message,64,https://psicode.org,https://github.com/psi4/psi4/pull/1468,2,['message'],['message']
Integrability,"## Description; See #2608 for background. Fixes #2608. Recent emphasis has been on Cfour through QCEngine or QCDB, so the Psi4/Cfour test suite likely hasn't been checked since pre v1.4. Nevertheless, for things like cbs, Psi4/Cfour is still the right choice. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] switching away from `molecule = geometry()` in `interface_cfour.py` below isn't strictly necessary, but it helps with some import stuff in a future PR; - [x] The main thing that the distributed driver broke is that non-set basis sets get set as `(auto)`, so the interface needed to learn that was the same as unset. Also, there isn't the continuous storage of qcvars in `P::e`, so those need to be reloaded from ""wfn"".; - [x] interface used to allow gradients with ghost atoms. dropping that here, but I did implement it in qcdb and qcengine.; - [x] it looks like I hacked up the tests until they passed. broadly, this is true, but removed things are singles and same- and opposite-spin energies. harvesting all these values is tested far more extensively and carefully now over at qcdb than here, so I am not discomfited.; - [x] all psi4/cfour tests pass. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2615:629,interface,interface,629,https://psicode.org,https://github.com/psi4/psi4/pull/2615,2,['interface'],['interface']
Integrability,"## Description; Set the minimum required C++ standard to C++14. Lower bounds on compilers can be found [here](https://en.cppreference.com/w/cpp/compiler_support#cpp14). Also addresses a bug in the SAPT code that resulted in a double free. ## About the SAPT bug; The Iterator class in SAPT contained an `int *` array that was cleaned up by the class's destructor. Iterator objects are constructed by a builder routine that first creates a local Iterator object, fills it, then returns it by value. The C++98 behavior of this design is problematic; a copy of the local temp Iterator is made and that copy is returned to the caller. When that copy is made, both the local temp and its copy have `int *` pointers that point to the same pool of memory because no deep-copy copy constructor exists for Iterator. Upon returning, the local temp object is destroyed, triggering the memory pointed to by the `int *` to be freed, causing the returned object to point to freed memory which is undefined behavior. When that returned object eventually goes out of scope, it will try to free the memory again, leading to the double free memory error we observed. Because we use C++11 most compilers appear to be able to correctly elide the copy, by implementing move semantics, so we haven't seen this before. The switch to C++14 with GCC5.4 caused consistent segfaults, revealing the issue. The fix is simple; don't use raw `int *`, but `std::vector<int>` instead; the lifetime of these is correctly managed automatically and the various move constructor/copy constructor/destructor can be generated correctly by the compiler. RAII for the win!. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix C++14 compliance CMake-side; - [x] Fix memory bug in SAPT code; - [x] Move Travis to Xenial. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398:409,rout,routine,409,https://psicode.org,https://github.com/psi4/psi4/pull/1398,1,['rout'],['routine']
Integrability,"## Description; Several general fixes, esp. for PsiAPI mode. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Turning off gnu C++ extensions. This means that `-std=gnu++11` will never get passed, even if CMake can detect that your compiler supports it. Instead will get a `-std=c++11` from pybind11 and possibly another `-std=c++11` if cmake detects that your compiler supports.; - [x] Put docs in order wrt threading; - [x] Make `psi4/__init__.py` pay attention to `PSI_SCRATCH`. Otherwise scratch is non-adjustible in PsiAPI mode.; - [x] Default to serial execution in `psi4/__init__.py`. Can be overruled in Psithon mode through `-nN` or `set_num_threads(N)`. Can be overruled in PsiAPI mode through `set_num_threads(N)`.; - [x] Fix `atexit` deregistering in Py3; - [x] Removed get_/set_num_threads driver wrappers. Still looks the same to users. Prints ""Threads set to %d by Python driver"" in output file so there's a record of the change.; - [x] `psi4.compare_values()` and friends adapted to work with pytest upon success. Recommended pattern: `ans = psi4.compare_values(normal test args here); assert ans`.; - [x] Set up pytest so can test installed psi4 free of cmake/ctest. For the moment, you need to be in `${top-level-psi4-dir}/tests/pytest`, have pytest installed (`conda install pytest`), have psi4 importable (`psi4 --psiapi-path`), and run `python -m pytest` or for more info, `python -m pytest -vs`.; - [x] Revive a ccsd(t) sp and an mp2 opt in the cfour interface. Add a pysmoke test.; - [x] Vital tweaks so that psiapi can handle more than vanilla calcs. Includes initializing efp in psi4.geometry, moving pcmsolver path detect to __init__, and the options clearing mentioned above.; - [x] Fix TargetHDF5 detection for detect pre-built case (i.e., conda case). * **User-Facing for Release Notes**; - [x] CMake 3.3 now required; - [x] Using `OMP_NUM_THREADS` and/or `MKL_NUM_THREADS` to guide parallelism in Psi4 is _",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/627:875,wrap,wrappers,875,https://psicode.org,https://github.com/psi4/psi4/pull/627,1,['wrap'],['wrappers']
Integrability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:324,integrat,integration,324,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['integrat'],['integration']
Integrability,"## Description; Some info about module-level provenance of a Wfn would be handy. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add `Wavefunction.module_` member data and export; - [x] add setting to most modules (not psimrcc or fockci); - [x] incorporate into stdsuite testing. ## Questions; - [x] @dgasmith I've given mcscf its own name. prefer ""detci""?; - [x] @maxscheurer I edited a couple error messages to ADCC from ADC. ok?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935:451,message,messages,451,https://psicode.org,https://github.com/psi4/psi4/pull/1935,1,['message'],['messages']
Integrability,## Description; Switches off a few dependancies until they can be updated on the conda channel. Travis CI is hitting time limits fairly frequently when building these. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/930:35,depend,dependancies,35,https://psicode.org,https://github.com/psi4/psi4/pull/930,1,['depend'],['dependancies']
Integrability,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:63,rout,routed,63,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['rout'],['routed']
Integrability,"## Description; The Cholesky is now based on the Gershgorin theorem, which I describe in a note in the PRA article. The routines' accuracy has been benchmarked in the arXiv paper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1842:120,rout,routines,120,https://psicode.org,https://github.com/psi4/psi4/pull/1842,1,['rout'],['routines']
Integrability,"## Description; The PCMsolver interface takes as input nuclear charges (`mol.Z(i)`) to identify the elements, but did not account for ghost atoms.; Change asks now for the atomic number and thus also avoids`mol.fZ(i)=0`. **This forms the cavity also around the ghost atoms**, which I think is the expected behaviour. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] fixes #1656 . ## Checklist; - [x ] `ctest -R pcm` passes; - [x] The `charges` array no longer contains zeros for ghost atoms (manual inspection). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1977:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1977,1,['interface'],['interface']
Integrability,"## Description; The PK(reordered, disk) algorithm was using twice as much memory as it should.; This is due to not deleting integral and disk-space buffers correctly:; * During the pre-iterations the `batch size` buffer that prepares the disk space (""pre-striping"", within `zero_disk`) and used during the SCF for processing the integrals on disk is not released. ; * The `buffer size` buffer that is used to calculate the integrals is not released after the computation is done. Both buffers are actually the same size and effectively lead to a doubling of the memory demand. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] memory leaks in PK(reordered, disk) algorithm addressed; - [x] Likely solution to #1985 . ## Questions; - [ ] Is there a better solution to `AIO->synchronize()` in-between the `zero_disk` operations?; - [ ] Will there be an issue with: https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/PKmanagers.cc#L886 now that `buffer()` returns a reference?. ## Checklist; - [x] ctest -L quick/dft pass; - [x] memory usage on `top` eyeballed like a hawk. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1990:821,synchroniz,synchronize,821,https://psicode.org,https://github.com/psi4/psi4/pull/1990,1,['synchroniz'],['synchronize']
Integrability,"## Description; The QCSchema wrapper was lacking the capability to save the t-amplitudes and the one-electron density matrix, so this was added. ## Todos; This will add the ability to save the t-amplitudes using the new ""tamps"" driver. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:29,wrap,wrapper,29,https://psicode.org,https://github.com/psi4/psi4/pull/2328,1,['wrap'],['wrapper']
Integrability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:92,contract,contracting,92,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['contract'],['contracting']
Integrability,"## Description; The first eight DDD extracts PRs reduced the delta from; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive to; 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; so here's No. 9 of the DDD series, #1351. ## Todos; - [x] This is the non-class parts of changes to finite difference. Mostly; * using pieces from Mol, rather than mol, to reduce dependence on psi objects; * use more numpy, less Matrix; * consolidate printing so can go to logging; * start to pass finite difference options (points, steps, projection) as kwargs rather than having findif consult global options; - [x] added in the dipder from dipole but it's not used; - closes #1683; - [x] along the way, psimrcc-fd-freq1 failed. as far as I can judge now, this is an existing bug. part of the old output is below. psi is evaulating the gradient, finding it over the cutoff, and so recommending not projecting rotations. then, because of https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L1613, that setting of FD_PROJECT gets tossed, and findif runs projecting rotations, and the test passes. I'm calling this a bug and setting fd_project in the input to force the array dimensions to match and the test to pass. glad to hear other interpretations. ```. Based on options and gradient (rms=3.60E-02), recommend projecting translations and not projecting rotations.; hessian() will perform frequency computation by finite difference of analytic energies. ----------------------------------------------------------; FINDIF; R. A. King and Jonathon Misiewicz; ---------------------------------------------------------. Using finite-differences of gradients to determine vibrational frequencies and; normal modes. Resulting frequencies are only valid at stationary points.; Generating geometries for use with 5-point formula.; Displacement size will be 1.00e-02.; Number of atoms is 2.; Number of irreps is 8.; Number of SALCs is 1.; Translations proj",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2552:419,depend,dependence,419,https://psicode.org,https://github.com/psi4/psi4/pull/2552,1,['depend'],['dependence']
Integrability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:540,interface,interface,540,https://psicode.org,https://github.com/psi4/psi4/pull/1235,1,['interface'],['interface']
Integrability,"## Description; The number of electrons as integrated on the DFT quadrature is printed as ""Post-Iterations"" quantity. Current formatting:; ```; Energy and wave function converged. ==> Post-Iterations <==. electrons on quadrature grid:; NTotal = 2.0000000000 ; deviation = -7.638e-14. Orbital Energies [Eh]; ---------------------. --; electrons on quadrature grid:; Nalpha = 5.9997499893 ; deviation = -2.500e-04; Nbeta = 4.9997504300 ; deviation = -2.496e-04; NTotal = 10.9995004192 ; deviation = -4.996e-04. @Spin Contamination Metric: 2.559910084E-05; ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] NTotal/Nalpha/Nbeta electrons are printed as obtained from the grid as a health check; - [x] adds `psivars`: `GRID ELECTRONS TOTAL/ALPHA/BETA`. ## Questions; - [ ] Open to suggestions and opinions for naming and formatting. Especially regarding printing of decimals. ## Checklist; - [x] psivars doc string; - [ ] Tests?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2001:43,integrat,integrated,43,https://psicode.org,https://github.com/psi4/psi4/pull/2001,1,['integrat'],['integrated']
Integrability,## Description; The one electron hamiltonian is read from PSIF_OEI inside libtransform library. This ; leads to a loss of flexibility in adding external potentials to the wavefunction directly ; for post-scf methods through the python interface. This PR fixes this problem and makes sure the hamiltonian is read consistently from the wavefunction in all the modules. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/718:235,interface,interface,235,https://psicode.org,https://github.com/psi4/psi4/pull/718,1,['interface'],['interface']
Integrability,"## Description; The orthogonalization changes in the Cholesky pull #1760 broke `scf-guess-read2`. The problem is that I started to renormalize the overlap matrix before doing the eigendecomposition. However, it turns out that there's no (simple?) way to renormalize **and** still have a symmetric orthogonalizing matrix **X**. . Namely, the natural way to get the right normalization out is that you. 1. normalize `S`: `Snorm = diag(1.0/sqrt(S)) * S * diag(1.0/sqrt(S))`; 2. form `Xnorm` for `Snorm`; 3. form `X = diag(1.0/sqrt(S)) * Xnorm`. Trying to do step 3 in a way that maintains symmetricity of `X` would require much deeper linear algebra, as you need to know how the eigenvalues and eigenvectors change when you balance S to have a unit diagonal. (It may be that some old linear algebra textbooks show how this is done.). Anyway, IMHO there's nothing wrong with having an asymmetric `X`: if you have a linearly dependent basis, this is bound to happen, and so there's no reason to assume `X` is symmetric. All that matters in the end is the number of molecular orbitals you get from `X`, since the SCF (or even the core Hamiltonian) will give you a basis that is different from `X`. The asymmetric `X` revealed a problem in the initialization of the ROHF code, which is now fixed. ROHF should now also work for the case of canonical orthogonalization, I'm not sure why there ever was a stopping clause. A problem was also found in CUHF, which wasn't tested before. For some reason doing the natural orbitals in the alpha orbital basis made the calculation unstable; simply changing to using `X` to find the natural orbitals suddenly fixed everything. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] ROHF orbital guess read-in works; - [x] CUHF orbital guess read-in works; - [x] Orbital orthonormality is tested in the calculation; if the off-diagonal elements of the MO overlap sum to >= 1e-10 then the calculation crashes. ## Questions; - [",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1781:920,depend,dependent,920,https://psicode.org,https://github.com/psi4/psi4/pull/1781,1,['depend'],['dependent']
Integrability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:601,interface,interface,601,https://psicode.org,https://github.com/psi4/psi4/pull/1061,2,['interface'],['interface']
Integrability,"## Description; The purpose of this PR is to implement the first bits and pieces to connect psi to [i-pi](https://github.com/i-pi/i-pi) to enable molecular dynamics simulations with psi. For instance, it would be possible to carry out path integral molecular dynamics simulations such as [in this reference](https://doi.org/10.1039/C4CP05192K) with psi. It would be great to get a first review of the basic idea in the code and I can add some documentation of the above infrastructure after that as well. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included in `broker.py`; * **User-Facing for Release Notes**; - [ ] Infrastructure to connect to [i-pi](https://github.com/i-pi/i-pi) is included (but not yet documented yet). ## Questions; - [ ] Is the dynamic dependency to [i-pi](https://github.com/i-pi/i-pi) to setup the interface on runtime fine? Or would you prefer to have the Client side implementation to have fully here in psi as well? If the latter is the case, this has the disadvantage, that the client side might need adjustments with a new version of i-pi, which is why I left the client implementation in i-pi for now. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057:900,depend,dependency,900,https://psicode.org,https://github.com/psi4/psi4/pull/1057,2,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"## Description; The purpose of this PR is to integrate with [adc-connect/adcc](https://github.com/adc-connect/adcc/) inside Psi4 and allow Psi4 users to directly run the ADC calculations supported inside adcc. The opposite direction (i.e. using Psi4 SCF results in adcc) is already implemented and working, see the [adcc manual](https://adc-connect.org/calculations.html#general-adc-n-calculations), so this should mainly be an effort of connecting the strings together on the Psi4 side. Currently I am still very much in the planning phase of this PR, thankful for any early pointers or feedback to get me moving in a sensible direction. Since this is my first PR here I still feel a little lost inside the Psi4 source :smile:. My implementation so far hooks into the driver python code of Psi4 and branches out to either `adcc` or the built-in ADC module of Psi4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Get ADC(2) calculation triggered in adcc from Psi4 (see `adcc_examples` subfolder).; - [x] Allow all ADC variants to be run in Psi4; - [x] Proper error handling of Psi4 SCF references not supported in adcc (symmetry, density-fitting, ...); - [x] Integration of adcc installation into Psi4 build system; - Currently adcc can only be installed via `pip`, but we would love to get `conda` support working on our end.; - [x] Tests and examples; - [x] Test install process; - [x] Documentation. ## Questions; - [x] How to best branch between the builtin module and adcc? The two implementations share some features, but use different approaches to solve ADC, which can in some cases lead to differing results (related to #1033 ); - [x] How to best direct options and configurables from Psi4 and adcc? The current solution I see is to add basically everything to the big `read_options.cc`, which is pretty inflexible and could lead to a lot of duplicated information being necessary. Is there some better way to do this?; - [x] What to do with",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744:45,integrat,integrate,45,https://psicode.org,https://github.com/psi4/psi4/pull/1744,1,['integrat'],['integrate']
Integrability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:514,message,messages,514,https://psicode.org,https://github.com/psi4/psi4/pull/1383,1,['message'],['messages']
Integrability,"## Description; The user-supplied occupation arrays weren't sanity checked, which caused segfaults. This PR makes psi4 give an error message instead. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/602:133,message,message,133,https://psicode.org,https://github.com/psi4/psi4/pull/602,1,['message'],['message']
Integrability,"## Description; These are the breaking, user-facing changes for cbs in DDD. That is, these changes aren't needed at present for the cbs back-end, but this is coercing the input front-end into the right syntax. This is No. 6 of the DDD series, #1351. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] All `fn(cbs)` and passing to extrapolation functions are changed over to `fn(""cbs"")` and passing the _names_ of extrapolation functions. This is making cbs behave more like other wrappers: findif you don't call directly, you use kwarg dertype and nbody you don't call directly, you use bsse_type. Functions are trickier to keep imported and don't serialize well, so in ddd, they're registered and replaced by strings, akin to the procedures dictionary.; - [x] alias functions are replaced with dict specification instead of kwarg specification; - [x] UpdateHelpers are added so that if you feed an existing input, it prompts you to make the fn -> str changes.; - [x] Fix bug where allen_focal_point wasn't working b/c used kwargs, not dict, specification for cbs, so the higher deltas were getting lopped off. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2532:536,wrap,wrappers,536,https://psicode.org,https://github.com/psi4/psi4/pull/2532,1,['wrap'],['wrappers']
Integrability,"## Description; Think of the default orbital optimization algorithm in OCC with the following pseudocode:; ```; orbital_gradient = compute_orbital_gradient(); try:; orbital_step = compute_NR_step_via_PCG_with_HF_MO_hessian(orbital_gradient); except ConvergenceError:; orbital_step = compute_step_with_crude_diagonal_MO_hessian(orbital_gradient); diis_step(); ```. I traced a test failure in an upcoming PR (ocepa-grad2) to a failure in the approximate NR step. Five failures, in fact.; 1. The HF MO Hessian couples alpha and beta IDPs. You need a single alpha, not a different alpha for each spin.; 2. For the same reason, you need a single beta.; 3. The Fock term assumed semicanonical orbitals. OCC does not use semicanonical orbitals.; 4. The Fock matrix was acting on the wrong vector.; 5. One of the tensor contractions involving TEI was incorrect. After fixing those five bugs, I observed three things:; 1. After accounting for whether you index by (v,o) or (o, v), the matrix-vector products of the new occ implementation match those of the SOUHF P4N tutorials,; 2. The X (kappa) converged to does satisfy Ax=b; 3. The orbital equations refuse to converge. My conclusion is that the implementation of the algorithm is now correct, but it's not a good way to generate orbital steps. The off-diagonal terms can end up being significant for the open-shell systems that would lead you to use an orbital-optimized method. This didn't cause obvious problems before because the previous errors rendered the PCG procedure non-convergent, so you would always fall back to the crude diagonal step _unless_ your orbital gradient was so low that you didn't need to iterate at all. So what we expect to see from this bug is difficulties converging occ tightly, which has been my experience. To remedy the situation, the default orbital step is now the crude semicanonical step. The next PR should be the final one in the series. I'll just need to rebase it onto this one, repair the two tests I mentioned on",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1829:812,contract,contractions,812,https://psicode.org,https://github.com/psi4/psi4/pull/1829,1,['contract'],['contractions']
Integrability,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:121,rout,routine,121,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['rout'],['routine']
Integrability,"## Description; This PR adds a new psivar for the length gauge origin-dependence of the specific rotation, to aid in migration of the CC tests. `cc29` now tests this psivar. Once the psivar is accepted, I can resume porting tests over. This is PR 6 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian and @loriab ping for new `cc` psivars. For TDC's benefit, you can go to the ""Files changed"" tab, ""Review changes"", and then mark to approve if things look good to you. ## Checklist; - [x] Newly added psivar is tested. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:70,depend,dependence,70,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['depend'],['dependence']
Integrability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:244,integrat,integrates,244,https://psicode.org,https://github.com/psi4/psi4/pull/2443,1,['integrat'],['integrates']
Integrability,## Description; This PR adds functionality for frequency-dependent first hyperpolarizabilities using the CCSD quadratic response theory. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Implementation of left hand perturbed amplitudes.; - [ ] Implementation of quadratic response functions.; - [ ] Implementation of frequency-dependent first hyperpolarizabilities.; - [ ] Optimization and clean-up.; - [ ] Testing. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2043:57,depend,dependent,57,https://psicode.org,https://github.com/psi4/psi4/pull/2043,2,['depend'],['dependent']
Integrability,"## Description; This PR aims to improve the performance of electric field integrals for multiple; coordinates. These are needed, e.g., in EFP and Polarizable Embedding (PE, #1401) calculations, where the; integrals need to be evaluated at all sites in the environment. For large environments, the electric field integrals can become the bottleneck of the calculation. The code I've already implemented is quite ugly and mainly serves as a proof of principle.; Exposure to the Python layer is also not well done at the moment, but it made testing; super easy. In my current [test script](https://gist.github.com/maxscheurer/4736a100ff5de12190ef27f7bc2eaade), I computed integrals at 2000 random points for Water/cc-pVQZ, for which I get a 25x speed-up compared to the existing implementation. Tasks the implementation enables:; - compute field integrals on multiple points; - contract the integrals with a density matrix (for expectation values of the electric field at all points); - contract the integrals with a dipole moment (for building the induction operator for PE/EFP). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] hackish, preliminary version (proof of principle); - [x] cleanup `mintshelper` etc.; - [x] proper naming of new functions. ## Checklist; - [x] Tests added for any new features (`pytests/test_elec_fields.py`); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671:875,contract,contract,875,https://psicode.org,https://github.com/psi4/psi4/pull/1671,2,['contract'],['contract']
Integrability,"## Description; This PR brings (hopefully!) to a close the PCM-changes-directory saga noted in issue #817 and partially alleviated in PR #818. ; This change needed an API update PCMSolver-side, hence the minimum required version bump to its 1.1.12 version. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] PCMSolver updated to its v1.1.12; * **User-Facing for Release Notes**; - [x] Parsing PCM directory _no longer_ changes directory. ## Questions; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a request is made or should the code be routed to use a numerical gradient?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/896:713,rout,routed,713,https://psicode.org,https://github.com/psi4/psi4/pull/896,1,['rout'],['routed']
Integrability,"## Description; This PR builds on the start that @PeterKraus made to get the libecpint library from @robashaw up and running as Psi4's ECP engine. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Improve the speed and stability of the ECP integrals. ## Questions; - [ ] @robashaw are the derivative integrals ready to go in Libecpint yet? If not, do you have any idea how much work it will be to implement them?. ## Checklist; - [x] Make libecpint play nicely with our CMake infrastructure; - [ ] Write wrappers for ECP integral code, making the new code path optional for now; - [ ] Tests added for any new features. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340:548,wrap,wrappers,548,https://psicode.org,https://github.com/psi4/psi4/pull/1340,1,['wrap'],['wrappers']
Integrability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:915,wrap,wrapper,915,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['wrap'],['wrapper']
Integrability,"## Description; This PR clarifies the libxc interface code and function descriptions as to the meaning of the alpha and beta parameters in psi4 vs libxc. See #1258 . Also, the definition of wPBE0 is fixed. See #1259 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1260:44,interface,interface,44,https://psicode.org,https://github.com/psi4/psi4/pull/1260,1,['interface'],['interface']
Integrability,"## Description; This PR closes #2120. The user-side problem is that when there are linear dependencies in the molecule, `fnocc` reports uncontrolled energies, iteration-by-iteration. The mechanism for this is as follows:. * `run_fnocc` requests an SCF computation. `nmopi_ < nsopi_` due to linear dependencies.; * `fnocc` is incompatible with point group symmetry, so calls `c1_deep_copy` to transform the solution to a c1 solution. For concreteness, we'll assume RHF, although all HF subclasses have the same problem.; * `RHF::c1_deep_copy` calls `Wavefunction::c1_deep_copy`. The resulting wavefunction has `nmo_` equal to `nmopi_.sum()` of the previous wavefunction, as desired.; * `RHF::c1_deep_copy` calls the RHF constructor on the new wavefunction, which calls to `HF::common_init`, which initializes `nmopi_ = nsopi_`, under assumption that the subsequent SCF will call `form_Shalf`, which is _actually_ responsible for first eliminating linear dependencies and then determining `nmopi_`.; * There is no subsequent SCF, so `nmopi_ = nsopi_` at the time `fnocc` begins.; * Garbage In, Garbage Out. `fnocc` is given a garbage wavefunction and gives garbage energies. The remedy here is to no longer have `common_init` put suspect information on the wavefunction. Obligatory ping to @edeprince3. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `c1_deep_copy` no longer leads to a wrong `nmopi_` in case of linear dependency. This fixes problems with linear dependencies observed in the `fnocc` module. ## Questions; - [ ] What does this PR mean for #1545? Holger confirmed the bug there was symmetry related, and the system does have a linear dependency... It's probably worth re-investigating after this gets merged in. ## Checklist; - [x] Tests added for any newly working features; - [x] `ctest -j4` is 490/490. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2302:90,depend,dependencies,90,https://psicode.org,https://github.com/psi4/psi4/pull/2302,6,['depend'],"['dependencies', 'dependency']"
Integrability,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:311,depend,dependency,311,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['depend'],['dependency']
Integrability,"## Description; This PR enables Psi4 to interoperate on-the-fly with other codes via [The MolSSI Driver Interface (MDI)](https://github.com/MolSSI/MDI_Library). MDI is an effort of [The MolSSI](https://molssi.org/) to improve and standardize the process of interoperating codes within the computational molecular sciences domain. In particular, MDI supports interoperability within a driver-engine paradigm, in which a driver code controls the high-level operations of one or more engine codes, orchestrating complex calculations like QM/MM or advanced sampling. This PR provides all functionality required for Psi4 to act as an MDI engine. This makes it possible for external codes to exercise control over Psi4 in a manner similar to what is possible using Psi4’s existing API (albeit with a much smaller subset of the functionality), but with the advantage of cross-code generality (all MDI commands are defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html)) and the option of fast inter-code communication via the MPI or TCP/IP methods (selected by the user at runtime). The PR adds [The MDI Library](https://molssi.github.io/MDI_Library/html/index.html), which handles the details of inter-code communication, as an external dependency. The MDI Library compiles with CMake and has no additional requirements, although it will link to an MPI library if one is found. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Include the MDI Library as an external dependency; - [x] Add functionality for Psi4 to respond to MDI commands as defined by [The MDI Standard](https://molssi.github.io/MDI_Library/html/mdi_standard.html); - [x] Add the --mdi command-line option, which causes Psi4 to run as an MDI engine.; - [ ] Document the use of Psi4 as an MDI Engine. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676:104,Interface,Interface,104,https://psicode.org,https://github.com/psi4/psi4/pull/1676,2,"['Interface', 'interoperab']","['Interface', 'interoperability']"
Integrability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:111,depend,dependencies,111,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['depend'],['dependencies']
Integrability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:765,contract,contracting,765,https://psicode.org,https://github.com/psi4/psi4/pull/2124,1,['contract'],['contracting']
Integrability,"## Description; This PR fixes a bug introduced in #1749, where `MemDFJK` handling of range-separated functional was incorrect in the asymmetric case. This incorrect handling lead to incorrect TD-DFT excitation spectra for range-separated functionals when `MemDFJK` was used. This PR hence closes #2431. In the symmetric case, either swapping the contraction order had no effect, or it was corrected by a hermitivitize call later on, so no error was observed. I strongly recommend backporting this PR (or at least the two characters needed to fix the bug). The rest of the PR other than those two characters is tests and commenting. Credit to @hokru for tag-team debugging. . ## Checklist; - [x] Tests added for newly working features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2435:346,contract,contraction,346,https://psicode.org,https://github.com/psi4/psi4/pull/2435,1,['contract'],['contraction']
Integrability,"## Description; This PR fixes three bugs in Psi's NBOWriter.; 1. The AO->MO matrix was previously put in the transpose way to how NBO expected it.; 2. MO coefficients for non-totally symmetric irrep were transformed from SOs to AOs incorrectly, leading to #1566. Closes #1566.; 3. The map from angular momentum functions in Psi to labels for NBO was wrong. For instance, p0 was previously px instead of pz. Due to point 3, **all previous NBO computations from Psi-generated NBO files are suspect.** I very nearly published wrong results due to that, so I advocate backporting this to 1.3. **NEW**; Linear dependencies and angular momentum up to _h_ is now handled properly. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix critical errors in NBOWriter. ## Tests of Correctness; I compared the overlap, density, and Fock matrices for nearly-cis diazene from file47's from Psi and QChem. After accounting for the fact that they order the AOs differently, they match almost perfectly. The density matrix was off in the last decimal place for a few entries. The NAO energies, NAO occupations, and perturbative analysis matched as well. I repeated for my instigating case, cis-sulfurous acid. QChem matches Psi with symmetry matches Psi without symmetry for NAO energies, NAO occupations, and perturbative analysis. Finally, to verify the molecular orbitals, I had both QChem and Psi report the MOs in the basis of NBOs. Apart from ordering the NBOs differently, the two match to within the last decimal place. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1602:605,depend,dependencies,605,https://psicode.org,https://github.com/psi4/psi4/pull/1602,1,['depend'],['dependencies']
Integrability,"## Description; This PR has TDDFT triplets for LDA and GGA functionals. (Psi does not currently support any TDDFT for meta functionals.) This requires lots of moving parts, so this PR serves as a reference for how they all fit together. For ease of reviewing, I'll have smaller PRs that pull off independent pieces for analysis. While I'm waiting for reviews, I'll update comments to show exactly how I know these spin-integration formulae are correct, for the benefit of future debuggers. Closes #2841. ## Status. There are four parts that I can split into separate PRs for reviewer convenience. Then I can bring in this PR. - [x] #2886; - [x] #2887; - [x] #2888; - [x] #2889. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Triplet TDDFT excitations from RKS are now supported. ## Theoretical Analysis. Why were DFT triplets harder than HF triplets? To understand this, we need to understand both the origin of the triplet matrix and the spin properties of the relevant matrix elements. 1. Starting from the UKS RPA/TDA matrices when Ca = Cb, we can do a similarity transformation to obtain the singlet and triplet RKS matrices. The new basis elements for the singlet block all take the form (i->a α + i->a β) / sqrt(2), while the new basis elements for the triplet block take form (i->a α - i->a β) / sqrt(2).; 2. The electron potential is spin-free. Because the coulomb J and exchange K terms are expectation values of this, the associated integrals are spin free, assuming spin does not integrate to zero. For J, spin only integrates to zeroes if there is a spin mismatch in either the bra or the ket. Because we only consider Sz preserving excitations, no spin mismatches are possible. For K, a bra orbital needs to have the same spin as a ket orbital. Because both bra orbitals have the same spin, and both ket orbitals have the same spin, this requires that _all_ orbi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2885:419,integrat,integration,419,https://psicode.org,https://github.com/psi4/psi4/pull/2885,1,['integrat'],['integration']
Integrability,"## Description; This PR implements The Combined Schwarz Approximation Maximum (CSAM) estimate for prescreening two-electron integrals. CSAM was described in this paper by Thompson and Ochsenfeld: https://aip.scitation.org/doi/10.1063/1.4994190. In Psi4, TEIs are screened using the well-known Cauchy-Schwarz Inequality:; `(pq|rs)^2 <= (pq|pq)*(rs|rs)`; This type of screening is effective when the overlap between orbitals p and q (or r and s) is sufficiently small. However, it doesn't take into account the scenario in which the two orbital products pq and rs are individually significant, but very far apart. CSAM factors in this distance dependence. . The following benchmarks show modest improvements in efficiency with negligible loss in accuracy:; ![Screen Shot 2019-05-28 at 1 59 57 PM](https://user-images.githubusercontent.com/16376046/58500885-1c618d00-8151-11e9-82f8-ced6ce967483.png). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Adds CSAM screening to ERISieve ; - [x] Adds python binding for the ERISieve class; - [x] Adds a ERISieve PsiAPI test. ## Questions; - [ ] The `ERISieve` constructor now takes a boolean `do_csam` (which defaults to `false`). What's the best way to hook this up to the user interface?; - [x] The `ERISieve` class contains a partially-finished attempt at implementing a similar type of screening (QQR). Are their plans to finish this? Or implement other integral-related optimizations?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1499:642,depend,dependence,642,https://psicode.org,https://github.com/psi4/psi4/pull/1499,2,"['depend', 'interface']","['dependence', 'interface']"
Integrability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:64,rout,routine,64,https://psicode.org,https://github.com/psi4/psi4/pull/1498,1,['rout'],['routine']
Integrability,"## Description; This PR implements a semi-numerical algorithm for computing the exchange (K) matrix as described in [this paper](https://doi.org/10.1016/j.chemphys.2008.10.036) and [this paper](https://doi.org/10.1063/1.3646921) as ""Chain of Spheres"" exchange or COSK. The implementation is added to a new `JK` class, `DFJCOSK`, which combines COSK with a simple direct density-fitted J algorithm. COSK is easily parallelized, completely in-core, and has good scaling--between O(N^1) and O(N^2)--making it ideal for HF/DFT calculations on large systems, particularly calculations for which the `DF` algorithm must store integrals on disk. The low scaling comes at the cost of a large pre-factor, so it shouldn't be used on small systems. In my benchmarking, `DFJCOSK` is almost always faster than `DIRECT` (even with density screening and incremental fock construction). The crossover between `DFJCOSK` and `DF` is dependent on the system, basis, CPU, memory, etc. but I've observed it as early as <3000 basis functions. I've attached a performance comparison of the `DFJCOSK`, `DIRECT`, and `DF` algorithms on a set of linear alkanes in which it's clear that `DFJCOSK` outperforms the other two algorithms for large systems. ![alkanes](https://user-images.githubusercontent.com/16376046/166322946-172d8fee-3ce3-4811-9633-db094219d17e.png). An encouraging fact about these results is that this implementation is far from optimal. The cost of the COSK algorithm is dominated by the evaluation of one-electron integrals on a quadrature grid. Therefore, there are a number of improvements to be made, in order of increasing difficulty:. - Do a better job at screening small integrals before they're computed (like [these](https://aip.scitation.org/doi/pdf/10.1063/1.5048491)); - Use better grids (such as [here](https://aip.scitation.org/doi/full/10.1063/1.5049435)); - Compute individual integrals faster. This could be done by reusing intermediates in the recursion for integrals involving the same she",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567:915,depend,dependent,915,https://psicode.org,https://github.com/psi4/psi4/pull/2567,1,['depend'],['dependent']
Integrability,"## Description; This PR implements analytical nuclear gradients for Polarizable Embedding (PE). I've been messing with some integral routines, so now `ao_multipole_potential` and `ao_multipole_potential_gradient`; exist. I think we can also reconcile this and make it consistent (pass all moments and coordinates) throughout... I'm creating this PR as a preliminary draft for now so we can better coordinate. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] PE-SCF gradients; - [ ] some sort of dispersion/repulsion for optimizations (D3, LJ, ...); - [ ] Release and bump `cppe`; - [ ] add tests once new `cppe` is out; - [ ] consistent top-level integral routines. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039:133,rout,routines,133,https://psicode.org,https://github.com/psi4/psi4/pull/2039,2,['rout'],['routines']
Integrability,"## Description; This PR implements extrapolation of DFT energies through the CBS interface. The implementation is based on [my paper in JCTC](https://pubs.acs.org/doi/10.1021/acs.jctc.0c00684), however an update to that is currently in the works, which is where a lot of the basis set parameters are from. I will comment on that in due course once I have the pre-print. The total density functional energy components are split into `fctl`, `dh`, `disp`, and `nl` parts. In a simple extrapolation, the `fctl` component would be extrapolated with exp-sqrt function and one alpha, the double-hybrid `dh` component with power function and a different alpha, and the `disp` and `nl` components would be taken from the highest basis set calculation. . The initial version should pass all `ctest -L cbs`, but it's not very tidy, which I'll work on next. I am mainly making this PR to know answers to the questions below:. ## Todos; - [x] Extrapolation of density functional energies via `energy(""functional/basis"")` interface; - [x] More complex extrapolation via `energy(cbs, cbs_metadata={})` interface ; - [x] Renamed extrapolation functions to author-agnostic names and provided aliases.; - [x] Clean up.; - [x] Make this work with gradients. Will need a fix for #2130.; - [ ] Incorporate further documentation changes; - [ ] Allow for arbitrary mixing and extrapolation of functional components, not just total energies. ## Questions; - [x] ~Should I bother cleaning the cbs driver up, given that distributed driver is coming in 1.5?~ Minor clean-up TODO.; - [x] ~The fact that the `DFT VV10 ENERGY` contribution is included in `DFT FUNCTIONAL TOTAL ENERGY` is making my life quite difficult here. I understand normally VV10 is part of the SCF cycle, but we also allow calculating it as a post-scf correction. Is there any will to change `DFT VV10 ENERGY` to behave like empirical dispersion corrections in terms of variables?~ Separated VV10 from DFT FUNCTIONAL TOTAL ENERGY. ## Checklist; - [x] Tests ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132:81,interface,interface,81,https://psicode.org,https://github.com/psi4/psi4/pull/2132,1,['interface'],['interface']
Integrability,"## Description; This PR implements standard grid pruning techniques, where one assumes that the electron density is largely isotropic close to the atomic centre and thus coarse grids are sufficient. Typically the atomic integration sphere is divided into several (3-4) regions where the outer region gets the most accurate grid and the grid get step-wise more coarse towards the inner region(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:220,integrat,integration,220,https://psicode.org,https://github.com/psi4/psi4/pull/1591,2,['integrat'],['integration']
Integrability,"## Description; This PR implements the grid pruning scheme of Matthews (https://pubs.acs.org/doi/10.1021/acs.jctc.9b01205), applying a pivoted Cholesky decomposition to the S matrix to remove linear dependencies and drastically reduce the number of grid points. Per @PhillCli's comments on #3157, taking the pseudoinverse of the S matrix can be costly, and this PR fixes that problem! The final rank appears to be _mostly_ invariant to grid size, but only to the molecule/basis set (results in tables below). | System | Radial, Spherical Points | Initial Rank | Final Rank |; | ------------- | ------------- | ------------- | ------------- |; | Water/cc-pVDZ | (25, 50) | 2605 | 280 |; | Water/cc-pVDZ | (50, 86) | 8739 | 280 |; | Water/cc-pVTZ | (25, 50) | 2630 | 1184 |; | Water/cc-pVTZ | (50, 86) | 8774 | 1328 |; | Benzene/cc-pVDZ | (25, 50) | 9831 | 3124 |; | Benzene/cc-pVDZ | (50, 86) | 32588 | 3414 |. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Drastically reduction of the rank of the intermediates in a THC factorization. ## Questions; - [x] The pivoted Cholesky algorithm presented by Matthews requires the upper triangular form. I modified the algorithm in matrix.cc to the upper triangular form because `Matrix::pivoted_cholesky` is not called elsewhere. Is this okay?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3187:199,depend,dependencies,199,https://psicode.org,https://github.com/psi4/psi4/pull/3187,1,['depend'],['dependencies']
Integrability,"## Description; This PR implements the partial Cholesky orthogonalization procedure I've recently described in https://arxiv.org/abs/1911.10372, which can be used to avoid pathological linear dependencies in the basis set. This is the simple version of the algorithm which just hides the pathological functions; the more sophisticated one is already available in ERKALE but it is limited to fixed geometries. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Partial Cholesky decomposition implemented; - [x] Calculation of basis function extents via `r^2` value implemented; - [x] Basis functions sorted so that steep ones get treated first by the decomposition. ## Questions; - [x] How to handle the sorting of basis functions in the presence of symmetry? AFAIK each SO basis functions is a superposition of identical functions on different atoms; this means that the corresponding symmetry-blocked `r^2` values could just be one of these.; - [x] Although matrix.cc already implements pivoted Cholesky, it's also available in LAPACK as `dpstrf()`. Maybe the implementation should be replaced with a call to LAPACK?; - [ ] Would it be possible to make Psi4 drop the irrelevant shells altogether from the basis set to make calculations more efficient? This would need to be done at every geometry... ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1760:192,depend,dependencies,192,https://psicode.org,https://github.com/psi4/psi4/pull/1760,1,['depend'],['dependencies']
Integrability,"## Description; This PR introduces a new `DFTensor` class to DCT. This is a lightweight wrapper over Matrix which I use to get some extra dimension information, as well as to store the DF contraction functions which were previously cluttering DCT's wavefunction object. Accordingly, many objects which were previously a `Matrix` have been specialized to a `DFTensor`. This also allows more careful input validation for the functions of `DFTensor`, but my primary motivation is for **code organization for the sake of a future PR**. Although there's a large LoC change, most of this is just moving code around and the bare minimum changes needed to make the code compile. **Reviewers, the thing to look at is the header files.**. Also of note: `Matrix bQpqA_mo_;` was never actually used and is thus removed. That should be decent memory savings. Do **not** merge until 1.5. It is far too late in the game for PRs of this scope. ## Checklist; - [x] DCT test passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2250:88,wrap,wrapper,88,https://psicode.org,https://github.com/psi4/psi4/pull/2250,2,"['contract', 'wrap']","['contraction', 'wrapper']"
Integrability,## Description; This PR introduces an atomic blocking scheme for quadrature grid points. All grid points in a `BlockOPoints` object belong to a singular parent atom.; Part 1 contains just the basic feature to get it our for people depending on it. Optimization for speed is yet to come. ### New options:; - `DFT_BLOCK_SCHEME = ATOMIC` (unique blocks of grid points for each atom); - `DFT_REMOVE_DISTANT_POINTS` (new flag for existing functionality). ### primary C++ feature:; - `grid->atomic_blocks()[N_ATOM][N_BLOCKS]` additionally to `grid->blocks()[N_BLOCKS]` # provides all grid points for an atom; - `block->parent_atom()` # atom the current block belongs to. ### fixes; - collocation size estimate in naive gridblocker was wrong.; - removes unused `index` vector. #### note; - Automated formatting of the files with `clang-format` made unrelated changes. ## Questions; - [ ] The ugly code [here](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.cc#L4630-L4641) is because of an issue with the `BlockOPoints` [object](https://github.com/hokru/psi4/blob/atomic_grid1/psi4/src/psi4/libfock/cubature.h#L179). I'd like advice how to handle this better. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge. ---. ## Usage. Normal loop structure; ```; for (size_t Q = 0; Q < grid_->blocks().size(); Q++) {; size_t parent_atom_ = grid_->blocks()[Q]->parent_atom();; .; .; .; }; ```. Looping over atoms and their blocks. ; ```; # openmp note: for best performance the atom and block loop could possibly; # be collapsed into a singular loop using `collapse(2)`; for (size_t i = 0; i < grids_.size(); i++) { # here size = number of atoms; for (size_t Q = 0; Q < grid_->atomic_blocks()[A].size(); Q++) {. // access a block; std::shared_ptr<BlockOPoints> block = grid_->atomic_blocks()[A][Q];; .; .; .; }; ```,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336:231,depend,depending,231,https://psicode.org,https://github.com/psi4/psi4/pull/2336,1,['depend'],['depending']
Integrability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:460,interface,interface,460,https://psicode.org,https://github.com/psi4/psi4/pull/1756,1,['interface'],['interface']
Integrability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:436,message,message,436,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['message'],['message']
Integrability,"## Description; This PR is designed to enable testing of a wide variety of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords available in Psi4. Of the currently-available JK tests, scf5 covers a wide variety of build methods, but only at a single screening type per method (density or csam, depending on the method). Meanwhile, `test_erisieve.py`, after the updates introduced in https://github.com/psi4/psi4/pull/2973, tests a wide variety of screening types, but with limited testing in conjunction with different JK builds (the only tests that don't use the Python interface of `TwoBodyAOInt` directly, use `SCF_TYPE=DIRECT` or `DF` as the JK method for screening comparisons). This leaves a lot of untested JK build+screening combos, which may be potentially broken and uncaught by the CI as a result. As a matter of fact, such cases actually do exist in the code currently (e.g., CompositeJK methods + no screening). This PR adds a new pytest module, `test_comprehensive_jk_screening.py`. It is effectively an expanded version of the scf5 test module, testing one of the scf5 systems (singlet oxygen) with the same basis set, but also including different screening methods and algorithmic subtypes available in Psi4. Screening is assumed to have an insignificant impact on energy within the tolerance used, so all screening types for a given method use the same reference energy. Some combinations of method and screening type throw an exception by design; this is accounted for in the test by testing that such combinations do indeed throw an exception as expected. Other combinations of method and algorithm are broken at the moment and error out; these are simply skipped for now. They are all logged in the same spot, and can and will be addressed in future PRs. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new pytest module to Psi4, `test_comprehensive_jk_screening.py` , to test different combinations of JK build algorithms and ERI ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2978:309,depend,depending,309,https://psicode.org,https://github.com/psi4/psi4/pull/2978,2,"['depend', 'interface']","['depending', 'interface']"
Integrability,"## Description; This PR is intended to implement VV10 gradients and cache collocation matrices to prevent reconstruction every iteration. The VV10 gradient is on hold until I build a new Grid that uses only atom-centered blocks rather than blocks that possibly contain functions from multiple centers. This is due to the fact that the VV10 nuclear gradient has a component which requires a gradient with respect to centers and not just with respect to the density as there are explicit `1/r` dependance in the VV10 energy. ## Todos; - [x] Cache collocation matrices to remove DFT bottleneck for small molecules.; - [x] Figure out how many blocks to store based on available memory.; - [ ] Implement VV10 gradients; - [x] Orbital VV10 gradient piece implemented; - [ ] Nuclear VV10 gradient piece implemented; - [ ] A DFT Grid that uses only Atom centered blocks. ## Questions; - [ ] Anyone have thoughts on how to figure out how much memory JK and grid caching should receive?. Timing for a small molecule without a cache using TPSS (a MGGA):; ```; | UV: Form V : 22.583u 1.117s 13.702w 15 calls; | | Properties : 12.333u 0.883s 7.756w 10530 calls; | | Functional : 5.617u 0.033s 3.217w 10530 calls; | | V_xc : 4.400u 0.117s 2.567w 10530 calls; ```. With a cache:; ```; | UV: Form V : 13.750u 0.967s 8.316w 15 calls; | | Properties : 4.083u 0.783s 2.422w 10530 calls; | | Functional : 4.950u 0.000s 3.186w 10530 calls; | | V_xc : 4.383u 0.100s 2.564w 10530 calls; ```. Note DFT V matrix takes a good portion of JK time up to ~2k basis functions with our DF code, though this depends on the density of the grid. Cache sizes:. Grid (99, 302); ```; LDA - 6MB/atom; GGA - 24MB/atom; MGGA - 60MB/atom; ```. Grid (120, 590); ```; LDA - 16MB/atom; GGA - 48MB/atom; MGGA - 160MB/atom; ```. A cache of every block point seems to make the computation 40-80% faster. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/bui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1233:492,depend,dependance,492,https://psicode.org,https://github.com/psi4/psi4/pull/1233,1,['depend'],['dependance']
Integrability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:159,depend,dependency,159,https://psicode.org,https://github.com/psi4/psi4/pull/563,1,['depend'],['dependency']
Integrability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:1212,depend,dependent,1212,https://psicode.org,https://github.com/psi4/psi4/pull/2529,1,['depend'],['dependent']
Integrability,"## Description; This PR moves the `dfocc` technology for density-fitted gradients out of `dfocc` and into the `libmints` module for use by other modules. Obligatory @jturney and @loriab pings. **Q:** Can other modules use this code?; **A:** I can personally promise that `dct` will be using this soon, and Forte can use this for its DF-CASSCF gradients. If you want to use this code, just send me a message! However, the other modules in Psi that currently support DF gradients shouldn't use this. The range-separated gradients mean that SCF can't use this, and DFT gradients are varied enough anyways that we shouldn't try to generalize them. Rob's DFMP2 implementation separates out the Coulomb and Exchange contributions from the derivative. The Coulomb terms allow a performance optimization which prevents this generalized solution from applying. **Q:** Do we _really_ need to create a `compute_df` function separate from `compute` for gradients?; **A:** I'd say yes, for two reasons. First, in the DF case, it's not obvious which DF integrals you're using (`df_basis_scf` is probably one, but is the other `df_basis_mp`, `df_basis_dct`, `df_basis_cc`?), so you need to explicitly supply this. One can imagine ways to circumvent this, but those require other infrastructure changes. Second, the `compute` function is rather complicated due to its use of three different ""algorithms"". Combining the two functions would make them more complicated. Simplifying the `compute` function, while an important task and one I will probably need to do before I can fully put my graduate projects behind me, is outside of the scope of this PR. Do you _really_ want to review something even larger?. **Q:** How stable is the interface?; **A:** Changes aren't _necessary_, and I plan to keep this stable at least until after the `dfocc` resync. However, I may make some interface changes if I find they're convenient for non-`dfocc` modules that use this. The big change I'm considering is taking the `dfmp2` a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079:399,message,message,399,https://psicode.org,https://github.com/psi4/psi4/pull/2079,1,['message'],['message']
Integrability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:47,interface,interface,47,https://psicode.org,https://github.com/psi4/psi4/pull/1942,4,"['depend', 'interface']","['depends', 'interface']"
Integrability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:53,message,message,53,https://psicode.org,https://github.com/psi4/psi4/pull/2906,2,['message'],['message']
Integrability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:38,rout,routines,38,https://psicode.org,https://github.com/psi4/psi4/pull/2111,1,['rout'],['routines']
Integrability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:233,depend,dependencies,233,https://psicode.org,https://github.com/psi4/psi4/pull/2381,2,['depend'],"['dependencies', 'dependent']"
Integrability,"## Description; This PR removes some unused code from the `dct` module. Most importantly for me, this gets rid of a difficult-to-follow function and removes an IWL call. I count all three of those as victories for code cleanup. Expect another PR to replace some IWL in `dct` with `libdpd`, but that depends on the timing tests. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Removes unused code. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2168:299,depend,depends,299,https://psicode.org,https://github.com/psi4/psi4/pull/2168,1,['depend'],['depends']
Integrability,"## Description; This PR strives to implement an interface of psi4 to the [ddX library](https://github.com/ACoM-Computational-Mathematics/ddX), which implements solvation models (COSMO, PCM, linearised Poisson-Boltzmann) following a domain-decomposition approach. At its current stage I open the PR to get some feedback from devs about the suggested changes and structure and to finalise the upstream python interface of ddX. Note that this PR Is currently deliberately done on top of an outdated master, since any commit after #2388 introduces segfaults (details see below), which so far I have not yet been able to trace down. Any help on that would be much appreciated. ## User API & Changelog headlines; - Implementation of PCM and COSMO solvation models based on the ddx library. ## Dev notes & details; - Introduction of a NumIntHelper class to compute some integrals numerically using a DFT grid; - Introduction of ddx solvation model and new ddx options. ## Reproducer for the mysterious segfault; As part of rebasing against the current master I encountered a really strange segfault. I managed to produce a minimal example, which has really nothing to do with ddx and only adds a python interface to a simple numerical electrostatic integral. See here for a [trimmed-down diff](https://github.com/psi4/psi4/compare/master...mfherbst:psi4:segfault). On my machine checking out this `segfault` branch with `0_configure.sh`, building and running the `mytests/runtests.sh` script gives a segfault inside the numerical integration in the `PCMPotentialInt` class. Note that the code I added *is not even called*, the call to `PCMPotentialInt` happens from the pcm code *which I have not modified*. Now, commenting out; ```c++; PrintIntegralsFunctor printer;; potential_integrals_->compute(printer);; ```; the segfault disappears. I'm getting the weird feeling I'm doing something really stupid here and I just missed it. ## Questions; - [x] Thoughts on the NumIntHelper?; - [x] Is D -> D_cart neede",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767:48,interface,interface,48,https://psicode.org,https://github.com/psi4/psi4/pull/2767,2,['interface'],['interface']
Integrability,## Description; This PR updates the MDI integration to support version 1.2 of the MDI Library. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2160:40,integrat,integration,40,https://psicode.org,https://github.com/psi4/psi4/pull/2160,1,['integrat'],['integration']
Integrability,"## Description; This PR updates the `cppe` interface code (including option handling) to the newest version `v0.2.1` (major performance improvement 🚀). . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Updated interface, options; - [x] Add options for Thole damping. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1922:43,interface,interface,43,https://psicode.org,https://github.com/psi4/psi4/pull/1922,2,['interface'],['interface']
Integrability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python, similarly to #861, but will bring it to fruition within the Python-side SCF iteration scheme. The `PCM` object wraps the PCMSolver library and offers one method: `compute_PCM_terms` to calculate the polarization energy **and** the Fock matrix contributions due to the continuum. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); - [x] Moved `HF::print_energies()` Py-side; - [x] Mirror changes introduced in #896 ; - [x] Add tests for density-fitted SCFs (thanks @CDSherrill for pointing this out); * **User-Facing for Release Notes**; - [x] Exposing the `PCM` object to Python.; - [x] Restoring PCM functionality with Py-side iterations.; - [ ] Document behavior for gradients (see question). ## Questions; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?; - The electrostatic potential and apparent surface charge vectors are now dimensioned using a `Dimension` object that keeps track of how many cavity points per irrep there are. This is one step to get PCM fully functional with point group symmetry. It seems to me the integrals are always calculated using C1. How can I get them to be calculated with symmetry?; - As (probably not very clearly) noted in the manual, **analytical gradients including PCM are NOT available**. Should there be a stop in the code when such a re",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/878:187,wrap,wraps,187,https://psicode.org,https://github.com/psi4/psi4/pull/878,1,['wrap'],['wraps']
Integrability,"## Description; This PR will expose the `PCM` object in Psi4 out to Python. The `PCM` object wraps the PCMSolver library and offers three methods:; 1. `compute_E` to calculate the polarization energy due to the continuum;; 2. `compute_E_electronic` to calculate the polarization energy due to the continuum, but only using the electron density;; 3. `compute_V` to calculate the PCM potential, which is added on top of the Fock matrix. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Clean-up the `PCM` object and corresponding sources:; * Forward-declare as much stuff as possible instaed on `include`-ing; * Remove raw pointers in favor of `std::vector`, `Vector` or `std::shared_ptr`; * Use a [scoped `enum`](http://en.cppreference.com/w/cpp/language/enum) instead of an [unscoped `enum`](http://en.cppreference.com/w/cpp/language/enum); * **User-Facing for Release Notes**; - [ ] Exposing the `PCM` object to Python. ## Questions; - The initialization of the `PCM` object requires a `BasisSet`. I am unsure what is the best way to grab that Python-side.; - Still regarding initialization, I think it can be done better. Meaning that after reading the user input, the `PCM` object can be initialized by passing the printlevel and the `BasisSet` _under the hood_. @loriab @dgasmith can you point me to existing examples in the codebase? I've looked around in `core.cc` but it's a bit daunting.; - I think this will be useful for the ongoing work on #847 ; - @andysim and/or @lothian, the file [psi4/libmints/integral.h](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/integral.h#L487) has a comment `/// Want to change the name of this after the PCM dust settles`. Do you remember what was the intention there?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/861:93,wrap,wraps,93,https://psicode.org,https://github.com/psi4/psi4/pull/861,1,['wrap'],['wraps']
Integrability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:302,depend,dependencies,302,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['depend'],['dependencies']
Integrability,"## Description; This fixes Example 2 of #2231. DF-DCT no longer segfaults in the presence of linear dependencies. Even with this merged in, #2231 should stay open until I've had a chance to do some more thorough testing of the module. This is, once again, a stand-alone bugfix. ## Questions; - [x] Test case added! ~~It would be good for me to write a test case for everything I check as part of #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, _right now_ is a bad time to write the test since #2232 will change the reference output.~~. ## Checklist; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233:100,depend,dependencies,100,https://psicode.org,https://github.com/psi4/psi4/pull/2233,1,['depend'],['dependencies']
Integrability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:921,message,message,921,https://psicode.org,https://github.com/psi4/psi4/pull/2557,1,['message'],['message']
Integrability,"## Description; This is No. 5 of the DDD series, #1351. ## Todos; - [x] Add `psi4 --module` for find pymod. qcng already tries to use it; - [x] Add another mode to `prepare_options_for_modules` that instead of figuring out what options are active in a module (mediated mode, used previously for sow/reap, I think) now records the settings for reset (state mode, used in DDD). Added a context manager to ""hold and restore"" the options state.; - [x] Add `run_qcschema(..., postclean)` option that handles the trouble when this is called *from Psi4* of deleting the parent session's output file.; - [x] Be tolerant of missing files when cleaning numpy files. I don't remember why/if this was necessary, but on the whole, a missing numpy file isn't worth erroring on.; - [x] Aboid extra '/' in paths from psio. I don't remember if this was fixing an error or just aesthetic.; - [x] docstrings; - [x] ADDED: another attempt to fix Win conda package. ## Checklist; - [x] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2530:260,mediat,mediated,260,https://psicode.org,https://github.com/psi4/psi4/pull/2530,1,['mediat'],['mediated']
Integrability,"## Description; This is No. 8 of the DDD series, #1351. ## Todos; - [x] qcvars `FINDIF NUMBER` and `NBODY NUMBER` are handy to confirm those wrappers are planning correctly. This PR forward-ports more tests of those vars; - [x] two more detailed nbody tests are forward-ported. one is a copy of a ctest only run through qcschema. the other checks the total vs ie return that was wrong in nbody for a while and solved by #2221.; - [x] add ""nbody"" label/mark to ctests and pytests systematically. make all nbody tests runable through pytest. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2544:141,wrap,wrappers,141,https://psicode.org,https://github.com/psi4/psi4/pull/2544,1,['wrap'],['wrappers']
Integrability,"## Description; This is a continuation of @bennybp's #587 that I'd like to wrap up, but the gdma Travis isssue needs fixing. We can work out merge order later. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] everything #587 does; - [x] changes the ERD warning, updates the docs, adds test case; * **User-Facing for Release Notes**; - [x] ERD integrals now work for far more types of systems. Previously it was only direct, conventional HF. Now works for most all energies (except LRC DFT). Does not work for gradients, but those are disabled. ## Questions; - [x] Waiting for a clean Travis test (gdma culprit), then ready to go. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/605:75,wrap,wrap,75,https://psicode.org,https://github.com/psi4/psi4/pull/605,1,['wrap'],['wrap']
Integrability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:162,Depend,Depends,162,https://psicode.org,https://github.com/psi4/psi4/pull/1539,2,"['Depend', 'depend']","['Depends', 'dependencies']"
Integrability,"## Description; This is a start to addressing #2272 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `MBIS_CHARGES` and `MBIS_VOLUME_RATIOS` are now separate oeprop tasks to the user but still reusing code.; - [ ] `oeprop(wfn, ""MBIS_VOLUME_RATIOS"")` should be fine (indep oeprop fn), but `set scf_properties mbis_volume_ratios; energy(""scf"")` will still fail as #2272 reported because those are `OEProp` class instantiations called from proc.py, and the free atom volumes aren't available. The oeprop.cc code could exit gracefully when free atom volumes aren't available, but having different properties lists for the two calling routes isn't good.; - [ ] so why not add the loc from oeprop() to `OEProp`s in proc.py so that atom volumes are available? nice thought, but the fn that produces them itself calls oeprop() and energy() and descends into endless recursion. I haven't sought the logic that makes this all work together.; - [ ] add tests. probably some of the existing ones will break for only calling one mbis property but checking volrat. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273:690,rout,routes,690,https://psicode.org,https://github.com/psi4/psi4/pull/2273,1,['rout'],['routes']
Integrability,"## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Create `%PREFIX%\Scripts` -- `conda` stopped doing it automatically.; - [x] Don't package `bin\psi4.bat` -- `conda` learnt to recognize *Python* scripts and generate wrappers for them, i.e. `%PREFIX%\Scripts\psi4.exe`, but it is still needed for local testing.; - [x] Pin LLVM 7.0.1 -- 8.0.0 fails to build the optimized libint. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) -- https://github.com/psi4/psi4/issues/933#issuecomment-494354023. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1648:330,wrap,wrappers,330,https://psicode.org,https://github.com/psi4/psi4/pull/1648,1,['wrap'],['wrappers']
Integrability,"## Description; This is part of *Psi4* porting to Windows (#933). From MKL 2019.0, the packaging of Windows packages has changed. Import libraries (.lib) have been moved to separate `mkl-devel` package (https://github.com/ContinuumIO/anaconda-issues/issues/10154), which follows the changes in Intel channel (https://anaconda.org/intel). The same happened to `intel-openmp`, but `intel-openmp-devel` package has not been created. *Clang* needs an import library `libiomp5md.lib` to link with `libiomp5md.dll`. Interestingly, MKL installer from *Intel* (https://software.intel.com/en-us/mkl/choose-download/windows) has that library. This obsoletes #1408 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix the missing Intel OpenMP import file; - [x] Update to MKL 2019.1; - [x] Improve CMake message. ## Questions; - [x] This is hackish, but makes things to work. Ideally, we need `intel-openmp-devel`, so hopefully *Intel* decides to make it. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1571:844,message,message,844,https://psicode.org,https://github.com/psi4/psi4/pull/1571,1,['message'],['message']
Integrability,"## Description; This is something I have been working on as part of the upcoming Psi4-GauXC interface; but it seems to be of interest for other use cases, so I will be adding it here as a separate PR. What this change does, is it adds two new member functions to the `Psi4::Matrix` class, `eigen_map()` and `eigen_maps()` . Both of these functions serve the same purpose - take the Psi4 matrix in question and return a representation of said matrix through Eigen's `Map` objects. The `Eigen::Map` class acts the same way as a normal `Eigen::Matrix` object, but uses an external array as its data buffer rather than an internal data buffer. The `eigen_map()` and `eigen_maps()` functions, then, return Eigen matrix-like objects that directly link with the Psi4 matrix data buffer of the Psi4 matrix for which the function was called. This provides an efficient fashion by which to utilize Psi4 matrices in contexts which require Eigen constructs, with no data deepcopying or Eigen-to-Psi4 back-conversions required. There is a key difference between the two functions. `eigen_map()` assumes that the matrix has a single irrep, and returns a single `Eigen::Map` object. `eigen_maps()` , on the other hand, is used for matrices with multiple irreps, and returns a `std::vector` of `Eigen::Map` objects, each `Map` in the `vector` corresponding to one irrep of the Psi4 matrix. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds two new functions, `eigen_map()` and `eigen_maps()`, usable in Psi4 plugins and downstream programs, that return a formulation of the calling `Psi::Matrix` object, that is usable in contexts where `Eigen::Matrix` objects are required/desired. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143:92,interface,interface,92,https://psicode.org,https://github.com/psi4/psi4/pull/3143,1,['interface'],['interface']
Integrability,"## Description; This produces a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. This PR is the controversial part of the docs technical refresh. I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module, and any `psi4.driver` was referring to driver.py, not psi4/driver/. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python finding it irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2166:527,wrap,wrappers,527,https://psicode.org,https://github.com/psi4/psi4/pull/2166,1,['wrap'],['wrappers']
Integrability,"## Description; This pull request aims to properly update energy, orbital energies, densities etc of the wave function for (conventional and density-fitted Mp2) and density-fitted CCSD calculations, so as to ensure proper checkpointing using FCHK interface. ; Also, there seems to be a problem in using FCHKWriter for conventional mp2 gradient calculations as I get a segmentation fault. This PR is meant to fix these problems which was pointed out by abdale on the psi4 forum. http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/747:247,interface,interface,247,https://psicode.org,https://github.com/psi4/psi4/pull/747,2,['interface'],['interface']
Integrability,"## Description; This will temporarily disable installation and testing of `adcc`.; Current `psi4` and `adcc` do not seem to like each other (dependency issues with MKL and HDF5). As discussed with @loriab, `adcc` will be re-enabled for tests upon reconciliation. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848:141,depend,dependency,141,https://psicode.org,https://github.com/psi4/psi4/pull/1848,1,['depend'],['dependency']
Integrability,"## Description; This will upgrade our ECP engine from the native implementation to the superior [standalone library](https://github.com/robashaw/libecpint), also written by Rob Shaw. That library also provides gradient and Hessian terms, which will greatly improve performance. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Hook up external build; - [x] Get energies working; - [x] Get gradients working; - [x] Get Hessians working; - [x] Remove old native implementation; - [x] Make all tests / references to ECPs conditional depending on libECP activation. LAB: conditional build marked by `USING_ecpint` compile definition. This turned out uglier than should strictly be needed because as soon as you ifdef the ao_ecp declarations in integrals.cc, all calcs, w/ or w/o ecp segfault. Possibly I'm missing something, but present ifdef pattern is working stably.; - [x] Linux and Mac conda packages are available off psi4/label/dev. Windows untested. These packages have stylistic problems, but they'll do for now. There are also Linux and Mac conda packages off conda-forge. At least the Linux works fine. Installation is mildly involved with the mixed base channels, so the psi4 packages exist for simplicity of availability.; - [x] NYI message on stability code added to close #2577 ; - [ ] build docs will be in a separate PR. ## Questions; - Can anyone think of how one might access code with ecp ifdefs _without_ building a psi4 BasisSet (besides zerobasis)? Particularly though some non-driver mintshelper API call? This is important because the nearly sole whoa-your-mol+basis-needs-ecp-but-libecpint-not-built warning happens at the BasisSet build in export_mints. If users get around that, they'll be surprised by missing electrons b/c ecp code is deactivated. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135:588,depend,depending,588,https://psicode.org,https://github.com/psi4/psi4/pull/2135,1,['depend'],['depending']
Integrability,## Description; Updates the Psi4 interface to the MolSSI QCSchema using canonical QCElemental objects. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Begins deprecation of the old JSON command line.; - [x] Validates and runs Psi4 via QCSchema conventions and objects.; - [x] Allows both JSON and Msgpack CLI execution. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1723:33,interface,interface,33,https://psicode.org,https://github.com/psi4/psi4/pull/1723,1,['interface'],['interface']
Integrability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:459,Interface,Interface,459,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['Interface'],['Interface']
Integrability,## Description; Uses the [new RESTful interface](https://pubchem.ncbi.nlm.nih.gov/pug_rest/PUG_REST.html#_Toc458584218) to get PubChem hits.; ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] Fixes PubChem tests with Python 3. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/507:38,interface,interface,38,https://psicode.org,https://github.com/psi4/psi4/pull/507,1,['interface'],['interface']
Integrability,"## Description; When trying to build from source, I had problems with Pybind11 headers not being found. This is most likely due to #2369 introducing new dependencies on PB11 being introduced that the build system is unaware of. This PR fixes the problem on my Linux/ICPC setup, but I'm open to suggestions if there's a more up to date way of telling CMake about these new dependencies. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387:153,depend,dependencies,153,https://psicode.org,https://github.com/psi4/psi4/pull/2387,2,['depend'],['dependencies']
Integrability,"## Description; While working on a _different_ PR for the dcft code, I stumbled across a bug that I had accidentally introduced in #1310. DCFT previously allowed you to use the amplitudes from a previous computation as your guess for the next one by setting `dcft_guess dcft`. Key to this mechanism was the fact that the LibDPD files persisted after the computation... which is precisely what I changed in #1310 to fix #1309, where intermediate files would interfere with the amplitude guess. The primary purpose of this PR is to both keep the guess feature working and keep issue #1309 fixed. This is accomplished by checking if `dcft_guess` is `dcft` at the time of `compute_energy` and choosing whether or not to nuke previous files. So past intermediate files will interfere only when you want them to. There are also some related changes: adding a helpful error message to replace the PSIO error that appears when the past files don't exist, adding a test case to prevent a repeat of this little mess, removing some dead code, and per discussions with @jturney, moving some tensors from the libtrans libdpd to the dcft libdpd if they were more than integrals. The other `dcft` PR will be coming as soon as this one is merged in: another bugfix, and (finally!) the transition from `dcft` to `dct`. Obligatory @ssh2 notification. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Restore `dcft_guess dcft` functionality; - [x] Move tensors (DCT's amplitudes and ""generalized"" Fock matrix) from the `libtrans` dpd buffer to the `dcft` buffer; - [x] Add a test for `dcft_guess`; - [x] Eliminate one obnoxious PSIO_ERROR. ## Checklist; - [x] Tests added for any newly working features; - [x] All 14 `dcft` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1717:867,message,message,867,https://psicode.org,https://github.com/psi4/psi4/pull/1717,1,['message'],['message']
Integrability,"## Description; [My](https://github.com/psi4/psi4/pull/2824) [previous](https://github.com/psi4/psi4/pull/2832) [PRs](https://github.com/psi4/psi4/pull/2834) fixed the bugs making UKS TDDFT and stability analysis incorrect, so let's enable them. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Stability analysis is now supported for unrestricted GGAs.; - [x] TDDFT is now supported for unrestricted GGAs. . ## Dev notes & details; - [x] The prohibition against VV10 is not added to this PR, but its enforcement is. The old code would have given incorrect results. ## Checklist; - [x] Tests _mostly_ pass. `test_tdscf_excitations.py` has this PR covered. The one complication is that we're failing the TDA and RPA tests for CH2 with HCTH93. My investigations lead me to suspect the fault is bad reference data, probably involving pruned integration grids. @bgpeyton has confirmed pruning as the issue and volunteered to re-generate proper data. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849:962,integrat,integration,962,https://psicode.org,https://github.com/psi4/psi4/pull/2849,1,['integrat'],['integration']
Integrability,"## Description; `cc` now uses `Matrix` rather than `block_matrix` for the OPDM and Lagrangian. During the course of this transition, I discovered an indexing bug in the conversion of the UHF densities to Matrix. This dates [back to 2016](https://github.com/psi4/psi4/commit/d4bbb98291afe4b500476d0d46c87ded3821bed6). As-is seen from the test values that had to change, this can lead to dramatic errors in properties. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug where UHF-CCSD properties were incorrect when some orbitals were singly occupied. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `cc` now stores its Lagrangian and OPDM as `Matrix` objects rather than block_matrices rather than write them to disk; - [x] `cc` now uses the wfn based interface, rather than the disk interface, to gradients ; - [x] Adds a finite difference correctness test to UHF-CCSD one-electron properties; - [x] Much heavier use of slice technology . ## Questions; - [x] Lori, does the test look okay to you?; - [x] Should I do another check on the dipole that changed the most in our test? That change is _massive_. ## Checklist; - [x] `cc` tests pass; - [x] Edited test with incorrect reference values . ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2818:1077,interface,interface,1077,https://psicode.org,https://github.com/psi4/psi4/pull/2818,2,['interface'],['interface']
Integrability,"## Description; `sq_rsp(...)` is an ancient diagonalizer function from Psi3 with many issues. While its innards could be improved, the function signature is horrid. It should be deprecated and replaced with something better.; Stemming from the awful interface, users of `sq_rsp(...)` never check if the diagonalization failed, because they _cannot_. This is now rectified by adding failure checks wherever the new DSYEV wrappers are called.; Checks against non-square matrices are also added where there is both a row and column count at the call site. Some of the call sites would be dfocc territory, this PR does not include them to avoid conflicts with the dfocc overhaul.; This is another shard of the https://github.com/psi4/psi4/pull/2642 mega-PR that can be merged after PR #2678 and #2738 are in. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; Please note that unlike `sq_rsp(...)`, the new functions do not take a ""tolarence"" value, but this is actually a null change as that parameter has been set-but-unused in `sq_rsp(...)` since ~forever ago when `sq_rsp(...)` switched to calling DSYEV internally.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure and guard against non-square matrices.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2686:250,interface,interface,250,https://psicode.org,https://github.com/psi4/psi4/pull/2686,3,"['interface', 'wrap']","['interface', 'wrapper', 'wrappers']"
Integrability,"## Description; clang-format GDMA interface. ## Questions; - [ ] If merging this PR will hinder your research b/c you have local edits, protest here or in #1144. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1166:34,interface,interface,34,https://psicode.org,https://github.com/psi4/psi4/pull/1166,1,['interface'],['interface']
Integrability,## Description; fix up simint and erd. ~**Contains debug printing which should be removed before final merge**~. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] stops if you try to build simint w/Intel2018; - [x] decouples simint and erd to reveal broken erd interface; - [x] passes extra flags the absence of which can lead to empty mangling header; - [ ] fix erd interface. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1037:326,interface,interface,326,https://psicode.org,https://github.com/psi4/psi4/pull/1037,2,['interface'],['interface']
Integrability,"## Description; https://github.com/psi4/psi4/issues/1439#issuecomment-455799123 is a good idea prototyped here. Instead of always defaulting the cast-up basis to 3-21g, choose from within family. Here, only def2 is rolled out. Also, not integrated with basis blocks, so active for `set basis def2-tzvpp`, not `basis {assign I def2-tzvppd}` in original example. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] basis guess default Dunning, Petersson (zapa), and Jensen families to `pcseg-0`, which is 3-21g sized. none of these are ECP; - [x] basis guess default Karlsruhe to `def2-sv(p)`, so that ECP present for both orbital and fitting; - [x] remainder (incl. Pople and any custom) default to 3-21g. EDIT: Pople explicitly defaulting to 3-21g; - [x] EDIT: replaced DUAL in [this table](http://psicode.org/psi4manual/master/basissets_byfamily.html) with GUESS. - [x] I got `str not a callable fn` in error handling, so fixed up the error/trackback handling a bit. now prints to screen, too. EDIT: I think this got added elsewhere. ### contains #1494 (urgent fixes from this PR) so will need rebasing before final consideration. ## Testing; - [x] full ctest and pytest passes (except for dcft8, but that's a known issue). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1484:237,integrat,integrated,237,https://psicode.org,https://github.com/psi4/psi4/pull/1484,1,['integrat'],['integrated']
Integrability,## Description; misc. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] one more nix py35; - [x] try to get around below in https://lgtm.com/projects/g/psi4/psi4/logs/languages/lang:cpp. ```; [2019-03-04 21:34:07] [build] Scanning dependencies of target libxc_external; [2019-03-04 21:34:07] [build] [ 2%] Creating directories for 'libxc_external'; [2019-03-04 21:34:07] [build] [ 4%] Performing download step (git clone) for 'libxc_external'; [2019-03-04 21:34:07] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:10] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:10] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:10] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:11] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:12] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:12] [build] Cloning into 'libxc_external'...; [2019-03-04 21:34:13] [build] fatal: could not read Username for 'https://gitlab.com': No such device or address; [2019-03-04 21:34:13] [build] fatal: The remote end hung up unexpectedly; [2019-03-04 21:34:13] [build] -- Had to git clone more than once:; [2019-03-04 21:34:13] [build] 3 times.; [2019-03-04 21:34:13] [build] CMake Error at /opt/src/_lgtm_build_dir/external/upstream/libxc/libxc_external-prefix/tmp/libxc_external-gitclone.cmake:66 (message):; [2019-03-04 21:34:13] [build] Failed to clone repository: 'https://gitlab.com/libxc/libxc.git'; ```. ## Checklist; - [ ] ~Tests added for any new features~; - [x] ran quicktests from libxc tarball. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1567:279,depend,dependencies,279,https://psicode.org,https://github.com/psi4/psi4/pull/1567,2,"['depend', 'message']","['dependencies', 'message']"
Integrability,"## Description; misc. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] MKL _can_ link with libgomp on Linux+Gnu, but it can link with libiomp5 everywhere, incl. Mac (icpc, g++, clang++) and Linux (icpc, g++). Moreover in practice, Mac+Gnu+MKL+gomp leads to n-thread-dependent energies (note that none of our testing can catch this). So switching clang and gnu to intel interface and thread libraries when built with MKL. Note that the `-fno-openmp` is b/c gnu takes that slight provocation as signal to link in libgomp, and then you get _two_ threading libraries!; * **User-Facing for Release Notes**. ## Questions; - [x] Notice to @robertodr that math detection getting shaken up again. ## Status; - [x] Ready to go --- Nope, I just want to see what CI thinks of this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/767:332,depend,dependent,332,https://psicode.org,https://github.com/psi4/psi4/pull/767,2,"['depend', 'interface']","['dependent', 'interface']"
Integrability,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:443,rout,routinely,443,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['rout'],['routinely']
Integrability,## Description; new multipole interface to replace `ExternalPotential`. ## Todos; - [x] `qcel.models.Singlepole` into c-side `BasisSet` plus coeff array. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1720:30,interface,interface,30,https://psicode.org,https://github.com/psi4/psi4/pull/1720,1,['interface'],['interface']
Integrability,"## Description; non-final PR while we work out merge order. this is a docs build with no warnings or errors, either overt (`make html -W`), external links (`make linkcheck`), or internal links (`make html -n`). requires a qcel docs update. hopefully this will provide a clean docs base moving forward. this would be non-controversial except that I think there was some technical debt left over from the 2016 inversion in the module structure of the driver. What I think was happening was that the `psi4/driver/driver.py` was the nexus, and any wrappers or utilites that it happened to import became the API. The folder psi4/driver didn't really function as a module. Then for psithon, a few extras like frac got added in in the import preamble. Only problem with the structure (besides ppl who know python thinking it a little irregular) is that it made some functions in the driver impossible to access (i.e., run `help()` on) and link to in the docs. https://towardsdatascience.com/whats-init-for-me-d70a312da583 outlines a few strategies for structuring python packages. There's the mostly-toplevel strategy of numpy (https://github.com/numpy/numpy/blob/main/numpy/__init__.py#L150-L156 and https://github.com/numpy/numpy/blob/main/numpy/core/__init__.py#L72-L90) and the subpackage strategy of scipy (https://github.com/scipy/scipy/blob/master/scipy/__init__.py and https://github.com/scipy/scipy/blob/master/scipy/optimize/__init__.py#L400-L423). I don't have a clear vision on how to do the driver right for psi4, but i've followed the numpy approach of both building up the top-level deliberately with `__all__` and building out the namespaced structure (`from . import x`), and it's doing what the docs linking needs, and I think it's more rational and provides much better coverage for the API docs. Also allows the only difference btwn psithon and psiapi to be whether `core.*` are at top-level. The only tests that have needed change are ""cookbook"" types that were outlining driver code in ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2162:544,wrap,wrappers,544,https://psicode.org,https://github.com/psi4/psi4/pull/2162,1,['wrap'],['wrappers']
Integrability,## Description; provide immediate warning of upstream or downstream integration failures. ## Todos; - [ ] Feature1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1555:68,integrat,integration,68,https://psicode.org,https://github.com/psi4/psi4/pull/1555,1,['integrat'],['integration']
Integrability,"## Description; ~Mostly a code demo, so I'll cancel the CI. upstream master isn't quite ready yet, but this works locally on linux.~. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Add Einsums as optional build dependency via the usual `-D ENABLE_Einsums=ON` arg.; - [x] Added a dummy module that uses Einsums both as a model and so we have something to check in tests w/o imposing on fnocc. Conda packages are available for Linux & Mac (Intel & Silicon); - [x] Tried some docs tweaks again. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3050:337,depend,dependency,337,https://psicode.org,https://github.com/psi4/psi4/pull/3050,1,['depend'],['dependency']
Integrability,"## Description; ~~Address some convergence issues brought up by @bwb314 in psi4/psi4#773 according to solutions advanced by @dgasmith~~ Tidies and patches some MKL and Cfour interface issues. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] tidies doc for `sad_frac_occ` ~~and turns it on by default~~; - [x] temporarily revert some MKL details that were preventing iomp5 from being found and possibly turning off threading (discovered by @andysim and @bennybp); - [x] allow Cfour interface to format ESTATE_SYM properly, convert DROPMO to array type; - [x] allow Cfour interface to properly write out exponents for very tight fns to GENBASE; * **User-Facing for Release Notes**. ## Questions; - ~~4 test cases failing, how to handle (see psi4/psi4#773)~~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/777:174,interface,interface,174,https://psicode.org,https://github.com/psi4/psi4/pull/777,3,['interface'],['interface']
Integrability,"## Known Bugs for RC1. * [ ] Functionals wrong, [description](https://github.com/psi4/psi4/pull/961#issuecomment-385090273). Only seen for one computer, so just watch and report.; * [x] FCIDUMP for UHF refs failing, [description](https://github.com/psi4/psi4/issues/980). Shows up [in test case](https://github.com/psi4/psi4/blob/master/tests/fcidump/input.dat#L15-L23), currently suppressed.; * [x] New `MemJK` gives wrong answers when auxiliary basis is Cartesian, [for description, search ""cart"" here](https://github.com/psi4/psi4/pull/961); * [ ] ERD and SIMINT show all sorts of broken-like behavior upon interface. Only compilation I've gotten to work is a pure-GNU one, none with Intel. So some Intel vectorization operation is the suspect (though why is it still failing with debug ...).; * EDIT: simint problem is with Intel 2018 compilers; * 13 Jun EDIT: reasonable simint + Intel workaround is to compile simint with Intel 2017 compilers and feed that to a Psi4 compiled with Intel 2018. This is what's happening for the conda packages; * 13 Jun EDIT: ERD interface is broken and probably has been throughout v1.1. Possibly will be deprecated unless there's an uproar.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/960#issuecomment-385264655:610,interface,interface,610,https://psicode.org,https://github.com/psi4/psi4/issues/960#issuecomment-385264655,2,['interface'],['interface']
Integrability,"## OEProp bug fix. Some OEProp routines contracted Cartesian density matrices with spherical harmonic integrals, which is bad (and caused by me, I believe). Thanks to Coleman Howard in @lothian's group for pointing this out. For Cartesian basis sets, there was never a problem. For spherical harmonics, the multipoles were bad only if the origin was chosen such that it broke symmetry; spherical harmonic fields and ESPs were all wrong. I added a test for the multipoles, because they're available in Psi vars (reference values confirmed by Molpro). I also confirmed the ESP and Fields on a small grid against Molpro values, but they're not available in Psi vars, so are harder to test.; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447:31,rout,routines,31,https://psicode.org,https://github.com/psi4/psi4/pull/447,2,"['contract', 'rout']","['contracted', 'routines']"
Integrability,"## Todos; - [x] bump RESP interface from 0.8 to 1.0 (this will fix CI); - [x] add psixas (https://github.com/Masterluke87/psixas) ""testing"". output is a spectrum file, so hard to test beyond ""runs"". ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2065:26,interface,interface,26,https://psicode.org,https://github.com/psi4/psi4/pull/2065,1,['interface'],['interface']
Integrability,"## Todos; - [x] bump qcel, qcng. ; - [x] fix Mol.dftd3 interface for pydantic 1.0; - [x] try removing deepdiff. ## Checklist; - [ ] ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1741:55,interface,interface,55,https://psicode.org,https://github.com/psi4/psi4/pull/1741,1,['interface'],['interface']
Integrability,"## Todos; - [x] internal builds on pybind11 with Intel atop non-system compilers would think compiler broken b/c can't find gcc guts. so we'll pass along the flags. way overkill considering that ""build"" is just a `cp`.; - [x] fix the Azure g2g header trouble; - [x] in the process, update to the new g2g 2.0 (unreleased) interface; - [x] all tests pass; - [x] CPPE testing -- fix ctest and add pytest (latter needed for`psi4-rt`); - [x] qz2p basis from CFOUR. - Q: imminence of g2g 2?. ## Status; - [x] Ready for review; - [x] Ready for merge (except for no packaged g2g)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718:321,interface,interface,321,https://psicode.org,https://github.com/psi4/psi4/pull/1718,1,['interface'],['interface']
Integrability,"## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] The Dimension C++ updating of #574 / #571 needed to be done for the CheMPS2 interface code also. This does it.; - [x] test `cbs-xtpl-func` was unsuccessfully comparing analytic- and findif-computed values (as found by Daniel) after analytic ccsd(t) grads available. This forces findif comparison.; - [x] fixed MRCC interface probably broken since CMR-KtB-INV. Looks like we don't have to close and reopen outfile anymore, so simplified procedure func. tested with normal and `-o stdout` operation under py27 and py35.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/576:191,interface,interface,191,https://psicode.org,https://github.com/psi4/psi4/pull/576,2,['interface'],['interface']
Integrability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:257,message,message,257,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['message'],['message']
Integrability,"## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Provided a more informative error message when SAD crashes due to an atom having more core electrons than basis functions. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Fixed typos in comments; - [x] Fixed buggy print information. ## Questions; - [ ] Is it worth testing for the error message explicitly?. ## Checklist; - [x] Confirmed I get the expected error message upon running the example from #2853. ## Status; - [x] Ready for review; - [x] Ready for merge upon @susilehtola approval",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859:207,message,message,207,https://psicode.org,https://github.com/psi4/psi4/pull/2859,3,['message'],['message']
Integrability,"### Needs Py36. ## Description; Starting PR. Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. ## Deconstruction Progress; 99 changed files, and 5,314 additions and 2,946 deletions. c. dgasmith:recursive; - #2512; - #2515; - #2518; - #2526 ; - #2530 ; - #2532; - #2536 ; - #2544. 59 changed files, and 3,408 additions and 1,885 deletions. c. loriab:recursive62; - #2552 ; - #2557; - [ ] #2516. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Create compute classes for nbody, CBS and findif; - [ ] Integrate QCArchive. ## Release Notes; - `msgpack-python` added as req'd dependency. this keeps numpy arrays serialized when communicating in schema; - python 3.8 requires pint 0.10; - add a logging file, presently `file.log` that currently is continuously appended; - any fns mirroring `sherrill_gold_standard` or `allen_focal_point` need to be reformatted and registered with `register_composite_function`; - extrapolation functions for composite need to be registered with `register_xtpl_function`; - CBS and xtpl functions need to be called as strings, not objects. So `energy('cbs', scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme='scf_xtpl_helgaker_3')` not `energy(cbs, scf_wfn='scf', scf_basis='cc-pV[DTQ]Z', scf_scheme=scf_xtpl_helgaker_3)`.; - no longer always evaluating gradient before Hessian to test safety of projecting rotations. Instead assuming unsafe. Can pass `ref_gradient` array to test on or `set findif fd_project T/F` explcitly to control.; - `psi4.QMMM()` object replaced by `embedding_charges` kwarg in Bohr. See extern examples for details.; - `json_ret = psi4.schema_wrapper.run_qcschema(json_input)` not `json_ret = psi4.json_wrapper.run_json(json_input)`. `json_ret` is now an object, so `.` access, not dictionary.; - CBS wrapper issues ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:183,integrat,integrate,183,https://psicode.org,https://github.com/psi4/psi4/pull/1351,3,"['Integrat', 'depend', 'integrat']","['Integrate', 'dependency', 'integrate']"
Integrability,"#### filesystem. By my survey, libfilesystem occurs at:; - [ ] plugins. due for an overhaul. Skipping plugin use on Windows until overhaul seems reasonable to me.; - [x] fisapt. dependency removed in #1098 ; - [x] libcubeprop/cubeprop. dependency removed in #1098 ; - [x] libefp. libefp itself removed from c-side in #953 ; - [ ] libcubeprop/csg. libfilesystem dependency remains. The libcubeprop/csg filesys calls are harder to migrate because they're at the bottom of the call stack. But I also recall that you had cubeprop test cases working already on Windows. Is it worth finishing off libcubeprop/csg? Or is the situation as outlined stable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-406507542:178,depend,dependency,178,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-406507542,3,['depend'],['dependency']
Integrability,"##### Summary. With a couple changes, as below, I think this can be ready to go. ##### Testing Setup. * in `~/.psi4rc`: `psi4.set_global_option(""INTEGRAL_PACKAGE"", ""ERD"")`; * in `psi4/driver/driver.py`: the catch from the section below, only with `sys.exit(0)` to force smooth exit from test, rather than the ValidationError; * Under these conditions, only the below fail from full tests. Ignoring the can't-find-exe, the known-failures, and the sow/reap, the ailing test cases involved either LRC functionals or ESP.; ```; The following tests FAILED:; 	151 - dft1 (Failed); 	152 - dft1-alt (Failed); 	154 - dft3 (Failed); 	188 - mints9 (Failed); 	272 - pywrap-db2 (Failed); 	275 - pywrap-freq-g-sowreap (Failed); 	322 - cubeprop-esp (Failed); 	333 - dftd3-version (Failed); 	341 - mrcc-ccsdt (Failed); 	342 - mrcc-ccsd_t_ (Failed); 	343 - mrcc-ccsdt_q_ (Failed); 	344 - mrcc-optfreq (Failed); Errors while running CTest; ```. ##### Recc. TODO. * In main CM, change erd warning to ` message(WARNING ""ERD will build, link, and run in Psi4 just fine. However, it has not been hooked into Psi4 in all roles, notably gradients, LRC DFT energies, and ESP. So upon activating through ``set integral_package erd``, gradients will be caught and halted, but LRC DFT, ESP, and perhaps other types not tested and identified will give *wrong* answers. Consider this your warning."")`. * In `psi4/driver/driver.py`, apply patch below. ```; --- a/psi4/driver/driver.py; +++ b/psi4/driver/driver.py; @@ -82,6 +82,9 @@ def _find_derivative_type(ptype, method_name, user_dertype):; raise ValidationError(""_find_derivative_type: user_dertype should only be None or int!""); dertype = user_dertype; ; + if (core.get_global_option('INTEGRAL_PACKAGE') == 'ERD') and (dertype != 0):; + raise ValidationError(""INTEGRAL_PACKAGE ERD does not play nicely with gradients, so stopping.""); +; # Summary validation; if (dertype == 2) and (method_name in procedures['hessian']):; pass; ```. * Running this yield the following list (30",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-276884648:983,message,message,983,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-276884648,1,['message'],['message']
Integrability,"#2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF derivative integrals (#2088) ; - Windows conda package (#2048) ; - Remove some tests for multithreading (#2094) ; - Update Numpy interface docs (#2089) ; - Python detection downstream (#2096) ; - Save OCC densities to Wavefunction (#2072) ; - Make library SHARED and Py linking MODULE in pybind11 (2104) ; - Remove some OCC code (#2107) ; - Refactor EFP routines (#2111) ; - Pybind11 to v2.6.2 (#2118) ; - Windows package to anaconda.org (#2123) ; - Update v2rdm, qcelemental to 0.19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#172",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:10157,interface,interface,10157,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,#281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13c; 75/412 Test #114: dcft7 ............................ Passed 323.56 sec; Start 27: cc13b; 76/412 Test #260: omp3-3 ........................... Passed 91.31 sec; Start 245: ocepa2; 77/412 Test #62: cc44 ............................. Passed 89.37 sec; Start 264: omp3-grad2; 78/412 Test #261: omp3-4 ........................... Passed 96.80 sec; Start 101: ci-property; 79/412 Test #298: pubchem1 ......................... Passed 86.18 sec; Start 251: omp2-5; 80/412 Test #116: dcft9 ............................ Passed 108.41 sec; Start 250: omp2-4; 81/412 Test #44: cc28 ............................. Passed 98.15 sec; Start 262: omp3-5; 82/412 Test #317: sapt2 ............................ Passed 372.09 sec; Start 257: omp2p5-g,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:7059,wrap,wrapper,7059,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['wrap'],['wrapper']
Integrability,#327: scf-bz2 .......................... Passed 127.64 sec; Start 109: dcft1; 84/413 Test #65: cc47 ............................. Passed 41.31 sec; Start 20: cbs-xtpl-wrapper; 85/413 Test #282: opt-irc-1 ........................ Passed 95.47 sec; Start 258: omp2p5-grad2; 86/413 Test #158: dfomp2p5-grad2 ................... Passed 61.57 sec; Start 144: dfomp2-4; 87/413 Test #35: cc19 ............................. Passed 58.05 sec; Start 319: sapt3; 88/413 Test #194: fd-freq-energy ................... Passed 85.55 sec; Start 82: cc9; 89/413 Test #64: cc46 ............................. Passed 87.60 sec; Start 153: dfomp2p5-2; 90/413 Test #207: frac-traverse .................... Passed 238.30 sec; Start 321: sapt5; 91/413 Test #258: omp2p5-grad2 ..................... Passed 77.83 sec; Start 294: psimrcc-fd-freq2; 92/413 Test #109: dcft1 ............................ Passed 84.01 sec; Start 67: cc49; 93/413 Test #144: dfomp2-4 ......................... Passed 69.24 sec; Start 79: cc8a; 94/413 Test #20: cbs-xtpl-wrapper ................. Passed 95.04 sec; Start 78: cc8; 95/413 Test #265: omp3-grad2 ....................... Passed 116.89 sec; Start 83: cc9a; 96/413 Test #153: dfomp2p5-2 ....................... Passed 53.80 sec; Start 81: cc8c; 97/413 Test #319: sapt3 ............................ Passed 78.68 sec; Start 206: frac-ip-fitting; 98/413 Test #82: cc9 .............................. Passed 72.01 sec; Start 391: python-pubchem; 99/413 Test #79: cc8a ............................. Passed 45.79 sec; Start 57: cc4; 100/413 Test #67: cc49 ............................. Passed 49.51 sec; Start 142: dfomp2-2; 101/413 Test #321: sapt5 ............................ Passed 77.16 sec; Start 247: ocepa3; 102/413 Test #294: psimrcc-fd-freq2 ................. Passed 73.49 sec; Start 169: dft-b3lyp; 103/413 Test #83: cc9a ............................. Passed 45.91 sec; Start 12: cbs-parser; 104/413 Test #78: cc8 .............................. Passed 64.94 sec; Start 34: cc18; 105/413 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:9024,wrap,wrapper,9024,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['wrap'],['wrapper']
Integrability,"#; 401: Irrep: 1; 401: 1: 1.6041282; 401: 2: 0.8050841; 401: 3: 0.8050841; 401: ; 401: ; 401: ; 401: Wiberg Bond Indices using Orthogonal Lowdin Orbitals:; 401: ; 401: Irrep: 1 Size: 3 x 3; 401: ; 401: 1 2 3; 401: ; 401: 1 0.00000000000000 0.92373852221608 0.92373852221608; 401: 2 0.92373852221608 0.00000000000000 0.00699264970980; 401: 3 0.92373852221608 0.00699264970980 0.00000000000000; 401: ; 401: ; 401: ; 401: Atomic Valences: ; 401: ; 401: # #; 401: Irrep: 1; 401: 1: 1.8474770; 401: 2: 0.9307312; 401: 3: 0.9307312; 401: ; 401: ; 401: *** tstop() called on computer06 at Mon Jul 9 14:44:29 2018; 401: Traceback (most recent call last):; 401: File ""/home/raimis/psi4.git/tests/json/schema_0_properties/input.py"", line 120, in <module>; 401: psi4.compare_values(expected_properties[k], json_data[""properties""][k], 6, k.upper()) #TEST; 401: File ""/home/raimis/psi4.git/linux_build/stage/home/raimis/psi4.git/linux_install/lib/psi4/driver/p4util/util.py"", line 227, in compare_values; 401: raise TestComparisonError(message); 401: psi4.driver.p4util.exceptions.TestComparisonError: 	SCF_ONE_ELECTRON_ENERGY: computed value (-122.2750930) does not match (-122.2750911) to 6 digits.; 401: Module time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: Total time:; 401: 	user time = 0.48 seconds = 0.01 minutes; 401: 	system time = 0.02 seconds = 0.00 minutes; 401: 	total time = 0 seconds = 0.00 minutes; 401: 	JSON Success......................................................PASSED; 401: 	Result: DIPOLE....................................................PASSED; 401: 	Result: QUADRUPOLE................................................PASSED; 401: 	Result: MULLIKEN_CHARGES..........................................PASSED; 401: 	Result: LOWDIN_CHARGES............................................PASSED; 401: 	Result: WIBERG_LOWDIN_INDICES.....................................PASSED; 401: 	Result:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174:9266,message,message,9266,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-403466174,1,['message'],['message']
Integrability,"(#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. This is now fixed. Note that this did not effect wB97X-D.; - Restricted-irrep finite-difference Hessians were only returning the totally symmetric portion of the Hessian ([in #834](https://github.com/psi4/psi4/pull/834/commits/67f536c720abf31040eaa933a12e26c207100b69)); - Analytic HF Hessians were wrong under particular circumstances (#903); - A bug causing IRCs to converge to the initial transition state was fixed (#882). # Conda changes since v1.1; - MKL linked dynamically through free Anaconda-provided `mkl_rt.so` rather than statically",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:6035,wrap,wrapped,6035,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['wrap'],['wrapped']
Integrability,(this is a copy over from #1562 so that I can replace test there.). ## Major Points of Interest. * A smart SCF solver that can intelligently make a variety of choices depending on local conditions (#1135). ## Obtaining. ## New Methods. ## New Methods (beta). ## New External Libraries. - [HelPME](https://github.com/andysim/helpme) - A particle-mesh Ewald library for long-range electrostatics.; - [pyoptking](https://github.com/psi-rking/optking) - A python-based implementation of the OptKing geometry optimization and IRC program. ## First Time Contributors. ## Additional Non-Core Contributors to v1.4. ## Performance Optimizations. ## Psi Developer Upgrade Guide. ## Developer Interests. ## Bug Fixes. ## Known Bugs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1768:167,depend,depending,167,https://psicode.org,https://github.com/psi4/psi4/issues/1768,1,['depend'],['depending']
Integrability,"* Advertised Version: 1.4; * Continuous Version: 1.4; * Release Date: 08 03 2021; * Documentation: http://psicode.org/psi4manual/1.4.0/; * Availability: Public, GitHub source, CMake build, [Conda binary installers](https://psicode.netlify.com/installs/v14/); * Span: [437 PRs](https://github.com/psi4/psi4/milestone/5?closed=1), roughly 1559-2264. ## Obtaining; - Binary installers: see link above; - Python Anaconda: `conda install psi4 -c psi4`.; - Windows conda packages available (#1560); - Dropped dependencies: deepdiff, Libint1; - Added dependencies: QCEngine, Libint2. ## New Methods; - Add ability to call Axilrod-Teller-Muto (ATM) 3-body dispersion correction from Grimme's DFTD3. Note that this is for dftd3 call, not energy call (#1491); - MP2D energies and gradients with help of external program (#1661); - SCAN functionals – SCAN0, revSCAN0, SCAN, revSCAN, BMK, revM06-L (#1597); - hybrid LDA functionals – CAM-LDA0, LDA0 (when Libxc puts them in a release) (#1645); - FISAPT-D (#1670); - Superposition of atomic potentials (SAP) guess (#1665, #1700); - Implementation of partial Cholesky orthogonalization (#1760, #1817, #1824 #1842) ; - Overlap half-derivative integrals (#1895) ; - TDDFT for HF, LDA, and GGA SCF wave functions (#1349, #1885, #1814, #2156) ; - UHF Hessians and gradients (#842) ; - LIBxc density screening (#1860) ; - Add MBIS charge partitioning (#1961, #2035, #2056, #2127) ; - External potentials to CP-SCF solver (#2006) ; - FMM and PE(ECP) (#2025) ; - SAPT(DFT) supports hybrid XC kernel in dispersion (#1865) ; - SAPT0-D routines, includes interface (#2081) ; - Electrostatic embedding to FSAPT (#2131); - Implement level shifts in RHF, UHF, CUHF, ROHF (#2225, #2237) . ## New External Libraries; - [QCEngine](https://github.com/MolSSI/QCEngine) - A QCSchema runner is now a required dependency since we use it for several interfaces (#1577); - DFTD3; - MP2D; - gCP; - CPPE - Polarizable embedding with environment modeled by multi-center multipole expansion w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:503,depend,dependencies,503,https://psicode.org,https://github.com/psi4/psi4/issues/1562,2,['depend'],['dependencies']
Integrability,"* Correct that the `pc` basis sets in the library are the segmented forms (https://github.com/psi4/psi4/blob/master/psi4/share/psi4/basis/NOTES#L84-L96) and also that Psi can't handle general contractions.; * Your `scf_xtpl_halkier_[2,3]` suggestion makes a good deal of sense from a citation and code-reuse point of view. However, IIRC the last char of the function name is used as a check against the number of basis set zetas supplied, which the `[2,3]` would break. I may no claims that `cbs()` is a shining design example. If you want to alias `corl_xtpl_halkier_2 = corl_xtpl_helgaker_2`, it's fine by me. Names should just be as simple as possible since ppl need to remember them to type into an input file.; * Quite right that the `alpha` doesn't get passed through; somehow, there's never been a demand for it. If you want to tackle passing it through, I'd be grateful. I think `cbs_alpha` for the kwarg name would be simplest and `cbs_delta_alpha` if stage (scf/corl/delta/delta2) differentiation is necessary. Can do something like `corl_alpha = kwargs.get('cbs_corl_alpha', kwargs.get('cbs_alpha', None))` before the call to the xtpl fn, then alpha=1.63 if alpha is not None within the xtpl fn.; * Your plan sounds good to me. If you would,; * Write up the docstrings along the lines of those in [this file](https://github.com/qcdb/qcdb/blob/master/qcdb/driver/cbs_helpers.py) which is where these functions are heading next. (I can't cherry-pick to retain commit info between repositories, but I can commit with co-authors, so it shows up on your GH record.); * For the extrapolation of gradients, if you're choosing between `psi4.core.Matrix` operations and `np.ndarray` operations, please prefer the latter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381446177:192,contract,contractions,192,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381446177,1,['contract'],['contractions']
Integrability,"* Hmm, if you click on ""More information"" on pc-seg4 on EMSL, you get ""Polarization Consistent Valence Pentuble Zeta, Segmented Contracted"". So that's my source iirc, but EMSL has low authority these days. Yes, please do switch to `N+2` in NOTES in this PR. Thanks for the better information.; * `delta N > 2` should probably be rewritten to be extensible w/o copy-paste-sed, so don't bother future-proofing in that respect.; * General plan is that parts of the driver that are generic quantum chemistry should be useable w/o a psi4 dependence, hence the separate qcdb repo. Glad to explain in more detail later. No need to rebase off anything but psi4/psi4 master.; * Sorry, I should have worded that better. Yes, the xtpl fns want `psi4.core.Matrix` for gradient/Hessian extrapolations as input and output. But for all the manipulations of those arrays, you have the choice of keeping them as `Matrix` and using psi internals or to grabbing them as numpy arrays and using all the numpy manipulation syntax then returning to `Matrix` at the end. I just meant to say that if you're facing this choice, choose NumPy because the next version is going to take and return `ndarray`, not `psi4.core.Matrix`. Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381609280:128,Contract,Contracted,128,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381609280,2,"['Contract', 'depend']","['Contracted', 'dependence']"
Integrability,"* I suspect that what Peter means by separate tests and docs is to issue two comments to the PR? I'm worried ppl will read the last and overlook the former. ; * Sounds like I need to make clearer that the only choice for the samples/ commit is now or later. There are no valid reasons to reject, but it you're going to be editing tests a lot, you might not want a dozen automated commits or to have your remote tampered with while local is in a vulnerable state.; * I'm with keeping the git commands as I suspect many ppl are nervous about `--rebase` and `--force` and need that reassurance. I do wish I could convey that you're done with local, no need for either path. Thanks for the comments! I'll do another round of commit-message tweaking. Eventually we can add linters by the same mechanism, so I think it pays to get clear communication and git sync habits established here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711:728,message,message,728,https://psicode.org,https://github.com/psi4/psi4/pull/2364#issuecomment-982038711,1,['message'],['message']
Integrability,"* I think the old versions of routines we want to outright delete (when some cutting edge LAPACK comes out w/o those symbols, we want to be able to link to it).; * Agree that there's no way we want to get math detection involved.; * I think the new versions of routines should be added, checked that they link properly against a `DGGSVD3`-capable LAPACK, then commented out, and a note left in developers wish list to check travis periodically for reactivation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171:30,rout,routines,30,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433952171,2,['rout'],['routines']
Integrability,"* Yes, eventually will support `linux-64`, `osx-64`, `osx-arm64`, `win-64` arch. staged-recipes won't have osx-arm64, though.; * Still TBD if Windows psi4 packages will include Fortran addons like dkh, gdma, pcmsolver.; * All arch will be explicitly linked to MKL (that is, `libblas=*=*mkl`). dependencies that themselves need blas/lapack are getting linked generically so runtime selection is an option, but psi4 itself is getting fixed to MKL. I'm open to someday linking psi4 generically, but I think other distributions need to be tested and any performance and oversubscription issues addressed first.; * yes, as Matt says, you have to dig around on Azure, find ""artifacts"", download, and then can install locally (or upload to a separate anaconda.org acct).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346:293,depend,dependencies,293,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-1483880346,1,['depend'],['dependencies']
Integrability,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:428,depend,dependence,428,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135,1,['depend'],['dependence']
Integrability,"* edit RN and ""publish"" release. this establishes release data for GH api; * close off RN issue; * before stack build, consider max pinnings on deps, particularly any fast-moving deps (e.g., qcel) and whether they need version space to grow compatibly and grow incompatibly.; * check in all release, constructor recipe changes on L/M. synchronize both to psi4meta; * reset for normal operation; * new ltrtver with new release.dev label; * names back to master for psi4-multiout, psi4-docs; * build string back to 0 if psi4-multiout needed multiple passes; * poodle back to `***` stack; * crontab back to 2am ""norm"". comment out ""anom"". * new PR with edits to main README badges, py, etc; * tweet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867:335,synchroniz,synchronize,335,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468798867,1,['synchroniz'],['synchronize']
Integrability,"**Note:** Migrated from my comment on #798 to expedite merging of that PR. When running OPTKING with the dynamic level turned on, i.e., with the module option:; ```; set optking {; dynamic_level = 1 # Can start dynamic level at any 1 - 7; }; ```; Optimization failure occurs if a bad-step exception occurs in the highest dynamic level (7), e.g.,; ```; The BAD_STEP_EXCEPTion handler:; Energy has increased in a minimization. Dynamic level is 7.; Consecutive backsteps is 1.; The INTCO_EXCEPTion handler:; Too many bad steps.; Dynamic level is 7.; exc.g_really_quit() is 0. **** Optimization has failed! (in 9 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; ```; However, the error isn't translated to a PsiException, and the program prints the ""Buy a developer a beer!"" successful exit message even though the optimization has, in fact, failed. This should raise some error, akin to the new `ConvergenceError` PsiException, so that the output does not fly under the radar as being successful.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/800:835,message,message,835,https://psicode.org,https://github.com/psi4/psi4/issues/800,1,['message'],['message']
Integrability,"**psi4** uses the LAPACK routine `dtzrqf`. However, at least in the current LAPACK 3.8.0, the routine `dtzrqf` is marked as deprecated, the [suggested alternative](http://www.netlib.org/lapack/explore-html/da/dba/group__double_o_t_h_e_rcomputational_ga2d309addf953bcdd497d58608a7f7935.html) being `dtzrzf`. As a result, the default build of LAPACK 3.8.0 (<del>as well as of OpenBLAS 0.3.3</del> EDITED) does not contain `dtzrqf`anymore and fails to provide the necessary dependency. Perhaps **psi4** could use the alternative routine to avoid this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290:25,rout,routine,25,https://psicode.org,https://github.com/psi4/psi4/issues/1290,4,"['depend', 'rout']","['dependency', 'routine']"
Integrability,", `Array2d::cdgesv`, `Array2d::lineq_flin`, `Array2d::lineq_pople`, `SymBlockMatrix::davidson`, `SymBlockMatrix::diagonalize`, `SymBlockMatrix::cdsyev`, `SymBlockMatrix::cdgesv`, `SymBlockMatrix::lineq_flin`, `SymBlockMatrix::lineq_pople` (never called and not PSI_API) **(merged #2679)**; - [x] Delete unused functions/overloads from `dfocc`: `Array2d::diagonalize, Array2d::davidson, Array2d::cdsyev, Array2d::cdgesv, Array2d::lineq_flin, Array2d::lineq_pople` and `Tensor2d::davidson, Tensor2d::cdsyev, Tensor2d::cdgesv, Tensor2d::lineq_flin, Tensor2d::lineq_pople` (PR #2684); - [x] Delete unused function overloads from `libmints`: `Matrix::diagonalize` (PR #2693); - [x] Delete commented out code, an unused `extern FILE*` and unused `#include`s from `mcscf::SCF::energy` (PR #2678). ### New DSYEV wrappers, anti-`sq_rsp(...)` crusade; - [x] Implement two new wrapper functions around DSYEV to replace `sq_rsp(...)` with. The new wrappers have a much cleaner interface, and no longer require the allocation of an eigenvector array if the caller only needs eigenvalues. They also no longer swallow the return value of DSYEV, in fact their return value is marked as `[[nodiscard]]`. In short, checking for diagonalization failure went from impossible to mandatory.; - [x] Replace `sq_rsp(...)` calls in `mcscf` (`mcscf::SCF::energy` and `mcscf::MatrixBase::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `detci` (`detci/h0block.cc`, `detci/sem.cc` and `detci/sem_test.cc`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` call in `libmints/matrix.cc` (`Matrix::diagonalize`) with new wrapper. Add checks for diagonalization failure.; - [x] Replace `sq_rsp(...)` calls in `ccenergy` (`ccenergy/d1diag.cc`, `ccenergy/d2diag.cc` and `ccenergy/new_d1diag.cc`) with new wrapper. Add checks for diagonalization failure. This allows the removal of the eigenvector array, and the code that allocates/deal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2642:1564,wrap,wrappers,1564,https://psicode.org,https://github.com/psi4/psi4/pull/2642,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,", i, j) (((i) == (am)) ? 0 : (((((am) - (i) + 1) * ((am) - (i))) >> 1) + (am) - (i) - (j))); | ; In file included from build/stage/include/libint2/engine.h:1019,; from psi4/src/psi4/libmints/shellpair.h:8,; from psi4/src/psi4/libmints/eri.h:42,; from psi4/src/export_mints.cc:54:; build/stage/include/libint2/./engine.impl.h:35:11: fatal error: boost/preprocessor.hpp: No such file or directory; 35 | # include <boost/preprocessor.hpp>; | ^~~~~~~~~~~~~~~~~~~~~~~~; compilation terminated.; [11/1097] Building CXX object src/CMakeFiles/core.dir/read_options.cc.o; ninja: build stopped: subcommand failed.; FAILED: psi4-core-prefix/src/psi4-core-stamp/psi4-core-build ; cd build/psi4-core-prefix/src/psi4-core-build && /usr/bin/cmake --build .; ninja: build stopped: subcommand failed.; ```. https://github.com/psi4/psi4/blob/2e3b0f2039ff0e9a968f964ede868adf790ca54e/psi4/src/CMakeLists.txt#L55-L61. `build/external/upstream/libint2/libint2_external-prefix/src/libint2_external/CMakeLists.txt` has the following part:; ```cmake; if (BUILD_SHARED); add_library (int-shared SHARED $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-shared INTERFACE Eigen3::Eigen); set_target_properties (int-shared PROPERTIES SOVERSION ${LIBINT_MAJOR_SOVERSION}; MACOSX_RPATH ON; OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-shared INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(). if (BUILD_STATIC); add_library (int-static STATIC $<TARGET_OBJECTS:int-obj>); target_link_libraries (int-static INTERFACE Eigen3::Eigen); set_target_properties (int-static PROPERTIES OUTPUT_NAME ""int2""; EXPORT_NAME ""cxx""); target_include_directories(int-static INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>); endif(); ```; which seems to come from https://github.com/loriab/libint/blob/6c3a9ce2ef01b6beb7c2804318699c8ba50065d6/src/lib/libint/CMakeLists.txt.export#L117-L133. Here, the dependency on Eigen is properly set, but that on boost is not, resulting in build failure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2427:3514,INTERFACE,INTERFACE,3514,https://psicode.org,https://github.com/psi4/psi4/issues/2427,5,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:187,depend,dependencies,187,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,2,"['depend', 'wrap']","['dependencies', 'wrapped']"
Integrability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:116,interface,interface,116,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,4,"['depend', 'interface']","['dependency', 'interface']"
Integrability,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239526159:364,INTERFACE,INTERFACE,364,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159,2,"['INTERFACE', 'depend']","['INTERFACE', 'dependencies']"
Integrability,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341899122:238,interface,interface,238,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122,1,['interface'],['interface']
Integrability,"- [ ] Rename the `DFTGrid` class to `IntegrationGrid`. As written, it's confusing that non-DFT classes use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523:37,Integrat,IntegrationGrid,37,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123731523,1,['Integrat'],['IntegrationGrid']
Integrability,"- [ ] Strongly suspect ""def energy"" examples 4 & 5 in share/python/driver.py don't work or don't work as advertized. test. if fail, see if can get working by wfn-passing; - [ ] depending on previous findings, either document (example in previous would do) what used to be ""bypass_scf"" in action or purge it from docs and driver and create new ticket to make it work again.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/353:177,depend,depending,177,https://psicode.org,https://github.com/psi4/psi4/issues/353,1,['depend'],['depending']
Integrability,"- [x] Can libmints get away with not having `MAX_AM_ERI` passed to it? That way one could switch out `libint.so`s on the fly (conda can do this). Would have to find a way to still exit gracefully if insufficient AM and give decent error messages. EDIT: Can't be done, as the header sets data structure sizes as well. Settling on AM=8 for conda linux instead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-334617561:237,message,messages,237,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-334617561,1,['message'],['messages']
Integrability,"- [x] apply decisions from http://forum.psicode.org/t/naming-considerations-for-cepa-0/156/5 to driver, managed methods; - [x] make sure to kill off `CEPA_TYPE`; - [x] adjust tables in occ.rst and fnocc.rst and capabilities table and proc_py.rst; - [x] adjust test cases. make analogous cepa-module to mp2-module for checking up on these things?; - [x] adjust methods dict in cbs wrapper; - [x] notify person I was corresponding with on forum about cepa about calling changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/293:380,wrap,wrapper,380,https://psicode.org,https://github.com/psi4/psi4/issues/293,1,['wrap'],['wrapper']
Integrability,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1695,depend,dependencies,1695,https://psicode.org,https://github.com/psi4/psi4/pull/442,2,"['depend', 'interface']","['dependencies', 'interfaces']"
Integrability,"- [x] integrate proper (non-WSL) Windows downloads; - [ ] integrate some options like base env/conda env and how-to-update instructions into guide so can retire reST docs; - [ ] reST docs should become like traditional `INSTALL` documents to be read only by ppl who want to build psi from source with their choice of compilers, etc. and who relish details, not by everyday user or dev.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1840:6,integrat,integrate,6,https://psicode.org,https://github.com/psi4/psi4/issues/1840,2,['integrat'],['integrate']
Integrability,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5270,interface,interfaced,5270,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['interface'],['interfaced']
Integrability,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrou",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:10813,Contract,Contraction,10813,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Contract'],['Contraction']
Integrability,"------ ----------------- ----------------- -----------------; O 0.000000000000 0.000000000000 -0.550000000000 15.994914619560; O 0.000000000000 0.000000000000 0.550000000000 15.994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:16325,Contract,Contraction,16325,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Contract'],['Contraction']
Integrability,"-72,7 +72,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - dbse = raw_input(' dbse = ').strip(); + dbse = input(' dbse = ').strip(); if dbse.isalnum():; user_obedient = True; ; @@ -82,7 +82,7 @@ print(""""""; All files with this extension in the current directory will be processed; Additionally, all files with extension p4m in the current dir will be processed as psi4 mol format; """"""); -fext = raw_input(' fext = [xyz] ').strip(); +fext = input(' fext = [xyz] ').strip(); if fext == """":; fext = 'xyz'; ; @@ -95,7 +95,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - line2 = raw_input(' line2 = [cgmp] ').strip().lower(); + line2 = input(' line2 = [cgmp] ').strip().lower(); if line2 == """":; line2 = 'cgmp'; if line2 == 'comment' or line2 == 'cgmp' or line2 == 'trash':; @@ -121,7 +121,7 @@ print(""""""; """"""); user_obedient = False; while not user_obedient:; - route = raw_input(' route = ').strip().lower(); + route = input(' route = ').strip().lower(); if route.isdigit():; route = int(route); if route == 1 or route == 2 or route == 3:; @@ -135,7 +135,7 @@ if route == 2:; """"""); user_obedient = False; while not user_obedient:; - Nrxn = raw_input(' Nrxn = ').strip().lower(); + Nrxn = input(' Nrxn = ').strip().lower(); if Nrxn.isdigit():; Nrxn = int(Nrxn); user_obedient = True; @@ -174,10 +174,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; f.close(); ; # use Molecule object to read geometry in xyz file; - if xyzfile.endswith(fext):; - mol = qcdb.Molecule.init_with_xyz(xyzfile, no_com=True, no_reorient=True); - else:; - mol = qcdb.Molecule(''.join(text)); + mol = qcdb.Molecule.from_string(''.join(text), fix_com=True, fix_orientation=True); Nsyst = mol.natom(); ; # alter second line; @@ -203,8 +200,7 @@ for xyzfile in (glob.glob('*.' + fext) + glob.glob('*.p4m')):; ; if route == 3 and mol.nfragments() == 1:; ; - frag_pattern = mol.BFS(); - mol = mol.auto_fragments(); + frag_pattern, mol = mol.BFS(return_molecule=True);",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772:2146,rout,route,2146,https://psicode.org,https://github.com/psi4/psi4/issues/1367#issuecomment-441157772,1,['rout'],['route']
Integrability,-dhdf .................. Passed 102.93 sec; Start 92: cepa-module; 54/412 Test #182: fsapt-allterms ................... Passed 579.58 sec; Start 320: sapt5; 55/412 Test #280: opt14 ............................ Passed 94.37 sec; Start 70: cc51; 56/412 Test #194: fd-freq-energy-large ............. Passed 545.92 sec; Start 76: cc6; 57/412 Test #318: sapt3 ............................ Passed 99.92 sec; Start 293: psimrcc-fd-freq2; 58/412 Test #47: cc30 ............................. Passed 48.45 sec; Start 205: frac-ip-fitting; 59/412 Test #326: scf-bz2 .......................... Passed 165.53 sec; Start 168: dft-b3lyp; 60/412 Test #92: cepa-module ...................... Passed 64.56 sec; Start 193: fd-freq-energy; 61/412 Test #281: opt-irc-1 ........................ Passed 86.58 sec; Start 231: mp2-module; 62/412 Test #320: sapt5 ............................ Passed 93.23 sec; Start 17: cbs-xtpl-opt; 63/412 Test #76: cc6 .............................. Passed 75.78 sec; Start 20: cbs-xtpl-wrapper; 64/412 Test #70: cc51 ............................. Passed 87.01 sec; Start 260: omp3-3; 65/412 Test #205: frac-ip-fitting .................. Passed 76.46 sec; Start 390: python-pubchem; 66/412 Test #206: frac-traverse .................... Passed 244.37 sec; Start 62: cc44; 67/412 Test #293: psimrcc-fd-freq2 ................. Passed 85.30 sec; Start 261: omp3-4; 68/412 Test #193: fd-freq-energy ................... Passed 63.85 sec; Start 116: dcft9; 69/412 Test #168: dft-b3lyp ........................ Passed 82.97 sec; Start 298: pubchem1; 70/412 Test #26: cc13a ............................ Passed 316.11 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 82.21 sec; Start 21: cc1; 72/412 Test #20: cbs-xtpl-wrapper ................. Passed 82.20 sec; Start 243: ocepa-grad2; 73/412 Test #390: python-pubchem ................... Passed 77.47 sec; Start 19: cbs-xtpl-nbody; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 98.26 sec; Start 28: cc13,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:6305,wrap,wrapper,6305,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['wrap'],['wrapper']
Integrability,-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; Start 19: cbs-xtpl-wrapper; 204/401 Test #284: psimrcc-ccsd_t-2 ................. Passed 1.39 sec; Start 84: cepa0-grad1; 205/401 Test #289: psimrcc-pt2 ...................... Passed 1.11 sec; Start 85: cepa0-grad2; 206/401 Test #290: psimrcc-sp1 ...................... Passed 2.98 sec; Start 86: cepa1; 207/401 Test #84: cepa0-grad1 ...................... Passed 2.32 sec; Start 87: cepa2; 208/401 Test #85: cepa0-grad2 ...................... Passed 4.19 sec; Start 88: cepa3; 209/401 Test #9: castup2 .......................... Passed 8.52 sec; Start 89: cepa1; 210/401 Test #10: castup3 .......................... Passed 8.84 sec; Start 90: cepa-module; 211/401 Test #86: cepa1 ............................ Passed 9.10 sec; Start 93: cisd-h2o+-1; 212/401 Test #93: cisd-h2o+-1 ...................... Passed 2.99 sec; Start 94: cisd-h2o+-2; 213/401 Test #87: cepa2 ............................ Passed 10.57 sec; Start 95: cisd-h2o-clpse; 214/401 Test #95: cisd-h2o-clpse ................... Passed 1.79 sec; Start 96: cisd-opt-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:19097,wrap,wrapper,19097,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['wrap'],['wrapper']
Integrability,". As it so happens, I was running `mrccsdt` not too long ago on the CCQC cluster. What I see looks like ; ```; Generating fort.55 integral file...done.; Generating fort.56 input file...done. *** tstop() called on n081 at Sun Mar 8 14:10:25 2020; Module time: ; user time = 1.90 seconds = 0.03 minutes; system time = 0.87 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes; Total time: ; user time = 164.68 seconds = 2.74 minutes; system time = 15.26 seconds = 0.25 minutes; total time = 2719 seconds = 45.32 minutes. ===== Begin fort.56 input for MRCC ======; 3 1 0 0 1 0 0 1 0 1 1 1 0 0 0 6 0 0 0.00 0 60000 ; ex.lev,nsing,ntrip, rest,CC/CI, dens,conver, symm, diag, CS,spatial, HF,ndoub, nacto, nactv, tol,maxex, sacc, freq,dboc, mem; 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ; ===== End fort.56 input for MRCC ======; **********************************************************************; MRCC program system; **********************************************************************; ; Written by; Mihaly Kallay, Zoltan Rolik, Jozsef Csontos, Istvan Ladjanszki,; Lorant Szegedy, Bence Ladoczki, Gyula Samu, Klara Petrov,; Mate Farkas, Peter Nagy, David Mester, and Bence Hegely; ; Department of Physical Chemistry and Materials Science; Budapest University of Technology and Economics; Budapest P.O.Box 91, H-1521 Hungary; ; www.mrcc.hu. ************************ 2020-03-08 14:10:25 *************************; Executing goldstone...; ```. The calculation goes on, but the important point is that MRCC is supposed to execute `goldstone` immediately and not even try to read input from the MINP file. My interpretation of the situation is that something in the new MRCC has broken Psi's direct interface, which avoided MINP input entirely. I'm not planning to get further involved in this issue, but I'm fairly sure we mentioned the MRCC interface in the paper, so this is bad. Curse you, upstream!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1866:3875,interface,interface,3875,https://psicode.org,https://github.com/psi4/psi4/issues/1866,2,['interface'],['interface']
Integrability,". These will need to be deleted and reforked/recloned. ; ## Schedule. We are currently planning to merge in the Boost removal and build system changes in the next day or so. It should be noted that while core Psi4 is stable, external projects such as ChemPS2 and EFP may not work. The build systems has also only seen compilation on half a dozen architectures and setups, you may encounter errors in the build process. A new branch named 1.0.x maintenance has been created that contains a stable and updated version of the 1.0 release. In effect, this means that the master branch will no longer be 100% stable for anything beyond ""core"" Psi4 as defined by quicktests. . If you have changes to the Psi4 source code you will either need to rebase the CMake/build system change (hint: this is _not_ the occasion to learn to rebase) or rewrite these files by looking at a diff between the new version and your current version. A rebase of this patch is a considerable time investment with many small technical details, please contact us to help you if you decide to go this route. We will be contacting the authors of all current PR’s to help them with the transition. The inversion and history rewrite will take place on October 17th. Again, all forks and clones will need to be removed at this point as they will no longer be valid. Let us know if you need additional time to rebase in a change.; ## Summary. Changes for developers:; - **WARNING!** All clones and forks will need to be removed when the history rewrite occurs on October 17th. This means any current work on Psi4 will no longer be able to be merged. If you need additional time let us know ASAP!; - The build system has not been extensively tested, please try it out and report bugs.; - There is a completely new directory structure.; - No more Boost in core Psi4.; - Some external libraries may not work at current.; - Plugin structure is still fluid.; - GCC 4.9 is required due to C++11 regex. Keep in mind that ICC requires GCC. Cha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:3655,rout,route,3655,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rout'],['route']
Integrability,.. Passed 23.42 sec; Start 176: docs-dft; 382/412 Test #397: python-memdfjk ................... Passed 23.80 sec; Start 213: mints1; 383/412 Test #215: mints3 ........................... Passed 23.55 sec; Start 209: matrix1; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 25.10 sec; Start 175: docs-bases; 385/412 Test #379: mints12 .......................... Passed 23.88 sec; Start 216: mints4; 386/412 Test #335: scf3 ............................. Passed 23.31 sec; Start 309: pywrap-db3; 387/412 Test #405: json-schema-1-properties ......... Passed 23.98 sec; Start 365: options1; 388/412 Test #310: pywrap-molecule .................. Passed 23.01 sec; Start 403: json-schema-1-throws; 389/412 Test #388: python-energy .................... Passed 23.44 sec; Start 399: json-v11-gradient; 390/412 Test #383: psi4numpy-rhf .................... Passed 23.40 sec; Start 4: casscf-semi; 391/412 Test #210: mcscf1 ........................... Passed 23.77 sec; Start 5: casscf-sa-sp; 392/412 Test #240: numpy-array-interface ............ Passed 22.55 sec; Start 7: casscf-sp; 393/412 Test #410: skeletonscf ...................... Passed 23.60 sec; Start 88: cepa1; 394/412 Test #212: mcscf3 ........................... Passed 23.17 sec; Start 119: dfcasscf-fzc-sp; 395/412 Test #217: mints5 ........................... Passed 23.23 sec; Start 224: molden1; 396/412 Test #176: docs-dft ......................... Passed 23.17 sec; Start 314: rasscf-sp; 397/412 Test #209: matrix1 .......................... Passed 22.15 sec; 398/412 Test #213: mints1 ........................... Passed 22.39 sec; 399/412 Test #175: docs-bases ....................... Passed 22.12 sec; 400/412 Test #216: mints4 ........................... Passed 22.12 sec; 401/412 Test #309: pywrap-db3 ....................... Passed 21.36 sec; 402/412 Test #365: options1 ......................... Passed 21.37 sec; 403/412 Test #403: json-schema-1-throws ............. Passed 21.81 sec; 404/412 Test #399: json-v11-gradien,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141:37069,interface,interface,37069,https://psicode.org,https://github.com/psi4/psi4/pull/1227#issuecomment-421362141,1,['interface'],['interface']
Integrability,.. Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... Passed 98.56 sec; Start 81: cc8c; 76/412 Test #300: pywrap-alias ..................... Passed 77.65 sec; Start 261: omp3-4; 77/412 Test #257: omp2p5-grad2 ..................... Passed 88.65 sec; Start 390: python-pubchem; 78/412 Test #264: omp3-grad2 ....................... Passed 104.13 sec; Start 44: cc28; 79/412 Test #62: cc44 ............................. Passed 81.07 sec; Start 116: dcft9; 80/412 Test #19: cbs-xtpl-nbody ................... Passed 123.53 sec; Start 58: cc40; 81/412 Test #114: dcft7 ............................ Passed 416.24 sec; Start 83: cc9a; 82/412 Test #317: sapt2 ............................ Passed 390.46 sec; Start 35: cc19; 83/412 Test #81: cc8c ............................. Passed 62.89 sec; Start 251: omp2-5; 84/412 Test #168,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:7184,wrap,wrapper,7184,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['wrap'],['wrapper']
Integrability,.. Passed 3.13 sec; Start 229: mp2-grad2; 219/411 Test #218: mints8 ........................... Passed 15.91 sec; Start 230: mp2-module; 220/411 Test #228: mp2-grad1 ........................ Passed 3.46 sec; Start 231: mp2p5-grad1; 221/411 Test #229: mp2-grad2 ........................ Passed 3.65 sec; Start 232: mp2p5-grad2; 222/411 Test #226: mp2-1 ............................ Passed 5.21 sec; Start 233: mp3-grad1; 223/411 Test #231: mp2p5-grad1 ...................... Passed 2.87 sec; Start 234: mp3-grad2; 224/411 Test #233: mp3-grad1 ........................ Passed 1.98 sec; Start 235: mp2-property; 225/411 Test #232: mp2p5-grad2 ...................... Passed 3.12 sec; Start 236: mpn-bh; 226/411 Test #168: dft1 ............................. Passed 97.74 sec; Start 237: nbody-he-cluster; 227/411 Test #234: mp3-grad2 ........................ Passed 2.56 sec; Start 238: nbody-intermediates; 228/411 Test #235: mp2-property ..................... Passed 3.54 sec; Start 239: numpy-array-interface; 229/411 Test #236: mpn-bh ........................... Passed 3.71 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 241: ocepa-grad1; 231/411 Test #145: dfomp2-grad3 ..................... Passed 155.00 sec; Start 242: ocepa-grad2; 232/411 Test #206: ghosts ........................... Passed 33.52 sec; Start 243: ocepa1; 233/411 Test #241: ocepa-grad1 ...................... Passed 3.37 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 2.50 sec; Start 245: ocepa3; 235/411 Test #155: dfscf-bz2 ........................ Passed 142.25 sec; Start 246: omp2-1; 236/411 Test #246: omp2-1 ........................... Passed 2.41 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 14.13 sec; Start 248: omp2-3; 238/411 Test #247: omp2-2 ........................... Passed 10.28 sec; Start 249: omp2-4; 239/411 Test #219: mints-benchmark .................. Passed 43.79 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:21260,interface,interface,21260,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['interface'],['interface']
Integrability,.... Passed 4.55 sec; Start 327: scf-guess-read1; 325/411 Test #399: json-schema-1-energy ............. Passed 3.99 sec; Start 121: dfccdl1; 326/411 Test #257: omp3-1 ........................... Passed 4.41 sec; Start 377: pywrap-align-chiral; 327/411 Test #284: props1 ........................... Passed 5.03 sec; Start 4: casscf-semi; 328/411 Test #243: ocepa1 ........................... Passed 6.83 sec; Start 246: omp2-1; 329/411 Test #327: scf-guess-read1 .................. Passed 2.70 sec; Start 363: zaptn-nh2; 330/411 Test #377: pywrap-align-chiral .............. Passed 3.07 sec; Start 314: sad1; 331/411 Test #388: python-curve ..................... Passed 4.00 sec; Start 253: omp2p5-1; 332/411 Test #121: dfccdl1 .......................... Passed 4.11 sec; Start 397: json-v11-energy; 333/411 Test #363: zaptn-nh2 ........................ Passed 2.47 sec; Start 384: psi4numpy-rhf-hessian; 334/411 Test #246: omp2-1 ........................... Passed 4.32 sec; Start 239: numpy-array-interface; 335/411 Test #314: sad1 ............................. Passed 3.56 sec; Start 213: mints2; 336/411 Test #239: numpy-array-interface ............ Passed 0.68 sec; Start 328: scf-upcast-custom-basis; 337/411 Test #295: psithon1 ......................... Passed 9.99 sec; Start 391: python-mints2; 338/411 Test #397: json-v11-energy .................. Passed 4.06 sec; Start 119: dfcasscf-sp; 339/411 Test #384: psi4numpy-rhf-hessian ............ Passed 3.87 sec; Start 120: dfccd1; 340/411 Test #213: mints2 ........................... Passed 3.23 sec; Start 203: frac; 341/411 Test #328: scf-upcast-custom-basis .......... Passed 3.10 sec; Start 355: tu3-h2o-opt; 342/411 Test #253: omp2p5-1 ......................... Passed 6.90 sec; Start 210: mcscf2; 343/411 Test #4: casscf-semi ...................... Passed 8.94 sec; Start 116: ao-dfcasscf-sp; 344/411 Test #391: python-mints2 .................... Passed 2.70 sec; Start 406: skeletonaointegrals; 345/411 Test #119: dfcasscf-sp ..........,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:31244,interface,interface,31244,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['interface'],['interface']
Integrability,..... Passed 2.33 sec; Start 285: psimrcc-ccsd_t-3; 364/401 Test #115: ao-dfcasscf-sp ................... Passed 3.19 sec; Start 283: psimrcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....................... Passed 2.12 sec; 371/401 Test #348: tu1-h2o-energy ................... Passed 2.02 sec; 372/401 Test #305: pywrap-molecule .................. Passed 2.10 sec; 373/401 Test #204: matrix1 .......................... Passed 1.27 sec; 374/401 Test #326: scf-bs ........................... Passed 2.41 sec; 375/401 Test #235: numpy-array-interface ............ Passed 1.44 sec; 376/401 Test #380: psi4numpy-rhf-gradient ........... Passed 2.03 sec; 377/401 Test #349: tu2-ch2-energy ................... Passed 2.01 sec; 378/401 Test #205: mcscf1 ........................... Passed 1.71 sec; 379/401 Test #122: dfccsd1 .......................... Passed 4.58 sec; 380/401 Test #379: psi4numpy-rhf .................... Passed 1.89 sec; 381/401 Test #384: python-energy .................... Passed 1.80 sec; 382/401 Test #393: python-memdfjk ................... Passed 3.23 sec; 383/401 Test #101: decontract ....................... Passed 2.06 sec; 384/401 Test #123: dfccsdl1 ......................... Passed 4.62 sec; 385/401 Test #359: options1 ......................... Passed 1.49 sec; 386/401 Test #208: mints1 ........................... Passed 1.49 sec; 387/401 Test #373: pywrap-align .....................***Failed 1.19 sec; 388/401 Test #374: pywrap-align-chiral ..............***Failed 1.21 sec; 389/401 Test #300: ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:35455,interface,interface,35455,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['interface'],['interface']
Integrability,...... Passed 1.68 sec; Start 188: fci-tdm; 378/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 411: skeletonwavefunction; 379/411 Test #220: mints-helper ..................... Passed 2.03 sec; Start 349: sapt-sf1; 380/411 Test #398: json-v11-gradient ................ Passed 2.22 sec; Start 396: python-memdfjk; 381/411 Test #209: mcscf1 ........................... Passed 3.10 sec; Start 239: numpy-array-interface; 382/411 Test #405: skeleton ......................... Passed 3.04 sec; Start 211: mcscf3; 383/411 Test #387: python-energy .................... Passed 2.65 sec; Start 334: scf3; 384/411 Test #396: python-memdfjk ................... Passed 0.90 sec; Start 382: psi4numpy-rhf; 385/411 Test #96: cisd-h2o-clpse ................... Passed 4.24 sec; Start 308: pywrap-db3; 386/411 Test #400: json-schema-1-ghost .............. Passed 3.33 sec; Start 175: docs-dft; 387/411 Test #404: json-schema-1-properties ......... Passed 3.31 sec; Start 216: mints5; 388/411 Test #239: numpy-array-interface ............ Passed 0.71 sec; Start 364: options1; 389/411 Test #354: tu2-ch2-energy ................... Passed 3.22 sec; Start 409: skeletonscf; 390/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 208: matrix1; 391/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 212: mints1; 392/411 Test #364: options1 ......................... Passed 0.58 sec; Start 215: mints4; 393/411 Test #175: docs-dft ......................... Passed 0.61 sec; Start 174: docs-bases; 394/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 402: json-schema-1-throws; 395/411 Test #411: skeletonwavefunction ............. Passed 2.89 sec; Start 87: cepa1; 396/411 Test #311: rasci-h2o ........................ Passed 4.54 sec; 397/411 Test #211: mcscf3 ........................... Passed 1.29 sec; 398/411 Test #334: scf3 ............................. Passed 1.23 sec; 399/411 Test #208: matrix1 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307:36533,interface,interface,36533,https://psicode.org,https://github.com/psi4/psi4/pull/1072#issuecomment-406602307,1,['interface'],['interface']
Integrability,....... Passed 2.06 sec; Start 137: dfmp2-grad2; 351/413 Test #353: dft-reference .................... Passed 3.64 sec; Start 354: stability2; 352/413 Test #273: opt5 ............................. Passed 7.47 sec; Start 300: pubchem2; 353/413 Test #205: frac ............................. Passed 8.25 sec; Start 271: opt3; 354/413 Test #216: mints3 ........................... Passed 2.75 sec; Start 335: scf2; 355/413 Test #291: psimrcc-ccsd_t-3 ................. Passed 3.01 sec; Start 356: tu2-ch2-energy; 356/413 Test #190: fci-tdm .......................... Passed 2.43 sec; Start 241: numpy-array-interface; 357/413 Test #364: x2c3 ............................. Passed 3.21 sec; Start 312: rasci-c2-active; 358/413 Test #181: fsapt2 ........................... Passed 5.35 sec; Start 351: sapt-sf1; 359/413 Test #97: cisd-h2o-clpse ................... Passed 2.35 sec; Start 331: scf-guess-read2; 360/413 Test #300: pubchem2 ......................... Passed 1.65 sec; Start 259: omp3-1; 361/413 Test #241: numpy-array-interface ............ Passed 0.85 sec; Start 347: dfep2-2; 362/413 Test #354: stability2 ....................... Passed 2.54 sec; Start 334: scf-occ; 363/413 Test #356: tu2-ch2-energy ................... Passed 1.48 sec; Start 87: cepa0-grad2; 364/413 Test #335: scf2 ............................. Passed 3.66 sec; Start 86: cepa0-grad1; 365/413 Test #351: sapt-sf1 ......................... Passed 2.53 sec; Start 218: mints5; 366/413 Test #347: dfep2-2 .......................... Passed 2.64 sec; Start 366: options1; 367/413 Test #388: cookbook-rohf-orb-rot ............ Passed 255.11 sec; Start 217: mints4; 368/413 Test #218: mints5 ........................... Passed 1.11 sec; Start 345: stability1; 369/413 Test #366: options1 ......................... Passed 0.73 sec; Start 332: scf-bs; 370/413 Test #217: mints4 ........................... Passed 0.72 sec; Start 290: psimrcc-ccsd_t-2; 371/413 Test #334: scf-occ .......................... Passed 3.43 sec; Start 214,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:34040,interface,interface,34040,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['interface'],['interface']
Integrability,....... Passed 2.15 sec; Start 397: python-memdfjk; 377/412 Test #354: tu1-h2o-energy ................... Passed 1.49 sec; Start 401: json-schema-1-ghost; 378/412 Test #223: mints10 .......................... Passed 1.74 sec; Start 379: mints12; 379/412 Test #103: decontract ....................... Passed 1.22 sec; Start 310: pywrap-molecule; 380/412 Test #396: python-mints13 ................... Passed 2.03 sec; Start 388: python-energy; 381/412 Test #215: mints3 ........................... Passed 1.10 sec; Start 335: scf3; 382/412 Test #411: skeletonsointegrals .............. Passed 1.45 sec; Start 212: mcscf3; 383/412 Test #355: tu2-ch2-energy ................... Passed 1.26 sec; Start 217: mints5; 384/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.45 sec; Start 210: mcscf1; 385/412 Test #405: json-schema-1-properties ......... Passed 1.24 sec; Start 383: psi4numpy-rhf; 386/412 Test #221: mints-helper ..................... Passed 1.60 sec; Start 240: numpy-array-interface; 387/412 Test #399: json-v11-gradient ................ Passed 1.43 sec; Start 213: mints1; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.55 sec; Start 175: docs-bases; 389/412 Test #401: json-schema-1-ghost .............. Passed 1.46 sec; Start 309: pywrap-db3; 390/412 Test #310: pywrap-molecule .................. Passed 1.30 sec; Start 216: mints4; 391/412 Test #388: python-energy .................... Passed 1.27 sec; Start 410: skeletonscf; 392/412 Test #335: scf3 ............................. Passed 1.16 sec; Start 209: matrix1; 393/412 Test #379: mints12 .......................... Passed 1.51 sec; Start 176: docs-dft; 394/412 Test #212: mcscf3 ........................... Passed 1.18 sec; Start 365: options1; 395/412 Test #397: python-memdfjk ................... Passed 1.86 sec; Start 403: json-schema-1-throws; 396/412 Test #210: mcscf1 ........................... Passed 1.06 sec; Start 88: cepa1; 397/412 Test #175: docs-bases ....................... Passed 0.75 se,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:36415,interface,interface,36415,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['interface'],['interface']
Integrability,........ Passed 1.40 sec; Start 399: json-v11-gradient; 377/412 Test #215: mints3 ........................... Passed 1.22 sec; Start 379: mints12; 378/412 Test #103: decontract ....................... Passed 1.68 sec; Start 397: python-memdfjk; 379/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.31 sec; Start 388: python-energy; 380/412 Test #355: tu2-ch2-energy ................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36404,interface,interface,36404,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['interface'],['interface']
Integrability,......... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passed 1.04 sec; Start 214: mints1; 390/413 Test #366: options1 ......................... Passed 0.66 sec; Start 177: docs-dft; 391/413 Test #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec; Start 210: matrix1; 397/413 Test #311: pywrap-molecule .................. Passed 1.08 sec; Start 88: cepa1; 398/413 Test #356: tu2-ch2-energy ................... Passed 3.20 sec; 399/413 Test #210,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:36556,interface,interface,36556,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['interface'],['interface']
Integrability,"......... Passed 15.09 sec; Start 217: mints5; 391/412 Test #399: json-v11-gradient ................ Passed 14.86 sec; Start 212: mcscf3; 392/412 Test #379: mints12 .......................... Passed 14.63 sec; Start 383: psi4numpy-rhf; 393/412 Test #401: json-schema-1-ghost .............. Passed 15.23 sec; Start 210: mcscf1; 394/412 Test #310: pywrap-molecule .................. Passed 14.37 sec; Start 240: numpy-array-interface; 395/412 Test #388: python-energy .................... Passed 14.64 sec; Start 213: mints1; 396/412 Test #335: scf3 ............................. Passed 14.09 sec; Start 309: pywrap-db3; 397/412 Test #217: mints5 ........................... Passed 14.04 sec; Start 175: docs-bases; 398/412 Test #212: mcscf3 ........................... Passed 13.97 sec; Start 216: mints4; 399/412 Test #210: mcscf1 ........................... Passed 13.81 sec; Start 410: skeletonscf; 400/412 Test #383: psi4numpy-rhf .................... Passed 14.91 sec; Start 209: matrix1; 401/412 Test #240: numpy-array-interface ............ Passed 13.74 sec; Start 176: docs-dft; 402/412 Test #213: mints1 ........................... Passed 14.04 sec; Start 365: options1; 403/412 Test #309: pywrap-db3 ....................... Passed 13.36 sec; Start 403: json-schema-1-throws; 404/412 Test #175: docs-bases ....................... Passed 13.52 sec; Start 88: cepa1; 405/412 Test #216: mints4 ........................... Passed 13.68 sec; 406/412 Test #209: matrix1 .......................... Passed 13.44 sec; 407/412 Test #410: skeletonscf ...................... Passed 14.54 sec; 408/412 Test #176: docs-dft ......................... Passed 13.56 sec; 409/412 Test #365: options1 ......................... Passed 12.94 sec; 410/412 Test #403: json-schema-1-throws ............. Passed 12.51 sec; 411/412 Test #88: cepa1 ............................ Passed 15.83 sec; 412/412 Test #319: sapt4 ............................ Passed 1912.45 sec. 100% tests passed, 0 tests failed out of 412. Labe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:37679,interface,interface,37679,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['interface'],['interface']
Integrability,".......... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0.69 sec; Start 364: options1; 398/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 175: docs-dft; 399/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 402: json-schema-1-throws; 400/411 Test #212: mints1 ........................... Passed 0.55 sec; Start 174: docs-bases; 401/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 215: mints4; 402/411 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 208: matrix1; 403/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #175: docs-dft ......................... Passed 0.60 sec; 406/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; 407/411 Test #174: docs-bases ....................... Passed 0.53 sec; 408/411 Test #215: mints4 ........................... Passed 0.51 sec; 409/411 Test #208: matrix1 .......................... Passed 0.51 sec; 410/411 Test #87: cepa1 ............................ Passed 1.82 sec; 411/411 Test #318: sapt4 ............................ Passed 1890.44 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 66.55 sec*proc (2 tests); autotest = 2224.11 sec*proc (26 tests); cart = 16014.43 sec*proc (123 tests); cas = 59.03 sec*proc (1 test); casscf = 53.75 sec*proc (11 tests); cbs = 3517.28 s",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:37633,interface,interface,37633,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['interface'],['interface']
Integrability,".......... Passed 6.09 sec; Start 123: dfccsdl1; 178/401 Test #305: pywrap-molecule .................. Passed 1.23 sec; Start 347: stability2; 179/401 Test #219: molden1 .......................... Passed 5.30 sec; Start 326: scf-bs; 180/401 Test #227: mp2p5-grad1 ...................... Passed 4.58 sec; Start 349: tu2-ch2-energy; 181/401 Test #348: tu1-h2o-energy ................... Passed 1.49 sec; Start 330: scf3; 182/401 Test #239: ocepa1 ........................... Passed 6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 ....................... Passed 1.80 sec; Start 208: mints1; 192/401 Test #379: psi4numpy-rhf .................... Passed 0.87 sec; Start 284: psimrcc-ccsd_t-2; 193/401 Test #235: numpy-array-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Pa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:17595,interface,interface,17595,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['interface'],['interface']
Integrability,........... Passed 1.92 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 126.98 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 14.01 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 15.90 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 33.11 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 918.91 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 12.98 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 13.65 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #12: cbs-parser ....................... Passed 59.21 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 35.82 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 358.15 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 80.51 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 109.54 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 109.00 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 45.45 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 31.10 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 47.18 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 255.04 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 101.66 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 311.67 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 122.44 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 120.35 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:2648,wrap,wrapper,2648,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,1,['wrap'],['wrapper']
Integrability,........... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec; Start 122: dfccd1; 371/413 Test #351: sapt-sf1 ......................... Passed 1.54 sec; Start 332: scf-bs; 372/413 Test #86: cepa0-grad1 ...................... Passed 4.82 sec; Start 241: numpy-array-interface; 373/413 Test #356: tu2-ch2-energy ................... Passed 1.07 sec; Start 218: mints5; 374/413 Test #347: dfep2-2 .......................... Passed 2.24 sec; Start 329: scf-guess-read1; 375/413 Test #300: pubchem2 ......................... Passed 1.45 sec; Start 366: options1; 376/413 Test #334: scf-occ .......................... Passed 3.01 sec; Start 217: mints4; 377/413 Test #241: numpy-array-interface ............ Passed 0.81 sec; Start 289: psimrcc-ccsd_t-1; 378/413 Test #332: scf-bs ........................... Passed 1.53 sec; Start 136: dfmp2-grad1; 379/413 Test #345: stability1 ....................... Passed 3.12 sec; Start 214: mints1; 380/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.93 sec; Start 6: ao-casscf-sp; 381/413 Test #218: mints5 ........................... Passed 0.97 sec; Start 120: dfcasscf-fzc-sp; 382/413 Test #366: options1 ......................... Passed 0.75 sec; Start 212: mcscf2; 383/413 Test #217: mints4 ........................... Passed 0.66 sec; Start 313: rasci-h2o; 384/413 Test #138: dfmp2-grad3 ...................... Passed 3.98 sec; Start 123: dfccdl1; 385/413 Test #122: dfccd1 ........................... Passed 2.17 sec; Start 132: dfmp2-2; 386/413 Test #214: mints1 ........................... Passed 0.80 sec; Start 330: scf-upcast-custom-basis; 387/413 Test #121: dfcasscf-sp ...................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:35502,interface,interface,35502,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['interface'],['interface']
Integrability,........... Passed 3.76 sec; Start 211: mints4; 350/401 Test #171: docs-dft ......................... Passed 0.95 sec; Start 330: scf3; 351/401 Test #392: python-mints13 ................... Passed 2.38 sec; Start 380: psi4numpy-rhf-gradient; 352/401 Test #357: x2c3 ............................. Passed 2.63 sec; Start 349: tu2-ch2-energy; 353/401 Test #133: dfmp2-grad1 ...................... Passed 3.71 sec; Start 290: psimrcc-sp1; 354/401 Test #399: json-schema_0_throws ............. Passed 0.76 sec; Start 101: decontract; 355/401 Test #211: mints4 ........................... Passed 0.73 sec; Start 379: psi4numpy-rhf; 356/401 Test #170: docs-bases ....................... Passed 0.83 sec; Start 205: mcscf1; 357/401 Test #351: scf-response1 .................... Passed 1.97 sec; Start 384: python-energy; 358/401 Test #324: scf-upcast-custom-basis .......... Passed 2.26 sec; Start 204: matrix1; 359/401 Test #323: scf-guess-read1 .................. Passed 2.16 sec; Start 235: numpy-array-interface; 360/401 Test #356: x2c2 ............................. Passed 2.85 sec; Start 359: options1; 361/401 Test #328: scf-occ .......................... Passed 3.01 sec; Start 208: mints1; 362/401 Test #247: omp2-grad1 ....................... Passed 4.60 sec; Start 284: psimrcc-ccsd_t-2; 363/401 Test #400: json-schema_0_gradient ........... Passed 2.33 sec; Start 285: psimrcc-ccsd_t-3; 364/401 Test #115: ao-dfcasscf-sp ................... Passed 3.19 sec; Start 283: psimrcc-ccsd_t-1; 365/401 Test #396: json-schema_0_energy ............. Passed 3.72 sec; Start 289: psimrcc-pt2; 366/401 Test #378: psi4numpy-dfmp2 .................. Passed 2.24 sec; Start 86: cepa1; 367/401 Test #8: castup1 .......................... Passed 2.70 sec; Start 360: cubeprop-esp; 368/401 Test #118: dfcasscf-sp ...................... Passed 4.20 sec; Start 373: pywrap-align; 369/401 Test #330: scf3 ............................. Passed 1.53 sec; Start 374: pywrap-align-chiral; 370/401 Test #347: stability2 ....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832:34100,interface,interface,34100,https://psicode.org,https://github.com/psi4/psi4/pull/1071#issuecomment-402453832,1,['interface'],['interface']
Integrability,............ Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ............................. Passed 100.99 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2648,wrap,wrapper,2648,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['wrap'],['wrapper']
Integrability,"............. Passed 1.08 sec; Start 209: mcscf1; 391/411 Test #378: mints12 .......................... Passed 1.17 sec; Start 188: fci-tdm; 392/411 Test #211: mcscf3 ........................... Passed 0.72 sec; Start 308: pywrap-db3; 393/411 Test #382: psi4numpy-rhf .................... Passed 0.79 sec; Start 239: numpy-array-interface; 394/411 Test #396: python-memdfjk ................... Passed 0.95 sec; Start 409: skeletonscf; 395/411 Test #209: mcscf1 ........................... Passed 0.70 sec; Start 175: docs-dft; 396/411 Test #188: fci-tdm .......................... Passed 0.71 sec; Start 364: options1; 397/411 Test #308: pywrap-db3 ....................... Passed 0.68 sec; Start 212: mints1; 398/411 Test #214: mints3 ........................... Passed 1.04 sec; Start 402: json-schema-1-throws; 399/411 Test #409: skeletonscf ...................... Passed 0.61 sec; Start 215: mints4; 400/411 Test #175: docs-dft ......................... Passed 0.58 sec; Start 216: mints5; 401/411 Test #239: numpy-array-interface ............ Passed 0.67 sec; Start 208: matrix1; 402/411 Test #364: options1 ......................... Passed 0.55 sec; Start 174: docs-bases; 403/411 Test #212: mints1 ........................... Passed 0.56 sec; Start 87: cepa1; 404/411 Test #402: json-schema-1-throws ............. Passed 0.56 sec; 405/411 Test #215: mints4 ........................... Passed 0.51 sec; 406/411 Test #208: matrix1 .......................... Passed 0.52 sec; 407/411 Test #216: mints5 ........................... Passed 0.56 sec; 408/411 Test #174: docs-bases ....................... Passed 0.51 sec; 409/411 Test #87: cepa1 ............................ Passed 1.77 sec; 410/411 Test #178: fsapt1 ........................... Passed 2075.85 sec; 411/411 Test #318: sapt4 ............................ Passed 1795.73 sec. 100% tests passed, 0 tests failed out of 411. Label Time Summary:; adc = 63.77 sec*proc (2 tests); autotest = 464.95 sec*proc (26 tests); cart = 10197.27 sec*proc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:37462,interface,interface,37462,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['interface'],['interface']
Integrability,............. Passed 1.49 sec; Start 388: python-energy; 377/412 Test #379: mints12 .......................... Passed 1.64 sec; Start 406: skeleton; 378/412 Test #223: mints10 .......................... Passed 1.59 sec; Start 217: mints5; 379/412 Test #215: mints3 ........................... Passed 1.33 sec; Start 407: skeletonaointegrals; 380/412 Test #310: pywrap-molecule .................. Passed 1.44 sec; Start 355: tu2-ch2-energy; 381/412 Test #411: skeletonsointegrals .............. Passed 1.57 sec; Start 212: mcscf3; 382/412 Test #401: json-schema-1-ghost .............. Passed 1.49 sec; Start 383: psi4numpy-rhf; 383/412 Test #384: psi4numpy-rhf-gradient ........... Passed 1.69 sec; Start 189: fci-tdm; 384/412 Test #353: stability2 ....................... Passed 1.68 sec; Start 210: mcscf1; 385/412 Test #399: json-v11-gradient ................ Passed 1.41 sec; Start 335: scf3; 386/412 Test #405: json-schema-1-properties ......... Passed 1.45 sec; Start 240: numpy-array-interface; 387/412 Test #412: skeletonwavefunction ............. Passed 1.62 sec; Start 213: mints1; 388/412 Test #388: python-energy .................... Passed 1.31 sec; Start 309: pywrap-db3; 389/412 Test #294: psimrcc-pt2 ...................... Passed 1.64 sec; Start 176: docs-dft; 390/412 Test #217: mints5 ........................... Passed 1.26 sec; Start 365: options1; 391/412 Test #397: python-memdfjk ................... Passed 1.87 sec; Start 410: skeletonscf; 392/412 Test #406: skeleton ......................... Passed 1.57 sec; Start 175: docs-bases; 393/412 Test #383: psi4numpy-rhf .................... Passed 1.25 sec; Start 216: mints4; 394/412 Test #212: mcscf3 ........................... Passed 1.34 sec; Start 209: matrix1; 395/412 Test #210: mcscf1 ........................... Passed 1.13 sec; Start 403: json-schema-1-throws; 396/412 Test #240: numpy-array-interface ............ Passed 0.83 sec; Start 88: cepa1; 397/412 Test #355: tu2-ch2-energy ................... Passed 1.66 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:36393,interface,interface,36393,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['interface'],['interface']
Integrability,.............. Passed 17.22 sec; Start 379: mints12; 387/412 Test #384: psi4numpy-rhf-gradient ........... Passed 16.81 sec; Start 388: python-energy; 388/412 Test #355: tu2-ch2-energy ................... Passed 16.29 sec; Start 310: pywrap-molecule; 389/412 Test #399: json-v11-gradient ................ Passed 16.02 sec; Start 383: psi4numpy-rhf; 390/412 Test #401: json-schema-1-ghost .............. Passed 16.97 sec; Start 335: scf3; 391/412 Test #397: python-memdfjk ................... Passed 16.57 sec; Start 217: mints5; 392/412 Test #405: json-schema-1-properties ......... Passed 15.81 sec; Start 212: mcscf3; 393/412 Test #379: mints12 .......................... Passed 16.68 sec; Start 210: mcscf1; 394/412 Test #388: python-energy .................... Passed 15.79 sec; Start 213: mints1; 395/412 Test #310: pywrap-molecule .................. Passed 15.68 sec; Start 410: skeletonscf; 396/412 Test #335: scf3 ............................. Passed 16.05 sec; Start 240: numpy-array-interface; 397/412 Test #383: psi4numpy-rhf .................... Passed 16.60 sec; Start 175: docs-bases; 398/412 Test #217: mints5 ........................... Passed 15.35 sec; Start 216: mints4; 399/412 Test #212: mcscf3 ........................... Passed 15.82 sec; Start 309: pywrap-db3; 400/412 Test #213: mints1 ........................... Passed 14.72 sec; Start 176: docs-dft; 401/412 Test #210: mcscf1 ........................... Passed 15.82 sec; Start 209: matrix1; 402/412 Test #410: skeletonscf ...................... Passed 15.75 sec; Start 365: options1; 403/412 Test #175: docs-bases ....................... Passed 14.47 sec; Start 403: json-schema-1-throws; 404/412 Test #216: mints4 ........................... Passed 14.79 sec; Start 88: cepa1; 405/412 Test #240: numpy-array-interface ............ Passed 15.57 sec; 406/412 Test #309: pywrap-db3 ....................... Passed 14.49 sec; 407/412 Test #209: matrix1 .......................... Passed 15.24 sec; 408/412 Test #176: docs-dft,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899:37266,interface,interface,37266,https://psicode.org,https://github.com/psi4/psi4/pull/1226#issuecomment-420597899,1,['interface'],['interface']
Integrability,................ Passed 1.40 sec; Start 214: mints3; 379/404 Test #289: psimrcc-ccsd_t-3 ................. Passed 1.22 sec; Start 387: python-energy; 380/404 Test #404: json-schema-1-properties ......... Passed 1.02 sec; Start 402: json-schema-1-throws; 381/404 Test #383: psi4numpy-rhf-gradient ........... Passed 0.98 sec; Start 188: fci-tdm; 382/404 Test #287: psimrcc-ccsd_t-1 ................. Passed 1.18 sec; Start 396: python-memdfjk; 383/404 Test #309: pywrap-molecule .................. Passed 1.10 sec; Start 334: scf3; 384/404 Test #378: mints12 .......................... Passed 1.13 sec; Start 211: mcscf3; 385/404 Test #220: mints-helper ..................... Passed 1.23 sec; Start 209: mcscf1; 386/404 Test #214: mints3 ........................... Passed 1.05 sec; Start 382: psi4numpy-rhf; 387/404 Test #402: json-schema-1-throws ............. Passed 0.57 sec; Start 308: pywrap-db3; 388/404 Test #387: python-energy .................... Passed 0.81 sec; Start 239: numpy-array-interface; 389/404 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 364: options1; 390/404 Test #334: scf3 ............................. Passed 0.82 sec; Start 208: matrix1; 391/404 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 175: docs-dft; 392/404 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 216: mints5; 393/404 Test #209: mcscf1 ........................... Passed 0.78 sec; Start 212: mints1; 394/404 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 395/404 Test #308: pywrap-db3 ....................... Passed 0.71 sec; Start 215: mints4; 396/404 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 87: cepa1; 397/404 Test #364: options1 ......................... Passed 0.58 sec; 398/404 Test #208: matrix1 .......................... Passed 0.56 sec; 399/404 Test #175: docs-dft ......................... Passed 0.64 sec; 400/404 Test #216: mints5 ...........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:36211,interface,interface,36211,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['interface'],['interface']
Integrability,................ Passed 23.99 sec; Start 8: castup1; 15/411 Test #8: castup1 .......................... Passed 2.23 sec; Start 9: castup2; 16/411 Test #325: scf-bz2 .......................... Passed 124.34 sec; Start 10: castup3; 17/411 Test #9: castup2 .......................... Passed 13.78 sec; Start 11: cbs-delta-energy; 18/411 Test #7: casscf-sp ........................ Passed 38.07 sec; Start 12: cbs-parser; 19/411 Test #10: castup3 .......................... Passed 15.65 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #316: sapt2 ............................ Passed 350.80 sec; Start 14: cbs-xtpl-energy; 21/411 Test #394: python-vibanalysis ............... Passed 958.22 sec; Start 15: cbs-xtpl-freq; 22/411 Test #14: cbs-xtpl-energy .................. Passed 14.64 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #15: cbs-xtpl-freq .................... Passed 9.77 sec; Start 17: cbs-xtpl-opt; 24/411 Test #12: cbs-parser ....................... Passed 69.31 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #16: cbs-xtpl-gradient ................ Passed 32.38 sec; Start 20: cc1; 26/411 Test #19: cbs-xtpl-wrapper ................. Passed 84.37 sec; Start 21: cc10; 27/411 Test #17: cbs-xtpl-opt ..................... Passed 118.78 sec; Start 22: cc11; 28/411 Test #20: cc1 .............................. Passed 108.09 sec; Start 23: cc12; 29/411 Test #21: cc10 ............................. Passed 56.95 sec; Start 24: cc13; 30/411 Test #22: cc11 ............................. Passed 46.44 sec; Start 26: cc13b; 31/411 Test #23: cc12 ............................. Passed 31.76 sec; Start 27: cc13c; 32/411 Test #11: cbs-delta-energy ................. Passed 277.77 sec; Start 28: cc13d; 33/411 Test #26: cc13b ............................ Passed 102.18 sec; Start 29: cc14; 34/411 Test #13: cbs-xtpl-alpha ................... Passed 343.62 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 156.55 sec; Start 31: cc16; 36/411 Test #30: cc15 ........................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637:2528,wrap,wrapper,2528,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411094637,1,['wrap'],['wrapper']
Integrability,................ Passed 9.54 sec; Start 11: cbs-delta-energy; 18/411 Test #10: castup3 .......................... Passed 18.56 sec; Start 12: cbs-parser; 19/411 Test #7: casscf-sp ........................ Passed 28.77 sec; Start 13: cbs-xtpl-alpha; 20/411 Test #394: python-vibanalysis ............... Passed 875.05 sec; Start 14: cbs-xtpl-energy; 21/411 Test #14: cbs-xtpl-energy .................. Passed 13.09 sec; Start 15: cbs-xtpl-freq; 22/411 Test #15: cbs-xtpl-freq .................... Passed 12.78 sec; Start 16: cbs-xtpl-gradient; 23/411 Test #278: opt13 ............................ Passed 926.59 sec; Start 17: cbs-xtpl-opt; 24/411 Test #16: cbs-xtpl-gradient ................ Passed 41.42 sec; Start 19: cbs-xtpl-wrapper; 25/411 Test #316: sapt2 ............................ Passed 364.06 sec; Start 20: cc1; 26/411 Test #12: cbs-parser ....................... Passed 96.67 sec; Start 21: cc10; 27/411 Test #21: cc10 ............................. Passed 41.74 sec; Start 22: cc11; 28/411 Test #19: cbs-xtpl-wrapper ................. Passed 87.45 sec; Start 23: cc12; 29/411 Test #17: cbs-xtpl-opt ..................... Passed 124.67 sec; Start 24: cc13; 30/411 Test #23: cc12 ............................. Passed 40.19 sec; Start 26: cc13b; 31/411 Test #22: cc11 ............................. Passed 65.06 sec; Start 27: cc13c; 32/411 Test #20: cc1 .............................. Passed 164.35 sec; Start 28: cc13d; 33/411 Test #11: cbs-delta-energy ................. Passed 341.48 sec; Start 29: cc14; 34/411 Test #26: cc13b ............................ Passed 204.38 sec; Start 30: cc15; 35/411 Test #27: cc13c ............................ Passed 209.71 sec; Start 31: cc16; 36/411 Test #13: cbs-xtpl-alpha ................... Passed 415.31 sec; Start 32: cc17; 37/411 Test #32: cc17 ............................. Passed 89.67 sec; Start 33: cc18; 38/411 Test #33: cc18 ............................. Passed 59.67 sec; Start 34: cc19; 39/411 Test #30: cc15 .............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828:2820,wrap,wrapper,2820,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-409148828,1,['wrap'],['wrapper']
Integrability,................. Passed 3.07 sec; Start 9: castup2; 8/412 Test #7: casscf-sp ........................ Passed 14.70 sec; Start 10: castup3; 9/412 Test #9: castup2 .......................... Passed 10.03 sec; Start 11: cbs-delta-energy; 10/412 Test #10: castup3 .......................... Passed 8.30 sec; Start 12: cbs-parser; 11/412 Test #12: cbs-parser ....................... Passed 37.55 sec; Start 13: cbs-xtpl-alpha; 12/412 Test #11: cbs-delta-energy ................. Passed 64.49 sec; Start 14: cbs-xtpl-energy; 13/412 Test #14: cbs-xtpl-energy .................. Passed 15.23 sec; Start 15: cbs-xtpl-freq; 14/412 Test #15: cbs-xtpl-freq .................... Passed 9.08 sec; Start 16: cbs-xtpl-gradient; 15/412 Test #326: scf-bz2 .......................... Passed 188.03 sec; Start 17: cbs-xtpl-opt; 16/412 Test #16: cbs-xtpl-gradient ................ Passed 24.11 sec; Start 19: cbs-xtpl-nbody; 17/412 Test #19: cbs-xtpl-nbody ................... Passed 51.60 sec; Start 20: cbs-xtpl-wrapper; 18/412 Test #17: cbs-xtpl-opt ..................... Passed 74.20 sec; Start 21: cc1; 19/412 Test #206: frac-traverse .................... Passed 282.86 sec; Start 22: cc10; 20/412 Test #21: cc1 .............................. Passed 20.69 sec; Start 23: cc11; 21/412 Test #13: cbs-xtpl-alpha ................... Passed 156.06 sec; Start 24: cc12; 22/412 Test #24: cc12 ............................. Passed 18.96 sec; Start 25: cc13; 23/412 Test #22: cc10 ............................. Passed 22.32 sec; Start 27: cc13b; 24/412 Test #23: cc11 ............................. Passed 25.37 sec; Start 28: cc13c; 25/412 Test #20: cbs-xtpl-wrapper ................. Passed 66.34 sec; Start 29: cc13d; 26/412 Test #26: cc13a ............................ Passed 329.40 sec; Start 30: cc14; 27/412 Test #27: cc13b ............................ Passed 52.22 sec; Start 31: cc15; 28/412 Test #196: fd-freq-gradient-large ........... Passed 362.66 sec; Start 32: cc16; 29/412 Test #28: cc13c .....................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031:2043,wrap,wrapper,2043,https://psicode.org,https://github.com/psi4/psi4/pull/1219#issuecomment-419060031,1,['wrap'],['wrapper']
Integrability,................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed 17.75 sec; Start 313: rasscf-sp; 93/411 Test #17: cbs-xtpl-opt ..................... Passed 43.78 sec; Start 256: omp2p5-grad2; 94/411 Test #313: rasscf-sp ........................ Passed 6.08 sec; Start 46: cc30; 95/411 Test #280: opt-irc-1 ........................ Passed 59.45 sec; Start 297: pubchem1; 96/411 Test #256: omp2p5-grad2 ..................... Passed 10.51 sec; Start 57: cc40; 97/411 Test #100: ci-property ...................... Passed 45.85 sec; Start 59: cc42; 98/411 Test #46: cc30 ............................. Passed 20.77 sec; Start 261: omp3-5; 99/411 Test #57: cc40 ............................. Passed 11.83 sec; Start 2: adc2; 100/411 Test #389: python-pubchem ................... Passed 48.90 sec; Start 65: cc48; 101/411 Test #59: cc42 ............................. Passed 13.57 sec; Start 337: scf6; 102/411 Test #,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:8615,wrap,wrapper,8615,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['wrap'],['wrapper']
Integrability,.................. Passed 1.59 sec; Start 329: scf-guess-read1; 376/413 Test #355: tu1-h2o-energy ................... Passed 1.51 sec; Start 336: scf3; 377/413 Test #222: mints-helper ..................... Passed 1.51 sec; Start 132: dfmp2-2; 378/413 Test #104: decontract ....................... Passed 1.91 sec; Start 356: tu2-ch2-energy; 379/413 Test #123: dfccdl1 .......................... Passed 3.74 sec; Start 300: pubchem2; 380/413 Test #120: dfcasscf-fzc-sp .................. Passed 3.87 sec; Start 313: rasci-h2o; 381/413 Test #332: scf-bs ........................... Passed 1.21 sec; Start 330: scf-upcast-custom-basis; 382/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 2.12 sec; Start 212: mcscf2; 383/413 Test #351: sapt-sf1 ......................... Passed 1.63 sec; Start 8: castup1; 384/413 Test #223: mints9 ........................... Passed 2.14 sec; Start 218: mints5; 385/413 Test #216: mints3 ........................... Passed 1.20 sec; Start 241: numpy-array-interface; 386/413 Test #347: dfep2-2 .......................... Passed 2.13 sec; Start 366: options1; 387/413 Test #336: scf3 ............................. Passed 1.28 sec; Start 217: mints4; 388/413 Test #241: numpy-array-interface ............ Passed 0.68 sec; Start 213: mcscf3; 389/413 Test #218: mints5 ........................... Passed 1.04 sec; Start 214: mints1; 390/413 Test #366: options1 ......................... Passed 0.66 sec; Start 177: docs-dft; 391/413 Test #300: pubchem2 ......................... Passed 1.76 sec; Start 211: mcscf1; 392/413 Test #217: mints4 ........................... Passed 1.08 sec; Start 311: pywrap-molecule; 393/413 Test #214: mints1 ........................... Passed 0.71 sec; Start 310: pywrap-db3; 394/413 Test #177: docs-dft ......................... Passed 0.61 sec; Start 176: docs-bases; 395/413 Test #176: docs-bases ....................... Passed 0.54 sec; Start 162: dft-grac; 396/413 Test #310: pywrap-db3 ....................... Passed 0.68 sec;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:36332,interface,interface,36332,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['interface'],['interface']
Integrability,.................. Passed 8.79 sec; Start 10: castup3; 9/411 Test #7: casscf-sp ........................ Passed 13.45 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.96 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.52 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 63.99 sec; Start 14: cbs-xtpl-energy; 13/411 Test #325: scf-bz2 .......................... Passed 128.53 sec; Start 15: cbs-xtpl-freq; 14/411 Test #14: cbs-xtpl-energy .................. Passed 15.43 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 11.30 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 17.01 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 51.38 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 121.61 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 55.81 sec; Start 22: cc11; 20/411 Test #20: cc1 .............................. Passed 24.98 sec; Start 23: cc12; 21/411 Test #21: cc10 ............................. Passed 12.69 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 12.25 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.41 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 226.61 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 38.66 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 49.77 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 289.64 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ........... Passed 293.60 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 34.00 sec; Start 33: cc18; 30/411 Test #32: cc17 ............................. P,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:2154,wrap,wrapper,2154,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['wrap'],['wrapper']
Integrability,................... Passed 0.98 sec; Start 217: mints5; 385/412 Test #4: casscf-semi ...................... Passed 15.97 sec; Start 383: psi4numpy-rhf; 386/412 Test #103: decontract ....................... Passed 1.76 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.26 sec; Start 213: mints1; 388/412 Test #405: json-schema-1-properties ......... Passed 1.52 sec; Start 175: docs-bases; 389/412 Test #388: python-energy .................... Passed 1.01 sec; Start 309: pywrap-db3; 390/412 Test #335: scf3 ............................. Passed 0.79 sec; Start 209: matrix1; 391/412 Test #212: mcscf3 ........................... Passed 0.75 sec; Start 216: mints4; 392/412 Test #210: mcscf1 ........................... Passed 0.78 sec; Start 176: docs-dft; 393/412 Test #399: json-v11-gradient ................ Passed 1.25 sec; Start 365: options1; 394/412 Test #288: psimrcc-ccsd_t-1 ................. Passed 2.35 sec; Start 410: skeletonscf; 395/412 Test #240: numpy-array-interface ............ Passed 0.80 sec; Start 403: json-schema-1-throws; 396/412 Test #213: mints1 ........................... Passed 0.80 sec; Start 88: cepa1; 397/412 Test #383: psi4numpy-rhf .................... Passed 0.92 sec; 398/412 Test #310: pywrap-molecule .................. Passed 1.22 sec; 399/412 Test #175: docs-bases ....................... Passed 0.83 sec; 400/412 Test #209: matrix1 .......................... Passed 0.68 sec; 401/412 Test #217: mints5 ........................... Passed 1.06 sec; 402/412 Test #309: pywrap-db3 ....................... Passed 0.77 sec; 403/412 Test #379: mints12 .......................... Passed 1.35 sec; 404/412 Test #216: mints4 ........................... Passed 0.71 sec; 405/412 Test #176: docs-dft ......................... Passed 0.65 sec; 406/412 Test #365: options1 ......................... Passed 0.65 sec; 407/412 Test #403: json-schema-1-throws ............. Passed 0.56 sec; 408/412 Test #410: skeletonscf .,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:37200,interface,interface,37200,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['interface'],['interface']
Integrability,................... Passed 1.33 sec; Start 310: pywrap-molecule; 381/412 Test #354: tu1-h2o-energy ................... Passed 1.74 sec; Start 335: scf3; 382/412 Test #221: mints-helper ..................... Passed 1.51 sec; Start 212: mcscf3; 383/412 Test #391: python-mints9 .................... Passed 2.12 sec; Start 217: mints5; 384/412 Test #396: python-mints13 ................... Passed 2.00 sec; Start 383: psi4numpy-rhf; 385/412 Test #222: mints9 ........................... Passed 2.10 sec; Start 210: mcscf1; 386/412 Test #405: json-schema-1-properties ......... Passed 1.36 sec; Start 240: numpy-array-interface; 387/412 Test #401: json-schema-1-ghost .............. Passed 1.16 sec; Start 175: docs-bases; 388/412 Test #381: psi4numpy-cphf ................... Passed 1.45 sec; Start 213: mints1; 389/412 Test #399: json-v11-gradient ................ Passed 1.47 sec; Start 309: pywrap-db3; 390/412 Test #388: python-energy .................... Passed 1.16 sec; Start 216: mints4; 391/412 Test #240: numpy-array-interface ............ Passed 0.92 sec; Start 209: matrix1; 392/412 Test #379: mints12 .......................... Passed 1.36 sec; Start 410: skeletonscf; 393/412 Test #310: pywrap-molecule .................. Passed 1.27 sec; Start 176: docs-dft; 394/412 Test #335: scf3 ............................. Passed 1.28 sec; Start 365: options1; 395/412 Test #383: psi4numpy-rhf .................... Passed 1.16 sec; Start 403: json-schema-1-throws; 396/412 Test #212: mcscf3 ........................... Passed 1.28 sec; Start 88: cepa1; 397/412 Test #217: mints5 ........................... Passed 1.25 sec; 398/412 Test #175: docs-bases ....................... Passed 0.78 sec; 399/412 Test #210: mcscf1 ........................... Passed 1.26 sec; 400/412 Test #397: python-memdfjk ................... Passed 1.51 sec; 401/412 Test #213: mints1 ........................... Passed 0.96 sec; 402/412 Test #209: matrix1 .......................... Passed 0.64 sec; 403/412 Test #216: m,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:36814,interface,interface,36814,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['interface'],['interface']
Integrability,................... Passed 7.77 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 7.44 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 25.04 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 58.74 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 14.17 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 165.45 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 12.40 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 21.29 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 63.51 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 128.24 sec; Start 21: cc10; 19/411 Test #21: cc10 ............................. Passed 10.56 sec; Start 22: cc11; 20/411 Test #19: cbs-xtpl-wrapper ................. Passed 70.14 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 27.02 sec; Start 24: cc13; 22/411 Test #23: cc12 ............................. Passed 11.49 sec; Start 26: cc13b; 23/411 Test #22: cc11 ............................. Passed 16.46 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 274.86 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 46.68 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 47.39 sec; Start 30: cc15; 27/411 Test #195: fd-freq-gradient-large ........... Passed 355.17 sec; Start 31: cc16; 28/411 Test #25: cc13a ............................ Passed 357.77 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 47.52 sec; Start 33: cc18; 30/411 Test #32: cc17 ............................. Passed 25.71 sec; Start 34: cc19; 31/411 Test #113: dcft7 ............................,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986:2242,wrap,wrapper,2242,https://psicode.org,https://github.com/psi4/psi4/pull/1090#issuecomment-408925986,1,['wrap'],['wrapper']
Integrability,.................... Passed 29.32 sec; Start 17: cbs-xtpl-opt; 70/413 Test #19: cbs-xtpl-nbody ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53; 85/413 Test #60: cc42 ............................. Passed 16.11 sec; Start 247: ocepa3; 86/413 Test #207: frac-traverse .................... Passed 224.00 sec; Start 109: dcft1; 87/413 Test #78: cc8 .............................. Passed 13.24 sec; Start 153: dfomp2p5-2; 88/413 Test #72: cc53 ............................. Passed 17.52 sec; Start 74: cc55; 89/413 Test #319: sapt3 ............................ Passed 75.92 sec; Start 149: dfomp3-2; 90/413 Test #246: ocepa2 ........................... Passed 38.94 sec; Start 66: cc48; 91/413 Test #247: ocepa3,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7758,wrap,wrapper,7758,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['wrap'],['wrapper']
Integrability,.................... Passed 29.92 sec; Start 145: dfomp2-grad2; 67/412 Test #44: cc28 ............................. Passed 70.63 sec; Start 17: cbs-xtpl-opt; 68/412 Test #280: opt14 ............................ Passed 86.25 sec; Start 250: omp2-4; 69/412 Test #81: cc8c ............................. Passed 32.21 sec; Start 62: cc44; 70/412 Test #116: dcft9 ............................ Passed 93.34 sec; Start 264: omp3-grad2; 71/412 Test #320: sapt5 ............................ Passed 76.19 sec; Start 205: frac-ip-fitting; 72/412 Test #206: frac-traverse .................... Passed 235.67 sec; Start 390: python-pubchem; 73/412 Test #145: dfomp2-grad2 ..................... Passed 55.39 sec; Start 168: dft-b3lyp; 74/412 Test #318: sapt3 ............................ Passed 82.32 sec; Start 2: adc2; 75/412 Test #261: omp3-4 ........................... Passed 72.66 sec; Start 150: dfomp3-grad2; 76/412 Test #231: mp2-module ....................... Passed 90.49 sec; Start 20: cbs-xtpl-wrapper; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 81.12 sec; Start 58: cc40; 78/412 Test #250: omp2-4 ........................... Passed 69.17 sec; Start 11: cbs-delta-energy; 79/412 Test #62: cc44 ............................. Passed 72.21 sec; Start 82: cc9; 80/412 Test #264: omp3-grad2 ....................... Passed 71.27 sec; Start 69: cc50; 81/412 Test #390: python-pubchem ................... Passed 64.71 sec; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:7468,wrap,wrapper,7468,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['wrap'],['wrapper']
Integrability,.................... Passed 9.38 sec; Start 10: castup3; 9/411 Test #9: castup2 .......................... Passed 5.54 sec; Start 11: cbs-delta-energy; 10/411 Test #10: castup3 .......................... Passed 5.87 sec; Start 12: cbs-parser; 11/411 Test #12: cbs-parser ....................... Passed 26.15 sec; Start 13: cbs-xtpl-alpha; 12/411 Test #11: cbs-delta-energy ................. Passed 55.75 sec; Start 14: cbs-xtpl-energy; 13/411 Test #14: cbs-xtpl-energy .................. Passed 11.20 sec; Start 15: cbs-xtpl-freq; 14/411 Test #325: scf-bz2 .......................... Passed 126.40 sec; Start 16: cbs-xtpl-gradient; 15/411 Test #15: cbs-xtpl-freq .................... Passed 6.79 sec; Start 17: cbs-xtpl-opt; 16/411 Test #16: cbs-xtpl-gradient ................ Passed 24.78 sec; Start 19: cbs-xtpl-wrapper; 17/411 Test #17: cbs-xtpl-opt ..................... Passed 57.71 sec; Start 20: cc1; 18/411 Test #13: cbs-xtpl-alpha ................... Passed 113.77 sec; Start 21: cc10; 19/411 Test #19: cbs-xtpl-wrapper ................. Passed 53.70 sec; Start 22: cc11; 20/411 Test #21: cc10 ............................. Passed 10.30 sec; Start 23: cc12; 21/411 Test #20: cc1 .............................. Passed 23.57 sec; Start 24: cc13; 22/411 Test #22: cc11 ............................. Passed 10.89 sec; Start 26: cc13b; 23/411 Test #23: cc12 ............................. Passed 9.82 sec; Start 27: cc13c; 24/411 Test #205: frac-traverse .................... Passed 221.87 sec; Start 28: cc13d; 25/411 Test #26: cc13b ............................ Passed 28.09 sec; Start 29: cc14; 26/411 Test #27: cc13c ............................ Passed 42.99 sec; Start 30: cc15; 27/411 Test #25: cc13a ............................ Passed 275.86 sec; Start 31: cc16; 28/411 Test #195: fd-freq-gradient-large ........... Passed 291.59 sec; Start 32: cc17; 29/411 Test #30: cc15 ............................. Passed 40.51 sec; Start 33: cc18; 30/411 Test #113: dcft7 ............................ ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967:2152,wrap,wrapper,2152,https://psicode.org,https://github.com/psi4/psi4/pull/1092#issuecomment-409185967,1,['wrap'],['wrapper']
Integrability,"..................... Passed 1.23 sec; Start 209: mcscf1; 386/404 Test #214: mints3 ........................... Passed 1.05 sec; Start 382: psi4numpy-rhf; 387/404 Test #402: json-schema-1-throws ............. Passed 0.57 sec; Start 308: pywrap-db3; 388/404 Test #387: python-energy .................... Passed 0.81 sec; Start 239: numpy-array-interface; 389/404 Test #188: fci-tdm .......................... Passed 0.77 sec; Start 364: options1; 390/404 Test #334: scf3 ............................. Passed 0.82 sec; Start 208: matrix1; 391/404 Test #211: mcscf3 ........................... Passed 0.80 sec; Start 175: docs-dft; 392/404 Test #396: python-memdfjk ................... Passed 0.92 sec; Start 216: mints5; 393/404 Test #209: mcscf1 ........................... Passed 0.78 sec; Start 212: mints1; 394/404 Test #382: psi4numpy-rhf .................... Passed 0.83 sec; Start 174: docs-bases; 395/404 Test #308: pywrap-db3 ....................... Passed 0.71 sec; Start 215: mints4; 396/404 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 87: cepa1; 397/404 Test #364: options1 ......................... Passed 0.58 sec; 398/404 Test #208: matrix1 .......................... Passed 0.56 sec; 399/404 Test #175: docs-dft ......................... Passed 0.64 sec; 400/404 Test #216: mints5 ........................... Passed 0.61 sec; 401/404 Test #212: mints1 ........................... Passed 0.59 sec; 402/404 Test #174: docs-bases ....................... Passed 0.52 sec; 403/404 Test #215: mints4 ........................... Passed 0.53 sec; 404/404 Test #87: cepa1 ............................ Passed 1.59 sec. 99% tests passed, 1 tests failed out of 404. Label Time Summary:; adc = 61.74 sec*proc (2 tests); autotest = 549.39 sec*proc (26 tests); cart = 6384.55 sec*proc (123 tests); cas = 21.60 sec*proc (1 test); casscf = 37.11 sec*proc (11 tests); cbs = 1326.42 sec*proc (10 tests); cc = 4788.05 sec*proc (65 tests); cdomp2 = 10.66 sec*proc (2 tests); cepa = 5",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338:36892,interface,interface,36892,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-404174338,1,['interface'],['interface']
Integrability,..................... Passed 2.36 sec; Start 334: scf-occ; 363/413 Test #190: fci-tdm .......................... Passed 1.95 sec; Start 345: stability1; 364/413 Test #331: scf-guess-read2 .................. Passed 7.29 sec; Start 351: sapt-sf1; 365/413 Test #223: mints9 ........................... Passed 2.00 sec; Start 121: dfcasscf-sp; 366/413 Test #222: mints-helper ..................... Passed 1.96 sec; Start 347: dfep2-2; 367/413 Test #336: scf3 ............................. Passed 1.57 sec; Start 300: pubchem2; 368/413 Test #354: stability2 ....................... Passed 2.80 sec; Start 356: tu2-ch2-energy; 369/413 Test #335: scf2 ............................. Passed 3.39 sec; Start 290: psimrcc-ccsd_t-2; 370/413 Test #97: cisd-h2o-clpse ................... Passed 2.89 sec; Start 122: dfccd1; 371/413 Test #351: sapt-sf1 ......................... Passed 1.54 sec; Start 332: scf-bs; 372/413 Test #86: cepa0-grad1 ...................... Passed 4.82 sec; Start 241: numpy-array-interface; 373/413 Test #356: tu2-ch2-energy ................... Passed 1.07 sec; Start 218: mints5; 374/413 Test #347: dfep2-2 .......................... Passed 2.24 sec; Start 329: scf-guess-read1; 375/413 Test #300: pubchem2 ......................... Passed 1.45 sec; Start 366: options1; 376/413 Test #334: scf-occ .......................... Passed 3.01 sec; Start 217: mints4; 377/413 Test #241: numpy-array-interface ............ Passed 0.81 sec; Start 289: psimrcc-ccsd_t-1; 378/413 Test #332: scf-bs ........................... Passed 1.53 sec; Start 136: dfmp2-grad1; 379/413 Test #345: stability1 ....................... Passed 3.12 sec; Start 214: mints1; 380/413 Test #290: psimrcc-ccsd_t-2 ................. Passed 1.93 sec; Start 6: ao-casscf-sp; 381/413 Test #218: mints5 ........................... Passed 0.97 sec; Start 120: dfcasscf-fzc-sp; 382/413 Test #366: options1 ......................... Passed 0.75 sec; Start 212: mcscf2; 383/413 Test #217: mints4 ........................... Pass,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026:35089,interface,interface,35089,https://psicode.org,https://github.com/psi4/psi4/pull/1239#issuecomment-425082026,1,['interface'],['interface']
Integrability,....................... Passed 1.19 sec; Start 334: scf3; 377/411 Test #403: json-schema-1-gradient ........... Passed 1.46 sec; Start 349: sapt-sf1; 378/411 Test #408: skeletonmointegrals .............. Passed 1.35 sec; Start 309: pywrap-molecule; 379/411 Test #220: mints-helper ..................... Passed 1.32 sec; Start 396: python-memdfjk; 380/411 Test #298: pubchem2 ......................... Passed 2.43 sec; Start 354: tu2-ch2-energy; 381/411 Test #398: json-v11-gradient ................ Passed 1.11 sec; Start 216: mints5; 382/411 Test #353: tu1-h2o-energy ................... Passed 1.13 sec; Start 209: mcscf1; 383/411 Test #404: json-schema-1-properties ......... Passed 1.20 sec; Start 382: psi4numpy-rhf; 384/411 Test #293: psimrcc-pt2 ...................... Passed 1.09 sec; Start 212: mints1; 385/411 Test #411: skeletonwavefunction ............. Passed 1.06 sec; Start 211: mcscf3; 386/411 Test #214: mints3 ........................... Passed 1.15 sec; Start 239: numpy-array-interface; 387/411 Test #188: fci-tdm .......................... Passed 1.07 sec; Start 409: skeletonscf; 388/411 Test #400: json-schema-1-ghost .............. Passed 1.01 sec; Start 174: docs-bases; 389/411 Test #410: skeletonsointegrals .............. Passed 1.37 sec; Start 175: docs-dft; 390/411 Test #334: scf3 ............................. Passed 1.13 sec; Start 308: pywrap-db3; 391/411 Test #349: sapt-sf1 ......................... Passed 1.14 sec; Start 215: mints4; 392/411 Test #209: mcscf1 ........................... Passed 0.86 sec; Start 208: matrix1; 393/411 Test #354: tu2-ch2-energy ................... Passed 0.98 sec; Start 364: options1; 394/411 Test #382: psi4numpy-rhf .................... Passed 0.89 sec; Start 402: json-schema-1-throws; 395/411 Test #211: mcscf3 ........................... Passed 0.76 sec; Start 87: cepa1; 396/411 Test #309: pywrap-molecule .................. Passed 1.18 sec; 397/411 Test #216: mints5 ........................... Passed 1.01 sec; 398/411 Tes,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:36404,interface,interface,36404,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['interface'],['interface']
Integrability,......................... Passed 0.80 sec; Start 293: psimrcc-pt2; 385/411 Test #406: skeletonaointegrals .............. Passed 1.10 sec; Start 209: mcscf1; 386/411 Test #383: psi4numpy-rhf-gradient ........... Passed 1.07 sec; Start 309: pywrap-molecule; 387/411 Test #387: python-energy .................... Passed 0.79 sec; Start 214: mints3; 388/411 Test #222: mints10 .......................... Passed 1.23 sec; Start 396: python-memdfjk; 389/411 Test #220: mints-helper ..................... Passed 1.06 sec; Start 334: scf3; 390/411 Test #209: mcscf1 ........................... Passed 0.64 sec; Start 382: psi4numpy-rhf; 391/411 Test #378: mints12 .......................... Passed 1.21 sec; Start 211: mcscf3; 392/411 Test #293: psimrcc-pt2 ...................... Passed 0.97 sec; Start 308: pywrap-db3; 393/411 Test #334: scf3 ............................. Passed 0.74 sec; Start 212: mints1; 394/411 Test #396: python-memdfjk ................... Passed 0.94 sec; Start 239: numpy-array-interface; 395/411 Test #214: mints3 ........................... Passed 1.07 sec; Start 409: skeletonscf; 396/411 Test #309: pywrap-molecule .................. Passed 1.09 sec; Start 216: mints5; 397/411 Test #211: mcscf3 ........................... Passed 0.69 sec; Start 364: options1; 398/411 Test #382: psi4numpy-rhf .................... Passed 0.82 sec; Start 175: docs-dft; 399/411 Test #308: pywrap-db3 ....................... Passed 0.69 sec; Start 402: json-schema-1-throws; 400/411 Test #212: mints1 ........................... Passed 0.55 sec; Start 174: docs-bases; 401/411 Test #216: mints5 ........................... Passed 0.58 sec; Start 215: mints4; 402/411 Test #239: numpy-array-interface ............ Passed 0.62 sec; Start 208: matrix1; 403/411 Test #409: skeletonscf ...................... Passed 0.62 sec; Start 87: cepa1; 404/411 Test #364: options1 ......................... Passed 0.57 sec; 405/411 Test #175: docs-dft ......................... Passed 0.60 sec; 406/411 Test #4,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901:36934,interface,interface,36934,https://psicode.org,https://github.com/psi4/psi4/pull/1077#issuecomment-409911901,1,['interface'],['interface']
Integrability,........................... Passed 69.60 sec; Start 108: dcft1; 65/412 Test #326: scf-bz2 .......................... Passed 138.38 sec; Start 293: psimrcc-fd-freq2; 66/412 Test #108: dcft1 ............................ Passed 21.44 sec; Start 193: fd-freq-energy; 67/412 Test #182: fsapt-allterms ................... Passed 599.68 sec; Start 320: sapt5; 68/412 Test #19: cbs-xtpl-nbody ................... Passed 51.30 sec; Start 157: dfomp2p5-grad2; 69/412 Test #280: opt14 ............................ Passed 85.55 sec; Start 150: dfomp3-grad2; 70/412 Test #70: cc51 ............................. Passed 72.72 sec; Start 44: cc28; 71/412 Test #231: mp2-module ....................... Passed 79.59 sec; Start 245: ocepa2; 72/412 Test #206: frac-traverse .................... Passed 233.30 sec; Start 261: omp3-4; 73/412 Test #318: sapt3 ............................ Passed 83.47 sec; Start 251: omp2-5; 74/412 Test #157: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec; Start 250: omp2-4; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft-b3lyp; 83/412 Test #26: cc13a ............................ Passed 327.85 sec; Start 69: cc50; 84/412 Test #243: ocepa-grad2 ...................... Passed 63.73 sec; Start 300: pywrap-alias; 85/412 Test #20: cbs-xtpl-wrapper ................. Passed 79.22 sec; Start 390: pyt,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:7293,wrap,wrapper,7293,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['wrap'],['wrapper']
Integrability,........................... Passed 71.21 sec; Start 104: dcft-grad2; 65/411 Test #104: dcft-grad2 ....................... Passed 11.72 sec; Start 115: dcft9; 66/411 Test #74: cc5a ............................. Passed 36.60 sec; Start 292: psimrcc-fd-freq2; 67/411 Test #69: cc51 ............................. Passed 55.79 sec; Start 19: cbs-xtpl-wrapper; 68/411 Test #319: sapt5 ............................ Passed 62.74 sec; Start 144: dfomp2-grad2; 69/411 Test #115: dcft9 ............................ Passed 17.82 sec; Start 46: cc30; 70/411 Test #144: dfomp2-grad2 ..................... Passed 12.75 sec; Start 61: cc44; 71/411 Test #167: dft-b3lyp ........................ Passed 61.83 sec; Start 149: dfomp3-grad2; 72/411 Test #204: frac-ip-fitting .................. Passed 58.04 sec; Start 11: cbs-delta-energy; 73/411 Test #149: dfomp3-grad2 ..................... Passed 14.73 sec; Start 43: cc28; 74/411 Test #46: cc30 ............................. Passed 23.10 sec; Start 259: omp3-3; 75/411 Test #19: cbs-xtpl-wrapper ................. Passed 46.33 sec; Start 17: cbs-xtpl-opt; 76/411 Test #292: psimrcc-fd-freq2 ................. Passed 55.91 sec; Start 100: ci-property; 77/411 Test #61: cc44 ............................. Passed 42.92 sec; Start 389: python-pubchem; 78/411 Test #43: cc28 ............................. Passed 33.97 sec; Start 159: dft-grad-meta; 79/411 Test #259: omp3-3 ........................... Passed 34.08 sec; Start 147: dfomp3-2; 80/411 Test #11: cbs-delta-energy ................. Passed 49.88 sec; Start 244: ocepa2; 81/411 Test #147: dfomp3-2 ......................... Passed 9.52 sec; Start 297: pubchem1; 82/411 Test #17: cbs-xtpl-opt ..................... Passed 44.69 sec; Start 170: dft1-alt; 83/411 Test #244: ocepa2 ........................... Passed 20.83 sec; Start 242: ocepa-grad2; 84/411 Test #100: ci-property ...................... Passed 45.67 sec; Start 153: dfomp2p5-grad2; 85/411 Test #389: python-pubchem ................... Passed 45.96 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064:7201,wrap,wrapper,7201,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-405575064,1,['wrap'],['wrapper']
Integrability,............................ Passed 12.46 sec; Start 104: dcft-grad2; 72/411 Test #153: dfomp2p5-grad2 ................... Passed 15.20 sec; Start 61: cc44; 73/411 Test #292: psimrcc-fd-freq2 ................. Passed 62.74 sec; Start 204: frac-ip-fitting; 74/411 Test #104: dcft-grad2 ....................... Passed 16.24 sec; Start 144: dfomp2-grad2; 75/411 Test #74: cc5a ............................. Passed 46.64 sec; Start 11: cbs-delta-energy; 76/411 Test #144: dfomp2-grad2 ..................... Passed 11.68 sec; Start 26: cc13b; 77/411 Test #167: dft-b3lyp ........................ Passed 64.40 sec; Start 244: ocepa2; 78/411 Test #26: cc13b ............................ Passed 16.81 sec; Start 250: omp2-5; 79/411 Test #317: sapt3 ............................ Passed 72.42 sec; Start 230: mp2-module; 80/411 Test #61: cc44 ............................. Passed 45.71 sec; Start 151: dfomp2p5-2; 81/411 Test #250: omp2-5 ........................... Passed 18.02 sec; Start 19: cbs-xtpl-wrapper; 82/411 Test #151: dfomp2p5-2 ....................... Passed 12.10 sec; Start 147: dfomp3-2; 83/411 Test #11: cbs-delta-energy ................. Passed 43.01 sec; Start 280: opt-irc-1; 84/411 Test #244: ocepa2 ........................... Passed 23.63 sec; Start 249: omp2-4; 85/411 Test #204: frac-ip-fitting .................. Passed 60.44 sec; Start 17: cbs-xtpl-opt; 86/411 Test #147: dfomp3-2 ......................... Passed 8.76 sec; Start 260: omp3-4; 87/411 Test #249: omp2-4 ........................... Passed 17.12 sec; Start 242: ocepa-grad2; 88/411 Test #260: omp3-4 ........................... Passed 18.29 sec; Start 100: ci-property; 89/411 Test #230: mp2-module ....................... Passed 43.19 sec; Start 299: pywrap-alias; 90/411 Test #242: ocepa-grad2 ...................... Passed 17.13 sec; Start 389: python-pubchem; 91/411 Test #19: cbs-xtpl-wrapper ................. Passed 43.72 sec; Start 159: dft-grad-meta; 92/411 Test #299: pywrap-alias ..................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225:7738,wrap,wrapper,7738,https://psicode.org,https://github.com/psi4/psi4/pull/1075#issuecomment-409598225,1,['wrap'],['wrapper']
Integrability,............................. Passed 41.32 sec; Start 230: mp2-module; 53/411 Test #100: ci-property ...................... Passed 53.35 sec; Start 219: mints-benchmark; 54/411 Test #305: pywrap-checkrun-rohf ............. Passed 328.05 sec; Start 348: sapt-compare; 55/411 Test #219: mints-benchmark .................. Passed 40.12 sec; Start 38: cc23; 56/411 Test #348: sapt-compare ..................... Passed 43.18 sec; Start 131: dfmp2-3; 57/411 Test #230: mp2-module ....................... Passed 79.66 sec; Start 40: cc25; 58/411 Test #145: dfomp2-grad3 ..................... Passed 526.80 sec; Start 19: cbs-xtpl-wrapper; 59/411 Test #131: dfmp2-3 .......................... Passed 40.26 sec; Start 307: pywrap-db1; 60/411 Test #35: cc2 .............................. Passed 327.30 sec; Start 74: cc5a; 61/411 Test #307: pywrap-db1 ....................... Passed 39.70 sec; Start 17: cbs-xtpl-opt; 62/411 Test #41: cc26 ............................. Passed 280.38 sec; Start 29: cc14; 63/411 Test #19: cbs-xtpl-wrapper ................. Passed 77.77 sec; Start 42: cc27; 64/411 Test #74: cc5a ............................. Passed 97.39 sec; Start 276: opt11; 65/411 Test #318: sapt4 ............................ Passed 1909.66 sec; Start 47: cc31; 66/411 Test #276: opt11 ............................ Passed 105.52 sec; Start 273: opt7; 67/411 Test #17: cbs-xtpl-opt ..................... Passed 206.55 sec; Start 36: cc21; 68/411 Test #273: opt7 ............................. Passed 91.44 sec; Start 206: ghosts; 69/411 Test #110: dcft4 ............................ Passed 800.05 sec; Start 312: rasci-ne; 70/411 Test #206: ghosts ........................... Passed 33.57 sec; Start 359: tu6-cp-ne2; 71/411 Test #312: rasci-ne ......................... Passed 35.28 sec; Start 11: cbs-delta-energy; 72/411 Test #47: cc31 ............................. Passed 436.66 sec; Start 323: sapt7; 73/411 Test #323: sapt7 ............................ Passed 36.88 sec; Start 76: cc7; 74/411 Test #38:,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972:6103,wrap,wrapper,6103,https://psicode.org,https://github.com/psi4/psi4/pull/1089#issuecomment-408103972,1,['wrap'],['wrapper']
Integrability,"..........................................PASSED; Eexch.................................................................................PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:6870,message,message,6870,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['message'],['message']
Integrability,".................................PASSED; 	Ne: PWPB95_PT2....................................................PASSED; 	Ne: PWPB95........................................................PASSED; 	Ne: DSD-BLYP_DFT..................................................PASSED; 	Ne: DSD-BLYP_PT2..................................................PASSED; 	Ne: DSD-BLYP......................................................PASSED; 	Ne: PBE0-DH DFT...................................................PASSED; 	Ne: PBE0-DH PT2...................................................PASSED; 	Ne: PBE0-DH.......................................................PASSED; 	PBE0-2: Water: computed value (-150.8272119) does not match (-152.6486355) to 6 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 109, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	PBE0-2: Water: computed value (-150.8272119) does not match (-152.6486355) to 6 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). Start 367: dft-custom-hybrid; 22/24 Test #367: dft-custom-hybrid ................ Passed 46.21 sec; Start 368: dft-custom-mgga; 23/24 Test #368: dft-custom-mgga .................. Passed 244.44 sec; Start 369: dft-custom-gga; 24/24 Test #369: dft-custom-gga ...................***Failed 171.36 sec; 	Ne: BLYP..........................................................PASSED; 	Ne: SVWN..........................................................PASSED; 	Ne: PBE...........................................................PASSED; 	Ne: PW91..........................................................PASSED; 	Ne: MPWPW.........................................................PASSED; Error occurred in file: C:\Users\User\psi4.git\psi4\src\psi4\libpsi4util\process.cc on line: 112; Tra",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:4508,message,message,4508,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['message'],['message']
Integrability,".........PASSED; Eind..................................................................................PASSED; Edisp.................................................................................PASSED; Etot..................................................................................PASSED; fEelst................................................................................FAILED; Traceback (most recent call last):; File ""/psi/gits/hrw-l2/objdir39b/stage/bin/psi4"", line 333, in <module>; exec(content); File ""<string>"", line 101, in <module>; File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/qcdb/testing.py"", line 104, in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); File ""/psi/gits/QCElemental/qcelemental/testing.py"", line 178, in compare_values; return return_handler(allclose, label, message, return_message, quiet); File ""/psi/gits/hrw-l2/objdir39b/stage/lib/psi4/driver/p4util/testing.py"", line 189, in _psi4_true_raise_handler; raise TestComparisonError(message). psi4.driver.p4util.exceptions.TestComparisonError: 	fEelst: computed value (-58.7150) does not match (-30.8670) to atol=0.01 by difference (-27.8480). ```. ```; (py39b) psilocaluser@bash:psinet:/psi/gits/hrw-l2/objdir39b: (sept21qcdb_rb1) diff -bwy -W 200 tests/fsapt-ext-abc/fsapt/fsapt.dat tests/fsapt-ext-abc-au/fsapt/fsapt.dat ; ==> F-ISAPT: Links by Charge <==									 ==> F-ISAPT: Links by Charge <==. => Full Analysis <=											 => Full Analysis <=. Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total 			Frag1 Frag2 Elst Exch IndAB IndBA Disp EDisp Total ; w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 			w1 w3 -8.745 11.445 -2.245 -0.663 -1.754 0.000 -1.961 ; w1 Extern-B -6.448 0.000 -0.893 0.000 0.000 0.000 -7.342 		 |	w1 Extern-B 59.651 0.000 -0.893 0.000 0.000 0.000 58.757 ; Extern-A w3 -9.800 0.000 0.000 -1.200 0.000 0.000 -11.000 		 |	Extern-A w3 -103.747 0.000 0.000 -1.200 0.000 0.000 -104.947 ; Extern-A Extern-B -5.874 0.000 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:7043,message,message,7043,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['message'],['message']
Integrability,".26 (`fsapt.py` is a free agent). Another consistent set is QCEngine <0.26.0 and Psi4 and `fsapt.py` <v1.7. Mixing old Psi4 or fsapt.py with new QCEngine and classic dftd3 can yield wrong fisapt analysis, and this isn't trapped.; - [x] `psi4.core.Molecule.run_dftd3` and `qcdb.Molecule.run_dftd3` don't work with `s-dftd3`. Please file an issue if you really want this capability. `run_gcp` will use classic `gcp` or `mctc-gcp` interchangeably, whichever you have available. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] first look at `_engine_can_do` and observe that compared to good ol' dftd3, s-dftd3 (aka simple-dftd3) _can't_ do d2 and by default does d3 variants with ATM dispersion built in (s9=1.0); - [x] in contrast, mctc-gcp is a drop-in replacement for good ol' gcp (probably b/c I stuck with cmdline and didn't write an elaborate interface on top of it :-); - [x] this goes with https://github.com/MolSSI/QCEngine/pull/385; - [x] I didn't think we could just drop the most popular psi4 addon and demand replacement, so all of dftd3/s-dftd3/gcp/mctc-gcp work with psi4. s-dftd3 and mctc-gcp are preferred if present; - [x] need docs; - [x] status (special qcng = v0.26.0 unreleased at time of writing); - [x] PR psi4 with special qcng and dftd3 and gcp and psi4-channel dftd4 all work; - [x] PR psi4 with special qcng and s-dftd3 and mctc-gcp and c-f-channel dftd4 all work ~except for test_dftd3_mp2d~; - [x] old psi4 with special qcng ~doesn't work at all -- WIP~ now works; - old psi4 running fisapt-d then fsapt.py with special qcng gives wrong answer for emp disp; - run_dftd3 is used a lot in the tests as a qcengine wrapper around psi4 molecules. because dftd3 and s-dftd3 handle defaulting so differently, I can't easily make the fn call either/or. I'm tempted to (a) drop the capabilit",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2791:3555,interface,interface,3555,https://psicode.org,https://github.com/psi4/psi4/pull/2791,1,['interface'],['interface']
Integrability,".888000000000 0.000000000000 0.000000000000; > H 2.169000000000 -2.147000000000 0.000000000000; > H 4.649000000000 -2.147000000000 0.000000000000; > ```; > ; > Running in c1 symmetry.; > ; > Nuclear repulsion = 697.113178296437809; > ; > Charge = 0; > Multiplicity = 1; > Electrons = 94; > Nalpha = 47; > Nbeta = 47; > ; > ==> Algorithm <==; > ; > SCF Algorithm Type is OUT_OF_CORE.; > DIIS enabled.; > MOM disabled.; > Fractional occupation disabled.; > Guess Type is CORE.; > Energy threshold = 1.00e-08; > Density threshold = 1.00e-10; > Integral threshold = 0.00e+00; > ; > ==> Primary Basis <==; > ; > Basis Set: CC-PVDZ; > Number of shells: 114; > Number of basis function: 246; > Number of Cartesian functions: 260; > Spherical Harmonics?: true; > Max angular momentum: 2; > ; > ## ==> Pre-Iterations <==; > ; > Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; > ; > ---; > ; > A 246 246 0 0 0 0; > ; > ---; > ; > Total 246 246 47 47 47 0; > ; > ---; > ; > Starting with a DF guess...; > ; > OEINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > ==> Integral Setup <==; > ; > ==> DFJK: Density-Fitted J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > OpenMP threads: 1; > Integrals threads: 1; > Memory (MB): 3576; > Algorithm: Core; > Integral Cache: NONE; > Schwarz Cutoff: 1E-12; > Fitting Condition: 1E-12; > ; > => Auxiliary Basis Set <=; > ; > Basis Set: CC-PVDZ-JKFIT; > Number of shells: 426; > Number of basis function: 1210; > Number of Cartesian functions: 1384; > Spherical Harmonics?: true; > Max angular momentum: 3; > ; > Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; > Using",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:6707,Wrap,Wrapper,6707,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Wrap'],['Wrapper']
Integrability,".95802 -2.84738 2.22072; H -0.62594 -1.95593 2.43463; H -0.25639 -4.56534 1.39064; C -3.89573 -1.47663 1.11455; H -2.84685 -1.21526 1.24711; O -3.96785 -2.64213 0.26554; C -3.25927 -2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:3630,message,message,3630,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['message'],['message']
Integrability,".mark.smoke; def test_psi4_basic():; """"""tu1-h2o-energy""""""; #! Sample HF/cc-pVDZ H2O computation; ; h2o = psi4.geometry(""""""; O; H 1 0.96; H 1 0.96 2 104.5; """"""); ; psi4.set_options({'basis': ""cc-pVDZ""}); psi4.energy('scf'); ; > assert psi4.compare_values(-176.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy'). stage/lib/psi4/tests/test_psi4.py:23: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; stage/lib/psi4/driver/qcdb/testing.py:104: in _mergedapis_compare_values; return qcel.testing.compare_values(expected, computed, **kwargs); /psi/toolchainconda/envs/defenv10/lib/python3.10/site-packages/qcelemental/testing.py:178: in compare_values; return return_handler(allclose, label, message, return_message, quiet); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. passfail = False, label = 'SCF energy', message = '\tSCF energy: computed value (-76.02663274) does not match (-176.02663273) to atol=1e-06 by difference (100.00000000).', return_message = False, quiet = False. def _psi4_true_raise_handler(passfail, label, message, return_message=False, quiet=False):; """"""Handle comparison result by printing to screen, printing to Psi output file, raising TestComparisonError, and (incidently) returning.""""""; ; width = 86; if passfail:; if not quiet:; core.print_out(f' {label:.<{width}}PASSED\n'); print(f' {label:.<{width}}PASSED'); sys.stdout.flush(); else:; core.print_out(f' {label:.<{width}}FAILED'); print(f' {label:.<{width}}FAILED'); sys.stdout.flush(); > raise TestComparisonError(message); E psi4.driver.p4util.exceptions.TestComparisonError: 	SCF energy: computed value (-76.02663274)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:2766,message,message,2766,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['message'],['message']
Integrability,"/"", return_wfn=True); print(""converting energy ...""); kcal_energy = energy * psi4.constants.hartree2kcalmol; print(""energy {:.2f} kcal/mol"".format(kcal_energy)); ```; Specifically the output I get is ; ```; set output file path; create molecule...; calculate energy...; Segmentation fault: 11; ```; I tried to attach the .dat file, but github wouldn't let me, but this is end of it:; ```; ==> Algorithm <==. SCF Algorithm Type is DF.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is SAD.; Energy threshold = 1.00e-06; Density threshold = 1.00e-06; Integral threshold = 1.00e-12. ==> Primary Basis <==. Basis Set: MINIX; Blend: MINIX; Number of shells: 42; Number of basis functions: 64; Number of Cartesian functions: 64; Spherical Harmonics?: true; Max angular momentum: 1. => Loading Basis Set <=. Name: (MINIX AUX); Role: JKFIT; Keyword: DF_BASIS_SCF; atoms 1, 8 entry O line 318 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 2-5, 7, 9, 14-15 entry C line 198 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 6 entry N line 258 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; atoms 10-13, 16-20 entry H line 18 file /Users/cbannan/miniconda3/envs/baby_env/share/psi4/basis/def2-universal-jkfit.gbs; ```. If I use a conda environment I built a few weeks ago the script runs fine. This is the same as we are seeing on our cloud platform on AWS. Docker images built 2 weeks ago (on May 23) are running fine. But the ones we make this week (on May 31) are failing with seg faults. . Now, I realize you all have moved on to 1.6, but we are too late in our development cycle to upgrade a dependency and our last package was built around psi4 1.3 so that is the only other version we've validated. So unfortunately if I can't track this down ASAP we will have to downgrade (even though we've seen performance improvement with the new version)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2593:4290,depend,dependency,4290,https://psicode.org,https://github.com/psi4/psi4/issues/2593,1,['depend'],['dependency']
Integrability,"/test_psi4.py::test_psi4_scfproperty PASSED [100%]. ======================================================= FAILURES =======================================================; ______________________________________________________ test_dftd3 ______________________________________________________. molrec = {'elbl': ['', '', '', '', '', '', ...], 'elea': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [6, 6, 1, 1, 1, 1, ...], ...}; name_hint = 'b3lyp', level_hint = 'd2', param_tweaks = None, ptype = 'gradient', dashcoeff_supplement = None; verbose = 1. def run_dftd3_from_arrays(molrec,; name_hint=None,; level_hint=None,; param_tweaks=None,; ptype='energy',; dashcoeff_supplement=None,; verbose=1):; """"""Specialized signature disentangling dispersion level and; parameters for computing on `molecule` with engine `DFTD3`. See; `dashparam.from_array` for parameter details. """"""; jobrec = {}; jobrec['error'] = ''; jobrec['success'] = None; jobrec['return_output'] = True; prov = {}; prov['creator'] = 'QCDB'; prov['version'] = __version__; prov['routine'] = sys._getframe().f_code.co_name; jobrec['provenance'] = prov. # strip engine hint; if name_hint.startswith('d3-'):; name_hint = name_hint[3:]. opts = {}; opts['level_hint'] = level_hint; opts['params_tweaks'] = param_tweaks; opts['dashcoeff_supplement'] = dashcoeff_supplement. jobrec['molecule'] = molrec; jobrec['method'] = name_hint; _, jobrec['driver'] = parse_dertype(ptype, max_derivative=1); jobrec['options'] = opts; #jobrec['options'] = copy.deepcopy(options). try:; > dftd3_driver(jobrec). ../lib/python3.6/site-packages/psi4/driver/qcdb/intf_dftd3/runner.py:131:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. jobrec = {'driver': 'gradient', 'error': ""Dftd3Error('Unsuccessful run. Possibly -D variant not available in dftd3 version.',)""...a': [12, 12, 1, 1, 1, 1, ...], 'elem': ['C', 'C', 'H', 'H', 'H', 'H', ...], 'elez': [",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846:3591,rout,routine,3591,https://psicode.org,https://github.com/psi4/psi4/issues/1586#issuecomment-478031846,1,['rout'],['routine']
Integrability,"/www.pnas.org/doi/10.1073/pnas.2205221119#sec-3; in equation 13 & 14 of the `Materials and Methods` section of this PNAS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB`. for example, hydrogen has 2 basis functions in `GFN1-xTB`, so the shape of their 3-index integral matrix is `(60, 2, 2)`.; ```python; import torch; three_idx_integrals = torch.load(""orbnet2_overlap3idx.pt""); print(three_idx_integrals[""H""].shape); >> torch.Size([60, 2, 2]); ```. I think the best way to go about this would be to just re-implement the formulae for calculating these 3-index integrals, in python (since i'm most familiar with python), but to allow setting the `gamma` parameter so that I can create as many rows as I want for the 1st dimension. This should be easier than trying to change some inner part of `psi4` just to ha",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:2030,depend,depend,2030,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['depend'],['depend']
Integrability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6072,interface,interface,6072,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,2,['interface'],['interface']
Integrability,"0, ; ldC=0x7ffdc830b4b0) at gemm.c:433; #10 0x00007faaaf14029f in psi::C_DGEMM (transa=<optimized out>, transb=<optimized out>, m=<optimized out>, n=<optimized out>, k=<optimized out>, alpha=<optimized out>, a=<optimized out>, ; lda=<optimized out>, b=0x5589d9053d00, ldb=<optimized out>, beta=<optimized out>, c=0x7faa7c13b010, ldc=<optimized out>); at /home/work/psi4/psi4.susi/psi4/src/psi4/libqt/blas_intfc23.cc:327; #11 0x00007faaaedd82ae in psi::scfgrad::DFJKGrad::build_Amn_terms (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:461; #12 0x00007faaaeddcf40 in psi::scfgrad::DFJKGrad::compute_gradient (this=0x5589d8f4c660) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/jk_grad.cc:245; #13 0x00007faaaedc01e5 in psi::scfgrad::SCFDeriv::compute_gradient (this=this@entry=0x7ffdc830ba00) at /usr/include/c++/10/bits/shared_ptr_base.h:1324; #14 0x00007faaaed967ba in psi::scfgrad::scfgrad (ref_wfn=..., options=...) at /home/work/psi4/psi4.susi/psi4/src/psi4/scfgrad/wrapper.cc:46; #15 0x00007faaae1ebe2a in py_psi_scfgrad (ref_wfn=std::shared_ptr<class psi::Wavefunction> (use count 5, weak count 1) = {...}) at /usr/include/c++/10/ext/atomicity.h:100; #16 0x00007faaae20f796 in pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call_impl<std::shared_ptr<psi::Matrix>, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), 0ul, pybind11::detail::void_type>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>), std::integer_sequence<unsigned long, 0ul>, pybind11::detail::void_type&&) && (f=<optimized out>, f=<optimized out>, this=0x7ffdc830c010) at /usr/include/c++/10/ext/atomicity.h:100; #17 pybind11::detail::argument_loader<std::shared_ptr<psi::Wavefunction> >::call<std::shared_ptr<psi::Matrix>, pybind11::detail::void_type, std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)>(std::shared_ptr<psi::Matrix> (*&)(std::shared_ptr<psi::Wavefunction>)) && (f=<optimized out>, this",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2010:3348,wrap,wrapper,3348,https://psicode.org,https://github.com/psi4/psi4/issues/2010,1,['wrap'],['wrapper']
Integrability,"0.0000000; 24 0.0000000 0.0000000 -0.2145081 -0.0955885 -0.3962490 -0.1582019 -0.1748445 0.0000000 -0.2501782 0.0000000; 25 0.0000000 0.0000000 -0.3899088 -0.0161290 -0.0829898 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025. 21 22 23 24 25. 1 0.0534972 0.0695717 0.0000000 -0.0869670 -0.0673371; 2 0.2748140 0.3248252 0.0000000 -0.3181362 -0.2463274; 3 0.4954265 0.6469897 0.0000000 -0.3093155 -0.2394976; 4 0.0000000 0.0000000 0.1943450 0.0000000 0.0000000; 5 0.2220879 0.0839998 0.0000000 -0.1646270 -0.2779458; 6 0.1719588 0.0650396 0.0000000 -0.2779458 -0.0208636; 7 0.0000000 0.0000000 0.3902542 0.0000000 0.0000000; 8 0.4918677 0.3101080 0.0000000 0.0695736 -0.2482975; 9 0.3808447 0.2401112 0.0000000 -0.2482975 0.1980018; 10 0.2068227 0.3228525 0.0000000 -0.2355869 -0.1824109; 11 0.0000000 0.0000000 0.1445331 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.1119094 0.0000000 0.0000000; 13 0.3506915 0.3379822 0.0000000 -0.2145081 -0.3899088; 14 0.1113951 0.0117147 0.0000000 -0.0955885 -0.0161290; 15 0.2930740 0.3319229 0.0000000 -0.3962490 -0.0829898; 16 0.1198368 0.3062336 0.0000000 -0.1582019 -0.0000000; 17 0.3062336 0.6052920 0.0000000 -0.1748445 -0.0000000; 18 0.0000000 0.0000000 0.0502025 0.0000000 0.0000000; 19 0.1582019 0.1748445 0.0000000 -0.2501782 0.0000000; 20 -0.0000000 -0.0000000 0.0000000 0.0000000 0.0502025; 21 1.0000000 0.6848603 0.0000000 -0.0000000 -0.0000000; 22 0.6848603 1.0000000 0.0000000 -0.0000000 -0.0000000; 23 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 24 -0.0000000 -0.0000000 0.0000000 1.0000000 0.0000000; 25 -0.0000000 -0.0000000 0.0000000 0.0000000 1.0000000. For example, for the AO function 11 the self-overlap is computed as 0.3333333, but it should be 1. At first glance, I was thinking that there might be a problem in the normalization of contraction coefficients. But the strange thing is that when I repeat the same example with my dfocc module I get the correct normalization. Any help to understand the problem? @jturney @loriab",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:7398,contract,contraction,7398,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['contract'],['contraction']
Integrability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:3377,rout,routine,3377,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['rout'],['routine']
Integrability,"000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 00000",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:1788,Rout,Routine,1788,https://psicode.org,https://github.com/psi4/psi4/issues/3159,6,['Rout'],['Routine']
Integrability,"000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; invalid value encountered in scalar divide; invalid value encountered in divide; Optimizer: Optimization complete!; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:3058,Rout,Routine,3058,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"0000; Empirical Dispersion Energy = 0.0000000000000000; PCM Polarization Energy = 0.0000000000000000; EFP Energy = 0.0000000000000000; Total Energy = -787.8478277144128015. Alert: EFP and PCM quantities not currently incorporated into SCF psivars. Properties will be evaluated at 0.000000, 0.000000, 0.000000 Bohr. Properties computed using the SCF density matrix. Nuclear Dipole Moment: (a.u.); X: 0.0000 Y: -0.0000 Z: -0.0000. Electronic Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000. Dipole Moment: (a.u.); X: 0.0001 Y: -0.0001 Z: 0.0000 Total: 0.0002. Dipole Moment: (Debye); X: 0.0003 Y: -0.0002 Z: 0.0000 Total: 0.0004. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:40 2017; Module time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; Total time:; 	user time = 2.36 seconds = 0.04 minutes; 	system time = 0.04 seconds = 0.00 minutes; 	total time = 3 seconds = 0.05 minutes; MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of threads: 1; Number of atoms: 5; Number of AO shells: 37; Number of SO shells: 37; Number of primitives: 64; Number of atomic orbitals: 76; Number of basis functions: 73. Number of irreps: 1; Integral cutoff 0.00e+00; Number of functions per irrep: [ 73 ]. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. Computing two-electron integrals...done; Computed 3549448 non-zero two-electron integrals.; Stored in file 33. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:40 2017. *******************************************************; * *; * Frozen Natural Orbitals *; * *; *******************************************************. ==> Transform (OV|OV) integrals <==. 	Presorting SO-basis two-electron integrals.; 	Sorting File: SO Ints (nn|nn) nbuckets = 1; 	Transforming the one-electron integrals and constructing Fock matrices; 	Starting first half-transfo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:7871,Wrap,Wrapper,7871,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Wrap'],['Wrapper']
Integrability,"0007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1713D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C40C5A Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C0C27D Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6B8FD99 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C184A6 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C18FC9 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C19158 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C1919B Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3E410 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C3FA03 Unknown Unknown Unknown; libpython3.5m.so. 00007F6CF6C5ACE7 Unknown Unknown Unknown; python 0000000000400BBD Unknown Unknown Unknown; libc.so.6 00000034CEC1ED5D Unknown Unknown Unknown; python 0000000000400999 Unknown Unknown Unknown; ```; This is the error message. The node memory is 256 GB. I have run another system with a similar number of atoms at the same level of theory and it finished normally on this node. I have run this system at sSAPT0 level, which has also finished normally. Here is a copy of the input file; ```; memory 256 GB. molecule dimer {; 0 1; C	33.53728	36.41505	90.62589; C	33.90406	36.81886	89.19581; O	35.09473	36.87670	88.87973; H	32.47104	36.21876	90.76503; H	34.11454	35.52935	90.89115; H	33.84377	37.22581	91.29056; N	32.90475	37.13782	88.34874; C	33.15782	37.60052	86.97934; C	33.86886	38.96454	87.03422; O	34.80991	39.18532	86.28033; C	31.84528	37.71848	86.17268; C	32.03912	38.31152	84.79977; C	32.40330	37.64936	83.66144; C	31.91466	39.69401	84.43479; N	32.47754	38.52922	82.60241; C	32.22560	39.79734	83.05872; C	31.60991	40.86835	85.14938; C	32.23753	41.02592	82.38040; C	31.61276	42.08300	84.47411; C	31.93451	42.15430	83.10915; H	31.95003	36.90694	88.59560; H	33.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1828:3324,message,message,3324,https://psicode.org,https://github.com/psi4/psi4/issues/1828,1,['message'],['message']
Integrability,"0094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/python/p4util/util.py"", line 98, in compare_values; raise TestComparisonError(message); p4xcpt.TestComparisonError: SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; SAPT Elst: computed value (-0.0407606) does not match (-0.0407577) to 6 decimal places.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); <end of output>; Test time = 132.94 sec; ----------------------------------------------------------; Test Failed.; ""sapt4"" end time: Feb 15 13:15 CET; ""sapt4"" time elapsed: 00:02:12; ----------------------------------------------------------. ```. For `pywrap-opt-sowreap`:. ```; 255/305 Testing: pywrap-opt-sowreap; 255/305 Test: pywrap-opt-sowreap; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:2074,message,message,2074,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['message'],['message']
Integrability,"00; H 5.255832800000 -1.677434300000 1.995985100000; H 5.435230800000 -0.488422700000 0.699837500000; H 4.834740800000 -2.114113900000 0.338643400000; C 2.561315100000 -2.067960800000 1.878190500000; H 2.501285900000 -2.864212200000 1.130337600000; H 1.543963400000 -1.790105100000 2.156196500000; H 3.062895500000 -2.476510500000 2.763911500000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-PR07-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-PR07-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()). # This is a psi4 input file auto-generated from the database() wrapper. core.print_out('\n'); p4util.banner(' Database MOR41 Computation: Reagent MOR41-H2-reagent \n '); core.print_out('\n'). molecule dbmol {; units Angstrom; no_com; no_reorient; 0 1; H 0.798743700000 0.046507300000 0.075739400000; H 1.071087200000 0.408924800000 0.665066700000. }. core.set_memory_bytes(15000000000). core.set_global_option('BASIS', 'DEF2-TZVP'); core.set_global_option('BASIS_GUESS', 'DEF2-SVP'). core.set_global_option('WRITER_FILE_LABEL', 'MOR41-H2-reagent'). pickle_kw = (""""""(dp0; S'db_func'; p1; cpsi4.driver.driver; energy; p2; sS'db_name'; p3; S'MOR41'; p4; sS'db_mode'; p5; S'sow'; p6; sS'name'; p7; S'B3LYP'; p8; s.""""""). kwargs = pickle.loads(pickle_kw); electronic_energy = energy(**kwargs). core.print_variables(); core.print_out('\nDATABASE RESULT: computation 11258 for reagent MOR41-H2-reagent yields electronic energy %20.12f\n' % (electronic_energy)). core.set_variable('NATOM', dbmol.natom()); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1338:5692,wrap,wrapper,5692,https://psicode.org,https://github.com/psi4/psi4/issues/1338,1,['wrap'],['wrapper']
Integrability,"02) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (#2245); - Fix bug whereby MP2 cube files through OCC segfaulted (#2249); - Increase likelihood a misformatted basis set file will error instead of passing silently (#2254); - Fix normalization issue in Molden files (#2229); - Fix longstanding limitation where `phi_ao` function only returned correctly for Cartesian basis sets (#2210, #2262) . ## Known Bugs; - Find them and tell us",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:14616,depend,dependency,14616,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['depend'],['dependency']
Integrability,1 Test #371: dft-custom-dhdf .................. Passed 99.18 sec; Start 19: cbs-xtpl-wrapper; 78/411 Test #325: scf-bz2 .......................... Passed 123.80 sec; Start 81: cc9; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 Test #142: dfomp2-4 ......................... Passed 39.17 sec; Start 256: omp2p5-grad2; 90/411 Test #205: frac-traverse .................... Passed 218.91 sec; Start 317: sapt3; 91/411 Test #78: cc8a ............................. Passed 53.44 sec; Start 79: cc8b; 92/411 Test #279: opt14 ............................ Passed 79.82 sec; Start 67: cc4a; 93/411 Test #249: omp2-4 ........................... Passed 74.23 sec; Start 55: cc39; 94/411 Test #156: dfomp2p5-grad2 ................... Passed 77.67 sec; Start 68: cc50; 95/411 Test #278: opt13 ............................ Passed 729.83 sec; Start 319: sapt5; 96/411 Test #77: cc8 .............................. Passed 55.92 sec; Start 66: cc49; 97/411 Test #292: psimrcc-fd-freq2 ................. Passed 86.60 sec; Start 64: cc47; 98/411 Test #67: cc4a ............................. Passed 47.72 sec; Start 263: omp3-grad2; 99/411 Test #79: cc8b ......,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:8463,wrap,wrapper,8463,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['wrap'],['wrapper']
Integrability,"1) Cool. 2) I discussed this with @lothian, who seemed fine with it (it involves no; changes to his code :) So, I think we're settled unless anyone else has; objections. I agree there needs to be some thought about returning SO vs MO densities; --- different quantities will be needed in different circumstances. Your; proposed solution seems reasonable. Probably we should review all the; cases where densities are wanted. On Sat, Nov 12, 2016 at 10:34 AM, Daniel Smith notifications@github.com; wrote:. > @CDSherrill https://github.com/CDSherrill; > 1) It should always be in the SO basis. Apologies this was answered; > elsewhere.; > ; > 2) If we are set on this on I can patch up the CI code and add patch; > notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state; > averaged density depending on user specifications.; > ; > We also need to think about the psi4/driver/driver.py:molden function and; > #504 https://github.com/psi4/psi4/issues/504. properties is now; > guaranteed to return an updated SO basis density; however, the current; > molden function requires a MO density. We could have a simple switch on; > that function that indices if the incoming density is in the AO or MO basis; > and transform accordingly.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/506#issuecomment-260128691, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AC9QdnGO262FwLyE6w4D5rdgQvLpsDC3ks5q9dxpgaJpZM4Krp5j; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260131914:808,depend,depending,808,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260131914,1,['depend'],['depending']
Integrability,"1. Done.; 2. Good point, it could be called from other places.; 3. N/A anymore; 4. Sentence removed. I have taken the inspiration from the MRCC interface, which prints a warning like this. https://github.com/psi4/psi4/blob/4f7de4dca376b9c4afd2105898a98e06efcd7309/psi4/src/psi4/mrcc/mrcc.cc#L738",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023:144,interface,interface,144,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068217023,1,['interface'],['interface']
Integrability,"1.257282; 2 R(2,3) = 1.320898 -0.000254 0.000757 1.321654; 3 R(3,4) = 1.225642 -0.003646 0.000429 1.226071; 4 R(4,5) = 1.320898 -0.000254 0.000695 1.321593; 5 R(5,6) = 1.257186 -0.000456 0.000044 1.257229; 6 B(1,2,3) = 178.583593 0.000071 0.528506 179.112099; 7 L(1,2,3) = 180.000000 0.000000 0.000000 180.000000; 8 B(2,3,4) = 179.931146 0.000000 -0.988620 178.942526; 9 B(3,4,5) = 179.931146 0.000000 -0.989069 178.942077; 10 B(4,5,6) = 178.583593 0.000071 0.528859 179.112452; 11 L(4,5,6) = 180.000000 0.000000 0.000000 180.000000; 12 L(2,3,4) = 180.000000 0.000000 0.000000 180.000000; 13 L(3,4,5) = 180.000000 0.000000 0.000000 180.000000; 14 D(2,3,4,5) = 0.000000 0.000000 -0.010006 -0.010006; ---------------------------------------------------------------------------; ERROR: Symmetry operation 1 did not map atom 1 to another atom:; Molecule:; Molecular point group: c2v; Full point group: C2v. Geometry (in Angstrom), charge = 0, multiplicity = 1:. Center X Y Z Mass; ------------ ----------------- ----------------- ----------------- -----------------; B 3.191343577854 0.013957984675 -0.026816152712 11.009305406000; N 1.934432141701 -0.005408166154 -0.003207218616 14.003074004780; C 0.613034927883 -0.005322945846 0.022855273246 12.000000000000; C -0.613034934808 -0.005324425017 0.024405755139 12.000000000000; N -1.934432149876 -0.005408605424 0.001676100671 14.003074004780; B -3.191343562754 0.013958534879 -0.018913757728 11.009305406000. attempted to find atom at; -6.030765 0.026377 0.050675; atom_map() throwing PsiException; Could not symmetrize geometry in OPT::MOLECULE::SYMMETRIZE_GEOM(). **** Optimization has failed! (in 4 steps) ****; --------------------------; OPTKING Finished Execution; --------------------------; Cleaning optimization helper files. *** PSI4 exiting successfully. Buy a developer a beer!; ```. not sure what is wrong in my ""starter"" geometry. Also the final message (""exiting successfully"") after (""Optimization has failed"") is a bit disappointing :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-149031508:2205,message,message,2205,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-149031508,1,['message'],['message']
Integrability,15/401 Test #94: cisd-h2o+-2 ...................... Passed 2.81 sec; Start 97: cisd-sp; 216/401 Test #88: cepa3 ............................ Passed 11.93 sec; Start 98: cisd-sp-2; 217/401 Test #98: cisd-sp-2 ........................ Passed 2.77 sec; Start 102: dcft-grad1; 218/401 Test #89: cepa1 ............................ Passed 13.19 sec; Start 104: dcft-grad3; 219/401 Test #97: cisd-sp .......................... Passed 5.81 sec; Start 105: dcft-grad4; 220/401 Test #1: adc1 ............................. Passed 23.47 sec; Start 107: dcft2; 221/401 Test #2: adc2 ............................. Passed 29.39 sec; Start 109: dcft4; 222/401 Test #107: dcft2 ............................ Passed 11.23 sec; Start 110: dcft5; 223/401 Test #104: dcft-grad3 ....................... Passed 15.91 sec; Start 111: dcft6; 224/401 Test #12: cbs-parser ....................... Passed 41.34 sec; Start 113: dcft8; 225/401 Test #105: dcft-grad4 ....................... Passed 24.23 sec; Start 114: dcft9; 226/401 Test #19: cbs-xtpl-wrapper ................. Passed 52.98 sec; Start 129: dfmp2-2; 227/401 Test #129: dfmp2-2 .......................... Passed 2.49 sec; Start 130: dfmp2-3; 228/401 Test #130: dfmp2-3 .......................... Passed 16.36 sec; Start 131: dfmp2-4; 229/401 Test #90: cepa-module ...................... Passed 64.78 sec; Start 134: dfmp2-grad2; 230/401 Test #17: cbs-xtpl-opt ..................... Passed 72.86 sec; Start 135: dfmp2-grad3; 231/401 Test #135: dfmp2-grad3 ...................... Passed 5.13 sec; Start 136: dfmp2-grad4; 232/401 Test #96: cisd-opt-fd ...................... Passed 63.83 sec; Start 137: dfmp2-grad5; 233/401 Test #131: dfmp2-4 .......................... Passed 8.63 sec; Start 139: dfomp2-2; 234/401 Test #134: dfmp2-grad2 ...................... Passed 8.35 sec; Start 140: dfomp2-3; 235/401 Test #136: dfmp2-grad4 ...................... Passed 5.23 sec; Start 141: dfomp2-4; 236/401 Test #140: dfomp2-3 ......................... Passed 3.31 sec; Star,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:21134,wrap,wrapper,21134,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['wrap'],['wrapper']
Integrability,"19 (#2128) ; - Address linker warning for OSX (#2129) ; - Add DF bases for szvp (#2134) ; - Disable Libint2 screening (#2139) ; - CPPE tests to pytest (#2140) ; - GHA-related fixes (#2144, #2158, #2146, #2167, #2172, #2179) ; - Restore debug symbols (#2159) ; - DCT Cleanup (#2152, #2168, #2171, #2182, #2185) ; - Cleanup of some optking functions (#2170) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; - Add O24 database (#2252, #2154); - Move Molden writer to Python (#2229); - Make restarting SCF and saving orbitals easier (#2190). ## Bug Fixes; - Allow user derivative type to pass properly to some multi-step gradient and hessian procedures (#1551); - Fix `fort.56` printing for MRCC interface (#1606); - Several issues (transformations, AM map) fixed in exported NBO files (#1602); - Fix IRC not displacing initial geometry correctly so hard to follow shallow modes (#1663); - Fix segfault when basis sets have absent AM blocks (#1695); - Add missing MP3 psivars to occ and dfocc (#1707); - Can now have a `df_basis_sad <name> {...}` input block (#1715); - Re-allow DCT guess after breaking 1.3 (#1717); - Fix DFTD3 and MP2D not localizing their files within the Psi4 scratch space (#1725); - Fix bug where you could request out-of-bounds atom in Molecule (#1714); - Now looks for auxiliary basis sets in submission directory, not just orbital basis sets (#1714); - Added some unit weights to def2-*zvp* basis sets to appease the basis set parser (#1743); - In `-o stdout` mode, `core.be_quiet()` followed by `core.reopen_outfile()` no longer petulantly deprives you of output (#1735); - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:10618,interface,interface,10618,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,"2 for a singlet with CUKS? While one *can* run CUKS on a singlet, this seems like a really odd thing to do... What seems to be happening is that the guess orbitals are core Hamiltonian, and they are high-spin open-shell. This being the case, the CUHF runs and happily leaves the computation high-spin open-shell. Then obviously the triplet state obtained has a different energy than the singlet state energy that is being compared. I am not sure why we are getting a high-spin open-shell guess, since the computation knows it's a singlet. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE. ... Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]. @CUHF iter 1: -129.99407460698782 -1.29994e+02 3.58550e-01; @CUHF iter 2: -138.94369344094056 -8.94962e+00 1.91667e-01 DIIS; @CUHF iter 3: -149.19229734982372 -1.02486e+01 5.23276e-02 DIIS; @CUHF iter 4: -149.61401801756168 -4.21721e-01 8.25602e-03 DIIS; @CUHF iter 5: -149.62784456434520 -1.38265e-02 7.20728e-04 DIIS; @CUHF iter 6: -149.62803800931584 -1.93445e-04 1.87787e-04 DIIS; @CUHF iter 7: -149.62804359068420 -5.58137e-06 2.42248e-05 DIIS; @CUHF iter 8: -149.62804290255499 6.88129e-07 3.86408e-06 DIIS; @CUHF iter 9: -149.62804316316681 -2.60612e-07 2.79748e-07 DIIS. ==> Post-Iterations <==. @Spin Contamination Metric: 1.00000; @S^2 Expected: 0.00000; @S^2 Observed: 1.00000. In the reference [correct] output, the Occupation by irrep is closed shell. Perhaps there is a bug in the Core Hamiltonian guess routine not respecting the multiplicity, and/or experiencing some small numerical instability. This problem seems intermittent for me, I thought I ran essentially the same code yesterday without this case failing. Attempting to attach test output. David. [output.txt](https://github.com/psi4/psi4/files/1066053/output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738:2247,rout,routine,2247,https://psicode.org,https://github.com/psi4/psi4/issues/738,1,['rout'],['routine']
Integrability,"2) ~`libint2-2.6.0-h879752b_4.tar.bz2`~, [win-64/libint2-2.6.0-h2e52968_5.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_5.tar.bz2) ~`libint2-2.6.0-h2e52968_3.tar.bz2`~; [^6]: Step A conda packages: [linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_16.tar.bz2), [osx-64/libint2-2.7.1-h879752b_8.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/osx-64/libint2-2.7.1-h879752b_8.tar.bz2); [^7]: Step B conda packages: [linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2](https://anaconda.org/psi4/libint2/2.7.1/download/linux-64/libint2-2.7.1-h2fe1556_15.tar.bz2), [osx-64/libint2-2.6.0-h879752b_7.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/osx-64/libint2-2.6.0-h879752b_7.tar.bz2), [win-64/libint2-2.6.0-h2e52968_4.tar.bz2](https://anaconda.org/psi4/libint2/2.6.0/download/win-64/libint2-2.6.0-h2e52968_4.tar.bz2); [^8]: Packages can be found off `psi4/label/dev` or `psi4/label/testing` subchannels, depending on stage of master. The build number (e.g., `_13`) remains steady even if the subchannel changes. If you're in an environment that already has a L2, `conda remove libint2 --force`, then `conda install libint2=*=<h2fe1556_13> -c psi4/label/<dev|testing>` (substitute `<placeholders>`); <!--[^9]: Packages can be found off `psi4/label/testing` subchannel: [linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_0.tar.bz2), [osx-64/libint2-2.7.2-h1800126_0.conda](https://anaconda.org/psi4/libint2/2.7.2/download/osx-64/libint2-2.7.2-h1800126_0.conda)-->; [^9]: Step A' conda packages: AM7 from `psi4/label/testing::libint2`: [linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2](https://anaconda.org/psi4/libint2/2.7.2/download/linux-64/libint2-2.7.2-h2fe1556_1.tar.bz2) or AM5 from `conda-forge/label/libint_dev::libint`: [linux-64/libint-2.7.3dev1-h95a0634_0.conda](https://anaconda.org/conda-forge/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:4051,depend,depending,4051,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['depend'],['depending']
Integrability,"2.48505 -0.9528; H -3.38296 -3.42013 -1.49634; C -3.83016 -1.30519 -1.76284; H -4.84213 -1.57034 -2.07564; O -3.08657 -1.08539 -2.95725; H -2.16485 -0.88813 -2.71436; C -3.89865 -0.04023 -0.90552; H -2.87924 0.29308 -0.69629; O -4.61098 1.01217 -1.56224; H -4.00729 1.44319 -2.17836; C -4.59468 -0.30612 0.4222; H -5.64733 -0.55648 0.23973; O -4.51034 0.8485 1.2693; H -4.69798 1.62621 0.72518; C -4.47115 -1.85465 2.46592; H -5.33699 -2.50924 2.30958; O -3.50744 -2.49324 3.3135; H -2.76983 -2.83605 2.77919; H -4.81526 -0.95879 2.98516; O 2.01537 -1.70774 -1.89652; H 1.17126 -1.21952 -1.9851; units angstrom. }; set {; basis jun-cc-pVDZ; scf_type DF; freeze_core True; }. energy('sapt0'); energy('sapt0-ct'); ```. User reported error message:; ```; Traceback (most recent call last):; File “/home/think/psi4conda/bin/psi4”, line 248, in; exec(content); File “”, line 147, in; File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/driver.py”, line 460, in energy; wfn = procedures[‘energy’][lowername](lowername, molecule=molecule, **kwargs); File “/home/think/psi4conda/lib//python3.6/site-packages/psi4/driver/procrouting/proc.py”, line 3278, in run_sapt; e_sapt = core.sapt(dimer_wfn, monomerA_wfn, monomerB_wfn). RuntimeError:; Fatal Error: PSIO Error; Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1495014881710/work/psi4/src/psi4/libpsio/error.cc on line: 129; The most recent 5 function calls were:. psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits, std::allocator >, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); psi::sapt::SAPT::zero_disk(int, char const*, int, int); psi::sapt::SAPT0::df_integrals(); ```. @loriab reported being able to reproduce this, but was interrupted working on the bug and never got around to it. This may just be a case of the disk filling up, in which case, all we can do is write a better error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1328:4885,message,message,4885,https://psicode.org,https://github.com/psi4/psi4/issues/1328,1,['message'],['message']
Integrability,2.5) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5.so.10:; 		libdl.so.2 (GLIBC_2.2.5) => /lib64/libdl.so.2; 		libm.so.6 (GLIBC_2.2.5) => /lib64/libm.so.6; 		libpthread.so.0 (GLIBC_2.3.2) => /lib64/libpthread.so.0; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.3) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.8) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; 	/scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../.././libhdf5_hl.so.10:; 		libpthread.so.0 (GLIBC_2.2.5) => /lib64/libpthread.so.0; 		libc.so.6 (GLIBC_2.4) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.2.5) => /lib64/libc.so.6; 		libc.so.6 (GLIBC_2.3.4) => /lib64/libc.so.6; + conda-inspect linkages --show-files --groupby=dependency chemps2 dkh libefp erd gdma libint pcmsolver simint libxc psi4; file:///scratch/psilocaluser/conda-builds::chemps2-1.8.4-0; ----------------------------------------------------------. chemps2:; libchemps2.so.2 (lib/libchemps2.so.2) from bin/chemps2. psi4:; libchemps2.so.2 (lib/libchemps2.so.2) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::dkh-1.2-1; ----------------------------------------------------. psi4:; libdkh.so (lib/libdkh.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::erd-3.0.6-1; ------------------------------------------------------. psi4:; liberd.so (lib/liberd.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::gdma-2.2.6-3; -------------------------------------------------------. psi4:; libgdma.so (lib/libgdma.so) from lib/python3.6/site-packages/psi4/core.so. file:///scratch/psilocaluser/conda-builds::libefp-1.5b1-0; ---------------------------------------------------,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:12805,depend,dependency,12805,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,"25 -5.38996e-02 3.40988e-04 DIIS; > @DF-RHF iter 10: -535.97324997051101 -4.51252e-03 1.04954e-04 DIIS; > @DF-RHF iter 11: -535.97364951295322 -3.99542e-04 1.98119e-05 DIIS; > @DF-RHF iter 12: -535.97366972710233 -2.02141e-05 5.56774e-06 DIIS; > @DF-RHF iter 13: -535.97367232462670 -2.59752e-06 2.92530e-06 DIIS; > @DF-RHF iter 14: -535.97367292863373 -6.04007e-07 1.33844e-06 DIIS; > @DF-RHF iter 15: -535.97367316705004 -2.38416e-07 5.52742e-07 DIIS; > @DF-RHF iter 16: -535.97367321567344 -4.86234e-08 2.27016e-07 DIIS; > @DF-RHF iter 17: -535.97367322279683 -7.12339e-09 4.03379e-08 DIIS; > @DF-RHF iter 18: -535.97367322291711 -1.20281e-10 1.51493e-08 DIIS; > @DF-RHF iter 19: -535.97367322293508 -1.79625e-11 3.82698e-09 DIIS; > @DF-RHF iter 20: -535.97367322293599 -9.09495e-13 1.05449e-09 DIIS; > @DF-RHF iter 21: -535.97367322293462 1.36424e-12 2.43431e-10 DIIS; > @DF-RHF iter 22: -535.97367322293553 -9.09495e-13 9.68772e-11 DIIS; > ; > DF guess converged.; > ; > ==> Integral Setup <==; > ; > MINTS: Wrapper to libmints.; > by Justin Turney; > ; > Calculation information:; > Number of atoms: 24; > Number of AO shells: 114; > Number of SO shells: 114; > Number of primitives: 358; > Number of atomic orbitals: 260; > Number of basis functions: 246; > ; > Number of irreps: 1; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 246 ]; > ; > Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 238922952 non-zero two-electron integrals.; > Stored in file 33.; > ; > ==> DiskJK: Disk-Based J/K Matrices <==; > ; > J tasked: Yes; > K tasked: Yes; > wK tasked: No; > Memory (MB): 3576; > Schwarz Cutoff: 1E-12; > ; > @RHF https://github.com/RHF iter 23: -535.97469002803746 -1.01681e-03; > 4.55914e-06 DIIS; > @RHF https://github.com/RHF iter 24: -535.97469062826895 -6.00231e-07; > 9.20453e-07 DIIS; > @RHF https://github.com/RHF iter 25: -535.97469065540940 -2.71405e-08; > 3.52409e-07 D",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61#issuecomment-58650322:9465,Wrap,Wrapper,9465,https://psicode.org,https://github.com/psi4/psi4/issues/61#issuecomment-58650322,1,['Wrap'],['Wrapper']
Integrability,"2594 is not an option for adding to the test suite, as the test takes too long tor un. 2476 _may_ be. Per @loriab, that depends on increasing the AM in the auto-build, which depends on some L2 development from Valeev.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2674#issuecomment-1213448481:120,depend,depends,120,https://psicode.org,https://github.com/psi4/psi4/issues/2674#issuecomment-1213448481,2,['depend'],['depends']
Integrability,"28 sec; Start 163: dft-b3lyp; 9/24 Test #163: dft-b3lyp ........................ Passed 164.98 sec; Start 164: dft1; 10/24 Test #164: dft1 ............................. Passed 414.86 sec; Start 165: dft-vv10; 11/24 Test #165: dft-vv10 ......................... Passed 80.01 sec; Start 166: dft1-alt; 12/24 Test #166: dft1-alt ......................... Passed 191.52 sec; Start 167: dft2; 13/24 Test #167: dft2 ............................. Passed 22.00 sec; Start 168: dft3; 14/24 Test #168: dft3 .............................***Failed 20.54 sec; 	Closed-shell wB97 Energy (PK).....................................PASSED; 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Traceback (most recent call last):; File ""C:/Users/User/psi4.git/win_install/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 42, in <module>; File ""C:\Users\User\psi4.git\win_install\lib\psi4\driver\p4util\util.py"", line 227, in compare_values; raise TestComparisonError(message). TestComparisonError: 	Closed-shell wB97 Energy (OUT_OF_CORE): computed value (11.255459) does not match (-75.318545) to 5 digits.; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ). Start 169: dft-omega; 15/24 Test #169: dft-omega ........................ Passed 70.41 sec; Start 338: soscf-dft; 16/24 Test #338: soscf-dft ........................ Passed 88.82 sec; Start 345: dft-custom; 17/24 Test #345: dft-custom ....................... Passed 66.89 sec; Start 346: dft-reference; 18/24 Test #346: dft-reference .................... Passed 16.23 sec; Start 361: dft-smoke; 19/24 Test #361: dft-smoke ........................ Passed 64.78 sec; Start 364: dft-jk; 20/24 Test #364: dft-jk ........................... Passed 32.41 sec; Start 366: dft-custom-dhdf; 21/24 Test #366: dft-custom-dhdf ..................***Failed 193.71 sec; 	Ne: B2PLYP_DFT....................................................PASSED; 	Ne: B2PLYP_PT2..........",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-404224014:1898,message,message,1898,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-404224014,1,['message'],['message']
Integrability,"282482; }; mol.update_geometry(); mol.symmetrize(0.001). set reference rks; set scf_type df; set basis def2-SV(P); set DYNAMIC_LEVEL 1. E = optimize('pbe'). ```. final output:; ```; 			-----------------------------------------; 			 OPTKING 2.0: for geometry optimizations ; 			 - R.A. King, Bethel University ; 			-----------------------------------------; At level 1: Red. Int., RFO, no backsteps, dynamic trust; 	At level 1: Red. Int., RFO, no backsteps, dynamic trust. 	Internal coordinates to be generated automatically.; 	Detected frag 1 with atoms: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20; 	---Fragment 1 Bond Connectivity---; 	 1 : 2 3; 	 2 : 1 3 5; 	 3 : 1 2; 	 4 : 5 6 9; 	 5 : 2 4 8; 	 6 : 4 10 11; 	 7 : 8 10 14; 	 8 : 5 7 15; 	 9 : 4 12 16; 	 10 : 6 7 17; 	 11 : 6 13 18; 	 12 : 9 13 19; 	 13 : 11 12 20; 	 14 : 7; 	 15 : 8; 	 16 : 9; 	 17 : 10; 	 18 : 11; 	 19 : 12; 	 20 : 13. BEND::BEND() Atoms defining bend are not unique.; forrtl: severe (174): SIGSEGV, segmentation fault occurred; Image PC Routine Line Source ; libgdma.so 00007F7B32CCF0DC for__signal_handl Unknown Unknown; libpthread-2.27.s 00007F7B36A4A890 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34813B00 Unknown Unknown Unknown; core.cpython-37m- 00007F7B34811B65 Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D0BACD Unknown Unknown Unknown; core.cpython-37m- 00007F7B33D2109A Unknown Unknown Unknown; core.cpython-37m- 00007F7B3383BB3F Unknown Unknown Unknown; python3.7 000055AADA9716E4 _PyMethodDef_RawF Unknown Unknown; python3.7 000055AADA971801 _PyCFunction_Fast Unknown Unknown; python3.7 000055AADA9CD2BC _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA970A27 _PyFunction_FastC Unknown Unknown; python3.7 000055AADA9C8846 _PyEval_EvalFrame Unknown Unknown; python3.7 000055AADA90E4F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055AADA90F3C4 PyEval_EvalCodeEx Unknown Unknown; python3.7 000055AADA90F3EC PyEval_EvalC",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1703:2103,Rout,Routine,2103,https://psicode.org,https://github.com/psi4/psi4/issues/1703,1,['Rout'],['Routine']
Integrability,2: omp2-5 ........................... Passed 67.36 sec; Start 282: opt-irc-1; 71/413 Test #151: dfomp3-grad2 ..................... Passed 66.98 sec; Start 17: cbs-xtpl-opt; 72/413 Test #47: cc30 ............................. Passed 68.93 sec; Start 265: omp3-grad2; 73/413 Test #244: ocepa-grad2 ...................... Passed 64.99 sec; Start 281: opt14; 74/413 Test #58: cc40 ............................. Passed 77.29 sec; Start 20: cbs-xtpl-wrapper; 75/413 Test #19: cbs-xtpl-nbody ................... Passed 78.00 sec; Start 194: fd-freq-energy; 76/413 Test #327: scf-bz2 .......................... Passed 122.73 sec; Start 60: cc42; 77/413 Test #373: dft-custom-dhdf .................. Passed 91.90 sec; Start 246: ocepa2; 78/413 Test #282: opt-irc-1 ........................ Passed 84.38 sec; Start 319: sapt3; 79/413 Test #265: omp3-grad2 ....................... Passed 64.41 sec; Start 21: cc1; 80/413 Test #60: cc42 ............................. Passed 60.49 sec; Start 158: dfomp2p5-grad2; 81/413 Test #20: cbs-xtpl-wrapper ................. Passed 71.25 sec; Start 301: pywrap-alias; 82/413 Test #17: cbs-xtpl-opt ..................... Passed 84.79 sec; Start 294: psimrcc-fd-freq2; 83/413 Test #194: fd-freq-energy ................... Passed 71.76 sec; Start 321: sapt5; 84/413 Test #281: opt14 ............................ Passed 84.37 sec; Start 12: cbs-parser; 85/413 Test #246: ocepa2 ........................... Passed 62.00 sec; Start 64: cc46; 86/413 Test #207: frac-traverse .................... Passed 228.24 sec; Start 258: omp2p5-grad2; 87/413 Test #301: pywrap-alias ..................... Passed 54.99 sec; Start 74: cc55; 88/413 Test #319: sapt3 ............................ Passed 78.46 sec; Start 142: dfomp2-2; 89/413 Test #21: cc1 .............................. Passed 73.87 sec; Start 149: dfomp3-2; 90/413 Test #64: cc46 ............................. Passed 60.35 sec; Start 206: frac-ip-fitting; 91/413 Test #294: psimrcc-fd-freq2 ................. Passed 79.90 sec; S,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085:7867,wrap,wrapper,7867,https://psicode.org,https://github.com/psi4/psi4/pull/1246#issuecomment-425384085,1,['wrap'],['wrapper']
Integrability,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,adapter,adapters,1283,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapter'],['adapters']
Integrability,"332; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set:; Number of shells: 30; Number of basis function: 104; Number of Cartesian functions: 131; Spherical Harmonics?: true; Max angular momentum: 4. Minimum eigenvalue in the overlap matrix is 2.5053959051E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -23.49398571874617 -2.34940e+01 7.47577e-02; @DF-RHF iter 2: -24.22630554723446 -7.32320e-01 7.13952e-03 DIIS; @DF-RHF iter 3: -24.23662538410707 -1.03198e-02 7.21912e-04 DIIS; @DF-RHF iter 4: -24.23681435257776 -1.88968e-04 6.97945e-05 DIIS; @DF-RHF iter 5: -24.23681649173431 -2.13916e-06 2.93127e-06 DIIS; @DF-RHF iter 6: -24.23681649645996 -4.72565e-09 1.53123e-07 DIIS; @DF-RHF iter 7: -24.23681649646912 -9.16245e-12 1.38238e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 68847 non-zero two-electron integrals.; Stored in file 33. Batch 1 pq = [ 0, 195] index = [ 0,19110]; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 34332; Schwarz Cutoff: 1E-12; ```. @RHF iter 8: -24.23681570008684 7.96382e-07 6.89584e-08 DIIS; @RHF iter 9: -24.23681570008748 -6.39488e-13 7.72849e-09 DIIS. ==> Post-Iterations <==. ```; Orbital Energies (a.u.); -----------------------. Doubly Occupied:. 1Ag -8.185320 2Ag -0.873753. Virtual:. 1B3u -0.275716 1B1u",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:5259,Wrap,Wrapper,5259,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['Wrap'],['Wrapper']
Integrability,"36; Author: dgasmith <malorian@me.com>; Date: Tue Jan 12 16:02:12 2016 -0500. ROHF Gradient: DIIS error_vectors really should be orthonormal, fixes #120; ```. and get. ```; /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.45:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxsph_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:30.55:. subroutine generatecavity_cpp(maxts_, maxsph_, maxvert_, &; 1; Warning: Unused dummy argument 'maxvert_' at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.50:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxcoor' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_mxcent.h:37.34:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:48:. integer(kind=regint_k) MXNEW, MXCENT, MXCOOR; 1; Warning: Unused parameter 'mxnew' declared at (1); /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pcm_pcmdef.h:25.39:; Included at /Users/francesco/Source/psi4/interfaces/pcmsolver/src/pedra/pedra_cavity_interface.F90:47:. INTEGER MXTS, MXSP, MXTSPT, MXVER; 1; Warning: Unused parameter 'mxver' declared at (1); [ 94%] Built target pcm-base; Scanning dependencies of target pcm-shared; [ 97%] Linking CXX shared library ../lib/libpcm.dylib; Undefined symbols for architecture x86_64:; ""_host_writer"", referenced from:; pcm::Meddle::printer(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; pcm::Meddle::printer(std::__1::basic_ostringstream<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const in Meddle.cpp.o; ld: symbol(s) not found for architecture x86_64; clang: error: linker command",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171081034:1064,interface,interfaces,1064,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171081034,1,['interface'],['interfaces']
Integrability,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2319,depend,dependencies,2319,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,1,['depend'],['dependencies']
Integrability,"4.geometry(; '''; H 0.0021 -0.0041 0.0020 ; H 0.8669 1.3681 0.0011; O -0.0110 0.9628 0.0073; symmetry C1; '''; ); basis = psi4.core.BasisSet.build(my_geometry, target='6-31g*'); mints = psi4.core.MintsHelper(basis); print(mints.ao_3coverlap().to_array().shape); >> (19, 19, 19); ```; and I found that it has the shape `(num_basis_fn, num_basis_fn, num_basis_fn)` where `num_basis_fn` is the total no. of basis functions for all atom in this molecule the current basis set. . However, for the ML model features, I need to ""expand"" this matrix to have more rows in the 1st dimension. ; specifically, I am following the OrbNet-Equi paper: https://www.pnas.org/doi/10.1073/pnas.2205221119#sec-3; in equation 13 & 14 of the `Materials and Methods` section of this PNAS paper, they have written formulae for their version of the 3-index integrals.; ![image](https://user-images.githubusercontent.com/25001874/223633100-63624cd1-d992-4dbe-84c5-73cdeece4536.png). The exact no. of rows is arbitrary, in the sense it depends on the modeller. In the case of the OrbNet-Equi paper, I checked their uploaded feature file, and it has 60 rows. i.e. the shape for **each atom** comes up to: `(60, num_basis_fn, num_basis_fn)`. ; this agrees with their explanation just below eqn 14, where their choice of `n` (and hence `gamma`) leads to a total of `16 x 1 + 8 x 3 + 4 x 5 = 60` unique functions for their ""auxiliary Gaussian-type basis functions"" in eqn 14. an important detail, is that I just want the matrix for a **single atom for each element**, which is why `num_basis_fn` is just counting all the basis functionsfor 1 atom. and they shouldn't depend on the context of the atom (i.e. what molecule it is part of). . to be extra clear, i've uploaded their published 3-index overlap integral pytorch tensor here: https://drive.google.com/file/d/1aF2QvfL4GTu17W35Rzv7yLo2gI_05Wx5/view?usp=share_link ; it is a dictionary indexed by the element symbols. their basis set is the semi-empirical tight-binding`GFN1-xTB",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892:1403,depend,depends,1403,https://psicode.org,https://github.com/psi4/psi4/issues/2892,1,['depend'],['depends']
Integrability,"4/libint/2.8.0dev2/download/osx-64/libint-2.8.0dev2-h93d8f39_0.conda), [win-64/libint-2.8.0dev2-h63175ca_0.conda](https://anaconda.org/psi4/libint/2.8.0dev2/download/win-64/libint-2.8.0dev2-h63175ca_0.conda). Links on Libint2 issues here since it's worth having an issue open on this for packagers to consult. * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; * step 2 — 20 Nov 2020 — #1721; * step 3 — 11 Mar 2022 — #2388; * post 3 — 16 Mar 2022 — #2474, #2482, #2484; * step C — 21 March 2022 — #2489; * step C — 21 March 2022 — #2483; * step B — 23 March 2022 — #2413; * post B — 23 March 2022 — #2494 ; * step C — 25 March 2022 — #2386; * step C — 25 March 2022 — #2496; * step C — 30 March 2022 — #2504; * step C — 31 March 2022 — #2517; * step C — 31 March 2022 — #2414; * step C — #2503; * step C — #2502; * step A — 8 May 2023 — #2537; * step A' — 8 May 2023 — #2861; * step C — #2473 (depends on https://github.com/evaleev/libint/pull/242); * step B — WIP sidestepping; * step B — WIP — https://github.com/evaleev/libint/pull/259; * step B — WIP — https://github.com/evaleev/libint/pull/233; * step B — WIP — https://github.com/evaleev/libint/pull/205; * step B' — WIP runtime changes from step B, no buildtime changes; * step B' — WIP — https://github.com/evaleev/libint/pull/271; * step B' — WIP — #3047 ; * step B' — WIP — https://github.com/conda-forge/libint-feedstock/pull/22; * coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. #### Added; * 15 Feb: `_15` pkg for step B; * 18 Feb: `_4` pkg for step ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:7110,depend,depends,7110,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['depend'],['depends']
Integrability,"425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; forrtl: No such file or directory; forrtl: severe (29): file not found, unit 75, file /home/work/scratch/mrcc_168425/KEYWD; Image PC Routine Line Source ; dmrcc 000000000131B3EC Unknown Unknown Unknown; dmrcc 00000000004DA346 Unknown Unknown Unknown; dmrcc 00000000005432D5 Unknown Unknown Unknown; dmrcc 0000000000543C32 Unknown Unknown Unknown; dmrcc 000000000054274C Unknown Unknown Unknown; dmrcc 000000000040D9CF Unknown Unknown Unknown; dmrcc 0000000000402F57 Unknown Unknown Unknown; dmrcc 0000000000401B3D Unknown Unknown Unknown; dmrcc 00000000013AAE59 Unknown Unknown Unknown; dmrcc 0000000000401A2A Unknown Unknown Unknown; ^CTraceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 22, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159:7619,Rout,Routine,7619,https://psicode.org,https://github.com/psi4/psi4/issues/3159,1,['Rout'],['Routine']
Integrability,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:3660,interface,interface,3660,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['interface'],['interface']
Integrability,"4835E+01 1.16393171667026E+01; }. set {; freeze_core true; scf_type df; mp_type df; basis aug-cc-pvtz; DF_BASIS_MP2 cc-pVQZ-RI; }. energy('mp2.5'); ```. Failure:. ```; ==============================================================================; ==============================================================================; ==============================================================================. DF-MP2.5; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ==============================================================================; ==============================================================================; ==============================================================================. MO spaces... FC OCC VIR FV; ----------------------; 15 60 1305 0. Number of basis functions in the DF-CC basis: 2970. Available memory : 810623.17 MB; Memory requirement for 3-index ints : 40445.15 MB; Memory requirement for DF-CC int trans: 24244.87 MB; Memory requirement for CC contractions: 56027.91 MB; Total memory requirement for DF+CC int: 96473.07 MB; Memory requirement for Wabef term : 75373.62 MB. Traceback (most recent call last):; File ""/home/416653/PSI4/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/home/416653/PSI4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 456, in select_mp2p5; return func(name, **kwargs); File ""/home/416653/PSI4/lib/psi4/driver/procrouting/proc.py"", line 1607, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length. Printing out the relevant lines from the Psithon --> Python processed input file:; core.set_global_option(""FREEZE_CORE"", ""true""); core.set_global_option(""SCF_TYPE"", ""df""); core.set_global_option(""MP_TYPE"", ""df""); core.set_global_option(""BASIS"", ""aug-cc-pvtz""); core.set_global_option(""DF",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679:3994,contract,contractions,3994,https://psicode.org,https://github.com/psi4/psi4/issues/1679,1,['contract'],['contractions']
Integrability,"490E-02.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterations <==. ```; Total Energy Delta E RMS |[F,P]|; ```. @DF-RHF iter 1: -84.75156121243363 -8.47516e+01 4.62678e-01; @DF-RHF iter 2: -84.57553975935072 1.76021e-01 1.57599e-01 DIIS; @DF-RHF iter 3: -95.37276589956019 -1.07972e+01 2.29222e-01 DIIS; @DF-RHF iter 4: -98.17150610513394 -2.79874e+00 1.13514e-01 DIIS; @DF-RHF iter 5: -99.36228201796470 -1.19078e+00 2.49350e-02 DIIS; @DF-RHF iter 6: -99.44980963420196 -8.75276e-02 2.84013e-03 DIIS; @DF-RHF iter 7: -99.45076800401445 -9.58370e-04 5.43402e-04 DIIS; @DF-RHF iter 8: -99.45080520800713 -3.72040e-05 3.28500e-05 DIIS; @DF-RHF iter 9: -99.45080550249595 -2.94489e-07 2.15118e-05 DIIS; @DF-RHF iter 10: -99.45080555220893 -4.97130e-08 5.15361e-07 DIIS; @DF-RHF iter 11: -99.45080555224379 -3.48592e-11 5.53172e-08 DIIS; @DF-RHF iter 12: -99.45080555224428 -4.83169e-13 8.21984e-09 DIIS. DF guess converged. ==> Integral Setup <==. MINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 1; Number of AO shells: 14; Number of SO shells: 14; Number of primitives: 30; Number of atomic orbitals: 55; Number of basis functions: 46. ```; Number of irreps: 8; Integral cutoff 0.00e+00; Number of functions per irrep: [ 11 3 3 3 2 8 8 8 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 68684 non-zero two-electron integrals.; Stored in file 33. Batch 1 pq = [ 0, 195] index = [ 0,19110]; ```. ==> DiskJK: Disk-Based J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; Memory (MB): 34332; Schwarz Cutoff: 1E-12; ```. @RHF iter 13: -99.45080702212313 -1.46988e-06 2.13235e-06 DIIS; @RHF iter 14: -99.45080702229357 -1.70445e-10 3.50041e-07 DIIS; @RHF iter 15: -99.45080702229581 -2.23110e-12 2.66726e-07 DIIS; @RHF iter 16: -99.45080702230226 -6.45173e-12 5.58591e-09 DIIS. ==> Post-Iterations <==. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:5950,Wrap,Wrapper,5950,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['Wrap'],['Wrapper']
Integrability,"5000 1.241852000 8.156885000; H 1.485477000 1.176688000 9.116348000; C 3.332840000 1.154673000 7.834922000; H 4.206519000 0.999649000 8.462845000; N 1.311649000 1.424993000 6.973626000; C 2.188563000 1.435214000 5.957752000; H 1.944614000 1.560136000 4.907488000; N 3.421451000 1.288054000 6.467033000; C 4.624491000 1.154329000 5.644658000; H 4.896627000 0.092348000 5.590783000; H 4.378873000 1.527036000 4.641881000; H 5.430033000 1.755038000 6.090598000; C -0.139438000 1.464529000 6.788437000; H -0.534567000 0.445964000 6.893963000; H -0.329914000 1.835298000 5.773051000; H -0.575851000 2.145114000 7.533419000; F 2.193639000 -1.420051000 6.719505000; B 1.853598000 -1.602720000 5.368653000; F 1.684676000 -2.933106000 5.022169000; F 2.887295000 -1.000476000 4.545917000; F 0.639066000 -0.856861000 5.091564000; }; set globals {; basis aug-cc-pVDZ; scf_type direct; freeze_core True; guess sad; basis_guess 3-21G; }; energy('mrccsd(t)_l'); ```. End of output. ```; *** tstart() called on r3584; *** at Mon Feb 17 12:17:52 2014. PSI4 interface to MRCC:; Generating inputs for CCSD(T)_L. Automatically determined settings:; method 4; exlevel 3; fullname CCSD(T)_L. Orbital Information:. Frozen Core [ 24]; Active DOCC [ 70]; SOCC [ 0]; Frozen Virtual [ 0]. Total MOs [ 690]. Beginning integral transformation.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 5; ```. Stderr. ```; iwl_buf_init: Can't open file 33; PSIO_ERROR: Can't find TOC Entry IWL Buffers; PSIO_ERROR: unit = 33, errval = 13; PSIO_ERROR: 13 (no such TOC entry); Traceback (most recent call last):; File ""<string>"", line 72, in <module>; File ""/apps/psicode/4.0b5.1/share/psi/python/driver.py"", line 570, in energy; procedures['energy'][lowername](lowername, **kwargs); File ""/apps/psicode/4.0b5.1/share/psi/python/proc.py"", line 2111, in run_mrcc; psi4.mrcc_generate_input(level); RuntimeError: PSIO Error; file: /short/z00/cyl900/psi4/psi4public/src/lib/libpsio/error.cc; line: 116; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/35:2040,interface,interface,2040,https://psicode.org,https://github.com/psi4/psi4/issues/35,1,['interface'],['interface']
Integrability,57: dfomp2p5-grad2 ................... Passed 32.79 sec; Start 20: cbs-xtpl-wrapper; 75/412 Test #150: dfomp3-grad2 ..................... Passed 42.64 sec; Start 62: cc44; 76/412 Test #193: fd-freq-energy ................... Passed 70.15 sec; Start 243: ocepa-grad2; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 76.91 sec; Start 205: frac-ip-fitting; 78/412 Test #320: sapt5 ............................ Passed 79.17 sec; Start 264: omp3-grad2; 79/412 Test #44: cc28 ............................. Passed 53.16 sec; Start 250: omp2-4; 80/412 Test #245: ocepa2 ........................... Passed 62.18 sec; Start 58: cc40; 81/412 Test #261: omp3-4 ........................... Passed 58.04 sec; Start 65: cc47; 82/412 Test #251: omp2-5 ........................... Passed 49.94 sec; Start 168: dft-b3lyp; 83/412 Test #26: cc13a ............................ Passed 327.85 sec; Start 69: cc50; 84/412 Test #243: ocepa-grad2 ...................... Passed 63.73 sec; Start 300: pywrap-alias; 85/412 Test #20: cbs-xtpl-wrapper ................. Passed 79.22 sec; Start 390: python-pubchem; 86/412 Test #62: cc44 ............................. Passed 68.65 sec; Start 257: omp2p5-grad2; 87/412 Test #205: frac-ip-fitting .................. Passed 71.49 sec; Start 145: dfomp2-grad2; 88/412 Test #65: cc47 ............................. Passed 50.77 sec; Start 35: cc19; 89/412 Test #264: omp3-grad2 ....................... Passed 80.57 sec; Start 67: cc49; 90/412 Test #58: cc40 ............................. Passed 63.55 sec; Start 79: cc8a; 91/412 Test #250: omp2-4 ........................... Passed 85.98 sec; Start 152: dfomp2p5-2; 92/412 Test #114: dcft7 ............................ Passed 366.54 sec; Start 82: cc9; 93/412 Test #168: dft-b3lyp ........................ Passed 74.16 sec; Start 298: pubchem1; 94/412 Test #69: cc50 ............................. Passed 59.08 sec; Start 148: dfomp3-2; 95/412 Test #390: python-pubchem ................... Passed 72.12 sec; Start 141: dfomp2-2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068:8242,wrap,wrapper,8242,https://psicode.org,https://github.com/psi4/psi4/pull/1220#issuecomment-419126068,1,['wrap'],['wrapper']
Integrability,5a ............................. Passed 81.00 sec; Start 105: dcft-grad2; 70/412 Test #48: cc31 ............................. Passed 118.12 sec; Start 44: cc28; 71/412 Test #62: cc44 ............................. Passed 62.89 sec; Start 261: omp3-4; 72/412 Test #92: cepa-module ...................... Passed 94.63 sec; Start 257: omp2p5-grad2; 73/412 Test #27: cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-property; 77/412 Test #251: omp2-5 ........................... Passed 64.13 sec; Start 264: omp3-grad2; 78/412 Test #32: cc16 ............................. Passed 140.13 sec; Start 303: pywrap-cbs1; 79/412 Test #390: python-pubchem ................... Passed 63.68 sec; Start 145: dfomp2-grad2; 80/412 Test #20: cbs-xtpl-wrapper ................. Passed 71.38 sec; Start 231: mp2-module; 81/412 Test #47: cc30 ............................. Passed 73.41 sec; Start 171: dft1-alt; 82/412 Test #257: omp2p5-grad2 ..................... Passed 60.64 sec; Start 61: cc43; 83/412 Test #163: dft-grad-meta .................... Passed 53.44 sec; Start 193: fd-freq-energy; 84/412 Test #44: cc28 ............................. Passed 82.41 sec; Start 150: dfomp3-grad2; 85/412 Test #148: dfomp3-2 ......................... Passed 63.71 sec; Start 82: cc9; 86/412 Test #101: ci-property ...................... Passed 57.32 sec; Start 260: omp3-3; 87/412 Test #58: cc40 ............................. Passed 66.56 sec; Start 220: mints-benchmark; 88/412 Test #59: cc41 ............................. Passed 107.46 sec; Start 83: cc9a; 89/412 Test #105: dcft-grad2 ....................... Passed 101.83 sec; Start 19: cbs-xtpl-nbody; 90/412 Test #261: omp3-4 ........................... Passed 87.40 sec; Start 2,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:7789,wrap,wrapper,7789,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['wrap'],['wrapper']
Integrability,6 sec; Start 229: mp2-grad2; 227/411 Test #226: mp2-1 ............................ Passed 12.01 sec; Start 230: mp2-module; 228/411 Test #229: mp2-grad2 ........................ Passed 7.55 sec; Start 231: mp2p5-grad1; 229/411 Test #145: dfomp2-grad3 ..................... Passed 427.26 sec; Start 232: mp2p5-grad2; 230/411 Test #231: mp2p5-grad1 ...................... Passed 4.31 sec; Start 233: mp3-grad1; 231/411 Test #183: isapt2 ........................... Passed 136.47 sec; Start 234: mp3-grad2; 232/411 Test #233: mp3-grad1 ........................ Passed 6.71 sec; Start 235: mp2-property; 233/411 Test #219: mints-benchmark .................. Passed 42.31 sec; Start 236: mpn-bh; 234/411 Test #232: mp2p5-grad2 ...................... Passed 9.73 sec; Start 237: nbody-he-cluster; 235/411 Test #204: frac-ip-fitting .................. Passed 73.18 sec; Start 238: nbody-intermediates; 236/411 Test #235: mp2-property ..................... Passed 4.78 sec; Start 239: numpy-array-interface; 237/411 Test #239: numpy-array-interface ............ Passed 0.69 sec; Start 240: ocepa-freq1; 238/411 Test #234: mp3-grad2 ........................ Passed 7.87 sec; Start 241: ocepa-grad1; 239/411 Test #236: mpn-bh ........................... Passed 5.55 sec; Start 242: ocepa-grad2; 240/411 Test #238: nbody-intermediates .............. Passed 28.11 sec; Start 243: ocepa1; 241/411 Test #241: ocepa-grad1 ...................... Passed 25.42 sec; Start 244: ocepa2; 242/411 Test #243: ocepa1 ........................... Passed 21.47 sec; Start 245: ocepa3; 243/411 Test #237: nbody-he-cluster ................. Passed 70.02 sec; Start 246: omp2-1; 244/411 Test #246: omp2-1 ........................... Passed 4.05 sec; Start 247: omp2-2; 245/411 Test #247: omp2-2 ........................... Passed 38.93 sec; Start 248: omp2-3; 246/411 Test #230: mp2-module ....................... Passed 128.49 sec; Start 249: omp2-4; 247/411 Test #245: ocepa3 ........................... Passed 70.91 sec; Start ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325:21893,interface,interface,21893,https://psicode.org,https://github.com/psi4/psi4/pull/1112#issuecomment-409912325,2,['interface'],['interface']
Integrability,"6.49 sec; Start 380: psi4numpy-rhf-gradient; 183/401 Test #115: ao-dfcasscf-sp ................... Passed 2.27 sec; Start 290: psimrcc-sp1; 184/401 Test #400: json-schema_0_gradient ........... Passed 1.81 sec; Start 101: decontract; 185/401 Test #376: cc-module, ....................... Passed 111.71 sec; Start 379: psi4numpy-rhf; 186/401 Test #393: python-memdfjk ................... Passed 1.80 sec; Start 205: mcscf1; 187/401 Test #349: tu2-ch2-energy ................... Passed 1.30 sec; Start 235: numpy-array-interface; 188/401 Test #326: scf-bs ........................... Passed 1.60 sec; Start 384: python-energy; 189/401 Test #330: scf3 ............................. Passed 1.38 sec; Start 204: matrix1; 190/401 Test #380: psi4numpy-rhf-gradient ........... Passed 1.41 sec; Start 359: options1; 191/401 Test #347: stability2 ....................... Passed 1.80 sec; Start 208: mints1; 192/401 Test #379: psi4numpy-rhf .................... Passed 0.87 sec; Start 284: psimrcc-ccsd_t-2; 193/401 Test #235: numpy-array-interface ............ Passed 0.63 sec; Start 285: psimrcc-ccsd_t-3; 194/401 Test #205: mcscf1 ........................... Passed 0.84 sec; Start 283: psimrcc-ccsd_t-1; 195/401 Test #204: matrix1 .......................... Passed 0.67 sec; Start 289: psimrcc-pt2; 196/401 Test #101: decontract ....................... Passed 1.36 sec; Start 1: adc1; 197/401 Test #208: mints1 ........................... Passed 0.58 sec; Start 2: adc2; 198/401 Test #384: python-energy .................... Passed 0.78 sec; Start 9: castup2; 199/401 Test #359: options1 ......................... Passed 0.67 sec; Start 10: castup3; 200/401 Test #122: dfccsd1 .......................... Passed 3.17 sec; Start 12: cbs-parser; 201/401 Test #123: dfccsdl1 ......................... Passed 3.14 sec; Start 13: cbs-xtpl-alpha; 202/401 Test #285: psimrcc-ccsd_t-3 ................. Passed 1.29 sec; Start 17: cbs-xtpl-opt; 203/401 Test #283: psimrcc-ccsd_t-1 ................. Passed 1.20 sec; S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637:18107,interface,interface,18107,https://psicode.org,https://github.com/psi4/psi4/pull/1069#issuecomment-402413637,1,['interface'],['interface']
Integrability,"6355; C 3.05053 -0.99330 -1.18650; C 3.20741 -2.40360 -1.74586; C 2.55026 -3.52443 -0.96032; F 3.17228 4.13514 -0.00592; F 1.27554 3.06932 0.32664; F 3.66787 0.59838 2.12267; F 1.67182 0.43073 1.22024; F 3.82500 -0.17529 -1.99644; F 1.75160 -0.57213 -1.38634; F 3.25533 -3.78096 0.19399; F 1.27730 -3.18683 -0.58308; H 2.25306 4.32050 2.37079; H 3.76241 3.37061 2.47326; H 2.19469 2.57073 2.72526; H 4.35180 1.97066 0.10411; H 2.92157 1.70418 -0.89385; H 4.54579 -0.84429 0.31346; H 3.04476 -1.57689 0.88214; H 4.27328 -2.63006 -1.82364; H 2.78870 -2.38708 -2.75512; H 2.50060 -4.45608 -1.52780; --; 0 1; C -3.87349 2.91061 -1.65876; N -2.75856 1.99410 -1.41455; C -1.50263 2.33407 -0.94691; C -0.83120 1.17172 -0.73344; C -2.84151 0.66484 -1.47790; N -1.68346 0.14262 -1.07953; C -1.46679 -1.28577 -0.78728; C -1.38542 -1.51827 0.72247; C -1.59684 -2.99357 1.06458; C -1.46598 -3.24276 2.56923; H -3.87594 3.66326 -0.86989; H -3.76218 3.38868 -2.63477; H -4.79884 2.33892 -1.60023; H -1.20045 3.35521 -0.79404; H 0.15181 0.98994 -0.34830; H -3.72834 0.10789 -1.72147; H -0.55449 -1.60196 -1.29485; H -2.32462 -1.81798 -1.19641; H -0.41387 -1.17340 1.09480; H -2.16763 -0.92438 1.19970; H -0.87575 -3.61428 0.52075; H -2.59984 -3.27619 0.72873; H -0.46552 -2.96983 2.92459; H -2.19613 -2.64103 3.11964; H -1.63860 -4.29508 2.81528; B -4.99249 -0.20013 0.53015; F -4.36607 -1.36290 -0.02014; F -5.60912 0.50296 -0.55477; F -3.96502 0.63394 1.05703; F -5.91416 -0.53978 1.49939. units angstrom; no_reorient; symmetry c1; }. set{ basis 6-311+G(d,p); scf_type df. DF_BASIS_SAPT 6-311+G(d,p); SAPT_DFT_FUNCTIONAL B3LYP-D. }; energy('sapt2', molecule=AP_BMIMBF4); ```. I received an error message that I ran out of memory. The output file indicates failure occurred during the SAPT2 part, which reported `Estimated memory usage: 64566.6 MB`. Its estimate is off by at least 30 GB, which is not good. The user didn't specify the version they were using beyond `conda`, but I observed this on `1.3a2.dev122`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361:2102,message,message,2102,https://psicode.org,https://github.com/psi4/psi4/issues/1361,1,['message'],['message']
Integrability,"685693; O 2.81552768 -0.50840706 -1.42180252; O 3.61564541 1.27844179 0.09948727; O 2.95557380 -0.82533526 1.00298083; C 2.03019476 -1.93245912 1.04782605; C -1.66037059 -1.05786431 -0.87382233; C -1.39498496 -1.19960129 -2.34816003; C -2.65299201 -1.76249051 -0.27337471; H -2.37740040 -0.54585648 2.90523863; H 2.38954139 -2.56465364 1.84992540; H 1.02863634 -1.57685304 1.27002537; H 2.04236674 -2.46241236 0.09951447; H -2.15541649 -1.82673633 -2.80763054; H -0.41234738 -1.64107180 -2.50716877; H -1.37758315 -0.22482435 -2.83713913; H -3.27599978 -2.43724084 -0.84607768; S -0.34233722 2.35735393 -1.83532763; C 1.36095190 2.94818139 -1.81407535; H 1.71979201 3.09855604 -0.79815280; H 2.02802634 2.25554347 -2.32132745; H 1.39841688 3.90181231 -2.33199310; H 0.52648693 0.85272557 2.39744759; H -0.38901252 2.05630112 1.52833438; H -1.06736839 1.33094835 2.99083304; }. set {; pcm true; pcm_scf_type total; }. pcm = {; Units = Angstrom; Medium {; SolverType = IEFPCM; Solvent = Water; }. Cavity {; RadiiSet = UFF; Type = GePol; Scaling = False; Area = 0.3; Mode = Implicit; }; }. gradient(""b97-3c""); ```. And here's what happens when I run the calculation:. ```shell; $ psi4 input.dat; PCMSolver fatal error.; In function computeS at line 51 of file /Users/runner/miniforge3/conda-bld/pcmsolver-split_1696645993753/work/src/bi_operators/IBoundaryIntegralOperator.cpp; S matrix is not positive-definite!; Consider changing the average area of the cavity finite elements.; Please report this issue: https://github.com/PCMSolver/pcmsolver/issues; ```. If I delete the PCM sections, the B97-3c gradient runs just fine. The molecule looks normal:. <img width=""600"" alt=""image"" src=""https://github.com/user-attachments/assets/afa2ecd1-9890-4dc5-bf99-a1d7ae898d11"">. All calculations run on a MacBook Pro using Psi4 1.9.1 from conda-forge. (I know the message says to report this to [PCMSolver](https://github.com/PCMSolver/pcmsolver/issues) but that repository hasn't had any updates in 3+ years...)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202:2288,message,message,2288,https://psicode.org,https://github.com/psi4/psi4/issues/3202,1,['message'],['message']
Integrability,69/412 Test #31: cc15 ............................. Passed 17.78 sec; Start 318: sapt3; 70/412 Test #28: cc13c ............................ Passed 24.56 sec; Start 145: dfomp2-grad2; 71/412 Test #76: cc6 .............................. Passed 63.00 sec; Start 264: omp3-grad2; 72/412 Test #280: opt14 ............................ Passed 90.98 sec; Start 250: omp2-4; 73/412 Test #317: sapt2 ............................ Passed 360.01 sec; Start 116: dcft9; 74/412 Test #145: dfomp2-grad2 ..................... Passed 24.12 sec; Start 261: omp3-4; 75/412 Test #264: omp3-grad2 ....................... Passed 21.01 sec; Start 193: fd-freq-energy; 76/412 Test #70: cc51 ............................. Passed 70.89 sec; Start 21: cc1; 77/412 Test #318: sapt3 ............................ Passed 80.34 sec; Start 320: sapt5; 78/412 Test #250: omp2-4 ........................... Passed 46.24 sec; Start 251: omp2-5; 79/412 Test #116: dcft9 ............................ Passed 66.57 sec; Start 20: cbs-xtpl-wrapper; 80/412 Test #21: cc1 .............................. Passed 59.47 sec; Start 262: omp3-5; 81/412 Test #261: omp3-4 ........................... Passed 70.83 sec; Start 243: ocepa-grad2; 82/412 Test #193: fd-freq-energy ................... Passed 73.69 sec; Start 293: psimrcc-fd-freq2; 83/412 Test #251: omp2-5 ........................... Passed 48.12 sec; Start 150: dfomp3-grad2; 84/412 Test #262: omp3-5 ........................... Passed 26.64 sec; Start 257: omp2p5-grad2; 85/412 Test #243: ocepa-grad2 ...................... Passed 24.41 sec; Start 245: ocepa2; 86/412 Test #150: dfomp3-grad2 ..................... Passed 20.75 sec; Start 44: cc28; 87/412 Test #320: sapt5 ............................ Passed 77.11 sec; Start 62: cc44; 88/412 Test #20: cbs-xtpl-wrapper ................. Passed 58.85 sec; Start 300: pywrap-alias; 89/412 Test #257: omp2p5-grad2 ..................... Passed 29.36 sec; Start 205: frac-ip-fitting; 90/412 Test #245: ocepa2 ........................... Passed,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272:7552,wrap,wrapper,7552,https://psicode.org,https://github.com/psi4/psi4/pull/1225#issuecomment-419883272,1,['wrap'],['wrapper']
Integrability,"7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/__init__.py"", line 210, in __getattr__; return _getattr_migration(attr_name); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/pydantic/_migration.py"", line 289, in wrapper; raise PydanticImportError(; pydantic.errors.PydanticImportError: `BaseSettings` has been moved to the `pydantic-settings` package. See https://docs.pydantic.dev/2.3/migration/#basesettings-has-moved-to-pydantic-settings for more details. For further information visit https://errors.pydantic.dev/2.3/u/import-error; ~ ❯ ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:2263,wrap,wrapper,2263,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,1,['wrap'],['wrapper']
Integrability,70: dft1 ............................. Passed 98.14 sec; Start 58: cc40; 64/413 Test #58: cc40 ............................. Passed 21.73 sec; Start 252: omp2-5; 65/413 Test #75: cc5a ............................. Passed 50.54 sec; Start 151: dfomp3-grad2; 66/413 Test #70: cc51 ............................. Passed 69.56 sec; Start 19: cbs-xtpl-nbody; 67/413 Test #62: cc44 ............................. Passed 49.61 sec; Start 282: opt-irc-1; 68/413 Test #151: dfomp3-grad2 ..................... Passed 21.51 sec; Start 47: cc30; 69/413 Test #252: omp2-5 ........................... Passed 29.32 sec; Start 17: cbs-xtpl-opt; 70/413 Test #19: cbs-xtpl-nbody ................... Passed 31.04 sec; Start 244: ocepa-grad2; 71/413 Test #47: cc30 ............................. Passed 29.82 sec; Start 281: opt14; 72/413 Test #373: dft-custom-dhdf .................. Passed 91.36 sec; Start 265: omp3-grad2; 73/413 Test #327: scf-bz2 .......................... Passed 128.58 sec; Start 20: cbs-xtpl-wrapper; 74/413 Test #244: ocepa-grad2 ...................... Passed 28.38 sec; Start 194: fd-freq-energy; 75/413 Test #265: omp3-grad2 ....................... Passed 25.86 sec; Start 158: dfomp2p5-grad2; 76/413 Test #17: cbs-xtpl-opt ..................... Passed 52.41 sec; Start 319: sapt3; 77/413 Test #282: opt-irc-1 ........................ Passed 72.73 sec; Start 21: cc1; 78/413 Test #158: dfomp2p5-grad2 ................... Passed 18.04 sec; Start 12: cbs-parser; 79/413 Test #21: cc1 .............................. Passed 27.07 sec; Start 294: psimrcc-fd-freq2; 80/413 Test #20: cbs-xtpl-wrapper ................. Passed 54.66 sec; Start 60: cc42; 81/413 Test #194: fd-freq-energy ................... Passed 50.01 sec; Start 246: ocepa2; 82/413 Test #12: cbs-parser ....................... Passed 24.68 sec; Start 321: sapt5; 83/413 Test #195: fd-freq-energy-large ............. Passed 495.34 sec; Start 78: cc8; 84/413 Test #281: opt14 ............................ Passed 79.35 sec; Start 72: cc53,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678:7161,wrap,wrapper,7161,https://psicode.org,https://github.com/psi4/psi4/pull/1264#issuecomment-425525678,1,['wrap'],['wrapper']
Integrability,"73100000 -0.000000000; C 1.934600000 -0.213400000 -0.000000000; H 2.475000000 -0.380600000 0.924600000; H 2.475400000 -0.380100000 -0.924300000; H -0.756100000 1.624500000 0.000500000; H -2.368000000 -0.187400000 0.878900000; H -1.437400000 -1.407900000 -0.000100000; H -2.368300000 -0.187200000 -0.878700000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(24000000000); try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'); E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. The program starts the optimization and produces an error:. ```; Performing finite difference calculations; 49 displacements needed ... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB2D549510F for__signal_handl Unknown Unknown; libpthread-2.27.s 00007FB2DA9F68A0 Unknown Unknown Unknown; libc-2.27.so 00007FB2DA631F47 gsignal Unknown Unknown; libc-2.27.so 00007FB2DA6338B1 abort Unknown Unknown; core.cpython-37m- 00007FB2D7A0D3D7 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6563E2D Unknown Unknown Unknown; core.cpython-37m- 00007FB2D657D2C1 Unknown Unknown Unknown; core.cpython-37m- 00007FB2D6040FF6 Unknown Unknown Unknown; python3.7 000055D7E213E914 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D7E213EA31 _PyCFunction_Fast Unknown Unknown; python3.7 000055D7E21AAEBD _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D7E213E107 _PyFunction_FastC Unknown Unknown; python3.7 000055D7E21A64B6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D7E20ED829 _PyEval_EvalCodeW Unknown Unk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020:1336,Rout,Routine,1336,https://psicode.org,https://github.com/psi4/psi4/issues/2020,1,['Rout'],['Routine']
Integrability,76/412 Test #231: mp2-module ....................... Passed 90.49 sec; Start 20: cbs-xtpl-wrapper; 77/412 Test #293: psimrcc-fd-freq2 ................. Passed 81.12 sec; Start 58: cc40; 78/412 Test #250: omp2-4 ........................... Passed 69.17 sec; Start 11: cbs-delta-energy; 79/412 Test #62: cc44 ............................. Passed 72.21 sec; Start 82: cc9; 80/412 Test #264: omp3-grad2 ....................... Passed 71.27 sec; Start 69: cc50; 81/412 Test #390: python-pubchem ................... Passed 64.71 sec; Start 57: cc4; 82/412 Test #2: adc2 ............................. Passed 46.23 sec; Start 245: ocepa2; 83/412 Test #205: frac-ip-fitting .................. Passed 73.37 sec; Start 251: omp2-5; 84/412 Test #168: dft-b3lyp ........................ Passed 68.76 sec; Start 78: cc8; 85/412 Test #17: cbs-xtpl-opt ..................... Passed 104.86 sec; Start 193: fd-freq-energy; 86/412 Test #150: dfomp3-grad2 ..................... Passed 85.43 sec; Start 298: pubchem1; 87/412 Test #20: cbs-xtpl-wrapper ................. Passed 80.35 sec; Start 80: cc8b; 88/412 Test #317: sapt2 ............................ Passed 352.05 sec; Start 243: ocepa-grad2; 89/412 Test #58: cc40 ............................. Passed 75.15 sec; Start 60: cc42; 90/412 Test #82: cc9 .............................. Passed 62.16 sec; Start 108: dcft1; 91/412 Test #57: cc4 .............................. Passed 57.29 sec; Start 35: cc19; 92/412 Test #114: dcft7 ............................ Passed 393.99 sec; Start 66: cc48; 93/412 Test #69: cc50 ............................. Passed 73.08 sec; Start 101: ci-property; 94/412 Test #78: cc8 .............................. Passed 58.53 sec; Start 65: cc47; 95/412 Test #245: ocepa2 ........................... Passed 85.34 sec; Start 28: cc13c; 96/412 Test #251: omp2-5 ........................... Passed 85.48 sec; Start 67: cc49; 97/412 Test #80: cc8b ............................. Passed 50.08 sec; Start 55: cc38; 98/412 Test #298: pubchem1 .....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646:8401,wrap,wrapper,8401,https://psicode.org,https://github.com/psi4/psi4/pull/1221#issuecomment-419096646,1,['wrap'],['wrapper']
Integrability,"8.5 was just below our minimum of 4.9. And then we try to stay on the modern side of the string-passing change at gcc 5.1(https://greek0.net/blog/2016/10/29/gcc_compatibility/) since people compile against our packages. The `gcc-5` on the psi4 channel is one I swiped from msarahan a year or so ago at the time of our last gcc crisis. I'd very much like to go back to using a defaults channel gcc, esp. for the gcc/libgcc separation. I tried out their `gcc_linux-64` at SciPy and it worked great. I planned to use their new toolchain system underneath Intel compilers but haven't had a chance to work on it. One aspect that might be immediately helpful to you is that because of our initial drive to make psi4 as static as possible, the psi4 package has no `libstdc++.so` runtime dependency. Only dep is on `libgcc_s.so` which can usually be picked up anywhere. In fact, we keep `gcc-5` away from travis builds so that different compilers can be properly tested. Below is a dependency readout from a recent build for general consultation. And yes, I've hit the conda inspect multiple packages message, too. There are plans down the road to drop `std::regex`, which means we could go back to general c++11 compliance and 4.8.5 would be ok. But because the packages are compiled against, we'd prefer to stay >=5.2 anyways. So summary is that current setup is stable but not ideal and we're not attached. Just haven't had time or need to roll out the latest tools. Short of another gcc packages revamp, are there particular problems/conflicts we could help tackle?. ```; + ldd -v /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/core.so; 	linux-vdso.so.1 => (0x00007fff87fc4000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f4318faf000); 	libc.so.6 => /lib64/libc.so.6 (0x00007f4318bed000); 	libpcm.so.1 => /scratch/psilocaluser/conda-builds/psi4_1506620042465/_t_env/lib/python3.6/site-packages/psi4/../../../libpcm.so.1 (0x00007f4312184000); 	libxc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/812#issuecomment-332960335:1017,depend,dependency,1017,https://psicode.org,https://github.com/psi4/psi4/issues/812#issuecomment-332960335,1,['depend'],['dependency']
Integrability,8/413 Test #232: mp2-module ....................... Passed 103.88 sec; Start 26: cc13a; 79/413 Test #170: dft1 ............................. Passed 106.31 sec; Start 115: dcft7; 80/413 Test #153: dfomp2p5-2 ....................... Passed 59.14 sec; Start 207: frac-traverse; 81/413 Test #92: cepa-module ...................... Passed 187.69 sec; Start 318: sapt2; 82/413 Test #281: opt14 ............................ Passed 80.55 sec; Start 320: sapt4; 83/413 Test #109: dcft1 ............................ Passed 68.38 sec; Start 327: scf-bz2; 84/413 Test #258: omp2p5-grad2 ..................... Passed 64.16 sec; Start 265: omp3-grad2; 85/413 Test #144: dfomp2-4 ......................... Passed 62.74 sec; Start 142: dfomp2-2; 86/413 Test #67: cc49 ............................. Passed 54.95 sec; Start 83: cc9a; 87/413 Test #79: cc8a ............................. Passed 53.51 sec; Start 282: opt-irc-1; 88/413 Test #158: dfomp2p5-grad2 ................... Passed 80.48 sec; Start 20: cbs-xtpl-wrapper; 89/413 Test #81: cc8c ............................. Passed 52.58 sec; Start 17: cbs-xtpl-opt; 90/413 Test #21: cc1 .............................. Passed 86.44 sec; Start 78: cc8; 91/413 Test #82: cc9 .............................. Passed 67.08 sec; Start 34: cc18; 92/413 Test #142: dfomp2-2 ......................... Passed 51.07 sec; Start 319: sapt3; 93/413 Test #373: dft-custom-dhdf .................. Passed 90.03 sec; Start 321: sapt5; 94/413 Test #83: cc9a ............................. Passed 56.13 sec; Start 391: python-pubchem; 95/413 Test #265: omp3-grad2 ....................... Passed 78.67 sec; Start 194: fd-freq-energy; 96/413 Test #34: cc18 ............................. Passed 48.82 sec; Start 247: ocepa3; 97/413 Test #78: cc8 .............................. Passed 62.52 sec; Start 69: cc50; 98/413 Test #20: cbs-xtpl-wrapper ................. Passed 78.50 sec; Start 294: psimrcc-fd-freq2; 99/413 Test #282: opt-irc-1 ........................ Passed 94.89 sec; Start 50: c,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275:8482,wrap,wrapper,8482,https://psicode.org,https://github.com/psi4/psi4/pull/1237#issuecomment-425038275,1,['wrap'],['wrapper']
Integrability,"85, 0.90, 0.95, 1.00]; for A in Avals:; psi4.core.print_out(""running step %5.2f"" % A); core.set_global_option(""REMP_A"", A); --> energy('oremp',restart_file='scf_mos'); core.set_global_option(""MO_READ"", ""true""); psi4.core.print_out(""""). !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: Matrix::vector_dot: Dimensions do not match! !; ! Error occurred in file: !; ! /home/tu/tu_tu/tu_ctibc01/prog/psi4/psi4/psi4/src/psi4/libmints/matrix.cc on !; ! line: 1703 !; ! The most recent 5 function calls were: !; ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; ! psi::Matrix::vector_dot(psi::Matrix const*) !; ! !; !----------------------------------------------------------------------------------!; ```; (the example uses a custom method but the problem should be reproducible with DF-OMP2).; The molecule in question has 86 occupied and 773 virtual correlated orbitals, giving rise to (depending on the storage scheme) ~2.2E9 amplitudes. The root cause of the issue seems to be missing type casts to size_t in libmints/matrix.cc. Inserting debug printout shows that the size calculation of the second vector in vector_dot (line 1699) and axpy(line 1443) overflows, while the size calculations of the first vector have ""enough"" type casts. The following proposed fix seems to resolve the problem, at least now the calculation passes the point where it crashed before:; ```; diff --git a/psi4/src/psi4/libmints/matrix.cc b/psi4/src/psi4/libmints/matrix.cc; index ad5ffb5a0..69521972e 100644; --- a/psi4/src/psi4/libmints/matrix.cc; +++ b/psi4/src/psi4/libmints/matrix.cc; @@ -1439,8 +1439,8 @@ void Matrix::axpy(double a, SharedMatrix X) {; throw PSIEXCEPTION(""Matrix::axpy: Matrices do not have the same nirreps"");; }; for (int h = 0; h < nirrep_; h++) {; - size_t size = colspi_[h ^ symmetry()] * (size_t)rowspi_[h];; - if (size != (X->rowspi()[h] * X->col",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2591:3667,depend,depending,3667,https://psicode.org,https://github.com/psi4/psi4/issues/2591,1,['depend'],['depending']
Integrability,"9, in geometric_run_json\n geometric.optimize.Optimize(coords, M, IC, engine, dirname, params, print_info = (ic==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 779, in Optimize\n return optimizer.optimizeGeometry()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 692, in optimizeGeometry\n self.calcEnergyForce()\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\optimize.py"", line 283, in calcEnergyForce\n spcalc = self.engine.calc(self.X, self.dirname, read_data=(self.Iteration==0))\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1470, in calc\n return self.calc_new(coords, dirname)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\geometric\\engine.py"", line 1461, in calc_new\n raise QCEngineAPIEngineError(""QCEngineAPI computation did not execute correctly. Message: "" + ret[""error""][""error_message""])\ngeometric.errors.QCEngineAPIEngineError: QCEngineAPI computation did not execute correctly. Message: QCEngine Execution Error:\nTraceback (most recent call last):\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\util.py"", line 114, in compute_wrapper\n yield metadata\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\compute.py"", line 105, in compute\n output_data = executor.compute(input_data, config)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 121, in compute\n pversion = parse_version(self.get_version())\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-packages\\qcengine\\programs\\psi4.py"", line 89, in get_version\n with popen([which_prog, ""--version""]) as exc:\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\contextlib.py"", line 113, in __enter__\n return next(self.gen)\n File ""C:\\Users\\vike\\Anaconda3\\envs\\p4env\\lib\\site-pack",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020:1623,Message,Message,1623,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486892020,1,['Message'],['Message']
Integrability,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; __________________________________________________________________ test_simint ___________________________________________________________________. @using_simint; def test_simint():; """"""simint/scf5""""""; ; psi4.set_options({'integral_package': 'simint'}); > _test_scf5(). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:625: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ; /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:487: in _test_scf5; E = psi4.energy('scf', molecule=singlet_o2); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/driver.py:460: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1942: in run_scf; scf_wfn = scf_helper(name, **kwargs); /home/joao/miniconda3/lib/python3.6/site-packages/psi4/driver/procrouting/proc.py:1251: in scf_helper; scf_w",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:10998,Interface,Interface,10998,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Interface'],['Interface']
Integrability,"994914619560. Running in d2h symmetry. Rotational constants: A = ************ B = 1.74204 C = 1.74204 [cm^-1]; Rotational constants: A = ************ B = 52225.17395 C = 52225.17395 [MHz]; Nuclear repulsion = 30.788492136145454. Charge = 0; Multiplicity = 1; Electrons = 16; Nalpha = 8; Nbeta = 8. ==> Algorithm <==. SCF Algorithm Type is PK.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-12; Density threshold = 1.00e-12; Integral threshold = 0.00e+00. ==> Primary Basis <==. -AO BASIS SET INFORMATION:; Name = CC-PVTZ; Blend = CC-PVTZ; Total number of shells = 20; Number of primitives = 52; Number of AO = 70; Number of SO = 60; Maximum AM = 3; Spherical Harmonics = TRUE. -Contraction Scheme:; Atom Type All Primitives // Shells:; ------ ------ --------------------------; 1 O 18s 5p 2d 1f // 4s 3p 2d 1f ; 2 O 18s 5p 2d 1f // 4s 3p 2d 1f . **PSI4:PCMSOLVER Interface Active**; ___________________________________________________________________ test_json ____________________________________________________________________. def test_json():; """"""json/energy""""""; ; import numpy as np; ; # Generate JSON data; json_data = {}; json_data[""molecule""] = """"""He 0 0 0\n--\nHe 0 0 1""""""; json_data[""driver""] = ""gradient""; json_data[""args""] = 'SCF'; json_data[""kwargs""] = {}; json_data[""options""] = {""BASIS"": ""STO-3G""}; json_data[""return_output""] = True; ; psi4.json_wrapper.run_json(json_data); ; assert psi4.compare_strings(""STO-3G"", json_data[""options""][""BASIS""], ""Options test""); > assert psi4.compare_integers(True, json_data[""success""], ""Success""). /home/joao/miniconda3/lib/python3.6/site-packages/psi4/tests/test_addons.py:644: ; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ . expected = True, computed = False, label = 'Success'. def compare_integers(expected, computed, label):; """"""Function to compare two integers. Prints :py:func:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/820:16510,Interface,Interface,16510,https://psicode.org,https://github.com/psi4/psi4/issues/820,1,['Interface'],['Interface']
Integrability,: 0.017u 0.000s 0.007w 1 calls; | | | JK: J1 : 0.000u 0.000s 0.003w 3 calls; | | | JK: J2 : 0.017u 0.000s 0.003w 3 calls; | | JK: K : 0.183u 0.000s 0.116w 1 calls; | | | JK: K1 : 0.183u 0.000s 0.110w 6 calls; | | | JK: K2 : 0.000u 0.000s 0.005w 3 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 1 calls; SAPT(DFT):SAPT(DFT):ind : 45.583u 0.533s 27.664w 1 calls; | JK: D : 0.000u 0.000s 0.001w 17 calls; | JK: USO2AO : 0.000u 0.000s 0.000w 17 calls; | JK: JK : 1.383u 0.000s 0.815w 17 calls; | | JK: J : 0.150u 0.000s 0.049w 17 calls; | | | JK: J1 : 0.017u 0.000s 0.024w 19 calls; | | | JK: J2 : 0.133u 0.000s 0.023w 19 calls; | | JK: K : 1.217u 0.000s 0.760w 17 calls; | | | JK: K1 : 1.133u 0.000s 0.723w 38 calls; | | | JK: K2 : 0.083u 0.000s 0.036w 19 calls; | JK: AO2USO : 0.000u 0.000s 0.000w 17 calls; | RV: Form Vx : 44.150u 0.533s 26.828w 16 calls; | | Properties : 20.333u 0.350s 12.087w 22336 calls; | | Functional : 7.050u 0.050s 4.517w 22336 calls; | | Derivative Properties : 9.050u 0.050s 5.407w 22336 calls; | | V_XCd : 6.933u 0.067s 4.389w 22336 calls; SAPT(DFT):SAPT(DFT):disp : 5.000u 0.167s 3.141w 1 calls; | DFH: initialize() : 0.583u 0.000s 0.350w 1 calls; | | DFH: sparsity prep : 0.033u 0.000s 0.024w 1 calls; | | DFH: AO Construction : 0.533u 0.000s 0.313w 1 calls; | DFH: transform() : 0.117u 0.017s 0.075w 1 calls; | | DFH: Total Workflow : 0.017u 0.000s 0.014w 4 calls; | | | DFH: Total Transform : 0.017u 0.000s 0.014w 4 calls; | | | | DFH: 1st Contraction : 0.000u 0.000s 0.009w 2 calls; | | | | DFH: 2nd Contraction : 0.017u 0.000s 0.005w 2 calls; | | DFH: MO to disk : 0.000u 0.000s 0.001w 2 calls; | | DFH: Direct Contractions : 0.083u 0.017s 0.046w 1 calls; | | | DFH: Total Workflow : 0.017u 0.000s 0.007w 2 calls; | DF Integrals : 0.767u 0.083s 0.514w 1 calls; | W Integrals : 0.000u 0.000s 0.001w 1 calls; | Exch-Disp20 N^5 : 0.033u 0.033s 0.043w 1 calls; | Exch-Disp20 N^4 : 0.267u 0.033s 0.178w 1 calls. ***********************************************************; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200:14133,Contract,Contraction,14133,https://psicode.org,https://github.com/psi4/psi4/pull/1083#issuecomment-405763200,3,['Contract'],"['Contraction', 'Contractions']"
Integrability,: cbs-xtpl-opt; 149/415 Test #215: mints1 ........................... Passed 1.26 sec; Start 19: cbs-xtpl-nbody; 150/415 Test #393: psi4numpy-rhf .................... Passed 1.46 sec; Start 20: cbs-xtpl-wrapper; 151/415 Test #248: numpy-array-interface ............ Passed 1.09 sec; Start 23: cc10; 152/415 Test #211: matrix1 .......................... Passed 1.16 sec; Start 24: cc11; 153/415 Test #10: castup3 .......................... Passed 13.51 sec; Start 25: cc12; 154/415 Test #9: castup2 .......................... Passed 13.71 sec; Start 26: cc13; 155/415 Test #1: adc1 ............................. Passed 24.99 sec; Start 29: cc13c; 156/415 Test #2: adc2 ............................. Passed 37.11 sec; Start 30: cc13d; 157/415 Test #24: cc11 ............................. Passed 50.15 sec; Start 31: cc14; 158/415 Test #23: cc10 ............................. Passed 71.48 sec; Start 33: cc16; 159/415 Test #25: cc12 ............................. Passed 71.24 sec; Start 36: cc19; 160/415 Test #20: cbs-xtpl-wrapper ................. Passed 94.08 sec; Start 37: cc2; 161/415 Test #12: cbs-parser ....................... Passed 116.86 sec; Start 38: cc21; 162/415 Test #19: cbs-xtpl-nbody ................... Passed 141.24 sec; Start 39: cc22; 163/415 Test #17: cbs-xtpl-opt ..................... Passed 192.06 sec; Start 40: cc23; 164/415 Test #39: cc22 ............................. Passed 61.46 sec; Start 41: cc24; 165/415 Test #36: cc19 ............................. Passed 153.84 sec; Start 42: cc25; 166/415 Test #196: fd-freq-energy-large ............. Passed 970.47 sec; Start 43: cc26; 167/415 Test #29: cc13c ............................ Passed 319.30 sec; Start 44: cc27; 168/415 Test #27: cc13a ............................ Passed 864.99 sec; Start 46: cc29; 169/415 Test #33: cc16 ............................. Passed 369.56 sec; Start 47: cc3; 170/415 Test #13: cbs-xtpl-alpha ................... Passed 464.57 sec; Start 48: cc30; 171/415 Test #405: python-vibanalysis ...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424:15345,wrap,wrapper,15345,https://psicode.org,https://github.com/psi4/psi4/pull/1384#issuecomment-443227424,1,['wrap'],['wrapper']
Integrability,: cc-module ........................ Passed 236.85 sec; Start 61: cc44; 68/411 Test #69: cc51 ............................. Passed 103.52 sec; Start 140: dfomp2-2; 69/411 Test #154: dft-grad-lr2 ..................... Passed 106.99 sec; Start 34: cc19; 70/411 Test #75: cc6 .............................. Passed 110.79 sec; Start 371: dft-custom-dhdf; 71/411 Test #65: cc48 ............................. Passed 95.69 sec; Start 280: opt-irc-1; 72/411 Test #168: dft1 ............................. Passed 124.66 sec; Start 230: mp2-module; 73/411 Test #140: dfomp2-2 ......................... Passed 58.63 sec; Start 261: omp3-5; 74/411 Test #34: cc19 ............................. Passed 72.40 sec; Start 259: omp3-3; 75/411 Test #61: cc44 ............................. Passed 86.68 sec; Start 242: ocepa-grad2; 76/411 Test #302: pywrap-cbs1 ...................... Passed 161.22 sec; Start 151: dfomp2p5-2; 77/411 Test #371: dft-custom-dhdf .................. Passed 99.18 sec; Start 19: cbs-xtpl-wrapper; 78/411 Test #325: scf-bz2 .......................... Passed 123.80 sec; Start 81: cc9; 79/411 Test #280: opt-irc-1 ........................ Passed 105.80 sec; Start 56: cc4; 80/411 Test #151: dfomp2p5-2 ....................... Passed 32.00 sec; Start 279: opt14; 81/411 Test #261: omp3-5 ........................... Passed 71.80 sec; Start 63: cc46; 82/411 Test #230: mp2-module ....................... Passed 83.78 sec; Start 156: dfomp2p5-grad2; 83/411 Test #242: ocepa-grad2 ...................... Passed 48.77 sec; Start 249: omp2-4; 84/411 Test #81: cc9 .............................. Passed 33.45 sec; Start 292: psimrcc-fd-freq2; 85/411 Test #259: omp3-3 ........................... Passed 65.71 sec; Start 78: cc8a; 86/411 Test #56: cc4 .............................. Passed 32.87 sec; Start 142: dfomp2-4; 87/411 Test #63: cc46 ............................. Passed 37.77 sec; Start 77: cc8; 88/411 Test #19: cbs-xtpl-wrapper ................. Passed 73.55 sec; Start 260: omp3-4; 89/411 ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383:7528,wrap,wrapper,7528,https://psicode.org,https://github.com/psi4/psi4/pull/1124#issuecomment-411347383,1,['wrap'],['wrapper']
Integrability,: fd-freq-energy-large ............. Passed 573.09 sec; Start 231: mp2-module; 56/412 Test #145: dfomp2-grad2 ..................... Passed 68.95 sec; Start 17: cbs-xtpl-opt; 57/412 Test #372: dft-custom-dhdf .................. Passed 105.99 sec; Start 76: cc6; 58/412 Test #260: omp3-3 ........................... Passed 88.45 sec; Start 318: sapt3; 59/412 Test #326: scf-bz2 .......................... Passed 141.14 sec; Start 70: cc51; 60/412 Test #182: fsapt-allterms ................... Passed 606.28 sec; Start 320: sapt5; 61/412 Test #281: opt-irc-1 ........................ Passed 101.38 sec; Start 262: omp3-5; 62/412 Test #206: frac-traverse .................... Passed 240.35 sec; Start 293: psimrcc-fd-freq2; 63/412 Test #280: opt14 ............................ Passed 89.39 sec; Start 250: omp2-4; 64/412 Test #76: cc6 .............................. Passed 91.93 sec; Start 193: fd-freq-energy; 65/412 Test #231: mp2-module ....................... Passed 98.50 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #318: sapt3 ............................ Passed 86.10 sec; Start 264: omp3-grad2; 67/412 Test #17: cbs-xtpl-opt ..................... Passed 106.20 sec; Start 257: omp2p5-grad2; 68/412 Test #262: omp3-5 ........................... Passed 82.61 sec; Start 205: frac-ip-fitting; 69/412 Test #320: sapt5 ............................ Passed 85.03 sec; Start 300: pywrap-alias; 70/412 Test #70: cc51 ............................. Passed 90.98 sec; Start 19: cbs-xtpl-nbody; 71/412 Test #293: psimrcc-fd-freq2 ................. Passed 78.67 sec; Start 62: cc44; 72/412 Test #250: omp2-4 ........................... Passed 99.04 sec; Start 168: dft-b3lyp; 73/412 Test #20: cbs-xtpl-wrapper ................. Passed 90.74 sec; Start 245: ocepa2; 74/412 Test #205: frac-ip-fitting .................. Passed 76.80 sec; Start 243: ocepa-grad2; 75/412 Test #193: fd-freq-energy ................... Passed 98.56 sec; Start 81: cc8c; 76/412 Test #300: pywrap-alias ..................... Passed 77.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485:6488,wrap,wrapper,6488,https://psicode.org,https://github.com/psi4/psi4/pull/1224#issuecomment-419158485,1,['wrap'],['wrapper']
Integrability,":. > Without The-7 (hf/rhf/uhf/rohf/rscf/roscf/uscf), one can do:; > ; > # (a) for HF; > ; > energy(‘scf’); > ; > # (b) for unrestricted HF; > ; > set reference uhf; > energy(‘scf’); > ; > # (c) for B3LYP; > ; > set dft_functional b3lyp; > set reference rks; > energy(‘scf’); > ; > # (d) also for B3LYP; > ; > energy(‘b3lyp’); > ; > # but this gets you HF (b/c ks reference is the hf/dft toggle control); > ; > set dft_functional b3lyp; > energy(‘scf'); > ; > # (e) for unrestricted B3LYP; > ; > set dft_functional b3lyp; > set reference uks; > energy(‘scf’); > ; > # (f) also for unrestricted B3LYP; > ; > set reference uks; > energy(‘b3lyp’); > ; > # (g) also for unrestricted B3LYP (since energy command trumps options,; > ; > uhf gets translated to uks); > set reference uhf; > energy(‘b3lyp’); > ; > But most people do (a), (b), (d), and (f/g) I think. rhf/uhf/rohf let you; > wrap reference into the energy() call for HF. rscf/uscf/roscf let you wrap; > reference into the energy() call for HF or DFT (though for the latter you’d; > have to use dft_functional keyword.; > ; > Francesco brings up a related and overdue point. If you specify an; > open-shell molecule and no reference, it complains at you b/c rhf (the; > default) is unsuitable. I couldn’t say concretely, but some other programs; > will switch to an appropriate reference for open-shell. For psi4, it would; > have to be rhf/rks because we don’t have roks. This would be convenient at; > times, for instance, running databases of mixed closed/open shell.; > ; > Propositions to be considered:; > ; > (i) Keeping reference in one place, that is, as a keyword. Consequences:; > retire rhf/uhf/rohf & rscf/uscf/roscf; > ; > (ii) If molecule is open-shell _and_ no reference has been specified,; > switch to uhf. This could be tricky b/c we’re not set up to do this; > driver-side. Also, there’d still be no way to use r/ro, as appropriate, in; > a series of molecules w/o explicitly setting reference.; > ; > Lori; > ; > > On Jun 8,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-110194494:1650,wrap,wrap,1650,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-110194494,1,['wrap'],['wrap']
Integrability,":__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >); psi::DFTGrid::DFTGrid(std::shared_ptr<psi::Molecule>, std::shared_ptr<psi::BasisSet>, psi::Options&). *** Psi4 encountered an error. Buy a developer more coffee!; *** Resources and help at github.com/psi4/psi4.; ```. Are there plans to include support for the SG-1 grid in Psi4? If not, are there any alternative grids that do work? _Removing_ the SG-1 option from the input file simply results in a segfault. The input file is below:. ```; memory 13500 Mb; molecule {; 0 1; C 4.067369 -2.240127 -0.129252; C 4.972458 -1.390566 3.098494; C 2.921005 -1.630865 0.608144; C 2.878286 -1.651992 2.002187; C 0.763829 -0.484138 1.955055; C 1.885141 -1.036307 -0.112440; C 1.799700 -1.078640 2.675676; C 0.806556 -0.463011 0.561006; O 3.881939 -2.228505 2.721026; Br -0.697406 0.294370 2.866925; H 4.856028 -1.495441 -0.288527; H 4.492277 -3.085465 0.426246; H 3.750214 -2.627370 -1.105706; H 5.701654 -1.973847 3.666076; H 4.602203 -0.560418 3.705314; H 5.446916 -0.996749 2.196547; H 1.908587 -1.015574 -1.198747; H 1.775186 -1.100057 3.762739; H 0.006619 -0.004988 -0.014918; }; set dft_radial_points 99; set dft_spherical_points 590; set dft_grid_name SG1; set dft_nuclear_scheme treutler; set dft_radial_scheme EM; set basis def2-TZVPPD; ENE=energy(""wB97M-V""); ```. I'm running with a slightly old commit from 09/19 (92b4c55b7171ba48520f91b5344cdcfe99cedc2f). My apologies if the problem has already been fixed in a more recent commit, though it doesn't seem like it based on reading through the diffs of commits with relevant messages. Thanks!; Aditya",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/827:2864,message,messages,2864,https://psicode.org,https://github.com/psi4/psi4/issues/827,1,['message'],['messages']
Integrability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8264,interface,interface,8264,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['interface'],['interface']
Integrability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2657,interface,interface,2657,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['interface'],['interface']
Integrability,"; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.6.0 (#2028) ; - Fix memory bug in libtrans (#2027) ; - Fix to large DF-MP2 (#2033) ; - Make sure psi populates qcschema wfn with orbital occupations (#2036) ; - Options reading ignores spaces (#2051) ; - Fix to Treutler grid call (#2044) ; - Fix diffuse external potential after L2 (#2068) ; - Fixes to PCM/qcschema (#2037) ; - Bug in ccresponse (#2077) ; - Fix error throwing in some threaded blocks (#2082) ; - Better error printing (#2083) ; - Fix in EOM CC3 (#2085) ; - Deprecate Matrix::Savetype::Full (#2092) ; - Fix getting of CC amplitudes in frozen core jobs (#2095) ; - QCSchema export bug fix (#2112) ; - Fix TD-SCF computations when using DF and symmetry (#2124) ; - Fix DF-DCT energy, grad, properties, and densities (#2100) ; - Fix bug by closing DPD file in DF grad (#2137) ; - Fix method/basis bug when using DiskDF (#2141) ; - Fix bug by triggering error in CC code (#2150) ; - Fix indexing bug in DCT (#2165) ; - Fix gcc-related bug (#2175) ; - Fix stability of mcscf test (#2173) ; - Citation type fix in dft builder (#2176) ; - Keep internal coordinate files in optking (#2188) ; - Bugfix in parallelization of DF gradients (#2193) ; - Fix bug in qcvars for nbody computations (#2191) ; - Use correct libxc functional for wB97X-D3 (#2207) ; - Fix shell core freezing with ECPs (#2222) ; - Fix linear dependency bugs in DCT (#2232, #2233) ; - Return correct energy for ccsd(at) (#2241) ; - Bug in detci printing (2245)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:7847,depend,dependency,7847,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['depend'],['dependency']
Integrability,; 55/412 Test #114: dcft7 ............................ Passed 326.42 sec; Start 76: cc6; 56/412 Test #168: dft-b3lyp ........................ Passed 73.09 sec; Start 75: cc5a; 57/412 Test #11: cbs-delta-energy ................. Passed 115.53 sec; Start 92: cepa-module; 58/412 Test #18: cbs-xtpl-func .................... Passed 1080.73 sec; Start 31: cc15; 59/412 Test #279: opt13 ............................ Passed 828.21 sec; Start 17: cbs-xtpl-opt; 60/412 Test #320: sapt5 ............................ Passed 79.38 sec; Start 27: cc13b; 61/412 Test #293: psimrcc-fd-freq2 ................. Passed 75.55 sec; Start 62: cc44; 62/412 Test #205: frac-ip-fitting .................. Passed 68.55 sec; Start 157: dfomp2p5-grad2; 63/412 Test #28: cc13c ............................ Passed 80.48 sec; Start 298: pubchem1; 64/412 Test #281: opt-irc-1 ........................ Passed 92.68 sec; Start 251: omp2-5; 65/412 Test #116: dcft9 ............................ Passed 80.09 sec; Start 20: cbs-xtpl-wrapper; 66/412 Test #31: cc15 ............................. Passed 63.11 sec; Start 390: python-pubchem; 67/412 Test #317: sapt2 ............................ Passed 375.81 sec; Start 47: cc30; 68/412 Test #76: cc6 .............................. Passed 78.72 sec; Start 59: cc41; 69/412 Test #75: cc5a ............................. Passed 81.00 sec; Start 105: dcft-grad2; 70/412 Test #48: cc31 ............................. Passed 118.12 sec; Start 44: cc28; 71/412 Test #62: cc44 ............................. Passed 62.89 sec; Start 261: omp3-4; 72/412 Test #92: cepa-module ...................... Passed 94.63 sec; Start 257: omp2p5-grad2; 73/412 Test #27: cc13b ............................ Passed 76.46 sec; Start 148: dfomp3-2; 74/412 Test #17: cbs-xtpl-opt ..................... Passed 87.77 sec; Start 58: cc40; 75/412 Test #157: dfomp2p5-grad2 ................... Passed 63.86 sec; Start 163: dft-grad-meta; 76/412 Test #298: pubchem1 ......................... Passed 62.78 sec; Start 101: ci-,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504:6465,wrap,wrapper,6465,https://psicode.org,https://github.com/psi4/psi4/pull/1199#issuecomment-417683504,1,['wrap'],['wrapper']
Integrability,"; File ""<string>"", line 49, in <module>; File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 576, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 2250, in run_scf; scf_wfn = scf_helper(name, post_scf=False, **kwargs); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 1435, in scf_helper; base_wfn = core.Wavefunction.build(scf_molecule, core.get_global_option('BASIS')); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 122, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/p4util/python_helpers.py"", line 87, in _pybuild_basis; return_atomlist=return_atomlist); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 680, in pyconstruct; verbose=verbose); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasisset.py"", line 862, in construct; shells, msg, ecp_shells, ecp_msg, ecp_ncore = parser.parse(entry, lines); File ""/mnt/c/Users/guido/workcopies/psi4/objdir/stage/lib/psi4/driver/qcdb/libmintsbasissetparser.py"", line 304, in parse; contraction = float(what.group(3)). ValueError: could not convert string to float: '0.6757974388D-01'. Printing out the relevant lines from the Psithon --> Python processed input file:; ****; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSA2D5A0E2'] = basisspec_psi4_yo__anonymousa2d5a0e2; core.set_global_option(""BASIS"", ""anonymousa2d5a0e2""); --> e, wfn = energy('scf', return_wfn=True). !--------------------------------------------------------!; ! !; ! could not convert string to float: '0.6757974388D-01' !; ! !; !--------------------------------------------------------!; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1996:2620,contract,contraction,2620,https://psicode.org,https://github.com/psi4/psi4/issues/1996,1,['contract'],['contraction']
Integrability,"; H 4.649000000000 2.147000000000 0.000000000000; H 2.169000000000 2.147000000000 0.000000000000; H 5.888000000000 0.000000000000 0.000000000000; H 2.169000000000 -2.147000000000 0.000000000000; H 4.649000000000 -2.147000000000 0.000000000000; ```. Running in c1 symmetry. Nuclear repulsion = 697.113178296437809. Charge = 0; Multiplicity = 1; Electrons = 94; Nalpha = 47; Nbeta = 47. ==> Algorithm <==. SCF Algorithm Type is OUT_OF_CORE.; DIIS enabled.; MOM disabled.; Fractional occupation disabled.; Guess Type is CORE.; Energy threshold = 1.00e-08; Density threshold = 1.00e-10; Integral threshold = 0.00e+00. ==> Primary Basis <==. Basis Set: CC-PVDZ; Number of shells: 114; Number of basis function: 246; Number of Cartesian functions: 260; Spherical Harmonics?: true; Max angular momentum: 2. ==> Pre-Iterations <==. ---. ```; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; ```. ---. ```; A 246 246 0 0 0 0; ```. ---. ```; Total 246 246 47 47 47 0; ```. ---. Starting with a DF guess... OEINTS: Wrapper to libmints.; by Justin Turney. Calculation information:; Number of atoms: 24; Number of AO shells: 114; Number of SO shells: 114; Number of primitives: 358; Number of atomic orbitals: 260; Number of basis functions: 246. ```; Number of irreps: 1; Number of functions per irrep: [ 246 ]. Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35.; ```. ==> Integral Setup <==. ==> DFJK: Density-Fitted J/K Matrices <==. ```; J tasked: Yes; K tasked: Yes; wK tasked: No; OpenMP threads: 1; Integrals threads: 1; Memory (MB): 3576; Algorithm: Core; Integral Cache: NONE; Schwarz Cutoff: 1E-12; Fitting Condition: 1E-12; ```. => Auxiliary Basis Set <=. Basis Set: CC-PVDZ-JKFIT; Number of shells: 426; Number of basis function: 1210; Number of Cartesian functions: 1384; Spherical Harmonics?: true; Max angular momentum: 3. Minimum eigenvalue in the overlap matrix is 5.4113217503E-05.; Using Symmetric Orthogonalization.; SCF Guess: Core (One-Electron) Hamiltonian. ==> Iterati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/61:5961,Wrap,Wrapper,5961,https://psicode.org,https://github.com/psi4/psi4/issues/61,2,['Wrap'],['Wrapper']
Integrability,; Start 230: mp2-module; 220/411 Test #224: molden2 .......................... Passed 17.32 sec; Start 231: mp2p5-grad1; 221/411 Test #228: mp2-grad1 ........................ Passed 9.84 sec; Start 232: mp2p5-grad2; 222/411 Test #229: mp2-grad2 ........................ Passed 9.84 sec; Start 233: mp3-grad1; 223/411 Test #200: fnocc2 ........................... Passed 59.94 sec; Start 234: mp3-grad2; 224/411 Test #231: mp2p5-grad1 ...................... Passed 7.83 sec; Start 235: mp2-property; 225/411 Test #233: mp3-grad1 ........................ Passed 8.32 sec; Start 236: mpn-bh; 226/411 Test #235: mp2-property ..................... Passed 4.28 sec; Start 237: nbody-he-cluster; 227/411 Test #232: mp2p5-grad2 ...................... Passed 13.18 sec; Start 238: nbody-intermediates; 228/411 Test #234: mp3-grad2 ........................ Passed 12.06 sec; Start 239: numpy-array-interface; 229/411 Test #226: mp2-1 ............................ Passed 30.19 sec; Start 240: ocepa-freq1; 230/411 Test #239: numpy-array-interface ............ Passed 0.80 sec; Start 241: ocepa-grad1; 231/411 Test #219: mints-benchmark .................. Passed 43.72 sec; Start 242: ocepa-grad2; 232/411 Test #236: mpn-bh ........................... Passed 7.46 sec; Start 243: ocepa1; 233/411 Test #204: frac-ip-fitting .................. Passed 80.74 sec; Start 244: ocepa2; 234/411 Test #243: ocepa1 ........................... Passed 18.49 sec; Start 245: ocepa3; 235/411 Test #241: ocepa-grad1 ...................... Passed 28.23 sec; Start 246: omp2-1; 236/411 Test #183: isapt2 ........................... Passed 136.14 sec; Start 247: omp2-2; 237/411 Test #238: nbody-intermediates .............. Passed 36.59 sec; Start 248: omp2-3; 238/411 Test #246: omp2-1 ........................... Passed 16.61 sec; Start 249: omp2-4; 239/411 Test #237: nbody-he-cluster ................. Passed 71.20 sec; Start 250: omp2-5; 240/411 Test #247: omp2-2 ........................... Passed 43.37 sec; Start 251: omp,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538:21423,interface,interface,21423,https://psicode.org,https://github.com/psi4/psi4/pull/1087#issuecomment-408854538,1,['interface'],['interface']
Integrability,"= 1.325; b_start = 1.355; b_num = 20; aa = np.linspace(1, 1.2, 6); a = np.linspace(1.25, a_end, 3); b = np.linspace(b_start, 2.5, b_num); c = np.linspace(2.6, 10, 8); Rvals = np.concatenate((aa, a, b, c), axis=None). # Dictionary to store energies; ecp = {}. # Loop over R values; for R in Rvals:; if R <= a_end:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 0, 'NUM_DETS_PRINT': 40}); elif R >= b_start:; psi4.set_module_options('detci', {'num_roots': 3, 'follow_root': 1, 'NUM_DETS_PRINT': 40}). # Create CF molecule geometry; cf = psi4.geometry(cf_geometry.format(R)); ; # Run CASSCF calculation; try:; casscf_energy = psi4.energy('casscf'); ; # Store energies; ecp[R] = [; casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' % 0),; psi4.core.variable('ci root %d TOTAL ENERGY' % 1),; psi4.core.variable('ci root %d TOTAL ENERGY' % 2); ]; except Exception as e:; print(f""Error at R={R}: {e}""); ; # Clean up Psi4 core; psi4.core.clean(); ```; The new error message is: ; ```; Warning: iopen=0,opentype!=closed. Making iopen=1; ras_set3():Warning:Occupied electrons beyond ACTIVE orbs!; (set_ras_parms): detecting 1 alpha electrons in RAS III for irrep 3.; Some parts of DETCI assume all elec in I and II; Traceback (most recent call last):; File ""cf_casscf_pec.py"", line 50, in <module>; casscf_energy = psi4.energy('casscf'); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/driver.py"", line 526, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/proc.py"", line 5466, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/home/sanctus/psi4conda/lib/python3.8/site-packages/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 49, in mcscf_solver; ciwfn = core.CIWavefunction(ref_wfn); RuntimeError:; Fatal Error: DETCI: electrons detected outside of active space. Error occurred in file: /home/conda/feedstock_root/build_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631:1607,message,message,1607,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2153825631,1,['message'],['message']
Integrability,"= 179.050978 0.000006 0.918241 179.969219; 	 458 D(80,79,81,82) = -0.723483 -0.000001 0.699743 -0.023740; 	 459 R(1,57) = 4.556972 0.028391 82.812579 87.369551; 	 460 R(1,59) = 4.234547 -0.016108 88.866233 93.100780; 	 461 R(1,61) = 5.234532 -0.079923 136.786876 142.021408; 	 462 R(3,10) = 4.421241 -0.017502 87.218679 91.639920; 	 463 R(3,59) = 3.917839 0.129694 117.366756 121.284594; 	 464 R(26,42) = 5.126758 -0.254383 106.705426 111.832184; 	 465 R(27,42) = 5.013692 -0.066414 135.796477 140.810169; 	 466 R(27,43) = 3.922541 0.040579 56.026763 59.949304; 	 467 R(31,42) = 4.773179 -0.049073 86.931871 91.705050; 	 468 R(36,42) = 5.289417 -0.215249 119.067163 124.356580; 	 469 R(38,42) = 4.228544 -0.108830 108.926322 113.154866; 	 470 R(38,48) = 3.625076 0.487672 45.283805 48.908881; 	 471 R(40,42) = 3.912528 0.142787 93.032857 96.945385; 	 472 R(40,43) = 3.961431 -0.231133 75.232676 79.194108; 	 473 R(43,51) = 4.402298 -0.008954 137.557753 141.960051; forrtl: error (76): Abort trap signal; Image PC Routine Line Source ; libgdma.so 00007FB33148410F for__signal_handl Unknown Unknown; libpthread-2.31.s 00007FB3362A83C0 Unknown Unknown Unknown; libc-2.31.so 00007FB3360E718B gsignal Unknown Unknown; libc-2.31.so 00007FB3360C6859 abort Unknown Unknown; core.cpython-37m- 00007FB3339FF4C7 Unknown Unknown Unknown; core.cpython-37m- 00007FB332555F1D Unknown Unknown Unknown; core.cpython-37m- 00007FB33256F3B1 Unknown Unknown Unknown; core.cpython-37m- 00007FB3320330E6 Unknown Unknown Unknown; python3.7 000055D780EDE114 _PyMethodDef_RawF Unknown Unknown; python3.7 000055D780EDE231 _PyCFunction_Fast Unknown Unknown; python3.7 000055D780F42A5D _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780EDD917 _PyFunction_FastC Unknown Unknown; python3.7 000055D780F3F0A6 _PyEval_EvalFrame Unknown Unknown; python3.7 000055D780E976F9 _PyEval_EvalCodeW Unknown Unknown; python3.7 000055D780E985F4 PyEval_EvalCodeEx Unknown Unknown",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1921:48127,Rout,Routine,48127,https://psicode.org,https://github.com/psi4/psi4/issues/1921,1,['Rout'],['Routine']
Integrability,"> ""Maybe you're just observing noise because you haven't converged the equations fully tightly."". How can I converge the equations fully tightly? Which parameter do I need to modify?. ; > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems."". From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?. @JonathonMisiewicz . thx",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-968637309:364,depend,dependent,364,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968637309,1,['depend'],['dependent']
Integrability,"> . Created new test cases in the same input file, i.e. doing non-hybrid/hybrid+DISP/hybrid+FIXED in the same test file. I think this is the way to go since it is what we did when adding in the hybrid feature. Warning messages added in documentation and SAPT(DFT) output.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542:218,message,messages,218,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1279657542,1,['message'],['messages']
Integrability,"> 1. Libxc: This line https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L38 > includes libxc/xc.h when libxc installs include/xc.h. Yes, I've been pushing for namespaced headers (point 2 of https://gitlab.com/libxc/libxc/issues/61). If we really must, Psi can do non-namespaced libxc, but haven't gotten much response either way from upstream. > 2. Libxc project doesn't install .cmake files that you rely on. Only cmake build installs .cmake files and cmake build is broken:; https://gitlab.com/libxc/libxc/issues/66; https://gitlab.com/libxc/libxc/issues/67; https://gitlab.com/libxc/libxc/issues/68. I've fixed the latter two of these in https://gitlab.com/libxc/libxc/merge_requests/113. Not sure what to do about the first -- I really wish they would namespace their headers. The greater Libxc problem is that even if the above two points were cleaned up, there is no upstream Libxc release that has ever worked with Psi4. The Libxc3 series didn't have cmake. Early Libxc4 changed the interface so that some features we needed weren't accessible. Current Libxc4 master has those features, but they're not available in a release. When the questions of https://gitlab.com/libxc/libxc/issues/61 are resolved, https://github.com/psi4/psi4/pull/1101 is ready. > Libint: Similarly to Libxc, Libint has problems in its cmake build and it can't be used evaleev/libint#111 evaleev/libint#112. Thanks for pinging me on these. I don't watch that repo.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737:1028,interface,interface,1028,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-433085737,1,['interface'],['interface']
Integrability,"> ; > ; > One thing I noticed while investigating this a bit: If you run the command `np.show_config()`, you can see that the Numpy binaries from Conda-forge and pypi are built using different BLAS and LAPACK. The Numpy binary on pypi is built using `openblas` and the Conda-forge binary is built using something called `cblas`. I'm not sure what `cblas` is, but this build seems to be much faster for some numpy functionality than the `openblas` build on pypi. Just something interesting that might be of use to M1 users.; > ; > It looks like cblas might be Apple's own BLAS implementation:https://developer.apple.com/documentation/accelerate/blas, but I'm not really sure if this is the case or how it relates to the Accelerate framework. This is beyond my knowledge base. Perhaps someone else knows and can elaborate. `CBLAS` is typically just a wrapper written in C, to provide a ""least common denominator"" interface for the Fortran subroutines making up a typical BLAS implementation. The computational backend beyond that `CBLAS` could be pretty much anything, including OpenBLAS. Apple does not seems to be interested in enabling open source developers to utilize their silicon, to the point where people need to reverse engineer their libraries to find out what [undocumented instructions they use](https://gist.github.com/dougallj/7a75a3be1ec69ca550e7c36dc75e0d6f) to perform fast math operations. I find that rather anti-consumer and anti-competitive, to put it mildly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876:849,wrap,wrapper,849,https://psicode.org,https://github.com/psi4/psi4/issues/2333#issuecomment-956398876,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,> ; > ; > Thank you all for the responses. It was the first time the terminal gave me non English response. I also did not know the trick with dmesg indicated by @TiborGY. Please note that the kernel log (dmesg) will only show the OOM-killer messages if the *entire computer* ran out of memory (as in RAM+swap).,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234:242,message,messages,242,https://psicode.org,https://github.com/psi4/psi4/issues/2297#issuecomment-925261234,1,['message'],['messages']
Integrability,"> ; > ; > This issue has been open for almost a month now. I'll deal with this in a week if it hasn't been taken by then.; > ; > I've plugged this as a good new developer issue in the HFS group, so we'll see if anything happens. I might have done it, but at the moment I cannot really invest the time to properly set up a dev env (especially all the numpy/BLAS/OMP dependency migraine), fix the issue, and send in a PR.; Sorry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-625366719:365,depend,dependency,365,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-625366719,1,['depend'],['dependency']
Integrability,"> > ""Maybe you're just observing noise because you haven't converged the equations fully tightly.""; > ; > How can I converge the equations fully tightly? Which parameter do I need to modify?. Set `d_convergence`. The default is 1e-6. You could set it to smaller numbers and see if the correlation improves. If you set it too low, the equations may not converge. You will see this problem if you try to set it below 1e-12, but you will probably see it at a larger number. . > > ""There was a bugfix between 1.4 and 1.4.1 that specifically affected computations with density-fitted integrals (which you use by default), an omega functional, and a linearly dependent auxiliary basis set like you would see in large systems.""; > ; > From the calculation results, the results of v1.4 seems to be more reasonable, because it has a higher correlation with other results. For v1.4.1, did I use it wrong? how to modify the code?; > . I feel like you are not listening to me. I don't trust your ORCA and Psi4 comparisons, and it's perfectly reasonable for 1.3.2 and 1.4 to agree with each other but not 1.4.1, if both 1.3.2 and 1.4 had a bug. I do not trust that the results of 1.4 are more reasonable. Like I said before. Find the system where the energy changes the most between 1.4 and 1.4.1, tell us what the energies are, and tell us the system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767:653,depend,dependent,653,https://psicode.org,https://github.com/psi4/psi4/issues/2351#issuecomment-968823767,1,['depend'],['dependent']
Integrability,"> > @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > > ; > > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place.; > ; > @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already."". Looks like hacky code. I'll send a patch",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633:107,interface,interface,107,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194210633,1,['interface'],['interface']
Integrability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:370,rout,route,370,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,1,['rout'],['route']
Integrability,"> > @zachglick, thoughts? I strongly preferred your plan before, but it wasn't something I was going to insist on.; > ; > I'll drop a comment on this matter for for an extra perspective. The original plan is quite fine, and many good points were made regarding improvements to efficiency within the Incfock routine. However, the original plan proposed completes the unified Incfock formalism over two PRs, and the impression I get is that the standardization of the Incfock process is really happening in Step 2. The CompositeJK pilot implementation (i.e., the unification of DFJCOSK and DFJLinK + CompositeJK front end) really only needs Step 2 to proceed, then, while Step 1 of the proposed Incfock work (i.e., the improvement of the Incfock process itself) could likely be done independently from CompositeJK. Basically, my thought is that, by switching Steps 1 and 2 of the original proposed plan for Incfock, that would allow the second CompositeJK PR to be put into Psi4 more quickly and allow parallel development of CompositeJK and the JK Incfock formalism.; > ; > I am overall fine with either ordering for Incfock PR steps, but I figured I would at least bring this up. Thinking about this a little more, one may be able to do the Incfock development parallel to CompositeJK in the ordering suggested in Zach's original plan. Essentially, one would modify DFJLinK to use DFJCOSK's Incfock scheme, which gives the two a unified Incfock among themselves and would allow for continuation of CompositeJK. Then, the same Incfock used in DFJCOSK would be added to DirectJK. And finally, the Incfock could be added to the JK class. This adds an extra PR to the original plan (DFJLinK Incfock modification), but both maintains Zach's original PR ordering and allows for parallel development of CompositeJK with Incfock modifications. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1303661796:307,rout,routine,307,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1303661796,1,['rout'],['routine']
Integrability,"> > Hopefully psi4 will hit conda forge soon; > ; > Agreed. There's some conflicting dependency issues to work out beforehand. More specifically, #2537 is the next step, AFAIK. We'd love to work on this, but a few other things (SCF cleanup and a new feature, double-checking ECPs, and overdue maintenance of `dfocc`) are higher priority for Lori and I.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257:85,depend,dependency,85,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1165034257,1,['depend'],['dependency']
Integrability,"> > I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users.; > ; > I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic.; > ; > It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect. OK, then let's go ahead.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946:669,rout,route,669,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533165946,1,['rout'],['route']
Integrability,"> > I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go.; > ; > But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps. For CASSCF, we **have to** do per subspace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869314229:114,depend,dependent,114,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869314229,1,['depend'],['dependent']
Integrability,"> > This PR automates the computation of MBIS volume ratios by computing free-atom densities at the same level of theory as the molecule. The free-atom computations are on the ground state of a given atom, with the multiplicity taken from the SAD code.; > ; > This also means that the density you'll get is likely symmetry-broken; does your code handle that? The multiplicities may also not be correct. Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791589519:466,rout,routine,466,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791589519,1,['rout'],['routine']
Integrability,"> > would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?; > ; > What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4.; > ; > I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable. I'm trying to build a ML model that can predict the converged density matrix. To verify whether the model is of any value, I wish to plug the predictions into a quantum chemistry program. . The problem is that the dataset I'm using (`QMugs`) has used `psi4` to calculate ""groundtruth"" energies & density matrices at the DFT level. So, my ML model is learning to output density matrices with the ordering convention used by `psi4`. If I wish to plug it into a different software, like `PySCF`, I believe I'll have to do some re-ordering or transformations... Would simply re-ordering the rows/columns not work? (my understanding was that if the basis set was identical, but just that one program uses say `px py pz` vs another using `pz py px` a reordering would suffice, but I'm not exactly a quantum chemistry expert...). Similarly, I wish to compare the convergence rates of my ML model's predicted density matrices against default initial guesses, and also just look at the matrices themselves to compare how they look like (for my own understanding/analysis)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276:377,interoperab,interoperable,377,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1470128276,1,['interoperab'],['interoperable']
Integrability,"> @SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the **array_interface** on Matrix objects) so that we can correctly return the python values instead of updating them in place. Hi @dgasmith,. Unfortunately not. I had a lot in my plate last month because of my dissertation defense. I agree with you about this possibility as I have already discussed it with @mattwelborn and Sam although I am not aware of specifics you are referring to about the array_interface in Psi4. Since C extension in python is out of my comfort zone in programming, it might take me some time to work it out considering a few other tasks w/ priorities on my list, in case if you want me to do that. If so, please point me to the files and directions in Psi4 that I need to look into before I begin. Otherwise, please tell me how can I be of any help. Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-643814110:122,wrap,wrapper,122,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643814110,1,['wrap'],['wrapper']
Integrability,"> @davpoolechem , hooray approved!; > ; > 1. do you want to fix the conflict and rebase so CI passes or do you want me to do it in the GH GUI?; > ; > 2. I'm not considering a gauxc conda package a requirement to merge, but should we activate compiling it in an Azure lane to ensure in working order?. Fantastic! Happy to see it!. 1. I would indeed like to, yes.; 2. The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277887714:381,interface,interface,381,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277887714,1,['interface'],['interface']
Integrability,"> @hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at; > ; > https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218; > that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. @susilehtola? It looks like this code was added as part of Psi adopting LIbXC in May 2017, so this may be as simple as ""it's perfectly legitimate to change omega here; the code needs to be modernized already.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194172697,1,['interface'],['interface']
Integrability,"> @loriab Can we close this? I think this is wrapped up by now. Sure, go ahead. I think I was using it to track a snapshot of file, but it's outlived its usefulness. And certainly REMP is wrapped up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1540502506:45,wrap,wrapped,45,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1540502506,2,['wrap'],['wrapped']
Integrability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:361,rout,route,361,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,1,['rout'],['route']
Integrability,"> @loriab might be a better place to recommend. But my first thought it `tests/pytests/test_mints.py`. This would be a new file, but a good place for libmints unit tests.; ; Would it be best to still test this function by contracting the exported dipole derivates with a density and then comparing results to the `dipole_grad()` function in mintshelper that contracts the dipole derivatives with an AO density before exporting to python side?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265:222,contract,contracting,222,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-597238265,2,['contract'],"['contracting', 'contracts']"
Integrability,"> @zachglick, thoughts? I strongly preferred your plan before, but it wasn't something I was going to insist on. I'll drop a comment on this matter for for an extra perspective. The original plan is quite fine, and many good points were made regarding improvements to efficiency within the Incfock routine. However, the original plan proposed completes the unified Incfock formalism over two PRs, and the impression I get is that the standardization of the Incfock process is really happening in Step 2. The CompositeJK pilot implementation (i.e., the unification of DFJCOSK and DFJLinK + CompositeJK front end) really only needs Step 2 to proceed, then, while Step 1 of the proposed Incfock work (i.e., the improvement of the Incfock process itself) could likely be done independently from CompositeJK. Basically, my thought is that, by switching Steps 1 and 2 of the original proposed plan for Incfock, that would allow the second CompositeJK PR to be put into Psi4 more quickly and allow parallel development of CompositeJK and the JK Incfock formalism. I am overall fine with either ordering for Incfock PR steps, but I figured I would at least bring this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1303625951:298,rout,routine,298,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1303625951,1,['rout'],['routine']
Integrability,"> A general advice after an PSIO error of sth like: 'check your scratch directory location and how much space you got', could go a long way. Certainly. Having `PSI_SCRATCH=/tmp` can either cause the system run out of memory, or out of ""disk space"" on `/tmp` which is at most the size of RAM, if tmpfs is used. Perhaps even printing the scratch dir location in the error message would help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535:370,message,message,370,https://psicode.org,https://github.com/psi4/psi4/issues/1965#issuecomment-724408535,1,['message'],['message']
Integrability,"> AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with USE_OPENMP=1. This is correct. OpenBLAS used to spam `stderr` (i think) with a warning everytime you call a pthreaded BLAS inside an openmp region. I was expecting to see it for my test with the ""wrong"" openblas library, but maybe psi4 redirects it. Or i accidentally used USE_OPENMP=1 for both tests..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490:66,rout,routines,66,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390199490,1,['rout'],['routines']
Integrability,"> Already known and fixed in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place. OK",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664:314,depend,depend,314,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277664,1,['depend'],['depend']
Integrability,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:654,interface,interface,654,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358,1,['interface'],['interface']
Integrability,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:285,wrap,wrap,285,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632,1,['wrap'],['wrap']
Integrability,> Any error message on the crash?. No.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/923#issuecomment-368940098:12,message,message,12,https://psicode.org,https://github.com/psi4/psi4/issues/923#issuecomment-368940098,1,['message'],['message']
Integrability,"> Are there particular packages you'd need besides required, optimization, and dispersion?. No, so far, I am just exploring a few ideas/experiments (using qcengine mostly) and only require `psi4`. I can get `psi4` running, but integration with other internal packages is very challenging (if not impossible) without a binary-compatible c-f package. > Many of the deps are compiled or psi is using a slight fork or need windows work. do you have specialties? :-). I can only develop a package on my Linux machine. No problem to also build on the CI for osx/windows, but debugging is much harder on those platforms. I have experience building CMake based C/C++ packages on c-f (as long as it does not require diving too deep in the C/C++ code). > Roughly, my plan is to start compiling psi4 locally with c-f conditions and the very basic deps and post them to a psi4/label/cf channel. Libint2 must still pull from psi4 channel for the forseeable future. Glad to talk strategy, esp. after 12 Dec. Beside libint2, it looks like you are quite close here. I don't know if you are aware of it but you can easily run a c-f build (almost identical to the ones on the CI) using the `build_locally.py` script. See https://conda-forge.org/docs/maintainer/updating_pkgs.html#testing-changes-locally for the details. That script is available in the feedstock repo but also in the `staged-recipes` repo for package that does not yet exist.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605:227,integrat,integration,227,https://psicode.org,https://github.com/psi4/psi4/issues/2621#issuecomment-1337307605,1,['integrat'],['integration']
Integrability,"> Can you expand a bit on ""not really header-only""? Checking the source code, I only see `hpp` files. Sure. If the armadillo runtime library is to be used, `src/wrapper.cpp` is compiled and; one can simply link against `armadillo`. However, this wrapper can also be switched off. In this case, one needs to link directly against BLAS and LAPACK. The [documentation](http://arma.sourceforge.net/faq.html) explains this in a little more detail in the _Linking_ section. I have never tried to use armadillo without the wrapper to be honest... I'll give it a try.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835:161,wrap,wrapper,161,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445558835,3,['wrap'],['wrapper']
Integrability,"> Can you provide a before-and-after example of what error messages look like?. Hmm, yes I reckon if I ran something with a ~50 MB ramdisk as the scratch drive, that should be a reliable way to trigger a write failure. My immediate-term schedule just got a lot busier, so I might not get around to doing this for a week or so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441:59,message,messages,59,https://psicode.org,https://github.com/psi4/psi4/pull/2756#issuecomment-1291906441,1,['message'],['messages']
Integrability,"> Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it.; > ; > All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc.; > ; > This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in [#2261 (comment)](https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277); > ; > In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified. All fair criticisms, and that clears it up. The code was originally pure C and later modified to fit (nominally) within a C++ framework, hence the structure of the variable declarations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467:176,Depend,Depending,176,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467,1,['Depend'],['Depending']
Integrability,"> Cool, this looks really neat! I was thinking this might take a bit to get in, but looks fairly integrated as is. Thanks! It's the first time I try to contribute to psi4, and I found it actually rather easy to; add my project given the online documentation :+1: . > IIRC Armadillo is header only which makes things significantly easier to interface too. I don't think the inclusion of the library for this extension will be an issue. Unfortunately, it is _not really_ header-only... Probably I'll switch to something header-only (like Eigen) if I find the time. Anyways, the inclusion of armadillo has not been a problem until now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668:97,integrat,integrated,97,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-445555668,2,"['integrat', 'interface']","['integrated', 'interface']"
Integrability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:600,rout,routes,600,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,1,['rout'],['routes']
Integrability,"> For future reference: since this is a bug in the Psi4 Fedora package, you should file the bug in the Fedora bug tracker. Yeah, @susilehtola, I'm opening the bug here and in Fedora too, of course.; @loriab if I remember correctly, Boost is a dependency in Fedora ('s psi4), so it may be the case..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531#issuecomment-263452883:243,depend,dependency,243,https://psicode.org,https://github.com/psi4/psi4/issues/531#issuecomment-263452883,1,['depend'],['dependency']
Integrability,"> For the record, I'm not happy about dropping Py 3.7 support. The last time I tried to build Psi and Forte, using Py 3.7 was the only way I can get it to work. I can do some more investigation as to where the conflict is. oh, I hadn't heard that constraint. I wonder if it could be just a pinned dependency (e.g., hdf5) that could only be satisfied by chance with a 3.7 python. fwiw, the dropping 3.7 at this point is only a build-fewer-conda-packages consequence. if you change it back to `find_package(Python 3.7)`, 3.7 works fine. Let me know if I can run any tests/environments to help find out if this is a packages or actual language limitation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806:297,depend,dependency,297,https://psicode.org,https://github.com/psi4/psi4/pull/2455#issuecomment-1052346806,1,['depend'],['dependency']
Integrability,"> Given how difficult PSIO is to use for non-experts (which is anybody who is going to be using it nowadays), I'd rather keep thin but descriptive wrappers. Very well. The two functions in question are now preserved.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1257070240:147,wrap,wrappers,147,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1257070240,1,['wrap'],['wrappers']
Integrability,"> Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though. Note that SAD hasn't been using those values in a long time; instead it runs spin-restricted calculations. Also, SAD isn't symmetry aware at the moment, which is a problem especially for transition metals and lanthanides and actinides where e.g. the s and d orbitals are very close in energy and the energy differences between different configurations are just eV. The proper way to do it is to impose symmetry, so that the occupations can be controlled. This is the way it is in PySCF; the ground states are from fully numerical calculations I did in https://journals.aps.org/pra/abstract/10.1103/PhysRevA.101.012516",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679:65,rout,routine,65,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679,1,['rout'],['routine']
Integrability,"> Great change. However, I would propose eliminating the old print statements, since the same information is in the error message. I have considered doing that, but I am not entirely comfortable with it because `throw PSIEXCEPTION` is not perfectly reliable when it comes to delivering the error message to the user. For example see https://github.com/psi4/psi4/pull/2997. Until a reliable solution is found for the error messages getting swallowed up on some platforms, I am reluctant to remove the traditional error messages. But in principle I agree completely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092:122,message,message,122,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1876910092,4,['message'],"['message', 'messages']"
Integrability,"> Great!; > ; > If you need more precision, set the PySCF grids by a pair of numbers, rather than by grid level. That should disable PySCF's numerical integration grid pruning. Psi is not pruned, by default. That does not suffice. In addition to setting the grid with e.g. `mf.grids.atom_grid = (100,590)` you need to turn pruning off explicitly with `mf.grids.prune = None`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356:151,integrat,integration,151,https://psicode.org,https://github.com/psi4/psi4/issues/2911#issuecomment-1487415356,1,['integrat'],['integration']
Integrability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:510,message,message,510,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,1,['message'],['message']
Integrability,"> Hi Yi,; > ; > Thanks for your work and the comments. I've been discussing some with Jonathon, and I think if you could do the below, that will clarify all the scaling factor and testing aspects of the PR, so we can move on to the I/O optimization and routing logic parts. Please let me know of any concerns.; > ; > * accept the various GH suggestions clarifying the scaling scheme changes (only if you agree with them, of course). Feel free to make the changes locally, rather than through the GH interface, if that makes the git operations easier.; > * edit sapt-dft1 test to be something like the below. This adds an extra section without the deltaHF correction. The analogous value in test sapt-dft2 is `DHF = -1.42620815`. This passes on master for me, so having the dHF=False pass on your PR will help verify the separate routing logic you added. With this in place, there won't be a need to separate out tests into another PR.; > ; > ```; > #! SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms.; > ; > DHF = -0.01189736 #TEST; > Eref_nh = {""SAPT ELST ENERGY"": -0.10190449, #TEST; > ""SAPT EXCH ENERGY"": 0.36545706, #TEST; > ""SAPT IND ENERGY"": -0.00840483, #TEST; > ""SAPT DISP ENERGY"": -0.24398704, #TEST; > ""CURRENT ENERGY"": 0.01122234} #TEST; > ; > Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > se",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:253,rout,routing,253,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,3,"['interface', 'rout']","['interface', 'routing']"
Integrability,"> I am not planning to look at this code until your other two PRs (#2155 and #2187) are closer to acceptance but am leaving some ""triage"" comments.; > ; > * Labels in the title are an eyesore, and GitHub has its own labels feature. I've added them as proper labels instead. Similarly, in future, please mark a PR as draft rather than add a ""[Work in Progress]"" text tag.; > * It isn't clear to me if there's anything in particular you want to get by submitting this PR when it's not even marked for review. Did you submit this to get feedback on the ""Do we need a new JK object?"" question?; > * I am going to ask that _in future_, you have more descriptive git commits rather than whatever words are currently on your mind. As somebody who has to debug Psi decently often, commit histories are often an invaluable clue to figuring out what the intention behind some obscure piece of code is. I'd _prefer_ if you cleaned up the commit messages for this PR, but I'm not going to insist on it. Also, I opened this PR early in order to a) Update the Psi developers on the progress of the new CFMM code, and b) To get y'all to start thinking about the future of the JK class, and potential design choices for if a user would like to run, per se DF-J + linK, CFMM-J + chain-of-spheres K, etc. Also, most of my ""non-sense"" PR messages result from the fact that I have to change branches, so I make a quick push to GH before I switch to another project, and can be safely ignored, as they don't mean anything. I will avoid doing such a thing in the future though, and add more descriptive Git messages :) However, the descriptive commit messages DO mean something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054:934,message,messages,934,https://psicode.org,https://github.com/psi4/psi4/pull/2311#issuecomment-933583054,4,['message'],['messages']
Integrability,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:151,depend,dependency,151,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['depend'],['dependency']
Integrability,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343774871:194,depend,dependency,194,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871,1,['depend'],['dependency']
Integrability,> I do think we should try to get the changes into one psi4 release cycle. Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070:101,message,message,101,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256964070,1,['message'],['message']
Integrability,"> I don't know the DFT infrastructure at all, so can you give me a big picture overview of what this PR is doing? I know that DFT relies on numerical integration, and I know that a block contains numerical integration points, but I don't know what a block is used for. Instead of making a loop over all grid points that calculates basis function values and XC contributions one by one , the points are grouped together into blocks for efficiency reasons.; Currently there is no connection between a single grid point and the atom it originally belongs to. One block of points can even contain grid points from multiple atoms. This connection is lost immediately after the grid is constructed. Adding it back is a bit awkward and e.g. `remove_distant_points(extents_->maxR());` needs to be rewritten with the new data structure. This feature is needed for algorithms or methods that look at contributions from atoms when looping over the grid points. Right now, those new things are not needed, and thus not used anywhere, but they will be used for COSX and ddCOSMO. So you might want to access for a given atom all blocks of grid points, where a block has only grid points from that atom. This is what `atomic_blocks` provides. However that leads to a double-loop (see examples) and possibly worse parallelization. For a simple loop over all block, like what is used now, you want to know the atom to which the current block belongs (-> `parent_atom`) to collect values by atom. Two options the developers can chose from. This is part 1 to get it the basics out faster and allow COSX and ddCOSMO development to continue. cubature.cc still needs a big cleanup, but that has to wait.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104:150,integrat,integration,150,https://psicode.org,https://github.com/psi4/psi4/pull/2336#issuecomment-952307104,2,['integrat'],['integration']
Integrability,"> I finished about half of the review and then got confused about the ""big picture."" If you're only intending to support point charges, then what happens if a user passes in an external potential object with basis functions attached? I can't find a place in this code that limits the kind of external potentials that can be considered. And why are there lines of code to get and append basis functions from/to the external potential? If you don't intend to support basis function external potentials (and it isn't clear to me if you intend to or not), then there should be a user-friendly error message when a user tries this. And on the topic, what is the technical barrier to including basis function external potentials? Is there a reason why those are being excluded from this PR, if they are?; > ; > I'll need to re-review once changes are made, and this issue of basis function external potentials is clarified. Please see the updated description above. I removes unnecessary code to make this PR specifically for point charges.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855:595,message,message,595,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-800707855,1,['message'],['message']
Integrability,"> I guess efpmultipolepotential.h and efpmultipolepotential.cc can also be nuked at this point?. Yes, these are gone now. I have some ideas to improve the `multipole_potential` integrals further (e.g., computing multiple sites at once, contracting over the multipole values, etc.), but I'll make another PR for that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1657#issuecomment-500405513:236,contract,contracting,236,https://psicode.org,https://github.com/psi4/psi4/pull/1657#issuecomment-500405513,1,['contract'],['contracting']
Integrability,"> I have realised that I couldn't find any assertion rewriting handler for pytest. Can you check that a failing test executed with pytest prints a reasonable AssertionError? I'd have thought you'd have to add the compare_* functions into pytest's assertion database using pytest.register_assert_rewrite(""""). Thanks for this, @PeterKraus. It cleared up a minor mystery about why the assertions in `standard_suite_runner.py` were behaving differently. I've played around with registering the files, and the pytest introspection printing works, but it isn't particularly better than what currently exists. I think the reason is that the psi compare_* functions write out their own, more informative, error messages. Glad to reconsider if I'm missing something. I think I've addressed your other suggestions. thanks for the review!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585:703,message,messages,703,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078692585,1,['message'],['messages']
Integrability,"> I kinda thought you solved all the the DFOCC convergence issues recently, at great effort. OCC convergence issues, not DFOCC convergence issues. The same trick should solve the convergence issues in DFOCC, but DFOCC is a much more difficult module to work with, so I'm avoiding fixing things there unless absolutely necessary for my research. > Unfortunately, open-shell Brueckner or OO coupled cluster does not seem to be a common feature in QC programs, so I am trying to survey which programs have open-shell capable OO methods. Also, a performant OMP2 or OMP2.5 implementation could potentially be useful for us, even if it does not directly solve the lack of an RBCCD(T) implementation. I don't know if your Robosurfer can use this, but depending on your orbital-optimized method, once you have the energy, the gradient is free. All the orbital-optimized methods in Psi have this property. > o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. That page is for methods that _multiple modules_ support, so you can straighten out which module you want given your specific use for a method. That said, is there a place in the manual where we list all the methods we have? I genuinely don't think so. We should add it, if there isn't one. If you want to see all the energy keywords that Psi recognizes, you can find it in the code [here](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc_table.py#L41). I'd be remiss if I didn't point out that the `dct` module _also_ has some orbital optimized methods. The best one is the default upon entering `energy(dct)`, ODC-12. Use of the others is not recommended for _any_ purpose other than benchmarking. We also have density-fitting for ODC-12. I'll warn you that there is some slight error in the DF grad",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450:744,depend,depending,744,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-612018450,1,['depend'],['depending']
Integrability,"> I modified the error message from being about ""core electrons"" to just ""electrons."" . Ah, copy-paste error. You didn't accept the suggestions tho",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500:23,message,message,23,https://psicode.org,https://github.com/psi4/psi4/pull/2859#issuecomment-1399445500,1,['message'],['message']
Integrability,"> I mostly like the PR now, but one naive question: why do we have a separate filling out of the ""intermediate contraction pointers"" and then +='ing those values to the actual J/K matrices? I understand that old code is doing this, but I want to understand why the codes are doing this. It is because writing to JK matrices inside deeply nested loops leads to frequent thread collisions, which can be offset by using the `#pragma omp atomic` directive. However, using `#pragma omp atomic` inside deep loops is ill-advised, since that directive hinders parallel efficiency. The solution to this problem is to give each thread its own temporary buffer to write to, and then flush those buffers into the actual JK matrices later on, in a shallower nested loop, with `#pragma omp atomic`. Hope this helps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116:111,contract,contraction,111,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1046337116,1,['contract'],['contraction']
Integrability,"> I recall that the restriction arises from an assumption I made about; > storage requirements. I think I was assuming that o^4 and o^3v arrays could; > be stored in a block of memory the size of t2, but I can’t be sure without; > looking through the code a bit. I’m not sure how difficult it would be to; > remove this restriction, but I will look into it.; >; >; > > On Oct 25, 2017, at 3:44 PM, David Sherrill <notifications@github.com>; > wrote:; > >; > > Well, yes, he relative sizes would effect efficiency of contraction; > order,; > > but I don't see why they would make the code not working at all... I; > > suppose this restriction is in there somewhere but I don't see why.; > >; > > On Oct 25, 2017 3:40 PM, ""Susi Lehtola"" <notifications@github.com>; > wrote:; > >; > > @CDSherrill <https://github.com/cdsherrill> @edeprince3; > > <https://github.com/edeprince3> could it be that that nvirt > ndocc is; > an; > > assumption that's made in the contraction order? If nvirt < ndocc then it; > > might be more efficient to contract first over the occupied orbitals?; > >; > > —; > > You are receiving this because you were mentioned.; > >; > > Reply to this email directly, view it on GitHub; > > <https://github.com/psi4/psi4/issues/828#issuecomment-339447402>, or; > mute; > > the thread; > > <https://github.com/notifications/unsubscribe-; > auth/AC9Qdui004ARGwSkbS7HK_Zd_43SDnHZks5sv466gaJpZM4QGSFE>; > > .; > > —; > > You are receiving this because you were mentioned.; > > Reply to this email directly, view it on GitHub <; > https://github.com/psi4/psi4/issues/828#issuecomment-339448378>, or mute; > the thread <https://github.com/notifications/unsubscribe-; > auth/AClSGmYfMcECV7ZQzR0tDtg_pRqgv-OTks5sv4-MgaJpZM4QGSFE>.; > >; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/828#issuecomment-339458114>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339460309:1102,contract,contraction,1102,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339460309,2,['contract'],"['contract', 'contraction']"
Integrability,"> I see that this PR passes without needing to update any tests. Do you think some QCFractal tests would be helpful to have, especially now that we have the distributed driver? I know psi4 has tests that use QCSchema, QCElemental, and QCEngine. Yeah, I think a QCFractal Snowflake test on each of findif, manybody, composite would good, provided solving the dependency env isn't too painful, since a database, etc. are needed. There's unlikely to be a conda pkg for the `next` qcf until September at least.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123:358,depend,dependency,358,https://psicode.org,https://github.com/psi4/psi4/pull/2645#issuecomment-1199824123,1,['depend'],['dependency']
Integrability,"> I simplified the omega setter interface for the `HJS_PBE` https://github.com/psi4/psi4/pull/1101/files#diff-375f534fffdbfb11f5ae38dace0c3ab71230ea1f9eed95df51d21fdfd2589e4aL218-R221 and that fixed custom and smoke. Is that what you had in mind with ""named parameter setter"", @susilehtola?. No. Use `void xc_func_set_ext_params_name(xc_func_type *p, const char *name, double par);` i.e.; ```; xc_func_set_ext_params_name(func, ""_omega"", value_of_omega);; ```; > Now only the ft97 is a problem among ctests. pytests were clean before, but I'll check again. I've never seen anyone use that functional. It looks like it uses `GGA_X_FT97_B` and `GGA_C_FT97`. The latter appears to misbehave, https://gitlab.com/libxc/libxc/-/issues/275. > Are any of these now available in v5.1 that I should be activating?; > ; > ```; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: B3TLAP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: BP86VWN not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LDA0 not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: CAM-LDA0 not in Psi4. LDA0 and CAM-LDA0 are introduced in the upcoming 5.1.0. . I can probably also add P86VWN; it's a trivial modification. https://gitlab.com/libxc/libxc/-/issues/277. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: LRC-BOP not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: PBEsol not in Psi4. PBEsol has been in libxc for ages, since version 2.1.0 released in March 2014. I've opened up a ticket on LRC-BOP (https://gitlab.com/libxc/libxc/-/issues/276); it might not make it to the next release. > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTH not in Psi4.; > SKIPPED [1] ../tests/pytests/test_dft_benchmarks.py:295: t-HCTHh not in Psi4. These have also been in libxc for ages, since version 4.0.0 in 2017. `MGGA_X_TAU_HCTH`+`MGGA_C_TAU_HCTH` and `HYB_MGGA_X_TAU_HCTH`+`MGGA_C_HYB_TAU_HCTH`. > SKIPPED [1] ../tests/p",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459:32,interface,interface,32,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755266459,1,['interface'],['interface']
Integrability,"> I started running on a remote machine, and even though I have PSI_SCRATCH; set on my local machine, I don't have it set on the remote machine; (probably didn't re-source ~/.bashrc after installing psi4. However, it; should be writing to local disks. I can see psi...clean files in the local; directory, are those scratch files?. No, psi.[pid].clean is a little text file that contains a list of all the; scratch files to clean up. You should look at the list of scratch files in; this psi.[pid].clean file to see where it is writing the scratch files, and; make sure that it isn't to a NFS-mounted directory. Otherwise you'll take; a huge performance hit. On Thu, Mar 1, 2018 at 11:05 AM, Lori A. Burns <notifications@github.com>; wrote:. > Possible, but I really doubt it, as glibc mismatches aren't usually; > healable. Usually this is a symptom of packages depending on different; > versions of a library and symbols getting sometimes loaded one way and; > sometimes another depending on import order. Often fixable by swapping; > import order, but in the psi-in-jupyter case, there's simply nothing to; > swap.; >; > I thoroughly expected this to be fixed when I built with the newer; > compilers and was alarmed when it wasn't. @sergsb; > <https://github.com/sergsb>, would you want to try the conda env line in #862; > (comment) <https://github.com/psi4/psi4/issues/862#issuecomment-347074303>; > ? Possibly more defaults packages have been updated to the new compilers; > since November and healed the problem.; >; > Only thing else I can think of is that I'm still linking libc++ statically; > (which it should be entirely safe to do, being the least-fundamental of the; > glibc, libgcc_s, libstdc++ trio) and that's running into a symbol error; > with the jupyter stack.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/862#issuecomment-369640226>, or mute; > the thread;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-369646381:862,depend,depending,862,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-369646381,2,['depend'],['depending']
Integrability,"> I think that requiring pairs of (Alpha, Beta) is the right interface. Another (more clean and less error-prone) option would be to only allow for custom operators in the AO basis...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168:61,interface,interface,61,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-966518168,1,['interface'],['interface']
Integrability,"> I wonder if it's the syntax qc_module=""ccenergy"" is confusing since that's the name of the CC energy code, but it's signaling to compute gradients analytically. I'm not sure what I'd prefer, but I don't think this will be obvious to most users. I agree there's not a great name for the cc suite. Only alternative I've seen is `cc*`. `cc` alone seems too generic. It looks like the `qc_module=ccenergy` came about for this role between beta5 and v1.0: https://github.com/psi4/psi4archive/blob/1.0.x/src/bin/psi4/read_options.cc#L165-L168 . So it's longstanding, though probably little used. If you think of a preferred alias, it'd be easy enough to re-route, I suspect.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060:653,rout,route,653,https://psicode.org,https://github.com/psi4/psi4/pull/2943#issuecomment-1533160060,1,['rout'],['route']
Integrability,"> I would _hope_ that there is no density on the CCSD wavefunction. there isn't unless you call `gradient` or `properties` generally, which is why I tend to do my own density/prop integral contractions rather than calling `oeprop` so I know what I'm getting. . > it would be good for us to put in a warning to encourage this. I definitely agree 👍",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869245886:189,contract,contractions,189,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869245886,1,['contract'],['contractions']
Integrability,"> I would indeed like to, yes. 👍 . > The Psi4/GauXC interface supports using internally-built instances of GauXC. At first thought, we should be able to add it to Azure using the internal GauXC build process, right?. Right, internal build, by adding `ENABLE_gauxc=ON` about here: https://github.com/psi4/psi4/blob/master/.azure-pipelines/azure-pipelines-linux.yml#L135 . And please check there's a gauxc test somewhere in ctests or pytests that runs with smoke or quick -- the ones I noticed were marked long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059:52,interface,interface,52,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2277999059,1,['interface'],['interface']
Integrability,"> I would prefer to use `do_LinK` as user facing option over a general `do_linear_exchange`. LinK is not the only available linear scaling exchange implementation in the literature.; > ; > Also please let the user know that LinK is active. At least I didn't see it in the test output files. I added just added the LinK flag in the output files. I also added a personal message in case someone has questions about this code in the future, they know who to bug :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293:369,message,message,369,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977380293,1,['message'],['message']
Integrability,"> I'd prefer a canonical or symmetric orthogonalization scheme to Gram-Schmidt, as the Gram-Schmidt vectors are dependent on how you order them. But yes, the consensus in this topic was already that re-orthogonalizing the orbitals was the way to go. But that's sort of the point: Gram-Schmidt keeps the meaning of the orbitals, which is important if you're running e.g. CASSCF. Of course, you can always do the orthogonalization per subspace, e.g. doubly occupied, RAS I, RAS II, RAS III, inactive, but then you also have to take care of the cross-block overlaps.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-869305358:112,depend,dependent,112,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-869305358,1,['depend'],['dependent']
Integrability,"> I'm building Libint2 via Psi4; I wouldn't have this error otherwise ;). The hartree-fock++ test case won't happen, but the eigen3 detection can still be a problem even with pre-built because the l2 c++ interface needs it to compile p4 against. > I'm waiting on Ed to release a stable updated version of Libint2, so that I can package it in Fedora. I've seen some clues that he's waiting on this. I need to get the mpfr and eigen3 detection fixed before I can start ready-to-merge negotiations. Also, I don't know if EFV is planning the sph-ordering-as-runtime-option for the 2.7 release so that psi can use the Fedora distribution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203:204,interface,interface,204,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737442203,1,['interface'],['interface']
Integrability,"> I'm confused about the perceived assumption that all integrals fit into memory. No such assumption is made. In fact, this code can be seen as an extension of Weigend's work to the case in which they _don't_ all fit in memory, and working with the assumption that integrals do _not_ fit in memory is the reason for many of the strange choices made in writing this code. @obrien951 My comment originates from the reason that like I said, it's hard to follow the code. There are **no comments** describing what the functions actually do. Also, if you look at when I posted the comment, it was 24 days ago, on the week before Thanksgiving, way before our lengthy discussion on Slack where it took several days and dozens of messages to understand that your algorithm is nothing else but RI-HF as presented by Weigend in the 2002 paper, with only the difference that in case it is not possible to fit even a single orbital vector in memory (the `(ui|A)` intermediates), you do some sort of blocking, but what kind, I do not know. These sorts of unclarities mean there should be a short, general description of what the code does in the header file. If it's RI-HF à la Weigend, a reference to the paper and a brief description on the differences is enough. At the moment, the function names are opaque. Some functions have unintelligible descriptions like `// Line 7 algorithm 8` (line and algorithm of what?!) and there are dozens of functions that don't have any kind of description.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2040#issuecomment-748421237:722,message,messages,722,https://psicode.org,https://github.com/psi4/psi4/pull/2040#issuecomment-748421237,1,['message'],['messages']
Integrability,> I'm having second thoughts about this PR now. Should we deprecate the old constructors first? This PR will require changes in Forte as well. options as I see them. I do think we should try to get the changes into one psi4 release cycle. * (n/c) leave convenience fns as-is; * (deprecate) leave convenience fns operable but add deprecation message; * (upgradehelper) leave convenience fn header in place but have it print a message with necessary changes; * (remove) remove convenience fn header and body,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715:341,message,message,341,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1256461715,2,['message'],['message']
Integrability,"> I'm not sure how often `oeprop` really gets called directly in an input. There's a very good reason to call `oeprop` directly, thanks to Psi4Numpy: I'm prototyping an electronic structure method, I have its OPDM, and I want to get some properties from it. That said, the reason for calling `oeprop` in this case is much simpler. There's a section in the manual titled ""Evaluation of One-Electron Properties — oeprop()"", so a user who wanted to evaluate one-electron properties used `oeprop`. > the only issue is you may not be confident in _how_ the dipole was calculated - e.g. if you run a CCSD energy calculation, then call `oeprop`, does it form the CCSD density and contract with the dipole integrals?. CCSD energy calls don't solved lambda equations. I would _hope_ that there is no density on the CCSD wavefunction, but I haven't checked. Still, I'm agreed with your bigger point: properties using built-in Psi methods should just go through `properties`. In my view, manual `oeprop` calls should be the province of people who custom-set the density, and it would be good for us to put in a warning to encourage this. I don't have strong feeling on what this distinction means for `psivars`. I think that's for Lori to weigh in on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979:673,contract,contract,673,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-869199979,1,['contract'],['contract']
Integrability,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:612,contract,contraction,612,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618,1,['contract'],['contraction']
Integrability,"> I've tested the mrcc interface within about a year. _But_ I only have the old mrcc (c. 2014) before it learned how to do SCF itself. I fuzzily remember being able to successfully run the tests with a version from a couple years ago, so 2020-22 era MRCC was OK I think, but I remember having to install the patches, otherwise neither Psi4 or Molpro would work with MRCC.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542:23,interface,interface,23,https://psicode.org,https://github.com/psi4/psi4/issues/3159#issuecomment-2070650542,1,['interface'],['interface']
Integrability,"> Ideally, the list of functionals in Psi4 would depend on the version of libxc available. Not to be snarky, but when there are two upstream libxc-s that can build and are API compatible with Psi, I can probably arrange for varying functional lists. For present, I yearn for one. (I may be misunderstanding your point.) . > And yes, it would be nice to be able to compile Psi4 without modifications against the distribution version of libint. The Fedora package supports very large angular momentum, whereas the default libint that's automatically compiled by Psi4 can't handle density fitting basis sets for transition metals... And the trouble is that Psi4 only detects via the cmake interface whereas other libint downstreams in Fedora require pkgconfig? iirc, Psi uses libint's cmake to also set some AM compile defs, not just location detection, so pkgconfig detection insufficient. Would having libint's cmake write out the pkgconfig files (as libxc now does) allow the cmake libint to work for everyone?. I agree I wouldn't ship a production distribution with the default angmom. I like 7 locally and soon I'll make conda use the 8 pkg (now optional) by default instead of the lighter 6. Only potential trouble for you is that libderiv AM = libint AM – 1. If you're going _really_ high for libint, deriv may not cooperate. -----------. I was misremembering when I wrote https://github.com/psi4/psi4/issues/1302#issuecomment-450762992 .; * cmake was why Psi v1.1 couldn't use upstream libxc 3 (so we forked 3 and added cmake).; * functional tweakers not in public API was why Psi v1.2 couldn't use libxc 4 w/o losing functionality (so we forked libxc 4.0 and added the rejected [MR 62](https://gitlab.com/libxc/libxc/merge_requests/62) plus a few merged build MRs). The same libxc ~4.0 is the current state of Psi master.; * The missing tweakers of rejected MR 62 were replaced in merged [MR 67](https://gitlab.com/libxc/libxc/merge_requests/67) but that's a different API (solved by #1101) and ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442:49,depend,depend,49,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451132442,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149716:61,depend,dependencies,61,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716,2,['depend'],"['depend', 'dependencies']"
Integrability,"> Instead, the parser should be developed to have a shorthand for exchange and correlation functionals. . Not sure I agree on this one. While such parsers are common in other codes, personally I think it's a wasted effort when one uses libxc - most folks who want ""non-standard"" combinations of exchanges and correlations know what they're doing, and they will be comfortable with the `dict`-based interface (if they aren't, it's a failure of the docs more than anything). Obviously, it doesn't hurt to have the common options (such as BLYP, SVWN, PW91, PBE...) pre-defined and checked for regressions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875:398,interface,interface,398,https://psicode.org,https://github.com/psi4/psi4/issues/1111#issuecomment-416118875,1,['interface'],['interface']
Integrability,"> Is DSWAP deprecated upstream or is there another reason to prune it? I think part of the plan with the libqt exports was to provide a full blas/lapack interface, even if not everything got used by psi internally. That was before `np.linalg` and Eigen were around/prominent, so perhaps it's not so vital, but it's nice for downstream to know if psi is exporting the full set or as-needed.; > ; > fwiw, I've no strong opinion on `Matrix::swap_rows` and `Matrix::swap_columns`. There is no upstream deprecation for this one, so comments and discussion is welcome. I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698:153,interface,interface,153,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483129698,5,['interface'],"['interface', 'interfaces']"
Integrability,> It appears that the wB97X-D3 is currently being built incorrectly. Yes. Part of the problem will be solved by https://github.com/psi4/psi4/issues/920. The other problem is that the current dashparam-dftd3 interface does not support setting a custom rs8 parameter for D3ZERO (rs8 is 1.0 except in Chai's wB97X-D3 re-fit where s8 is 1.0 and rs8 is fitted). Until above is solved the d3 dict entry should probably be commented out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/880#issuecomment-368139862:207,interface,interface,207,https://psicode.org,https://github.com/psi4/psi4/pull/880#issuecomment-368139862,1,['interface'],['interface']
Integrability,"> It looks like the entire `ERISieve` class is marked as `PSI_API`, so AFAIK that is giving ; > downstream the permission to rely on both the object and all of its public members ; > being a stable API, not just a few functions. I think that is right, as well. When I said ""user-facing"", I meant the `ERISieve` functions that are explicitly enabled Python-side via PyBind, as defined through the `export_mints.cc` file. Deprecation as a whole is less my realm of expertise, however, so I'm not 100% if what I'm doing is even the ideal route regardless.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435:535,rout,route,535,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527947435,1,['rout'],['route']
Integrability,"> It would almost be better if type-A ghosts didn't exist and at parse-time any ""default"" ghosts are treated as type-B ghosts somehow. That's what I do for the json molecule record – there's a list `real = [True, False, True, False, False, False]` and a separate `fragment_separators = [3]` that decouples what would be the following in psi. Ghosting types A & B are collapsed. . ```; molecule {; C; @C; C; --; C; C; C; }; extract_subsets(1, 2); ```. > As for a new Molecule function to ensure the user knows what they're going to get, are you referring specifically to a molecular_weight function or more generally a function to return either the mass or Z val as either zero or real depending on input?. I think I've settled on recommending changing the signature of `Molecule.Z()` and `Molecule.mass()` to take a required argument `bool zero_ghost`. The recompile will force consideration of which was wanted everywhere (incl. downstream). At the same time, I think leave `CoordEntry.Z()` and `CoordEntry.mass()` alone in their probably inconsistent state. Most of the `Z()` calls in Mol are probably to `CoordEntry.Z()` and have the gh=0 factored into the logic. Should definitely get consensus tomorrow before diving in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363503391:685,depend,depending,685,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363503391,1,['depend'],['depending']
Integrability,"> It would be good for me to write a test case for everything I check as part of DCT and Linear Dependencies #2231. Should this live in ctests or pytests? I'm not clear on test best practices at this point in Psi development, since we want to mover over to pytests eventually. Even then, right now is a bad time to write the test since Fix GEMM errors in presence of linear dependencies #2232 will change the reference output. In the beginning I may have had (and spoken) dreams of rewriting all the ctests in psiapi for pytest, but I've since been talked down, and the plan is to allow each ctest input.dat to stay where it is and be wrapped in a pytest test (like psi4numpy). There'll have to be extra install steps to position the ctest inputs into the python module directory. Upshot is it's fine to continue choosing psithon or psiapi style for writing new tests, mostly depending on testing style convenience and whether the test would serve as an easy model for users.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663:96,Depend,Dependencies,96,https://psicode.org,https://github.com/psi4/psi4/pull/2233#issuecomment-873124663,4,"['Depend', 'depend', 'wrap']","['Dependencies', 'dependencies', 'depending', 'wrapped']"
Integrability,"> Just to confirm: these are almost all just removal of the C-based wrapper functions, correct?. Yes. As far as I can tell different modules seem to be using PSIO in slightly different ways. The newer modules tend to create their own PSIO object and then call its member functions, but older modules seem to be more reliant on global state. To satisfy this, there is a ""global PSIO object"", and some wrapper functions have been written that usually do the same thing as the corresponding PSIO member functions, except they are regular functions and they manipulate the ""global PSIO object"". This PR removes the unused ones.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2724#issuecomment-1265942890:68,wrap,wrapper,68,https://psicode.org,https://github.com/psi4/psi4/pull/2724#issuecomment-1265942890,2,['wrap'],['wrapper']
Integrability,"> Maybe it's a pybind11 issue?. Worth a try. Looks like we were at `v2.2.3` in that era: (2nd col of https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml#L103-L104). > Yup. And no changes to dependency lists either; no qcengine. aggh. > And yes, this is with Python 3.11 in Fedora rawhide. Can you dial Python down a bit? Psi 1.3 was only knowingly build for 3.6 and 3.7. --------. This long life of v1.3 is all because of Libint2 issues, right? Can L2 be vendored with (internal build distributed with) Psi4? Must it be static?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833:221,depend,dependency,221,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1203229833,1,['depend'],['dependency']
Integrability,"> Maybe the ANO basis set family would suffer from this? While I do not use them, IIRC they are notorious for having an extremely high number of primitives, and for slowing many integral packages to a glacial pace. You don't even need to go to ANO; just take the cc sets for transition metals. I ran a simple benchmark [here](https://mattermodeling.stackexchange.com/questions/3794/which-software-is-good-with-generally-contracted-basis-sets) for Zn2 with the cc-pVDZ basis set. Zn and Zn2 ran in 19 and 216 seconds of wall time with Psi4, compared to 0.7 and 1.4 seconds with PySCF, respectively.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414:420,contract,contracted-basis-sets,420,https://psicode.org,https://github.com/psi4/psi4/issues/2114#issuecomment-783485414,1,['contract'],['contracted-basis-sets']
Integrability,"> OK! So this PR goes to `master`. After it is merged, I will cherry pick and make a PR to `1.3.x`. Sounds good. Slight complication is that when I wrote the versioner.py script that computes our version (and integrates w/cmake), I had the misguided notion that all commits on a release branch were version increments (that is, your PR would turn into v1.3.1 or .2), so I'll have to unwind that scheme before any proper tag of a v1.3.1 w/your PR. Just FYI.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492:209,integrat,integrates,209,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468755492,1,['integrat'],['integrates']
Integrability,"> Of course, to run those tests one also needs to add the new kernels to the range-separated Fock builds and the libxc interface. I believe that is outside the scope of this PR, is there any way I can test for numerical correctness? (Possibly expose the functions to python and call a numpy function)?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016:119,interface,interface,119,https://psicode.org,https://github.com/psi4/psi4/pull/2386#issuecomment-997950016,1,['interface'],['interface']
Integrability,"> Oh, I bet that's it. Because the BLAS/LAPACK API is standard, loading psi4 probably clobbers the namespace occupied by MKL's dependencies. The way the dynamic linker's lookups work on linux, this shouldn't happen on Linux unless the extensions were loaded with RTLD_GLOBAL. But mac could be different. On Linux, two python extensions can definitely have symbols with the same name and things work fine (more detail than one could ever want is in https://software.intel.com/sites/default/files/m/a/1/e/dsohowto.pdf).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311738003:127,depend,dependencies,127,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311738003,1,['depend'],['dependencies']
Integrability,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:1033,wrap,wrap,1033,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,2,['wrap'],"['wrap', 'wrapper']"
Integrability,"> One thing that puzzles me right now is how to figure out center(s) involved in the MO indices in epsilon_a(). Core orbitals are delocalized between identical nuclei. To figure out which nuclei a core orbital corresponds to, you would have to have a suitable metric. This could be the square norm of the MO coefficient of predefined core functions. A more accessible way would be to first localize the orbitals, so that you get rid of the mixing between nuclei, and then it would be straightforward to calculate e.g. <r^2>. If you are asking how to do this by hand in a small system, and not in a general case, then that's pretty straightforward. Just look at the orbital coefficients. If you're using a contracted basis set, the contracted functions should be good approximations to the core orbitals. Thus, you should see a coefficient close to 1 in absolute value for the core function in the corresponding core orbital, if you only have one heavy atom. If you have more, then the amplitude will be divided among the nuclei.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038:705,contract,contracted,705,https://psicode.org,https://github.com/psi4/psi4/issues/1311#issuecomment-436718038,2,['contract'],['contracted']
Integrability,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:796,interface,interface,796,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['interface'],['interface']
Integrability,"> Please update the error message to say that the grid is unusable with COSX, rather than ""better fix"" incoming. > See above. > Maybe language like ""The definition of the current grid includes negative weights. As these are not suitable for the COSX implementation, please choose another grid through ..."". Done and done! Wording changed to match these suggestions. Also, for those not at the Psi4 dev meeting today, it was agreed upon that this PR would indeed be the final fix to the COSX grid issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769:26,message,message,26,https://psicode.org,https://github.com/psi4/psi4/pull/2906#issuecomment-1497977769,1,['message'],['message']
Integrability,"> Procedure torsiondrive is registered with QCEngine, but cannot be found. @ErikCVik you need `torsiondrive` in your env. I am on linux and here is a minimal set of packages to create a new environment, which worked for me.; ```; name: psi4_td; channels:; - psi4; - conda-forge; - defaults; dependencies:; - python =3.9; - qcengine; - qcelemental; - blas=*=*mkl; - libblas=*=*mkl; - matplotlib; - psi4; - dftd3; - gcp; - gau2grid >=2.0.7; - geometric; - torsiondrive; ```; You can copy it to a file and run `mamba env create -f file.yaml`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960:291,depend,dependencies,291,https://psicode.org,https://github.com/psi4/psi4/issues/2910#issuecomment-1486191960,1,['depend'],['dependencies']
Integrability,"> Reference values for PCM excitation energies can be found here. ~~I guess for the tests to work, the above stuff with `nonequilibrium` needs to be integrated first~~ 😅; Yes...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292:149,integrat,integrated,149,https://psicode.org,https://github.com/psi4/psi4/pull/2006#issuecomment-693220292,1,['integrat'],['integrated']
Integrability,"> So it sounds like what you really want is a three-index overlap matrix, where two of the indices are in the AO basis and the third is an auxiliary basis function which is defined by the machine learning model; this is how you get 60 functions.; > ; > Looking at the 3coverlap code at the lowest level, the code supports computing 3-index overlap intergrals between 3 different basis sets, and there is also a wrapper function for this; > ; > ```; > SharedMatrix MintsHelper::ao_3coverlap(std::shared_ptr<BasisSet> bs1, std::shared_ptr<BasisSet> bs2,; > std::shared_ptr<BasisSet> bs3) {; > auto ints = std::make_shared<ThreeCenterOverlapInt>(bs1, bs2, bs3);; > return ao_3coverlap_helper(""AO 3-Center Overlap Tensor"", ints);; > }; > ```; > ; > and it is also revealed in the Python interface, which means that you should be able to call it.; > ; > Hopefully someone else can tell how to fit all the pieces together. thanks for your pointers @susilehtola ! yes, i see this code now and this is a good start. so, what is left is for me to define a `psi4`-compatible `BasisSet` to represent the set of Gaussian auxiliary basis functions that I want (say the 60 different ones used by the paper). . it would be fantastic if anyone could give pointers on this!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386:411,wrap,wrapper,411,https://psicode.org,https://github.com/psi4/psi4/issues/2892#issuecomment-1459905386,2,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"> Sorry to keep making you write, but is the ""big picture"" view of nbody documented anywhere? I can't follow what energy_body_dict means, or why the value of one of its entries is coupled to whether the total energy is available. > I fear this is a case where there is a lot of ""developer was only coding to be comprehensible to themselves"" code debt. I confess to being lost in nbody, too. And some of the psivars set aren't as descriptive as I'd like (e.g., `2CP`. However, any changes to nbody make DDD especially painful to rebase. And I think a good time to rationalize and document the pieces are when we take the nbody communication dictionary DDD uses and formulate/propose a proper schema. I guess I'm ok leaving it inscrutable (and without binding contracts :-) until then.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597:758,contract,contracts,758,https://psicode.org,https://github.com/psi4/psi4/pull/2221#issuecomment-871799597,1,['contract'],['contracts']
Integrability,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:136,rout,routines,136,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,3,"['inject', 'rout']","['injected', 'routines']"
Integrability,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:303,depend,depending,303,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540,1,['depend'],['depending']
Integrability,"> Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out. I don't have any particular concerns -- I just noticed your paper was on neutrals and the PR intro mentioned ""Not tested with external potentials."".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182:195,depend,dependent,195,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522632182,1,['depend'],['dependent']
Integrability,"> The ""correct"" solution is probably to replace PSIO with hdf5. I'd like to talk about that at PsiCon. Q5Cost ?; I have seen some evidence of Q5Cost support in the MRCC codebase, so that could maybe replace the currently very fragile MRCC interface.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2725#issuecomment-1271996309:239,interface,interface,239,https://psicode.org,https://github.com/psi4/psi4/issues/2725#issuecomment-1271996309,1,['interface'],['interface']
Integrability,"> The addition of libint2 causes Psi4 to not build. Libint2 is trying to compile the hartree-fock++ test, which depends on Eigen3, which it is not finding for some reason even though I have it installed as a system package. Are you using the latest psi4-dev package (.dev22)? That adds the `mpfr` and `eigen` deps to the build environment. I definitely acknowledge that the `Libint2Config.cmake` is not handling `find_dependency` right for eigen and mpfr (really, gmp) yet. I do have cmake edits for those locally, but I have not yet bent cmake to my will. So having the conda packages in place patches the problem. Does your system package have a `Eigen3Config.cmake`? Maybe expand CMAKE_MODULE_PATH?. > Libint2 tests should be disabled in the Psi4 build, or the Eigen3 dependency added so that the build works even in the lack of a system package. All of Psi4 master is now running Libint2 -- any references to Libint1 or Libint1_t (a hack to allow both to coexist) are only waiting for removal. > (Note: libint2 is also suffering from the -march issue; the libint2 CMake files need to be updated.). Thanks for the reminder. I've just edited it locally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125:112,depend,depends,112,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737386125,2,['depend'],"['dependency', 'depends']"
Integrability,"> The authors' DM21 functional implementation has a PySCF interface, so you can already use PySCF to run calculations. Indeed! Our workflows use [QCEngine](https://github.com/MolSSI/QCEngine), which does not yet support PySCF. It should be relatively straightforward to add, however---I've opened an issue at https://github.com/MolSSI/QCEngine/issues/335 to discuss this possbility. > Hooking it up to Psi4 will be a much bigger task, since unlike PySCF, Psi4 doesn't handle density functionals in Python... DM21 can be used from C++: the README describes this [here](https://github.com/deepmind/deepmind-research/tree/master/density_functional_approximation_dm21#using-dm21-from-c).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2380#issuecomment-991996913:58,interface,interface,58,https://psicode.org,https://github.com/psi4/psi4/issues/2380#issuecomment-991996913,1,['interface'],['interface']
Integrability,"> The cause of missing error messages is likely the improper use of `exit()`. I have prepared a companion pull request to this one to get rid of them. I think there are two separate issues here. One is the improper use of `exit()` scattered around the codebase, but I still think that there is a separate issue here where not even `throw PSIEXCEPTION(...)` is delivering the error message, in certain environments. I think that would still be a problem even if every instance of `exit()` were to be eradicated from the repo. In https://github.com/psi4/psi4/issues/2970, the part of PSIO that was raising the error was already using `throw PSIEXCEPTION(...)`, it was not calling `exit()`. Unless removing all of the `exit()` calls elsewhere from the codebase magically changes how `PSIEXCEPTION` works, I cannot see how that would fix that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432:29,message,messages,29,https://psicode.org,https://github.com/psi4/psi4/pull/3117#issuecomment-1877118432,2,['message'],"['message', 'messages']"
Integrability,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:566,rout,route,566,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567,9,['rout'],"['route', 'routes']"
Integrability,"> The conversion to traceless form can be done for any order of multipole, but I'm not really sure it's got a use case at this point. Quadrupoles in traceless form can be useful for force field definitions. Our CFMM code uses very high orders of multipoles, but they're converted to spherical harmonics to work with all the efficient machinery we've developed so that doesn't need the traceless definition. Max and I have traded Slack messages, and we're agreed on adding traceless quadrupoles so those still exist, but not to bother with the other multipoles for the time being. I'll add that to the PR hopefully today. I've been too busy fixing `ambit` to respond to PR feedback here at my usual pace.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676:435,message,messages,435,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075186676,1,['message'],['messages']
Integrability,"> The some-subtype-values-not-applicable-to-some-scftype-values doesn't bother me too much -- after all, direct, cd, etc. can't take any subtype value besides auto. So long as the read_options docstring is clear and the code rejects non-meaningful subtype choices, I don't think users are led astray. That's all fair, to be honest, although I agree moreso with your second paragraph below, and what you said about indistinctness between algorithm choice and memory transition choice is applicable for sure.; ; > All the same, I'm not hearty on my suggestion because it seems a little indistinct between algorithm choice (usually scftype) and memory transition choice (usually subtype). Maybe, if designed from scratch, there'd be `YOSHIMINE_PK`, `REORDERED_PK`, and `PK` as `scftype`s and then PK `subtype`s `OUT_OF_CORE` and `INCORE` would fit the DF pattern nicely. That might well be considered too much reengineering at this point in the release cycle. This is true, and a point I hadn't considered, either. I wouldn't mind taking such a project on, but I would probably save it for after v1.8. > So minimum change, unless others chime in, is leave as-is and add the `PK_NO_INCORE` to the deprecation messages here https://github.com/psi4/psi4/blob/master/psi4/src/core.cc#L553. Will do!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012:1205,message,messages,1205,https://psicode.org,https://github.com/psi4/psi4/pull/2926#issuecomment-1520631012,1,['message'],['messages']
Integrability,"> Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. Not sure this is exactly correct. If enabled (or psi4 requires it), doesn't the psi4 core always try to find the library? There is no dummy library at this point. This part somewhat confusing, but I think the entire purpose of the dummy external project INTERFACE libraries is for dependency resolution (ie build order). Then, the psi4 core always finds them itself (if needed). Note 1: If an addon isn't enabled, adding the dummy target isn't strictly required. But then you'd have to selectively add them to the dependency list, rather than always adding it. Note 2: Shouldn't the result of optional_plugin be nothing if enable_addon is false?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238060504:346,INTERFACE,INTERFACE,346,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238060504,3,"['INTERFACE', 'depend']","['INTERFACE', 'dependency']"
Integrability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:245,interface,interfaces,245,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,5,['interface'],"['interface', 'interfaces']"
Integrability,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:563,wrap,wrappings,563,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994,1,['wrap'],['wrappings']
Integrability,"> This is awesome! Less code and faster, always nice to see. Thanks! 😊 ; I'll polish the code a little ~~and make the EFP driver code use the new routines.~~ ➡️ other PR. Another question: The current implementation (both the ""new"" and ""old"" field integral code) does not seem to make use of OpenMP parallelism. Is this correct or did I mess something up?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505032082:146,rout,routines,146,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505032082,1,['rout'],['routines']
Integrability,"> This is fantastic Max! I really like the generalized `MultipoleInt` class. I'm good with options (b) and (c). I think that `DipoleInt` and `QuadrupoleInt` classes which function as light wrappers around `MultipoleInt` are more user-friendly than requiring users to pluck the appropriate integrals out of the `MultipoleInt` return.; > ; > Have you done any performance comparisons between the new MD code and the old OS code? I don't know if one is expected to be faster than the other. It would be good to do some simple timings (maybe one low angmom system and one high angmom system?) before completely ditching the OS code. @maxscheurer If you want, I can test CFMM with your new code to see if the multipole calculations are indeed faster. Just let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935:189,wrap,wrappers,189,https://psicode.org,https://github.com/psi4/psi4/pull/2496#issuecomment-1077778935,1,['wrap'],['wrappers']
Integrability,"> Two comments about lines that weren't changed:; > ; > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1910-L1912); > ; > Lines 1910 to 1912 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > # Drop out for props and freqs ; > if ptype in [""properties"", ""frequency""]: ; > raise ValidationError(""%s: Cannot extrapolate or delta correct %s yet."" % (ptype.title(), ptype)) ; > ; > We shouldn't be dropping out for frequencies anymore. Fair point. I changed the raw 'frequency' function too, to be a true wrapper around 'hessian', that code is just a left-over. Changed. > [psi4/psi4/driver/driver_cbs.py](https://github.com/psi4/psi4/blob/a658c8e50e6d5d7bde2b8058b33e78f98f800db3/psi4/driver/driver_cbs.py#L1940-L1944); > ; > Lines 1940 to 1944 in [a658c8e](/psi4/psi4/commit/a658c8e50e6d5d7bde2b8058b33e78f98f800db3); > if len(method_list) > 1: ; > cbs_kwargs['delta_wfn'] = method_list[1] ; > cbs_kwargs['delta_basis'] = basis_list[1] ; > if 'delta_scheme' in kwargs: ; > cbs_kwargs['delta_scheme'] = kwargs['delta_scheme'] ; > ; > It would be good to put a comment here explicitly saying that `_parse_cbs_gufunc_string` should enforce that `len(method_list)` can only be 1 or 2. The logic confused me for a few minutes, on first read. I'll edit the docs. The idea is that one usually only specifies one ""delta correction"" in a string, ie:; ```; mp2/cc-pv[tq]z+D:ccsd(t)/cc-pvtz; ```; as opposed to trying to do two delta corrections in a ""method/basis"" syntax (which is not supported):; ```; hf/cc-pv[q5]z+D:mp2/cc-pv[tq]z+D2:ccsd(t)/cc-pvtz; ```; Folks that want to pile on the deltas can use the old interface (with scf, corl, delta and delta2 stages) or the cbs_metadata interface, which doesn't have a limit.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793:614,wrap,wrapper,614,https://psicode.org,https://github.com/psi4/psi4/pull/1235#issuecomment-426364793,3,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"> Was there another message (appears in my email) that got deleted on GH?. Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802:20,message,message,20,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859232802,1,['message'],['message']
Integrability,"> We should use a more informative/tailored error message.; > ; > But the reason it can't drop a wfn file is because non-Hartree--Fock Hessians are computed by finite difference, so there's at most a dummy wfn with mol, basis, qcvariables, etc. No goodies like MO coefficients or occupations. What piece of data were you seeking?. Ach so, I just found a method to calculate without this wfn,thanks!; btw,I'm looking forward to calculate analytical hessian with DFT for long time, having any plan?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664:50,message,message,50,https://psicode.org,https://github.com/psi4/psi4/issues/3068#issuecomment-1786389664,1,['message'],['message']
Integrability,> What happens if you use a tighter integration grid?. Thanks for your quick reply. I set it to a pretty large number (I have no experience in it) and got better results:. ```; set dft_spherical_points 1202; set dft_radial_points 150; ```. ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 6 x 3 . 1 2 3. 1 0.01761265286365 -0.03021731225771 -0.01636085243187; 2 -0.00198025542796 0.00069379354137 -0.01217743689404; 3 -0.00684467846030 0.00863180515130 0.01631841052017; 4 -0.00782888971966 0.00500566642863 0.00531395359842; 5 -0.00015059931846 0.01071543959728 0.00493669924504; 6 -0.00080880896432 0.00517347208476 0.00197251031653; ```. This seems to resolve the problem. XC:. ```; -XC Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 0.023415204354 -0.034617520267 0.016571065968; 2 0.004264668622 -0.082393045737 0.110542261946; 3 0.057056513665 -0.084998504340 -0.155592261007; 4 -0.165444201018 0.054818800402 -0.007755576608; 5 0.081555904871 0.141482887041 0.033036030615; 6 -0.000848669520 0.005710247436 0.003201763433; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/issues/3161#issuecomment-2075940978,1,['integrat'],['integration']
Integrability,"> What is left for this PR and what level of integration are you shooting for in this first pass?. Running the aforementioned methods from Psi4 and being able to ""see"" the results in the output file and get the most important lot of them (dipole moments, oscillator strength, energies) from the `Wavefunction` object. Support for restricted and unrestricted references. Smooth selection between builtin ADC (only for ADC(2) on RHF and singlet excitations) and adcc (for all the rest). That's not fully there (see my TODO). If you are ok with using more options than in other `select_` cases for the `select_adc2` method, than I'll go ahead and implement that. On that note: I noticed that already for small and simple systems such as cc-pvdz water the adcc ADC(2) and the builtin ADC(2) differ. Since we compare and test our code very thoroughly to reference data from Q-Chem/adcman including test cases of such complexity and derived properties, I would be quite surprised if the error was on our end. I'm not sure what to do with that. At best this is confusing for a user and one should definitely make a statement about in the manual, but still ... obviously one implementation is wrong. I have not worked on the ADC documentation inside Psi4 so far. I am not sure what kind of detail you want in the manual, I'd be very brief, explaining only the Psi4-option for ADC and refer to [adc-connect.org](https://adc-connect.org) for the details on ADC itself. If I understand correctly the main file I have to work on is `doc/sphinxman/source/adc.rst`. Our PR 20 is now basically merged. We'll proceed with the tagging of a release soon.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755:45,integrat,integration,45,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552363755,1,['integrat'],['integration']
Integrability,"> What version of cmake do you use?. Personally, I use a near-latest. The Psi4 minimum is 3.15. We could go higher, but at least one of the dependencies doesn't want to go beyond 3.16 until Ubuntu does. If you happen to be thinking of FetchContent instead of ExternalProject, I'm not keen on a rewrite, and we do have a couple deps (python ones) that aren't under CMake control. In what way is the copy from `<builddir>/objdir/stage` to `CMAKE_INSTALL_PREFIX` going awry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655:140,depend,dependencies,140,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655,1,['depend'],['dependencies']
Integrability,"> Wording this another way: what JK features is CompositeJK replacing, and what is it leaving be? Are there J-K combinations that we're leaving be because integrating them with CompositeJK would make things worse?. Ahhhhhhhh, thanks for the clarification! I was worried I may have misinterpreted your original question. What CompositeJK will be replacing specifically that is already in Psi4 is the DFJCOSK class and the implementation of LinK in DirectJK. Other expansions that will be made to CompositeJK, such as CFMM, are not yet in Psi4 proper. CompositeJK will not touch other JK algorithms present in Psi4, such as DirectJK or the conventional DFJK algorithms. The original plan for CompositeJK, from many months ago, was to completely redo the JK hierarchy so that any J algorithm in Psi4 could be combined with any K algorithm. However, I was quickly convinced that this was a bad idea, because certain combinations of J and K from the entire Psi4 option list would not perform well. For example, we can see this even now, where the current LinK implementation is always run with DirectJK's formuation of J and thus displays poor performance. The current idea for CompositeJK, then, is that it will he a hub for the implementation of separate J and K build algorithms designed specifically for the construction of those matrices; e.g., Direct DF-J, LinK, COSX, CFMM.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908:155,integrat,integrating,155,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302518908,1,['integrat'],['integrating']
Integrability,"> Would testing COSX results against the implementation in Orca 5 make sense? Of course the grid dependence makes such things tricky. Practically speaking, this should be doable, but one would need to ensure that as many factors between the two implementations as possible are standardized and made the same. Some of these factors (e.g., screening tolerances) shouldn't be that hard, but others (like grids, as you mentioned) would be quite a bit harder and could be quite a thorn in our side for comparing the two implementations. . This question opens up the discussion to another approach I was thinking for this PR - using separate reference energies for COSX and LINK in the scf5 test, rather than comparing against canonical or DF energies. I am rather neutral on that matter, and am definitely open to doing so; but there are some concerns that should be considered with the separate reference energies approach. These are concerns that might not matter as much now; but the scf5 test will undoubtedly be expanded as CompositeJK and new separate J and K algorithms are added to Psi4, and these concerns might pop up then:. 1. Using separate reference energies for each CompositeJK JK build combination, for each O2 multiplicity and SCF reference, could quickly make scf5 quite unwieldy and messy. ; 2. Against what do we compare reference energies? In some cases, it won't be too big of a problem (as with here, where we can compare against ORCA), but I'm willing to bet that there are certain combinations of J and K algorithms that CompositeJK will eventually be able to do, that might not actually be present in other codes to compare against. . Of course, these concerns are more specific to CompositeJK testing, so maybe they're an issue that can punted down the road for when scf5 gets updated again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603:97,depend,dependence,97,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1306134603,1,['depend'],['dependence']
Integrability,"> Wow, that's quite the involved method. I found a few comments, but lgtm! Main question is: are unsuitable complications like extern-in-system, charged molecule?, etc. stopped early? Thanks for the contribution!. Thanks for the feedback @loriab! I don't think that either a charged molecule or a presence of external potential mean that new ISAPT is a no-go (just the printed dipole moments will be origin-dependent, which is no big deal). We just haven't tested such cases yet. Let me think of a good ionic system to try out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737:407,depend,dependent,407,https://psicode.org,https://github.com/psi4/psi4/pull/2899#issuecomment-1522545737,1,['depend'],['dependent']
Integrability,"> [psi4-test.txt](https://github.com/psi4/psi4/files/8883628/psi4-test.txt) contains the results of `psi4 --test` kindly let me know if this mean that psi4 is in functional state. Here is the `conda list` output in case it is needed. [psi4-env_conda-list.txt](https://github.com/psi4/psi4/files/8883643/psi4-env_conda-list.txt). Yes, the base Psi4 is functional. All the messages about skipped tests indicate that there are addons that Psi4 _has_ but that your Psi4 installation isn't detecting as installed. Based on your conda list, these are probably not installed, so this behavior is expected. Let us know if there are addons that you need but don't know how to get. (Examples: `dftd4` for DFT dispersion corrections, `cct3` for some exotic coupled cluster variants, `cppe` for polarizable embedding.). > Now I have some compatibility issues against python3.8 but that's with other packages I am trying to use.; > ; > Just to make sure, psi4 is no longer supported on python3.7, right?. The latest Psi4 is no longer supported on Python 3.7, correct. If you need 3.7 support, dropping down to Psi4 1.5 is technically an option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803:371,message,messages,371,https://psicode.org,https://github.com/psi4/psi4/issues/2598#issuecomment-1152920803,1,['message'],['messages']
Integrability,"> format changes and traceless quad are in the next PR? in that case, lgtm. They will be included in this PR, when I get back to it. Disregard the message about ""the next PR"" that still lingers on the Slack GH feed. I meant to post that to the `ambit` repo, which is getting most of my development time at the moment.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485#issuecomment-1075271664:147,message,message,147,https://psicode.org,https://github.com/psi4/psi4/pull/2485#issuecomment-1075271664,1,['message'],['message']
Integrability,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:420,interface,interface,420,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407,2,"['depend', 'interface']","['depend', 'interface']"
Integrability,"> requiring pytest 7 -> so when you build a package using setup.py you can declare dependency-targets. I can't figure out how Psi4 is packaged now that setup.cfg is gone, but perhaps adding pytest as a dependency of an optional [testing] target might be a simpler way out?. I've so far resisted hooking up psi4's CMake to a setup.py, so the `[testing]` route won't work. I'm hoping that with https://github.com/psi4/psi4/pull/2454/files#diff-fb6a686182f16eb54af3c628f38593f347f68aba31de903983023c560288d7a1R2, pytest itself will raise a sensible error. I have previously included pytest in the psi4 package https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/meta.yaml#L91, but I was planning to suppress that for a while until defaults catches up. > disable warnings-as-errors from docs build due to ""circular import"" -> let's make an issue and then it's fine by me. Yes, already fixed in qcel master https://github.com/MolSSI/QCElemental/pull/286",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845:83,depend,dependency-targets,83,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1079351845,3,"['depend', 'rout']","['dependency', 'dependency-targets', 'route']"
Integrability,"> sigh We have test fail because adcc broke. I'm holding this PR innocent. Something is probably wrong with adcc itself. weird, it didn't install for that lane. adcc conda package hasn't changed in over a month. i'll try restarting that lane in case of fluke. otherwise, i'm guessing some non-qc dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648:296,depend,dependency,296,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883511648,1,['depend'],['dependency']
Integrability,"> uh-oh, it's finding pedantic errors in integratorxx now `/include/integratorxx/generators/s2_factory.hpp:24:2: error: extra ‘;’ [-Wpedantic]` . this would be a fault of our appending to `CMAKE_CXX_FLAGS`, which wasn't so outrageous back in the day.; > ; > thinking about it, there would be a lot more of these interferences with other projects if the CI wasn't detecting so much as pre-built. which means that developers building deps from source will likely have builds fail since force_pydantic defualts to ON and if the dep projects aren't pedantic clean. so this was probably a lucky block to the merge.; > ; > I'm not sure right off if there's a quick+good solution. you could move the option to here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L222 _after_ the externals have been added. and maybe turn the default to OFF but add it (`-D`) as ON to the azure CI. I'm going to put a needs-changes block so I remember it isn't just a spurious test fail in the merge queue. lmk if you disagree with any of my hasty conclusions. Yeah, I feel like I ran into this issue previously with Einsums. It's part of why I was so concerned about this PR in the first place, and whether `FORCE_PEDANTIC` should be on by default. I can definitely toy around and see if I can get the pedantic flag to only apply to Psi-side code, like you suggested. Worst-case scenario, we just turn `FORCE_PEDANTIC` off by default?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145:41,integrat,integratorxx,41,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2017950145,2,['integrat'],['integratorxx']
Integrability,"> what about `guided`?. All that matters is that we avoid `static`, which can lead to an uneven distribution of work across threads. `guided` is about as good as `dynamic` here. `dynamic` has optimal load balancing at the cost of slightly more overhead than `guided`. The work/iteration is large for these loops, making this additional overhead is negligible. . Here's a comparison of the different schedules (wall time in seconds, large alkane on an 18 core CPU):. | Code | `static` | `guided` | `dynamic` |; |------|-----------|--------|---------|; | Numerical Integration (Loop 1) | 36.9 | 36.9 | 36.7 |; | DF Integrals (Loop 2) | 299.0 | 278.7 | 279.7 |; | PNO Transform (Loop 3) | 80.9 | 80.4 | 78.4 |; | PNO Overlap (Loop 4) | 29.8 | 29.3 | 24.4 |; | Total DLPNO-MP2 | 528.2 | 506.6 | 498.2 |. You can see that `dynamic` is possibly a hair better than `guided`, but both are better than `static`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297:563,Integrat,Integration,563,https://psicode.org,https://github.com/psi4/psi4/pull/2378#issuecomment-989020297,1,['Integrat'],['Integration']
Integrability,"> would you have any thoughts/concerns on doing the SAD guessing in `PySCF` and then doing the row/col re-ordering?. What do you need the guesses for? PySCF can also be used to run similar calculations as Psi4. I don't know if there are differences between the basis function conventions between Psi4 and PySCF. Unfortunately, quantum chemistry programs are not interoperable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907:362,interoperab,interoperable,362,https://psicode.org,https://github.com/psi4/psi4/issues/2897#issuecomment-1469841907,1,['interoperab'],['interoperable']
Integrability,">/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 115, in _core_wavefunction_build; basis = core.BasisSet.build(mol, ""ORBITAL"", basis); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/p4util/python_helpers.py"", line 79, in _pybuild_basis; bs, basisdict = qcdb.BasisSet.pyconstruct(; ^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/libmintsbasisset.py"", line 635, in pyconstruct; mol = Molecule(mol); ^^^^^^^^^^^^^; File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 143, in __init__; self._internal_from_dict(molrec, verbose=verbose); File ""/<<PKGBUILDDIR>>/builddir/stage/lib/x86_64-linux-gnu/psi4/driver/qcdb/molecule.py"", line 1529, in _internal_from_dict; fragment_separators = np.array(molrec['fragment_separators'], dtype=np.int); ^^^^^^; File ""/usr/lib/python3/dist-packages/numpy/__init__.py"", line 284, in __getattr__; raise AttributeError(""module {!r} has no attribute ""; AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?; Exit Status: infile ( 1 ); autotest ( None ); sowreap ( None ); overall ( 1 ); ```. The important part (I think) being `AttributeError: module 'numpy' has no attribute 'int'. Did you mean: 'inf'?`. According to the Debian bug (<https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1027216>), ""This is because, numpy upstream in; 1.24.0, finally decided to expire <https://numpy.org/doc/stable/release/1.24.0-notes.html#:~:text=The%20deprecation%20for%20the%20aliases> some deprecations introduced in 1.20.0 <https://numpy.org/doc/stable/release/1.20.0-notes.html#using-the-aliases-of-builtin-types-like-np-int-is-deprecated> (released almost 2 years ago)."". It this a known problem, and possibly already fixed in master or later branches? At least the one quoted above got changed for master in f5b7cf967 (with a rather unhelpful commit message)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865:3168,message,message,3168,https://psicode.org,https://github.com/psi4/psi4/issues/2865,1,['message'],['message']
Integrability,">> I do think we should try to get the changes into one psi4 release cycle. > Regarding the deprecation message/schedule: do you mean that they should be deprecated now and then removed before 1.7 RC1?. I think deprecation warnings (with code still functional) need to be in at least one release. So the code can be broken as soon as ~Dec (after 1.7.0 release). But what I was meaning to say with ""get the changes into one psi4 release cycle"" was let's aim to get all the immediate-breaks and/or notifications in before 1.7.0 so that downstream users have the info to do a single overhaul after 1.7.0. Keep pinging me if this doesn't make sense :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160:104,message,message,104,https://psicode.org,https://github.com/psi4/psi4/pull/2693#issuecomment-1259615160,1,['message'],['message']
Integrability,">> Was there another message (appears in my email) that got deleted on GH?. > Yes, I deleted it when I realized my criticism was totally false. I apologize for the confusion. Ok, no problem, thanks. I just keep losing things in email, and I remembered the suggetion sounded likely. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/pull/3105#issuecomment-1859233247,1,['message'],['message']
Integrability,">>> I apologize for being overly slow on the promised PCMSolver CMake overhaul. No problem. By the time I got Lapack, CheMPS2, libefp, and Psi4 back on speaking terms, it seemed easiest to just do a decent pass at the psi4 interface with ambit and PCMSolver, then let you and Jet concentrate on the parts you know better than me. >>> What do you mean by ""I'd rather have pcmsolver as a proper module containing init, pcmsolver, getkw, etc., but that would mess with other codes use of pcmsolver, I suspect""?. I meant that it'd be nice to have an installation dir structure like the below where there's an outer pcmsolver module/namespace.; ```; here/pcmsolver/; here/pcmsolver/__init__.py; here/pcmsolver/pcmsolver.py; here/pcmsolver/getkw.py; ...; ```; Then `sys.path('here')` is the operation, and psi4 does `import pcmsolver; pcmsolver.pcmsolver.parse_pcm_input('pcmsolver.inp')` or whatever and all the getkw and codata are within the pcmsolver namespace. At present, one does `sys.path('here/pcmsolver')` and everything's in the outer namespace. The anticipated problem with other codes is that what I want would probably involve some `from . import getkw` and other codes might be depending on the `import getkw` structure. >>> I can fix the linking problems (see comment on psi4/src/psi4/libscf_solver/CMakeLists.txt) Should I fork you fork? Should I make the changes from the web-interface on the pcm branch of your fork?. As mentioned above, direct commit, web interface, whatever's most convenient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/594#issuecomment-276211311:223,interface,interface,223,https://psicode.org,https://github.com/psi4/psi4/pull/594#issuecomment-276211311,4,"['depend', 'interface']","['depending', 'interface']"
Integrability,"@CDSherrill , good to hear as I quite agree. This is just what the dfmp2 module does presently for gradients: switches `scf_type` to `df` unless the user has reqested _not_ `df`, in which case it reveals its cause of death. I'm imitating this behavior now for the other mp2 gradient routes. My Q1 for Ugur was that a conv+df gradient was proceeding, and I wanted to confirm that failing it was the correct thing to do. The complication/confusion (it even caught me last night) is that although all scf calculations _run df by default_ (handled in the driver), the `scf_type` keyword _does not default to df_ (since there's a lot more post-scf than scf out there, it's easier to handle the latter as the exception), so setting solely `mp2_type df` in a `gradient('mp2')` leads to that conv+df case (even though someone knowing psi's df-philia might expect that to lead to df+df). But don't worry about that– for mp2, at least, I'll try all combinations and arrange that only good ones get through and that the advanced defaulting is handled right. By the way, back to energies, would you expect OCC's conventional ROHF mp2 energy to match DETCI's? It doesn't, and that's the only check remaining commented out in my great mp2 cross-module comparison (https://github.com/psi4/psi4/blob/master/tests/mp2-module/input.dat#L191) OCC's df ROHF mp2 _does_ match DFMP2's.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192928974:283,rout,routes,283,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192928974,1,['rout'],['routes']
Integrability,"@CDSherrill - I don't think the noise in the gradients is a problem. Psi3 routed all gradient computations through `cints`, which symmetrizes everything automagically in `src/bin/cints/Default_Deriv1/symmetrize_deriv1.cc`, which is called from `src/bin/cints/Default_Deriv1/deriv1.cc` . @JonathonMisiewicz - the fix that I put in for DF-MP2 doesn't symmetrize the individual components of the gradient. Only the total. I didn't bother with the components just because they're only really for debugging and aren't printed by default. I guess they probably should be symmetrized if they're printed out by a power user though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869:74,rout,routed,74,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459002869,1,['rout'],['routed']
Integrability,"@CDSherrill . [This](https://github.com/psi4/psi4/blob/1.2.x/psi4/src/psi4/libscf_solver/hf.cc#L631-L639) was the v1.2 behavior so print error msg or die, depending on settings. Previous scfitertopy behavior was always to throw generic ConvergenceError with msg and niter. Now, throw SCFConvergenceError with msg, niter, and wfn attached.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673:155,depend,depending,155,https://psicode.org,https://github.com/psi4/psi4/pull/1130#issuecomment-411563673,1,['depend'],['depending']
Integrability,"@CDSherrill ; 1) It should always be in the SO basis. Apologies this was answered elsewhere. 2) If we are set on this on I can patch up the CI code and add patch notes. The ""CI DIPOLE X"" is the followed root or the dipole from the state averaged density depending on user specifications. We also need to think about the `psi4/driver/driver.py:molden` function and #504. `properties` is now guaranteed to return an updated SO basis density; however, the current molden function requires a MO density. We could have a simple switch on that function that indices if the incoming density is in the AO or MO basis and transform accordingly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260128691:254,depend,depending,254,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260128691,1,['depend'],['depending']
Integrability,@CDSherrill @edeprince3 could it be that that nvirt > ndocc is an assumption that's made in the contraction order? If nvirt < ndocc then it might be more efficient to contract first over the occupied orbitals?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339447402:96,contract,contraction,96,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339447402,2,['contract'],"['contract', 'contraction']"
Integrability,"@CDSherrill Here's what the caller needs:; * Store the alpha response density `Da_` on the wavefunction; * Store the beta response density `Db_` on the wavefunction; * Store the Lagrangian `Lagrangian_` on the wavefunction; * Store the ""metric density"" in `PSIF_AO_TPDM` for all relevant DF basis sets (lower triangular format); * Store the ""3-Center density"" in `PSIF_AO_TPDM` for all relevant DF basis sets (lower triangular format). The caller is not responsible for constructing any derivative integrals. The caller is not responsible for constructing an explicit TPDM (all derivative integrals for DF are two or three index, so an explicit TPDM is never needed). The caller is responsible for constructing the densities, as those are method dependent. _In the current implementation_, the caller is responsible for backtransforming all densities involving primary-basis orbitals to the AO basis. For the first three quantities, this is part of the wavefunction contract and requires one line of code. For the 3-Center density, I'm playing with the idea of moving the responsibility of back-transforming to the AO basis to this central code. Rob's code takes that approach. ...Now that I write this up, this would be good to mention in the code itself. I'll add it as a comment before this gets merged in.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756835485:746,depend,dependent,746,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756835485,2,"['contract', 'depend']","['contract', 'dependent']"
Integrability,"@CDSherrill It depends on which SAPT computation. For SAPT0, it should be pretty straightforward as there is no intermediate reuse. If we go to higher SAPT order, it may require a little bit more work as I believe Ed's code is preparing integral files and writing them to disk at some point. In any case, it's probably the easiest way to implement a restart, yes.; @similt : Which SAPT level do you need ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/51#issuecomment-177299693:15,depend,depends,15,https://psicode.org,https://github.com/psi4/psi4/issues/51#issuecomment-177299693,1,['depend'],['depends']
Integrability,"@CDSherrill, here's the rohf mp2 results from a few programs. Ugur matches Q-Chem. Molpro is fairly close to Q-Chem, though I'm really not sure about that input. ""rccsd"" ""calls spin-restricted open-shell coupled cluster program"" according to the manual, but this route through the code is not labeled enough for me to be confident of it. So detci is the odd one out, but good news is that its reference is sound. | program | fc | scf | singles | mp2corl | mp2tot |; | --- | --- | --- | --- | --- | --- |; | occ | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | detci | fc | -25.94361432 | | -0.06094168 | -26.00455600 |; | qchem | fc | -25.94361432 | -0.00068837 | -0.05940725 | -26.00302157 |; | molpro | fc | -25.94361432 | -0.00054735 | -0.05936497 | -26.00297929 |. ```; $molecule; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; $end. $rem; JOBTYPE sp; unrestricted false; n_frozen_core fc; scf_guess sad; BASIS cc-pVdZ; basis2 6-31g; correlation mp2; THRESH 12; SCF_CONVERGENCE 8; SYM_IGNORE TRUE; SYMMETRY FALSE; MEM_TOTAL 1600; MEM_STATIC 512; INTEGRALS_BUFFER 512; MAX_SCF_CYCLES 200; $end; ```. ```; molecule bh_h2p {; 1 2; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. set basis cc-pvdz; set scf_type pk; set mp2_type conv; set guess sad; set freeze_core true; set e_convergence 8; set d_convergence 7; set reference rohf. set qc_module detci # toggle detci/occ; energy('mp2'); ```. ```; memory,200,m; nosym; noorient; angstrom; geometry={; B 0.10369114 0.00000000 0.00000000; H -1.13269886 0.00000000 0.00000000; H 3.00000000 0.37149000 0.00000000; H 3.00000000 -0.37149000 0.00000000; }. GTHRESH,ZERO=1.e-14,ONEINT=1.e-14,TWOINT=1.e-14,ENERGY=1.e-9. SET,CHARGE=1; SET,SPIN=1. basis=cc-pVDZ. rhf; rccsd; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/311:263,rout,route,263,https://psicode.org,https://github.com/psi4/psi4/issues/311,1,['rout'],['route']
Integrability,"@Harvey the immediate answer is you need to update your compiler; however; the repeated occurrence of this problem suggests it may be necessary to; revisit the decision to use C++11. @developers what versions of compilers are we willing to support? The; decision to start using C++11 limits us to Intel15 for full compliance (or; Intel13 for about 90% compliance). For the GCC 4.4 gives us about 90%; compliance and 4.8 full compliance. Clang 2.9 is 90% and they claim 3.3; for full support, but I'm confused by their caveat of them not having to; provide support for two features. This suggests to me that they still are; not at full compliance and never will be. I fully support the usage of C++11 as it allows coding options previously not possible or provides a nicer syntax for them. One possibility of backwards support is to wrap C++11 code with macros; however this only works if that code could have been written with C++98 originally. This also leads to code duplication which I think is a cardinal sin of programming. In my experience so far the only C++11 feature that I have been unable to reproduce using C++98 is variadic templates. The best you can do is write a recursive normal template, with default dummy parameters and many template specializations. This solution is very verbose (often orders of magnitude more lines of code than the variadic version) and is limited to about 10-20 parameters (depending on the compiler). In fact the lack of variadic templates is why the boost tuple is limited to 10 parameters. Although 10 is often more than enough, there are reasons to need more, particularly for loop unrolling and extensive logic trees. For example I was able to replace 118 lines of logic (assigning atomic names/masses/ etc.) with about 4 thanks to variadic templates. I think the latter is far easier to read and maintain. I know I get a lot of hate about my love of variadic templates so perhaps this analogy will help: anytime you have used a Python tuple, the only tr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/85#issuecomment-97772824:832,wrap,wrap,832,https://psicode.org,https://github.com/psi4/psi4/issues/85#issuecomment-97772824,1,['wrap'],['wrap']
Integrability,"@JonathonMisiewicz I would classify this as changing an interface. the wrapper will now push more properties into the `extra` slot of the return for a Schema run, rather than just throwing that information away (since the full wfn is not retrievable by schema). this adds flexibility to the interface w/ e.g. QCEngine and anything else using the wrapper, and also circumvents requiring the MolSSI to re-standardize the QCSchema for esoteric properties before we can return them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-919146009:56,interface,interface,56,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-919146009,4,"['interface', 'wrap']","['interface', 'wrapper']"
Integrability,"@JonathonMisiewicz Thanks, that was a good point. I've modified the function somewhat - as opposed to messing with the read-in original contraction coefficients, I've simply disabled the `erd_normalize_shell` call for ECP's (presumably when `self.rpowers` is not just full of `None`'s).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-375698856:136,contract,contraction,136,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-375698856,1,['contract'],['contraction']
Integrability,"@JonathonMisiewicz for completeness, at each R value, my CASSCF code is as follows. I change whether I want singlet, triplet, or quintet states by changing the number '1' in the c2_geometry section. I tried explicitly set S=0 in the detci module option, but did not change the results. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """"""; psi4.set_module_options('detci',{'num_roots': 24,'follow_root': 0,'NUM_DETS_PRINT': 40}); #'follow_root' is set to either 0 or 1, depending on the R value. casscf_energy = psi4.energy('casscf')",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988:714,depend,depending,714,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-639202988,1,['depend'],['depending']
Integrability,"@JonathonMisiewicz looks like most things worked except one of the linux builds failed for an issue that I don't think is related to my patch:. ```CMake Error at /usr/local/share/cmake-3.24/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Python (missing: Python_NumPy_INCLUDE_DIRS Interpreter; NumPy) (found suitable version ""3.8.10"", minimum required is ""3.8""); ```. Not sure how to proceed here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317:239,message,message,239,https://psicode.org,https://github.com/psi4/psi4/pull/2667#issuecomment-1212370317,1,['message'],['message']
Integrability,"@JonathonMisiewicz sorry for in-complete PR, I have edited it to include a script that has crashed.; Yes, test_psi4_interface_minimal.py is part of custom code interfaced with Psi4 that I'm working on, but Psi4 was built without any mods to the source code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1706#issuecomment-524623782:160,interface,interfaced,160,https://psicode.org,https://github.com/psi4/psi4/pull/1706#issuecomment-524623782,1,['interface'],['interfaced']
Integrability,"@JonathonMisiewicz this sounds very nice! At an even higher level, what does it do, take a one- and two-PDM (in what format?) and then compute all the derivative integrals and contract them to get the gradient?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756819458:176,contract,contract,176,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756819458,1,['contract'],['contract']
Integrability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:309,synchroniz,synchronize,309,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,2,['synchroniz'],['synchronize']
Integrability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:103,message,message,103,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,1,['message'],['message']
Integrability,"@PeterKraus thanks for this helpful update. This will eliminate some redundant computations, which is helpful (especially for people who just want a dimer IE). Thanks also for testing the gradients. I have one quibble with the user interface. What happens if a user tries to run an optimization but only uses bsse_type=['cp']? The monomer energies in the monomer basis sets need to be calculated so that we have total energies... trying to optimize the interaction energy only, without some special constraints in the optimizer to keep the monomers frozen (a capability we do not have automated right now), will give garbage. 99% of users will not be clever enough to realize that if they want the counterpoise-corrected geometry of a dimer, they need to include ""nocp"" in their bsse_type list. Can you solve this by forcibly adding monomers (and perhaps option ""nocp"" internally, if you want) when an optimization is requested? I would like to head off a lot of posts on the user forum about CP-corrected optimizations that went wrong :). Minor question about printing. I agree that things that are not total energies should not be printed in the total energy column. However, what are you doing if bsse_type='cp'? Leaving it blank? That might cause a problem for anyone trying to scrape the output file. Should there be something there, like ""n/a"" or something?. Also, when you do print the total energy, it's the same total energy as before your PR, right? The total energy of a dimer should be E_AB(AB) minus the Boys-Bernardi estimate of the BSSE, which is [E_A(AB) - E_A(A) + E_B(AB) - E_B(B)]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254:232,interface,interface,232,https://psicode.org,https://github.com/psi4/psi4/issues/1691#issuecomment-869885254,1,['interface'],['interface']
Integrability,@SinaMostafanejad Were you able to get this to work? I think the only way in which we could do this would be to write a wrapper code around these functions (similar to the __array_interface__ on Matrix objects) so that we can correctly return the python values instead of updating them in place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1821#issuecomment-643793311:120,wrap,wrapper,120,https://psicode.org,https://github.com/psi4/psi4/pull/1821#issuecomment-643793311,1,['wrap'],['wrapper']
Integrability,"@amjames Sorry for not being more clear - the output generated by the different calls to `MoldenWriter` is different if you directly interact with the interface via `molden()` versus the `set print mos` route. I have attached two examples. `test.molden` is output generated by using the `molden()` call, and `test.default.22773.molden` is generated using the `set print mos` route (I added to .txt extension to the attachments so that Github would upload them). Per the molden example in the manual (example 4 [](http://www.psicode.org/psi4manual/master/molden.html)), I passed in the densities from the returned wavefunction. I'm not sure if the DF-MP2 generates densities (I would think it needs to in order to do the density fitting), but if not the SCF call certainly generates a density which should be available in the wavefunction if no MP2 density is generated. Below is my input. > E, wfn = energy('mp2/aug-cc-pvdz', properties=['dipole'], return_wfn=True); > ; > Da_so = wfn.Da(); > Db_so = wfn.Db(); > ; > Da_mo = Matrix.triplet(wfn.Ca(), Da_so, wfn.Ca(), True, False, False); > Db_mo = Matrix.triplet(wfn.Cb(), Db_so, wfn.Cb(), True, False, False); > ; > molden(wfn, 'test.molden', density_a=Da_mo, density_b=Db_mo, dovirtual=True); > . [test.molden.txt](https://github.com/psi4/psi4/files/992976/test.molden.txt); [test.default.22773.molden.txt](https://github.com/psi4/psi4/files/992977/test.default.22773.molden.txt). The energies end up being set equal to the occupancies (which are incorrect - noninteger and in some instances in the thousands). I think this is due to the call to `MoleculeWriter.writeNO`. I did not find this call in `writer.cc`; all I could find was a header file. It does not appear to take energies in as arguments, so I'm not sure why/where from it is passing energies to the molden output. I don't understand all of the procedure in going from the density to the occupancies; why is the number of MOs per irrep used as the rotation matrix in `NO_Ra = core.Matri",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/699#issuecomment-300777718:151,interface,interface,151,https://psicode.org,https://github.com/psi4/psi4/pull/699#issuecomment-300777718,3,"['interface', 'rout']","['interface', 'route']"
Integrability,"@andyj10224 I honestly have no idea. I've never even thought of doing an atom-based loop... I guess it's beneficial if you do generalized contractions, but Psi4 doesn't do those lol",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992624092:138,contract,contractions,138,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992624092,1,['contract'],['contractions']
Integrability,"@andysim , reading https://github.com/psi4/psi4/pull/965#pullrequestreview-112407645 again, I think I may have misinterpreted it. I read it as: since the original pubchem interface, pubchem has started to send back symmetrized mols, so the symmetrization currently applied by libmints Mol upon ""I'm from pubchem"" trigger is no longer necessary. Reading again, I'm betting you mean: no one's doing the symmetrize step that pubchem inputs need. Still a piece missing, right?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/965#issuecomment-382837750:171,interface,interface,171,https://psicode.org,https://github.com/psi4/psi4/pull/965#issuecomment-382837750,1,['interface'],['interface']
Integrability,"@andysim To be clear I meant the libefp_solver interface, still not quite sure what tokenizer is doing for you in there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235354983:47,interface,interface,47,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235354983,1,['interface'],['interface']
Integrability,"@andysim, I noticed that [`fd-freq-energy-large`](https://github.com/psi4/psi4/blob/master/tests/fd-freq-energy-large/input.dat) was timing out locally. It has various tests; the first is set up for findif-by-E, the rest are unspecified but partial freqs. The test was doing the first by findif fine, then going into `SCF HESS` and timing out. The intent of the test is clear- to test findif-by-E, so I've made that explicit. My real question for you is: is that testing change contrary to anything you intended? It doesn't look like you touched the test in your PR. (And yes, looks like some re-routing from analytic to findif is in order if a partial freq is requested.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-235363935:596,rout,routing,596,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-235363935,1,['rout'],['routing']
Integrability,"@andysim, any recollection of what system inspired the [brokensymmetry](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/proc.py#L1180-L1189) routine?. All, am I right that castup and brokensymmetry that are currently in `def scf_helper` should ultimately end up in the smartsolver? And that scf_helper should ultimately make only one call to scf? That is, all attempts at control logic are moving to `procrouting/scf/` (andy trick 2.0 from c-side and castup from scf_helper).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-409789827:158,rout,routine,158,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-409789827,1,['rout'],['routine']
Integrability,@andysim: I am super excited about this code! I was wondering if you could answer a few questions so that I can start to think about how to write the interface with forte. How do you handle the reduced number of electrons? Do you redefine the atomic charge (Z) or just subtract the number of core electrons? Is this info available from Wavefunction? Let us know if we can be of any help!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/681#issuecomment-295521147:150,interface,interface,150,https://psicode.org,https://github.com/psi4/psi4/pull/681#issuecomment-295521147,1,['interface'],['interface']
Integrability,"@ashutoshvt I believe this will only be used in experimental code as you likely should contract the integrals on the fly for efficient code. Nothing really stands out at me as coded in a way that would take a lot of extra time, what kind of performance improvements are you looking for?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/757#issuecomment-349813447:87,contract,contract,87,https://psicode.org,https://github.com/psi4/psi4/pull/757#issuecomment-349813447,1,['contract'],['contract']
Integrability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:604,depend,dependencies,604,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,5,['depend'],['dependencies']
Integrability,"@bennybp, the coefficients array for the FCHK file has changed (see below) even with integrals_package libint. Key area is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/writer.cc#L788-L794), I'd think. Once this is fixed, I think these ERD PRs can go through. FYI, @andysim . ```; Contraction coefficients R N= 42						Contraction coefficients R N= 42; 5.20198307e-04 4.02334478e-03 2.07290833e-02 8.10823271e-02 2.36226352e-01		 |	 7.16680438e-01 1.33580012e+00 2.26507441e+00 3.42829563e+00 4.27751198e+00; 4.43518209e-01 3.58670589e-01 -8.34979724e-03 -1.97236012e-04 -1.53501070e-03		 |	 3.67381232e+00 1.41044798e+00 -6.30902038e-03 -2.71733278e-01 -5.09642498e-01; -7.95118391e-03 -3.21134529e-02 -1.00269643e-01 -2.34047112e-01 -3.01410928e-01		 |	 -8.68828733e-01 -1.35781019e+00 -1.81565094e+00 -1.93869191e+00 -1.18527822e+00; 1.03491965e+00 1.00000000e+00 1.00000000e+00 4.11634896e-02 2.57762836e-01		 |	 7.81974577e-01 1.52282703e+00 3.41176955e-01 3.43681595e+00 3.33255540e+00; 8.02419274e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 2.24812218e+00 6.58169745e-01 1.45551678e-01 4.34146067e+00 4.64226043e-01; 1.00000000e+00 2.54948632e-02 1.90362766e-01 8.52162022e-01 1.00000000e+00		 |	 2.22914576e+00 3.57943173e-01 6.45565254e-01 9.51885590e-01 4.31234313e-01; 1.00000000e+00 1.00000000e+00 1.00000000e+00 1.00000000e+00 2.54948632e-02		 |	 1.81416938e-01 1.53238405e+00 3.06224305e-01 1.10187220e+00 3.57943173e-01; 1.90362766e-01 8.52162022e-01 1.00000000e+00 1.00000000e+00 1.00000000e+00		 |	 6.45565254e-01 9.51885590e-01 4.31234313e-01 1.81416938e-01 1.53238405e+00; 1.00000000e+00 1.00000000e+00								 |	 3.06224305e-01 1.10187220e+00; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/587#issuecomment-277184410:306,Contract,Contraction,306,https://psicode.org,https://github.com/psi4/psi4/pull/587#issuecomment-277184410,2,['Contract'],['Contraction']
Integrability,"@bozkaya While running geometry optimizations on a test set of molecules, the MP2.5 and MP3 codes both crash specifically for 2 electron systems without any clear error messages. Input and output files for H2 and Helium geometry optimizations using MP2.5 or MP3 method, respectively.; [h2_input.txt](https://github.com/psi4/psi4/files/1635881/h2_input.txt); [h2_output.txt](https://github.com/psi4/psi4/files/1635895/h2_output.txt); [he_input.txt](https://github.com/psi4/psi4/files/1635897/he_input.txt); [he_output.txt](https://github.com/psi4/psi4/files/1635899/he_output.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/893:169,message,messages,169,https://psicode.org,https://github.com/psi4/psi4/issues/893,1,['message'],['messages']
Integrability,"@bozkaya, so if one runs a df-mp2 gradient that effectively but not explicitly does conventional HF, as through the input below, which yields the output pattern below, then this is actually a bad error of routing, which I should correct?. ```; molecule hf {; H; F 1 0.917; }. set basis cc-pvdz; set mp2_type df; set qc_module occ. gradient('mp2'); ```. ```; ...; @RHF Final Energy: -100.01941126902265; ...; Computing DF-MP2 energy using SCF MOs (Canonical DF-MP2)... ; ======================================================================= ; Nuclear Repulsion Energy (a.u.) : 5.19366944090513; DF-HF Energy (a.u.) : -100.01941126902265; REF Energy (a.u.) : -100.01941126902265; DF-MP2 Correlation Energy (a.u.) : -0.20376310280949; DF-MP2 Total Energy (a.u.) : -100.22317437183214; ======================================================================= ; ...; DFGRAD ; A General Analytic Gradients Code ; for Density-Fitted Methods ; ...; -Total Gradient:; Atom X Y Z; ------ ----------------- ----------------- -----------------; 1 -0.000000000000 0.000000000000 0.002795941505; 2 0.000000000000 -0.000000000000 -0.002795941505; ...; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192816600:205,rout,routing,205,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192816600,1,['rout'],['routing']
Integrability,"@bozkaya, thanks for all the feedback!. Q1: Good, I'm going the latter route so it behaves just like the DFMP2 module. I just wanted to confirm that it was finishing cleanly in error, and it seems we agree on that. Q2: Ok, just confirming that this was a difference btwn OCC & DFOCC. I'll go ahead and check fc & non-fc independently for df and leave in a commented check for fc w/conv in case you ever get around to that. Q3: Yay! I had tried up-ing the convergence but not the findif scheme. Will do this routinely in future. Thanks for finding the problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/245#issuecomment-192934321:71,rout,route,71,https://psicode.org,https://github.com/psi4/psi4/issues/245#issuecomment-192934321,2,['rout'],"['route', 'routinely']"
Integrability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:398,synchroniz,synchronize,398,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['synchroniz'],['synchronize']
Integrability,"@cdsherrill yes 15.0 is recent enough. 14.0 is the minimum for full C; ++11 support based on the internets. On Wed, 2016-02-10 at 13:27 -0800, David Sherrill wrote:. > Fewer compilers working is less of an issue as we push more users; > towards; > the binary distribution. And is only a temporary problem, anyway. Is; > icpc; > 15.0 recent enough to support all the standards we need?; > ; > On Wed, Feb 10, 2016 at 3:50 PM, Ben Pritchard; > notifications@github.com; > wrote:; > ; > > For me the biggest pro of C++11 is that is reduces the amount of; > > code I; > > have to write/maintain/debug.; > > - Defaulted (and deleted) constructors and assignment operators; > > (mentiond by @dgasmith https://github.com/dgasmith); > > - Liberal use of STL containers and unique_ptr means you should; > > rarely; > > have to write a destructor, and often don't have to write a copy; > > constructor; > > - Constructor delegation; > > ; > > Cons:; > > - Template programming results in nasty compiler error messages that; > > take experience to figure out; > > - Overuse of templates, auto, decltype, etc, can result unreadable; > > code; > > - This can somewhat be fixed in the new PR workflow. Don't accept; > > PRs which are a mess; > > - Some C++11 patterns can be intimidating to people who are still; > > learning basic C++; > > ; > > As more libraries require C++11 (I think Ambit, TiledArray, and; > > Cyclops; > > all do), it should generally be embraced, with some reservations.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > ; > > https://github.com/psi4/psi4public/issues/238#issuecomment-182577836.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/238#issuecomment-182596162:999,message,messages,999,https://psicode.org,https://github.com/psi4/psi4/issues/238#issuecomment-182596162,1,['message'],['messages']
Integrability,"@dgasmith ; - I don't understand what difference the PID makes in terms of a read command; ~~~~.py; set{; READ ""some_file_with_no_PID.input""; READ ""some_file_generated_from_process.1234""; }; #later...; file2open=options.get_str(""READ""); f=open(file2open,'r'); ~~~~; - I think the key point is that any solution has to be accessible both in C++ and in Python thus wrapped one way or the other in Pybind11. I personally think the common API for streams in C++ makes it easier, but it makes no difference if it's written in Python just as long as all calls go through it. ; - If the Python libraries you speak of are outside of Psi4 then in an ideal world they would allow you to specify the file they are going to write to. If they don't provide such services, Psi4 needs to intervene or ensure that the library isn't called under MPI. If these libraries aren't providing core features then it is unlikely that they will interfere with MPI operation and they can be ignored.; - I'm currently running the test suite to ensure my changes to `get_writer_file_prefix` didn't break anything. It now appends the PID to the string it was going to return anyways. Once it passes I'll make a new PR for that change and submit it. @loriab ensuring only one MPI process writes is probably a loosing battle unless you rework the infrastructure to be more like Pulsar. People likely bypass you. It think the best bet is to keep the files unique and to do it with a function like `get_writer_file_prefix` or a similar class/library. For the situation you highlighted I think `get_writer_file_prefix` will suffice. I think `get_writer_file_prefix` will work in practice as long as everyone uses it. Moving towards HPC applications I think files really should only be used for long term storage or when something doesn't fit in RAM, not for interfacing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548#issuecomment-266893399:363,wrap,wrapped,363,https://psicode.org,https://github.com/psi4/psi4/issues/548#issuecomment-266893399,1,['wrap'],['wrapped']
Integrability,@dgasmith I finally got the export working and tested it on the python side by contracting the exported integrals with the ao density and comparing against the already implemented and exported `dipole_grad()` function. How/where do you want me to implement a test for this?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614:79,contract,contracting,79,https://psicode.org,https://github.com/psi4/psi4/pull/1799#issuecomment-596681614,1,['contract'],['contracting']
Integrability,"@dgasmith I never did. I was playing with fixes, but those got stymied by direction dependent subgroups. Still, this is item number three on my hit list of bugs, and by far easier to fix than items one and two. I have a paper to prioritize, but I can hopefully include this as a bug fix between the feature freeze and 1.3 release.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488:84,depend,dependent,84,https://psicode.org,https://github.com/psi4/psi4/issues/1052#issuecomment-445554488,1,['depend'],['dependent']
Integrability,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:136,depend,dependency,136,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,2,"['depend', 'inject']","['dependency', 'inject']"
Integrability,"@dgasmith MSVC is not a must for building stuff on Windows. So far I have only had negative experiences with it, and I tend to use GCC on Windows as well. (MinGW-w64, in the form of TDM-GCC, sadly TDM-GCC seems abandoned, but as long as GCC 5.1.0 is OK, it is probably one of the easiest solutions). . At the moment I do not have time to look into this, but in general it should be doable, make and CMake does work on Windows, so as far as the C++/Fortran side is concerned I expect no issues that would be impossible to overcome. (I/O may or may not need some ifdefs and Windows specific code). I have no idea though how the python integration would work, maybe it would work relatively painlessly, maybe it would turn out to be a nightmare. The world of python dependencies and especially numpy/BLAS/LAPACK interactions can be a royal pain in the arse to work out, even on Linux, in my experience.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-381751281:633,integrat,integration,633,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-381751281,2,"['depend', 'integrat']","['dependencies', 'integration']"
Integrability,@dgasmith do you not have density thresholding in the dft code? It appears to be a common trick to make dft integration faster to avoid calculating zeros... I think NaNs should be sieved out in the output.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/863#issuecomment-345818205:108,integrat,integration,108,https://psicode.org,https://github.com/psi4/psi4/issues/863#issuecomment-345818205,1,['integrat'],['integration']
Integrability,@dgasmith no idea; the problem is that since Psi4 has been picking up new dependencies left and right I haven't had the opportunity to update the Fedora package...,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822:74,depend,dependencies,74,https://psicode.org,https://github.com/psi4/psi4/issues/1255#issuecomment-533645822,1,['depend'],['dependencies']
Integrability,"@dgasmith thats probably a better route to go, and by AO i take it you mean I should transform the opdm to the SO basis first?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-258952783:34,rout,route,34,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-258952783,1,['rout'],['route']
Integrability,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234664083:265,interface,interface,265,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083,2,"['interface', 'wrap']","['interface', 'wrappers']"
Integrability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:270,interface,interface,270,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['interface'],['interface']
Integrability,"@dgasmith, so this gets passed the mm_malloc header the other PRs were having. Unfortunately, by building off g2g master rather than Dec release, it hits all the ordering changes you made. The current state compiles and runs but gives nonsensical results for DFT. You perhaps had other plans for psi's transition on this matter. Basically, is it better to patch the ifdef rerouting onto 1.3.1 and keep gg_collocation stable, or is now as good a time as any to update the psi interface to g2g?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088:475,interface,interface,475,https://psicode.org,https://github.com/psi4/psi4/pull/1718#issuecomment-531546088,1,['interface'],['interface']
Integrability,"@edeprince3 @jturney @loriab After playing with it I though the very simple Deriv ""binary"" call wrapper was a bit antagonistic to how we are pushing Psi. I removed this and exported the Deriv library so that python side you now do the following:; - Build a deriv object; - Tweak it; - Ask it to compute a gradient. It is a few more lines python side, but now you can have ultimate control over the deriv object in python as well as C++ without adding a bunch of global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/406#issuecomment-226802345:96,wrap,wrapper,96,https://psicode.org,https://github.com/psi4/psi4/pull/406#issuecomment-226802345,1,['wrap'],['wrapper']
Integrability,"@edeprince3, if you had already pushed those enum fixes to the v2rdm/master, then sorry for my message – having them publicly accessible was all I wanted. Though if that's the complete fix, it's nice to have the 0.6 tag anyways. @robertodr, thanks for moving the import. Hopefully that clears everything up. I don't recognize that symbol error you posted, but things like that usually come from multiple lapack. I have encountered a `undefined symbol: for_realloc_lhs` issue with v2rdm that comes about from too old MKL (e.g., 2016) having got into the compile/link chain.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355376217:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355376217,1,['message'],['message']
Integrability,"@evaleev, are you at all interested in accepting into your repository CMake as an alternate build system? We know from @susilehtola that Psi4 can run with libint1 from either your repo with GNUMake or our repo with CMake. Looking over the directory structures (which have un-synced over the years), I _think_ I could arrange CMake alongside your existing build system (CMake files and GNUMake files would just ignore each other) at the cost of a few extra files and a [directory](https://github.com/psi4/libint/tree/master/cmake). Then psi4/libint could be deleted and there would once again be only one source of Libint truth. So if you're interested in CMake now or one day, I'll give it a try and submit a PR. If not, that's fine, and I'll go the simple route and apply your relicensing to psi4/libint. FYI @jturney @andysim",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/693#issuecomment-298456904:757,rout,route,757,https://psicode.org,https://github.com/psi4/psi4/issues/693#issuecomment-298456904,1,['rout'],['route']
Integrability,"@fevangelista : I think you may not have received a notification from my previous message. I don't think the code is recomputing the PK integrals. @loriab, @fevangelista : I think that the same behaviour is observed with `df_scf_guess on` or `off` because the driver automatically sets it to `on` ? Is that possible ? In the hf.cc code, everything is supposed to be fine if `df_scf_guess` is `off`. If nobody is working on that yet I will get on it after lunch and submit a pull request.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189351737:82,message,message,82,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189351737,1,['message'],['message']
Integrability,"@fevangelista which OS X version are you on? Which compilers are you using? Which versions?; Could you post the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`?; The problem arises because the `host_writer` function is not defined inside the module, since it depends on the host program. Creating a shared library with undefined symbols is not a problem on Linux, but trips up the linker on OS X.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171439294:127,interface,interfaces,127,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171439294,2,"['depend', 'interface']","['depends', 'interfaces']"
Integrability,"@hokru For ωB97M-V, it doesn't seem to be possible to change the ω parameter directly from the psithon interface—there's a check at https://github.com/psi4/psi4/blob/d9093c75c71c2b33fbe86f32b25d138675ac22eb/psi4/src/psi4/libfunctional/LibXCfunctional.cc#L218 that disallows it. I want to be on the safe side and not manually change it without knowing why the limitation is put in place. . As for DFT_VV10_POSTSCF—it does make things faster by quite a bit, but when I move to nonstandard values of (b,c), it yields deviations ≥ 0.1 Hartree in energy calculations (e.g. using the above geometry with b = 0.5 and c unchanged, I go from -456.38 to -456.17 when I turn on DFT_VV10_POSTSCF).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054:103,interface,interface,103,https://psicode.org,https://github.com/psi4/psi4/issues/2641#issuecomment-1194156054,1,['interface'],['interface']
Integrability,"@hokru It will depend quite a bit on your eigensolver. MKL seem pretty stable, your milage may vary. @CDSherrill I think your latest work will fix most of the SCF `c1` symmetry issues as SCF is now always run with symmetry and then cast to `c1`. What I really dont like about this is that it's non-deterministic. You can wind up in either minima with no real control over which you land in. Some proposals is something like `scf_density_shake 0.0` where we add a bit of noise to the density to knock it out of any starting symmetry.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349728151:15,depend,depend,15,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349728151,1,['depend'],['depend']
Integrability,"@hokru Mathematically speaking, you should never get a non-symmetric solution. But, as @dgasmith says, it depends on the math library, whether or not there is tiny numerical noise introduced, etc. Since the computer uses finite precision arithmetic, there is always a chance that noise messes up things. . I investigated this case a little today, since it captured my interest. What's going on is actually even more tricky than has been suggested so far. Normally, we don't like these symmetry-breaking solutions because they do bad things, like give unphysical dipole moments. For example, the symmetry-breaking UHF solution for NO3 radical gives very unequal charges for the O atoms [-0.0867 -0.3789 -0.3789] compared to the symmetric UHF solution [-0.2990 -0.2990 -0.2990]. I think most people would agree the asymmetric solution is just wrong, even though it has a lower energy [-278.774 819 vs -278.757 840] (https://doi.org/10.1016/S0009-2614(99)00206-7). . So, I looked at this 90 degrees twisted C2H4 example, expecting the lower-energy symmetry-broken solution to give an unphysical dipole moment. What I found surprised me. The problem here is that the ""symmetric solution"" that we've been discussing is actually a symmetry-broken solution. At 90 degrees, the true symmetry of the molecule is D2d. Since this is a non-Abelian group, Psi4 (and most codes) can't run it as D2d, so it gets run in a subgroup. Here, there are 2 choices for subgroups, C2v and D2. Psi4 picks C2v, very unfortunately, and in that subgroup, it finds a wavefunction that is very symmetry broken (compared to the full symmetry D2d), and it gets a really large, totally unphysical dipole moment of 3.2 debye. . I haven't yet managed to convince Psi4 that D2 is an acceptable subgroup at the 90 degrees geometry, but if I set the torsion angle to just off of 90 degrees (say, 89.9 deg), the code correctly detects D2 symmetry, and gets a much lower energy solution of -77.87817, which is the same one Daniel and Bert ar",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/875#issuecomment-349737355:106,depend,depends,106,https://psicode.org,https://github.com/psi4/psi4/issues/875#issuecomment-349737355,1,['depend'],['depends']
Integrability,"@hokru, correct me if I'm wrong, but isn't it fairly formulaic at this point to ask people to check how much memory they gave Psi and then check their scratch directory in the face of a PSIO read error? If it is, I have half a mind to update the error message with this advice. I'd need to check, but I think this is doable, and it would save us a lot of questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670:252,message,message,252,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661778670,1,['message'],['message']
Integrability,"@hokru, respective the memory estimate: I did some experiments and came up with a very rough estimate for the lower bound of a computation. I'll add a check and a warning in the next adcc release if the estimate is a substantial fraction of the main memory. Thanks for your suggestion in the first place. The respective change in adcc will be transparent to the interface needed for this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921:362,interface,interface,362,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-555977921,1,['interface'],['interface']
Integrability,"@hokru, thanks for the reference. It would seem based on that paper that we should:; - allow the `roos-ano-[dt]z` basis sets into CBS as well; - are the `pcseg-[0-4]` basis sets (double- to six-zeta, I believe) the segmented versions of `pc-X` bases? There might be an argument in letting those in as well, based on the Neese paper. I don't suppose we can handle the generally contracted ANO's in Psi4? They're not included in our basis set library anyway. In terms of coefficients, I probably don't understand exactly what's going on, but:; - for `corl_xtpl_helgaker_2` we use a hard-coded `beta = 3`, which is the physically correct exponent, but for extrapolation between from `[DT]` basis sets the value of `2.46` seems more appropriate. There is currently no way to supply a custom value; - for `scf_xtpl_helgaker_2` (both of these should really be called `scf_xtpl_halkier_[2,3]`): we use the exponential form which seems to perform a lot better than the power form according to Halkier et al. The `alpha=1.63` seems to be a general parameter here, however a zeta-based `alpha` seems to perform better (as it is fitted). The interface to supply `alpha` is in the function, but doesn't seem to be plugged into the CBS machinery; - the ""power form"" for SCF extrapolation is not implemented in Psi4, but the coefficent `alpha` seems to be very system and basis and zeta dependent, as shown by both Halkier et al. and Neese and Valeev. @loriab My suggestions for myself for this PR, in addition to allowing the two basis set classes above, would be:; - [ ] add power form for SCF extrapolation (eg. `scf_xtpl_power_2`) with user-supplied `alpha`, a sane default is `alpha=3.54` from Halkier et al.; - [ ] add ability to supply custom `beta` for `corl_xtpl_helgaker_2` for better performance with [DT]'s; - [ ] wire up `scf_xtpl_helgaker_2` parameter `alpha` and the other two from above with the rest of the CBS machinery, perhaps using `scf_alpha` and `corl_beta` parameters to `cbs()`. The `cc-pVX",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/963#issuecomment-381392778:377,contract,contracted,377,https://psicode.org,https://github.com/psi4/psi4/pull/963#issuecomment-381392778,1,['contract'],['contracted']
Integrability,"@jgonthier We could return a `None` object in python, but with the way wavefunction passing works its probably best to return _something_. We could also return a blank wavefunction, but the SCF does have meaningful information. Its a hard call and part of the reason why we didnt solve it during the wavefunction_pass work. Any opinions are greatly appreciated!. The comments do need an overhaul. We would like the message to print only if `return_wfn=True`, but we have not yet figured out the mechanics to do that cleanly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-184852147:415,message,message,415,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-184852147,1,['message'],['message']
Integrability,"@jturney (and other developers who wish to weigh in) I'm not sure how to proceed with Ambit beyond what I have. As it stands now the Psi4 executable has a dependency on Ambit, but Ambit has a dependency on Psi4. As best as I can tell I think there are three options:; - Ambit gets absorbed into Psi4 proper; - Ambit drops its dependency on Psi4 and is compiled before Psi4; - Psi4 drops its dependency on Ambit and is compiled before Ambit (I think @dgasmith is working on dropping the main function so this would happen consequentially). The way it worked with the old build was along the lines of 1. If we continue to go through with 1 I don't think it makes sense to distribute Psi4 and Ambit separately anymore as they are too intimately linked. Furthermore, I was under the impression that we were purging MPI from Psi4 so I don't know about the viability of 1.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-233772597:155,depend,dependency,155,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-233772597,4,['depend'],['dependency']
Integrability,@jturney @andysim @psi-rking Does anyone object to reducing the tolerance here? Alternatively we can make a special case for ghost atoms. Although two centers so close will increase linear dependency issues.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/195#issuecomment-189336384:189,depend,dependency,189,https://psicode.org,https://github.com/psi4/psi4/issues/195#issuecomment-189336384,1,['depend'],['dependency']
Integrability,"@jturney Its a momentum thing. Take something like QChem as an extreme example which (apparently) takes about 15 hours to compile and fully test. Say I do some work, push it out, and then basically have to wait a work day (or two depending on the queue) before I can see if I broke anything or not. I think this is a clear hindrance to the development cycle. If travis cannot be a full test I would prefer it would be as brief as possible while. With the way travis works 5 tests will run in an hour, 6 will always take two, with more test taking progressively longer depending on the queue. If it wasn't such a sharp increase I wouldn't mind it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/237#issuecomment-182953987:230,depend,depending,230,https://psicode.org,https://github.com/psi4/psi4/pull/237#issuecomment-182953987,2,['depend'],['depending']
Integrability,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:36,integrat,integration,36,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938,1,['integrat'],['integration']
Integrability,@jturney should've written this and called it JetPACK. I'm not sure there's a more central location; the libqt library (math routines from the original 'quantum trio') is about as central a math library as we have. I agree that avoiding duplication would be very good though.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932:125,rout,routines,125,https://psicode.org,https://github.com/psi4/psi4/pull/1347#issuecomment-438494932,1,['rout'],['routines']
Integrability,"@lazaroid , I saw the forum post, and it's extremely helpful. My suspicion is that this is being caused by the injection of an optimisation that uses an instruction only available on the offending processors. I'm fine with rounding the result but, just for my own edification, I'd like to experiment with some `#pragma optimize` blocks to see if my suspicion is correct. This should be a fairly simple test, now that you've done all of the hard work of figuring out exactly what's wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-292635303:111,inject,injection,111,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-292635303,1,['inject'],['injection']
Integrability,"@loriab **TL;DR** Yes, the syntax is the same and is described [here](http://pcmsolver.readthedocs.org/en/latest/users/input.html). **Lengthy version**; The input to PCMSolver can work like this:; 1. Either you use the ""native"" format that is processed by the module's own Python script. This requires the user to provide an additional input file when submitting the calculation.; 2. Either you pass a `struct` with relevant input parameters when initializing the library from within the host. This allows using the host program native syntax. Of course, the host has to define the appropriate input sections. Since the module has to be interoperable with C/C++ and Fortran hosts, for the moment being (and the foreseeable future), the second strategy is limited to a subset of all possible options to the library.; With @andysim and @lothian we decided for a middle ground in Psi4: The additional input file is incorporated into a section in the Psi4 input that is extracted in the current directory so that PCMSolver's Python script can parse it. This would be strategy 1.5. All programs with an interface to PCMSolver can use Strategy 1 (DALTON, LSDALTON, DIRAC and a couple of others) Only DIRAC can use Strategy 2. Only Psi4 uses strategy 1.5: it was rather easy to implement, since everything runs through Python.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/212#issuecomment-171673504:637,interoperab,interoperable,637,https://psicode.org,https://github.com/psi4/psi4/pull/212#issuecomment-171673504,2,"['interface', 'interoperab']","['interface', 'interoperable']"
Integrability,"@loriab @fevangelista @kannon92 Yes, I have been working on building both static **and** shared libraries for the PCM module and that's the root of your troubles.; @loriab commit psi4/psi4@f798b4f1b should fix your problem.; @fevangelista what is the output of `nm interfaces/lib/libpcm.so | grep Getkw`? Are you doing a fresh build? I suspect the Makefiles generated by CMake might be stale and try to link against the static `libpcm.a` which doesn't have Getkw or Zlib linked in. You might try to clean up your cache or better still, re-run the setup script and re-build from scratch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-170844312:265,interface,interfaces,265,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-170844312,1,['interface'],['interfaces']
Integrability,"@loriab Ah, no. Was trying to do a `+d` basis example. Everything that I messed with seemed to work and since we rely heavily on the CBS wrapper this should mostly be syntactic sugar at this point. Let me know if you hit any issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/374#issuecomment-217934117:137,wrap,wrapper,137,https://psicode.org,https://github.com/psi4/psi4/pull/374#issuecomment-217934117,1,['wrap'],['wrapper']
Integrability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:301,message,message,301,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,1,['message'],['message']
Integrability,@loriab Can we close this? I think this is wrapped up by now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2633#issuecomment-1540498326:43,wrap,wrapped,43,https://psicode.org,https://github.com/psi4/psi4/pull/2633#issuecomment-1540498326,1,['wrap'],['wrapped']
Integrability,"@loriab FYI libxc 4.0.5 won't include the Python interface, that'll be left to 4.1.0.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/802#issuecomment-384340524:49,interface,interface,49,https://psicode.org,https://github.com/psi4/psi4/pull/802#issuecomment-384340524,1,['interface'],['interface']
Integrability,"@loriab I can confirm that I have your version working with a5Z on Bridges. I suspect your branch is in a state of flux, but I'll point out that I had to do a few tweaks to get it to work. For example I had to make `psi4_main.a` a shared library so that I could access the Python bindings (and change it's name to `psi4.so`, otherwise Python claims it doesn't have an `__init__` function because Boost defines it for a module called psi4). There were a few places where the old libint and libderiv targets were still being used, which led to link errors like `no -lderiv` and `no -lint`. Also the `psi4config` file needs updated to reflect these changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241027531:67,Bridg,Bridges,67,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241027531,1,['Bridg'],['Bridges']
Integrability,"@loriab I have integrated `psi4 --fulltest` on Azure, but the tests does not work in parallel:; ```; 2018-12-06T18:15:06.8235423Z =================================== ERRORS ====================================; 2018-12-06T18:15:06.8236398Z _______________ ERROR at teardown of test_deprecated_wfn_arrays _______________; 2018-12-06T18:15:06.8236914Z [gw0] win32 -- Python 3.6.6 C:\tools\miniconda3\python.exe; 2018-12-06T18:15:06.8237116Z ; 2018-12-06T18:15:06.8238150Z tp = <class 'PermissionError'>, value = None, tb = None; 2018-12-06T18:15:06.8238413Z ; 2018-12-06T18:15:06.8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:15,integrat,integrated,15,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['integrat'],['integrated']
Integrability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:850,message,message,850,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,1,['message'],['message']
Integrability,"@loriab If the threading flag you mentioned refers to `USE_OPENMP=1`, then I am reasonably sure that is essential. As far as I understand, OpenBLAS is not stateless/thread-safe when compiled to use its native threading. So if there is an OMP parallel section in Psi4, and multiple Psi4 threads call BLAS/LAPACK subrutines at the same time, AND OpenBLAS is also doing those operations in parallel, then you get undefined behaviour. This is probably not going to be reliably mitigated by setting OpenBLAS to only use 1 thread at runtime, it may still cause UB.; AFAIK, currently the only safe way to call OpenBLAS BLAS/LAPACK routines from OMP parallel regions, is to use an OpenBLAS build compiled with `USE_OPENMP=1`. This disables the native/pthreads parallelism, and uses OMP instead, this way you get thread safety and nested parallelism should also work.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476:624,rout,routines,624,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390192476,1,['rout'],['routines']
Integrability,@loriab It is done. adcc 0.14.2 now has the new dependency pins as discussed in main.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598881163:48,depend,dependency,48,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598881163,1,['depend'],['dependency']
Integrability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:1608,message,message,1608,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['message'],['message']
Integrability,"@loriab Regarding the chemps2 version: I just tried on my desktop where everything is fine and it installed 1.8.3. On my cluster with gcc < 4.9, it installs chemps2 1.8.2, if I do the install with the gcc 5 env activated it installs chemps2 1.8.3. So it seems the version installed depends on the availability of gcc >= 4.9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288529918:282,depend,depends,282,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288529918,1,['depend'],['depends']
Integrability,"@loriab Thanks, the GENBAS file was indeed missing from directory `/xstorage/tobias/bin/cfour/basis/`. After copying one into that directory, the input you provided now works on our cluster. I look forward to getting to know the Psi4/CFOUR route.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155600386:240,rout,route,240,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155600386,1,['rout'],['route']
Integrability,@loriab This works fine for me in Python 2 and 3. Can you provide the error message? This should be fine as the base Exception class always inits a blank `message`. We may be doing something wrong somewhere.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530#issuecomment-263296772:76,message,message,76,https://psicode.org,https://github.com/psi4/psi4/pull/530#issuecomment-263296772,2,['message'],['message']
Integrability,"@loriab and @tovrstra: Can we find a compromise where we keep the interface consistent but make sure that the inner workings of C++ classes is all in a.u.? I agree that having the logic deep down the code is not the right way to go. I would keep the current automatic conversion for several reasons:; 1. **Continuity**. People are already using it, so switching could create some challenges since one would have to be careful when setting up computations for different version of psi4; 1. **Potential confusion**. The potential for confusing bohr/ang with the external field is greater than that of confusing bohr/ang in the molecule geometry. For molecules if one confuses bohr vs. ang you easily run into convergence problems or get nonsensical results. But for the external field corrections it's not obvious, unless one does some testing. We, for example, could entirely miss this change in our computations.; 1. **Practicality**. We use the external charges and in our typical workflow we prepare a geometry for a lattice of atoms and then separate the QM from the MM region. It's just simpler to keep everything consistent in one set of units. I have to say, that from the user perspective, the current way we handle the input is not ideal. I am not familiar with QMMM codes, but what would be the most convenient input format is something like we have for the molecular fragments:; ```; molecule {; C ; O ; <some delimiter>; Q X1 Y1 Z1 CHARGE1; Q X2 Y2 Z2 CHARGE2; }; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345:66,interface,interface,66,https://psicode.org,https://github.com/psi4/psi4/issues/1881#issuecomment-625885345,1,['interface'],['interface']
Integrability,"@loriab not yet, I think? Are there any more api changes that need to be included? I'm sure Miguel and Micael could be persuaded to make a stable release. However, Miguel is probably still working on porting the functionals into a new Maple interface, so I don't know how much sense it would be to release now, or how difficult it would be to cherrypick that stuff away.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575:241,interface,interface,241,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450764575,1,['interface'],['interface']
Integrability,"@loriab one more note about AMD Ryzen performance: AVX is fully supported (except AVX-512), but internally the floating point units are only 128 bit wide, so any 256 bit wide AVX/AVX2 instructions are split in half to be executed. This means that for current Ryzen/EPYC chips, using AVX is unlikely to offer the significant performance benefit seen for Intel chips, unless it can alleviate some specific bottleneck. But AFAIK there is no separate ""AVX-mode"" like Intel, and running AVX code (i.e. complied for Haswell) is often harmless and does not cause a performance degradation. ; Really the only mayor weak points of Zen CPUs is memory latency and the communication latency between CCX-es (acts kinda like NUMA-on-a-chip). Especially EPYC CPUs are NUMA-like, you should even be able to toggle the NUMA mode in EFI/BIOS between full-on NUMA and try-to-act-like UMA. But really, core-to-core synchronization latency wise a single socket EPYC system acts more like a quad or octa socket, depending on how you look at it.; EPYC is great if you are looking into using multiple GPUs or NVMe drives, it has absolutely massive amounts of PCI-E lanes.; Hope this helps!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877:895,synchroniz,synchronization,895,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-391027877,2,"['depend', 'synchroniz']","['depending', 'synchronization']"
Integrability,"@loriab the switching to Python 3.6 is intentional. I just copied scripts from Appveyor, where I had to pin Python version due to missing dependencies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441600563:138,depend,dependencies,138,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441600563,1,['depend'],['dependencies']
Integrability,"@loriab, @jturney : Problem fixed. Deleting synchronization in AIOHandler::write, I saw the errors you mentioned, Lori. The error in cubeprop was caused by the threads not being joined before they were destroyed (Boost automatically called detach() in the thread destructors). After adding synchronization everywhere, the cubeprop error disappears.; Then, sapt2, sapt3 and sapt6 had errors. These ones were caused by threads being joined twice when the user called synchronize on AIOHandler. That is now fixed by having synchronize() check wether the threads are joinable or not. I believe threads are now properly managed by AIOHandler.; @susilehtola : the error message you saw will not appear after PR #609 is accepted. Thanks for reporting it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/596#issuecomment-278176196:44,synchroniz,synchronization,44,https://psicode.org,https://github.com/psi4/psi4/issues/596#issuecomment-278176196,5,"['message', 'synchroniz']","['message', 'synchronization', 'synchronize']"
Integrability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:177,message,message,177,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,1,['message'],['message']
Integrability,"@loriab. I think `-DOpenMP_LIBRARY_DIRS` is a good solution. I just think that if the detection is not going to be truly automatic (i.e. combinations such as gcc + MKL, which is a very common free combination of software, is not properly detected) it probably should be more obvious to the user that such options _have_ to be passed to CMake. With that in mind, improving the error message suggesting to use `-DOpenMP_LIBRARY_DIRS` would be awesome. And thank you for your time by the way.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052:382,message,message,382,https://psicode.org,https://github.com/psi4/psi4/issues/1118#issuecomment-410473052,1,['message'],['message']
Integrability,"@loriab: I found a small problem with this PR that I was thinking you might know best how to fix. At the 5z level for Na and Mg, Pracher (2011) mention [1] that it's _not_ the case that the cc-pwCV5Z basis is formed simply by adding the tight functions to the cc-pV5Z basis. i.e. the contractions in cc-pwCV5Z are not a strict superset of the contractions in cc-pV5Z for these elements. [1]; > To avoid near linear-dependence in the s functions at the quintuple-z level for Na and Mg, an additional four s functions are uncontracted from the Hartree–Fock set and take the place of the usual optimized tight s functions for core-valence correlation. Is there a way to handle this with the psi machinery?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-306291837:284,contract,contractions,284,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-306291837,3,"['contract', 'depend']","['contractions', 'dependence']"
Integrability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:396,synchroniz,synchronize,396,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:298,synchroniz,synchronize,298,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,2,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:416,synchroniz,synchronize,416,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['synchroniz'],['synchronize']
Integrability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:423,synchroniz,synchronize,423,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['synchroniz'],['synchronize']
Integrability,"@matt-chan Regarding the note in the documentation, I think it would be best to leave the comments on the arguments alone, and in the general description of file4/file2 init we can add a line to the end. . `Note: if label is found in the TOC for FILENUM the data in that file-entry read in/overwritten by subsequent functions using this buffer. If label is not found in the TOC for FILENUM . If @lothian is fine with that, and you think it would help, I think that is enough to help people out. I wouldn't want to confuse the issue further by putting notes about files in `buf4_init`, or suggesting that the cache system is somehow involved. Regarding your question: First, could you show me where that contradiction is in CCENERGY?; Second, to clarify the file-number, label combination is enough to specify the quantity you want to retrieve, with the important caveat that you (the programmer) also know *everything* that has been done with that file-entry up to the point where your code is using it. Which may include the file it lives in being having been wiped clean (if it was a temporary file, for example). Also a side note:; > … which data is returned by buf4_init and friends .. I will reiterate that `buf4_init()` does not return any data. It may be if the quantity is stored in cache, and after you `buf4_init()` you can access the data in `dpdbuf4->matrix` but that is not something you can rely on since setting `cachelevel = 0` in the input file would mean code relying on something staying in cache will break. You need to have calls to the appropriate matrix initialization/reading functions as well. This is not obvious at first glance at libdpd since the commonly used `contractXYZ` and other similar functions are doing a lot on the inside inside.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/550#issuecomment-267239879:1690,contract,contractXYZ,1690,https://psicode.org,https://github.com/psi4/psi4/pull/550#issuecomment-267239879,1,['contract'],['contractXYZ']
Integrability,"@psi-rking . Yup, `asarray()` is great, a product of DGAS' numpy interface. And so much handier for printing psi4.core.Matrix to screen, rather than just mat.print_out() to file. I haven't traced it fully recently, but I expect [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.cc#L111) is where mass changes get caught. In practical terms, the freq-isotope[12] test cases should cover the rotational_symmetry_number with some care. You're right that mass-symmetry-breaking in Molecule wasn't working at one time, though. I should probably spice up mints5 to check this thoroughly. Or were you concerned particularly with non-Abelian PG involving `n`? Or something else I've missed?. Hmm, I keep reading it as ""nwchem hessian"". Maybe time for a name change to just ""hessian"" with the weightedness in the docstring.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/834#issuecomment-344691586:65,interface,interface,65,https://psicode.org,https://github.com/psi4/psi4/pull/834#issuecomment-344691586,1,['interface'],['interface']
Integrability,"@psi-rking Just FYI this bug occurs with SCF/DFT or MP2 for a cheaper computation. For me, the primary concern is the symmetry mapping error is fairly generic. I think a bit clearer error message (if possible) would be sufficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203062097:188,message,message,188,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203062097,1,['message'],['message']
Integrability,"@psi-rking Thats very odd, I get a failure at a large number of steps for both SCF and DFT. I guess you can consider that this doesn't identify the TS, but it should still fail with a understandable error message.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/10#issuecomment-203471756:205,message,message,205,https://psicode.org,https://github.com/psi4/psi4/issues/10#issuecomment-203471756,1,['message'],['message']
Integrability,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:152,interface,interface,152,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957,1,['interface'],['interface']
Integrability,"@rmcgibbo thanks for the info - I wasn't aware of those fine details of dynamic loading. So it seems the input to the SVD call is subtly different then, if both paths end up in MKL routines. This is quite a mystery.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/748#issuecomment-311739442:181,rout,routines,181,https://psicode.org,https://github.com/psi4/psi4/issues/748#issuecomment-311739442,1,['rout'],['routines']
Integrability,"@rmcgibbo, that'd be excellent. I'll make my changes on an open PR that I'll tag you in so you can see them, even if you don't have time to chime in. The old Psi4 approach was to parse and store basis sets C++ side. Then the parsing and storage (GShell, ShellInfo and the like) got copied to Python, with greatly improved parsing / file handling. I'd like to now get rid of the resulting duplication by having only parsing / filesystem code in python, and handing some hardwired data structure to the C++ constructor for building / storage. Then, I think the basis set storage (unused, AFAIK) in Python should be nuked, as should the parsing stuff in C++. It should make the whole process less confusing, I hope. I also want to move the ECP basis set to a member of regular Basis sets; the janky setup right now was done by me, mostly to test the integrals. Now we have the right answer, it's time to clean things up -- especially the multiple return values in the python basis set construction routines. Any thoughts / suggestions you have are most welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-305336864:995,rout,routines,995,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-305336864,1,['rout'],['routines']
Integrability,"@robashaw One thought I had while looking at this was: How hard would it be to put pugixml, the associated libecpint internal database reads, and the ecp files themselves behind a CMAKE keyword within libecpint? That way we might be able to keep the basis sets in one place instead of having a duplicated copy within libecpint, and also can ditch the pugixml dependency. I'm not sure this is a helpful functionality for other QM codes, or how much work it'd involve.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-804473180:359,depend,dependency,359,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-804473180,1,['depend'],['dependency']
Integrability,"@robertodr ; Thanks on looking at Py3 and updating the autocmake omp. And go ahead and set `ENABLE_64BIT_INTEGERS` and anything else to sensible values. You're correct that Distelli and Travis are testing _only_ Psi4, not any addons. In fact, the addons it does test (libint, libefp, gdma) aren't getting built either. Rather (for Travis at least), it's downloaded prebuilt conda packages and just doing integration testing. PCMSolver compiles _really_ slowly (at least Release with Intel compilers), and we can't afford that. But once PCMSolver is up and running and packaged again, it can be added to the integration tests. We can certainly afford a fast test case or two.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-276677358:404,integrat,integration,404,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-276677358,2,['integrat'],['integration']
Integrability,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171441011:523,interface,interfaces,523,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011,1,['interface'],['interfaces']
Integrability,"@robertodr I used the line you suggested. I guess that I should then specify; --toolset=intel-linux-cray as argument for the bootstrap script ?. The bootstrap script does not like that, it issues the error:. Unknown toolset: intel-linux-cray. You can specify the toolset as the argument, i.e.:; ./build.sh gcc. Toolsets supported by this script are:; acc, como, darwin, gcc, intel-darwin, intel-linux, kcc, kylix,; mipspro, mingw(msys), pathscale, pgi, qcc, sun, sunpro, tru64cxx, vacpp. and I believe that if I specify --toolset=intel-linux, it then just uses icc instead of the proper CC wrapper on the Cray.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-163044282:590,wrap,wrapper,590,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-163044282,1,['wrap'],['wrapper']
Integrability,"@ryanmrichard , so are you always adding dummy/placeholder INTERFACE libraries for all the add-ons? In externals dir, either an external proj gets built or a dummy lib gets created. Then in main psi4/CM, either libraries get detected or the dummy lib gets added to psi4?. | `addon_found` | `enable_addon` | outcome in external/addon/CM | outcome in psi4/CM optional_plugin() | net result |; | --- | --- | --- | --- | --- |; | T | T | add_lib | append libs | use prebuilt detected |; | T | F | add_lib | add_lib | use dummy interface lib |; | F | T | extproj_add | append libs | use superbuild detected |; | F | F | add_lib | add_lib | use dummy interface lib |",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238059409:59,INTERFACE,INTERFACE,59,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238059409,3,"['INTERFACE', 'interface']","['INTERFACE', 'interface']"
Integrability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:1132,message,message,1132,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,1,['message'],['message']
Integrability,"@susilehtola it does, and we do plan to interface all available integrals. I also have plans to generalize the Erfc integrals to a form like `(a + b erf(omega r)/r` so we don't have to compute two sets of integrals for the range separated functionals",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446:40,interface,interface,40,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-568185446,1,['interface'],['interface']
Integrability,"@susilehtola: that's correct. I wrote my reply before I saw the second message from @AJStone, so I had assumed the basis itself is Cartesian. As long as the extra factors that I mentioned are folded into the backtransformation it *should* be fine. I'll keep digging around and let you know if I find anything. The spherical code should work for any angular momentum; it's only the Cartesians where there are subtleties to handle.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1574#issuecomment-472053550:71,message,message,71,https://psicode.org,https://github.com/psi4/psi4/issues/1574#issuecomment-472053550,1,['message'],['message']
Integrability,"@zachglick Nice job! Are you still working on this? How difficult would it be to wire it up with the Python interface, to expose PNOs and integrals in Python?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591:108,interface,interface,108,https://psicode.org,https://github.com/psi4/psi4/pull/2093#issuecomment-863471591,1,['interface'],['interface']
Integrability,"A [recent PR](https://github.com/psi4/psi4/pull/2780#event-7959038316) changed `detci` so that it crashes when the user specified more roots than the basis set allows. @susilehtola proposed that instead, `detci` take as many roots as possible. What do we want to do?. I'll quote Lori's analysis of our options. > 1. Focus on segfault -> error msg first, as Jonathon has done and as eomcc should do. no contracts violated. compute time wasted.; > ; > 2. Reset nroots as needed. Change read_options descriptions to ""max roots sought; may be adjusted downwards for small basis sets"". nroots contract violated. could be troublesome for machine returned results since roots array length != nroots requested. good for throughput calcs & no compute time wasted. (resetting nroots may not be so easy if arrays are allocated based on option.); > ; > 3. Same as (2) but py-side it detects nroots change and throws a specialized error (like we do for convergence) with full output and completed wfn attached, so no compute or results lost. no contracts violated. automated runs can recover.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2825:402,contract,contracts,402,https://psicode.org,https://github.com/psi4/psi4/issues/2825,3,['contract'],"['contract', 'contracts']"
Integrability,A `SyntaxError` in the traceback prints also the offending line before the exception message. That isn't caught.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920#issuecomment-639415988:85,message,message,85,https://psicode.org,https://github.com/psi4/psi4/issues/1920#issuecomment-639415988,1,['message'],['message']
Integrability,"A consequence of @loriab's changes in #2764 is that `SphericalGrid::order_` no longer means ""Order of spherical harmonics in spherical grid (integrates products up to L_tot = 2 * order_ + 1)"", as the docstring claims. This seems to be used for printing and nothing else, so it may be better to just remove this field entirely. Removing such things from `cubature.cc` is directly in scope of #2736.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2765:141,integrat,integrates,141,https://psicode.org,https://github.com/psi4/psi4/issues/2765,1,['integrat'],['integrates']
Integrability,"A couple of options: 1) use [find_executable()]( https://docs.python.org/3.5/distutils/apiref.html#module-distutils.spawn) to figure it out or 2) have CMake inject the python executable path that it detected, using something like [configure_file](https://cmake.org/cmake/help/latest/command/configure_file.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503:157,inject,inject,157,https://psicode.org,https://github.com/psi4/psi4/pull/1709#issuecomment-526620503,1,['inject'],['inject']
Integrability,"A couple of remarks:; - chemps2 v1.7 is not yet released and will not be until I do a few applications and write a paper myself. The recommended version to use is still v1.6 in the meantime and CASPT2 is therefore not supported yet. But that doesn't mean it shouldn't work.; - One important thing is that I haven't made CASPT2 parallel yet. You will have to wait forever when the number of virtuals is modest / large.; - A second important remark is that I also currently use only pseudocanonical orbitals for DMRG-CASPT2, so for elongated molecules you will waste your time at the moment, because the virtual dimension is way smaller by using localized orbitals. But for that I need to implement the full 4-RDM instead of the diagonal one, and that is not for the very near future. The cumulant approximation is also ready on the other hand, but will only be used in conjunction with the CASPT2 interface at one point in the future.; - I don't use the current HEAD of psi4/psi4, but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:896,interface,interface,896,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,1,['interface'],['interface']
Integrability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:395,depend,dependency,395,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,2,['depend'],"['dependencies', 'dependency']"
Integrability,"A few updates on my progress:; - Most features I'd like to see available from adcc in Psi4 are now implemented. We're still working on UHF support for Psi4 (see adc-connect/adcc#20), which only involves adcc-side changes. With PR 20 merged, I'd consider the adcc-Psi4 interface feature complete for now as well.; - Apart from the tests requiring UHF, all tests I have committed are passing on my machine. The testdata is generated using adcc and pyscf, so no overlap with the Psi4 interface code I add here.; - Installation of adcc from the Psi4 buildsystem is untested, since it requires adcc `v0.13.2` to be tagged on our end. We'll do that after PR 20 is merged on our end. With that said: Feel free to be nitty on my code if you find something :smile:.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812:268,interface,interface,268,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552136812,2,['interface'],['interface']
Integrability,"A minor DCT bug that is on my to-fix list when I move the control logic to Python:; The code often prints energies to the output file that were created using outdated intermediates, so they aren't the energy you would actually get using the current cumulant and orbital parameters. This means that even for variational parameters, lowering the residual produces a higher (reported) energy. The two offenders I've noticed are not updating the tau intermediate after a cumulant update and not re-computing the 1RDM and separable contributions to the energy after updating tau. In `dcft_oo_UHF.cc:run_simult_dcft_oo`, for instance, the cumulant is updated on [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dcft/dcft_oo_UHF.cc#L133), but tau never gets recomputed (`build_tau` and `refine_tau`) until the next iteration of the loop, by which point the energy has already been printed. You can see both problems in the twostep algorithm. Even if it was recomputed, `dcft_compute_uhf:compute_energy_UHF` is never called until the next iteration of the loop either. That function is responsible for re-computing the tau-dependent terms, so the tau-energy contribution would still be one iteration behind. The control logic will need to be re-organized.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1511:1133,depend,dependent,1133,https://psicode.org,https://github.com/psi4/psi4/issues/1511,1,['depend'],['dependent']
Integrability,"A month ago, I installed PSI4 from miniconda. Everything was fine and PSI4 finished a lot of calculations. Recently I have updated PSI4 with the command ""conda update psi4"" and PSI4 cannot run anymore because of library omission. Using command ""conda inspect linkages psi4"", I obtained this output:; ""not found:; libgsl.so.0 (not found); libgslcblas.so.0 (not found); libhdf5.so.10 (not found); libhdf5_hl.so.10 (not found)"". What should I do to sovle this problem? It will take me much time if I compile PSI4 and it's dependencies from the beginning.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154:519,depend,dependencies,519,https://psicode.org,https://github.com/psi4/psi4/issues/154,1,['depend'],['dependencies']
Integrability,"A recent [forum issue](http://forum.psicode.org/t/error-in-running-on-centos-undefinted-name-true/1727/2) traced back to a user writing `return_wfn=true` rather than `return_wfn=True`. Can we teach the parser to automatically correct this, or at least print a better error message?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1859:273,message,message,273,https://psicode.org,https://github.com/psi4/psi4/issues/1859,1,['message'],['message']
Integrability,"A recent [forum report](http://forum.psicode.org/t/deleting-scratch-files-before-a-computation-finishes/2206) has a user encountering the error message ""PSIOManager cannot get a mirror file handle"". Liberal use of `psi.core.clean` isn't fixing anything, and Holger and I can't figure out what the error message means. We need to figure out what the message means, how the user should respond, and put that into the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2224:144,message,message,144,https://psicode.org,https://github.com/psi4/psi4/issues/2224,4,['message'],['message']
Integrability,"A restart is only possible if the _binary_ files (i.e., those in your scratch directory – probably /tmp) are also available. It is not feasible to store the CC wave function in the working directory, as it often requires too many GB of storage for routine checkpointing. This may be your problem. There is also an issue that the phases on the MOs must be consistent between computations. This is normally corrected automatically by PSI4, but I don't know if an error occurred in your job(s). ## -TDC. Prof. T. Daniel Crawford; crawdad@vt.edu; 540-231-7760. On Dec 3, 2013, at 4:34 PM, sbart76 notifications@github.com wrote:. > dear psi4 team,; > ; > i am trying to restart an interrupted coupled cluster run, but to no avail. the input file has the following keywords:; > ; > set cceom restart_eom_cc3 true; > set ccenergy restart true; > set cclambda restart true; > set ccresponse restart true; > ; > yet, in the output file in the ccenergy section i find:; > ; > Restart = No; > ; > the files psi.{pid}.\* from the previous run are in the current working directory, permissions are correct. increasing verbosity didn't seem to help me to trace the problem - i am basically not sure what file and from where psi4 wants to read, and i cannot find it in the manual. could anybody please enlighten me?; > ; > cheers,; > bartek; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/27#issuecomment-29766453:248,rout,routine,248,https://psicode.org,https://github.com/psi4/psi4/issues/27#issuecomment-29766453,1,['rout'],['routine']
Integrability,"A simple hack around this problem is to preload libkml_rt.so. If you are; using bash,; export LD_PRELOAD = libmkl_rt.so should fix it. The problem comes due to; conflict between; the mkl routines with which psi4 was installed with the numpy's mkl; routines. On Sat, Dec 17, 2016 at 6:57 AM, Ugur Bozkaya <notifications@github.com>; wrote:. > I have compiled psi4 on Linux (Centos) then I got the following run time; > error; >; > ""Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.""; >; > I have already sourced MKL and intel compilers as usual, with the; > following lines; >; > ""source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/bin/compilervars.sh intel64; > source /opt/intel/parallel_studio_xe_2016.3.067/compilers_and_; > libraries_2016/linux/mkl/bin/mklvars.sh intel64""; >; > In old versions of psi4 I never encounter such a problem with the same; > intel package.; >; > Thanks,; >; > @loriab <https://github.com/loriab> @dgasmith; > <https://github.com/dgasmith>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/552>, or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AFIK8BfN0TXGNudgDdYo90E43zTWgjgcks5rI849gaJpZM4LP3p6>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/552#issuecomment-267762083:187,rout,routines,187,https://psicode.org,https://github.com/psi4/psi4/issues/552#issuecomment-267762083,2,['rout'],['routines']
Integrability,"A simple input fails to run:; ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 250 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; energy('scf'); ```; a; And here is the error message:. ```; [henrique@localhost ~] $ psi4 teste.dat ; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 7, in <module>. File ""/usr/share/psi4/python/driver.py"", line 45, in <module>; import driver_util. File ""/usr/share/psi4/python/driver_util.py"", line 30, in <module>; from procedures import *. File ""/usr/share/psi4/python/procedures/__init__.py"", line 1, in <module>; from proc_table import procedures, hooks, energy_only_methods. File ""/usr/share/psi4/python/procedures/proc_table.py"", line 198, in <module>; for ssuper in proc.superfunctional_list():. File ""/usr/share/psi4/python/procedures/functional.py"", line 3605, in superfunctional_list; sup = superfunctionals[key](key, 1, 1). File ""/usr/share/psi4/python/procedures/functional.py"", line 1953, in build_b3lypd1_superfunctional; sup = build_b3lyp_superfunctional(name, npoints, deriv). File ""/usr/share/psi4/python/procedures/functional.py"", line 1224, in build_b3lyp_superfunctional; sup = psi4.SuperFunctional.blank(). TypeError: No to_python (by-value) converter found for C++ type: boost::shared_ptr<psi::SuperFunctional>. ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/531:263,message,message,263,https://psicode.org,https://github.com/psi4/psi4/issues/531,1,['message'],['message']
Integrability,"A user on the forums [reported](http://forum.psicode.org/t/psio-error-during-adc-2/1338) a PSIO error when using ADC(2). The input file is; ```; #! ADC/def-2SVP on BODIPY-Phe . molecule bodphe {; 0 1 ; N 0.07895 0.63049 2.21156; N 0.40701 -1.77253 2.18386; C 0.85975 -1.61894 0.87368; C 1.93462 -2.51476 0.66009; C 0.25153 -0.54266 0.07529; C 0.60747 0.60802 0.92030; C 1.47746 1.72071 0.77028; C 1.38234 2.45311 1.95195; C 2.07438 -3.24863 1.84094; C 0.53652 1.71840 2.84134; C 1.13424 -2.73093 2.77791; H 2.76916 -4.06657 2.02914; H 0.98002 -2.99119 3.82431; H 2.46553 -2.64393 -0.28198; H -0.76107 1.52726 -1.36025; C -0.87740 0.55157 -1.84231; C -0.42668 -0.61486 -1.17553; C -0.59367 -1.86931 -1.81442; H -0.24902 -2.77578 -1.30769; C -1.18278 -1.94632 -3.07591; H -1.30041 -2.92327 -3.55316; C -1.60723 -0.78659 -3.74115; H -2.04665 -0.85123 -4.73942; C -1.45720 0.45654 -3.10859; H -1.78685 1.36634 -3.61791; B -0.55985 -0.69534 2.82439; F -0.40573 -0.68314 4.19154; H 0.27433 1.92595 3.87885; H 1.84952 3.41187 2.17639; H 2.03049 1.96835 -0.13399; F -1.84936 -0.86321 2.39539; symmetry c1 ; }. set {; reference rhf; basis def2-svp; freeze_core true; guess auto ; roots_per_irrep [2] ; }. ref_energy = -906.2735763050857258 ; adc_energy = energy('adc'); ```. The (OV|VV) integral transformation completes, and then `file4_mat_irrep_rd_block` raises the following error:; ```; PSIO_ERROR: Can't find TOC Entry MO Ints V1243); PSIO_ERROR: unit = 61, errval = 13; PSIO_ERROR: 13 (no such TOC entry); ```. This may be a large system, but user's tests indicate scratch usage is at 10% at the time of the crash, and this error message isn't what PSIO normally displays during a memory problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1596:1628,message,message,1628,https://psicode.org,https://github.com/psi4/psi4/issues/1596,1,['message'],['message']
Integrability,"A warning message might be better. Or, if the main basis has ECPs, then the same ECP could be used in the small basis calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1439#issuecomment-449021614:10,message,message,10,https://psicode.org,https://github.com/psi4/psi4/issues/1439#issuecomment-449021614,1,['message'],['message']
Integrability,AIM Interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2341:4,Interface,Interface,4,https://psicode.org,https://github.com/psi4/psi4/issues/2341,1,['Interface'],['Interface']
Integrability,"AJ made this comment:. My implementation involved handling cases where the user sets a hf reference and calls a dft method. For example if the input is,. set reference rhf. energy('b3lyp). the reference option will be set to rks. The goal there was to keep the energy('method') interface user friendly. If/when psi4public/118 is implemented the smart-reference should be able to handle those conflicts and my checks for these conflicts can probably be removed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/118#issuecomment-170147040:278,interface,interface,278,https://psicode.org,https://github.com/psi4/psi4/issues/118#issuecomment-170147040,1,['interface'],['interface']
Integrability,"AN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_UBSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=undefined -fno-omit-frame-pointer""); - else(); - message(WARNING ""UBSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; -if(ENABLE_MSAN); - if((CMAKE_CXX_COMPILER_ID MATCHES Clang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES AppleClang) OR; - (CMAKE_CXX_COMPILER_ID MATCHES GNU)); - set(CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -fsanitize=memory -fno-omit-frame-pointer""); - else(); - message(WARNING ""MSAN flags are not known for your compiler ${CMAKE_CXX_COMPILER_ID}""); - endif(); -endif(); -; diff --git a/cmake/psi4OptionsTools.cmake b/cmake/psi4OptionsTools.cmake; index 024e66285..f95c5081b 100644; --- a/cmake/psi4OptionsTools.cmake; +++ b/cmake/psi4OptionsTools.cmake; @@ -74,7 +74,7 @@ endmacro(); include(CheckCCompilerFlag); include(CheckCXXCompilerFlag); if(CMAKE_Fortran_COMPILER); - include(CheckFortranCompilerFlag) # CMake >= 3.3, so local copy in cmake/; + include(CheckFortranCompilerFlag); endif(); ; #The guts of the next two functions, use the wrappers please; @@ -95,6 +95,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); break(); endif(); unset(test_option CACHE); + set(CMAKE_REQUIRED_FLAGS ""${flag_i}""); if(${is_C} EQUAL 0); CHECK_C_COMPILER_FLAG(""${flag_i}"" test_option); set(description_to_print CMAKE_C_FLAGS); @@ -117,6 +118,7 @@ set(CMAKE_REQUIRED_QUIET_SAVE ${CMAKE_REQUIRED_QUIET}); message(STATUS ""${msg_base} Failed""); endif(); endif(); + unset(CMAKE_REQUIRED_FLAGS); endforeach(); set(CMAKE_REQUIRED_QUIET ${CMAKE_REQUIRED_QUIET_SAVE}); endmacro(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/845#issuecomment-343290538:5022,wrap,wrappers,5022,https://psicode.org,https://github.com/psi4/psi4/pull/845#issuecomment-343290538,2,"['message', 'wrap']","['message', 'wrappers']"
Integrability,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:765,depend,depending,765,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['depend'],['depending']
Integrability,"According to the docs (https://psicode.org/psi4manual/master/autodir_options_c/module__ccenergy.html#cachelevel), the maximum value of cachelevel is 6. This is wrong, trying to use a cachelevel of 6 or 5 results in an invalid cachelevel error message. The largest cachelevel that appears to work is 4.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2701:243,message,message,243,https://psicode.org,https://github.com/psi4/psi4/issues/2701,1,['message'],['message']
Integrability,"Actually, I think this might be a bigger problem. I was able to fix the issue with 'flags' by replacing some code in /lib/python/inputparser.py. ```; future_re = re.compile('^from __future__ import .*$',flags=re.MULTILINE); temp = future_re.sub(future_replace, temp); #temp = re.sub('^from __future__ import .*$', future_replace, temp, flags=re.MULTILINE); ```. but then I get this other error message (even with the newest commit):. ```; Traceback (most recent call last):; File ""<string>"", line 6, in <module>; File ""/Users/francesco/Source/psi4/lib/python/aliases.py"", line 39, in <module>; from wrappers import *; File ""/Users/francesco/Source/psi4/lib/python/wrappers.py"", line 39, in <module>; from driver import *; File ""/Users/francesco/Source/psi4/lib/python/driver.py"", line 38, in <module>; from interface_cfour import *; File ""/Users/francesco/Source/psi4/lib/python/interface_cfour.py"", line 40, in <module>; import qcdb; File ""/Users/francesco/Source/psi4/lib/python/qcdb/__init__.py"", line 35, in <module>; from .molecule import Molecule; File ""/Users/francesco/Source/psi4/lib/python/qcdb/molecule.py"", line 39, in <module>; from .libmintsmolecule import *; File ""/Users/francesco/Source/psi4/lib/python/qcdb/libmintsmolecule.py"", line 31, in <module>; from oldpymodules import OrderedDict; ImportError: No module named oldpymodules; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/169#issuecomment-133175539:394,message,message,394,https://psicode.org,https://github.com/psi4/psi4/issues/169#issuecomment-133175539,3,"['message', 'wrap']","['message', 'wrappers']"
Integrability,"Actually, for the build I just tried, the real source of the error was in libdpd, which now includes libmints/mints.h, which includes (through basisset.h) libint.h. Since the libdpd/Makefiles.txt did not list mints as a dependency, the compilation tried to build libdpd before the libint header was ready, hence the crash. Running a test with the proper dependency in place now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/219#issuecomment-173202821:220,depend,dependency,220,https://psicode.org,https://github.com/psi4/psi4/issues/219#issuecomment-173202821,2,['depend'],['dependency']
Integrability,Add DF-DCFT warning messages.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1580:20,message,messages,20,https://psicode.org,https://github.com/psi4/psi4/pull/1580,1,['message'],['messages']
Integrability,Add Not Implemented Messages in DCT,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1518:20,Message,Messages,20,https://psicode.org,https://github.com/psi4/psi4/pull/1518,1,['Message'],['Messages']
Integrability,Add SAPT0-D routines,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081:12,rout,routines,12,https://psicode.org,https://github.com/psi4/psi4/pull/2081,1,['rout'],['routines']
Integrability,Add Spec. Rot. Origin Dependence Psivar,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2451:22,Depend,Dependence,22,https://psicode.org,https://github.com/psi4/psi4/pull/2451,1,['Depend'],['Dependence']
Integrability,Add deprecation message to schmidt_add in libqt,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2822:16,message,message,16,https://psicode.org,https://github.com/psi4/psi4/pull/2822,1,['message'],['message']
Integrability,Add pb11 dependency to modules that use DIIS,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2387:9,depend,dependency,9,https://psicode.org,https://github.com/psi4/psi4/pull/2387,1,['depend'],['dependency']
Integrability,Add point group information to FCIDUMP interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:39,interface,interface,39,https://psicode.org,https://github.com/psi4/psi4/pull/1942,1,['interface'],['interface']
Integrability,Add point group information to FCIDUMP interface (2),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951:39,interface,interface,39,https://psicode.org,https://github.com/psi4/psi4/pull/1951,1,['interface'],['interface']
Integrability,Add routine to automate computation of MBIS volume ratios,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127:4,rout,routine,4,https://psicode.org,https://github.com/psi4/psi4/pull/2127,1,['rout'],['routine']
Integrability,Add saving for T-amplitudes to the QCSchema wrapper.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2328:44,wrap,wrapper,44,https://psicode.org,https://github.com/psi4/psi4/pull/2328,1,['wrap'],['wrapper']
Integrability,Added virtual functions to UKS and RKS to override the soscf_update of UHF and RKS. The result is that calling soscf_update on these functions will now fail with an error message instead of a set fault. Also cleaned up the SOSCF logic a bit. This PR is ready to be merged if everything passes. Fixes #256.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/258:171,message,message,171,https://psicode.org,https://github.com/psi4/psi4/pull/258,1,['message'],['message']
Integrability,"Adding breaking calls to exceptions, I suspect the proper `build/build_becke/build_treutler` functions are never called?!; At this point I don't know either what is going on. The file is too long and confusing, including the `hack` routines that survived.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-737505178:232,rout,routines,232,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-737505178,1,['rout'],['routines']
Integrability,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648#issuecomment-286957146:95,message,message,95,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146,2,['message'],['message']
Integrability,"Additional testing confirms that the error message I reported in my last message displays regardless of whether this fix is in place. This should be investigated in more detail later, but it's outside the scope of this PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825:43,message,message,43,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414416825,2,['message'],['message']
Integrability,Adds Ambit external interface,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:20,interface,interface,20,https://psicode.org,https://github.com/psi4/psi4/pull/265,1,['interface'],['interface']
Integrability,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:105,interface,interface,105,https://psicode.org,https://github.com/psi4/psi4/pull/265,2,['interface'],['interface']
Integrability,"Admittedly I can't support this (I see what Andy sees), but I think there are many cases where the coefficients change between optimized and unoptimized general contractions. Also, Distelli just doesn't acknowledge this PR. It's built others recently, so I don't know what its problem is. Can override again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/728#issuecomment-307928747:161,contract,contractions,161,https://psicode.org,https://github.com/psi4/psi4/pull/728#issuecomment-307928747,1,['contract'],['contractions']
Integrability,"Admittedly the error message should be updated to be more informative, but; the short answer is a single atom doesn't have a vibrational frequency. More generally any molecular system has 3 times the number of atoms, total; degrees of freedom; the difference between that and the number of external; degrees of freedom is the internal degrees of freedom, i.e. the; vibrations. An atom has three external degrees of freedom and thus in turn; has 0 internal degrees of freedom. Hope that helps.; On Mar 31, 2016 8:07 PM, ""drhaney"" notifications@github.com wrote:. > Attempting frequency() on atomic species fails irrespective of charge,; > multiplicity, and reference type.; > ; > Typical error message:; > ; > 1 displacements needed.; > 1; > ; > An error has occurred. Traceback:; > : basic_string::replace: File """", line 26, in; > ; > File ""/home/drhaney/miniconda/share/psi4/python/driver.py"", line 1840, in; > frequency; > psi4.thermo(wfn, wfn.frequencies()); > ; > Thanks,; > -drhaney, -- that's ""D. R."", not Doctor.; > ; > Typical input file attached (C atom, neutral triplet).; > C.txt https://github.com/psi4/psi4/files/198782/C.txt; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/332",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/332#issuecomment-204210196:21,message,message,21,https://psicode.org,https://github.com/psi4/psi4/issues/332#issuecomment-204210196,2,['message'],['message']
Integrability,"After @andysim 's fix I get a normal print; ```; MO spaces... FC OCC VIR FV; ----------------------; 36 91 567 0. Number of basis functions in the DF-CC basis: 2548. Available memory : 61440.00 MB; Memory requirement for 3-index ints : 7413.66 MB; Memory requirement for DF-CC int trans: 23261.99 MB; Memory requirement for CC contractions: 60934.08 MB; Warning: T2 amplitudes will be stored on the disk!; Memory requirement for Wabef term : 34201.37 MB; ```. Though the calculation exceeds my 64 GiB RAM in the end. @kaljugit wow, looks like you went deep!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878:327,contract,contractions,327,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561549878,1,['contract'],['contractions']
Integrability,"After a discussion, the plan is to:. * Implement SymmDFJK vs PackedDFJK logic in the DFJK constructor, thus requiring memory and wK info at initialization time that we don't now.; * Overload the constructor so that there's a default and an elaborate signature; * For methods that require PackedDFJK because of downstream data structure assumptions, that will be handled in proc.py with a force_*dfjk flag passed to scf_helper; * SymmDFJK aka Matt's will be named MemDFJK. PackedDFJK aka Rob's will be named DiskDFJK. since the actual implementations aren't as orthogonal as those names suggest, references/more explicit explanations will be in HF and/or SCF_TYPE docstrings; * `SCF_TYPE` option will have three relevant choices; * `DF` formerly went to Rob's code. now will choose the best DFJK from available info. will be conservative on memory estimation; * `MEM_DF` will always go to Matt's code so that a user can test both or be smarter than the logic depending on known hardware/mem considerations; * `DISK_DF` will always go to Rob's code; * The read_options docstring for SCF_TYPE will label the MEM_DF and DISK_DF as expert choices; * In future, other algorithms will follow similar DF|MEM_DF|DISK_DF options in their MTD_TYPE algorithm controllers. Any further ideas on labeling these things welcome. @CDSherrill . Edits:. * `SymmDF` and `DFHelper` classes shall go to Pascal case",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-382894140:958,depend,depending,958,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-382894140,1,['depend'],['depending']
Integrability,"After a recent git pull, psi4 failed to compile. It seems that the error was likely introduced in commit 0d0d1f9 ""Reworked exception printing in Psi so all Python Exceptions raise to stdout and psi out"". If I revert to the commit just before this I'm able to compile. . If it helps, I'm running Ubuntu, with gnu compilers. . Here's the error message: . `/home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_local_option_array(const string&, const string&, const pybind11::list&, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:786:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc: In function ‘bool py_psi_set_global_option_array(const string&, pybind11::list, psi::DataType*)’:; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:13: error: ‘isinstance’ is not a member of ‘py’; if (py::isinstance<py::list>(values[n])) {; ^; /home/nmayhall/qcSoftware/psi4/psi4.inv.git/psi4/src/core.cc:834:36: error: expected primary-expression before ‘>’ token; if (py::isinstance<py::list>(values[n])) {; ^; src/CMakeFiles/core.dir/build.make:374: recipe for target 'src/CMakeFiles/core.dir/core.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/core.cc.o] Error 1; make[5]: *** Waiting for unfinished jobs....; ^Csrc/CMakeFiles/core.dir/build.make:86: recipe for target 'src/CMakeFiles/core.dir/export_mints.cc.o' failed; make[5]: *** [src/CMakeFiles/core.dir/export_mints.cc.o] Interrupt; CMakeFiles/Makefile2:208: recipe for target 'src/CMakeFiles/core.dir/all' failed; make[4]: *** [src/CMakeFiles/core.dir/all] Interrupt; Makefile:127: recipe for target 'all' failed; make[3]: *** [all] Interrupt; CMakeFiles/psi4_core.dir/build.make:111: recipe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/536:342,message,message,342,https://psicode.org,https://github.com/psi4/psi4/issues/536,1,['message'],['message']
Integrability,"After https://github.com/psi4/psi4/issues/86 and https://github.com/psi4/psi4public/issues/110 settled, ; - [ ] create conda package with python 3.4. Should be as simple as changing the `conda-recipe/psi4/meta.yaml` dependencies.; - [ ] add to Psinet's duties by modifying/copying stuff in nightly folder so package built nightly and results sent to testboard",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/111:216,depend,dependencies,216,https://psicode.org,https://github.com/psi4/psi4/issues/111,1,['depend'],['dependencies']
Integrability,"After the changes in #2254, the input fails with; ```. psi4.driver.qcdb.exceptions.ValidationError: Gaussian94BasisSetParser::parse: Unable to match an exponent with one contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02. Printing out the relevant lines from the Psithon --> Python processed input file:; """"""; return basstrings; qcdb.libmintsbasisset.basishorde['ANONYMOUSF8B47625'] = basisspec_psi4_yo__anonymousf8b47625; core.set_global_option(""BASIS"", ""anonymousf8b47625""); core.set_global_option(""STABILITY_ANALYSIS"", ""check""); --> energy('scf'). !----------------------------------------------------------------------------------!; ! !; ! Gaussian94BasisSetParser::parse: Unable to match an exponent with one !; ! contraction: line 4: 1 3.386500000000E+01 2.549380000000E-02 !; ! !; !----------------------------------------------------------------------------------!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081:170,contract,contraction,170,https://psicode.org,https://github.com/psi4/psi4/issues/2253#issuecomment-882953081,2,['contract'],['contraction']
Integrability,"Agreed we'll catch it and print a clear message. However, I'm thinking of a user sending a list of molecules that includes some atoms through the optimizer, and so whether this is an ""error"", and if ""false"" is going to interrupt desirable processes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787:40,message,message,40,https://psicode.org,https://github.com/psi4/psi4/issues/2971#issuecomment-1568719787,1,['message'],['message']
Integrability,"Ah I see your next message now. Yes, I agree it'd be nice if all defaults were consistent, but that'd mean nothing could be df. The last table at docs/introduction/capabilities can show what defaults to df and what to conventional. Admittedly casscf/rasscf aren't on there as I didn't get to them in my last testing push.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487:19,message,message,19,https://psicode.org,https://github.com/psi4/psi4/issues/2883#issuecomment-1440883487,1,['message'],['message']
Integrability,"Ah, did you `cmake ... -DOpenMP_CXX_LIBRARY_DIRS=/path/to/...` and it built successfully or you hard-coded it in `FindMathOpenMP.cmake`? No action needed in psi4 (besides some documentation) for the former, but I can imagine a route by which it fails by working the first time failing the second time b/c the hint var isn't forwarded. BTW, the ultimate test of whether this works is if `ldd -v .../psi4/core.so | grep gomp` comes back empty.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135:227,rout,route,227,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396757135,1,['rout'],['route']
Integrability,"Ah, the plan is to have only official releases through `conda install psi4 -c psi4`. Any nightly build will be through `conda install psi4 -c psi4/label/dev [-c psi4]` (bracketed part needed if any QC dependencies need to be got from the main psi4 channel). This is in the docs, but not any that have built yet :-). So next week there'll be a 1.1 on main psi4 channel. We're gearing up for `1.1rc2` now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-301264612:201,depend,dependencies,201,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-301264612,1,['depend'],['dependencies']
Integrability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:1251,interface,interfaces,1251,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,1,['interface'],['interfaces']
Integrability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:38,wrap,wrapper,38,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,1,['wrap'],['wrapper']
Integrability,"Ah, yes, c-f vs. defaults is a likely cause. There are a couple ways to deal with mixing psi4 and c-f deps, but none that's simple, robust, and a one-liner. Whatever you do, `blas=*=mkl` is a must with c-f and psi. Then you can (1) maintain two channels for the two bases and mix them at the PYTHONPATH level, (2) start an env with a defaults + psi4 install, then install additional packages from c-f, (3) use an env spec file mixes a known safe combination of psi4 and c-f packages. This is admittedly aggravating for an ordinary request. It should get better soon, as I'm working on c-f packaging (there have been dependency blocks up until about a month ago). I can try to interpret any roadblocks you hit in the meantime. > reluctant to have a separate conda installation). Just to be clear, you wouldn't need a separate conda _installation_; only a separate conda _environment_.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742:616,depend,dependency,616,https://psicode.org,https://github.com/psi4/psi4/issues/2898#issuecomment-1468556742,1,['depend'],['dependency']
Integrability,"Ah, yes, that did indeed slip my mind. Thank you for the reminder!. Here's how I would interpret it. First, I agree with Andy that, in the phrase ""Loop over all mu's in significant ""bra""-shell pairs"", significant refers to significant specifically in the given block. In the original paper, the entire Algorithm presented in Figure 1 is contained within an outer loop - ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"". This outer loop traverses the different types of shell pair blocks present in the calculation, e.g., |ss>, |ps>, |pp>, etc. (Note that the loop also separates different shell pair types of the same angular momenta by the contraction degrees of the shells in the shell pair). Then, for a given shell pair type (say, using |ps> as an example), the algorithm will be conducted. For the step ""Loop over all mu's in significant ""bra""-shell pairs"", the loop would be over all shells mu that are present in a significant shell pair of the given shell pair type. Using our example, the loop would be over all shells mu that are present in a significant |ps> shell pair. Something to reinforce this interpretation, is this line from the LinK paper, providing a definition to the condition used in the preselection step:; ""Here (mu_max | mu_max)^1/2 denotes the maximum over all integral estimates **of this shell-pair type**, (mu lambda | mu lambda)^1/2, that involve shell mu"" (emphasis mine).; The shell pair type mentioned in the definition refers to the outer loop discussed earlier, i.e., looping over shell pairs with the same angular momenta and contraction degrees. So, (mu lambda | mu lambda)^1/2 would be an integral estimate for shell pair |mu lambda>, and (mu_max | mu_max)^1/2 for shell mu would be the largest integral estimate associated with mu such that |mu lambda> is a shell pair of the shell pair type being worked on. . This interpretation leaves two questions. First, what does the line ""Note that before starting with the loop structure desc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867:405,contract,contraction,405,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1033174867,2,['contract'],['contraction']
Integrability,"All good points from Zach. I slightly prefer map return style; it makes it more transparent that the `Localizer` class is a glorified wrapper on the `localize` function. But my opinions are loosely held. Incidentally, `localize_task` should be `localize` for sake of consistency.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-998196766:134,wrap,wrapper,134,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-998196766,1,['wrap'],['wrapper']
Integrability,All newlines are removed in favour of a making a single long string that can be easily wrapped.; But one could instead wrap all lines of the error message separately to preserve these kind of formatted errors?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739:87,wrap,wrapped,87,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613327739,3,"['message', 'wrap']","['message', 'wrap', 'wrapped']"
Integrability,"All planned functionals added, and the full test suite is clean after the ft97 fix upstream (thanks!). CI expected to pass. What remains for this is modernizing the tweak/omega interface from c.2018 to c.2021 via named parameter setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051:177,interface,interface,177,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-756317051,1,['interface'],['interface']
Integrability,"All right, I moved the location of the `FORCE_PEDANTIC` definition, as per the suggestion of @loriab. This seems to work, as when I compile a local instance of this Psi4 branch with an internally-built IntegratorXX, it now compiles, whereas it did not previously.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402:202,Integrat,IntegratorXX,202,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018100402,1,['Integrat'],['IntegratorXX']
Integrability,"All right, blanket deprecated `ERISieve`!. ... but there's a catch. It seems the compiler complains when trying to use `PSI_API` and `PSI_DEPRECATE(""message"")` together on the same class. I essentially had to hand-insert the associated macros to get the code to compile.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438:149,message,message,149,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527976438,1,['message'],['message']
Integrability,"All tests ran through except for:; FAILED tests/fsapt1/test_input.py::test_fsapt1 - AssertionError: Traceback (most recent call last):; with the message:; E !----------------------------------------------------------------------------------!; E ! !; E ! Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to !; E ! do in-core! Increase the amount of memory allocated to Psi4 or allow for !; E ! out-of-core to be used. !; E ! Error occurred in file: /home/conda/feedstock_root/build_artifacts/psi4nm_171103 !; E ! 8779956/work/psi4/src/psi4/lib3index/dfhelper.cc on line: 261 !; E ! The most recent 5 function calls were: !; E ! psi::PsiException::PsiException(std::__cxx11::basic_string<char, !; E ! std::char_traits<char>, std::allocator<char> >, char const*, int) !; E ! psi::DFHelper::initialize() !; E ! !; E !----------------------------------------------------------------------------------!. I think this is independent of this PR and the PR would be good to go",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817:145,message,message,145,https://psicode.org,https://github.com/psi4/psi4/pull/3148#issuecomment-2013170817,1,['message'],['message']
Integrability,"All the AM comparisons changed back from (fb42b53) in https://github.com/loriab/psi4/commit/79c7f2248831cb2f7323cf93eebf7d26ec06bb7b . Also, insufficient AM messages updated. I tested it systematically, so I have confidence in the current settings, but if there was evidence in favor of the fb42b53 logic, I'd like to know it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-241014675:157,message,messages,157,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-241014675,1,['message'],['messages']
Integrability,"All the CTests have passed, except two that are not related to this PR; 1.) sapt7 (Error Message: `'psi4.core.UHF' object has no attribute 'diis_manager'`). 2.) scf-cholesky-basis (Error message: `Energy with Cholesky 1e-7: computed value (-230.6415254470) does not match (-230.6415254327) to atol=1e-08 by difference (-0.0000000142).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560:89,Message,Message,89,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-946304560,2,"['Message', 'message']","['Message', 'message']"
Integrability,"All was well on psi4/psi4 circa 7913b38 early morning 15 Nov, but after pub/priv sync, by early morning 16 Nov, fresh recursive clones (`git clone --recursive https://github.com/psi4/psi4.git`) are giving errors; like below. @robertodr, could you check that the current submodule reference is what it ought it be? Thanks. ```; Cloning into 'psi4'...; ...; Resolving deltas: 100% (80379/80379), done.; Submodule 'interfaces/pcmsolver' (https://github.com/PCMSolver/pcmsolver.git) registered for path 'interfaces/pcmsolver'; Cloning into 'interfaces/pcmsolver'...; ...; Resolving deltas: 100% (13625/13625), done.; fatal: reference is not a tree: 9bc8e049f14260a4c1b4b2bda898a16850907b1c; Unable to checkout '9bc8e049f14260a4c1b4b2bda898a16850907b1c' in submodule path 'interfaces/pcmsolver'; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/189:412,interface,interfaces,412,https://psicode.org,https://github.com/psi4/psi4/issues/189,4,['interface'],['interfaces']
Integrability,"Already [known and fixed](https://github.com/psi4/psi4/pull/1607) in the developer version of Psi. We're planning to release a v1.3.2 with the fix soon, though I don't have an estimate of when ""soon"" is. In the meantime, you can either downgrade NumPy, as mentioned, or use the developer version. Precise instructions on how to use the developer version depend on how you installed Psi in the first place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542:354,depend,depend,354,https://psicode.org,https://github.com/psi4/psi4/issues/1610#issuecomment-487277542,2,['depend'],['depend']
Integrability,"Also fails with `set diag_method mitrushenkov`. Not completely surprised as the `olsen` and `mitrushenkov` methods have not been tested since this was integrated into Psi4 from Psi3 as far as I know. Its a bit of strange error in debugging as it looks like the H0 block was not initialized even though it was. Ill look into when I have time, but thats not likely to be soon. Do you really want something besides Davidson iterations or is this just a report that it doesn't work?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/559#issuecomment-271455005:151,integrat,integrated,151,https://psicode.org,https://github.com/psi4/psi4/issues/559#issuecomment-271455005,1,['integrat'],['integrated']
Integrability,"Also, I would replace all the inverse functions with calls to the same routines in `orthog.cc`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2652#issuecomment-1199856872:71,rout,routines,71,https://psicode.org,https://github.com/psi4/psi4/issues/2652#issuecomment-1199856872,1,['rout'],['routines']
Integrability,"Also, `set_tweak` could be made completely general; since the libxc interface has been unified, the only thing you need to do is check that the number of parameters given to the functional is correct.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-610234611:68,interface,interface,68,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-610234611,1,['interface'],['interface']
Integrability,"Alternatively to the [separate libtool build of libint2](https://github.com/psi4/psi4/pull/1721#issuecomment-537945417), you can build a Libint2 externally with cmake or internal to psi4. 1. Get some extra dependencies `conda install boost mpfr eigen ninja`. Only header-only parts of Boost are used. Eigen is needed for the l2 c++ interface. Ninja is because l2 now makes files with weird enough names that when the get written to `Makefile`s, `make` can't process them. EFV is strongly recommending Ninja, too. . 2. Make sure a Libint1 package is **not** in your conda environment. Even if you're properly pointing to a `Libint1_t`-modified l1 via `-DLibint_DIR`, the compiler will still find those conventional Libint1 headers in `$CONDA_PREFIX`. If you have `psi4-dev` installed, `conda remove libint --force` to remove libint(1) but keep `psi4-path-advisor`. 3. In https://github.com/loriab/psi4/blob/libint2/external/upstream/libint2/CMakeLists.txt and https://github.com/loriab/psi4/blob/libint2/psi4/CMakeLists.txt, there are three `CHOOSE!` toggles between detect-prebuilt-libtool-l2 or detect-or-build-pure-cmake-l2. Comment out the one in each pair you don't need. 4. Normal cmake configuration of Psi4 into a new objdir. I recommend tacking on the following `-DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS=""-O0"" -DMAX_AM_ERI=5 -DBOOST_ROOT=$CONDA_PREFIX -DMPFR_ROOT=$CONDA_PREFIX -DEigen3_DIR=$CONDA_PREFIX/share/eigen3/cmake/`. The `MAX_AM_ERI` only controls Libint1. The Libint2 MAX_AMs are set [here](https://github.com/psi4/psi4/pull/1721/files#diff-3cbeb175ac8e4122ee11133c203e49b4R32). On command-line, modify by e.g., `-DENABLE_ERI=1 -DWITH_ERI_MAX_AM=""5;4"" -DENABLE_ERI3=0 -DWITH_ERI3_MAX_AM=5`. 5. Build. The downloading source for library step will take a loooong time because that's when it's running the generator. Don't disrupt it during this step or it'll start over. The first time you build through this procedure, you may want to turn Hessians off and A",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901:206,depend,dependencies,206,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-538130901,2,"['depend', 'interface']","['dependencies', 'interface']"
Integrability,"An error which is very high on my to-fix list, but where the fix is very involved. DF-DCT properties as present are not correct. I've tested against my own Python code and the Psi code and found disagreements in the fifth and sixth decimal place between finite difference and analytic properties. I've spoken with the code authors, and we are aware of two sources of disagreement.; 1. For gradients, the RDMs are contracted against the conventional derivative integrals, not the density fitted derivative integrals.; 2. Due to a subtle point in the derivation, the DF-DCT cumulant stationarity conditions are not variational minimization of the energy, as they are in conventional DCT. Accordingly, you're missing a cumulant response term for gradients and other properties. The fix for point 1 will hopefully just be marking the wavefunction as density fitted and leave the contractions to the `Deriv` object. However, DCT at present interferes with RDM processing in `libtrans`, so the fix will be likely be more involved. The fix for point 2 is not clear. I'm aware of three options:; * Change the DF-DCFT stationarity conditions to be variational minimization of the energy; * Change which terms are to be contracted against JKFIT integrals and which against RIFIT integrals, so the stationarity conditions are ""fixed"" automatically; * Add a cumulant response term. (Please don't make me do this.). I favor option B, but it'll take time to see what B does to energies.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579:413,contract,contracted,413,https://psicode.org,https://github.com/psi4/psi4/issues/1579,3,['contract'],"['contracted', 'contractions']"
Integrability,And I suppose now there's a dependency question: how do we feel about making `scipy` a dependency? That's why tests fail on test environment but full tests passed locally.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198:28,depend,dependency,28,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1012171198,2,['depend'],['dependency']
Integrability,"And yeah, I was planning to file a ticket in here that ADIIS should be implemented. It is already available in ERKALE and I think PySCF, also, although I think PySCF also has EDIIS and I'm not sure whether either is enabled in the SCF. PySCF is in my experience excellent at finding convergent solutions to a problem; using spherical symmetry in the SAD code is an essential feature. The only issue I found recently is that DIIS in PySCF does not treat linear dependencies properly, which means that whenever you have overcompleteness, the code doesn't find the correct solution. https://github.com/pyscf/pyscf/issues/1000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682:460,depend,dependencies,460,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-874462682,1,['depend'],['dependencies']
Integrability,"Another instance of triggering the same ""Failed to converge"" print message, carried forward from [the forums](http://forum.psicode.org/t/failed-to-converge-error/1811). ```; memory 48 Gb. molecule {; 0 1; Au 0.456697 -1.333264 0.040916; C 2.603870 -0.838096 0.229755; H 2.763370 -0.719170 1.301892; C 2.477106 -2.135791 -0.222006; H 2.550111 -2.348345 -1.284567; H 2.591715 -2.990149 0.439107; B 2.865868 0.484463 -0.740811; F 1.800945 0.626222 -1.684345; F 2.929814 1.631672 0.055078; F 4.060740 0.285067 -1.428702. units angstrom; no_reorient; symmetry c1; }. set globals {; basis def2-svpd; }. energy('scf'); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737:67,message,message,67,https://psicode.org,https://github.com/psi4/psi4/issues/1856#issuecomment-638995737,1,['message'],['message']
Integrability,Another reason to move molecule parsing py side so can have nicer error messages and exceptions. Potentially also simplify efp initialization being all over the place.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/731#issuecomment-306527489:72,message,messages,72,https://psicode.org,https://github.com/psi4/psi4/issues/731#issuecomment-306527489,1,['message'],['messages']
Integrability,"Any chance at all that there's an old (what p4 used until maybe a month ago) pybind11 2.2.0 anywhere conceivably detectable, including in a conda env where other p4 dependencies are detected? CMake is perfectly capable of finding the pb11 you want and then C++ header detection takes over and finds the pb11 you _don't_ want. EDIT: **2.0.0**, not 2.2.0; Further EDIT: it does look like gcc7 is the highest they regularly test https://travis-ci.org/pybind/pybind11/builds/375778661?utm_source=github_status&utm_medium=notification",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831:165,depend,dependencies,165,https://psicode.org,https://github.com/psi4/psi4/issues/1013#issuecomment-388214831,1,['depend'],['dependencies']
Integrability,"Any computation that attempts to compute frequencies of a density fitted method will crash unless the symmetry is explicitly set to c1. Gradients do not have this problem. The below input file demonstrates the problem and has been taken from the test cases. The only modifications are changing gradients to frequencies and CCSD(T) to MP2. The bug is there with both methods, and also CCSD. I haven't checked other DF methods. ```; #! DF-MP2 cc-pVDZ energy for the H2O molecule. molecule h2o {; 0 1; o; h 1 0.958; h 1 0.958 2 104.4776 ; }. set {; basis cc-pvdz; df_basis_scf cc-pvdz-jkfit; df_basis_cc cc-pvdz-ri; scf_type df; guess sad ; freeze_core true; cc_type df; qc_module occ ; }. frequencies('mp2', dertype=0); ```; The crash gives the following error message:; ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/bin/psi4"", line 264, in <module>; exec(content); File ""<string>"", line 36, in <module>; File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1774, in frequency; H, wfn = hessian(lowername, return_wfn=True, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 1595, in hessian; E, wfn = energy(lowername, return_wfn=True, molecule=moleculeclone, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/driver.py"", line 492, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 858, in select_ccsd_t_; return func(name, **kwargs); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/procrouting/proc.py"", line 1608, in run_dfocc; ""RIFIT"", core.get_global_option(""BASIS"")); File ""/Users/jonathonmisiewicz/psi4/objdir2/stage/usr/local/psi4/lib/psi4/driver/p4util/python_helpers.py"", line 99, in pybui",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1093:759,message,message,759,https://psicode.org,https://github.com/psi4/psi4/issues/1093,1,['message'],['message']
Integrability,"Anything involving tensor contractions is just moving code around, and isn't something I'm worried about. Test updates, I'm confident are correct. Things worth checking:; * Code readability; * Nothing obviously suspicious in the DIIS call or setup in `occ_iterations`; * `opt-irc-2`, are we okay punting on this until PyOptking?. It may also be worth letting @susilehtola have a look, since he has experience with OO. Now that I type this out, it occurs to me that I may also need to change some of the DIIS keywords along with the DIIS behavior change... As I recall, UB had separate keywords for OO or non-OO DIIS.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916:26,contract,contractions,26,https://psicode.org,https://github.com/psi4/psi4/pull/1846#issuecomment-596133916,1,['contract'],['contractions']
Integrability,"Apparently the problem is not completely fixed. Running (H2O)30 results in:. ```; 	MO spaces... . 	 FC OCC VIR FV ; 	----------------------; 	 30 120 570 0. 	Number of basis functions in the DF-CC basis: 2520. 	Available memory : 667572.02 MB ; 	Memory requirement for 3-index ints : 7838.47 MB ; 	Memory requirement for DF-CC int trans: 24103.73 MB ; 	Memory requirement for CC contractions: 142778.32 MB ; 	Total memory requirement for DF+CC int: 150616.79 MB ; 	Memory requirement for Wabef term : 49600.59 MB . Traceback (most recent call last):; File ""/users/damatthews/apps/psi4/bin/psi4"", line 289, in <module>; exec(content); File ""<string>"", line 121, in <module>; File ""/users/damatthews/apps/psi4/lib/psi4/driver/driver.py"", line 561, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 333, in select_mp3; return func(name, **kwargs); File ""/users/damatthews/apps/psi4/lib/psi4/driver/procrouting/proc.py"", line 1620, in run_dfocc; dfocc_wfn = core.dfocc(ref_wfn). MemoryError: std::bad_array_new_length; ```. Any ideas where to look next?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701:379,contract,contractions,379,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-562216701,1,['contract'],['contractions']
Integrability,"Apparently, the handling of correlated/non-correlated densities has been [inconsistent](http://forum.psicode.org/t/problems-with-wavefunction-object-and-fchk-interface/532/9) for some time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1475#issuecomment-454457029:158,interface,interface,158,https://psicode.org,https://github.com/psi4/psi4/pull/1475#issuecomment-454457029,1,['interface'],['interface']
Integrability,"Are there any special concerns needed to prevent linear dependencies from causing problems in the EDIIS/ADIIS extrapolation, or am I safe to use linearly dependent SO basis quantities?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538:56,depend,dependencies,56,https://psicode.org,https://github.com/psi4/psi4/issues/2235#issuecomment-937770538,2,['depend'],"['dependencies', 'dependent']"
Integrability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:615,depend,dependencies,615,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,1,['depend'],['dependencies']
Integrability,"Armadillo can be used without the wrapper without any problems. Personally I have problems understanding why the wrapper was implemented in the first place, it usually just is in the way. All that the wrapper does is link to the BLAS and LAPACK library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-446571835:34,wrap,wrapper,34,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-446571835,3,['wrap'],['wrapper']
Integrability,"As @hokru pointed out, this is because I forgot to define fragments in my system. Perhaps we should check for that in the n-body driver somehow and print a better error message?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743:169,message,message,169,https://psicode.org,https://github.com/psi4/psi4/issues/1649#issuecomment-493665743,1,['message'],['message']
Integrability,"As I recall, switching the to disk_jk does heal them. Forcing that does seem the best route, as we want to get this in tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/961#issuecomment-385258279:86,rout,route,86,https://psicode.org,https://github.com/psi4/psi4/pull/961#issuecomment-385258279,1,['rout'],['route']
Integrability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:531,depend,dependancies,531,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,1,['depend'],['dependancies']
Integrability,"As a note this is a perfect example where you probably want to squash commits so that the git history is more understandable. A quick rundown would be something like the following:. `git rebase -i HEAD~5`; Change the commits that you no longer want from `pick` to `squash`, save the file. See [here](https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Changing-Multiple-Commit-Messages) for more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176995836:384,Message,Messages,384,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176995836,1,['Message'],['Messages']
Integrability,"As commented in the forum, if the problem is df linear dependencies, then setting e.g. `df_fitting_condition 1e-7` should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1545#issuecomment-465248469:55,depend,dependencies,55,https://psicode.org,https://github.com/psi4/psi4/issues/1545#issuecomment-465248469,1,['depend'],['dependencies']
Integrability,"As far as I can tell, there should be enough memory available (360 GB given in the input, 1.3 TB on the machine) to keep many Fock matrices in memory here (which are 1.3 GB each). You might run out of memory if the implementation is storing matrices that have a higher scaling (e.g. N^3) or a higher prefactor in N^2. If this is the case, an error message could be helpful to users. I would be worried about a bug if the largest matrices that are kept in memory is supposed to be N_ao^2. Could be useful tracking it down if it means one can then run DF-calculations in Psi4 on systems with more than 10000 AOs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913:348,message,message,348,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-921605913,1,['message'],['message']
Integrability,"As of 0.2.287, conda binary is building chemps2 and properly downloading dependency hdf5 from defaults and gsl from copy of asmeurer's into psi4 channel. As of 0.2.291 (42175a9cc2a2ba082c33a676c0bc518125f5f445), conda binary is building dkh and properly linking _static_ Fortran libraries so no user PATH manipulations necessary. Checked, but please report if ever otherwise.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/154#issuecomment-126863294:73,depend,dependency,73,https://psicode.org,https://github.com/psi4/psi4/issues/154#issuecomment-126863294,1,['depend'],['dependency']
